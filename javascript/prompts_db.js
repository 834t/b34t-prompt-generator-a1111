window.PROMPT_GENERATOR_BASE_DB = {
    artists: {
      link: 'data:application/octet-stream;base64,',
      template: 'varTemplate1',
    },
    flavors:  {
      link: 'data:application/octet-stream;base64,aGlnaGx5IGRldGFpbGVkCnNoYXJwIGZvY3VzCmludHJpY2F0ZQpkaWdpdGFsIHBhaW50aW5nCmlsbHVzdHJhdGlvbgpvY3RhbmUgcmVuZGVyCnNtb290aAo4IGsKZWxlZ2FudAo4awpjaW5lbWF0aWMKNGsKZmFudGFzeQpjaW5lbWF0aWMgbGlnaHRpbmcKZGV0YWlsZWQKNCBrCnBob3RvcmVhbGlzdGljCnVucmVhbCBlbmdpbmUKbWFzdGVycGllY2UKcmVhbGlzdGljCmhkCmRyYW1hdGljIGxpZ2h0aW5nCnZvbHVtZXRyaWMgbGlnaHRpbmcKaGlnaCBkZXRhaWwKYmVhdXRpZnVsCmh5cGVycmVhbGlzdGljCmh5cGVyIGRldGFpbGVkCnBvcnRyYWl0CmhpZ2ggcXVhbGl0eQpoeXBlciByZWFsaXN0aWMKdWx0cmEgcmVhbGlzdGljCnVucmVhbCBlbmdpbmUgNQptYXR0ZSBwYWludGluZwp1bHRyYSBkZXRhaWxlZAphd2FyZCB3aW5uaW5nCm1hdHRlCmludHJpY2F0ZSBkZXRhaWxzCmVwaWMKaGRyCmV4dHJlbWVseSBkZXRhaWxlZAp2ZXJ5IGRldGFpbGVkCm9pbCBwYWludGluZwpkeW5hbWljIGxpZ2h0aW5nCmh5cGVyZGV0YWlsZWQKb2lsIG9uIGNhbnZhcwpoaWdoIHJlc29sdXRpb24Kc2hhcnAKc3R1ZGlvIGxpZ2h0aW5nCmRlcHRoIG9mIGZpZWxkCmh5cGVyIHJlYWxpc20KZnVsbCBib2R5CmNvbG9yZnVsCmRhcmsKY3liZXJwdW5rCm9jdGFuZQpjZW50ZXJlZApoaWdoIGNvbnRyYXN0CmJva2VoCmdsb2JhbCBpbGx1bWluYXRpb24KZHJhbWF0aWMKc3ltbWV0cmljYWwKZCAmIGQKaW50cmljYXRlIGRldGFpbAphdG1vc3BoZXJpYwpkJmQKZ29sZGVuIHJhdGlvCndpZGUgYW5nbGUKYW5pbWUKZ29sZGVuIGhvdXIKZGV0YWlsZWQgZmFjZQpydWxlIG9mIHRoaXJkcwpzdHVubmluZwp2aWJyYW50IGNvbG9ycwpzb2Z0IGxpZ2h0aW5nCnJheSB0cmFjaW5nCnBob3RvZ3JhcGh5CmVwaWMgY29tcG9zaXRpb24KcmFkaWFudCBsaWdodAo4ayByZXNvbHV0aW9uCmNpbmVtYXRpYyBjb21wb3NpdGlvbgpob3Jyb3IKdmlicmFudApibGFjayBhbmQgd2hpdGUKY2xvc2UgdXAKbWVkaXVtIHNob3QKb3JuYXRlCnBob3RvIHJlYWxpc3RpYwpwaG90bwp2aXZpZCBjb2xvcnMKOCBrIHJlc29sdXRpb24KdHJlbmRpbmcgb24gYXJ0IHN0YXRpb24KZnV0dXJpc3RpYwpoaWdoIGRldGFpbHMKaGlnaCBkZWZpbml0aW9uCnZvbHVtZXRyaWMgbGlnaHQKd2lkZSBzaG90Cm1vdmllIHN0aWxsCmVzdGFibGlzaGluZyBzaG90CnN1cnJlYWwKZ290aGljCjMgZCByZW5kZXIKdW5yZWFsIDUKcGhvdG9ncmFwaApzdW5zZXQKcGFpbnRpbmcKc2NpLWZpCnJpbSBsaWdodApoZWFydGhzdG9uZQpiZWF1dGlmdWwgbGlnaHRpbmcKYW1iaWVudCBsaWdodGluZwpzY2kgLSBmaQptb29keQpkaWdpdGFsIGlsbHVzdHJhdGlvbgpzeW1tZXRyaWNhbCBmYWNlCmVwaWMgbGlnaHRpbmcKZm9nCnNha2ltaWNoYW4KYmVhdXRpZnVsIGZhY2UKc29mdCBsaWdodApmaW5lIGRldGFpbHMKZGFyayBmYW50YXN5Cmdvcmdlb3VzCmRlZXAgZm9jdXMKbmlnaHQKMyBkCmVlcmllCmRhegpzaGFsbG93IGRlcHRoIG9mIGZpZWxkCjNkCmF0bW9zcGhlcmljIGxpZ2h0aW5nCnN5bW1ldHJ5CmN1dGUKc3R1ZGlvIHF1YWxpdHkKc2NpZmkKY2hpYXJvc2N1cm8KaW5zYW5lbHkgZGV0YWlsZWQKd2hpdGUgYmFja2dyb3VuZApuYXR1cmFsIGxpZ2h0CmRldGFpbHMKaGFyZCBlZGdlcwpjaGFyYWN0ZXIgZGVzaWduCmFydGlzdGljCmFzeW1tZXRyaWNhbApycGcgcG9ydHJhaXQKc3VubnkgZGF5CmV0aGVyZWFsCmJyaWdodCBjb2xvcnMKcmF5dHJhY2luZwpwZXJmZWN0IGZhY2UKZ29kIHJheXMKcHN5Y2hlZGVsaWMKMzVtbQpkcmFtYXRpYyBsaWdodApkeW5hbWljIHBvc2UKMyA1IG1tCnN0ZWFtcHVuawpmb2N1cwpleHRyZW1lIGRldGFpbApmdWxsIGJvZHkgc2hvdApsaWZlbGlrZQpvcmdhbmljIHBhaW50aW5nCmJhY2tsaXQKM2QgcmVuZGVyCm9jdGFuZSByZW5kZXJlZApuZW9uCmZvZ2d5CnVoZAo0ayByZXNvbHV0aW9uCmNpbmVtYXRpYyBzaG90CmJyZWF0aHRha2luZwpmdXJhZmZpbml0eQp0cmVuZGluZwpydXRrb3dza2kKbXV0ZWQgY29sb3JzCmF3YXJkIC0gd2lubmluZwpzY2FyeQpwcmV0dHkgZmFjZQpzdXBlciBkZXRhaWxlZApzbW9vdGggcmVuZGVyCnZyYXkKdml2aWQKYW5pbWUgc3R5bGUKdm9sdW1ldHJpYwpibGVuZGVyCmZpbG0gZ3JhaW4KcmVuZGVyZWQgaW4gb2N0YW5lCmNyZWVweQpoZWFkc2hvdApmaWxtIHN0aWxsCmxvdyBhbmdsZQpvbWlub3VzCmNpbmVtYXRpYyBsaWdodApoaWdoIGRldGFpbGVkCmZpbmFsIGZhbnRhc3kKZG5kCmJsb29tCnVsdHJhIHdpZGUgYW5nbGUKc3Vic3VyZmFjZSBzY2F0dGVyaW5nCnNtb2tlCmNvc3BsYXkKdmVyeSBjb2hlcmVudApzdHlsaXplZAp1bHRyYSBoZAp1bnJlYWwgZW5naW5lIDUgcmVuZGVyZWQKZmFjZQpibHVlIGV5ZXMKYWVzdGhldGljCmxlbnMgZmxhcmUKaW50cmljYXRlIGxpbmV3b3JrCmFydApmbG93ZXJzCm1pc3QKcmVmbGVjdGlvbnMKbG9uZyBoYWlyCndhbGxwYXBlcgp2aW50YWdlCmZvY3VzZWQKYXJ0IHN0YXRpb24KaW5zYW5lbHkgZGV0YWlsZWQgYW5kIGludHJpY2F0ZQpzbWlsaW5nCmV4dHJlbWVseSBoaWdoIGRldGFpbApsYW5kc2NhcGUKcHJvZmlsZSBwaWN0dXJlCndhdGVyY29sb3IKaHEKY2xvc2V1cAp1bHRyYXJlYWxpc3RpYwpjYXJ0b29uCm11c2N1bGFyCmRyZWFteQpoaWdoIGZhbnRhc3kKYXdhcmQgd2lubmluZyBwaG90bwptaW5pbWFsaXN0CjQgayByZXNvbHV0aW9uCm1hbGUKcmF3CmF3YXJkLXdpbm5pbmcKYmxhY2sgYmFja2dyb3VuZAptYW5nYQpyYWluCnBvc3RlcgpyZWFsaXN0aWMgc2hhZGVkIHBlcmZlY3QgZmFjZQpwcm9mZXNzaW9uYWwgcGhvdG9ncmFwaHkKY2xvdWRzCnBlcmZlY3QgY29tcG9zaXRpb24KcGFpbnRlcmx5CmdyYWlueQpzb2Z0IGZvY3VzCmlzbyAyMDAKZHNscgpyZW5kZXIKYXdhcmQgd2lubmluZyBwaG90b2dyYXBoeQptYWdpY2FsCmFic3RyYWN0CjEvMTYwcwpwb3N0LXByb2Nlc3NpbmcKc3RhbmxleSBhcnRnZXJtIGxhdQpjbGVhbgpicmlnaHQKcmVhbGlzdGljIGZhY2UKZHlzdG9waWFuCmRldGFpbGVkIGlsbHVzdHJhdGlvbgpkeW5hbWljCnNoYWRvd3MKaW50cmljYXRlIGNvbXBsZXhpdHkKNTBtbQptYWdpYwpubyBibHVyCnZhcG9yd2F2ZQptb29keSBsaWdodGluZwpleHRyZW1lIGRldGFpbHMKYm9sZCBzaGFwZXMKYXRtb3NwaGVyZQpkYXJrIGJhY2tncm91bmQKZmVtYWxlCmJlYXV0aWZ1bCBjb21wb3NpdGlvbgpib3VndWVyZWF1Cmdsb3dpbmcgbGlnaHRzCmNlbCBzaGFkZWQKcGFpbnRlZApzZW5zZSBvZiBhd2UKZnVsbCBvZiBjb2xvdXIKc3ltbWV0cmljYWwgZmFjaWFsIGZlYXR1cmVzCmZvcmVzdAptYWNybwpkZXRhaWxlZCBwYWludGluZwpzeW1tZXRyaWNhbCBiYWxhbmNlCnVsdHJhZGV0YWlsZWQKZ2xvdwpycGcKbW90aW9uIGJsdXIKZnVsbCBib2R5IHBvcnRyYWl0CnBhbGUgc2tpbgphbmltZSBrZXkgdmlzdWFsCnBhc3RlbCBjb2xvcnMKbXlzdGVyaW91cwpzeW50aHdhdmUKZGFyayBhdG1vc3BoZXJlCm5lby1nb3RoaWMKcmVhbGlzdGljIGxpZ2h0aW5nCm15c3RpY2FsCnNjaWVuY2UgZmljdGlvbgpjaW5lbWF0aWMgYXRtb3NwaGVyZQpzdGFycwpiZWhhbmNlIGhkCmR1bmdlb25zIGFuZCBkcmFnb25zCmYvMS40CnpicnVzaApmaW5lIGRldGFpbApzY2kgZmkKY29sb3VyZnVsCmFuYXRvbWljYWxseSBjb3JyZWN0CnJldHJvCmhpZ2hseSBkZXRhaWxlZCBwb3J0cmFpdAp3YXJtIGxpZ2h0aW5nCnVsdHJhIHJlYWxpc3RpYyBpbGx1c3RyYXRpb24KbW92aWUgcG9zdGVyCnVucmVhbCBlbmdpbmUgNSBoaWdobHkgcmVuZGVyZWQKY3J5ZW5naW5lCmZyb250IHZpZXcKY29udHJhc3QKbmF0dXJhbCBsaWdodGluZwpnb2RyYXlzCmRpZmZ1c2UgbGlnaHRpbmcKc3VucmlzZQpjb3NtaWMgaG9ycm9yCnJlYWxpc3RpYyBwYWludGluZwpwb3N0IHByb2Nlc3NlZApuZW9uIGxpZ2h0cwpjaGFyYWN0ZXIgYXJ0CmR5bmFtaWMgY29tcG9zaXRpb24KaHlwZXJtYXhpbWFsaXN0CnRob21hcyBraW5ka2FkZQplbGl0ZQp4ZiBpcTQKa29kYWNocm9tZQplZHdhcmQgaG9wcGVyIGFuZCBqYW1lcyBnaWxsZWFyZApzeW1tZXRyaWMKc3ltYm9saXN0CnBvd2VyZnVsCmdlb21ldHJpYyBzaGFwZXMKaGFwcHkKcGluY3VzaGlvbiBsZW5zIGVmZmVjdApjaGFyYWN0ZXIgcG9ydHJhaXQKcGF0aCB0cmFjZWQKYW1iaWVudCBvY2NsdXNpb24KbHV4dXJ5CmZpcmUKdHJlZXMKZ2xvb215CmVwaWMgc2NhbGUKaGVhdnkgZ3JhaW4KaHlwZXItcmVhbGlzdGljCndhdGVyCmpheWlzb24gZGV2YWRhcwpleHF1aXNpdGUgZGV0YWlsCmdvbGQKY2hhcmFjdGVyIHNoZWV0CnNvZnQKZ2xvd2luZwpibGFjayBoYWlyCmNpbmVtYXRpYyBsaWdodG5pbmcKdmVyeSByZWFsaXN0aWMKbG9uZyBzaG90CnJlYWxpc3RpYyBzaGFkaW5nCnVuZWRpdGVkCm5pZ2h0IHRpbWUKNSAwIG1tCnNtb290aCBncmFkaWVudHMKdml2aWQgY29sb3IKYXJjYW5lCmJsYWRlIHJ1bm5lcgphdSBuYXR1cmVsCm9jdG9wYXRoIHRyYXZlbGVyCnBvbGFyb2lkIHBob3RvCnVmb3RhYmxlCmJydXNoIHN0cm9rZQpoeXBlci1kZXRhaWxlZAphaXJicnVzaAppcmlkZXNjZW50CmJsdWUgc2t5CmJsYWNrCmZpbG0KbWlkLXNob3QKc2ltcGxlCnNwbGFzaCBhcnQKYW1iaWVudCBsaWdodApoeXBlciAtIHJlYWxpc3RpYwp2ZXJ5IGRldGFpbGVkIGZhY2UKbWFqZXN0aWMKYW1hemluZyBkZXRhaWwKY29tcGxleApzcGFjZQpmYW50YXN5IGFydHdvcmsKNGsgdWhkIGltYWdlCjE2awpoaWdobHkgZGV0YWlsZWQgZmFjZQpiZWF1dGlmdWwgZXllcwpqb2huc29uIHRpbmcKaHlwZXIgLSBkZXRhaWxlZApnbG93aW5nIGV5ZXMKaGQgcXVhbGl0eQpjZ2kKOGsgcGhvdG9yZWFsaXN0aWMKbW9kZXJuCnVwcGVyIGJvZHkKbWl0Y2hlbGwgbW9ocmhhdXNlcgp1bnJlYWwgZW5naW5lIDRrCmhhbmRzb21lCmRldGFpbGVkIHRleHR1cmVzCnBldGVyIGtvbmlnCmdyaXR0eQptYWRob3VzZQpwcmV0dHkKaGFyZCBsaWdodGluZwpjb2hlcmVudApkYXJrIHNoYWRvd3MKdGFyb3QgY2FyZAp3aWRlIGxlbnMKcm9zc2RyYXdzIGdsb2JhbCBpbGx1bWluYXRpb24Kcm9tYW50aWMKZnVsbCBjb2xvcgppbXByZXNzaW9uaXN0IHBhaW50aW5nCmJsdWUKb2ZmaWNpYWwgbWVkaWEKcmVhbGlzdGljIHNoYWRlZApzdGFyIHdhcnMKaXNvbWV0cmljCmRhdmlkIGxhemFyCmNvc21pYwpvY3RhbmUgcmVuZGVyaW5nCmFhcm9uIGhvcmtleQpwaG90b3JlYWwKY2VsbCBzaGFkZWQKbW9ub2Nocm9tZQpncmVlbiBleWVzCnZmeAptYXR0ZSBwcmludApzdXJyZWFsaXN0CmV2aWwKcmVkCnphYnJvY2tpCnBvbGFyb2lkCnJlYWwgbGlmZQpwZXJmZWN0IHN5bW1ldHJ5Cmt5b3RvIHN0dWRpbwphd2FyZCB3aW5uaW5nIHBob3RvZ3JhcGgKc2hhcnAgZm9jY3VzIGlsdXN0cmF0aW9uCmZhY2UgZW5oYW5jZQpmb29kIHBob3RvZ3JhcGh5CnJlZmluZWQKaW50ZW5zZQp1bHRyYSBkZXRhaWwKcGl4YXIgc3R5bGUKbWlzdHkKZG5kIGNoYXJhY3RlciBhcnQgcG9ydHJhaXQKdmlicmFudCBjb2xvciBzY2hlbWUKbGlnaHRpbmcKY2FsbQpiZWF1dGlmdWxseSBsaXQKc3R1ZGlvIGxpZ2h0CmFuYW1vcnBoaWMgbGVucyBmbGFyZQpmdWxsIG9mIGRldGFpbHMKZnVycnkKbGlnaHRuaW5nCmZ1bGwgcm91bmQgZmFjZQpsb3ZlY3JhZnRpYW4KaW50cmljYXRlbHkgZGV0YWlsZWQKc2hhcnAgaGlnaCBkZXRhaWwKdW5yZWFsIGVuZ2luZSByZW5kZXIKbWljcm8gZGV0YWlscwpvcmdhbmljCm92ZXJkZXRhaWxlZCBhcnQKcGxhaW4gYmFja2dyb3VuZApyZWFsaXN0aWMgcHJvcG9ydGlvbnMKd2hpdGUKZHVzdApjbG9zZS11cAphbmd1bGFyCjggayBoaWdoIGRlZmluaXRpb24KcGl4YXIgYW5kIGRpc25leSBhbmltYXRpb24Kc3VtbWVyIHZpYnJhbmN5CnByb2Zlc3Npb25hbApyZWdhbApjeWJvcmcKbmVvIC0gZ290aGljCmN5YmVybmV0aWMKZnVsbCBzaG90CmNhdXN0aWNzCmNpbmVtYSA0IGQKaGFyZCBmb2N1cwpwZW4gYW5kIGluawpjbGVhcgpleGNlbGxlbnQgY29tcG9zaXRpb24KcmFpbmluZwptYXJzIHJhdmVsbyBhbmQgZ3JlZyBydXRrb3dza2kKZ29vZCBsaWdodGluZwpzdXJyZWFsIHBob3RvZ3JhcGh5Cm11Y2ggd293CmFtYXppbmcKZGVsaWNhdGUKYXQgbmlnaHQKd2lyZXMKc29mdCBsaWdodHMKcHJvcHMKZ3J1bmdlIGFlc3RoZXRpYwpmcmFjdGFsCm1lZGlldmFsCnN0dWRpbyBwaG90b2dyYXBoeQpzaGlueQpkcmFtYXRpYyBwb3NlCmZhc2hpb24gcGhvdG9ncmFwaHkKb2ZmaWNpYWwgYXJ0CmNsb3NlIC0gdXAKZ3JhY2VmdWwKbWF0dGUgZmFudGFzeSBwYWludGluZwpoaWdobHkgZGV0YWlsZWQgZGlnaXRhbCBhcnQKZXBpYyBzY2VuZQpzdHVkaW8gcGhvdG8KZGV0YWlsZWQgZGlnaXRhbCBhcnQKb3ZlcndhdGNoCm5lYnVsYQp0ZXh0dXJlCnNjZW5lcnkKZGlnaXRhbAp0aGllcnJ5IGRvaXpvbgpmYW50YXN5IGNoYXJhY3RlciBwb3J0cmFpdApkb2YKY2Fub24KdHJlbmRpbmcgb24gYXJ0c3RhdGlvbiBocQoxNTBtcAppbnRyaWNhdGUgbGluZSBkcmF3aW5ncwptYWdpYyB0aGUgZ2F0aGVyaW5nCmlnbmFjaW8gZmVybmFuZGV6IHJpb3MKa2ltIGp1bmcgZ2kKdm9ndWUKcmVhbGlzdGljIHBob3RvCnN5bW1ldHJpY2FsIGV5ZXMKbW91bnRhaW5zCmZ1bGwgb2YgY29sb3IKOGsgaGlnaCBkZWZpbml0aW9uCmF0dHJhY3RpdmUKcGVyZmVjdCBsaWdodGluZwprYWkgY2FycGVudGVyCmF3YXJkIHdpbm5pbmcgYXJ0CmNoYXJhY3RlciBjb25jZXB0CmxhdXJpZSBncmVhc2xleQpicm93bgp3ZXQKbWF5YQpyaWNoIGNvbG9ycwpoaWdoIGZhc2hpb24KbmF0dXJlCmJydXNoIHN0cm9rZXMKZ2xhc3MKbGltaW5hbCBzcGFjZQptYWNybyBsZW5zCm1hZ2ljYWwgYXRtb3NwaGVyZQpyZWRzaGlmdApraXRiYXNoCm5vc3RhbGdpYwpleHRyYSBjcmlzcAp3YXJtIGNvbG9ycwphbmF0b21pY2FsCmdyZWF0IGNvbXBvc2l0aW9uCmludHJpY2F0ZSBvaWwgcGFpbnRpbmcKcG9zdCBwcm9jZXNzaW5nCnNrZXRjaAptYWdpYyB0aGUgZ2F0aGVyaW5nIGFydHdvcmsKc2hhcnAgZGV0YWlscwpibHVyCmlyaWRlc2NlbnQgYWNjZW50cwpleHRyZW1lbHkgaHlwZXIgLSBkZXRhaWxlZAp0aWx0IHNoaWZ0CnJ0eApjaW5lbWF0aWMgZm9jdXMKdm9sdW1ldHJpYyBsaWdodHMKY3Jpc3AKbW9vbgphZG9iZSBsaWdodHJvb20KcmVuZGVyZWQgaW4gdW5yZWFsIGVuZ2luZSA1CnZlcnkgdmVyeSBkZXRhaWxlZAp2ZWN0b3IKd2FsdG9uIGZvcmQKOCA1IG1tIGYgMS4gOApjb25jZXB0IGRlc2lnbgplbGRlbiByaW5nCnJlZCBoYWlyCmluLWZyYW1lCnByb2R1Y3QgcGhvdG9ncmFwaHkKemVuaXRoIHZpZXcKYmlvbWVjaGFuaWNhbApwb3N0IC0gcHJvY2Vzc2luZwprZXkgdmlzdWFsCndoaW1zaWNhbApleHRyZW1lbHkgaHlwZXJkZXRhaWxlZApkdXNrCmhkcmkKbG93IHBvbHkKZGllc2VscHVuawppbnRpbWlkYXRpbmcgbGlnaHRpbmcKbGluZSBhcnQKbWFnbmlmaWNlbnQKNCBrIGhkCmJsb25kZSBoYWlyCndpZGUgYW5nbGUgbGVucwp3YXJoYW1tZXIKamltbXkgbmVsc3NvbgpzaG9ydCBoYWlyCnplaXNzIGxlbnMKaXNvIDIgMCAwCnN1cGVyIHJlYWxpc3RpYwp3aGl0ZSBoYWlyCnBob3RvbGFiCnByb21vdGlvbmFsIGltYWdlCmxvcmQgb2YgdGhlIHJpbmdzCmFjY3VyYXRlCm1vdmllIHN0aWxsIGZyYW1lCmFjdGlvbiBwb3NlCmdyb3Rlc3F1ZQpzb3BoaXN0aWNhdGVkCmRldGFpbGVkIHByb2R1Y3QgcGhvdG8KYnJvd24gZXllcwphZXN0aGV0aWMgb2N0YW5lIHJlbmRlcgp0cmlhZGljIGNvbG9yIHNjaGVtZQpjaGFyYWN0ZXIgY29uY2VwdCBhcnQKbG9uZyBsZW5zCmNvbG9yCnNhY3JlZCBnZW9tZXRyeQphbmFtb3JwaGljCnZlaW5zCmNpbmVzdGlsbAp0cmlzdGFuIGVhdG9uCmhpbnRzIG9mIHlheW9pIGthc3VtYQplcGljIGZhbnRhc3kKcGVhY2VmdWwKc2NyZWVuc2hvdAo0IGsgdWhkIGltYWdlCmRyYXdpbmcKZGFyayBjb2xvcnMKaW5jcmVkaWJsZSBhcnQKbWFydmVsIGNvbWljcwpreW90byBhbmltYXRpb24KbXV0ZWQgY29sb3VycwpzYWQKdWUgNQpzdHVubmluZyBzY2VuZQpmIC8gMS4gNApzdW5ueQptYXJ2ZWwKdmlzaW9uYXJ5CnVsdHJhIGhpZ2ggZGV0YWlsCm1hc3MgZWZmZWN0CnNpZGUgdmlldwpuaWtvbgppcmlzIHZhbiBoZXJwZW4KOCBrIGhkIHJlc29sdXRpb24KYmlvcHVuawpiYWNrIHZpZXcKbWluaW1hbApsb3cgbGlnaHQKYXdhcmQgLSB3aW5uaW5nIHBob3RvCmluIGZvY3VzCm1hY3JvIHBob3RvZ3JhcGh5CjIgZCBzcHJpdGVzCmNsZWFyIGZvY3VzCnJlYWxpc3RpYyByZW5kZXIKZXh0cmVtZWx5IG1vb2R5IGxpZ2h0aW5nCmZ1bGwgbW9vbgpmcmVja2xlcwpzZXJlbmUKa2F3YWlpCm1lY2hhbmljYWwKdGVycmlmeWluZwpjaW5lbWF0aWMgbGlnaHRpbmcgKyBtYXN0ZXJwaWVjZQpoYWxvCnJpY2ggZGVlcCBtb29keSBjb2xvcnMKbWF4aW1hbGlzdApkZXRhaWxlZCBleWVzCndpbGQKMzVtbSBsZW5zCmFyY2hpdGVjdHVyZQphYnN0cmFjdCBicnVzaCBzdHJva2VzCnBvbGFyaXppbmcgZmlsdGVyCmFtYXppbmcgZGVwdGgKZjEuNAp3b21hbgpuaWdodG1hcmUKcmltIGxpZ2h0aW5nCmFsaWVuCmJsb29kCjRrIGhkCjEgLyAxIDYgMCBzCmdhbGF4eQpyZWRzaGlmdCByZW5kZXIKcG9saXNoZWQKYW5hbW9ycGhpYyBsZW5zCmRlcHRoCmFuZ3J5Cmh5cGVycmVhbApzdHVkaW8KbGlnaHQKd2ludGVyCm1vb25saWdodApleHByZXNzaXZlCmdsaXRjaCBhcnQKcGhvdG9zaG9wCmluc2FuZSBkZXRhaWxzCnBhcnRpY3VsYXRlCmFydHdvcmsKaGlnaGx5IGRldGFpbGVkIG9pbCBwYWludGluZwpjbGVhbiBsaW5lcwppbiBnb3VhY2hlIGRldGFpbGVkIHBhaW50aW5ncwpjcmVhdGl2ZQpmYXNoaW9uCmxvc3RmaXNoCmJydXNoIGhhcmQKZ3JlZyB0b2NjaGluaQpiYWNrbGlnaHRpbmcKZmlsbWljCmluawpiZWF1dGlmdWwgZGV0YWlsZWQKdmVyeSBkZXRhaWxlZCBmYWNlcwpmdW5ueQpqLiBjLiBsZXllbmRlY2tlciA4IGsKZmFudGFzeSBzdHlsZQpkcmFtYXRpYyBjaW5lbWF0aWMgbGlnaHRpbmcKZXZlbmluZwphbmltZSBhcnQKcHVuawpleWUgY29udGFjdApiYXJvcXVlIHBhaW50aW5nCmFzdHJvcGhvdG9ncmFwaHkKc2hvcnQgc21pbGUKOGsgYXJ0aXN0aWMgcGhvdG9ncmFwaHkKcmVkIGV5ZXMKa29kYWsgcG9ydHJhIDQgMCAwCndlbGwgLSByZW5kZXJlZApyZW5haXNzYW5jZSBwYWludGluZwp2ZXJ5IGluc3BpcmF0aW9uYWwKxpIgMS4gOApzdW1tZXIKYmx1bnQgYm9yZGVycwp2ZXJ5IGludHJpY2F0ZQpleHBsb3Npb25zCmdsb29taGF2ZW4KYmx1cnJ5Cm1hcml1c3ogbGV3YW5kb3dza2kKaW5rZWQKZ2VvbWV0cmljCmZpbmVseSBkZXRhaWxlZApwaG90by1yZWFsaXN0aWMKc25vdwplbW90aW9uYWwKYmxvb2Rib3JuZQpjYW5vbiBlb3MgYyAzIDAgMAptZWRpdW0gLSBmb3JtYXQgcHJpbnQKY296eQp3aW5kCnZpY3RvcmlhbgpkcmFnb24gYXJ0CmZpbmUgLSBmYWNlCmFkb3JhYmxlCjMgNSBtbSBmaWxtIGdyYWluCmFjcnlsaWMgb24gY2FudmFzCmxpZ2h0IHJheXMKc2Vuc3VhbApzdW5saWdodApncmFzcwpoYXp5CmRpZ2l0YWwgcGhvdG9ncmFwaHkKb2N0YW5lIHJlbmRlcmVyCnBodW9jIHF1YW4KZ3JlZW4Kd2lkZSBhbmdsZSBzaG90CmljZQpzcG9va3kKbWljaGFlbCBrYWx1dGEKb2xpdmUgc2tpbgpmaWd1cmluZQp2ZXJ5IGJlYXV0aWZ1bAp1bmRlcndhdGVyCmZvdG8gcmVhbGlzdGljCnBob3RvIHJlYWxpc20Kc29mdCBkZXRhaWxzCmFuZHJvaWQKbXlzdGljYWwgY29sb3JzCmFwb2NhbHlwdGljCmxzZApiYWNrbGlnaHQKcHJvZmVzc2lvbmFsIGxpZ2h0aW5nCmZlYXR1cmVzIGludHJpY2F0ZSBkZXRhaWwKa2F0c3VoaXJvIG90b21vCmV4dHJlbWVseSBkZXRhaWxlZCBtYXN0ZXJwaWVjZQpuaWdodHRpbWUKdW5yZWFsIGVuZ2luZSBoaWdobHkgcmVuZGVyZWQKc3Rvcm15IHdlYXRoZXIKYWxsdXJpbmcKbW9ybmluZwp2ZXJ5IHZlcnkgYmVhdXRpZnVsCnNlZHVjdGl2ZSBsb29rCnBlcmZlY3QKZG10CmxvbmcgZXhwb3N1cmUKbG9uZyBkYXJrIGhhaXIKdm9sdW1ldHJpYyBsaWdodG5pbmcKaGF1bnRpbmcKcGhvdG9ncmFwaGljCmR5bmFtaWMgcGVyc3BlY3RpdmUKY29taWMgc3R5bGUKcmVhbAppbnRyaWNhdGUgZGV0YWlsZWQKdWU1Cndlc3Rlcm4KaGFsZiBib2R5IHNob3QKYXJ0c3RhdGlvbiBocQpnaGlibGkKaGlnaGx5IGRldGFpbGRlZApnb3JnZW91cyBsaWdodGluZwpmYW50YXN5IGlsbHVzdHJhdGlvbgpnYW1lIGFydApiZWF1dGlmdWwgYm9uZSBzdHJ1Y3R1cmUKbXVjaCBkZXRhaWwKdW5yZWFsCmJsZW5kZXIgcmVuZGVyCnNtb290aCBhbmQgc2hhcnAgZm9jdXMKdWx0cmEgaGlnaCBkZWZpbml0aW9uCnBlcmZlY3QgZmFjZXMKZmFjaWFsIG11c2NsZXMKY2l0eQp0cmFuc2x1Y2VudAp3aW5uaW5nIGF3YXJkIG1hc3RlcnBpZWNlCmNvbWljIGNvdmVyIGFydAphZXJpYWwgdmlldwpnbGFzc2VzCnZvbHVtZXRyaWMgZm9nCmZpbG0gbm9pcgpmYW50YXN0aWNhbGx5IGdhdWR5CmhkIHdhbGxwYXBlcgpzZXh5CnZlcnkgc2hhcnAKY2luZW1hdGljIHZpZXcKZGV0YWlsZWQgZHJhd2luZwp1bnJlYWwgZW5naW5lIDUgcXVhbGl0eSByZW5kZXIKZW5vY2ggYm9sbGVzCmp1bmdsZQpyaXZlcgpza3VsbAplbmVyZ2V0aWMKb2lsIG9uIGNhbnZhcy4gY2luZW1hdGljCnByb2R1Y3QgcGhvdG8Kcm9zcyBkcmF3cwpoaWdobHkgZGV0YWlsZWQgYW5kIGludHJpY2F0ZQp2aWduZXR0ZQpubyBqYWdnZWQgbGluZXMKeXVraXRvIGtpc2hpcm8Kc3dpcmx5IHZpYnJhbnQgY29sb3IgbGluZXMKZXhjZWxsZW50IGxpZ2h0aW5nCm5vIHRleHQKc3RhbmxleSBhcnRnZXJtbQpibHVlcHJpbnQKOCBrIHVoZApwYWxtIHRyZWVzCmxvZ28KcG9zdCBncnVuZ2UKc29sYXJwdW5rCnBsYW50cwo0ayB1aGQKaGlnaCBkZXRhaWwgaWxsdXN0cmF0aW9uCnNvZnQgcGFpbnRpbmcKZG5kIGNoYXJhY3RlciBwb3J0cmFpdApkZXNhdHVyYXRlZApzeWQgbWVhZC4gcmljaCBjb2xvcnMKY3liZXJwdW5rIHN0eWxlCm1hc2N1bGluZQpzaGFycCBsaW5lcwplbmNoYW50aW5nCmFydGdlbQpkcmFnb24hCmZsYXQKaW5zYW5lCnN0aWNrZXIKdHVybmFyb3VuZApqZXJlbXkgbWFubgpjb2xvcmZ1bCBjbG91ZHMKNSAwIG1tIGxlbnMKZHJlYW1saWtlCnRodW5kZXJzdG9ybQpzb2Z0IGNvbG9ycwprYXdzCnNlcmlvdXMKaGlnaGx5IHJlYWxpc3RpYwpsb3ZlCmxvb255IHRvb25zIHN0eWxlCmRldGFpbGVkIHBvcnRyYWl0CmxpbWluYWwKZnVsbGJvZHkKZmFzaGlvbiBwaG90b3Nob290CnBicgpwcm9mZXNzaW9uYWwgcGhvdG9ncmFwaGVyCmJvZHkgaG9ycm9yCndhdGVyZmFsbAp5b3VuZwpjYW5vbiA1IDAgbW0KdG9uZSBtYXBwaW5nCm1peGVkIG1lZGlhCnRleHR1cmVkCnN1bgpyb290cwpibHVlIGFuZCBwaW5rIGNvbG9yIHNjaGVtZQptaW5pbWFsaXN0aWMKcGVyZmVjdCBhbmF0b215CmV4dHJlbWx5IGhpZ2ggZGV0YWlsCndlc3Rlcm4gY29taWMgYm9vayBhcnQKZmFudGFzeSBjb25jZXB0IGFydApqdXJnZW5zCm9jY3VsdAptYXR0ZSBwYWludGluZyBjb25jZXB0IGFydApkaW0gdm9sdW1ldHJpYyBsaWdodGluZwpjb2xvcmVkCjEgOSA3IDAgcwpjdXNoYXJ0IGtyZW56CmdyaW0geWV0IHNwYXJrbGluZyBhdG1vc3BoZXJlCmh5cGVyIHJlYWwKam9zYW4gZ29uemFsZXMgYW5kIGRhbiBtdW1mb3JkCnBlYXJsZXNjZW50CnByb2Zlc3Npb25hbCBkaWdpdGFsIHBhaW50aW5nCmxvdyBjb250cmFzdApicmlnaHQgc3R1ZGlvIHNldHRpbmcKZGF2aWQgcnVkbmljawpzdW4gcmF5cwpjeWJlcm5ldGljcwpjbGlmZiBjaGlhbmcKZGF5dGltZQpib25lcwphZ25lcyBwZWx0b24Kc21hbGwgZGV0YWlscwpvcmllbnRhbGlzbQpjaW5lbWF0b2dyYXBoeQpmdWxseSBjbG90aGVkCnBlcmZlY3QgZXllcwppbXByZXNzaXZlCmFuaW1lIGdpcmwKOCBrIGhkCndldGEgZGlnaXRhbApwYXN0ZWxsIGNvbG91cnMKZmlib25hY2NpCmJyb3duIHNraW4KY29tcGxlbWVudGluZyBjb2xvcnMKdmVyeSBpbnRyaWNhdGUgZGV0YWlscwppbG0KY2hyb21hdGljIGFiZXJyYXRpb24KbWFuZGVsYnJvdCBmcmFjdGFsCm5ldXRyYWwgY29sb3JzCmZyb20gc2NlbmUgZnJvbSB0d2luIHBlYWtzCmFuYXRvbXkKaW50cmljYXRlIGNvbmNlcHQgYXJ0CnBlcmZlY3QgZmFjaWFsIHN5bW1ldHJ5CmRldGFpbGVkIGxpZ2h0aW5nCm9jdG9wdXMKZGV0YWlsZWQgZmFjZXMKdmluZXMKdGF0dG9vcwpzaGFycCBlZGdlcwpiaWtpbmkKaG91ZGluaQpqZXdlbHJ5Cmh5cGVyIHJlYWxpc3RpYyBmYWNlCm5lb24gbGlnaHQKaGlnaGx5IGRldGFpbGVkIGRpZ2l0YWwgcGFpbnRpbmcKaW5jcmVkaWJseSBkZXRhaWxlZAp0b20gb2YgZmlubGFuZApjb21pYwpyZWFsaXN0aWMgcG9ydHJhaXQKc21vb3RoIHNoYXJwIGZvY3VzCnN0cmFuZ2UKaGVyb2ljIHBvc2UKZWxlZ2FudCBwb3NlCmNpbmVtYXRpYyA0ayB3YWxscGFwZXIKZnVsbCBoZAphY3Rpb24gc2hvdAptZWNoYQpkZWNheQpwYXN0ZWwKbmllcjphdXRvbWF0YSBpbnNwaXJlZAppbWF4CnJvYiByZXkgYW5kIGtlbnRhcm8gbWl1cmEgc3R5bGUKbGVhZ3VlIG9mIGxlZ2VuZHMgY29uY2VwdCBhcnQKcmVhbGlzdGljIHNoYWRlZCBsaWdodGluZwpwcm9mZXNzaW9uYWwgcGhvdG8Kc2luaXN0ZXIKNCBrIHdhbGxwYXBlcgpkYXJrIGxpZ2h0aW5nCnBhcnRpY2xlcwpwaG90byAtIHJlYWxpc3RpYwpwbGFzbWEKcmltIGxpZ2h0cwpwaHlzaWNhbGx5IGJhc2VkIHJlbmRlcmluZwpwb3J0cmFpdCBwaG90b2dyYXBoeQpkYXJrIHNvdWxzCnBob3RvIHJlYWwKc3R5bGlzaAplcGljIGZhbnRhc3kgY2hhcmFjdGVyIGFydApob3Jyb3IgdGhlbWUKY2hhcmFjdGVyCnBob3RvcmVhbGlzdGljIGltYWdlcnkKZGF5bGlnaHQKZ2FwbW9lIHlhbmRlcmUgZ3JpbWRhcmsKcm9ib3QKYXdhcmQtd2lubmluZyBwaG90b2dyYXBoCnN3ZWF0eQpjaW5lbWEgNGQKcGluawp2ZXJ5IGJlYXV0aWZ1bCBzY2VuZXJ5CnN5bW1ldHJpY2FsIGZlYXR1cmVzCmZlbWluaW5lCnBqIGNyb29rCmtleSBhcnQKY2VsIHNoYWRpbmcKZ3JhZGllbnQgbGlnaHQgYmx1ZQppbnRyaWNhdGUgZW52aXJvbm1lbnQKZWRpdGVkCmV4cXVpc2l0ZSBsaWdodGluZwpmcmFjdGFscwpzd2lybGluZyBtaXN0CmZlYXIKYWlyYnJ1c2ggb24gY2FudmFzCnJvdW5kZWQgZXllcwpwaG90b3JlYWxpc3RpYyBwb3J0cmFpdApjb21pYyBib29rCmFybW9yCnNlZHVjdGl2ZQpwb3JjZWxhaW4gc2tpbgpmcm9tIG1ldGFsIGdlYXIKbG9va2luZyBhdCBjYW1lcmEKYmVhdXRpZnVsIGxhbmRzY2FwZQpjcmVhdHVyZQphbGJ1bSBjb3Zlcgp1aGQgOCBrCmNyZXB1c2N1bGFyIHJheXMKYmlnIGV5ZXMKd2VpcmQKbWljcm8gZGV0YWlsCmtvZGFrIHBvcnRyYSA0MDAKb2lsCnN5ZCBtZWFkZQpjbGFzc2ljYWwgcGFpbnRpbmcKZ2xhbW9yIHBvc2UKZmFudGFzeSBtYWdpYwpmaW5lIHRleHR1cmUKcHJlIC0gcmFwaGFlbGl0ZQpjb3JyZWN0ZWQKYXdhcmQgd2lubmluZyBtYXN0ZXJwaWVjZQppbmsgZHJhd2luZwpzbW9vdGggYW5kIGNsZWFuIHZlY3RvciBjdXJ2ZXMKcHVycGxlCmFybm9sZCByZW5kZXIKc2F0dXJhdGVkIGNvbG9ycwpzeW1tZXRyeSBhY2N1cmF0ZSBmZWF0dXJlcwptZW5hY2luZwpnYW1lIG9mIHRocm9uZXMKaGFpciBkb3duCm1ldGFsCnNhY2hpbiB0ZW5nCnNreQplbGFib3JhdGUKbGlnaHRzCm1hdHRlIGZpbmlzaApldGNoaW5nCmluc2FuZSBkZXRhaWwKcmljaCBkZWVwIGNvbG9ycwpkZXZpYW50YXJ0IGFydHN0YXRpb24KZmlzaCBleWUKdGhlIGZpZnRoIGVsZW1lbnQgYXJ0aWZhY3RzCmNocm9tZQpyZW5kZXJlZCBpbiB1bnJlYWwgZW5naW5lCmdsb3dpbmcgbGlnaHRzISEgaW50cmljYXRlCmxlYWd1ZSBvZiBsZWdlbmRzCnVsdHJhLWRldGFpbGVkCmJsZW5kZXIgYW5kIHBob3Rvc2hvcApmdWxsIGxlbmd0aAphcnRob3VzZQpmYW50YXN0aWNhbGx5IGJlYXV0aWZ1bApmaXNoZXllIGxlbnMKbXVyYXRhIHJhbmdlCnNwZWN0YWN1bGFyIHF1YWxpdHkKdWx0cmEgZGV0YWlsZWQgZmFudGFzeQpkZWNhZGVudApkZXRhaWxlZCBhbmQgaW50cmljYXRlCnRyZW5kaW5nIG9uIGZ1cmFmZmluaXR5CmRpZ2l0YWwgcG9ydHJhaXQKYXBvY2FseXBzZQpiZWF1dGlmdWwgY2luZW1hdGljIGxpZ2h0CmJyYXZlbHkgZGVmYXVsdCBpbnNwaXJlZApkeXN0b3BpYW4gYXJ0CmNpbmVtYXRpYyBjb25jZXB0IGFydAphY3Rpb24Kb2NlYW4KY2xvc2UgdXAgc2hvdApzdXJyZWFsaXN0aWMKZXh0cmVtZWx5IGRldGFpbGVkIG9pbCBwYWludGluZwpkYXJrIGZhbnRhc3kgYXJ0CnVucmVhbCA1IHJlbmRlcgpoaWdoIGRldGFpbCA4IGsKcmdiCmYgMS4gOApsb25nIGJsYWNrIGhhaXIKc21vb3RoIGZhY2UKc3VwZXIgaGlnaGx5IGRldGFpbGVkCm91dHJ1bgpubyBzaGFkb3cKNGsgd2FsbHBhcGVyCmNpbmVtYQpkYW4gbXVtZm9yZC4gb2N0YW5lIHJlbmRlcgptaWRuaWdodAptYWdhemluZQptb3ZpZSBzY2VuZQp1bnJlYWwgcmVuZGVyCm90aGVyd29ybGRseQpoZWF2ZW5seQpzY2kgZmkgZmFudGFzeQpicm93biBoYWlyCm5vaXIKcmV0cm93YXZlCmNpbmVtYXRpYyBsYW5kc2NhcGUKY2luZW1hdGljIHN0aWxsCnNjdWxwdHVyZQpyZWZsZWN0aW9uCjEwMG1tCndhcgo4IGsgcGhvdG9yZWFsaXN0aWMKZmxhdCBjb2xvcnMKY3V0ZSBhbmQgYWRvcmFibGUKMyBkIG9jdGFuZSByZW5kZXIKZmFuIGFydApoaWdseSBkZXRhaWxlZApzbWlsZQptb3NzCmFyY2hkYWlseQpsdW1pbmVzY2VudAppbWF4IDcwIG1tIGZvb3RhZ2UKYW5pbWUgdmlzdWFsCmRpcnR5CmNvbnRlbXBvcmFyeSBmYXNoaW9uIHNob290CnAKZ3JleSBiYWNrZ3JvdW5kCnN0b3J5Ym9vayBpbGx1c3RyYXRpb24KY29sb3IgZmlsbSBwaG90b2dyYXBoeQppbnRyaWNhdGUgb2lsIGRldGFpbHMKcGF0aGZpbmRlcgpkYXJrbmVzcwphcnRlbSBkZW11cmEKc3Ryb25nCmdyYXBoaWMgZGVzaWduCmxpdmlhIHByaW1hCmhpZ2ggcmVzCjggNSBtbQpzaWx2ZXIKZGEgdmluY2kKZGFyayB2aWJlcwphbiBlcGljIGZhbnRhc3kKYXdhcmQgLSB3aW5uaW5nIHBob3RvZ3JhcGh5CmNhYmxlIHdpcmVzCmNvbmNlcHQKYW1iaWVudApkaXZpbmUKdW5zZXR0bGluZwpydHggb24KaW4gLSBmcmFtZQphdXR1bW4KdGVsZXBob3RvCmNpbmVtYXRpYyBtYXR0ZSBwYWludGluZwpzdHVubmluZyB2aXN1YWxzCnZpYnJhbnQgY29sb3VycwozNW1tIGZpbG0gZ3JhaW4Kc3BvdGxpZ2h0Cmh5cGVyIGRldGFpbApoaWdobHkgaW50cmljYXRlCnN0dWRpbyBwb3J0cmFpdApkYXJrIG1vb2QKc2FraW1pIGNoYW4KbW9kZWwKcHVuayBhcnQKZHJlc3MKYmVhdXRpZnVsbHkgYmFja2xpdApkYXJrIGFuZCBtb29keQpoaWdoIGRldGFpbCA4awpjbGF5bWF0aW9uCnl1c3VrZSBtdXJhdGEKdnJheSByZW5kZXIKZ29sZGVuIHJhdGlvIGlsbHVzdHJhdGlvbgpjaXR5c2NhcGUKeWVsbG93CmVhcmwgbW9yYW4KamFwYW5lc2UKbGFrZQpjb2xvcmZ1bCBhY2NlbnRzCm0KZGF3bgpzZXQgaW4gMTg2MApvcm5hbWVudGFsCnJlYWxpc3RpYyBjaGFyYWN0ZXIgY29uY2VwdApzaGFycCBjbGF3cwpsaWdodCBlZmZlY3QKZGFyayBuaWdodApmdWxsIGJvZHkgcG9zZQpiaXJkcwpiZWF1dHkKZ3JhZmZpdGkgcGFpbnQKc2VwaWEKZGVzb2xhdGUKc2Vuc2Ugb2YgZGVwdGgKa2lua2FkZQoxIDYgawp2aWJyYW50IGNvbG9yCmFydCBncmVnIHJ1dGtvd3NraQptYWNybyBhcnQKcmljaCBtb29keSBjb2xvdXJzCmxpYW0gYnJhemllcgp3aWxkbGlmZSBwaG90b2dyYXBoeQpkZXNlcnQKMzBtbQpyZWZsZWN0aXZlCnNpbXBsZSBmb3JtCm5ldXRyYWwgZHVsbCBjb2xvcnMKcGF0aCB0cmFjaW5nCmdpcmwKaGVhZCBpbiBmb2N1cwpwYWxlIGNvbG9ycwptZWx0aW5nCmNhbm9uIGVvcyByIDMKZGV0YWlsZWQgb2lsIHBhaW50aW5nCnN0b3JtCmN1dGUgYW5kIGZ1bm55CmNvbW1pc3Npb24gb24gZnVyYWZmaW5pdHkKMzVtbSBmaWxtCmhpZ2ggc2F0dXJhdGlvbgpkaXN0YW50Cm9wZW4gY2VpbGluZwpwYW5vcmFtaWMgdmlldwpmYW50YXN0aWMKaXNvbWV0cmljIHZpZXcKMmQKY2luZW1hdGljIHdhbGxwYXBlcgo4IGsgcmVuZGVyCnBpZXJjaW5nIGV5ZXMKYXdhcmQKdXRvcGlhbgp0cmlwcHkKbHVtaW5vdXMKc29sbwptYXJibGUKdGVjaCB3ZWFyCjEgOSA2IDAgcwpwYXBlciB0ZXh0dXJlCnNtb290aCBmYWNlIGZlYXR1cmUKY29sb3IgcGFnZQpodWdlIHNjZW5lCmluc2FuZWx5IGNvbXBsZXgKNCBrIHVoZApkZWZpbmVkIGZhY2lhbCBmZWF0dXJlcwp0ZWNobmljb2xvcgp3aW5keQpkdXN0eQpncmFwaGljIG5vdmVsCnVsdHJhIHJlYWxpc3RpYyBmYWNlcwpob3VyZ2xhc3Mgc2xpbSBmaWd1cmUKYWRvYmUgcGhvdG9zaG9wCmNoZWVyZnVsCmhlcm9pYwpjb29sCmVudmlyb25tZW50IGNvbmNlcHQKYmlvbHVtaW5lc2NlbmNlCmhvcHBlcgpmaXJlZmxpZXMKYmVhY2gKZ2xvb215IGF0bW9zcGhlcmUKZGV0YWlsZWQgZmFjaWFsIGZlYXR1cmVzCmxvZnRpcwpwb2tlbW9uCmFjdGlvbiBzY2VuZQpmYWRlZApjYW5kbGVzCmdvZGRlc3MKY29udGVtcG9yYXJ5IGFydApjb2xvcml6ZWQKcGhvdG9yZWFsaXN0aWMgbGlnaHRpbmcKZ3J1bmdlCmdsaXRjaAp0aGVhdHJpY2FsCmRpbSBsaWdodGluZwpoZCBzaG90CmRlYXRoCnJlYWxpc3RpYyBleWVzCmNoYW9zCmFuaW1hdGVkCmhhemUKZGFyayBhcnQKZHluYW1pYyBsaWdodHMKZm9yZWJvZGluZwp2aWRlbyBnYW1lCmFuaW1lIGFydCBzdHlsZQp0YWxsCmhhcnZlc3QgZmFsbCB2aWJyYW5jeQpmaW5lIGZvbGlhZ2UgbGFjZQpwbGFzdGljCmR5c3RvcGlhCmNnc3R1ZGlvCnNob3J0Cm9sZCBwaG90bwozIDUgbW0gZmlsbQpsaWdodHJvb20KdGVudGFjbGVzCndpbmdzCmltYXggcXVhbGl0eQptYW5nYSBhbmQgYW5pbWUgMSA5IDkgOQpkZWVwIHNoYWRvd3MKZmxvd2luZyBoYWlyCmNsZWFyIGV5ZXMKY29uY2VwdCBkZXNpZ24gYXJ0CndoaXRlIHNraW4Kc3VuZ2xhc3Nlcwpla3RhY2hyb21lIHBob3RvZ3JhcGgKZGVlcCBkZXB0aCBvZiBmaWVsZApsZWljYQpkZXRhaWxlZCBhcnQKOCBrIGNvbmNlcHQgYXJ0CnJheSB0cmFjZWQKc2NyZWVuIHByaW50CmV5ZXMgY2xvc2VkCjMgNSBtbSBsZW5zCmVseXNpdW0KZHluYW1pYyBjYW1lcmEgYW5nbGUKc2VsZmllCmdhdWR5IGNvbG9ycwpzcGlyYWxzCnJvdW5kIGZhY2UKZGV0YWlsCmdsb3NzeQpoaSAtIGZydWN0b3NlCnNpZGUgcHJvZmlsZQpoaWdoIGRldGFpbCA0awpzaW5nbGUgZmFjZQpjYWJsZXMKY2luZW1hdGljIGFuZ2xlCmxpdmUgYWN0aW9uCmVwaWMgcHJvcG9ydGlvbnMKcGFub3JhbWljCnN5bW1ldHJpYyBiYWxhbmNlCmVsZHJpdGNoCmRpYW1vbmRzCnNtYWxsCnN0YW5kaW5nCndhcm0gbGlnaHQKd2Fpc3QgdXAKdmFwb3J3YXZlIGNvbG9ycwpzaGlueSBza2luCm9yYW5nZQp3aWRlc2NyZWVuCmdob3N0IGluIHRoZSBzaGVsbApkcmFtYXRpYyBsaWdodG5pbmcKc2VkdWN0aXZlIHNtaWxlCmFuZ2VsaWMKcmVuYWlzc2FuY2Ugb2lsIHBhaW50aW5nCjhrIHJlbmRlcgpnbG93aW5nIHJpY2ggY29sb3JzCmZvciBhYWEgZ2FtZQpkaWdpdGFsIGFydHdvcmsKZGVlcCAzIHBvaW50IHBlcnNwZWN0aXZlCmNpbmVzdGlsbCA4IDAgMCB0IDMgNSBtbQpmdW4Kd2FybQpyaWNoIHZpdmlkIGNvbG9ycwptdWx0aWNvbG9yZWQKY29tcG9zaXRpb24KZ29vZCB2YWx1ZSBjb250cm9sCmF0aGxldGljCm52aWRpYSByYXl0cmFjaW5nIGRlbW8KcG9zdCBhcG9jYWx5cHRpYwpmdWxsIHZpZXcKY2hyaXN0aWFuIG1hY25ldmluCmlua2luZwp3b3cKYW5hbG9nCmZpbmVseSBkZXRhaWxlZCBmZWF0dXJlcwptb2Rlcm4gYXJ0IGRlY28KdmVyeSBzaG9ydCBkZXB0aCBvZiBmaWVsZApuZW9uIGxpZ2h0aW5nCmhpZ2hseS1kZXRhaWxlZApmIC8gMyAyCmludGVyaW9yCmdpYW50ZXNzIGFydApoYXJkIHN1cmZhY2UKZm91bmQgZm9vdGFnZQpnbG9yaW91cwpwcm9mZXNzaW9uYWwgZGlnaXRhbCBhcnQKYmVycmllcwpuaWdodCBza3kKbmVvbiBjb2xvcnMKZW1tYSB3YXRzb24Kc2luZ2xlIGJvZHkKaGVhZCBhbmQgc2hvdWxkZXJzIHBvcnRyYWl0Cmt5b2FuaQpmIDggYXBlcnR1cmUKamVsbHlmaXNoCmZsdW9yZXNjZW50IGNvbG9ycwpmdWxsIGZyYW1lCmN5YmVycHVuayBjaXR5CmZyYXpldHRhCmZsYW1lcwpjaXR5IGJhY2tncm91bmQKdQpjb2xvcmZ1bCBmbGF0IHN1cnJlYWwgZGVzaWduCmFuaW1hdGlvbgpsb21vZ3JhcGh5CmRyZWFtCmF1dG9jaHJvbWUKZnJvc3RiaXRlIDMgZW5naW5lCjMgZCBtb2RlbAp3ZWxsLXJlbmRlcmVkCmNpbmVtYXRpYyBwaG90b2dyYXBoeQp0ZWNobm9sb2d5CnBsYW5ldHMKamFwYW4KZWxlZ2FuY2UKY3Jvd24Kd3BhCmlsbHVzdHJhdGVkCmFmZmluaXR5IHBob3RvCnN5bW1ldHJ5ISEKcm9ib3RzCnBlcmZlY3RseSBzaGFkZWQKc3Vuc2V0IGxpZ2h0aW5nCmRlbm9pc2VkCmxlZXNoYSBoYW5uaWdhbgpsdXNoCmFuaW1hbCBwaG90b2dyYXBoeQphcnQgbm92ZWF1CnBlcnNwZWN0aXZlCndlbGwgbGl0CnRyYW5xdWlsCnJlbWJyYW5kdCBsaWdodGluZwpwdWJsaWMgd29ya3MgbXVyYWwKdGlueQp1bHRyYSByZWFsaXN0aWMgZGlnaXRhbCBhcnQKYnJpZ2h0IG1vcm5pbmcKcmVuZSBtYWdyaXR0ZS4gZGV0YWlsZWQKaW4gZ3RhIHYKdG95CmV4IG1hY2hpbmEKcGFzdGVsIGNvbG9yIHBhbGV0dGUKZXh0cmVtZSBpbGx1c3RyYXRpb24KcHJvZmVzc2lvbmFsIGZvb2QgcGhvdG9ncmFwaHkKY2luZXN0aWxsIDgwMHQKbWF0dGUgZHJhd2luZwpzeW50aHdhdmUgc3R5bGUKa29kYWsKY2luZW1hdGljIGVhc3RtYW4gNSAzIDggNCBmaWxtCnN5bWV0cmljYWwKbmVvIC0gZXhwcmVzc2lvbmlzbQptZXNoIHdpcmUKZGl2aW5pdHkKb2Zmc2V0IHByaW50aW5nIHRlY2huaXF1ZQpjaW5lc3RpbGwgOCAwIDAgdApib29rIGNvdmVyCnNwYXJrcwoyIGQgZ2FtZSBhcnQKZXh0cmVtZWx5IGhpZ2ggcXVhbGl0eQpyZW1icmFuZHQgc3R5bGUKc3VycmVhbGl0eQp6b29tZWQgb3V0CjggMCBtbQpmdXR1cmUKbGx1c3RyYXRpb24KNCBrIGhkIHdhbGxwYXBlcgpzdGFyIGNpdGl6ZW4gaGFsbwpwaG90b3Nob290CmNvbmNlcHRhcnQKYW1hemluZyBjb21wb3NpdGlvbgo0IGsgcmVhbGlzdGljCmFydCBub3V2ZWF1IGZhc2hpb24gZW1icm9pZGVyZWQKbmF0dXJlIHBob3RvZ3JhcGh5CnNwbGl0IGxpZ2h0aW5nCnBvc3Rwcm9jZXNzaW5nCnBvc2luZwpzb21iZXIKY3JpdGVyaW9uIGNvbGxlY3Rpb24KYzRkCm5vIGNyb3AKcGFsZQpyb3NlcwpkZXRhaWxlZCByZW5kZXIKcmVhbCBsaWZlIHNraW4KbGVhZ3VlIG9mIGxlZ2VuZHMgc3BsYXNoIGFydAp3YXJmcmFtZSBhcm1vcgpzdW5yYXlzCmhhbGYgcm9ib3QKYmVhdXRpZnVsIHNjZW5lCm92ZXJncm93bgpwZXJmZWN0IGFydApmcm9tIGFya25pZ2h0cwptb25zdGVyCnBlcmZlY3Qgc3ltbWV0cmljYWwgZmFjZQpnbG93aW5nIGxpZ2h0IGFuZCBzaGFkb3cKZWxhYm9yYXRlIGdlb21ldHJpYyBvcm5hbWVudApsYXNlcnMKZHluYW1pYyBzY2VuZQptb29kIGxpZ2h0aW5nCmxpZ2h0IGJyYXplbgoyIGQKbW92aWUKYW50aHJvcG9tb3JwaGljCmZpbmUtZmFjZQpjb3R0YWdlY29yZQpwc3ljaGVkZWxpYyBvdmVydG9uZXMKZHJhbWF0aWMgYmFja2xpZ2h0aW5nCmluc2FuZWx5IHF1YWxpdHkKbG9va2luZyBhdCB0aGUgY2FtZXJhCnBlbmNpbCBkcmF3aW5nCmdvdGgKZHNsciBwaG90bwpoZWxsCnJlZCBsaWdodAp1bnJlYWwgZW5naW5lIDUgcmVuZGVyCm1pY3JvY2hpcAp2ZXJ5IHJlYWxpc3RpYyBwYWludGluZyBlZmZlY3QKaGlnaGx5IC0gZGV0YWlsZWQKaGlnaCBvY3RhbmUKY29uZmlkZW50CnNpZ21hIDg1bW0gZi8xLjQKaGFsZiBib2R5CmRuZGJleW9uZAphaSBlbmhhbmNlZApoaWdoIGNvaGVyZW5jZQpzb2Z0IHJlbmRlcgpoaWdoIHByb2R1Y3Rpb24gdmFsdWUKZ3VzdGF2IG1vcmVhdQp3YXJyaW9yCnJlYWxpc3RpYyBhbmF0b215CmJlYXV0aWZ1bCB3b21hbgpncmFkYXRpb24KY3liZXJwdW5rIDIwNzcKY29sb3JlZCBwZW5jaWwKZm9yZXN0IGJhY2tncm91bmQKc3RvY2sgcGhvdG8KYmx1ZSBoYWlyCmxhdWdoaW5nCnNvbnkgYTdyCnByb2R1Y3QgaW50cm9kdWN0aW9uIHBob3Rvcwpjb3J5IGxvZnRpcwpleWVzCmF0ZXkgZ2hhaWxhbiBhbmQgbWlrZSBtaWdub2xhCnJ1YW4gamlhIGFuZCBmZW5naHVhIHpob25nCm1jYmVzcwpsYXN0IGV4aWxlCmZhbnRhc3kgZGlnaXRhbCBhcnQKd2F5bmUgaGFhZwp2b2d1ZSBtYWdhemluZQpkeW5hbWljIGxpZ2h0CmV4cHJlc3NpdmUgcG9zZQpzZXZlbnRpZXMKZGVsaWNhdGUgZW1iZWxsaXNobWVudHMKbm9pc3kgZmlsbSBncmFpbiBlZmZlY3QKYmx1cnJlZCBiYWNrZ3JvdW5kCnBhc3RlbCBjb2xvdXJzCmhvbW9lcm90aWMKYW50aHJvIGFydApsb3cgc2F0dXJhdGlvbgplZGl0b3JpYWwgaWxsdXN0cmF0aW9uCmxpbWluYWwgc3BhY2UgaW4gb3V0ZXIgc3BhY2UKdnJheSBjYXVzdGljcwp3YXluZSBiYXJsb3cKdHJhZ2ljCmRhcmtzeW50aApkYXJrIGxpZ2h0IG5pZ2h0CmxhdmEKYmVkcm9vbQphd2FyZC13aW5uaW5nIGFydApib2xkCmNoYXJhY3RlciBjb25jZXB0IGRlc2lnbgpkcmFtYXRpYyBzY2VuZQp3b29kCmVtb3Rpb25hbGx5IGV2b2NhdGl2ZQpncmVhdGVzdCBhcnQgZXZlciBtYWRlCmRyZWFteSBhbmQgZXRoZXJlYWwKY2Fub24gZW9zIGMzMDAKaWNvbmljCmNvbGQKY2hpYXJvc2N1cm8gbGlnaHRpbmcKa2V5c2hvdApoYXplbCBleWVzCnJlZnJhY3Rpb24KcmljaCBkZWVwIGNvbG91cnMgbWFzdGVycGllY2UKY2hhbGsKOGsgaGQKcmVhbGlzdGljIHJlZmxlY3Rpb25zCmRldGFpbGVkIG1hdHRlIHBhaW50aW5nCnZpdmlkIGNvbG91cnMKc3R1bm5pbmcgdm9sdW1ldHJpYyBsaWdodGluZwpkYXJrIHN1cnJlYWxpc20KOCBrIHJlYWxpc3RpYwpzaW1wbGUgYmFja2dyb3VuZApjb2xsYWdlCnVsdHJhIHNoYXJwCnRhbmtvYmFuCnRyYWRpbmcgY2FyZCBmcm9udAppbmNyZWRpYmxlCnNoaW5pbmcKbGlnaHQgZHVzdApsb25nIHdoaXRlIGhhaXIKdGVsZXBob3RvIGxlbnMKY2FudmFzCm15dGhpY2FsCjogOgpzaGFycG5lc3MKb2xkCm1lZGl1bSBmb3JtYXQKYmFsZApwZW5jaWwgc2tldGNoCmNsb3VkeQpubyBwZW9wbGUKaHlwZXJyZWFsaXN0CnBvcnRyYWl0IHBob3RvCndpZGUgdmlldwpzdHVkaW8gbGlnaHRuaW5nCmRhcmsgaGFpcgpwcmVzcwpyZWFsIHBob3RvCmFiYW5kb25lZAp1bHRyYSB3aWRlIGxlbnMKdHdpbGlnaHQKxpIxLjgKYmVhdXRpZnVsIHNjZW5lcnkKbWlsa3kgd2F5CnRzdXRvbXUgbmloZWkKZnJhY3RhbGlzbQplZGl0b3JzIGNob2ljZQpjYXJ0b29uIHN0eWxlCmNoYXJhY3RlciBpcyBpbiBhbGwgaXRzIGdsb3J5CmdvbGRlbiByYXRpbyBjb21wb3NpdGlvbgpkYWlseSBkZXZpYXRpb24KZHJpcHBpbmcgcGFpbnQKZWxlY3RyaWNhbCBkZXRhaWxzCnNoYXJwIGRldGFpbAp1bHRyYWZpbmUgZGV0YWlsCm1hbnkgZGV0YWlscwpzeW1tZXRyaWNhbCBhcnR3b3JrCnByb2Zlc3Npb25hbGx5IHJldG91Y2hlZAphdWR1Ym9uCjUwbW0gbGVucwp2YXBvcndhdmUgYWVzdGhldGljCmJpb2x1bWluZXNjZW50CmF3ZSBpbnNwaXJpbmcKb2lsIHBhaW50CmdyYWluCnVuY3JvcHBlZApkaXN0dXJiaW5nCnN0ZWFtCmJ1dHRlcmZsaWVzCmRpZ2l0YWwgY29uY2VwdCBhcnQKdGhlIG1pZGRsZSBhZ2VzCnZpc2libGUgYnJ1c2hzdHJva2VzCnVsdHJhLXJlYWxpc3RpYwpzb2xpZCBiYWNrZ3JvdW5kCmZhbnRhc3kgZXBpYyBkaWdpdGFsIGFydApvY3RhbmUgcmVuZGVyIDggawpoaWdoIHF1YWxpdHkgcGhvdG8KbWVkaWV2YWwgY2FzdGxlCnNvZnQgc3R1ZGlvIGxpZ2h0aW5nCnBvZXRpYwpiaWcgbWVkaXVtIHNtYWxsCm5vIGRvZgpteXN0aWMKc29jaWFsaXN0CmZyZW5jaCBub3V2ZWF1CmZ1cgphY3J5bGljCnJpbWxpZ2h0CnN0dW5uaW5nIGxpZ2h0aW5nCmhpZ2ggcmVzb2x1dGlvbiBwcmludApwYWJsbyBhbWFyaW5nbwpteXN0ZXJ5CnJldHJvIGZ1dHVyaXNtCmFpcmJydXNoIGFydApkZXRhaWxlZCBiYWNrZ3JvdW5kCmZyb20gYmVoaW5kCnRocmVlIHBvaW50IHBlcnNwZWN0aXZlCndpbGxpYW0gYWRvbHBoZSBib3VndWVyZWF1CnNvbGlkIGNvbG9yIGJhY2tncm91bmQKYXdhcmQgd2lubmluZyBhcnR3b3JrCmJvZHkgYW5kIGhlYWRzaG90CnN1bnNoaW5lCmFzc29jaWF0ZWQgcHJlc3MgcGhvdG8KZXBpYyBzaXplCnN0aWxsCmpveWZ1bApjdXRlIGZhY2UKbGluZXMKbWVkaXVtLWZvcm1hdCBwcmludAprb2RhayBmaWxtCmJsb25kZQpnb3JnZW91cyBmYWNlCnZpYnJhbnQgaGlnaCBjb250cmFzdApzbm93aW5nCnJheSB0cmFjZWQgbGlnaHRpbmcKaGlnaCBhbmdsZQp0aHVuZGVyIGNsb3VkcyBpbiB0aGUgc2t5CnNjcmVhbWluZwp1bnJlYWwgZW5naW5lIDggawpicnV0YWxpc3QgYXJjaGl0ZWN0dXJlCmNyeWluZwpsYW5kc2NhcGUgcGFpbnRpbmcKZmx1aWQKYXN0b25pc2hpbmcKZW52aXJvbm1lbnQKYyA0IGQKOGsgaGQgcmVzb2x1dGlvbgpwcm9kdWN0IHNob3QKYmxhY2sgbGVhdGhlciBib290cwpob3BlZnVsCnkKODVtbQphbmNpZW50CmR5c3RvcGlhbiBzY2lmaSBnZWFyCnJveW8KaG9ycm9yIGFydApibGFkZSBydW5uZXIgMjA0OQppbiBzdHlsZSBvZiBjbGFzc2ljaXNtCnNpbXBsZSBpbGx1c3RyYXRpb24KZXBpYyBza3kKd2FyZnJhbWUgZmFuYXJ0CmdyYWRpZW50CmRhcmsgc2tpbgpubyBmcmFtZXMKam9zaHVhIG1pZGRsZXRvbgpkb21lc3RpYwpjbGFzc2ljIG9pbCBwYWludGluZwpoeXBlcnJlYWxpc20gb2lsIHBhaW50aW5nCmNyZWF0aXZlIGRlc2lnbgprYXRzdXJhIG1hc2FrYXp1CndhcmhhbW1lciA0IDAgawpwYXJhbGxheAp2ZXJ5IGNvaGVyZW50IGFydHdvcmsKaHlwZXIgLSByZWFsCnJheSB0cmFjZQpydXN0aWMKYmVhdXRpZnVsIGxpZ2h0CmZlYXRoZXJzCnRlY2h3ZWFyCmNnIGFuaW1hdGlvbgoxIC8gNCBoZWFkc2hvdAp0b3AgdmlldwptZXRhbGxpYwprb2Rha2Nocm9tZQpzc2NpLWZpCmNsb3NlIHNob3QKZ3JlZyBydXRvd3NraQpiYXR0ZXJlZApleHRyZW1lIGNsb3NldXAKYWVyaWFsIHBob3RvZ3JhcGh5Cmh1bWFuIGFuYXRvbXkKc29sZGllciBjbG90aGluZwppbGx1bWluYXRlZApjbG9zZSB1cCBwb3J0cmFpdApjb2xvciBibGVlZApyb2NrcwpoYWNraW5nIGVmZmVjdHMKc2F2cmFzb3YgbGV2aXRhbiBwb2xlbm92CmhpZ2ggcXVhbGl0eSBkaWdpdGFsIGFydApyZWFsaXN0aWMgb2N0YW5lIHJlbmRlcgpydXN0CndpdGggYSBwb2ludGVkIGNoaW4KY2luZW1hdGljIDQgayB3YWxscGFwZXIKZGV2aWFuYXJ0CmRlbW9uaWMKcGhvdG9kaXJlY3RvciAzNjUKb3NzZHJhd3MKaG9ycmlmeWluZwpjZ3NvY2lldHkgOGsKc3RvaWMKd2hvIGlzIGEgbWFsZSBhbmRyb2lkCmFsZXhhbmRyb3MgcHlyb21hbGxpcwpkcmFnb24KYnViYmxlcwptYW5nYSBzdHlsZQprb2RhayBwb3J0cmEKcmVhbGlzdGljIGZhbnRhc3kKcmVuZGVyaW5nCmNob2tlcgpsb2lzaCB8CmhpZ2hseSBvcm5hdGUgaW50cmljYXRlIGRldGFpbHMKcmF5dHJhY2UKc3ZnCmN1cnZ5CnZhcG9yd2FyZQpoZHIgcmVuZGVyIGluIHVucmVhbCBlbmdpbmUgNQprZW5uZXRoIGJsb20KaGlnaCBlbmQgZGlnaXRhbCBhcnQKaG9sb2dyYXBoaWMKdmlldyBmcm9tIGFib3ZlCnRvcCAtIHJhdGVkCjhrIHVoZAphbWF6aW5nIGRldGFpbHMKdWx0cmEgaGlnaCBxdWFsaXR5CnVsdHJhIC0gZGV0YWlsZWQKZXhwaXJlZCBmaWxtCmRpZ2l0YWwgbWF0dGUgcGFpbnRpbmcKZXhhZ2dlcmF0ZWQgZGV0YWlsZWQKZ29yZ2VvdXMgdmlldwpuYXVkbGluZSBwaWVycmUKYmxhZGVydW5uZXIKdWx0cmF3aWRlIGFuZ2xlCmRpbWx5IGxpdApzdGFycnkgc2t5CmludGltaWRhdGluZwpmYW50YXN5IHBhaW50aW5nCnBob3RvcmVhbGlzdGljIGZhY2lhbCBmZWF0dXJlcwpkZXB0aCBsYXllcmluZwptb29keSBjb2xvcnMKaGF1bnRpbmdseSBzdXJyZWFsCmRlc2lnbgpmdXJzb25hCnBvc2luZyBsaWtlIGEgc3RhdHVlCm1lbnRhbCBhbGNoZW15CmYKd2VpcmQgcG9ydHJhaXQgYW5nbGUKcHJlLXJhcGhhZWxpdGUKdWx0cmEgLSByZWFsaXN0aWMKZXBpYyBsaWdodAphbmFtb3JwaGljIGxlbnNlcwppbnRyaWNhdGUgZGV0YWlsZWQgaWxsdXN0cmF0aW9uCnNzY2kgLSBmaSBhbmQgZmFudGFzeQpjb25jZXB0IGFydCB8IGJlZXBsZQozZCBzY3VscHR1cmUKaGFzc2VsYmxhZApub3N0YWxnaWEKcGFydGljbGVzIGFyZSBmbHlpbmcKaGlnaGx5IGNvaGVyZW50CnVsdHJhIGRlZmluaXRpb24KaGlsbHMKbmVvbiBzaWducwp0ZWV0aApoaWdoIGRlZmluaXRpb24gZGlnaXRhbCBhcnQKZXhwcmVzc2l2ZSBvaWwgcGFpbnRpbmcKY2lyY3VpdHJ5CmZpY3Rpb24KaHIgZ2lnZXIuIDggawo0IGsgcXVhbGl0eQpzdGlwcGxlZCBsaWdodApzdHJlZXQgdmlldwpoaWdoIHRleHR1cmVkCiMxIGRpZ2l0YWwgcGFpbnRpbmcgb2YgYWxsIHRpbWUKbWFzdGVyZnVsIGludHJpY2F0ZSBhcnR3b3JrCmhlYXZ5IGdyYWlueSBwaWN0dXJlCnVwbGlnaHQKYnJpZ2h0IHBhc3RlbCBjb2xvcnMKYXdhcmQgLSB3aW5uaW5nIHBob3RvZ3JhcGgKbWlkIHNob3QKd2VsbCBjb21wb3NlZApzdWJsaW1lCmJyb29kaW5nCmZhY2UgcG9ydHJhaXQKc2Z3IHZlcnNpb24KZm9nZ3kgYXRtb3NwaGVyZQpmaWxtIHBob3RvZ3JhcGh5CnN0YW5sZXkga3VicmljawphbmdlbApmdWxsIGxlbmd0aCBzaG90CnNsaWdodCBzbWlsZQpjb3ZlciBhcnQKc3dvcmQKZmFuY3kgY2xvdWRzCnNreSBibHVlIGV5ZXMKNCAwIG1wCmZyaWVuZGx5CmJpb21vcnBoaWMKOGsgb2N0YW5lIHJlbmRlcgp0ZXJyb3IKbmVrcm8KNDBtbSBsZW5zCmxpdmVseQpiZXN0Cmluc3BpcmluZwppbnN0YWdyYW0gcGhvdG8KaGVhZCBzaG90Cm9taW5vdXMgbGlnaHRpbmcKbWF0dGVwYWludGluZwpjb21peHdhdmUgZmlsbXMKcG93ZXJmdWwgaW1hZ2VyeQpwcm9mZXNzaW9uYWwgYXJ0CmYgMS4gNApzdHVkaW8gcGhvdG9ncmFwaApub3JtYW4gcm9ja3dlbGwgYW5kIGphbWVzIGplYW4KYmVhcmQKaGVhdnkgcmFpbgpsYXJnZSBleWVzCndpZGUgYW5nbGUgdmlldwo4IGsgYXJ0aXN0aWMgcGhvdG9ncmFwaHkKaGFucyB0aG9tYQpoZWxtZXQKY2cKcGVyZmVjdCBib2R5CmJsb29keQpzdGFyc2hpcCB0cm9vcGVycwpzd2VhdCBkcm9wcwpjb2xvciBwaG90b2dyYXBoCm1lbGFuY2hvbHkKaW5kdXN0cmlhbAptb3V0aApuYXR1cmFsCnJhaW5ib3cKc2t1bGxzCnNoYXJwIHRlZXRoCm1hbmdhIGFydApqZWFuIGRldmlsbGUKaGFsbHV6aW5vZ2VuaWMKcHJlY2lzZSBsaW5ld29yawpidWlsZGluZ3MKd2F0ZXJmYWxscwpmbGF0IHNoYWRpbmcKcnVpbnMKaWduYWNpbyBmZXJuw6FuZGV6IHLDrW9zCmJsYWRlIHJ1bm5lciAyIDAgNCA5CmJlYXV0aWZ1bCBkZXRhaWxlZCBleWVzCmNvbmNyZXRlCnNhZG5lc3MKaGlnaCB0ZWNoIGluZHVzdHJpYWwKYW1iZXIgZXllcwp3b2xmZ2FuZyBsZXR0bCBoaWdobHkgZGV0YWlsZWQKc2lsaG91ZXR0ZQpkeW5hbWljIGxpZ2h0bmluZwpoaWdoIHJlc29sdXRpb24gZmlsbSBzdGlsbApjb3JyZWN0IGZhY2UKcmVhbGlzdGljIHRleHR1cmVzCmZpbmUKYnVpbGRpbmcKaW50ZXJzdGVsbGFyCnlvdW5nIHdvbWFuCnJvZ2VyIGRlYWtpbuKAmXMgY2luZW1hdG9ncmFwaHkKcmVtYXN0ZXIKcGluayBoYWlyCm1vZGVybiBhcnQKY2xlYW4gaW5rIGRldGFpbGVkIGxpbmUgZHJhd2luZwpjaW5lbWF0aWMgc2NlbmUKY2luZW1hdGljIGxpZ2h0cwp3ZXRwbGF0ZQpubyBiYWNrZ3JvdW5kCmNvbXBsZW1lbnRhcnkgY29sb3JzCnJvYm90aWMKYWxleCBtYWx2ZWRhCmxvbmcgcmVkIGhhaXIKZHJhbWF0aWMgYXRtb3NwaGVyZQpydWdnZWQKZ2xvc3N5IHNraW4KbGl0aGUKZ2VhcnMKYWtpcmEKbXVsdGlwbGUgZXhwb3N1cmUKaGlnaGx5IHNhdHVyYXRlZCBjb2xvcnMKbGVhdmVzCmZsb2F0aW5nCndhdmVzCmdvb2QgcGhvdG9ncmFwaHkKYmx1cnJ5IGJhY2tncm91bmQKOCBrIHF1YWxpdHkKc3RhciBjaXRpemVuCmVwaWMgY2luZW1hdGljIHNob3QKY291bnRyeXNpZGUKbHVjYXNmaWxtCmV2ZXIgYWZ0ZXIgaGlnaApkZWVwIGNvbG91cnMKYWNjdXJhdGUgYW5hdG9teQpibGFjayBpbmsKZGFyayByb29tCm1hbgphYnMKbXkgcmVuZGl0aW9uCnN0YXIgd2FycyBleHBhbmRlZCB1bml2ZXJzZQpjdXRlIC0gZmluZSAtIGZhY2UKZ2FsYXhpZXMKZ29sZGVuIGxpZ2h0CmJpbyBsdW1pbmVzY2VudAphYm92ZSB2aWV3CmZ1aml0YSBnb3JvCmJlYXV0aWZ1bCBnaXJsCnR1YmVzCmZyb20gbGVhZ3VlIG9mIGxlZ2VuZHMKYXJzdGF0aW9uCnJlbGF4aW5nCnZpc2lvbmFyeSBhcnQKYW5pbWUgYWVzdGhldGljCnNpZGUgcG9ydHJhaXQKc3VucmlzZSBkcmFtYXRpYyBsaWdodApmcmFjdGFsIGZsYW1lCnNhbmQKY29sb3JzCmRyZWFtc2NhcGUKOGsgaGRyCmdlb21ldHJ5CjE1MCBtbSBsZW5zCjMgZCBzaGFkaW5nCnBhc3RvcmFsCnByaW50CmJydXRhbGlzdAphcnRpZmljaWFsIGludGVsbGlnZW5jZQpwbGF5ZnVsCmludHJpY2F0ZSBkcmF3aW5nCmNpbmVtYXRvZ3JhcGhpYwo4ayBwb3N0LXByb2R1Y3Rpb24KZG9uYWxkIHRydW1wCjEgMCAwIG1tCnNoYWRvd3kKcG9ydHJhaXQgcGhvdG9ncmFwaAo4IGsgb2N0YW5lIGRldGFpbGVkIHJlbmRlcgpleHRyZW1lbHkgaHlwZXIgZGV0YWlsZWQKZHhvIHBob3RvbGFiCmVtYmVycwptdXNocm9vbXMKb3V0ZG9vcnMKYXJuZXkgZnJleXRhZwpmMi44CmNvbWljIGFydApnaWFudApiZWF1dGlmdWwgbmF0dXJhbCBzb2Z0IHJpbSBsaWdodAp0aGlyZCBleWUKZmFzaGlvbiBlZGl0b3JpYWwKaG91ZGluaSBzaWRlZngKOGsgaGQgcmVuZGVyCmV4cHJlc3NpdmUgZW1vdGlvbnMKc3ltbWV0cmljYWwgY29tcG9zaXRpb24KaW5zYW5lbHkgaW50cmljYXRlIGRldGFpbHMKb3V0c3RhbmRpbmcKeW9oIHlvc2hpbmFyaQppbnRyaWNhdGUgYW5kIGVwaWMgY29tcG9zaXRpb24KNGsgcGhvdG8KaW1wbGFudHMKZXRoZXJlYWwgbGlnaHRpbmcKZGVlcCBjb2xvcnMKZXBpYyBkcmVhbWxpa2UgZmFudGFzeSBsYW5kc2NhcGUKaHlwZXJlYWxpc3RpYwpmLzgKaG9ycm9yIHNjZW5lCmNpbmVtYXRpYyBlYXN0bWFuIDUzODQgZmlsbQpmdWxsIGNvbG91cgppbmNyZWRpYmxlIGRldGFpbApwb3J0cmFpdCBpc29tZXRyaWMgZHJhd2luZwptb3JuaW5nIGxpZ2h0CmV2b2NhdGl2ZQp2ZXJ5IGludHJpY2F0ZSB1bHRyYWZpbmUgZGV0YWlscwpleHF1aXNpdGUgZGV0YWlscwpwZXJmZWN0aW9uCmVzdXRoaW8KcmVuZGVyZWQgaW4gbWF5YQpiYXN0aWVuIGxlY291ZmZlIC0gZGVoYXJtZQpjbGFzc2ljCm1lZGl0ZXJyYW5lYW4Kc3Vic3RhbmNlIHBhaW50ZXIKZ3JlZyBtYW5jaGVzcwpqYWt1YiByZWJlbGthCmFzIGEgZG5kIGNoYXJhY3RlcgpkaWdpdGFsIGFydCBwYWludGluZwpiZWF1dGlmdWwgY29sb3JzCndhbHQgZGlzbmV5ICgxOTM3KQpjaW5lbWF0aWMgbW9vZApkZWVwIGNvbG9yCmJhc3F1aWF0CjNkIGRlcHRoCnhmIGlxIDQKZGV0YWlsZWQgcHJvZmVzc2lvbmFsCmV4dHJlbWUgbG9uZyBzaG90CmNoYWlucwpyYWlueQpjbG9zZWQgZXllcwpzdW5iZWFtcwp0b3JuIG92ZXJhbGxzCmFsb25lCm1vbm9jaHJvbWF0aWMKaGlnaCB0ZWNoCndoZWFsYW4Kb2N0YW5lIHJlbmRlciA4awp1dG9waWEKemRpenNsYXcgYmVrc2luc2tpCmZyb250IHNob3QKZ3JhcGhpYyBzdHlsZQpsdXh1cmlvdXMKcHJvZmVzc2lvbmFsIGlsbHVzdHJhdGlvbgpiZWF1dGlmdWwgZGlnaXRhbCBhcnQKb24gYW4gYWxpZW4gcGxhbmV0CmhhbGYgYm9keSBwb3J0cmFpdApoZCBjcml0ZXJpb24KcGhvdG8gc3R1ZGlvCmJsYWNrIGV5ZXMKZGVwdGggcGVyY2VwdGlvbgppbiBzcGFjZQpzcXVhcmUgZW5peAo0ayB1bHRyYSBoZAp3aW5uaW5nLWF3YXJkIG1hc3RlcnBpZWNlCmNoaWxsd2F2ZQpicmlnaHQgY29sb3VycwpzaW1wbGljaXR5Cm9jdGFuZSByZW5kZXIgMSAyIDggawpzeW1tZXRyaWMgZmFjZQpmbGVzaApmYW5hcnQKZW5lcmd5CjIgNiBtbQpmYWJyaWMKZGFuY2luZwp3dXhpYQp3aW5uaW5nIHBob3RvCmxpcXVpZApjaGliaQptYWNybyBzaG90CmtleSBsaWdodApzdWJzdGFuY2UgZGVzaWduZXIKYXJ0c3RhdGlvbiB0cmVuZGluZwpsb3cta2V5IG5lb24gbGlnaHRpbmcKaW1hZ2luYXRpdmUhISEKaGVhdmVubHkgYXRtb3NwaGVyZQpzaW1wbGUgd2F0ZXJjb2xvcgpkZXRhaWxlZCBzaGFkb3dzCmF0IGR1c2sKY2hhcmFjdGVyIHNlbGVjdCBwb3J0cmFpdApibGl6emFyZCB3YXJjcmFmdCBhcnR3b3JrCmNsb3RoZWQKc2VhCmdyYW5kIQpkYyBjb21pY3MKYmFuZ3MKc3RhaW5lZCBnbGFzcwpjaW5lbWF0aWMgZHJhbWF0aWMgYXRtb3NwaGVyZQp1ZSA2CmJpb2xvZ3kKc3VubGlnaHQgc3R1ZHkKbWVnYXNjYW5zCnNwZWN1bGFyIGhpZ2hsaWdodHMKbWlkIC0gc2hvdAptaXJyb3JzCnJlYWxpc3RpYyBzaGFkb3dzCmNhcmljYXR1cmUKY2luZW1hdGljIG1hc3RlcnBpZWNlCnNjZW5pYyBiYWNrZ3JvdW5kCmRpZ2l0YWwgZHJhd2luZwpyYW5nZSBtdXJhdGEKcmVkIGJhY2tncm91bmQKMTk4MHMKZGFyayBhbmQgbXlzdGVyaW91cwpiZWtzaW5za2kgcGFpbnRpbmcKbm9uIGJsdXJyeQp2aXZpZCBhbmQgdmlicmFudCBjb2xvcnMKbG9va2luZyBoYXBweQptb2RlbGVkIGxpZ2h0aW5nCmZseWluZwp2ZWN0b3IgZ3JhcGhpY3MKYmxhY2sgYW5kIHdoaXRlIHBob3RvCmRhcmsgY29sb3VycwpjaHJvbWUgYWNjZW50cwpzb2Z0IGV5ZXMgYW5kIG5hcnJvdyBjaGluCmluIGNsb3VkcwpyZW5kZXJlZApjYXQKd2hpdGUgZXllcwpsb3cgbGV2ZWwKZGFuYm9vcnUKdmlzaWJsZSBmYWNlCnJveWFsCnRyb3BpY2FsCm1lbGFuY2hvbGljCmRuZCBjaGFyYWN0ZXIKdmxhZGltaXIgdm9sZWdvdgpqYW1pZSBoZXdsZXR0IGFuZCBheWFtaSBrb2ppbWEKc3VwZXIgZGV0YWlsZWQgYW5kIGludHJpY2F0ZQpmYWNlIGluIGZvY3VzCmNsZWFuIGxpbmV3b3JrCnNrZWxldG9uCm92ZXJjYXN0CmdhbWVwbGF5CmNoYXJhY3RlciBjb25jZXB0IHBvcnRyYWl0CjQgayBkaWdpdGFsIGFydApzaGFycCBmb2N1cyBvbiBleWVzCmN5YmVycHVuayAyIDAgNyA3CnBob3RvaWxsdXN0cmF0aW9uCndsb3AuIHNjaWZpCmJveGFydApkeW5hbWljIHZvbHVtZXRyaWMgbGlnaHRpbmcKZmFudGFzeSBiYWNrZ3JvdW5kCmxvdyBhbmdsZSBzaG90CnRvbmUgbWFwcGVkCmFkdmFuY2VkIHRlY2hub2xvZ3kKbmlnaHRtYXJlIGFub21hbGllcwpqYW1lcyBqZWFuIGFuZCB3bG9wCnRvcCBsaWdodGluZwp0cmFuc3BhcmVudApoaWdoIHF1YWxpdHkgaW1hZ2UKYmVhdXRpZnVsIHBhaW50aW5nCnBlb3BsZQpmYW50YXN5IHJlYWxpc20KZmlzaAp0cmVlcyBpbiB0aGUgYmFja2dyb3VuZApnb3dhcmQKdHdvIGFybXMKbWljcm8gbWFjcm8gYXV0b2ZvY3VzCm1hc3RlcnBpZWNlIGNvbXBvc2l0aW9uCmVtb3Rpb25hbGx5IGV2b2tpbmcKc3RhciB0cmVrCmxvdyBhbmdsZSBjYW1lcmEKbWFrZXVwCjIgNCBtbSBsZW5zCnJhaW55IHdlYXRoZXIKY3liZXIKY2luZW1hdGljIHJlbmRlcgpzZncKb2lsIHBhaW50aW5nIG1hc3RlcnBpZWNlCmVzdGFibGlzaGluZwpib2xkIGNvbG9ycwpzbW9vdGggc2hhZGluZwplcGljIGZhbnRhc3kgc3R5bGUgYXJ0CnN0cm9uZyBzaGFkb3dzCmxvbmcgYmxvbmRlIGhhaXIKaHVtYW5vaWQKaHlwZXIgZGV0YWlsbGVkCnBvcnRyYWl0IG9mIGEgYmVhdXRpZnVsIHdvbWFuCnBzeWNoZWRlbGljIGV4cGVyaWVuY2UKYmlvdGVjaG5vbG9neQpjb3JvbmEgcmVuZGVyCnVuZm9jdXMKbmF0aW9uYWwgZ2VvZ3JhcGhpYyBwaG90bwpkcmVhbS1saWtlIGhlYXZ5IGF0bW9zcGhlcmUKbmljZSBjb21wb3NpdGlvbgpzYXJnZW50IGFuZCBsZXllbmRlY2tlcgptYWNoaW5lIGZhY2UKYmxhbmsgc3RhcmUKaW50cmljYXRlIHRleHR1cmVzCmV4cGxvc2lvbgpjYW5vbiBlb3MgcjMKYWNjZW50IGxpZ2h0aW5nCndhbHRlciB3aGl0ZQp6ZW4KYm9yZWQKZnJhY3RhbCBsYWNlCnVsdHJhIHJlYWxpc3RpYyBkZXRhaWxzCmJ1dGNoZXIgYmlsbHkgc3R5bGUKY2hyb21hdGljCmphbWEganVyYWJhZXYKZ2FtZXBsYXkgc2NyZWVuc2hvdApjb21wbGltZW50YXJ5IGNvbG9ycwpyZWZsZWN0aXZlIGV5ZXMKdmVjdG9yIGlsbHVzdHJhdGlvbgoxIDkgOCAwIHMKcHVuayByb2NrCm5vIGhlbG1ldAptYXR0ZSBwYWludApsb25lbHkKYWxidW0gYXJ0CmRpZ2l0YWwgcmVuZGVyCnRha2F0byB5b21hbW90bwpzdHJvbmcgbGlnaHRzCmxvbmcgc2hhZG93cwpoaXN0b3JpY2FsCnByb2Zlc3Npb25hbCBwaG90b2dyYXBoCnRlaG5pY29sb3IKYmVhdXRpZnVsIHZvbHVtZXRyaWMgbGlnaHRpbmcKZ3J1bmd5Cm5hdXRpbHVzCmV4dGVyaW9yCnNwYWNlc2hpcAp3ZXQgcmVmbGVjdGlvbnMKNSBwb2ludHMgb2YgYXJ0aWN1bGF0aW9uCmJsaXp6YXJkCnBob3RvZ3JhcGh5IGF3YXJkCnN1cGVyaW9yIHF1YWxpdHkKY3J5c3RhbHMKYmFzaWMgd2hpdGUgYmFja2dyb3VuZAplbGVnYW50IGNsb3RoaW5nCmZhY2lhbCBhY2N1cmFjeQpwZWFjZWZ1bCBleHByZXNzaW9uCmV4b3RpYyBhbGllbiBmZWF0dXJlcwp3YXJmcmFtZQpqZWZmIGVhc2xleSBkcmFtYXRpYyBsaWdodAphY3Rpb24gZmlndXJlCnN0dWRpbyBnaGlibGkgc3R5bGUKd2luZG93CnRyZW5kaW5nIG9uIGFyc3RhdGlvbgpoaWdobHkgZGV0YWlsZWQgYXJ0CmRhaW50eSBmaWd1cmUKYnJ1dGFsCmJlYXV0aWZ1bCB3b21hbiBwb3J0cmFpdApvcGVuaW5nCmpld2VscwphcmNoaXRlY3R1cmFsIHBob3RvZ3JhcGh5Cmh5cGVycmVhbGlzdGljIGJlYXV0aWZ1bCBmYWNlCnZocwpkZW5vaXNlCmNsZWFyIHNreQpyZWQgY29sb3IgYmxlZWQKZW5oYW5jZWQgZXllIGRldGFpbApzb21icmUgbW9vZApibHVlIGhvdXIKY2luZW1hdGljIGxvb2sKc3VwZXIgd2lkZSBhbmdsZQplYXJseSBtb3JuaW5nCmFjcnlsaWMgcGFpbnRpbmcKbWF0dGUgb2lsIHBhaW50aW5nCmRpZ2l0YWwgcGFpbnQKc3ltbWV0cmljYWwgc2hvdWxkZXJzCmhlYWQgYW5kIGNoZXN0IG9ubHkKaGlnaCBrZXkgbGlnaHRpbmcKaGVhcnRoc3RvbmUgY2FyZCBnYW1lIGFydHdvcmsKaGFubmFoIHlhdGEgY2hhcmxpZSBpbW1lcgphZHZhbmNlZCBsaWdodGluZyB0ZWNobm9sb2d5Cm1pZGRheQooICggZGl0aGVyICkgKQooICggbWFkcyBiZXJnICkgKQpob3Jucwpnb2xkZW4KZnJhY3RhbCBzdHJ1Y3R1cmVzCm5hdHVyYWwgYmFja2dyb3VuZApwaWdzCnNlZHVjdGl2ZSBleWVzIGFuZCBmYWNlCmdpYW50ZXNzCnJlbmRlcmVkIGluIGNpbmVtYSA0IGQKY29uZmlkZW50IHBvc2UKbmF0dXJhbCBiZWF1dHkKbWFjYWJyZQpmaW5uaWFuIG1hY21hbnVzCndvcmtzYWZlCnNpbHZlciBoYWlyCnBlcmZlY3Qgc3ltbWV0cmljYWwgYm9keQp3YXRlcmNvbG9yIHBhaW50aW5nCnN0cm9uZyBsaWdodGluZwptYXJpanVhbmEKZ291YWNoZQpwaGlsIGhhbGUgYW5kIGtlbnQgd2lsbGlhbXMKY2hhb3RpYwpsdW1lbgpzbGVlawphd2FyZCB3aW5uaW5nIHBhaW50aW5nCnNwYXJrbGluZwpnYXJkZW4KcmVhbGlzdGljIHBob3RvZ3JhcGh5Cm9ybmF0ZSBnaWxkZWQgbWVkaWV2YWwgaWNvbgp0YXJvdApzdHVkaW8gbGFuZHNjYXBlCm11c2NsZXMKZ2xhbW91ciBwb3NlCnRvcC1yYXRlZApwc2lsb2N5YmluCml2eQppbnRyaWNhdGUgYXJ0d29yawpib2IgaGFpcmN1dApwYXJ0aWNsZXMgYW5kIGR1c3QgaW4gdGhlIGFpcgpqb2huIHBhcmsgYW5kIGdyZWcgcnV0a293c2tpCmFwb2NhbHlwc2UgYXJ0CmlrZWJhbmEKMyBkIGZpbmFscmVuZGVyCmF3YXJkLXdpbm5pbmcgcGhvdG8Kc3VwZXIgcmVzb2x1dGlvbgozZCBtb2RlbAp2aW50YWdlIHNjaSAtIGZpIGFydAp3aWxsaWFtIGJvdWd1ZXJlYXUKaGVhcnRoc3RvbmUgc3BsYXNoIGFydApza3lyaW0KZmFjaW5nIGNhbWVyYQpkZXRhaWxlZCBmdXIKcGFuY2FrZXMKcG9zdHByb2Nlc3NlZApsb2ZpCmdpbmdlciBoYWlyCmlubm9jZW50CndpdGggYW54aW91cwpmb3Jnb3R0ZW4gcmVhbG1zCmNsZWFyIGZhY2UKaHEgYXJ0d29yawo0ayBwb3N0LXByb2Nlc3NpbmcKYXJjaHZpegpmaWxtIHBob3RvCmluIGdhbWUgc2NyZWVuc2hvdAplcGljIHBvc2UKcmF5dHJhY2VkCndvcmxkIG9mIHdhcmNyYWZ0CnNraW5ueQpyZWFsaXN0aWMgZGlnaXRhbCBhcnQKY29taWMgYm9vayBhcnQKbWFjaGluZXMKcnR4IHJlbmRlcmluZwo3IGRheXMgdG8gZGllIHpvbWJpZQpncmVlawpmdWxsIGJvZHkgY2hhcmFjdGVyIGRyYXdpbmcKbG9va2luZyB1cAo4ayB1bHRyYSBoZApmaW5hbHJlbmRlcgpmaWxpZ3JlZQpjaW5lY29sb3IKZnVqaWZpbG0KaGlnaGx5IGRldGFpbGVkIGlsbHVzdHJhdGlvbgpwcm9maWxlCnRlbGVwaG9uZSBwb2xlCjEgMCA4IG1lZ2FwaXhlbHMKMyBkIGFydApiZWF1dGlmdWwgZmVhdHVyZXMKZmxvd2luZwpkJmQgdHJlbmRpbmcgb24gYXJ0c3RhdGlvbgp0ZXJtaW5hdG9yCmdlb3JnaWMKdW5pdmVyc2UKZ3V3ZWl6CnVsdHJhIGhpZ2hseSBkZXRhaWxlZApjYW5vbiAzMDBtbQpzaG9ydCBibGFjayBoYWlyCnZlcnkgaGlnaGx5IGRldGFpbGVkCnNjaWVudGlmaWMgZ2xhc3N3YXJlCnN0cm9uZyBsaW5lCmdvbGRlbiByYXRpbyBkZXRhaWxzCnVuZGVyZ3JvdW5kCmZsYXNoIHBob3RvZ3JhcGh5CmRpZ2l0YWwgcGFpbnRpbmcgbWFzdGVycGllY2UKaGlnaCBxdWFsaXR5IHByaW50aW5nCmRyYW1hdGljIGFuZ2xlCnVwbGlmdGluZwpmb2N1cyBvbiBmYWNlCjQwbXAKaHlicmlkCmFuaW1lIGlsbHVzdHJhdGlvbgp2b2x1bWV0cmljIGNsb3VkcwpjcmFuZSBzaG90CnNhdHVyYXRlZApob2x5CnZpc3VhbGx5IHN0dW5uaW5nCmFydGJvb2sKc3RldmUgaGVuZGVyc29uCmNvbGQgaHVlJ3MKam9lIGJpZGVuCmhhdXRlIGNvdXR1cmUKcHJpc21hdGljCm1pbmlza2lydAo5MG1tCnNjYXJzCnNhY3JlZApsaWZlIG1hZ2F6aW5lIHJlcG9ydGFnZSBwaG90bwpzcGVlZApyYWlueSBkYXkKZmVtYWxlIGJlYXV0eQpzaWRlIGJvb2IKaG9sb2dyYXBoaWMgdW5kZXJ0b25lcwpzdGlsbCBsaWZlCnJlYWxpc3RpYyBwaG90b2dyYXBoCnVwc2NhbGUKaW4gdGhlIGRlc2VydApqdWxlcyBiYXN0aWVuIC0gbGVwYWdlCnNpbmdsZSBwZXJzb24KZGVuaXMgdmlsbGVuZXV2ZQp6b290b3BpYQpoLnIuIGdpZ2VyIHN0eWxlCmNpbmVtYXRvZ3LDoWZpY2EKaW5rdG9iZXIKc3RhcnJ5IG5pZ2h0CmtpbGlhbiBlbmcgdmlicmFudCBjb2xvdXJzCmxvbGEgZHVwcmUKdG9uYWxpc3QKd2hpdGUgZHJlc3MKMTM1IG1tCnN0dWRpbyBzaG90CnBhc2NhbCBibGFuY2hlCnN1cnJlYWwgYWJhbmRvbmVkIGJ1aWxkaW5ncwpsb3N0IGNpdmlsaXphdGlvbnMKOCBrIGhkcgpmYW50YXN5IGx1dApyYXkgdHJhY2luZyByZWZsZWN0aW9ucwphc2lhbgpoeXBlcnJlYWxpc3RpYyBzdXJyZWFsaXNtCm1hZ2ljIHRoZSBnYXRoZXJpbmcgYXJ0CmZsdWZmeQpnb29kIGNsZWFyIHF1YWxpdHkKZXhwcmVzc2l2ZSBleWVzCjEgNSAwIG1tCnN0eWxpc3RpYwp3aXphcmQKd2hpbXNpY2FsISEKcGVubnl3aXNlIHN0eWxlCmxvdWlzZSB6aGFuZwpyYXkgLSB0cmFjaW5nCmJpemFycmUgY29tcG9zaXRpb25zCmNocm9tZSBzcGhlcmVzIG9uIGEgcmVkIGN1YmUKcmVkIGxpcHMKZnVsbC1oZApzZXJlbmUgYmVhY2ggc2V0dGluZwpnb2QKcHVkZGxlcwp1bHRyYSBkZXRhaWxzCm5lZ2F0aXZlIHNwYWNlCmVkaXRvcmlhbCBwaG90b2dyYXBoeQp2YXJpb3VzIHJlZmluaW5nIG1ldGhvZHMKYXR0cmFjdGl2ZSBtYWxlCmJlYXV0aWZ1bCBwZXJmZWN0IGZhY2UKcGFub3JhbWEKcGljdHVyZQp2c2NvCnJpc29ncmFwaApvdmVyaGVhZCB2aWV3Cm5hdGFsaWUgcG9ydG1hbgpub2lzZQp0cmVlCmhpZ2hseSB0ZXh0dXJlZAp3YXIgaGVybwpleHF1aXNpdGUKY29wcGVyCmhhaXJ5IHRvcnNvCmhvcnJvciB0aGVtZWQKZmFjZSBzeW1tZXRyeQpkZXN0cnVjdGlvbgplb3MtMWQKdGltIGJ1cnRvbgpwb3AgYXJ0IHN0eWxlCnNwZWN1bGFyIHJlZmxlY3Rpb24KdG9wIGxpZ2h0CmRpc25leSBwaXhhcgpjYWxtaW5nCmR1bmUKc2hhcnAgaW1hZ2UKYmVhdXRpZnVsIGR5bmFtaWMgbGlnaHRpbmcKc3VsdHJ5CjQgayB1bHRyYSBoZApjb2xsYXIKdmlicmFudCBuYXR1cmUKbWFuZ2EgY292ZXIKZ2VsYXRpbiBzaWx2ZXIgcHJvY2VzcwpicmVhdGggb2YgdGhlIHdpbGQKZGFyayBjbG91ZHMKY2xlYW4gc2hhdmVuCnVuaXR5Cm1ldHJvcG9saXMKZ2hvc3RseQppbnRyaWNhdGUgYmFja2dyb3VuZApvcm5hdGUgYmFja2dyb3VuZApzdXBlciByZWFsaXNtCmZpZXJjZQp0aHVuZGVyCmRldGFpbGVkIGxpbmVzCmdsaXR0ZXIKbG9uZyBoYWlyIHN0cmFpZ2h0IGRvd24KY3Jpc3AgbGluZXMgYW5kIGNvbG9yCmh5cGVycmVhbGlzdGljIHBvcnRyYWl0CnRhbiBza2luCmx1c2Npb3VzIHBhdHR5IHdpdGggc2VzYW1lIHNlZWRzCnN0eWxlIG9mIHBldGVyIG1vaHJiYWNoZXIKY2VudHJlZApiZWF1dGlmdWwgZHJhbWF0aWMgbGlnaHRpbmcKZGlnaXRhbCBhcnQgbWFzdGVycGllY2UKdmFuaXNoaW5nIHBvaW50CnllbGxvdyBleWVzCmhpZ2gtcmVzb2x1dGlvbiBwaG90b2dyYXBoCndhdGVyY29sb3VyCmR1c3Qgc3Rvcm0KaXNvbWV0cmljIDNkCmxlaWNhIHNsIDIgNSAwIG1tCmY4IGFwZXJ0dXJlCnByb2R1Y3QgZGVzaWduCnN0YWdlIGxpZ2h0aW5nCmRvb20KYmFkYXNzCnByaXN0aW5lCmJsYWNrIHNtb2tlCmh1bWFuIHN0cnVjdHVyZQp0b3AgY2luZW1hdGljIGxpZ2h0aW5nCmJydWVnZWwKYmlnIHNtaWxlCmZhbmdzCmRyYW1hdGljIGxpZ2h0cwpoZCBvY3RhbmUgcmVuZGVyCnBhaW50aW5nIG9pbCBvbiBjYW52YXMKZGVicmlzCnZlcnRpY2FsIG9yaWVudGF0aW9uCjhrIHdhbGxwYXBlcgp0d28gbGVncwpleHRyYSBvbmlvbnMgYW5kIGtldGNodXAKbmV1cm9tYW5jZXIKcm9kZ2VyIGRlYW4KdGhlIGVuZCBvZiB0aGUgd29ybGQKcnVzcyBtaWxscwpzdHJlZXQgcGhvdG9ncmFwaHkKMTA4IG1lZ2FwaXhlbHMKY3JhenkKY2VsIC0gc2hhZGVkCmNvbmNlcHR1YWwKc3ByaW5nCm1vdmllIHNob3QKdi1yYXkKcmFnZQp3aWNjYW4KZmlzaGV5ZQo5IDAgcyB2aWJlCmNvbG9yaW5nIHBhZ2VzCmFydGV5IGZyZXl0YWcKc3RhcnMgYW5kIHBhaXNsZXkgZmlsbGVkIHNreQp3YXJtIHRvbmVzCndlYXJpbmcgZ2xhc3Nlcwpjb3JlbCBwYWludHNob3AgcHJvCnNvZnQgY2luZW1hdGljIGxpZ2h0aW5nCnJhZGlhbnQgY29sb3JzCnN5bW1ldHJpY2FsISEKYmx1ZSBjb2xvciBzY2hlbWUKdGVjaG5pY2FsCm5hc2EKdWx0cmF3aWRlIHNob3QKZnVsbCBib2R5IHZpZXcKZWxlY3RyaWMKc3Vubnkgd2VhdGhlcgpzb2Z0IHZvbHVtZXRyaWMgc3R1ZGlvIGxpZ2h0aW5nCmh1bnRlciBzIHRob21wc29uCmFsY2hlbXkKY2FzdGxlCmdyZXkKYW1hemluZyBjb2xvcnMKcGVuY2lsIGFydApzbW9vdGggc2tpbgpyb2Jlcwp2b2x1bWV0cmljIGxpZ2h0IHNjYXR0ZXJpbmcKbWFkZSBpbiBtYXlhCndhdGVyY29sb3JlZAplbmhhbmNlZCBsaWdodCBlZmZlY3QKYmVycnkganVpY2UgZHJpcHMKbWlkIHZpZXcKZHluYW1pYyBwb3NlcwptdXRlZCBjb2xvcgpoaWdobHkgYWNjdXJhdGUKcGVuY2lsIGFuZCBpbmsKaG9ycmlmaWMKOCBrIDQgawpzZWFtbGVzcwpncmltCmNsb3NldXAgcG9ydHJhaXQKc3ltbWV0cnkgZmFjZQphdG1vc3BoZXJpYyBwZXJzcGVjdGl2ZQp1bHRyYSBoaWdoIHJlc29sdXRpb24KY29zbW9zCndhcmhhbW1lciA0MGsKd2V0YQpzaGlydGxlc3MKZ3JhcGhpYyBpbGx1c3RyYXRpb24KdmVyeSBhZXN0aGV0aWMKc2hhcnAgZm9jdXMgaWxsdXN0cmF0aW9uCmxlZHMKYmx1ZSBiYWNrZ3JvdW5kCmFydGVtCmxpZ2h0IGxpZ2h0aW5nIHNpZGUgdmlldwp2aXZpZCBhbmQgdmlicmFudApwb3J0Zm9saW8gaWxsdXN0cmF0aW9uCmxpbWl0ZWQgY29sb3IgcGFsZXR0ZQpsYXRleApla2EncyBwb3J0YWwKYXdhcmQgLSB3aW5uaW5nIGFydAp1bnJlYWwgZW5naW5lIGNpbmVtYXRpYyBzbW9vdGgKaW50cmljYXRlIGRldGFpbGVkIGVudmlyb25tZW50CmRlbGljYXRlIGZhY2lhbCBmZWF0dXJlcwpjcnlzdGFsCmludHJpY2F0ZSBkZXNpZ24KZHVuZ2VvbnMgJiBkcmFnb25zCmhlYXJ0aHN0b25lIGFydCBzdHlsZQpibGFkZXJ1bm5lciBzdHJlZXQKdWx0cmEgcmVhbGlzbQppbXBvc2luZwpzdGV2ZW4gb3V0cmFtCm5hbml0ZQpzdGFyc2hpcHMKZmFudGFzeSBsYW5kc2NhcGUKY29taWMgYm9vayBzdHlsZQpjaW5lc3RpbGwgNTBkCmludGVuc2UgbGluZSBhcnQKY29zbWljIGhvcnJvciBwYWludGluZwpib3NjaApyb3lhbHR5Cm1lc3N5CnBvcnRhbApmcmFuayB3ZXN0b24gYW5kIGd1c3RhdmUgYmF1bWFubgpjb2xvciBmaWxtCnByb3BvcnRpb25hbApjb2xvcmZ1bGwKaW50ZXJlc3RpbmcKMyBkbyBtYWdhemluZQp0aGUgZXhwYW5zZQpzcGFjZSBiYWNrZ3JvdW5kCmVuZ3JhdmluZwpzaWdpbHMKYW50aHJvCm1lc21lcml6aW5nCnRyaWJhbAptb2ViaXVzIGFuZCBlZHdhcmQgaG9wcGVyCmNhbmRsZWxpZ2h0Cm1pbGl0YXJ5IGFydApzaWdtYSBtYWxlCjM1IG1tCm52aWRpYQpwc3ljaGVkZWxpYyBjb2xvcnMKb25seSB0d28gaGFuZHMKY2VsZXN0aWFsCm1pa2tvIGxhZ2Vyc3RlZHQKZWJheQpsaW5lIGRyYXdpbmcKaXJpbmEgZnJlbmNoCnRhdHRvbwpyYXlzIG9mIGxpZ2h0CmNvbWJhdCBib290cwppbiBhIHN0dWRpbyBob2xsb3cKcGhvdG9qb3VybmFsaXNtCmN1dGUgc21pbGUKa25pZ2h0CmRyeQpibHVycmVkCmdlbnRsZSBleHByZXNzaW9uCmxpb3NoCnJpY2ggZGVlcCBjb2xvcnMgbWFzdGVycGllY2UKc2NpLWZpIGZhbnRhc3kKZ3JheXNjYWxlCmFydGVyaWVzCmxvbmcgYnJvd24gaGFpcgpjYXJ0b29ueQpoeXBlcmRldGFpbApzdHVubmluZyBhdG1vc3BoZXJlCnJpY2ggY29sb3IKZXh0cmVtZWx5IGhpZ2hseSBkZXRhaWxlZAp2b2x1bWV0cmljIGNpbmVtYXRpYyBsaWdodApwYXR0ZXJuCmRldGFpbGVkIGFuaW1lIGFydAp3YXJmcmFtZSBkZXN0aW55IGZhbmFydAppbnRyaWNhdGUgYWxpZW4gYm90YW5pY2FscwpzaGltbWVyaW5nCmhpZ2ggcXVhbGl0eSByZW5kZXIKaG9yaXpvbiBmb3JiaWRkZW4gd2VzdApyYWRpYW50IGxpZ2h0aW5nCmtpbnRzdWdpCmJlcmdleQp0YXJvdCBjYXJkIHN0eWxlCmFsaWNlIGluIHdvbmRlcmxhbmQKZHJhbWF0aWMgY2xvdWRzCnN5bnRoIGZlZWwKdmVyeSBkZXRhaWxlZCBleWVzCnN0b3JtIGNsb3VkcwpyaXBwbGVzCmh5cGVybWF4aW1hbGlzdGljCmdyYWRpZW50cwpkZWVwIGFlc3RoZXRpYwpsZWF0aGVyCmZyb250IGZhY2luZwpkZXRhaWxlZCBwaG90bwpiZWF1dGlmdWwgYm9keQptb2Rlcm4gZmluZSBhcnQKbGlnaHQgc2hhZnRzCnNwYXJrbGVzCnNvZnQgbGlnaHRuaW5nCmhvdXJnbGFzcwpmbG93aW5nIHJvYmVzCnJlYWwgZGxzciBwaG90b2dyYXBoeQpleHRyYSBkZXRhaWwKbmF0dXJhbCBjb2xvcnMKcGFzdGVsIGNvbG9yCmluZHVzdHJpYWwgZGVzaWduCmZyYWN0YWwgY3J5c3RhbAo0IGsgcmVuZGVyCnVsdHJhIGhpZ2ggZGV0YWlsZWQKaGlnaCBkeW5hbWljIHJhbmdlCmNsb3NlIC0gdXAgcG9ydHJhaXQKdmludGFnZSBwaG90bwptYWdpY2FsIGZvcmVzdApjaW5lbWF0aWMgY29sb3IgZ3JhZGluZwpzcGlyaXR1YWwgc2NpZW5jZQphcnRnZXJtIGFuZCBncmVnIHJ1dGtvd3NraQplcGljIGZhbnRhc3kgYXJ0CmYzMgpzb255IGEgNyByCm11ZApibHVzaAptYXR0ZSBjb2xvcnMKc3BlZWRwYWludGluZwpnb3RoaWMgYXJjaGl0ZWN0dXJlCmxvdyBhbmdsZSB2aWV3CnBlbmNpbApoZXJhbGRvIG9ydGVnYQpmaXNoIGV5ZSBsZW5zCm11c2V1bQpwaGlsIGhhbGUKYnJvd24gbXVkCmh5cGVyIC0gcmVhbGlzdGljIHJlbmRlcgptb2hyYmFjaGVyCjEgOSAyIDAgcyBmYXNoaW9uCmJhdHRsZQpkaW9yYW1hCnBpeGVsYXJ0CnVsdHJhIHJlYWxpc3RpYyEhIQp2b2d1ZSBjb3ZlciBzdHlsZQpmYXNoaW9uIHNob290CmYgOApjdGh1bGh1CnByZW1pdW0gcHJpbnRzIGF2YWlsYWJsZQpza2V0Y2hmYWIKbGVucyBmbGFyZXMKZW5jaGFudGVkCnN0cmlraW5nCm9sZCBwb2xhcm9pZApmdWxsIGJvZHkgc2hvdCBjbG9zZSB1cAp3b25kZXIKcHVycGxlIGNoZWNrZXJib2FyZCBiYWNrZ3JvdW5kCnJpZ2h0IHNpZGUga2V5IGxpZ2h0CnNlbnN1YWwgbGlnaHRpbmcKd2FyZnJhbWUgYXJ0CmtvZGFrIGVrdGFjaHJvbWUKZ2hvc3QKZGlnaXRhbCBmYW50YXN5IGFydApmYWNpYWwgZmVhdHVyZXMKdGVhcnMKY2xlYXIgaW1hZ2UKZXBpYyBhdG1vc3BoZXJlCmxpZ2h0IGFuZCBzaGFkb3cKZGFyayByZXRyb3dhdmUKY2Fub24gciAzCnNoYWRlZApmcmlnaHRlbmluZwpoZWFkc2hvdCBhbmQgYm9keXNob3QKbW9kZWwgcG9zZQpoaWdobHkgZGV0YWlsZWQgOCBrCnJlYWxpc3RpYyBodW1hbiBhbmF0b215CmxpZ2h0IGZvZwp0cmVuZGluZyBpbiBwaW50ZXJlc3QKdm9sdW1ldHJpYyBzaGFkaW5nCmhlcm9pYyBmYW50YXN5CmplcmVteSBsaXBraW4KeSAyIGsgY3liZXJjb3JlCmJ1bXAgbWFwcGluZwpkZXRhaWxlZCBiZWF1dGlmdWwgcG9ydHJhaXQKc29mdCBnbG93CnVucmVhbCBlbmdpbmUgOGsKZXVnZW5lIGRlIGJsYWFzCnN1bW1lciBtb3JuaW5nCmxvcmVhbApuaW50ZW5kbwppbiBhIGZvcmVzdApsZXllbmRlY2tlcgptb29keSBsaWdodApzYWZlYm9vcnUKMyA1IG1tIG1hY3JvIGxlbnMKbG9hZGluZyBzY3JlZW4Kc3RyZWV0CmdyYWZsZXgKdGhlIGdvbGRlbiByYXRpbwppbnRlcmlvciBkZXNpZ24KY2luZXN0aWxsIDggMCAwIHQgMyA1IG1tIGIgJiB3Cm11dGVkCjE5NzBzCnRleHR1cmVkIHNraW4KY2xlYXIgd2VhdGhlcgphZXN0aGV0aWNhbGx5IHBsZWFzaW5nCmNoYXJjb2FsCnZpc3VhbCBub3ZlbApsZW5zZmxhcmUKZGFyaXVzIHphd2FkemtpCnZpbnRhZ2Ugc2NpIC0gZmkgcG9zdGVyCmFubmEgcG9kZWR3b3JuYQpjb2xvciBibG9ja2luZyEKcmV6YSBhZnNoYXIKYmlnZ2VyIHRoYW4gZ2FsYXh5CmZyZW5jaCBjb21pYyBzdHlsZQpmYWlyeSB0YWxlCmhvcnJvciBtb3ZpZQpjcmVlcHlwYXN0YQpwcm9jZWR1cmFsbHkgZ2VuZXJhdGVkCnVuaXF1ZQpncmVlbiBza2luCjNkIHNjZW5lCmNvbnNpc3RlbnQKcG9zZQpvdXRkb29yCmhhcmQgc3VyZmFjZSBtb2RlbGluZwpmdWxsLWJvZHkKc2luZ2xlIHN1YmplY3QKcGhvdG9ncmFwaHkgNGsKY2xhd3MKZ3JpbWRhcmsKMiAwIDAgbW0gZm9jYWwgbGVuZ3RoCnJldHJvd2F2ZSBwYWxldHRlCmxpZ2h0IHJhaW4KY2xvYWsKd2VhcG9uCnNvbGlkIGNvbG9ycwpmdXR1cmlzdGljIGNpdHkKODAwdApyYW5kb20KamVsbHlmaXNoIHBob2VuaXgKOGsgcXVhbGl0eQpiZWF1dGlmdWwgcG9ydHJhaXQKdHJhZGl0aW9uYWwgamFwYW5lc2UgY29sb3JzCnJlbmFpc3NhbmNlIHN0eWxlCmZ1bGwgZmFjZQpibHVlIGxpZ2h0CnN0dW5uaW5nIGRldGFpbAp1ZTYKam9obiB3aWxsaWFtcyB3YXRlcmhvdXNlCnpkaXNsYXYgYmVrc2luc2tpCnRyYW5zZm9ybWVycwptaWNybyBhcnQKa3Vicmljawpjb25jZXJ0IHBvc3RlcgpmcmFuayBnZWhyeQpjZ3NvY2lldHkgYW5kIGZlbmdodWEgemhvbmcKZWFyIGZsb29mCmFjY3VyYXRlIGFuaW1hbCBpbWFnZXJ5Cm9ic2lkaWFuCjE2ayByZXNvbHV0aW9uCnVucmVhbCA2CmhvdCB0b3lzCmZyYW1lZApjdXRlIGZyZWNrbGVzCmhpZGFyaQphbWJlciBqZXdlbHMKc3RlbmNpbApmdWxsIC0gYm9keSBwb3J0cmFpdApoaWdoIC0gY29udHJhc3QKb2xkIHBhd24gc2hvcAptaWdub2xhCnZpYnJhbnQgcmVhbGlzdGljIGNvbG9ycwpyZWZsZWN0aXZlIHB1ZmZ5IGNvYXQKOCBrIG9jdGFuZSBjb21wcmVoZW5zaXZlIHJlbmRlcgppc28xMDAKMS8xMjUKZ2Vuc2hpbiBpbXBhY3QKYmFjayBsaWdodApyaWNoIGdyYWlueSB0ZXh0dXJlCnpvb21lZCBpbgphY2N1cmF0ZSBmZWF0dXJlcwpoYXJkIGxpZ2h0CnBhaW4KODBzCnNpbGt5IGhhaXIKaW5mb2dyYXBoaWMKOCA1IG1tIHBob3RvZ3JhcGgKc3RvcCBtb3Rpb24gdmlueWwgYWN0aW9uIGZpZ3VyZQpwaW5lIHRyZWVzCmFkdmVydGlzZW1lbnQKMyAyIGsKZmFjZSBkZXRhaWxzCmRyaXBwaW5nCmZpbG0gdGV4dHVyZQp1bHRyYSBoaWdoIGRldGFpbHMKemVyb25pcwppbmR1c3RyaWFsIHNjaWZpCm1pZGpvdXJuZXkKaGFucyBob2xiZWluCnBhbmVsCndhbHRlciBwb3BwCmFydCBub3V2ZWF1IGJvdGFuaWNhbHMKdmVyeSB2ZXJ5IHZlcnkgYmVhdXRpZnVsIHNjZW5lcnkKODRtbQp5b3NoaW5hcmkgeW9oCjE0bW0KaW5mbGF0ZWJsZSBzaGFwZXMKaHlwZXIgZGV0YWlscwpkZWVwIGRlcHRoIGZpZWxkCm10ZwptYWRlIG9mIGZsb3dlcnMKZXh0cmVtZWx5IGh5cGVyLWRldGFpbGVkCmhxIHNjYW4KbWluaW1hbCBhcnRpZmFjdHMKc29mdCBjb29sIGNvbG9ycwppbnRyaWNhdGUgb3V0Zml0CmN5YmVycHVuayAyIDAgMiAwIG1hbnVhbApiYW5kYWkgYm94IGFydApwaG90byBpbiBzdHlsZSBvZiB0eWxlciBtaXRjaGVsbAo1IDUgbW0KYmVhdXRpZnVsIGFydAp3b3JsZCByZW5vd25lZCBhcnRpc3RzCm9ybmFtZW50CndhdGVyIGNvbG9yCmZsYXQgY29sb3VyCmJsYW5rIGJhY2tncm91bmQKdGVjaG5vbG9naWNhbApyYXZlCmJvZHkgc2hvdAp0aGluIGxpcHMKbG90cyBvZiBkZXRhaWwKM2Qgc2hhZGluZwp0aGUgZ3JhbmQgYnVkYXBlc3QgaG90ZWwKYW5pbWUgc3R5bGl6ZWQKYW5pbWF0aW9uIHN0eWxlCnVwIGNsb3NlIHNob3QKc21vb3RoIGRyYXcKYmx1cnJlZCBsb3N0IGVkZ2VzCnJlYWxpc3RpYyBtYXRlcmlhbHMKdHVybmVyCjMgcG9pbnQgcGVyc3BlY3RpdmUKc25ha2UKYmVhdXRpZnVsIGRldGFpbGVkIGZhY2UKZCAmIGQgY2hhcmFjdGVyCmNhc3NldHRlIGZ1dHVyaXNtCndlbmp1biBsaW4KOSAwIG1tCnNjaWZpIHBsYXRmb3JtCnBob3RvIDMgNSBtbSBsZWljYQpqaW4ga2FnZXRzdQo0IGsgb2N0YW5lIHJlbmRlcgppc28gMSAwIDAKbW9vbmxpdApjaW5lbWF0aWMgY29sb3JzCmJsdWUgdG9uZXMKZG91YmxlIGV4cG9zdXJlCnZlcnkgYmx1cnJ5CnJlbGF4ZWQgcG9zZQpoZWFkcGhvbmVzCjggayBvY3RhbmUgcmVuZGVyCmV4dHJlbWVseSBoaWdoIHF1YWxpdHkgYXJ0d29yawp1bHRyYXdpZGUgbGVucwphbGV4IGdyb3NzCndpZGUgYW5nbGUgZXN0YWJsaXNoaW5nIHNob3QKc21vb3RoIGN1cnZlcwppbm5lciBnbG93CmNhc3VhbAp3b29kY3V0CjEgOSAyIDAgcwp2YWxsZWpvCnN3YW1wCmNhbWVyYQpzdWJ0bGUgY29sb3JzCmVsZWN0cmljaXR5Cm1lbGFuY2hvbHkgYXRtb3NwaGVyZQpmbG9hdGluZyBpbiBzcGFjZQpoeXBlciByZWFsaXN0aWMgcmVuZGVyCnJvdHRpbmcKZGlnaXRhbCB0ZWNoIGVmZmVjdHMKYnVzc2llcmUKdGF0dG9vIGRlc2lnbgpoaWdoIGRldGFpbCA0IGsKMiAwIG1tCmJlYXV0aWZ1bCBuYXR1cmFsIHNvZnQgbGlnaHQKc2hhcnAgbWV0YWwgZWFycwpteXN0aWNhbCB2YWxreXJpZQp3aXRjaGVyCnJlZnJhY3Rpb25zCmRyYW1hdGljIGFtYmllbnQgbGlnaHRpbmcKbHVzaCB2ZWdldGF0aW9uCmN1dGUtZmluZS1mYWNlCm51cmkgaXllbQpyZWN0aWxpbmVhcgphbmltZSBzY3JlZW5zaG90CnN0dW5uaW5nIGNpbmVtYXRvZ3JhcGh5CnN1cGVyc2hhcnAKcHJvZmVzc2lvbmFsIHN0dWRpbyBsaWdodApwb21lZ3JhbmF0ZQpyZWQgbGlwc3RpY2sKbWFzdGVyd29yawpoYXVudGVkCmRpZmZ1c2VkIGxpZ2h0aW5nCmZvZ2d5IG1pc3QKY29ycHNlIGJyaWRlIHN0eWxlCmdvbGQgZmlsaWdyZWUKZmlnaHRpbmcKZ3JlYXQgbGlnaHRpbmcKYmFjayBsaWdodGluZwpkbmQgYXJ0CnBoeXNpY2FsIGJhc2VkIHJlbmRlcmluZwpyZXRybyBmdXR1cmUKZjEuOCBhbmFtb3JwaGljCmRlY2F5aW5nCmVtcHR5CmZyb250IGdhbWUgY2FyZApzdHJlYW0KcmFpbmJvd3NoaWZ0CmFkb2xmIHdvbGZsaQphdG1vc3BoZXJpYyBoYXplCnN0cm9uZyBzaWxob3VldHRlCnN0dW5uaW5nIHZvbHVtZXRyaWMgbGlnaHQKaGFycnkgcG90dGVyCmNlbGwgc2hhZGluZwpyZWxpZ2lvdXMKaGFyZCBzaGFkb3dzCnByZWNpc2UgdGV4dHVyZQpuYXRpb25hbCBnZW9ncmFwaGljIHBob3RvZ3JhcGh5CmNpdHkgaW4gdGhlIGJhY2tncm91bmQKY29zdHVtZSBkZXNpZ24Kc3RpcHBsZQpwZWFybGVzY2VudCBza2luCnRpbWUgbWFnYXppbmUgY292ZXIKcGFzc2lvbmF0ZQpnaWxiZXJ0IHdpbGxpYW1zCm5lbyBzdXJyZWFsaXNtCndhcm0gY29sb3VycwpzdXBlciAtIGRldGFpbGVkCnBpZXJjaW5ncwpicmlnaHQgbmVvbiBjb2xvcnMKZHJlYXJ5CnBiciB0ZXh0dXJlcwphbmdlbCB3aW5ncwpwZXJmZWN0IGxpZ2h0Cm1hdGhlbWF0aWNzCm5hc3JlZGRpbmUgZGluZXQKd2xvcCA6IDoKc3ByaW5nIGxpZ2h0CmVnbyBkZWF0aApjaW5lbWF0aWMgY29sb3IKYmx1ZSBzdWJtYXJpbmUgbm8uIDYKcHVycGxlIGV5ZXMKbWF5YmVsbGluZQphZHZlbnR1cmUKdGVjaG5pY2FsIGRyYXdpbmcKZ3RhIDUKbWFzY2hpbmVuIGtyaWVnZXIKY2hlcnJ5IGJsb3Nzb21zCmRzbHIgcGhvdG9ncmFwaHkKdG9yc28Kc3RhcndhcnMKZW5pZ21hdGljCmRpZ3RpYWwgcGFpbnRpbmcKdWdseQpibHVlIHNraW4KbGVhdGhlciBhcm1vcgpzZWN1cml0eSBjYW1lcmEgZm9vdGFnZQp3YXJtIHRvbmUgZ3JhZGllbnQgYmFja2dyb3VuZApnYW1lIHNjcmVlbnNob3QKdGhlIGNvbWluZyBhaSBzaW5ndWxhcml0eQpzdHJvbmcgcmltIGxpZ2h0CmRlc2t0b3AgYmFja2dyb3VuZAptb3RoZXJib2FyZAplbGVnYW50LiBoaWdobHkgZGV0YWlsZWQKaW5jcmVkaWJseSByZWFsaXN0aWMKZmFkZWQhCm1hdHRlIGJhY2tncm91bmQKbG9uZwpqb3kKd2hpdGUgdmVpbApyZXNpZGVudCBldmlsCmdyaW5uaW5nCmZpbGlncmVlIG9ybmFtZW50cwpncmVlbiBoYWlyCmJhdG1hbgpkZXRhaWxlZCBpbnRyaWNhdGUgb3JuYXRlIGFybW91cgphd2Vzb21lCmludHJpY2F0ZSBpbmsgaWxsdXN0cmF0aW9uCmdsb3dzCm5pZ2h0bWFyZSBmdWVsCmt1dnNoaW5vdiBpbHlhCmtpbGlhbiBlbmcgdmlicmFudCBjb2xvcnMKaGlnaCBjb2xsYXIKYWxlc3NhbmRybyBiYXJidWNjaQpmYWNlIGRldGFpbAprYXJsIHNwaXR6d2VnCmVudGlyZSBwZXJzb24gdmlzaWJsZSEKc3R5bGlzZWQKdmFtcGlyZQpodW1hbgphcGV4IGxlZ2VuZHMKbGlnaHQgcmVmbGVjdGlvbgpzaW11bGF0aW9uCm9pbCBwYWludGluZyBicnVzaAppbiBmdWxsIGdyb3d0aApzbGltCmRldGFpbGVkIGFuZCByZWFsaXN0aWMKaWxsdXN0cmF0aW9ucwpkcmFtYXRpYyBpbGx1bWluYXRpb24KZHJlYW13b3JrcwpnYW1lCnJlYWxpc3RpYyBhcnRzdHlsZQpzaG9ydCBzaG9ydHMKYXNzb2NpYXRlZCBwcmVzcwpkZXN0aW55CmhpcCBob3AKcG9ydHJhaXQgb2YgYSB3b21hbgpiZWF1dGlmdWwgcmVuZGVyCm96YWJ1CnZvaWRzdGFyCmJhdHRsZWZpZWxkCmRlc3BhaXIKbG93IGtleSBsaWdodGluZwpzbm93eQpsaW1pbmFsIHNwYWNlIHN0eWxlCm1hZGUgaW4gcGFpbnQgdG9vbCBzYWkyCmNoaWxkbGlrZQpkaXJ0CnNtb2tpbmcKcGFpbnQKZHJhbWF0aWMgdm9sdW1ldHJpYyBsaWdodGluZwplZCByZXBrYQp1bHRyYXZpb2xldCBjb2xvcnMKZmFsbG91dCA1CmZhYnVsb3VzCmYgLyAyLiA4Cm9uIGRpc3BsYXkKY2FwdHVyYQpsYWtlc2lkZSBtb3VudGFpbnMKc3RyZWV0d2Vhcgo0IGsgcG9zdCAtIHByb2Nlc3NpbmcKd2hpcmxpbmcgc21va2UKYmxhY2sgd2FsbHMKZGFwcGxlZCBsaWdodAozIC0gZCBoaWdobHkgZGV0YWlsZWQKY29oZXJlbnQgY29tcG9zaXRpb24KZGFyayBza3kKc3VidGxlIGRldGFpbHMKcHVmZnkgY2xvdWRzCmRpc25leSBzdHlsZQp1bHRyYSBwaG90b3JlYWxpc3RpYwpmYW50YXN5IHNldHRpbmcKaW4gZm9jdXMgZmFjZXMKYmxhY2sgcGFwZXIKbGV2aXRhdGlvbgpjcmlzcCBmYWNlCmltcHJlc3Npb25pc3QKZ3JleXNjYWxlCmZ1bGwtbGVuZ3RoIHZpZXcKbG9uZyBiZWFyZApkZXRhaWxlZCBib2R5Cm9jY2x1c2lvbiBzaGFkb3cKc21va2V5CmdpcmxzIGZyb250bGluZSBzdHlsZQpkYXogMyBkCmVzY2hlcgp6b29tIG91dAptYXggZmxlaXNjaGVyCmxpZ2h0IGJlYW1zCmNpbmVzdGlsbCA4MDB0IDUwbW0gZWFzdG1hbmNvbG9yCjMgNSBtbSBwaG90b2dyYXBoeQp3ZWFyaW5nIHN1bmdsYXNzZXMKYml6YXJyZQpmcm9udGFsIHZpZXcKdWx0cmF3aWRlCm9wcHJlc3NpdmUgbGlnaHRpbmcKbXl0aG9sb2dpY2FsCnNoaW4gamVvbmdobwpzdHJlZXRzCnBlcmZlY3QgZGlnaXRhbCBhcnQKYmVhdXRpZnVsIG9pbCBwYWludGluZwpwb3J0cmFpdCBmYWNlCnN5bW1ldHJ5IQpyb24gY29iYgptdWNoYS4gYXJ0IG5vdXZlYXUuIGdsb29taGF2ZW4KMyBkIGRlcHRoCmIKbG92ZWx5CnN0dWRpbyB0cmlnZ2VyCnN3ZWF0eSBza2luCnN5bWJvbGljCm1vdW50YWluCndlbGwgZGV0YWlsZWQKbGlmZQpzaGF0dGVyZWQgZ2xhc3MKaGFpcnkKdHVycXVvaXNlCmxpbGllcwpzY2llbmNlIGZhbnRhc3kKaGVybyBwb3NlCnBhbGV0dGUga25pZmUKb2xkIGZhc2hpb25lZApiaWcgbGVhdmVzIGFuZCBzdGVtcwpjb25jZXB0IGFydHdvcmsKY2VsIC0gc2hhZGluZwpncmlteQphZXRoZXJwdW5rCmhlYXZ5IGZvZwpmaW5lbHkgaWxsdXN0cmF0ZWQgZmFjZQphcm1vcmVkCnBvbnl0YWlsCnN3ZWF0CmJsYWNrIGRyZXNzCmNvbnRlc3Qgd2lubmVyCmNoaW5lc2Ugc3R5bGUKbWVkaXVtIHNob3QgcG9ydHJhaXQKamVhbnMKZG9nCm9ybmF0ZSBjbG90aGluZwp1bHRyYSBoaWdoIHF1YWxpdHkgbW9kZWwKZnJhbmsgZnJhbnp6ZXRhCmNvbXBsZW1lbnRhcnkgY29sb3IKcmljaCBtb29keSBjb2xvcnMKY3liZXJwdW5rIGJhY2tncm91bmQKZ3JlZWsgbXl0aG9sb2d5CmluIHN0eWxlIG9mIHBldGVyIG1vaHJiYWNoZXIKYmlyZHMgZXllIHZpZXcKc2VwaG9yYQpza2luCnNjaWVuY2UKbGF3cmVuY2UgYWxtYSB0YWRlbWEKcGFweXJ1cwpoaWdoIGV4cG9zdXJlCm1ha290byBrb2JheWFzaGkKc2FkIGV5ZXMKYXJ0IGNhbnZhcwpjb2xvcmZ1bCBzd2lybHkgbWFnaWMgcmlwcGxlcwo4IGsgZGV0YWlsIHBvc3QgLSBwcm9jZXNzaW5nCnBob3RvcmVhbGlzdGljIHJlbmRlcgpiZWF1dGlmdWwgZGV0YWlscwpmbG93ZXIKdHJlbmRpbmcgaW4gYXJ0c3RhdGlvbgplbWVyYWxkCmNvb2wgY29sb3JzCmhlYWQgYW5kIHNob3VsZGVycwpibGFjayAmIHdoaXRlCmhhbW1lcnNow7hpCmV4dHJlbWVseSBoaWdoIGRldGFpbHMKc29sYXIgZWNsaXBzZQpib3RhbmljYWwKc3F1YXJlCnZpYnJhdGluZyBjb2xvcnMKY2Vsc2hhZGluZwplbGVnZW50CnJlYWxpc3RpYyB3YXRlcgp0b29uIHNoYWRpbmcKbWFzc2l2ZSBzY2FsZQpsb25nIGJhbmdzCnNlYXB1bmsKbWljaGFlbCB3aGVsYW4gYW5kIGd1c3RhdmUgZG9yZQoyMDIyCmRyYXBlcwpnbGl0dGVyaW5nCnJlbGF4ZWQKZ29sZCBmbG93ZXJzCnNwaXJpdHVhbApzY29yY2hlZCBlYXJ0aApwb3dlciBhdXJhcwp2ZWdldGF0aW9uCmJyaWdodCBzdW4gYmxlYWNoZWQgZ3JvdW5kCmxhYm9yYXRvcnkKdGlsdCBzaGlmdCBiYWNrZ3JvdW5kCnNlYXdlZWQKYnJpdHQgbWFybGluZyBzdHlsZQpiYXJjbGF5IHNoYXcgOCBrIHBob3RvcmVhbGlzdGljCmNyb3duIG9mIHdoaXRlIGRpYW1vbmRzCm1hY3JvIGltYWdlCmV4dHJlbWVseSBmaW5lIGRldGFpbHMKaGFqaW1lIHNvcmF5YW1hIGFhcm9uIGhvcmtleQpyZWFsaXNtIHRhdHRvbwphY3J5bGljIHBhaW50CmluIHN0eWxlIG9mIHR5bGVyIG1pdGNoZWxsCmh5cGVyIHJlYWxpc3RpYyBwaG90bwpvbGQgbWFzdGVycyBsaWdodCBjb21wb3NpdGlvbgpjYW5kaWQKYmxhY2sgYW5kIHdoaXRlIHBob3RvZ3JhcGgKaHlwZXIgcGhvdG9yZWFsaXN0aWMKaHl1bmcgdGFlCmNyZXB1c2N1bGFyIHJheQpjaW5lbWF0aWMgcGVyc3BlY3RpdmUKc3NzCndlYXJpbmcgMTg1MHMgZXJhIGNsb3RoZXMKMTUwIG1tCmVhcnRoCmhpZ2ggY29udHJhc3RzCmludHJpbmNhdGUKZmZmZm91bmQKbW9kdWxhciBzeW50aGVzaXplciBoZWxtZXQKb2N0YW5lIHJlbmRlciA4IGsgaGQKYnV0dGVyZmx5CjRrIHBob3RvcmVhbGlzdGljCnNvZnQgc2hhZG93cwpwdXJwbGUgc2tpbgpuYXR1cmVsCjEgOSA4IDAgcyBtb3ZpZSBzdGlsbAp2aW9sZW50CjhrIGltYWdlCmFsYnJlY2h0IGR1cmVyCjRrIHJlbmRlcgpmZWRlcmljbyBwZWxhdApjbGFzc2ljIHBhaW50aW5nCmRvbGwKdGF0dGVyZWQgY2xvdGggcm9iZXMKaGlnaCBxdWFsaXR5IHBob3RvZ3JhcGgKM2QgcmVhbGlzdGljCnZlcnkgbXV0ZWQgY29sb3JzCmhpZ2ggcXVhbGl0eSBhbmltZSBhcnRzdHlsZQptb29keSB2aWJlCmF0IGdlbnRsZSBkYXduIGJsdWUgbGlnaHQKY2luZW1hIDRkIGNvbG9yZnVsIHJlbmRlcgo4IGsg4oCdCmxlZ3MKbXVzY3VsYXIgdXBwZXIgYm9keQpmZWF0dXJlZAphdXJvcmEgYm9yZWFsaXMKZ2xhbW91cgpsb3cgcXVhbGl0eQpzb3BoaXN0aWNhdGVkIGNvbXBvc2l0aW9uCnVuZGVyd2F0ZXIgcGhvdG9ncmFwaHkKY2VudGVyIGZyYW1lCjggMCBzCmImdwpmYWlyeXRhbGUKZnJvbnRhbApyZWQgc2t5CmV4dHJlbWVseSBjbGVhbgpzdWJ0bGUKaHlwZXJyZWFsaXN0aWMgcmVuZGVyaW5nCmVkaXRvcmlhbAprb2RhayBwb3J0cmEgMTYwCnNvZnQgdmlnbmV0dGUKdHdpbiBwZWFrcyBwb3N0ZXIgYXJ0CnZpYmUKY2Fub2UKY29sbGFyIGFyb3VuZCBuZWNrCmNpbmVtYXRpYyBzdHlsZQoyOG1tIGxlbnMKZGFyayBiZWF1dHkKbW92ZW1lbnQKZnJlc2ggY29sb3JzCm9ybmFtZW50cwphcnQgc3RhdGlvbiB0cmVuZHMKc2Nob29sIHVuaWZvcm0Kdm9sdXB0dW91cwpoZGQKY2R4CnJlYWxpc3RpYyBpbGx1c3RyYXRpb24KaGFybW9ueQpjcmVhdHVyZSBkZXNpZ24KaXJpZGVzY2VudCBjb2xvcnMKaW50cmljYXRlIHBhaW50aW5nCmR1c3QgcGFydGljbGVzCmR1byB0b25lCmpvaG5hdGFuIHdheXNoYWsKc2F0dXJubyBidXR0bwppbiBzdHlsZSBvZiB6YWhhIGhhZGlkCmhvbHkgaGFsbwpqb2UgYWx2ZXMKd2lsbGlhbSAtIGFkb2xwaGUgYm91Z3VlcmVhdQp2b2x1bWV0cmljIGNpbmVtYXRpYyBsaWdodGluZwpjYXN1YWwgY2xvdGhlcwpwaW5ob2xlIGFuYWxvZ3VlIHBob3RvIHF1YWxpdHkKc29mdCBmYWNpYWwgZmVhdHVyZXMKMiA3IHllYXJzIG9sZAphdWRyZXkgcGxhemEKbGFyZ2Ugd2luZG93cwpzb2Z0IHBhc3RlbCBjb2xvcnMKc3R1ZGlvIGdoaWJsaSBjb2xvciBzY2hlbWUKbmV3IHlvcmsKcm95YWxseSBkZWNvcmF0ZWQKc2lsawpzbHIKdHJldm9yIGhlbmRlcnNvbgpnZW50bGUKb2N0YW5lIDMgZCByZW5kZXIKdW5yZWFsIGVuZ2luZSByZWFsaXN0aWMgcmVuZGVyCmV4YWdnZXJhdGVkIHByb3BvcnRpb25zCjcgMCBtbQpmYWNpbmcgdGhlIGNhbWVyYQphZ2lsZQphbWJyb3R5cGUKZnJlbmNoIG5vdmVhdQpsYXJnZSBzY2FsZQpsb25nIGZsb3dpbmcgaGFpcgpncmlzYWlsbGUKd2FybSBzYXR1cmF0ZWQgY29sb3VycwpwZXJmZWN0IGFuaW1lIGZhY2UKcGVyZmVjdCBzaGFkb3cKYW5pbWUgY2VscwplYmF5IGxpc3RpbmcKaGlnaCBtb2Rlcm5pemF0aW9uCmJva2VoIHNvZnQKdGVjaCBub2lyCnRyZW5kaW5nIG9uIGFydHN0YXRpb25ocQpjb3R0YWdlIGNvcmUKYWR2YW5jZWQgZGlnaXRhbCBhbmltZSBhcnQKbGFjZQpob2xkaW5nIGEgc3dvcmQKZHV0Y2ggYW5nbGUKYnJpZGdlCmhpZ2ggdGV4dHVyZXMKaWNvbgpzZWFtbGVzcyBwYXR0ZXJuCmFydGdlcm0ganVsaWUgYmVsbCBiZWVwbGUKdWx0cmEgd2lkZQppbiBwbGFzdGljCm1hcmsgcmlkZGljawp2YXNuZXRzb3YKY2xvc2V1cCBhdCB0aGUgZmFjZXMKZ29kIG9mIHdhciAyIDAgMSA4CncKc3RydWN0dXJlCmphcGFuZXNlIHN0cmVldCBmYXNoaW9uCmYgLyA4CmhpZ2hseSBjb25jZXB0dWFsIGZpZ3VyYXRpdmUgYXJ0CmNnc3NvY2lldHkKY3ljbGVzIHJlbmRlcgp3b25kZXJmdWwKMTk5MHMKMiA0IG1tCnNoYXJwIHNoYXBlcwpoaWdoIHF1YWxpdHkgcGhvdG9ncmFwaHkKbWVnYWxvcGhvYmlhCmxpZ2h0IGF0bW9zcGhlcmUKc2hhdW4gdGFuCmN1cmx5IGhhaXIKdm9sdW1ldHJpYyBkeW5hbWljIGxpZ2h0aW5nCmhpZ2hseSBkZXRhaWxlZCBwYWludGluZwpkeWxhbiBjb2xlCmhpZ2ggcmVzb2x1dGlvbiBwaG90bwpwYWxhZGluCnN1bmxpdApkaWdpdGFsIGFuaW1lIGFydApoYXJzaCBvdmVyaGVhZCBzdW5saWdodAppdGFsaWFuIG1hc3RlcnBpZWNlCmc2CmFpIGJpb2RpdmVyc2l0eQpwZXJmZWN0IGxpZ2h0aW5nIHBpeGVsIHNvcnRpbmcKaW5zaWRlIGJlcmdoYWluCnRoZSBwbGF0b25pYyBpZGVhbCBvZiBmbG93ZXJzCjggayB1bHRyYSByZWFsaXN0aWMKdGFlanVuZSBraW0KdmRyYWdhbiBiaWJpbgpsZWQKYmFja2xpdCBsaWdodGluZwpwcmlzbQpwaG90b3JlYWxpc3QKdmVyeSBoaWdoIHF1YWxpdHkKbWFzawptb29uIGxpZ2h0CnN0ZW1zCnRhcmtvdnNreQpmaW5lIGxhY2UKcmFwaWRzCnJvdWdoIHBhcGVyCmZsb3dpbmcgZnVyCmsKaWxsdXNpb25pc3RpYyBkZXRhaWwKYXRtb3NwaGVyaWMgZW52aXJvbm1lbnQKY2hhcm1pbmcKY29sZCBsaWdodGluZwpwaXBlcwp1bmNhbm55CnJvYWQKZXBpYyBzaG90CmxhbnRlcm4KY2xvdWQKZGV0YWlsZWQgYW5kIGNvbXBsZXggZW52aXJvbm1lbnQKdGl0YW5pdW0gd2hpdGUKY296eSB3YXJtIHRpbnQKY29sb3IgcGhvdG8KbW90aW9uCnByb21vdGlvbmFsIGFydAptZWNoCmZhdAptaWxvIG1hbmFyYQpmaWxtIG5vaXJzCnNxdWFzaGVkIGJlcnJpZXMKbmljayBhbG0KY3liZXJwdW5rIGZ1dHVyaXN0aWMgbmVvbgp3ZXQgLSBvbiAtIHdldCB0ZWNobmlxdWUKMjAyMSBhd2FyZCB3aW5uaW5nIHBhaW50aW5nCmJsYWNrIGFuZCB3aGl0ZSBwaG90b2dyYXBoeQpteXRob2xvZ3kKb25lIHBvaW50IHBlcnNwZWN0aXZlCmNhcnBldApzcG9ydHMgcGhvdG9ncmFwaHkKaW5jcmVkaWJsZSBxdWFsaXR5CnZhcmlvdXMgcG9zZXMKcmVuZGVybWFuCm5vcm1hbiByb2Nrd2VsCmJydXRhbCBzaGFwZXMKbW9vZHkgYXRtb3NwaGVyZQpkYXkKbWFzdGVycGllY2UhIQpjb2hlc2l2ZQpleHRyZW1lbHkgZGV0YWlsZWQgd29tYW4KZmFudGFzeSBmb3Jlc3QgbGFuZHNjYXBlCnRlY2hubyBhcnR3b3JrCnVraXlvIC0gZQpzd29yZCBhbmQgc29yY2VyeQpoYXNzZWxibGFkIG5pa29uCmltb2dlbiBwb290cwpnZW1zCmZyYW5rIGxsb3lkIHdyaWdodApyYXRpb25hbCBwYWludGluZwppZCBtYWdhemluZQplYXJsIG5vcmUKbWN1CnBvbmQKaWxsdXN0cmF0aW9uIHN0eWxlCmNsb3NlLXVwIHNob3QKYW5hZ2x5cGggZWZmZWN0CmR5bmFtaWMgYW5nbGUKc3RlYW1wdW5rIHN0eWxlCmNsZWFyIHNoYXBlcwpiYXJlZm9vdAphdHRhY2sgb24gdGl0YW4KcmV0cm8gZnV0dXJpc3RpYwpoYW5kIGRyYXduCmNjdHYKaGlnaGx5IHJlbmRlcmVkCnRoaWNrIGxpbmVzCnJlYWxpc3RpYyBtaWxpdGFyeSBjYXJyaWVyCnNwbGFzaCBwYWludGluZwpmdWxseSBmcm9udGFsIHZpZXcKY2xvc2V1cCBmYW50YXN5IHdpdGggd2F0ZXIgbWFnaWMKYW5hdG9taWNhbGx5IGNvcnJlY3QgdnVscGluZQpsb3dicm93IGFydApnbG93aW5nIHNraW4Kdml2aWQgY29sb3Igc2NoZW1lCjJkIGdhbWUgYXJ0CmVsZHJpdGNoIGhvcnJvcgpleHRyZW1lIGNsb3NlIHVwCnZpZGVvIGdhbWUgYXJ0CnBzeWNob2xvZ2ljYWwKd2hvbGUgYm9keQpzb255IGE3ciBpdgpqYXBhbmVzZSBwb3R0ZXJ5CnJlYWxpc3RpYyBvaWwgcGFpbnRpbmcKdmVyeSB2ZXJ5IHZlcnkgdmVyeSBkZXRhaWxlZAp0aGlyZCBwZXJzb24KdG9wIGRvd24gdmlldwpmZW1pbmluZSBldGhlcmVhbApkb29tZWQKZmxvd2VyIGNyb3duCmNvd2JveSBoYXQKc2lsdmVyIHdpdGggZ29sZCB0cmltCmRydW5rCndlc3Rlcm4gY29taWMgc3R5bGUKZ3JlZyBoaWxkZWJyYW5kdCBhbmQgbWFyayBicm9va3MKY2xlYXIgZGV0YWlscwpibHVlIGhlYWQKZmx1ZmZ5IGZhY2UKb25seSB3aXRoIHJlZApncmF5CnkgMiBrIGFlc3RoZXRpYwpicmlnaHQgbGlnaHRpbmcKcHVscCBhcnQKZnVsbHkgZGV0YWlsZWQKc3Ryb25nIGNvbnRyYXN0CmhpZ2ggbGV2ZWwgdGV4dHVyZSByZW5kZXIKcmVkIGxpZ2h0aW5nCmFwZXJ0dXJlIGYyLjgKc2NlbmljCjhrIHBob3RvZ3JhcGh5CmRhcnRoIHZhZGVyCmdsaXN0ZW5pbmcKZHJhbWF0aWMgcGFpbnRpbmcKZnVsbHNob3QKaGlnaGx5IGRldGFpbGVkIGF0dHJpYnV0ZXMKOGsgaGlnaGx5IGRldGFpbGVkCmJ5IHRvbSBiYWdzaGF3CnBpeGVsYXRlZApkYXJrIGNpbmVtYXRpYwphd2FyZCB3aW5uaW5nIGlsbHVzdHJhdGlvbgpnb2RsaWtlCmJhdGhlZCBpbiBsaWdodAonYWN0aW9uIGxpbmVzICchISEKc21pbGluZyBzb2Z0bHkKZGV0YWlsZWQgcGljdHVyZQp1bm5lcnZpbmcKaGFuZHNvbWUgZmFjZQp2b2x1bWV0cmljIHNoYWRvd3MgYW5kIGxpZ2h0aW5nCnRlcnJpZmllZAphcnRzdGFpb24KZ2FtZSBjb25jZXB0IGFydApjbG90aApteXN0aWNhbCBuaWdodApzYXJnZW50CmNlbnRlcmVkIGNvbXBvc2l0aW9uCmdyZWVibGUKai5kaWNrZW5zb24KbHVpcyByaWNhcmRvIGZhbGVybwpwaG90byBqb3VybmFsaXNtCm1pY2hhZWwgamFja3NvbgpubyBtYWtldXAKY29sb3IgaW1hZ2UKaGliYmFyeQpoeXBlcnNwYWNlCjI0bW0gZi8xLjQKcmVmcmFjdGVkIGxpZ2h0aW5nCmdyaW0gLSBsaWdodGluZwpza2V1b21vcnBoaWMKbWFtaXlhCmluIGEgc2NlbmljIGJhY2tncm91bmQKcnV0a293c2tpIHwKb2N0YW5lIHJlbmRlciA0IGsKcml0dWFsCmJhY2tncm91bmQKc3RvbmUKZ2xvb215IGFuZCBmb2dneSBhdG1vc3BoZXJlCmNvbnRyb3ZlcnNpYWwgcG9zdGVyIGFydApnaGlibGkgc3R1ZGlvCmdoaWJsaSBzdHlsZQpsZWF0aGVyIGphY2tldApwaW51cApubyBiZWFyZApzaG9ydCBiZWFyZApzaG90IG9uIDcgMCBtbQpjb2xkIGNvbG9ycwpvc2NhciB3aW5uZXIKaGlnaGx5IGRldGFpbGVkIGZhY2VzCmRyYW1hdGljIHNreQpmbGF0IGRlc2lnbgplbGYKbWFzc2l2ZQp1bmRlcmN1dCBoYWlyc3R5bGUKcGVyZmVjdCBoYW5kcwpzeW1tZXRyaWNhbCBmYWNlIGFuZCBib2R5CmtvbW9yZWJpCmhpZ2hseSBkZXRhaWxlZCBhdG1vc3BoZXJlCmx1eHVyeSBhZHZlcnRpc2VtZW50CmF5YWh1YXNjYQpnbGl0Y2ggZWZmZWN0cwpvcm5hdGUgaGVhZGRyZXNzCnNoYXJwIGZvY3VzIQpvcnRob2RveCBzYWludApoaWdoIGRlZmluaXRvbgpmLiAxIDQKeWVsbG93IGh1ZQoxIDIgMCAwIGRwaSBzY2FuCmV2YW5nZWxpb24KaW4gY29sb3IKaW1heCA3IDAgbW0gZm9vdGFnZQozIGQgc2N1bHB0dXJlCmNnc29jaWV0eSA0awpzaGFtYW4Kdmlzb3IKc2hhcnBseSBmb2N1c2VkCnN5bW1ldHJpY2FsIHBvcnRyYWl0CmNyaXNweSBxdWFsaXR5CmluIHRoZSByYWluCmRyYW1hdGljIHN0dWRpbyBsaWdodGluZwpkaXN0YW50IG1vdW50YWlucwo0IGsgZGlnaXRhbCBjYW1lcmEKbXVjaGEgc3R5bGUKY29sb3IgZ3JhZGVkCmN1cmx5Cmh5cGVycmVhbGlzbSA4awpjcnllbmdpbmUgOGsgdWhkCnl1amkgaGltdWthaQpib29rcwpibGFjayBpbmsgb24gd2hpdGUgcGFwZXIKZ2lnYW50aWMKaGF0CnN0dWRpbyBsaWdodHMKbG9uZWxpbmVzcwpvY2N1bHQgYXJ0CnVsdHJhc2hhcnAgZm9jdXMKc29mdWJpCmJpZyB0cmVlcwpiZXNpZGUgdGhlIHJpdmVyCmd0YSA6IGR1YmFpCmlzbyAxMDAKZGVuc2UgZm9nCmludHJpY2F0ZSBhcnQgbm91dmVhdQp1bHRyYS1kZXRhaWwKNzBtbQpjb21wdXRlcnMKZmFudGFzeSBtYXR0ZSBwYWludGluZwpwaXhlbApoeXBlcnJlYWxpc3RpYyBwYWludGluZwpoaWdoIGNvbnRyYXN0IGNvbG9ycwpkaXNndXN0aW5nCnBpeGVsIHNvcnRpbmcKZXZpbCBzbWlsZQpwYXRyaW90aWMKbmF0aW9uYWwgZ2VvZ3JhcGhpYyBwaG90b3Nob290CnNjdWxwdGVkIGluIHpicnVzaApzb2Z0IHNtaWxlCmdyZWcgcnV0a25vd3NraQplbmNoYW50ZWQgYW5kIG1hZ2ljIGZvcmVzdAo4IGsgZnJvc3RiaXRlIDMgZW5naW5lCmVsYWJvcmF0ZSBjb3N0dW1lCm5lbyB2YXBvcndhdmUKdgo4IDQgbW0KaHVnZSBzY2FsZQptaWxpdGFyeQptZXRhbCBnZWFyIHNvbGlkCmJydXNoc3Ryb2tlcwptZWRpZXZhbCBmYW50YXN5CnR3aXR0ZXIKY3JlZXB5IGF0bW9zcGhlcmUKd2lyZXMgZXZlcnl3aGVyZQpwYWludGVkIHBvcnRyYWl0CmZhbnRhc3kgYXJtb3IKc2VyaW91cyBleHByZXNzaW9uCmltcGFzdG8KbmVvY2xhc3NpYwp2b2x1bWV0cmljIGxpZ2h0IGNsb3VkcwppbnRlbnNlIGVtb3Rpb24KaW50cmljYXRlIGFydHdvcmsgbWFzdGVycGllY2UKaG9yaXpvbnRhbCBzeW1tZXRyeQpkYXJrIG5hdGFzaGEKaW5jcmVkaWJsZSB3aWRlIHNjcmVlbnNob3QKbG9uZyB3YXZ5IGJsb25kIGhhaXIKc21hbGwgbm9zZSB3aXRoIGZyZWNrbGVzCmplbiB6ZWUKNGvigJ0Kc29mdCBib2tlaApzaW1wbGlzdGljCnN0dW5uaW5nIHNraWVzCmZvb2QKaGFuZHMKbWFnYXppbmUgY292ZXIKb2lsIHBhaW50aW5nIG9uIGNhbnZhcwpoaXN0b3JpYyBhcnR3b3JrcyBzb2NpZXR5Cndob2xlc29tZQpkdW5nZW9ucyBhbmQgZHJhZ29ucyBwb3J0cmFpdApvdXRlciBzcGFjZQplbG9uIG11c2sKcHJvbW90aW9uYWwgcGhvdG8KcmlwcGVkIGZsZXNoCmh5cGVycmVhbGlzdGljIG9pbCBwYWludGluZwpzb2xlbW4KcmVuZGVyIGluIHVucmVhbCBlbmdpbmUgNQphcnQgZ2VybQppcm9uIHNtZWx0aW5nIHBpdHMKM2QgcHJpbWl0aXZlcwp1bHRyYSAtIGhkCnZpZ25ldHRpbmcKc29mdCBoYWlyCmJsdWUgdGludCBleHBpcmVkIGZpbG0KaGlnaGx5IGRldGFpbGVkIGNsb3NldXAKYWN0aW9uIHBob3RvZ3JhcGh5Cmhvcml6b24gemVybyBkYXduCmhkIHBob3RvZ3JhcGh5CmludGVsbGlnZW50CmxvZ28gZGVzaWduCmZsY2wKbGlnaHQgbGVhawpkaW0gbGlnaHQKYmVhdXRpZnVsIHBob3RvCmRldGFpbGVkIHBlcmZlY3QgZmFjZQpzdGF0dWUKY2FybCBndXN0YXYgY2FydXMKc3RlYW0gcHVuawphc3RvdW5kaW5nIHN0b3JpZXMKYXJjYWRlCnRlY2hubwpibGFjayBob2xlCjNkIHdpdGggZGVwdGggb2YgZmllbGQKbW9kZWxzb2NpZXR5CnlhbiBnaXN1a2EKbW9kZXJuIHdhcmZhcmUKYXdhcmQgd2lubmluZyBwaWN0dXJlCmRpZ2l0YWwgcGhvdG8KZXh0cmEgZGV0YWlscwpubyBub2lzZQpyaWNoIGNpbmVtYXRpYyBhdG1vc3BoZXJlCmdsYW1vdXIgc2hvdAozZCBmaW5hbHJlbmRlcgpib2IgbGFya2luIGFuZCB0b21lciBoYW51a2EKbG92aW5nCmFuZHJvZ3lub3VzCmZpbG0gbGlnaHRpbmcKaGRyIGNvbG9yCm1hc3RlcnBpZWNlISEhCnZpY3RvIG5nYWkhIG11dGVkIGNvbG9ycwpub3J0aGVybiByZW5haXNzYW5jZSBhcnQKdGhyZWUgcXVhcnRlciB2aWV3Cm91dGRvb3IgZmluZSBhcnQgcGhvdG9ncmFwaHkKc2NlbmUKaW50cmljYXRlIGhpZ2ggZGV0YWlscwp6b21iaWUKc3R1bm5pbmcgaW5raW5nIGxpbmVzCmZpbmUgbGluZXMKY2FydG9vbmlzaAplYXJyaW5ncwppbnRpbWF0ZQpyb21hbmlhbiBoZXJpdGFnZQpkYW5pZWwgZ2VyaGFydHoKbm9ibGUKc3Vic3RhbmNlIDNkIHBhaW50ZXIKYmFyb3F1ZSBzdHlsZQpnbG93aW5nIHJlZCBleWVzCmNvenkgd2FsbHBhcGVyCmRlZXAKb3B1bGVudAp0ZW1wbGUKZGVlcCBzcGFjZQo0ayBoZHIKYW5nZXIKb3V0c2lkZQpoIHIgZ2lnZXIKd2hpdGUgaG9ybnMKZmFudGFzeSBkYXJrIGFydApnb3VhY2hlIG9uIGNhbnZhcwpjZW50ZXJkCmJlYXV0aWZ1bCBkYXJrIGxhbmRzY2FwZQppcmlkaXNjZW5zZQpjeWJlcnB1bmsgY29uY2VwdCBhcnQKMSA4IDYgOQpjb3R0YWdlY29yZSEhCmZpYm9uYWNjaSByaHl0aG0KYmpvcmsgYWVzdGhldGljCm1vdmllIGNvbmNlcHQgYXJ0CnNlbWkgLSByZWFsaXNtCnNhdG9zaGkga29uIGFuaW1lCm1lYXQKbXlzdGVyaW91cyBhdG1vc3BoZXJlCnJ1YmJlciBzdWl0CmNpbmVtYXRpYyBwb3J0cmFpdAozZCByZW5kZXJpbmcKYnJhbmNoZXMKYWR2ZXJ0aXNpbmcgcGhvdG9ncmFwaHkKZXhvc2tlbGV0b24KcGFydGljbGUgZWZmZWN0cwp2aW50YWdlIGZhbnRhc3kgYXJ0Cmdlb21ldHJpYyBjdXJ2ZXMKd3JpbmtsZXMKY2FwdGl2YXRpbmcKMyBkIHJlbmRlcmluZwpkcmlwcwptb3VudGFpbnMgaW4gdGhlIGJhY2tncm91bmQKc2hpbnkgY3Jpc3AgZmluaXNoCmFuZ2VscwpkZXB0aCBmaWVsZAphd2UtaW5zcGlyaW5nCmJlYXV0aWZ1bCBkaWdpdGFsIHBhaW50aW5nCmNhbmRsZSBsaWdodAplc290ZXJpYwpzZXNhbWUgc3RyZWV0CmFzaGZvcmQgYmxhY2sgbWFyYmxlCmNvbG9yZnVsIHdhdGVyY29sb3IKZGV0YWlsZWQgZmFjaWFsIGV4cHJlc3Npb24KdmVyeSBzdHlsaXNoCmZlbWFsZSBwb3J0cmFpdAp0YW5rb2JvbgptYW5nYSBpbGx1c3RyYXRpb24Kc2VtaXJlYWxpc20KcmVmbGVjdGl2ZSBkZXRhaWxlZCB0ZXh0dXJlcwpmcm9tIGNoaW5hCmJyZWF0aCBvZiB0aGUgd2lsZCBhcnQgc3R5bGUKZ3JhZGllbnQgeWVsbG93CjIgawpyZWNsaW5pbmcKY3Jpc3AgYW5kIHNoYXJwCmFydCBzdXBwbGllcwoxIC8gMSAyIDUKbGlmZWxpa2UgdGV4dHVyZQp0ZWtrb24ga2lucmVldAplcGljIHN0dW5uaW5nCmF3YXJkLXdpbm5pbmcgcGhvdG9ncmFwaHkKdm9sdW1lIGxpZ2h0CmxvdmVjcmFmdGlhbiBob3Jyb3IKYWxleCBncmF5CnJ0eCByZWZsZWN0aW9ucwpidXN0CmhvdCBwZXRpdGUKc2FtdXJhaQppbmRvb3JzCmluc2FuZWxleSBkZXRhaWxlZApjb2xvdXIKY29taWMgYm9vayBjb3Zlcgpvcm5hdGUgZnJpbGx5IGRyZXNzCm9uIGZpcmUKZ3VzdGF2IGtsaW10IDRrCmJlbmphbWluIGxhY29tYmUKbG93IGFuZ2xlIGZpc2ggZXllIGxlbnMKaGVybwptaWRkbGUgc2hvdApkaWVzZWxwdW5rIGF0bW9zcGhlcmUKdGVubmlzIGJhbGwKd2F0ZXJob3VzZQoxIDUgMCBtcAp0cmV2b3IgYnJvd24gc3R5bGUKZGVzawpteXN0aWNpc20Kbm8gZmlsdGVyCmNvcmFsCnN1cGVyaGVybwpjaW5lbWE0ZApnbG93aW5nIGF1cmEKYnJhaWRlZCBoYWlyCjIgMCAyIDIKbHVtbmlvdXMKYWxwaG9uc2UgbXVjaGEgYmFja2dyb3VuZApyYWlueSBuaWdodAptaWNoZWxpbiBzdGFyCmJyaWdodCBjbG91ZHMKYWdlZCBwYXBlcgp5ZWxsb3cgbWlzdApvY3RhbmUgcmVuZGVyIGluIG1heWEKZXhwcmVzc2luZyBqb3kKYXJyb2dhbnQKc3VuIGluIHRoZSBiYWNrZ3JvdW5kCmdyZWVrIGdvZApwc3l0cmFuY2UgYXJ0d29yawpkYXJrIGV5ZWxpbmVyCmhpZ2ggZGVwdGgKa2VudGFybyBtaXVyYSBtYW5nYSBhcnQgc3R5bGUKbWlrZSBtaWdub2duYQpiZWFrCjhr4oCdCnBob3Rvc2hvcHBlZAppYW1hZwpwb3J0cmFpdCEhCmJhdHRsZSBhbmdlbCBhbGl0YQpwaHlzaWNhbGx5IGFjY3VyYXRlCmJsZWFrCnVuZGVyZXhwb3NlZApncmVpZyBmcmFzZXIKbmllciBhdXRvbWF0YQpnYW1pbmcKc21hbGwgbm9zZQpvcmNoaWQKbWF5YSByZW5kZXIKZnJ1aXRzCmludGVuc2Ugc3RhcmUKcmVhbCB3b3JsZAo0MG5tIGxlbnMKZmFudGFzeSBjaGFyYWN0ZXIgY29uY2VwdApmYW50YXN5Y29yZQpzdHJhbmdlciB0aGluZ3MKZ2hvc3RzCmh1bWFub2lkIHJvYm90CnN0eWxlIG9mIHN0dWRpbyBnaGlibGkKZGVjbyBmYXNoaW9uCnN0eWxlIGFydGdlcm0KcG9saXNoIHBvc3RlciBhcnQKZWxlY3RyaWMgYnJlZXplCmNpbmVtYXRvZ3JhcGhpYyBzaG90Cmx1bWluZXNjZW5jZQpkYWd1ZXJyZW90eXBlCnNsaW1lCmhpc3RvcmljYWwgcmVjb3JkCmFsaWVucwpndGEgdgp0ZXh0dXJlcwpwaWVyY2luZyBnYXplCmZhbnRhc3kgNGsKZmFudGFzeSBjaGFyYWN0ZXIKb3BlbiBtb3V0aApoaXBlcnJlYWxpc3RpYwpzbW9vdGggbGluZXMKbHVtaW5pc20KZGFyayB0b25lcwphY2N1cmF0ZSBmYWNlCnRpbWVzdGFtcApiZWF1dGlmdWwgd2l0aCBlZXJpZSB2aWJlcwpmdWxsIGJvZHkgY2hhcmFjdGVyIGNvbmNlcHQgYXJ0Cmxhc2NpdmlvdXMgcG9zZQpsdXNoIGxhbmRzY2FwZQpiZWF1dGlmdWwgZmFjZSEhISEKdGFwZSBkZWNrCmRlc3RpbnkgZmFuYXJ0CnN1YnN0YW5jZQpwb3J0cmFpdCBvZiBhIGRpZ2l0YWwgc2hhbWFuCmFwb2NhbHlwc2UgbGFuZHNjYXBlCndvcm1zIGV5ZSB2aWV3CnZlcnRpY2FsCm11c2ljCmd1aXRhcgpvY3RhbmUgZW5naW5lCmJpcmQncyBleWUgdmlldwpnYW1lIGFzc2V0CjggayBkb3AgZG9mIGhkcgplcGljIHBhaW50aW5nCnNoZWxsCnNtaXJrCjNkIGFydApwcm92b2NhdGl2ZQpoYWlyCjgwbW0KamV3ZWxsZXJ5CmFuZ2VsaWMgcGhvdG9ncmFwaApzb3JjZXJlcgpvbWlub3VzIHNreQphd2FyZCB3aW5uaW5nIGRpZ2l0YWwgYXJ0Cnlva28gdGFybwpkJmQgY29uY2VwdCBhcnQKcHVycGxlIGhhaXIKZGF5IHRpbWUKZmlndXJlIHBob3RvZ3JhcGh5CnZlcnkgaGlnaCBkZXRhaWwKb3V0IG9mIGZvY3VzCmdsaXR0ZXIgYWNjZW50cyBvbiBmaWd1cmUKbG9va2luZyBkb3duCmpvaG4gcGFyawpmbG91cmVzY2VudCBjb2xvcnMKbG93IGFuZ2xlIHVoZCA4IGsKbWlycm9yIGRyaXBwaW5nIGRyb3BsZXQhCmJpcmQKZHluYW1pYyBiYWNrZ3JvdW5kCjQgayBwaG90b3JlYWxpc20KdmVyeSBkZXRhaWxlZCBvaWwgcGFpbnRpbmcKcG9zdGFwb2NhbHlwdGljCmJvdHRpY2VsbGkKY2F0IGVhcnMKYmFzaWwgd29sdmVydG9uCmxvdyBrZXkKdHJhZGl0aW9uYWwgY29yc2ljYW4KaG90CmFydHN0YXRpb24gaGQKbWFkIG1heApsYW5kc2NhcGUgcGhvdG9ncmFwaHkKZ3JleSBoYWlyCmR5bmFtaWMgc2hhZG93cwpzaG90IHdpdGggc2lnbWEgZiAvIDQuIDIKYXJ0IG5vdXZlYXUgYWVzdGhldGljCnNraW4gdGV4dHVyZQpjcmVlcHkgbGlnaHRpbmcKNTAgbW0KcnVsZSBvZiB0aGlyZApkZXRhaWxlZCBjb25jZXB0IGFydApmdWxsIGZpZ3VyZQpzaGFycCBleWVzCnNoaW5qdWt1CmhlYWQgYW5kIHNob3VsZGVycyBtYXN0ZXJwaWVjZQp3ZWFyaW5nIGhlYWRwaG9uZXMKYXVyYSBvZiBsaWdodAp1cHBlciBoYWxmIHBvcnRyYWl0CmdvZGRlc3MgYXJ0CnRvbSB3aGFsZW4gOCBrCmluZHVzdHJpYWwgZmFjdG9yeQpmdWxsIGhlYWQgYW5kIHNob3VsZGVycwpsbGFtYSB3aXRoIGRyZWFkbG9ja3MKbmF0YWxpZSBzaGF1CmJ1cm5pbmcgaGFsbwpbIDQgayBwaG90b3JlYWxpc20gXSEhCmRlbGljaW91cwpmbGFyZXMKMzVtbSBtYWNybyBsZW5zCnJlZCBhbmQgd2hpdGUKdHJhbnNjZW5kZW50CmVtaWwgbWVsbW90aApoYXJwZXIncyBiYXphYXIKdmlldyBmcm9tIGJlaGluZApkdW90b25lCjE5NjBzCnZvbHVtZXRyaWNzCm1vc2FpYwpzbGlteQpjbG9ja3dvcmsKYmVhdXRpZnVsIGZhY2UgYW5kIGZsYXdsZXNzIHNraW4KaW5jcmVkaWJsZSBsaWdodGluZwp3YXRlcm1hcmsKd2hpdGUgbWFyYmxlCmJpb2x1bWluZXNjZW50IHNraW4Kb3ZlcmhlYWQgd2lyZXMKdGludHlwZSBwaG90bwptYW5kYWxhCnBhcnRseSBjbG91ZHkKdGhlIGVuZCBvZiBhbiBvcmdhbmlzbQo4IGsgMyBkCmdyYWRpZW50IHdoaXRlIHRvIGdvbGQKcGluayB0d2ludGFpbCBoYWlyIGFuZCBjeWFuIGV5ZXMKY3VpcmFzcwpiaW9tZWNoYW5pY2FsIGN5Ym9yZwpwb3J0cmFpdCBvZiBhIG1lZGlldmFsIG9sZCBraW5nCnNwbGFzaApkZXByZXNzaW5nCmdlb21ldHJpY2FsIGRyYXdpbmdzCmJyaXR0IG1hcmxpbmcgc3R5bGUgMy80Cmh5cGVyIHJlYWxpc3RpYyBwaG90b2dyYXBoeQpkYXJrd2F2ZQpiZXR0YSBmaXNoCnN0cm9uZyBib2tlaApibHVlIGxpZ2h0aW5nCnNpbXBsaWZpZWQKZGFyayBmb3Jlc3QgYmFja2dyb3VuZApzcGFjZSBzdGF0aW9uCmN1bXVsdXMgY2xvdWRzCnBvbGFyb2lkIHBob3RvZ3JhcGgKcG9zdC1hcG9jYWx5cHRpYwphY3J5bGljIGFydApkYXJrIGZvcmVzdApuZW9jbGFzc2ljYWwKYWxwaG9uc28gbXVjaGEKdmVyeSB2ZXJ5IGVsZWdhbnQKbWlsaXRhcnkgdW5pZm9ybQpkaWV0ZXIgcmFtcwpyb2JvdGljIGVuaGFuY2VtZW50cwphbmF0b21pY2FsbHkgYWNjdXJhdGUKcGlnCjMgZCBoaWdoIGRlZmluaXRpb24KbWlkc29tbWFyCjggNSBtbSBsZW5zCmdyb3VuZC1sZXZlbCB2aWV3CmZpcnN0IGxpZ2h0CmF3YXJkIHdpbm5pbmcgZGV0YWlscwpyb24gZW5nbGlzaCBhbmQgZWlpY2hpcm8gb2RhCmVuZXJnZXRpYyBjb21wb3NpdGlvbgpmaXNoZXllISEhIGxlbnMKc29mdCBmZWF0dXJlcwpibG9uZCBoYWlyCmRldGFpbGVkIGhhaXIKdGhpY2sgbmVvbiBsaWdodHMKZmFjZSBjbG9zZSB1cApzY2FyeSBhdG1vc3BoZXJlCmdsaXN0ZW5pbmcgc2tpbgp2aWN0b3JpYW4gZXJhCjIgNSAwIG1tIHNoYXJwIGxlbnMKc21pcmtpbmcKdXBzY2FsZWQKZGVuaXMgc2FyYXpoaW4Kc3ByaXRlCnN0eWxpemVkIHBvcnRyYWl0CnRyYW5zcGFyZW50IGJhY2tncm91bmQKYWxsZW4gd2lsbGlhbXMKcHJhY3RpY2FsIGVmZmVjdHMKcnVzdHkKZnVsbCBoZWlnaHQKZ29kc2VuZApjb3JvbmFyZW5kZXIKc2VwaWEgdG9uZQpicm9uemUKY3Jpc3AgZGV0YWlscwpkaWdpdGFsIHdvcmxkCnBsYXlzdGF0aW9uIDUgc2NyZWVuc2hvdAphY3J5bGljIHBhbGV0dGUga25pZmUKbW9lYml1cyBzdGFyd2F0Y2hlciBjb21pYwpibGFjayBjbG90aGVzCmZyYW5zaWNvIGdveWEKY29sb3JlZCBpbgpvY3RhbmUgcmVuZGVyIGFlc3RoZXRpYwpicm9uemUgYWdlCmxheW91dCBmcmFtZQpnZW9tZXRyaWMgb3JuYW1lbnQKYnJpZGdlcwpodWdlCjM1bW0gcGhvdG9ncmFwaHkKcG92CnN0ZWVsCmZhZGVkIGNvbG9ycwp3YXNoeSBicnVzaAp1bHRyYWhkCm5hdHVyYWwgc3VubGlnaHQKZGFyayBicm93biBza2luCmFuIGFlc3RoZXRpY2FsbHkgcGxlYXNpbmcKbGFyZ2UgZW50aXJlbHktYmxhY2sgZXllcwpiYW5na3VhcnQKb2xkIGJsYWNrIGFuZCB3aGl0ZSBwaG90bwpzcGFjZSBkYW5keSBzdHlsZQpkYW5nZXJvdXMKbG9uZyBicmFpZGVkIGhhaXIKbWFyYmxlIGFuZCBnb2xkCmJsYWNrIGFuZCB3aGl0ZSBpbGx1c3RyYXRpb24KYmFjayBsaXQKam9zaHVhIG1pZGRsZXRvbiBjb21pYyBhcnQKa29kYWsgY29sb3IgZmlsbSBzdG9jawpzZW5zdWFsIGdsb29teSBzdHlsZQptYXN0ZXJmdWwKY3JlYXRpdmUgY29tbW9ucyBhdHRyaWJ1dGlvbgpmYXNoaW9uIGRlc2lnbgpkaW0gZHVzayBsaWdodGluZwpibHVlIGN5Ym9yZyBleWVzCnJlZCBhbmQgb3JhbmdlIGdsb3cKc2hvd2luZyBvZmYgaGlzIG11c2NsZXMKd2VhcmluZyAxIDggNSAwIHMgZXJhIGNsb3RoZXMKc21vb3RoIGVyaWMgemVuZXIgY2FtIGRlIGxlb24KdGludHlwZQpibGFkZSBydW5uZXIgYXJ0aWZhY3RzCmNpbmVtYXRpYyBmZWVsCmx1c2ggcGxhbnRzIGFuZCBmbG93ZXJzCmRldGFpbGVkIGRpZ2l0YWwgcGFpbnRpbmcKZnVsbCBib2R5IGFydApjb2xvciB0aGVvcnkKc25ha2VzCmFuaW1hdGlvbiBwaXhhciBzdHlsZQozIHBvaW50IGxpZ2h0aW5nCmYvMjIKeSAyIGsKbGllcGtlCmYxLjgKKGVvcyA1ZHMgcgpzaGFycCBmZWF0dXJlcwpzaGFycGVuZWQKY3VydmVzCmhkIG1peGVkIG1lZGlhCmNsZWFyIHNraW4KNGsgcmVhbGlzdGljIHBob3RvCmFuYWxvZ3VlIHBob3RvIHF1YWxpdHkKcmVsaWdpb3VzIGFydApmbGF0IGxpZ2h0aW5nCmZvb2QgcG92CndyYXBwZWQgdGhlcm1hbCBiYWNrZ3JvdW5kCnNpbW9uIHJveQpkcmFyawoxIDYgNiA3Cm9jdGFuZSBoaWdobHkgcmVuZGVyCmRhcmsgZXllcwpwZXJmZWN0IGZhY3Rpb25zCmhpZ2hseSBkZXRhaWxlZCBib2R5CmZhbnRhc3RpY2FsCmRpc3RhbmNlCnRhc3RlZnVsCmd1bmRhbQpib2tlaCBlZmZlY3QKYmlvbWVjaGFuaWNhbCBkZXRhaWxzCmRldGFpbGVkIHNoYWRpbmcKZXllcyBhcmUgZ2xvd2luZyByZWQgbGlnaHRidWxicwp2ZXJ5IGZ1bm55CmhvcnJvcmlzdGljIHNoYWRvd3MKaW4gdGhlIGZvcmVzdApieSBncmVnIHJ1dGtvd3NraQpmb3VudGFpbgphZG9iZSBpbGx1c3RyYXRvcgphcyB0cmVuZGluZyBvbiBhcnRzdGF0aW9uCmxheWVycwpwYWxlIGJlaWdlIHNreQpwZW5jaWwgbWFya3MKcGV0YWxzCmRhbiBtdW1mb3JkLiBjb25jZXB0IGFydApjYW5vbiBlb3MKcmljaCBkZWVwIGNvbG91cnMKZ29sZGVud29sZgpsb29taW5nCnNhdWwgZ29vZG1hbgptYWdpYyBjaXJjbGUKZGF2aWQgYSB0cmFtcGllcgpkeXN0b3BpYSBjb3JlCmthdHN1aGlybwpib2xkIGxpbmUgYXJ0CmNvbG9yZnVsbHkKbWFyYSBkZW1vbgpoaWdobHkgZGV0YWlsZWQgZXhxdWlzaXRlIGZhbmFydApjeWJlciBwdW5rCmNhciBwaG90b2dyYXBoeQpuYyB3eWV0aApsYW50ZXJucwpmbHVmZnkgY2xvdWRzCmluc3RheAp2ZXJ5IGNvbG9yZnVsCnRyYWRpdGlvbmFsCmJhcmxvd2UKNGsgZGlnaXRhbCBhcnQKYm9vdHMKZmxvcmFsCnN0cmFpZ2h0IGxpbmVzCjNkIG9jdGFuZSByZW5kZXIKY29taWMgYm9vayBpbGx1c3RyYXRpb24KZ3NvY2lldHkKc2NhbGVzCmdvbGRlbiBleWVzCm9jY2x1c2lvbgpzdHJhaWdodCBoYWlyCmR1dGNoIGdvbGRlbiBhZ2UKKHN0ZWFtcHVuaykKM2QgY29sbGFnZQpuaWdodCBsaWdodHMKYWNjdXJhdGUgYW5kIGRldGFpbGVkCm1hbmRlbGJvdCBmcmFjdGFsCmJvbGQgbmF0dXJhbCBjb2xvcnMKZm9nIHZvbHVtZXMKYmVsc2luc2tpCm1vb25saWdodCBzaG93aW5nIGluanVyaWVzCmNvbG9yZnVsIGhhaXIKaGlnaGx5IGRldGFpbGVkIDQgayBhcnQKY3JhaWcgbXVsbGlucyA4IGsKY2Fub24gMyAwIDAgbW0KMSA5IDkgMApndXN0YXZlIGRvcmUgYW5kIG1hcmNvIG1henpvbmkKY2FuZGxlCmdpYW50ZXNzIHNob3QKcGhvdG8gdGFrZW4gb2YgYW4gZXBpYyBpbnRyaWNhdGUKdGFrYXNoaSB0YWtldWNoaQp0b25lbWFwcGluZwpmbGlydHkKdmlsbGFnZQptYWdpYyBkZXRhaWxzCndpZGUKdml2aWQgaHVlcwoxOTUwcwphbnRpcXVlIHJlbmV3ZWwKbGV2ZWwgZGVzaWduCmJlZXIKcGhvdG8gbWFuaXB1bGF0aW9uCmd0YSB2IGNvdmVyIGFydApleHRyYSBkZXRhaWxlZApoYXJzaCBsaWdodGluZwpoeXBlcnJlYWxpc3RpYyByZW5kZXIKMTkyMHMKYW50aHJvcG9tb3JwaGl6ZWQKY29sb3NzYWwKbGlnaHQgYmxvb20KYXRtb3NwaGVyaWMgbGlnaHQKd2FyaGFtbWVyIDQwMDAwCm1lcm1haWQKd2hpdGUgZnJhbWUKbG9uZyAtIHNob3QKYXdlc29tZSBleHBvc2l0aW9uCmJyaWxsaWFudGx5IGNvbG91cmVkCndpd2VrCmZwcwphcnQgaGlzdG9yeSA4IGsKc21vb3RoIGZ1c2NoaWEgc2tpbgprYW4gbGl1CmRldGFpbGVkIGNhcnRvb24Kc29mdXJyeQpvcmdhbmljIGN5Ym9yZwphd2FyZCB3aW5uaW5nIHJlbmRlcgp0aXJlZApvdXRlciB3b3JsZHMKdGlsdHNoaWZ0CmFtZXJpY2FuYQpoaWdoIC0gcXVhbGl0eQpmbHlpbmcgY2FycwpwYXN0ZWxzCnpvb20KcnViYmxlCmV4dHJlbWVseSByZWFsaXN0aWMKcXVlZW4KY3liZXIgbmVvbiBsaWdodGluZwptZWRpdW0gc2hvdCBjbG9zZSB1cApoeXBlciAtIHJlYWxpc20KZ3JhZGllbnQgZmlsdGVyCnRlbmRyaWxzCm9wYWxlc2NlbnQKYWNpZApwcm9tbyBzaG9vdApncmFjaW91cwphIGJlYXV0aWZ1bApjeWJlcm5ldGljIHNjaWZpCm1lc3N5IGhhaXIKZ29sZCBleWVzCnNwcmF5IHBhaW50CmZhbGxvdXQKaXJpZGVzY2VudCBiZWV0bGVzCmhlYXZlbgpjbG91ZHkgYmFja2dyb3VuZAptZWRpdW0gbG9uZyBzaG90Cm5vaXIgYXJ0IGhvdXNlCnZhbGVudGluYSByZW1lbmFyCmRhcmsgbW9vZHkgbGlnaHRpbmcKZ29sZCBqZXdlbHJ5Cm1vb2R5IGNpbmVtYXRvZ3JhcGh5CnJlYWwgY2FtZXJhCnRoaW4gd2Fpc3QKbG9uZyBsb29zZSByZWQgaGFpcgppbnRyaWNhdGUgZmFudGFzeSBwYWludGluZwphdXR1bW4gbGlnaHRzCmRldmlhbmFydCBjcmF6ZQpyZWFsaXNtIHwgYmVlcGxlCmltb2dlbiBwb290cyBhcyBhIHBhbGFkaW4KZGlzbmV5IHdldGEgcG9ydHJhaXQKdXB3YXJkIHNob3QKZWxlZ2FudCBhcnQKc3Rvcm15CmdyZXkgc2tpbgphbGV4YW5kcmUgY2hhdWRyZXQKYmVhdXRpZnVsIGZpbmUgZmFjZSBmZWF0dXJlcwpob3Jpem9uCjEgNiBtbQpleHRyZW1lIGRldGFpbCBza2luCmJlYXV0aWZ1bCBicnVzaCBzdHJva2VzCmZ1dHVyaXN0aWMgZGVzaWduCndhcm0gY29sb3IgcGFsZXR0ZQpyZWN1cnNpb24KbGFtcHMKc3VtbWVyIGRheQpkcmV3IHN0cnV6YW4gaWxsdXN0cmF0aW9uIGFydAppbiBsZWduaWNhCmJyaWdodCBsaWdodHMKd2VhcmluZyBhIHN1aXQKbWlkIGRheQpjaHJpcyB0dWxsb2NoIG1jY2FiZQpmaW5lIGFydCBwaG90b2dyYXBoeQphbGV4IGdyZXkgYW5kIGJla3NpbnNraQpqdW5rIHR2CnZpdmllbm5lIHdlc3R3b29kCnNpd29vIGtpbQpjb2hlcmVudCBkZXNpZ24KY3Jpc3AgOCBrIGxpbmUgYXJ0CjMgY29sb3Igc2NyZWVuIHByaW50Cm1heGltIGNvdmVyCnBlcmZlY3RseSBkZWZpbmVkIGZlYXR1cmVzCm11c2V1bSBkaWZmdXNlIGxpZ2h0aW5nCmpvaG4gc3RlcGhlbnMKc3RhbiB3aW5zdG9uIHN0dWRpb3MKYXJtIHJlYWNoaW5nIG91dCBvZiB0aGljayBmb2cKY2VyZW1vbmlhbCBjbG91ZHMKbWFnaWMgZG9vcndheQpkZXN0aW55IGFydApzcGlubmluZyBoYW5kcyBhbmQgZmVldAp2b3JlCnJvc3NldHRpIGJvdWd1ZXJlYXUKZmVtYWxlIGR3YXJ2ZW4gbm9ibGV3b21hbgpkZXRhaWxlZCBhcm1vcgpyZXRyb2Z1dHVyaXN0aWMKcXVhbnR1bSB3YXZldHJhY2luZwp0YXJvdCBjYXJkcwpzbW9reQpwcmVjaXNlCmNvbG9yIHBob3RvZ3JhcGh5CnN0YW5kaW5nIHBvc2UKbWVkaWV2YWwgc2V0dGluZwpzZWEgb2Ygc291bHMKdGhpbiBwb3JjZWxhaW4KZG9jdW1lbnRhcnkKaGQgcGhvdG8KaGlnaGx5IGRldGFpbGVkIGZlYXR1cmVzCmJhdHRsZSBzY2VuZQphbmltYXRyb25pYwplbmQgb2YgdGhlIHdvcmxkCmFuaW1lIGFydHMKaXRhbGlhbiBmdXR1cmlzbQo4NW1tIG5kIDUKc3BpbmVzCnByb2R1Y3Rpb24gcXVhbGl0eSBjaW5lbWEgbW9kZWwKZ2xvYmFsIGlsbHVtaW5hdGlvbiBsaWdodGluZwpzdGFycyBpbiB0aGUgc2t5Cm91dHNpZGVyIGFydAp2IC0gcmF5Cm1hc3RlcmZ1bCBjb21wb3NpdGlvbiEhIQpwb3JrCmxhcmdlIGVudGlyZWx5IC0gYmxhY2sgZXllcwpmYWtlIGRldGFpbApjb2xvcmVkIGdlbHMKaW4gc3R5bGUgb2Ygem9vdG9waWEKcGl4YXIgcG9ydHJhaXQgOCBrIHBob3RvCnJlZmxlY3RpdmUgc3VyZmFjZXMKc2VyZW5lIGxhbmRzY2FwZQpkZXRhaWxlZCBwaG90b2dyYXBoeQpmIDIuIDgKaHlwZXItcmVhbGlzbQppbGx1c3RyYXRpb24gcGFpbnRpbmcKZGVtb24KaHlwZXIgcmVhbGlzdGljIDRrCmRpZmZ1c2UgbGlnaHQKd2hpdGUgc2hpcnQKc2hhcnAgbGVucwppcm9uIG1hbgpiYWxhbmNlZCBjb21wb3NpdGlvbgpmbG93ZXJwdW5rCnJheSB0cmFjaW5nIHJlZmxlY3Rpb24KbWF0dCBwYWludGluZwpjaXR5IGxhbmRzY2FwZQpyYWRpYW50IHNraW4KZnVsbCBjaGFyYWN0ZXIKbGlvbgp1bHRyYWRldGFpbCBmYWNlCmZhbWUgb2YgdGhyb25lcwptYXlhIGFsaQptaWNybyBwb3YKZmFudGFzdGljIHJlYWxpdHkKcmVhbGlzdGljIG1pbGl0YXJ5IGdlYXIKc3R1bm5pbmdseSBiZWF1dGlmdWwKdG9rdWppbiB5b3NoaW9rYQp1bHRyYSAtIHdpZGUgYW5nbGUKbWFnaWNhbCBjb21wb3NpdGlvbgpmbG93ZXIgZmFjZQptYWNoaW5lIHBhcnRzIGVtYmVkZGVkIGludG8gZmFjZQp2cmF5IHNtb290aAp0b2t5bwpzbW9raW5nIGEgY2lnYXJldHRlCjMtcG9pbnQgcGVyc3BlY3RpdmUKdHdpc3RlZAppdGVtcwpjYXRob2xpY3B1bmsKaWxsdXNpb24gc3VycmVhbCBhcnQKaGVhdnkgbWV0YWwKc2hhcnAgbGlnaHRpbmcKdmludGFnZSBwaG90b2dyYXBoCmRyYW1hdGljIGNvbXBvc2l0aW9uCmlsbHVtaW5hdGlvbgpuaWdodCBsaWdodGluZwpmYXNoaW9uIG1hZ2F6aW5lCmJpYmxpY2FsCmJ1c3QgcG9ydHJhaXQKcG9zdGN5YmVycHVuawpiZWF1dGlmdWwgc3Vuc2V0CmhpZ2ggZGV0YWlsIGNvbmNlcHQgYXJ0CnZpZGVvZ2FtZQplcGljIGFuZ2xlIGFuZCBwb3NlCm5vIGhhbmRzIHZpc2libGUKY2FuZGlkIHBob3RvZ3JhcGh5CnNoYXJwIGxpbmVhcnQKZmFudGFzeSBkaWdpdGFsIHBhaW50aW5nCmV4dHJlbWVseSBjb2hlcmVudApzdWJ0bGUgc2hhZG93cwpjaGlsZHJlbiBpbGx1c3RyYXRpb24KbGluZSBicnVzaAp1bnJlYWwgZW5naW5lIDQgawprb2RhayBmaWxtIHN0b2NrCnN0aWxsIGZyYW1lCndvcnRoMTAwMC5jb20KYmxhY2sgbGVhdGhlciBqYWNrZXQKY2xlYW4gY29tcG9zaXRpb24Kc2hhcGVzCmRlc2lnbiBvbiBhIHdoaXRlIGJhY2tncm91bmQKZ2FtZSBhc3NldHMKZXhvdGljCnRoaW4KaXNvbWV0cmljIGFydApyYXZlbgpoaWdoLXRlY2gKdWx0cmEgZmluZSBkZXRhaWwKYmVhbXMgb2YgbGlnaHQKaGlnaCByZXNvbHV0aW9uIHBob3RvZ3JhcGgKYXJ0IGdhbGxlcnkKZ3JlZWsgcG9vbApzbHkgZXhwcmVzc2lvbgpzaWdtYSA4NW1tCmNsaWZmcwpzYW5kIGR1bmVzCmNyaXRpY2FsIHJvbGUKYWVzdGhldGljIQo4NW1tIG5kIDQKc2hvdCBpbiBjYW5vbgppbiBzdHlsZSBvZiBtaWRqb3VybmV5Cm15c3RlcmlvdXMgdmliZXMKcGFpbnRlZCB3YXJoYW1tZXIgbWluaWF0dXJlCmJvcmRlcmxhbmRzCnZsYWRpbWlyIHB1dGluCmdvbGRlbiBob3VyIGxpZ2h0aW5nCnByb3BoZXQgZ3JhcGhpYyBub3ZlbApsdXh1cnkgbWF0ZXJpYWxzCnNvbGlkIHNoYXBlcwp3YWxscGFwZXIgLSAxIDAgMiA0Cm9mIGEgYmVhdXRpZnVsIGZlbWFsZSB3YXJmcmFtZQpjb2xvdXJzCi0gbiA5CnZlcnkgZXRoZXJlYWwKdG9ybmFkbwpjYXBlCmIgJiB3Cmlzb21ldHJpYyBwZXJzcGVjdGl2ZQppbnNwaXJhdGlvbgpiaW9uaWMKdHlwb2dyYXBoeQpwb2x0ZXJnZWlzdApzb2Z0IGxpZ2h0aW5nIDhrIHJlc29sdXRpb24KYmFyYmFyaWFuCmJvdHRvbSB2aWV3CjhrIGNvbmNlcHQgYXJ0CmxvdHMgb2YgZGV0YWlscwpsdXNoIHBsYW50cwpsYXJnZSBtb3RpZnMKbmlnaHQgc2NlbmUKYm9yaXMgdmFsbGVqbykpKQpjbGVhciBmYWNpYWwgZmVhdHVyZXMKaGlnaCBkZXRhaWwgb2YgdGhlIGZhY2UKc29mdCByaW0gbGlnaHQKYmlnCnNldCBpbiBoYWxmLWxpZmUgMgpjcmlzcCBsaW5lcwpmaXJlIG1hZ2ljCmtpbW9ubwppbnRyaWNhdGUgZmFzaGlvbiBjbG90aGluZwplbGVnYW50IHRyZW5kCmFwb2NhbHlwc2Ugbm93CnFpIHNoZW5nIGx1bwpiYWNrZ3JvdW5kIGh5cGVyIGRldGFpbGVkCnNoYXJwIHNwaW5lcwpncm91bmQgdmlldyBzaG90CmxvcmV0YSBsdXgKbWF0cml4CnByaW50ZXJlc3QKZmFyIHNob3QKbWlybyBwZXRyb3YKZXBpYyBmYW50YXN5IGNhcmQgZ2FtZSBhcnQKYW50aHJvcG9tb3JwaGljIHNoaWJhIGludQp1cmVhbCBlbmdpbmUKYnJva2VuCmhpYmlzY3VzIGZsb3dlcnMKcGhvdG9yZWFsaXN0aWMgY2FtZXJhIHNob3QKbWF0ZXJpYWwKc2hvcnQgYnJvd24gaGFpcgp0cmVuZGluZyBvbiB0d2l0dGVyCnRlc3NlcmFjdApzdXBlcm5vdmEKZGVpdiBjYWx2aXoKNGsgcGhvdG9ncmFwaApyb2IgcmV5IGFuZCBrZW50YXLDtSBtaXVyYSBzdHlsZQplbGVjdHJpY2FsIGNhc2UgZGlzcGxheQpzcGFjZSBhcnQgY29uY2VwdAozZCByaW0gbGlnaHQKd2xvcCBhbmQgcm9zc2RyYXdzCmd0YSA1IGNvdmVyIGFydApza3lzY3JhcGVycwpkYXRhbW9zaApwYW9sbyBlbGV1dGVyaSBzZXJwaWVyaQp2aXZpZCBjb2xvdXIKOTBzCm1hbmdhIGFuZCBhbmltZSAyMDAwCmF3YXJkIHdpbmluZwpkcmFtYXRpYyBoYWlyIGNvbG9yCm1hbGFjaGl0ZQpwaG90b3JlYWxpc3RpYyByZW5kZXJpbmcKbmVjcm9tYW5jZXIKb3B0aW1pc3RpYwpwc3ljaG8gcGFzcwpwZW50YXgKZ3JlZW4gYW5kIHBpbmsKZW52aXJvbm1lbnRhbCBsaWdodApvcm5hbWVudGF0aW9uCmhpZ2ggZmFjZSBzeW1tZXRyeQphbiBhbWVyaWNhbiByb21hbnRpY2lzbSBwYWludGluZwp1bHRyYSBzaGFycCBmb2N1cwp2ZXJ5IHZlcnkgYmVhdXRpZnVsIGZ1cnJ5IGFydAppbnRyaWNhdGUgbGluZXMKY29sb3VyaXNlZAphdGxhbnRlYW4gd2Fycmlvcgo4NW1tIGYxLjgKYXJjaGl0ZWN0dXJhbAppbnZpdGluZwpoaWdoIGRldGFpbCB0ZXh0dXJlCmZhciBhd2F5CmRpc3RvcnRlZAplcGhlbWVyYWwKMyA1IG1tIHBob3RvCnRocmVlIHBvaW50IGxpZ2h0aW5nCmJsYWNrIHNraW4Kc3ltbWV0cmljYWwgYm9keQo0ayBkZXRhaWxlZAptaW5nY2hlbiBzaGVuCmxhc2VyCmhpIHJlcwpvcnRob2dyYXBoaWMKYnJpZ2h0IGJsdWUgZXllcwphY2N1cmF0ZSBmYWNpYWwgZGV0YWlscwpjb2RlCm1pZGRsZSBhZ2VkCmFkcmlhbmEgbGltYQppbiB0aGUgd29vZHMKdmVyeSB2ZXJ5IGludHJpY2F0ZQpjb2xvcmZ1bCBsaWdodHMKbmVvbiBnbG93CmJhc3Rpb24gZ2FtZQpvY3RhbmUgcmVuZGVyLiBieSBtYWtvdG8gc2hpbmthaQpiaW9sdW1pbmlzY2VudCBjcmVhdHVyZXMKY29sb3IgYmxvY2tpbmcKa2V5c2hvdCByZW5kZXIKY2xlYW4gZGVzaWduCmh5cGVyIG1heGltYWxpc3QKd2FybSBhenVyZSB0b25lcwpwaG90b2dyYXBoeSBvZiBrdXJ6Z2VzYWd0CjMgZCBzY2VuZQpjcmFpZ3NsaXN0IHBob3RvCmRsc3IgcGhvdG9ncmFwaHkKcmljaCB0ZXh0dXJlCmJlcm5pZSBmdWNocwptYXJpYSBwYW5maWxvdmEKYW5kcmVhIHNhdmNoZW5rbwptaWtlIGtpbWUKbHVkb3ZpYyBwbG91ZmZlCm9saXZlciBjb29rCmF0bW9zcGhlcmljIGNvb2wgY29sb3JncmFkZQphbmltYXRlZCBmaWxtCnBvcnRyYSA0MDAKd2F0ZXIgcmVmbGVjdGlvbgpsdW1lbiByZWZsZWN0aW9ucwphbGllbiBwbGFuZXQKZGVhZCB0cmVlcwptYWdhemluZSBjb2xsYWdlCjEgOSA5IDAgcwpkZXRhaWxlZCBwaG90b2dyYXBoCmFzc2V0cwpkYXJrIGVubGlnaHRlbm1lbnQKc2hvb3RvdXQKc2FuZHN0b3JtCmltYXggNyAwIG1tCm1vcmFuZGkgY29sb3Igc2NoZW1lCmdhbGFjdGljCndhcm0gY29sb3VyZWQKbGFyZ2UKZm9saWFnZQpzb255CmRldGFpbGVkIHNraW4KaGQgNGsKc29mdCBkaWZmdXNlZCBsaWdodApwb2ludHkgZWFycwpjYXN0aW5nIGEgc3BlbGwKdnJheSB0cmFjaW5nCjE5ODAKZHVsbCBjb2xvcnMKaGlzIHdob2xlIGhlYWQgZml0cyBpbiB0aGUgZnJhbWUKd2l0Y2hlciAzCnN1cnJlYWxpc3QgcGFpbnRpbmcKZ2xvYmFsIGxpZ2h0aW5nCmZpZWxkCmNocmlzIGR5ZXIKc21vb3RoIGxpZ2h0aW5nCm9mZmljaWFsIGZhbmFydApzdG9wcGVkIGluIHRpbWUKaW50cmljYXRlIGFic3RyYWN0CmZlYXR1cmUKbWlkbmlnaHQgaG91cgpwcm9jcmVhdGUKZnVsbCBib2R5IGFuZCBoZWFkCmNvcmFscwptdXRhbnQKYmVhdXR5IHBvcnRyYWl0Cmx1aXogZXNjYW51ZWxhCmFuY2llbnQgd2FycmlvcgpyZWFsaXN0aWMgd2F0ZXIgc3BsYXNoZXMKZnVsbCBib2R5IGNvbmNlcHQKZ3JlZyBrdXRrb3dza2kKcmIgNiBzCmR5bmFtaWMgcGVyc3BlY3RpdmUgcG9zZQphbGV4IGthbmV2c2t5CnN0dW5uaW5nIDMgZCByZW5kZXIKcmVhbCBmbGVzaCB0ZXh0dXJlCndoaXRlIGxhc2hlcwp1bmN1dApidXR0ZXJmbHkgc3F1aWQKdWx0cmEgbWVnYSBzdXBlciBoeXBlciByZWFsaXN0aWMKdmVydGljYWwgcG9ydHJhaXQKc2FwcGhpcmUKYnJhaW4KdGlhcmEKc2tpbiB0aW50ZWQgYSB3YXJtIHRvbmUKbWVtZQpwcm9wYWdhbmRhIHBvc3RlcgpwYXJhZGlzZQpicnVuZXR0ZQpoaWdoIGRldGFpbGVkIGZhY2UKdmlsbGFpbgpwbGFuZXQKdWx0cmEgLSByZWFsaXN0aWMgYW5kIGRldGFpbGVkCmF6dXJlIGJsdWUgd2F0ZXJ5IGV5ZXMKYW5pbWUgbWFzdGVycGllY2UKZnVsbCBwb3J0cmFpdAphZnRlcm5vb24KZ3JlZW4gcGxhbnRzCmJyaWxsaWFudAptb3V0aCBzbGlnaHRseSBvcGVuCnVsdHJhcmVhbGlzbQp3aW5kb3dzCmRldGFpbGVkIGZhY2UgYW5kIGV5ZXMKaHlwZXIgc2hhcnAKaHlwZXJkZXRhbGllZAphbWF6aW5nIGxpZ2h0aW5nCjRrIG9jdGFuZSByZW5kZXIKaW5rIG9uIHBhcGVyCnNpbmd1bGFyaXR5CmxpZ2h0aGVhcnRlZAptZWdhIGRldGFpbGVkCnByb2Zlc3Npb25hbCBhcnRpc3QKZnVsbCBvZiBkZXRhaWwKaGlnaGx5IHByb2Zlc3Npb25hbGx5IGRldGFpbGVkCmdsb3NzeSByZWZsZWN0aW9ucwptYWdpYyBob3VyCmh5cGVyIHJlYWxpc3RpYyBsaWdodGluZwpzdXJnaWNhbCBzdXBwbGllcwptdWNoYSA6IDoKaW1vZ2VuIHBvb3RzIHBhbGFkaW4KY3liZXIgYXJtb3IKaW5jcmVkaWJseSBsaWZlbGlrZSBhdHRyaWJ1dGVzCmluZGlnbyBhbmQgdmVuZXRpYW4gcmVkCmFydHNhdGlvbgphaXJicnVzaGVkCjggbW0KZGlnaXRhbCAyZApwYWludGVybHkgc3R5bGUKbmlnaHQgY2l0eQpjaXR5IGxpZ2h0cwppbiBhIHdoaXRlIHJvb20KY29uY2VwdCBtYXR0ZQprZXkgbGlnaHRpbmcKaW50cmljYXRlIGRpZ2l0YWwgYXJ0CmdlYXJzIG9mIHdhcgpmbHVvcmVzY2VudAp0cmVlIG9mIGxpZmUKZHlzdG9waWFuIG1vb2QKZml0CmFzdHJvbmF1dApicmVhdGh0YWtpbmcgZGV0YWlsZWQKbHVzaCB0cmVlcwpoZWxsaXNoCmNlbnRyYWwgY29tcG9zaXRpb24KcGhvdG9yZWFsaXN0aWMgcGFpbnRpbmcKdmVyeSBkYXJrCm5pY2sga25pZ2h0Cm1lZGlldmFsIHBvcnRyYWl0CmJyaWdodCB0b25lcwp2ZXJ5IHNoYXJwIGZvY3VzCnVuc3RpcnJlZCBwYWludAphZHZlbnR1cm91cwpkYXJrIHNjZW5lCnVsdHJhIHJlYWxpc3RpYyB2ZngKY3JhaWcgbXVsaW5zCnBlcGUgdGhlIGZyb2cKY29tZWR5CmZhbnRhc3kgd29ybGQKd2lzZG9tCnVsdHJhIC0gZGV0YWlsCmtvZGFrIGdvbGQgMiAwIDAKbm8gZmFjZQpoaWdoIGRlbGljYXRlIGRlZmluZWQgZGV0YWlscwpvbmUgc2luZ2xlIHRyaWJlIG1lbWJlcgpkb25vdG8gZ2lhbmNvbGEKZnVsbCBmaWd1cmUgcG9zdGVyCnNjZW5lcnkgd2FsbHBhcGVyIGFlc3RoZXRpYwp3aGl0ZSBiaW9tZWNoYW5pY2FsIGRldGFpbHMKaW4gc3R5bGUgb2YgcGFuIHJlbiB3ZWkKcG9ydHJhaXQgcGhvdG8gb2YgYSBiYWNrZHJvcApjeWJlcnB1bmsgZnV0dXJpc3RpYwpvbiBhbGllbiBwbGFuZXQKc21va2luZyBhIGNpZ2FyCm9sZWQKY29zcGxheSBwaG90bwpla3RhY2hyb21lCmxvIC0gZmkKc2lkZXZpZXcKdmVjdG9yIGxpbmUgYXJ0CmhpZ2ggZGVwdGggb2YgZmllbGQKaGFsbG93ZWVuCmFuY2llbnQgZ3JlZWNlCnJwZyBjaGFyYWN0ZXIKZ2V0dHkgaW1hZ2VzCnJldHJvIHRlY2hub2xvZ3kKamFuaXMgcm96ZW50YWxzCnJlY3Vyc2l2ZQpzaGFycCBmb2N1cyBpbHVzdHJhdGlvbgpyZWFsaXN0aWMgZmFjZXMKdmVyeSBsb25nIHNob3QKZ3JhbmRpb3NlCmpvaG4gai4gcGFyawpyZWFsaXN0aWMgc3R5bGUKbWFzY3VsaW5lIGZpZ3VyZQpoaWdoIHRlY2hub2xvZ3kKY29tcHV0ZXIKZHJhbWEKYW5hIGRlIGFybWFzCmNsYXkKZGV0YWlsZWQgc3Vycm91bmRpbmdzCmdpZ2FjaGFkCmhlYXZ5IGZpbG0gZ3JhaW4Kd2lsZCB2ZWdldGF0aW9uCnNjaSAtIGZpIGFydApsYXVyaWUgZ3JlYXNseQpoaWdoIC0gcmVzb2x1dGlvbgpnaW5hIGhleWVyCmNsZWFuIGVsZWdhbnQgcGFpbnRpbmcKaHlwZXIgZGV0YWlsZWQgbWFzdGVycGllY2UKaXJyaWRlc2NlbnQKY29sb3JmdWwgc3dpcmx5IHJpcHBsZXMKbWlybwpmdWxsIGJvZHkgY2hhcmFjdGVyIHBvcnRyYWl0CnN0aWxsIGZyb20gYSByaWRsZXkgc2NvdHQgbW92aWUKY2luZW1hdGljIGZvcmVzdCBsaWdodGluZwphbiB1bHRyYSByZWFsaXN0aWMKZ2FtZSBhc3NldCBzaGVldAptYW5kZWxidWxiIDMgZApzb2Z0IGlsbHVtaW5hdGlvbgppbXBvc3NpYmxlCndlYXJpbmcgYSBob29kaWUKdmVuZXRpYW4gcmVkCmZpc2hleWUhISEhISBsZW5zCnBvcmNlbGFpbgpjYXIKZnVsbCAtIGhkCm5ldyB5b3JrIGNpdHkKbWljcm9zY29waWMKaGlnaGx5IGRldGFpbGVkIGFuaW1hbCBtb25zdGVyCmxpZ2h0cmF5cwpkZW1vbnMKNCBkCmJhc2lsIGdvZ29zCjQgayBwaG90bwpzd29yZHMKOCBrIHBob3RvZ3JhcGh5CmV1Z2VuZSBncmFzc2V0CmhpZ2hseSBkZXRhaWxzCjhrIHBob3RvCnJ1bmVzCnBhaW50IHRleHR1cmUKcmVhbGlzdGljIGNpbmVtYXRpYyBsaWdodGluZwp3aWRlLWFuZ2xlIGxlbnMKaGlyb2FraSB0c3V0c3VtaSBzdHlsZQpiZWF1dGlmdWwgbWF0dGUgcGFpbnRpbmcKaGlnaCBkZXRhaWwgcGhvdG8KY2VsLXNoYWRlZApub29uCnNlZW4gZnJvbSBhYm92ZQpjYWJsZXMgZXZlcnl3aGVyZQpwcm9maWxlIHBvcnRyYWl0CmZlbHQKZGV0YWlsZWQgZmFjaWFsIGV4cHJlc3Npb25zCmF2ZW51ZQpoZHIgY29sb3JzCnZvbHVtZXRyaWMgd29vbCBmZWx0aW5nCnBvcnRyYWl0IGRuZApvbmUgc2luZ2xlIG1hc2sKZ3V5dmVyCmFjYW50aHVzIHNjcm9sbHMKbmVpbCByaWNoYXJkcwpkaWdpdGFsIGFydOKAnQpzY290dCBtIGZpc2NoZXIKYnJhc3MKdmlicmFudCBpcmlkZXNjZW50IGNvbG9ycwpnb2xkZW4gaGFpcgpjb250cmFzdGluZwpkaWNocm9tYXRpc20KMSA5IDUgMCBzCnR2CmFuYW1vcnBoaWMgYm9rZWgKaGVhdnkgY29udHJhc3QKZ3JhaW55IGltYWdlCm1vb24gcmF5cwpnbGFtb3JvdXMKbWFjcm8gcGhvdG8Kcm9ja3kKc2VpZnVrdQpkZXNlcnQgYmFja2dyb3VuZApmZW1pbmluZSBmaWd1cmUKcGhvdG9yZWFsaXN0aWMgZmFjZQphcnRpbGxlcnkKZGlzY28gZWx5c2l1bQpjY3R2IGZvb3RhZ2UKNGsgaW1hZ2UKcmVkIGFuZCBibGFjayBjb2xvciBwYWxldHRlCmpycGcKaGFsZiBza3VsbCBmYWNlCmxlZWxvbwpnbGFyZQpmaWdodApjb3VjaApyZW5kZXJlZCBpbiBhcm5vbGQKc3RhZ2UKbmllcjphdXRvbWF0YQpzbW9nCnNlcmVuaXR5Cm1lZ2FjaXR5CnVoZCBpbWFnZQpmaW5lYXJ0CmthcnN0IGxhbmRzY2FwZQpwb3N0IC0gYXBvY2FseXB0aWMKOCBrIHdhbGxwYXBlcgpkYXZpZCBydWJpbgpzZW1pIC0gcmVhbGlzdGljIGFuaW1lCm1ldGFsbGljIGFybW9yCnN0cm9uZyBhbWJpZW50IG9jY2x1c2lvbgozIGQgY2luZW1hdGljIGxpZ2h0aW5nCm1heGltIG1hZ2F6aW5lIGNvdmVyCmdvZGRlc3Mgb2YgaWxsdXNpb24KbG93IHNwYWNpYWwgbGlnaHRpbmcgOiA6CnVmbwpkYXJrIGZyYWN0YWwgYmFja2dyb3VuZAppc29tZXRyaWMgMyBkCmZlbGl4IGtlbGx5CmhpbGFyaW91cwpiYXR0bGUgYXJtb3IKaGlnaCBvY3RhbmUgcmVuZGVyCmhpZ2ggc3BlZWQKbXV0ZWQgY29sb3Igc2NoZW1lCnBob3RvcmVhbGlzdGljIHBob3RvZ3JhcGh5CnVyYmFuCmxpbWluYWwgc3BhY2VzCnRha2VuIHdpdGggcG9sYXJvaWQga29kYWsgcG9ydHJhCmplcmVteSBsaXBraW5nCnBvb2wKdm9sdW1ldHJpYyBsaWdodGVuaW5nCm1vZHVsYXIKZmxlbWlzaCBiYXJvcXVlCmluc2FuZWx5IGludGVncmF0ZQphcnQgbm91dmVhdSBzdHlsZQpwbGVhdGVkIG1pbmlza2lydAphdmF0YXIKY2xvc2UtdXAgcG9ydHJhaXQKZXBpYyBhcnQKYW5pbWUgYmFja2dyb3VuZApyaXBwZWQKcGxhbnQKYnJpZ2h0IGxpZ2h0CmhkciA4awp1bHRyYSB3aWRlIGxlbnMgc2hvdApyZWFsaXN0aWMgY29sb3JzCmZvZ2d5IHNreQp6ZHppc2xhdyBiZWtzaXNuc2tpCnJhZGlhbnQgaGFsbyBvZiBsaWdodApkYXJrIGJsdWUgc2t5CmZpdmUgZmluZ2VycwpvaWwgY2FudmFzCnBhbGUgYmx1ZSBhcm1vcgpwYXJhbm9ybWFsCmNoYXJhY3RlciBhcnQgcG9ydHJhaXQKc3ludGh3YXZlIG5lb24gcmV0cm8KbXlzdGljYWwgc2hhZG93cwplcmFrIG5vdGUKcnVsZSBvZiB0aGlyZHMgZ29sZGVuIHJhdGlvCjIgZCBhbmltZQphZHJpYW4gYm9yZGEKdG8gaGVsbCB3aXRoIHlvdQpsZWdlbmRzIG9mIHJ1bmV0ZXJyYQpzaGFycCBmb2NjCmppbSB3YXJyZW4KcmljaAphdCBkYXduCmd1cm5leQpwYXJhZG94CmhkciBzaG90CmhpZ2ggYnVkZ2V0CmZhbnRhc3kgYXJ0IHN0eWxlCm9mIGEgZmFtaWx5IHN0YW5kaW5nIGluIGEgcGFyawpib2R5IHBhcnRzCmlsbHVzaW9uCndhbGxwYXBlciA0awpjaHVyY2gKOGsgdWx0cmEgcmVhbGlzdGljCnZpZXcgZnJvbSBmcm9udAphbmltYWxzCmRldGFpbGxlZApiaW9zaG9jawpncmFwaGljCmV4dHJlbWVseSBiZWF1dGlmdWwKeW91dGhmdWwKaG91c2UKaGlnaCBxdWFsaXR5IGFydAo4ayBkZXRhaWwgcG9zdC1wcm9jZXNzaW5nCmFsZm9ucyBtdWNoYQpnb3VhY2hlIHBhaW50aW5nCmhpZ2hseSBpbnRyaWNhdGUgZGV0YWlscwpwcm9mZXNzaW9uYWwgc3R1ZGlvIGxpZ2h0aW5nCm1pc3R5IGZvcmVzdApwaG90b3JlYWxpc3RpYyA4awpwb21lZ3JhbmFkZQpyZXBpbgpicmVhdGh0YWtpbmcgc3RhcnMKbHVtaW5vdXMgbGlnaHRpbmcKZW1pc3NpdmUgbGlnaHRpbmcKOCA1IG1tIGYgLyAxLiA0CmV4dHJlbWVseSBoaWdoIGNvbnRyYXN0IQpzb2Z0IHZpbnRhZ2UgZ2xvdwp0aG9tYXMga2lua2FkZSBjZmcgXyBzY2FsZSA4CnB1cGlscyB2aXNpYmxlCmludGVuc2Ugc2hhZG93cwpleHBsb3Npb24gb2YgZGF0YSBmcmFnbWVudHMKaHlwZXIgcmVhbGlzdGljIHRleHR1cmUKbGlmZSBhbmQgZGVhdGggbWl4aW5nIHRvZ2V0aGVyCmNvbWljcwppbmZpbml0eSBwb29sCmxvbmcgYmx1ZSBoYWlyCnRyYW5zbHVjZW50IHdoaXRlIHNraW4Kai4gZGlja2Vuc29uCnJhZGlhbnQKc3VpdApzdHlsZSBkaWdpdGFsIHBhaW50aW5nCnJpb3QgZW50ZXJ0YWlubWVudApvcmlnYW1pCmFzaGVzCnZlcnkgdmVyeSB2ZXJ5IGJlYXV0aWZ1bApyb3VnaApiZWF1dGlmdWwgYWVzdGhldGljCmNsZWFyIGZhY2VzCnRyZW5kaW5nIG9uIHBhdHJlb24KY29sb3JmdWwgZmxvd2VycwpkaWFncmFtCm1pbmVjcmFmdApidXN5CnRpbHRlZCBmcmFtZQp0YWJsZQpjbHV0dGVyZWQKdmlicmFudGx5IGx1c2ggbmVvbiBsaWdodGluZwptYXN0ZXIgcHJpbWUgbGVuc2VzCnRvd2Vycwpjb25jZXB0IGFydCBpbGx1c3RyYXRpb24Ka2ltaSBubyBuYSB3YQphd2FyZCB3aW5uaW5nIG9pbCBwYWludGluZwpnZW5pdXMgcGFydHkKZm9vdGFnZSBmcm9tIHNwYWNlIGNhbWVyYQpiZWVzCnNocmVrCmRpc2hvbm9yZWQKcGx1bWJ1cwppbnRyaWNhdGUgYW5kIGhpZ2hseSBkZXRhaWxlZApkYXJrIGZhbnRhc3kgc3R5bGUgYXJ0CmNyaW1zb24Kc2NlbmljIGZ1bGwgc2hvdApmIC8gMiAyCnN5bW1ldHJ5ISEhCmJsdWUgbW9vbgpzdHVubmluZyBzdW5ueSBsaWdodGluZwpoYXJkIGJhY2tsaWdodAp3aWRlIHdpZGUgYW5nbGUKbWF0dCB3aXNuaWV3c2tpIHN0eWxlCmhpZ2hseSBkZXRhaWxlZCBtYXR0ZSBwYWludGluZwpzaXR0aW5nCnVuem9vbQpzdHVkaW8gcXVhbGl0eSBsaWdodGluZwpjYXJzCmFyY2FuZSBzdHlsZQpwaG90b2Jhc2gKZmxhc2gKbGl2aW5nIHJvb20KcGhvdG9yZWFsaXN0aWMgY29uY2VwdCBhcnQKMyA1IG1tIHBob3RvZ3JhcGgKMyBkIGFuaW1hdGlvbgpvbiBhIHdoaXRlIGJhY2tncm91bmQKc3RhcmZpc2gKM2QgZnJhY3RhbHMKc3VwZXJuYXR1cmFsCmVsbGVuIGpld2V0dApsb25kb24Kcm91bmQgbm9zZQpkeW5hbWljIGFjdGlvbgpzb2Z0IGRyYW1hdGljIGxpZ2h0aW5nCmxvbmcgYmxvbmQgaGFpcgpibHVlLWV5ZWQKZGlhYmxvCmxlZ2VuZGFyeQppcnZpbmcgcGVubgpkciBzZXVzcwpwb3J0cmFpdCBzaG90CmRpcmVjdCBsaWdodGluZwpmYW50YXN5IHBvcnRyYWl0Cmh1Z2UgYW5pbWUgZXllcwpkeW5hbWljIHJhbmdlCmNhdHMKb3V0bGluZQplbnZpcm9ubWVudCBhcnQKc2h5CmEgbWFzdGVyIHBpZWNlIG9mIHN0b3J5dGVsbGluZwpmYWlyeQplZGl0b3JpYWwgcGhvdG8KZnV0dXJpc3RpYyBsb29rCmZlbWluaW5lIGZhY2UKc2lsdmVyIGFybW9yCmZvZ2d5IGJhY2tncm91bmQKdGhpbiBsaW5lcwpjeWJlcmZhY2UKb21tYXRpZGlhCnVucmVhbCBlbmdpbmUgcmVuZGVyZWQKZmxvcmFsIHRhdHRvb3MKZXh0cmVtZWx5IGRldGFpbGVkIHNoYWRpbmcKZmFudGFzeSBzdHlsZSBhcnQKdWdseSEhISEhIQprZWhpbmRlIHdpbGV5CnRyZW5kaW5nIG9uIHdlYXN5bApnb3JnZW91cyBmYWNlcwptZXJnaW5nIHdpdGggdHJlZSBpbiBhIGZvcmVzdApnaG9zdCBvZiBraWV2Cm9sZCBlbmdsaXNoCmdsb3dpbmcgbGlnaHRzIGludHJpY2F0ZQoxOXRoIGNlbnR1cnkKYmxhZGUgcnVubmVyIHN0eWxlCm5pZ2h0c2NhcGUKY2xheSBzY3VscHR1cmUKZGV0YWlsZWQgY2xvdGhpbmcKbWFjaGluZQptZWR1c2EKcG9wCnZpYnJhbnQgZGVlcCBjb2xvcnMKcGhvdG9yZWFsaXN0aWMgYXJ0CmJpZyBub3NlCnNmdW1hdG8KZmFzaGlvbiBtb2RlbApwcm9wZXIgc2hhZGluZwplcGljIHNjYWxlIHVsdHJhd2lkZSBhbmdsZQpncmlkCmxlZCBsaWdodHMKZWNzdGF0aWMKYXQgc3Vuc2V0CmhlbGxzY2FwZQp5b3VuZyBtYW4KcG93ZXJmdWxsCmZ1cnJ5IGZhbmRvbQppbmNyZWRpYmxlIGRldGFpbHMKZnJvbSBzdGFyIHRyZWsgMjAyMQpzdXBlciBkZXRhaWxzCmF3ZXNvbWUgcG9zZQpkb3RzCmNhbnZhcyBwcmludApqb24gbG90aGlhbgptYWdpY2FsIGF1cmEKaHlwZXJyZWFsaXN0aWMgZmFudGFzeSBhcnQKcmVmbGV4aW9ucwpzdHVkaW8gZHJhbWF0aWMgbGlnaHQKbXVnc2hvdCEhISEhCnJlYWxpc3RpYyBmYWNlIGRldGFpbHMKYXdmdWwKZXRoZXJlYWwgbGlnaHRzCmplcmVteSBtYW5uIHBhaW50aW5nCndhbHRlciBldmVyZXR0CmxvcmljYSBzZWdtZW50YXRhCnR1cnF1b2lzZSBnb2xkIGRldGFpbHMKOGsgM2QgcmVhbGlzdGljCmZpbmUgYXJ0IHBvcnRyYWl0IHBob3RvZ3JhcGh5Cm1vdmllIGFjdGlvbiBzdGlsbCBmcmFtZQpzY2ktZmkgY29uY2VwdCBhcnQKMSA0IDUgMApmIDMgMgp0aGUgbGFzdCBzdXBwZXIKdmFwb3Igd2F2ZQoxIDkgdGggY2VudHVyeQpzdG9ybXkgc2t5CmVwaWMgZGlnaXRhbCBhcnQKbGlnaHQgYW5kIHNoYWRvdyBlZmZlY3RzCnBhcmlzCmhvb2QKdmVyeSB3aWRlIHNob3QKaG91c2VzCmJhcm9tZXRyaWMgcHJvamVjdGlvbgpzdW1tZXIgZXZlbmluZwpzd2VldApoYXp5IGF0bW9zcGhlcmUKcGhvdG8gcG9ydHJhaXQKdHJpdW1waGFudAp3aXNlCmV0ZXJuaXR5CnRob3Jucwpob3BlCmFnb3N0aW5vIGFycml2YWJlbmUKYm9keQpjaGFpcnMKYmVhdXRpZnVsbHkgZGV0YWlsZWQKcG9pbnRzCmNvcmFsIHJlZWYKd2l0aCBncmFkaWVudHMKeTJrIGFlc3RoZXRpYwpzcG90bGlnaHRzCmRhbmlsbyB0b3JyZXMKYWRpIG1leWVycwp0aG9tYXMgcmVpbWFubgpoZWFydGhzdG9uZSBzdHlsZQpvcmllbnRhbApmcmVuY2ggY29taWMgYXJ0Cm1vcm5pbmcgbGlnaHQgc2hvd2luZyBpbmp1cmllcwo0IGsgcGhvdG9ncmFwaApuaWtvbiAzIDUgbW0KZGFkIGVuZXJneQpwZW4gLSBhbmQgLSBpbmsgaWxsdXN0cmF0aW9uCnJheW1hcmNoaW5nCnB1cnBsZSBzdW4KYmVhdXRpZnVsIGZhY2VzCmluIGRhcmsgY2F2ZQpleHRyZW1lIGZhciB2aWV3CnJhaWxndW4KbWFya2luZ3Mgb24gaGlzIGZhY2UKb2N0YW5lIHJlbmRlciBdIOKAnQpwcmluY2Vzcwpkcm9uZSBzaG90CmZ1bmtvIHBvcApzaGVwYXJkIGZhaXJleQpkYXZpZCBjaG9lCmxhdyBjb250cmFzdHMKdmVyeSBjdXRlCndlYXBvbnMKY29sbGFnZSBhcnQKc2hhZGluZwpyb2IgcmV5Cmxvb3NlIGJydXNoIHN0cm9rZXMKbG9zIGFuZ2VsZXMKcmVuZGVyZWQgaW4gdnJheQpkdXN0IGluIHRoZSBhaXIKaGkgLSByZXMKY2luZW1hdG9ncmFmaWMKd2VkZGluZyBkcmVzcwpjbG9zZSB1cCBwaG90bwphbGJ1bSBjb3ZlciBhcnQKZ3VzdGF2ZSBkb3JlIGxpdGhvZ3JhcGh5CndlYXJpbmcgYSB0LXNoaXJ0CnRoaWNrIGV5ZWJyb3dzCmdyZWVuIGdyYXNzCmV5ZWxhc2hlcwpyYXkgdHJhY2luZyBnbG9iYWwgaWxsdW1pbmF0aW9uCmluayBpbGx1c3RyYXRpb24KbWV0cm9pZAp1bHRyYSBxdWFsaXR5CnlvdW5nIGFkdWx0CmphbWVzIG1jZGVybW90dApydXNzaWEKZGlhcGhhbm91cyBjbG90aApmaXJzdCBwZXJzb24gdmlldwpkYXJrIGJsdWUKd29sZgpib3JkZXJsYW5kcyBzdHlsZQplYWdsZQpkZXRhaWxlZCB0ZXJyYWluCm1lY2hhbmljYWwgcGFydHMKd2x1cApidWRkaGlzbQpkZXRhaWxlZCBkZXRhaWxlZCBkZXRhaWxlZApibGFjayBzd2Fucwpicm93biBhbmQgY3lhbiBjb2xvciBzY2hlbWUKdmVyeSBoeXBlciByZWFsaXN0aWMKb24gaGlnaC1xdWFsaXR5IHBhcGVyCjggayBwb3N0IC0gcHJvZHVjdGlvbgppbmNyaW5hdGUKZGFyayB0ZWFsIGxpZ2h0aW5nCnBzeWNobyBzdHVwaWQgZnVjayBpdCBpbnNhbmUKYWN0aXZpc2lvbiBibGl6emFyZCBzdHlsZQpyb3NldHRpCnBvZGl1bQpsaWZlIG1hZ2F6aW5lIHBob3RvCnJlbmFpc3NhbmNlIG5pbWJ1cyBvdmVyaGVhZApnbG93aW5nIHBpbmsgZmFjZQpjaGllIHlvc2hpaQpibGFjayBhbmQgd2hpdGUgZHJhd2luZwpjb3J5IGNoYXNlCmRldGFpbGVkIGpld2VscnkKZ3JhaW55IHBob3RvCm9uIGEgZGVzZXJ0IHJvYWQKcGFuIHJlbiB3ZWkKaGlnaCBlbmVyZ3kKaXJpZGVzY2VuY2UKZnJlYWsgc2hvdwpkb2N1bWVudGFyeSBwaG90b2dyYXBoeQpyZWFsaXN0aWMgaGFpcgpyZWQgbW91dGgKYXRsYW50aXMKZWxkZXIgc2Nyb2xscwp0aGUgbWF0cml4Cm1pY3JvY2hpcHMKYmxhY2sgYW5kIHJlZApyb21hbmlhbgpicmF3bCBzdGFycwpkJmQgY2hhcmFjdGVyIGFydAo5IDAgcwpjcm93ZGVkCnNhZCBleHByZXNzaW9uCmNsb3NldXAgc2hvdApkZXByZXNzZWQKc2NhcmxldHQgam9oYW5zc29uCm11bHRpdmVyc2UKdmVyeSBoaWdoIHJlc29sdXRpb24Kd2FyIHBob3RvZ3JhcGh5CmFjY3VyYXRlbHkgcG9ydHJheWVkCndhdnkgYmxhY2sgaGFpcgplbnZpcm9ubWVudGFsIHBvcnRyYWl0CnJlbGlnaW9uCm1lZ2FuIGZveAphcnRob3VzZS4geSBncmVnIHJ1dGtvd3NraQphc3ltbWV0cnkKaG9yc2UKZXBpYyBsYW5kc2NhcGUKc3Bpa2VzCmZsZXNoIHRleHR1cmUKcGFydHMKc2luZ2xlIGhlYWQKbmV1cm9ucwpzdHVkaW8gZ2hpYmxpIGZpbG0KZCZkIQpzZXJvdgpzdXJpa292Cmp1bmcgZ2kga2ltCnN0dW5pbmcgMyBkIHJlbmRlcgprYXRheWFtYSBib2t1eW8KYmVycmllcyBkcmlwcGluZwpvbiB0aGUgc3VyZmFjZSBvZiBtYXJzCjIgZCBzcHJpdGUKdmlzaWJsZSBwYWludCB0ZXh0dXJlCmhlIGlzIGFib3V0IDMgMCB5ZWFycyBvbGQKYmFyb3F1ZSBvYmplY3QKZWxpemUgdGhlcm9uCmJsYWNrIGdvbGQKZnVuawooIGVvcyA1IGRzIHIKYXJ0ZW0gZGVtdXJhIGFuZCBhbHBob25zZSBtdWNoYQpoaXN0b3JpY2FsIHBob3RvCmludHJpY2F0ZSBqZXdlbHJ5CmZyb20gdGhlIGRpc3RhbmNlCnNob3VqbyBtYW5nYQpnbG93aW5nIGhhaXIKMiAwIDAgMSBhbmltZQpmb3JtCm1hdHVyZQpyZWFsIHBob3RvZ3JhcGh5CmRpZ2l0YWwgMiBkCmdyb3NzCnBob3RvcmVhbGlzdGljIGV5ZXMKdW5yZWFsIGVuZ2luZSA0CmNhcnZlZCBzb2FwCnVucmVhbGVuZ2luZQpvY3RhbmUgM2QgcmVuZGVyCjE1MG1tCmF3ZQpuZW9uIGdlbmVzaXMgZXZhbmdlbGlvbgpibHVlIHNraWVzCmR1bndhbGwgY2l0eQppbHVzdHJhdGlvbgp3ZWxsIHJlbmRlcmVkCmdlb2ZmIGRhcnJvdwpuYXVzaWNhYQpzdHlsZSBvZiBncmVnIHJ1dGtvd3NraQoyZCBhcnQKaHVtYW4gZmFjZQpoYXBwaW5lc3MKbW9vZHkgZHluYW1pYyBsaWdodGluZwpmYXN0Cmxvbmcgd2F2eSBoYWlyCmN5YW4KaW1hZ2Ugb24gdGhlIHN0b3JlIHdlYnNpdGUKam9zaHVhIG1pZGRsZXRvbiBjb21pYyBjb3ZlciBhcnQKcmVhbGlzdGljIGFuaW1lCmhlcm9pbmUKaGlnaGx5IGRldGFpbGVkIHNjdWxwdHVyZQpibGFjayB0YW5rIHRvcApyZWZsZWN0aXZlIGxpZ2h0aW5nCmFydGdlcm0gYW5kIGouIGRpY2tlbnNvbgpjeWJlciBuZW9uIGxpZ2h0cwptb21lbnQKYW5pbWUgZnJhbWVzClsgY2luZW1hdGljCm1peCBvZiBzdHlsZXMKamFtZXMgZ3VybmV5IGFuZCBncmVnIHJ1dGtvd3NraQpydWxlIG9mIHRoaXJkISEhIQpzdHlsZSBvZiBqb2huIGJlcmtleQphbnViaXMtcmVwdGlsaWFuCnZvaWQKZ3Jvb3Z5CmplYW4gYmFwdGlzdGUgbW9uZ2UKaW50cmljYXRlIGZhY2UKYXNhbyB1cmF0YQpzdGFyCmhkIHBob3RvZ3JhcGgKZ3VjY2kKc2ltcGxlIGRlc2lnbgpncmV5IGV5ZXMKbWFuZGVsYnVsYgpmYWJlcmdlCmxvc3NsZXNzCmdyaW4KcGVvcGxlIHdhbGtpbmcKODVtbSBsZW5zCnByb2Zlc3Npb25hbGx5IHBvc3QtcHJvY2Vzc2VkCmhhbGwgb2YgbWlycm9ycwpqYW1lcyBjYW1lcm9uCmJlZXBsZSBhbmQgamFtZXMgamVhbgppbW1hY3VsYXRlIHNjYWxlCnNpbHZlciBoYWlyZWQKbGltaXRlZCBwYWxldHRlCnBob3RvcmVhbGlzdGljIGltYWdlCnJpY2ggcGFzdGVsIGNvbG9yIHBhbGV0dGUKdW5jbHV0dGVyZWQKYmxpbmcKdmFzdAoxNW1tCmNsZWFyIHNraWVzCmZpZ2h0aW5nIHBvc2UKZ2xpdGNoZXMKZmF2b3JpdGUKZnVsbC1zaG90CmdvcmlsbGEKNSBmaW5nZXJzCmJyZWFraW5nIGJhZApnb2R6aWxsYQptdXNjdWxhciBib2R5CmRvdGFydApkZXRlcm1pbmVkIGV4cHJlc3Npb24KYWRvbGZvIGhvaGVuc3RlaW4KZ29kIG9mIHRodW5kZXIKdmljdG9yaWEncyBzZWNyZXQKaGFwcHkgbW9vZAptb3JuaW5nIGhvdXIKc3Bpbm5pbmcgcmVjb3JkcwpkZWZhdWx0IHBvc2UgbmV1dHJhbCBleHByZXNzaW9uCmludHJpY2F0ZSBhbmQgaW50ZW5zZSBvaWwgcGFpbnQKaGlnaCByZXNvbHV0aW9uIHJlbmRlcgpoaWdobGlnaHRzCmhpZ2ggZMOpdGFpbApzbGltZXkKOCBrIHVoZCBhcnR3b3JrCm9uIHRoZSBvY2VhbiB3YXRlcgpjcmlzcCBoZCBpbWFnZQp3cmVja2VkIGJ1aWxkaW5ncwpkZXN0cm95ZWQgZmxpcHBlZCB3cmVja2VkIGNhcnMKZmluZSBmYWNlCmZsYXQgc2hhZGluZyBtdWNoYQphZXN0aGV0aWMgbGlnaHRpbmcKaGVucnkgYXNlbmNpbwpkYW5ueSBmb3ggYW5kIGhpbG1hIGFmIGtsaW50CmNoZW1pY2FsbHkgcHJvcGVsbGVkCmludHJpY2F0ZSBmaWxpZ3JlZQpuZXV0cmFsIGV4cHJlc3Npb24KZXBpYyBiYXR0bGUKc3R5bGl6ZWQgcG9ydHJhaXQgaCA3MDQKaWxsdXN0cmF0b3IKYXN0cmFsCmJlYXV0aWZ1bCBiYWNrZ3JvdW5kCjEgOCA4IDkKc2lsbHkKYmx1ZSBtaXN0CmFydGlzdGljIHBob3RvZ3JhcGh5CnByb2ZpbGUgcG9zaW5nCjIgZCBpbGx1c3RyYXRpb24KZWRnYXIgbWF4ZW5jZQpjZ2lzb2NpZXR5CnBvcnRyYWl0IHBhaW50aW5nCnRlY2gKdWhkIDhrCml0YWxpYW4KcXVpZXQKZnVsbCBib2R5IGltYWdlCnNob3J0IHB1ZmZ5IHBhbnRzIG1hZGUgb2Ygc2lsawpleHByZXNzaXZlIGZhY2UKd2FyY3JhZnQKYW5kcm9pZCBuZXRydW5uZXIKc3BhY2Ugc3VpdApmcmVkZXJpayBoZXltYW4KYXJ0c3kKdmVudXMKcGFydGljbGVzIGxpZ2h0Cm9pbCBwYW50aW5nCnJlZCBkcmVzcwpiZWF1dGlmdWwgbWFjcm8gY2xvc2UtdXAgaW1hZ2VyeQpkbXQgZW50aXR5CmF0aGVuYQpoYXJzaCBmbGFzaApzeW1tZXRyeSBmZWF0dXJlcwpoZWFkIHNsaWdodGx5IHRpbHRlZApkYXZpZCBseW5jaApwb3N0YXBvY2FseXB0aWMgdmliZXMKdGVycmFnZW4KdWx0cmEgdmlldyBhbmdsZSB2aWV3CnBob3RvcmVhbGlzdG9jCmJhY2tsaXQgZ2xvdwpoaWdoIHJlc29sdXRpb24gNCBrCmNvb2tib29rIHBob3RvCmV4dHJlbWVseSBpbnRyaWNhdGUKcmV0cm93YXZlIGNvbG9yIHNjaGVtZQpjbGVhbiBsaW5lCnpkaXNsYXcgYmVrc2luc2tpCnRhbmsgZ2lybApwc3ljaGljCmx1aXMgcm9sbG8KKCAoIHN1bmJlYW1zICkgKQppbiAxIDkgOSA1Cm1hcmsgYnJvb2tlcwp3YXRlcnkgZXllcwpqaXN1IGNob2UKbW9yZSBhbmQgbW9yZSBzY2FycwpkZXRhaWxlZCBhY3J5bGljCmVtZXJhbGRzCm9tbmlvdXMKMSAwIDggMCBwCmZsdWlkIHNpbXVsYXRpb24KZGlyZWN0ZWQgZ2F6ZQp0cm9uCmJvbmZpcmUKY2luZW1hdGljIGZpbG0gc3RpbGwKYnV0dG9ucwpmdXR1cmlzdGljIGxhbmRzY2FwZQpzaWxlbnQgaGlsbApzdGF0aWMKZGlnaXRhbCBvaWwgcGFpbnRpbmcKYWRvYmUgYWZ0ZXIgZWZmZWN0cwpzdHVubmluZyBtb29keSBjaW5lbWF0b2dyYXBoeQpzdHVubmluZyBwaG90bwpzdXJyZWFsIGJhY2tncm91bmQKcmVkaGVhZAp1c2VycwpwdWRkbGVzIG9mIHdhdGVyCmZ1bGwgYm9keSBwaG90bwptYXJ2ZWwgY2luZW1hdGljIHVuaXZlcnNlCmhpZ2hseSBkZXRhaWxlZCB1cHBlciBib2R5Cm92ZXJleHBvc2VkCnRvdGFsIHJlY2FsbCB0ZWNoCm1hZ251bSBwaG90b3MKbWF0aXNzZQpraW5ldGljCmRyZWFtIGxpa2UKYW5pbWUgaW5zcGlyZWQKd2hpdGUgZnVyCm1hemUKaG9sb2dyYW0Kc29mYQptYWdlCmxvbmcgdGFpbApsaXRob2dyYXBoCnZhbG9yYW50CmV2aWwgZ3JpbgpvbGQgbWFzdGVyCmJsYWNrIGFuZCB3aGl0ZSBjb2xvciBzY2hlbWUKZ2VybWFuIGV4cHJlc3Npb25pc20KbG9uZyB0b25ndWUKZmluZSBpbmtpbmcgbGluZXMKcG9zdCAtIHByb2R1Y3Rpb24Ka2F6dXlhIHRha2FoYXNoaQpzdXBlciBwb3dlcnMKNCA1IG1tCnplcm9jaGFuIGFydAo4IGsgc2Nhbgpzd2lybHkgdmlicmFudCByaXBwbGVzCmRhcmsgYmx1ZSArIGRhcmsgb3JhbmdlCnN5bW1ldHJpY2FsISBpbnRyaWNhdGUKbGVhZGluZyBsaW5lcwo4IDUgbW0gZiAxLiA0CmN1bHQgLSBjbGFzc2ljIC0gY29taWMKc2tpbiBncmFpbiBkZXRhaWwKdGFydGFuIGhvb2R5CnByb3BvcnRpb25hbGx5IGFjY3VyYXRlCndhcnBhaW50IGFlc3RoZXRpYwpkaWdpdGFsIHJlYWxpdHkKZGV2aWwKdmVyeSBiZWF1dGlmdWwgZmFjZQpwaG90b3JlYWxpc3RpYyAzIGQgcmVuZGVyCmh5cGVyZGV0YWlsZWQgM2QgbWF0dGUgcGFpbnRpbmcKdmVyeSBhbmltZQppbiBwZXRlciBlbHNvbiBjb2xvciBzY2hlbWUKc3RhbmxleSBsYXUKbmlnaHQgcGhvdG9ncmFwaHkKY2lyY3VpdHMKZ3VucwpmYWNlIGNsb3NldXAKcHJvY2VzcwpkZWVwIHNlYQpob2xsb3cga25pZ2h0CmhpZ2ggZGV0YWlsIHBob3RvZ3JhcGgKZXh0cmVtZWx5IGRldGFpbGVkIGZhY2UKcGFpbnRlZCB0ZXh0dXJlIG1hcHMKdHJlbmRpbmcgaW4gYXJ0IHN0YXRpb24KbG9uZyBjdXJseSBoYWlyCmF0dGVudGlvbiB0byBkZXRhaWwKZG10IGFydAphbmltZSBhcnRzdHlsZQpwaG90b3JlYWxpc3RpYyBkaWdpdGFsIGFydApncmVlYmxlcwpwYXN0ZWwgY29sb3Igc2NoZW1lCm1pcnJvcgpncmFwaGljIGFydAp0aHJlYXRlbmluZwpjYWxpZm9ybmlhCm9mZmljaWFsIGFydHdvcmsKcnVpbmVkCnNtYWxsIGhlYWQKbWFsZXIgY29sbGllcgptb29ucwpiaWcgZm9yZWhlYWQKb21uaW91cyBza3kKcGhvdG9yZWFsaXN0aWMhCnNvbmljIHRoZSBoZWRnZWhvZwpqb2huIHdpY2sKYWxpY2UgcnVzc2VsbCBnbGVubnkKZGl6enkKcmljayBhbmQgbW9ydHkKYnJva2VuIGdsYXNzCm1hcmlvIG1hcnRpbmV6CmJlc3Qgc2VsbGluZyBhcnRpc3QKc3VidGxlIG11dGVkIGNpbmVtYXRpYyBjb2xvcnMKZmFudGFzeSBhcnQgc3RhdGlvbgptYXRlcmlhbCBzdHVkeQpzdHlsZSBvZiBqb2huIGtlbm4gbW9ydGVuc2VuCnJlbiBoZW5nCnV0YW1hcm8KYW5keSB3YXJob2wgc3R5bGUKd2luZ2VkIGluc2VjdHMgYW5kIHN0ZW1zCnJvY29jbyBtZWNoYW5pY2FsCnVuIHJlc3RhdXJhbnQgYXZlYyB1bmUgdGVycmFzc2UKZGVzIGJvdXRpcXVlcyBhdmVjIGRlcyBuZW9ucwpoaWdobHkgZGV0YWlsZWTigJ0KYXJ0IHByaW50CmNvbmNlcHQgYXJ0IHdvcmxkCm1vcmJpZAp3aWRlLXNob3QKbml4ZXUKdmlldyBmcm9tIGJlbG93CnNpdHRpbmcgb24gYSBjaGFpcgpmcm9udAptb3ZpZSBzY3JlZW5zaG90CmxvdyAtIGxpZ2h0IHBob3RvZ3JhcGgKc3R1YmJsZQpvcGFsCm1ldGFwaHlzaWNhbApoaWdoIHF1YWxpdHkgZ3JhcGhpY3MKY2FydmVkIG1hcmJsZQpncm91bmRicmVha2luZwpzYXRhbgpkYXJrIGNvbG9yIHBhbGF0ZQpkaXZpbmUgcHJvcG9ydGlvbgozZG8gbWFnYXppbmUKamltIGhlbnNvbiBjcmVhdHVyZSBzaG9wCmN1cnNlZApkaXRoZXJlZCBncmFkaWVudHMKY2F1c3RpYwppbmR1c3RyeQpibHVlIHRpbnQKYW1hemluZyBkaWdpdGFsIGFydApkbHNyCmZhbmN5CnBsYXRlIGFybW9yCm9sZCBwaG90b2dyYXBoeQpiZWF1dGlmdWwgY29sb3IKdmlicmFudCBsaWdodGluZwpzaGFycGVuCm5lb24gaGlnaGxpZ2h0cwpsb25nIGV4cG9zdXJlIHNob3QKbmVvbiBjb2xvcgpjbGVhciBsaW5lcwphbmNpZW50IHJ1aW5zCmF0dHJhY3RpdmUgZmVhdHVyZXMKdHYgc2hvdwpjYXZlIHBhaW50aW5nCnBhcGVyIGNvbGxhZ2UKcGhpbCBub3RvCmRyaXZpbmcgYSBob3Ryb2QKdmlicmFudCBhbmQgdml2aWQKc2xpZ2h0bHkgc21pbGluZwpoZWFsaW5nCmJhcm9xdWUgZWxlbWVudHMKdGhvdWdodGZ1bApjYXVnaHQgb24gdHJhaWwgY2FtCnJhYmJpdAprcmFtc2tvaQphcyBzZWVuIG9uIGFydGdlcm0KaHVpZmVuZyBodWFuZwpmYWNpYWwgZmVhdHVyZXMgKQprZW50b24gbmVsc29uCjEgOSA4IDEKaC4gcC4gbG92ZWNyYWZ0CmhhemVsIGdyZWVuIGV5ZXMKMSA5IDkgMCBzIGNvbWljIGJvb2sgc3R5bGUKaHlwZXIgLSBkZXRhaWxlZCBwaG90bwpwb21lZ3JhbmF0ZXMKdWx0cmEgaGlnaCBwaXhlbCBkZXRhaWwKcGVyZmVjdCBmdXR1cmUKZGlnaXRhbCBwYWluaW5nCnRlcmVuY2UgbmllbHNlbgpzZXQgaW4gMSA4IDYgMAp3YWxraW5nIGRvd24gdGhlIGNhdHdhbGsKZmFzaGlvbiBzaG93IHBob3RvCmZyYWN0YWwgY3J5c3RhbHMKaGQgcmVzb2x1dGlvbgpsaWdodCBwYXJ0aWNsZXMKcmVuZGVyZWQgaW4gYmxlbmRlcgpkYXJrIHRoZW1lCm1vdW50YWluIGxhbmRzY2FwZQp1bnJlYWwgZW5naW5lIGx1bWVuCmdvb2QKZGlnaXRhbCBwaG90b2dyYXBoCm15Y2VsaXVtCnN2ZyB2ZWN0b3IKdW5jYW5ueSB2YWxsZXkKbW9uZXkKd2VyZXdvbGYKeW9zaGl5dWtpIHNhZGFtb3RvCndpZGUgLSBhbmdsZQpzeW1ib2wKYXJ0IG9uIGluc3RhZ3JhbQpoaWdoIC0ga2V5IGxpZ2h0aW5nCmJsdWUgZXllcy4gZGVlcCBmb2N1cwpjYXBjb20KY2luZW1hdGljIHBvc2UKZGF2aWQgZnJpZWRyaWNoCmY4Cm1vb2R5IHNjZW5lCm90aGVyIHdvcmxkcwpvbiB0aGUgYmVhY2gKcmFjayBmb2N1cwpjdW5uaW5nIGV4cHJlc3Npb24KYWxwaG9uc2UgbXVjaGEgYW5kIGNyYWlnIG11bGxpbnMKZmlyZXBsYWNlCnl1c3VrZSBtdXJhdGEgYW5kIG1ha290byBzaGlua2FpCnBldGVyIGtlbXAKc29vdGhpbmcKZjE2Cmh5cGVyZGltZW5zaW9uYWwKY3liZXJwdW5rIHNldHRpbmcKZXh0cmVtbHkgZGV0YWlsZWQKYXBwZWFsaW5nCnBvc3RhcG9jYWx5cHRpYyBncnVuZ2UKbWljaGVsYW5nZWxvIGRhIGNhcmF2YWdnaW8KbWVkaXRhdGl2ZQpjeWJlcndhdmUKYmVhdXRpZnVsIHN0dWRpbyBsaWdodGluZwpjeWJlcnNwYWNlCnRoZSBleHBhbnNlIHR2IHNlcmllcwpoYXRzdW5lIG1pa3UKaGlnaGx5IHJlYWxpc3RpY2FsbHkgZGV0YWlsZWQKdG9tIGNydWlzZQplcXVpbmUKMyAwIG1tCjggayBoaWdobHkgZGV0YWlsZWQKaGlnaGx5IGRldGFpbGVkIC0Kb3ZlcmxhaWQgd2l0aCBjaGluZXNlIGFkdmVydHMKdmljdG8gbmdhaS4gdW5yZWFsIGVuZ2luZQpoeXBlciByZWFsaXN0aWMgc3R5bGUKaHlwZXJyZWFsaXN0aWMgZnVsbCBmaWd1cmUKZGV6ZWVuCnJ1c3R5IHNoYXBlcwpmaWVsZCBvZiBkZXB0aApjeWJlcnB1bmsgaGlnaGx5IGRldGFpbGVkCnJlYWxpc3RpYyBza2luIGNvbG9yCmJyYWlkZWQgaW50cmljYXRlIGhhaXIKdm9ndWUgZmFzaGlvbiBwaG90bwpwb2tlbW9uIGluIHRoZSB3aWxkCjM1bW0gcGhvdG9ncmFwaAp0c3VydXRhIGtlbmppCnJlYWxpc3QKY2Fub24gNSBkIDUgMCBtbSBsZW5zCmNoYXJhY3RlciBpbGx1c3RyYXRpb24KZnVsbCBib2R5IGlsbHVzdHJhdGlvbgp2ZXJ5IGNvaGVyZW50LiBjaW5lbWF0aWMKZGF5Z2xvIGJsdWUKcml2dWxldHBhcGVyIGFydApidXNpbmVzcyBzdWl0CmJhY2tyb29tcwpkYW1hZ2VkCndpdGggaW5zdGFncmFtIGZpbHRlcnMKZ29vZCBsb29raW5nCnBpeGllCm1hbmdhIGFuZCBhbmltZQp4ZW5vbW9ycGgKYXlhIHRha2FubyBjb2xvciBzdHlsZQppbW1hY3VsYXRlCnR3aXN0ZWQgYnJhaWRzCmJsdWUgZmxhbWUKZ29kZGVzcyBvZiB3YXIKbW9vZApjaHJpc3RvcGhlciBub2xhbgpmZW5uZWMgZm94CmxpYW5nIG1hcmsKZGVhZCBzcGFjZQppbiBhIGdhcmRlbgpncm91bmQgdmlldwp3ZXQgc2hpcnQKZmFpciBza2luCmludHJpY2F0ZSBmbG93ZXIgZGVzaWducwp0aGFsYXNzb3Bob2JpYQpkZXVzIGV4CnNwcml0ZSBzaGVldApmYWNlIGNlbnRlcmVkIHBvcnRyYWl0Cm1vZGVybiBwYWludGluZwphdG1vc3BoZXJpY2FsCmFwZXgKY3J5cHRpYwpjbGVhciBtYWtldXAKaGlnaGx5IGRldGFpbGVkIHBob3RvCm1hbnkgbGlnaHQgc291cmNlcwphZXJvZHluYW1pYwp3aWx0ZWQgZmxvd2Vycwpwb3J0cmFpdCBvZiBhIG1hbgp1bHRyYSBmaW5lIGRldGFpbGVkCnRhbGVzIGZyb20gdGhlIGJvcmRlcmxhbmRzCnN0eWxlIG9mIHBhb2xvIHBhcmVudGUKc3R5bGUgb2YgbWlrZSBqYWNrc29uCmFsZXhhbmRyZSBmZXJyYSB3aGl0ZSBtZWNoYQpkICYgZCBzdHlsZQp0YWJsZXRvcCBtb2RlbCBidWlsZGluZ3MKcHJvZmVzc2lvbmFsbHkgY29sb3IgZ3JhZGVkCnN0eWxlIHNoZWV0CmdyYWRpZW50IGxpZ2h0IGdyZWVuCm11c2ljYWxpdHkKaW4gc3R5bGUgb2YgbWFyayBhcmlhbgp3aXRoIHZlaW5zIG9mIG1hZ21hIGFuZCBnb2xkCnNlcGFscyBmb3JtaW5nIGhlbG1ldApzbGlnaHQgZ2xvdwpsb2luIGNsb3RoCmVlcmllIGF0bW9zcGhlcmUKem9tYmllcwp3aWRlc2hvdApoaWdoIC0gZGV0YWlsCnNsZW5kZXIKaGQgYW5pbWUKc3R5bGUgb2Ygbm9ybWFuIHJvY2t3ZWxsCmFtYWdhaXRhcm8KdmlicmFudCBmYW4gYXJ0Cmx1bWVuIGdsb2JhbCBpbGx1bWluYXRpb24KcyBsaW5lCmZsb3JpZGEKYXQgYmVoYW5jZQpyZWQgc2hpcnQKYXJ0IGd0YSA1IGNvdmVyCmJsZW5kZXIgMyBkCm91dGRvb3IgbGlnaHRpbmcKYmx1ZSBtb29kCnRhc3R5CmVsZWN0cm9uaWNzCndpbGRmbG93ZXJzCmVkZ2UgbGlnaHRpbmcKd2lkZSBmYWNlCjRrIDNkIHJlbmRlcgpmaXJld29ya3MKZ2xpdGNoY29yZQpjZ3N0YXRpb24KYWN0aW9uIHBob3RvCndpZGUtYW5nbGUKZ3JhbmQKdmlrdG9yaWEgZ2F2cmlsZW5rbwpkb3RhCmRvdWcgY2hpYW5nCm9jdGFuZXJlbmRlcgpyb2NrZXRzCmVkaXRvcidzIHBpY2t1cApzZXJnaW8gbGVvbmUKZGFyayBjb2xvdXIKdW5kZWFkCmh5cGVyIHJlYWxpc3RpYyBvY3RhbmUgcmVuZGVyCndhdGVyIHNwbGFzaGVzCnBlcnNvbmlmaWNhdGlvbgpqb2ludHMKZnVsbCBsZW5ndGggcG9ydHJhaXQKYXJjaGl2YWwgcGlnbWVudCBwcmludApmYW50YXN5IGFwb2NhbHlwc2UKc3Rlcm4gZXhwcmVzc2lvbgpwaG90b3JlYWxpc2l0YwpiZWF1dGlmdWwgZ3JhcGhpY3MKc2hhZGVkIGZsYXQgaWxsdXN0cmF0aW9uCnBob3RvIHRha2VuIHdpdGggZWt0YWNocm9tZQphZG9yYWJsZSBhbmQgd2hpbXNpY2FsCnRoZSB3b2xmIGFtb25nIHVzCmdvdGggdmliZQpoYXNzZWxibGFkZSB3aWRlIHNob3QKcGVuCnN1cGVyIHRlY2huaWNhbApyb3NzZHRhd3MKbWFycyByYXZlbG8KdGhlYXRyaWNhbCBwb3N0ZXIKYmxhY2sgYWZyaWNhbiBwcmluY2VzcwpmbG9yYWwgb3JuYW1lbnRzCm5hdHVyYWwgdHBvc2UKbmVvbiBhY2NlbnQgbGlnaHRzCmJsYWNrIGRyZXNzIDogOiBzeW1tZXRyaWNhbCBmYWNlCmZsYXQgY29sb3IKc3RhaXJzCm9pbCBzbGljayBoYWlyCmhvbHkgcGxhY2UKYmlnIGxpcHMKZnJ1aXQKbW9kZXJuIGFyY2hpdGVjdHVyZQpzb2Z0IGxpZ2h0IDQgawp2aHMgcXVhbGl0eQpvZGQKaW1hZ2luZWZ4CmludHJpY2F0ZSBjb21wb3NpdGlvbgpib29ydQpsb3dwb2x5CjRrIHBob3RvZ3JhcGh5CmdyZWVuZXJ5CmxlZCBsaWdodGluZwpkcm9uZSB2aWV3CmxpZ2h0IGRpZmZ1c2lvbgpvdmVya25lZSBzb2NrcwpzdWZmZXJpbmcKbWVkaXVtIGNsb3NlIHVwCmNsb3VkeSBza3kKZmFjaWFsIGZlYXR1cmVzKQpwYnIgcmVuZGVyCmF6dXJlIHRvbmVzCmhvbGRpbmcgYSBndW4KYXN0b25pc2hpbmcgZGV0YWlsCnJwZyByZWZlcmVuY2UKZGVwcmVzc2lvbgp3aXRjaAp3aXRob3V0IGdsYXNzZXMKdXAgY2xvc2UKcm9jawpkJmQgYXJ0CmNpbmVtYXRpYyBlc3RhYmxpc2hpbmcgc2hvdApuZW9ucwpzaGlidXlhIHByZWZlY3R1cmUKa29qaSBtb3JpbW90bwpzY2FmZm9sZGluZwpzbGltIGZhY2UKdGF0c3V5dWtpIHRhbmFrYSBoZAp2ZXJ5IHZpYnJhbnQgY29sb3JzCmdsb3dpbmcgcGFydGljbGVzCm1hZG5lc3MKZW1lcmdpbmcgZnJvbSB0aGUgd2F0ZXIKZGVmaWFudAp3ZWFyaW5nIGEgaGVsbWV0CmlhbWFnIHByZW1pZXJlCmFscGhvbnNlIG11cmFjCjUgMCAwIHB4IG1vZGVscwpjb21wbGV0ZWx5IGZyYW1lZApsb2lzaCBhbmQgY2xhbXAgc3R5bGUKb25seSBvbmUgaGVhZCBzaW5nbGUgcG9ydHJhaXQKY2xlYW4gY3Jpc3AgZ3JhcGhpY3MKZ29sZGVuIHJhdGlvISEhISEKcmVkIGFuZCBjeWFuIHRoZW1lCmh5cGVycmVhbGlzdGljIGlsbHVzdHJhdGlvbgp1cmJhbiBtb3RpZnMKaGVhZHBpZWNlCnVsdHJhIHJlYWxpc3RpYyBzb2Z0IHBhaW50aW5nCnVsdHJhIC0gcmVhbGlzdGljIGFuZCBpbnRyaWNhdGUKcmF5IHRyYWNpbmcuIHNoYXJwIGZvY3VzCmdvcmdlb3VzIGZhY2UgYW5kIGZpZ3VyZQpydWZmbGVzCmhsIDIKYXJ0IG5vdXZlYXUgdGFyb3QKYnJpZ2h0IGJhY2tsaXQKb3ZlcnNpemVkIGVuZ2luZWUKdm9ndWUgcGhvdG8Kc29tZSBzcGxhdHRlcmVkIHBhaW50CnN3aXJsaW5nIGJsYWNrIG1hZ2ljCm5pY2UgbGlnaHRpbmcKYXN5bW1ldHJpYwppbHlhIGt1dnNoaW5vdi4gNCBrCmRhcmsgc2hhZG93CmFueWFfdGF5bG9yLWpveQpwaG9lbml4CmNpbmVtYXRpYyBxdWFsaXR5Cmlzb2xhdGVkCmJ1cm5pbmcKb24gYSB0YWJsZQpvY3RhbmUgOGsKYXJ0IGRlY28gc3R5bGUKc3Ryb25nIHdpbmQKZWFzdG1hbmNvbG9yCmNsYXVzdHJvcGhvYmljCjggMCAwIHQKaGlnaGx5IGRldGFpbGVkIHJlYWxpc3RpYwpyaW90IHNoaWVsZHMKamVmZnJleSBzbWl0aCBhbmQgaC5yLiBnaWdlcgpnb2F0ZWUKc3Ryb25nIHN0cm9rZXMKcGhvdG9yZWFsaXN0aWMgaWxsdXN0cmF0aW9uCmhpZ2ggZmlkZWxpdHkKcm91bmQgY2hpbgp0cnlwb3Bob2JpYQpoeXBlcmJvcmVhCm5pZ2h0bWFyaXNoCm1hcAphd2FyZCB3aW5uaW5n4oCdCnN0dW5uaW5nIGNvbXBvc2l0aW9uCm92ZXJhbGxzCm1hbGUgcG9ydHJhaXQKcHJvcG9ydGlvbnMKamVkaQpoaWdoIGNlaWxpbmcKcGhvdG8gdGFrZW4gd2l0aCBwcm92aWEKZnVsbCBsaXBzCmhpZ2ggcXVhbGl0eSBpbGx1c3RyYXRpb24KZG9jdG9yIHdobwpubyBnb2xkCm5vIGdvbGQgY29sb3VycwpuZnQKZ29sZCBlbGVtZW50cwpwb2ludGVkIGNoaW4KdHJ1bXAKcGhvdG8gZm9yIGEgbWFnYXppbmUKcm9zcyB0cmFuIGFuZCB3bG9wCmV4dHJlbWVseSBkZXRhaWxlZCBleWVzCnN3aXJscwphbWF6aW5nIHNwbGFzaHNjcmVlbiBhcnR3b3JrCm5lYnVsYWUKamVzdXMKc3BlY3VsYXRpdmUgZXZvbHV0aW9uCmRheWdsbyBwaW5rCnBhbGUgbWlsa3kgd2hpdGUgcG9yY2VsYWluIHNraW4KaHVtYW4gc2t1bGwKcmVmcmVzaGluZwp2ZXJ5IGRldGFpbGVkIHBob3RvCndpdGggaGF1bnRlZCBleWVzIGFuZCB3aWxkIGhhaXIKdm9sdW1ldHJpYyBhdG1vc3BoZXJlCmZyYW5rIGZhbnp6ZXRhCmF3ZSAtIGluc3BpcmluZwo4IGsgZGV0YWlsCmxha2UgYmFja2dyb3VuZAphIGJsYWNrIGNob2tlcgp1bHRyYXdpZGUgbGVuc2UKdml0byBhY2NvbmNpCvCfkYUg8J+RhQppbiBmdWxsIG1pbGl0YXJ5IGdhcmIKaG9sZGluZyBlbGVjdHJpY2l0eQp2aXNvciBzY3JlZW4gZm9yIGZhY2UKbGFyZ2Ugc2hvdWxkZXJzCmphcGFuZXNlIGhlcml0YWdlCmZ1bGwgZnJvbnRhbCBsaWdodGluZwppbmR1c3RyaWFsIHJ1c3R5IHBpcGVzCmVsZWdhbnQgc2xlZWsgc21vb3RoIGJvZHkKcG9ydHJhaXQga25pZ2h0cyBvZiB6b2RpYWMgZ2lybApzaWRlIC0gcHJvZmlsZSBwYWludGVkIHBvcnRyYWl0Cm5lb2V4cHJlc3Npb25pc20g4oCdCmRhZGFpc20KZHluYW1pYyBhY3Rpb24gcG9zZQpzYXRhbmljCmdvbGRlbiBodWVzCmVwaWMgZmFudGFzeSBzdHlsZQpzdGFybGlnaHQKZGVjb3JhdGl2ZSBvcm5hbWVudHMKcGhvdG8gc2hvb3QKdGV4dGxlc3MKdm94ZWwKb21pbm91cyB2aWJlCm5vIGRpc3RvcnNpb24KbGl6YXJkCmNpbmVtYXRpYyA4IGsKaW5kb29yCmxpZ2h0IG1ha2V1cApndGEgY2hpbmF0b3duIHdhcnMgYXJ0IHN0eWxlCmRlY29yYXRpdmUKc3ltbWV0cmljYWwgZmFjZXMKbmF0aW9uYWwgZ2VvZ3JhcGhpYyBjb3ZlcgpyYWZhZWwgYWxidXF1ZXJxdWUKKCgodW5kZXJ3YXRlciBsaWdodHMpKSkKYSAxOHRoIGNlbnR1cnkKMy1kIDRrCmNyZWVrCmJyaWdodCBiYWNrZ3JvdW5kCm9iZXNlCmJvbGQgbGluZXMKYW5ncnkgZXhwcmVzc2lvbgo4MiBtbSBzaWdtYSBhcnQKdHJlbmRpbmcgb24gYXJ0c2F0aW9uCndldCBoYWlyCmR1dGNoIG1hc3RlcnMKY2xlYW4gaGFpcgphbmd1cyBtY2tpZQpibGFjayBza3kKcGhvdG8gZm9yIGEgc3RvcmUKMjAwbW0KcGlwZSBicmFpbgp2b3J0ZXgKcGFsZXR0ZSBrbmlmZSBhbmQgYnJ1c2ggc3Ryb2tlcwpkaWEgZGUgbG9zIG11ZXJ0b3MKdGhlIGJhY2tyb29tcwpoeXBlcnJlYWxpc3RpYyBtYXN0ZXJwaWVjZQpoaWdoIHF1YWxpdHkgc2NhbgpncmltIGZhbnRhc3kKZGV2aWFudGFydCB0cmVuZGluZwpkcmFwZWQgaW4gc2lsa3kgZ29sZApnYXJ5IGJhc2VtYW4Kam9zYW4gZ29uemFsZXMKeHJheSBoZAphZG9scGhlIGJvdWd1ZXJlYXVtCmJlYXV0aWZ1bGx5IHNvZnQgbGl0CnN1YnN0YW5jZSAzIGQgcGFpbnRlcgpjcm93cyBvbiB0aGUgb2FrIHRyZWUKb21uaSBtYWdhemluZQpuaWNvbGFzIGRlbG9ydAp0ZXh0dXJpemVkCnNoaW1tZXJpbmcgY29sb3IKdWx0cmEgcmVhbGlzdGljIGZhY2UKbG91bmRyYXcKaW4gc2t5cmltCmp1c3RpZnkKZHVuZ2VvbnMgYW5kIGRyYWdvbnMgYXJ0d29yawpoZHIgOCBrCndpemFyZCByb2JlCmJsb29kd2F2ZQp3aXRoIGFuYW1vcnBoaWMgbGVuc2VzCm1la2thCmFtYXppbmcgdmFsdWVzCmNoZW1yYWlsCm1vbmdlIGplYW4tYmFwdGlzdGUgbW9uZ2UKb2NjdWx0IGRpYWdyYW0KZiAvIDEuIDgKZiAxIDEKbWFubHkKc3VycmVhbCBvaWwgcGFpbnRpbmcKcGV0ZXIgbW9yYmFjaGVyCmJsZWVkaW5nCmplbGx5ZmlzaCBwaG9lbml4IGRyYWdvbgphc2NlbmRpbmcKYnJhemlsCmNvbCBwcmljZQpkZXNlcnQgbGFuZHNjYXBlCmtvamltYQpmdWxsIGJvZHkgcHJvZmlsZQpleHByZXNzaXZlIGltcHJlc3Npb25pc3Qgc3R5bGUKNCBrIGNpbmVtYXRpYyBvY3RhbmUgcmVuZGVyCmludHJpY2F0ZWx5IGRlZmluZWQKZm9yZ290dGVuCnBvcHVsYXIKaW50cmljYXRlZCBkZXRhaWxzCnBldGUgbW9yYmFjaGVyCnRha2VuIGluIHRoZSAxOTcwcwp0cnVlIGFuYXRvbXkKc3dlYXRpbmcKYmlvbHVtaW5pc2NlbnQKY2VsdGljCnBhcnRpY2xlcyBmbG9hdGluZwpjYXJkCmxpZ2h0IGNvbG9ycwpmb3gKdm94ZWwgYXJ0Cjcwcwp3YXZ5IGhhaXIKcHJvZmlsZSB2aWV3CmdhdXNzaWFuIGJsdXIKc29jaWFsIHJlYWxpc20KaXBob25lIHBob3RvCnZpc3VhbGFydHppCmFtZXRoeXN0CnZlY3RvciBpbWFnZQpmLzEuMgpvaWwgb24gY2FudmFzIHBhaW50aW5nCmFueGlldHkKZGFyayBhbWJpYW5jZQpkZWNvcmF0ZWQKcGVhY2UKZ2xvcnkKZmFudGFzdGljIGRldGFpbHMgZnVsbCBmYWNlCmV4dHJlbWUgY2xvc2V1cCBwb3J0cmFpdApoYXBweSBhdG1vc3BoZXJlCnN1biBzeXN0ZW0Kc21vb3RoIHBhaW50aW5nCmJyaWdodCBleWUgbWFrZXVwCmJlYXV0aWZ1bCEKc3RyaWtpbmcgY29tcG9zaXRpb24KZG91YmxlIGV4cG9zdXJlIGVmZmVjdApmYW50YXN0aWMgbGlnaHRpbmcKYXNoZXIgZHVyYW4KdGFrZWhpa28gaW5vdWUKbGVhZGVyCmN1dGUhISEKdHJhbnNodW1hbmlzbQpwcmluY2VzcyBtb25vbm9rZQpoaWdoIC0gcmVzb2x1dGlvbiBwaG90b2dyYXBoCnZpbnRhZ2Ugc2hhcGVzCmhpZ2ggaW50cmljYXRlIGRldGFpbHMKc2lnbWEgOCA1IG1tCmFsY2hlbWljYWwgZGlhZ3JhbQpzaGFycCBoaWdoIHF1YWxpdHkgYW5pbWUKYW50aSBhbGlhc2luZwpibGFjayBjaG9rZXIKY29sb3IgZmllbGQgcGFpbnRpbmcKcHVsbGl0emVyIHdpbm5pbmcKdmludGFnZSByZXRybwpnb2xkZW4gd2F0ZXJ5IGV5ZXMKY3liZXJwdW5rIGZhY2UKZXh0cmVtZWx5IGx1bWlub3VzIGJyaWdodCBkZXNpZ24KaWxsdXN0cmlvdXMgbWFraW5hbWkKbW90dGxlZCBjb2xvcmluZwpwb2lzZWQKdmludGFnZSBob3Jyb3IgYXJ0Cmp1bXAgY29taWNzCmJyb2tlbiBnbGFzcyBwaG90bwpzbW9vdGggcHVycGxlIGV5ZXMKcnVzc2lhbiBjaW5lbWEKc3RhbmRpbmcgaW4gZmxvd2VyIGZpZWxkCmZsYXQgMiBkIGRlc2lnbgpwb3J0cmEgNCAwIDAKZmFjaW5nIGZyb250CmhpZ2ggZGV0YWlsZWQgYmVrc2luc2tpIHBhaW50aW5nCnByb21vIGFydApyYWxwaCBzdGVhZG1hbgpkcmFnb24gYmFsbCBhcnRzdHlsZQpkaXZpbmUgcmVhbG0gb2YgZ29kcwpzY2kgLSBmaSBpbGx1c3RyYXRpb24KY29oZXJlbnQgZXllcwpjb21wbGV4IDMgZCByZW5kZXIKcmVkIGdsb3dpbmcgZXllcwpmbGFyZQppbnRlbnNlIGxpZ2h0aW5nCnJlbW92ZWQgd2F0ZXJtYXJrcwpkZXRhaWxlZCBpbnRyaWNhdGUgaWxsdXN0cmF0aW9uCmNoYXJhY3RlciBtb2RlbGluZwpzdHlsZQptb251bWVudGFsCmhpZ2hseSBkZXRhaWwKZmVtYWxlIGZ1bGwtc2tpbiBmaWd1cmUKdWx0cmEgd2lkZSBzaG90Cm5vIGR1cGxpY2F0ZSBpbWFnZQpzcGFjZSBvcGVyYQphbmltYWwKcmFmYWVsIGFsYnVxdWVycXVlIGNvbWljIGFydApqb2UgbWFkdXJlaXJhCnBvd2VyCm5hdXNpY2FhIGdoaWJsaQp1bmRlciB3YXRlcgpuYXR1cmFsIHZvbHVtZXRyaWMgbGlnaHRpbmcKa2luZwptZWRpZXZhbCBwYWludGluZwpoeXBlcmRldGFpbGVkIGZhY2UKd2VhcmluZyBhcm1vcgpsaWJyYXJ5CnBhdGggb2YgZXhpbGUKbWFjaGluZXJ5CmxvdyBjYW1lcmEgYW5nbGUKZnV0dXJlc3ludGgKZGFpc2llcwpqYXBhbmVzZSBzdHlsZQpkJmQgZmFudGFzeQpmaXNoLWV5ZSBsZW5zCnByb3BoZWN5CmRyeSBza2luCmNvc3R1bWUKc3BpcmFsCmZvcmVzdCBzZXR0aW5nCnBpa2FjaHUKaG9sb2dyYXBoaWMgY29sb3JzCnBhdmVkIHJvYWRzCnByZWNpc2UgY29ycmVjdCBhbmF0b215CjggMCBtbSBsZW5zCmJsYWNrIGdvbwpnZXN0dXJlIGRyYXduCmdvZHdhcmQKZHJvb2xpbmcKxpIgLyA4CnRyZW5kaW5nIG9uIHBpbnRlcmVzc3QKZW50aXJlIGNoYXJhY3RlcgpmYW50YXN0aWMgcGxhbmV0CmludHJpY2F0ZSBvcm5hbWVudGFsIGRldGFpbHMKY29sb3JmdWwgZmxhdCBzdXJyZWFsCm1hZ2ljIGZhbnRhc3kKcG9ja2V0d2F0Y2gKaG9ycm9yIHBvc3Rlcgp0b3JuIHBhcGVyIGludHJpY2F0ZSB0ZXh0dXJlCmRpc2hvbm9yZWQgMgppbiB3YXRlciEgdXAgdG8gc2hvdWxkZXJzCnN1cnJlYWwgZ291YWNoZSBwYWludGluZwpicmlnaHQgc3VubGlnaHQKYXBlcnR1cmUgZjEuMgpoZWF2ZW5seSBsaWdodAphbmRyZWFzIGZyYW5rZQpwaXp6YQpsYW5kc2NhcGUgYXJ0CmluIHN0eWxlIG9mIHlvamkgc2hpbmthd2EKZ2xhbW9yIHNob3QKZHVuZ2VvbnMgYW5kIGRyYWdvbnMgYXJ0CnZpbnRhZ2UgcG9zdGNhcmQgaWxsdXN0cmF0aW9uCmphcGFuZXNlIHdvb2RibG9jawpjYXZlCjMgLyA0IHBvcnRyYWl0Cmdsb3cgZWZmZWN0Cm1pbmlhdHVyZQpzcG90dGVkCm1heGltdW0gZGV0YWlsCnNjaWVudGlmaWMKMy80IHZpZXcKZWRkIGNhcnRpZXIKYmlvc2hvY2sgaW5maW5pdGUgYXJ0IHN0eWxlCmZhY2UgZmVhdHVyZXMKYm9keSBmZWF0dXJlcwpzcGVha2VycwpwYXJ0eQpmYW1vdXMKY292ZXIKd2lsZCB3ZXN0Cm1vbnN0ZXJzCnN1cGVyIG1hcmlvCnJlbmFpc3NhbmNlIGFydApib3ggYXJ0CmRpZXNlbCBwdW5rCm1hZ2ljIG11c2hyb29tcwpzdGFycyBpbiB0aGUgYmFja2dyb3VuZAphbm5hIG5pa29ub3ZhIGFrYSBuZXdtaWxreQphcmNoZXMKYmVhcmRlZApvc2NhciBub21pbmF0ZWQgY2luZW1hdG9ncmFwaHkKbXlzdGlxdWUKd2VlZApzdGVwaGVuIGhpY2ttYW4KYXdhcmQgd2lubmluZyBsaWdodGluZwpyYWluYm93cwphcnRnZXJtIGRldGFpbGVkCnN0eWxlIG9mIG1vZWJpdXMKcHJvZmVzc2lvbmFsIGNvbmNlcHQgYXJ0CnNpZ21hCmhpZ2hseQpjYXJhbiBkJ2FjaGUgbHVtaW5hbmNlCnZlcnkgaGlnaGx5IGRldGFpbGVkIDhrCnJpbSBsaXQKbWVkaWV2YWwgZG5kCnJlZmVyZW5jZSBzaGVldApncmltZGFyayBmYW50YXN5CnBvd2VyIG1ldGFsIGFsYnVtIGNvdmVyCmthbnllIHdlc3QKaGlnaCBkZXRhaWwgcGhvdG9ncmFwaHkKZ29vZXkKcm9tYW50aWMgc3Rvcnlib29rIGZhbnRhc3kKZiAxIDYKemVuZyBmYW56aApzYXNvdXJhCmx1bWlub3VzIHNjZW5lCnNlZHVjdGl2ZSBwb3NlCm1hcmJsZSBzY3VscHR1cmUKZGFyayBtb29keSBjb2xvcnMKMSA5IDEgMwphd2FyZHdpbm5pbmcKcG93ZXJmdWwgY2hpbgphcnRnZXJtIGdyZWcgcnV0a293c2tpIF8gZ3JlZwp6YWhhIGhhZGlkIGJ1aWxkaW5nCmJsb29kIHN0YWlucwpyZXRybyBmYW50YXN5CnBldGl0ZQpodWdvIHByYXR0CmFjY3VyYXRlIGdyZWVuIGV5ZXMKcmVuZGVyZWQgaW4gZ291YWNoZSBwYWludGluZwphY3JpbGljIHBhaW50Cmxvb2tpbmcgY29udGVudApjb2xsZWN0aWJsZSBjYXJkIGFydApmbG9hdGluZyBpbiBhIHBvd2VyZnVsIHplbiBzdGF0ZQpza3kgYmx1ZSBzdHJhaWdodCBoYWlyCndpbmRibG93biBkYXJrIGhhaXIKZ29sZCB0cmltCnBlYXJsIGVhcnJpbmcKZGFyayBleWUgc29ja2V0cwpzZW1pIG5haXZlCmdhdXNzCjIgZCBkaWdpdGFsIHZlY3RvciBhcnQKYmx1ZSBkcmVzcwpkYXZpbmNpCmF6dG9kaW8KbWlzY2hpZXZvdXMKZmVybnMKYWNjdXJhdGUgZGV0YWlscwozMG1tIHBob3RvZ3JhcGh5CmdvdGhpYyBzdHlsZQpzaGFycCBmb2NjdXMKcm9ib3QgYXJtCnZhbGxleQpoaWdoIGNoZWVrYm9uZXMKYmF0dGxldGVjaApkaWdpdGFsIGZhbnRhc3kgY2hhcmFjdGVyCmF2aWF0b3Igc3VuZ2xhc3Nlcwp2aWJyYW50IHJlZCBiYWNrZ3JvdW5kCmNoaWJpIHN0eWxlCnBvd2VyIGF1cmEKbG90cyBvZiBmbHlpbmcgY2FycwpkaXZlcnNlCm1hc2FzaGkgYW5kbwpiaWcgZGVwdGggb2YgZmllbGQKbG93IGRldGFpbApoeXBlcnJlYWxpc3RpYyA0ayB1aGQKdm9sdW1ldHJpYyBuYXR1cmFsIGxpZ2h0CmNvbGxlY3Rpb24KcnVubmluZwpzaWx2ZXIgaW9kaWRlCmdsb29tCmFsaWVuIGxhbmRzY2FwZQpzaW5nbGUgY2hhcmFjdGVyIGZ1bGwgYm9keQpyYWluYm93IGJ1YmJsZXMKZmxvcmFsIGRldGFpbHMKbWFyYmxlIHN0YXR1ZQphcmlhbmEgZ3JhbmRlCmZhc2hpb24gcG9zZQphbmRyZWUgd2FsbGluCmRyYWdvbiBzY2FsZXMKY2xhc3NpY2FsCmN1cnZhY2VvdXMKd2F2ZQphenVyZSBibHVlIGV5ZXMKYmVhdXRpZnVsIHBhbGUgbWFrZXVwCmthenVvIG9nYQpob21lIHZpZGVvIGZvb3RhZ2UKZ3RhIGFydHN0eWxlCnZmeCBmaWxtCmFjY3VyYXRlIGZpY3Rpb25hbCBwcm9wb3J0aW9ucwphZG9yYWJsZSEhIQpkYW5pZWwgbWlyYW50ZQpkYWQgYm9kCnZpdmlkIGNvbG9yIGdsb3cKdWx0cmEgd2lkZSBhbmdsZSB2aWV3CmJvb3N0ZXIgZmxhcmVzCmFnZWQgMiA1Cm1hZ2ljYWwgYXRtb3NwaGVyZSArIG1hc3RlcnBpZWNlCmNvb2wgY29sb3IgcGFsZXR0ZQpzeW50aApmdXR1cmUgcGVyZmVjdAphYmFuZG9uZWQgc3BhY2VzCmV4cGVyaW1lbnQKcmlzcXVlIGZhc2hpb24KdW5ob2x5CmxhY2VzCmdyb3VuZCBhbmdsZSB1aGQgOCBrCjggayB2b2x1bWV0cmljIGxpZ2h0aW5nCmJsYW5rIHN0YXJl4oCdCnJlZCBibHVzaAp0ZWFsCmlsbHVzdHJhdGVkIGNvbXBsZXRlbHkKYncKYmVkCm9ybmF0ZSBhbmQgaW50cmljYXRlCmdsb3dpbmcgaGlnaGxpZ2h0cwpzaGFkb3dydW4KZGVzaWduZXIKcG9saWNlIG9mZmljZXJzIHVuZGVyIGhlYXZ5IGZpcmUKc3RhbmxleSBkb253b29kCnBlbnNpdmUKYnJpZ2h0IGNvbG9yCmFybXMKY2FybG9zIHNod2FiZQpncmVlbiBiYWNrZ3JvdW5kCmV4YWdnZXJhdGVkCnBhc3RlbCB0b25lcwpiZWF1dGlmdWwgY2xvdWRzCnJhaW5ib3cgY29sb3JzCmNpbmVtYSBzdGlsbApiaWcgd2luZG93cwpqaXl1biBjaGFlCmRpYW1vbmQKZ2F6aW5nIGV5ZXMKaXJ3aW4gcGVubgpsaWdodCBiYWNrZ3JvdW5kCmhpZ2gtcXVhbGl0eQpidXN0IHNob3QKa29yZWFuIG1tb3JwZwpjaGlsZHJlbidzIGJvb2sgaWxsdXN0cmF0aW9uCjRrIGRldGFpbCBwb3N0IHByb2Nlc3NpbmcKb2N0YW50ZSByZW5kZXIKbWFyZ290IHJvYmJpZQpiZWF1dGlmdWwgYXRtb3NwaGVyZQpkZWZpbmVkIGZlYXR1cmVzCm9yYW5nZSB0aW50CndhdGVyY29sb3IgaWxsdXN0cmF0aW9uCmZpbG0gc2hvdApiZXJzZXJrCnR1bW9ycwpwb3VyaW5nIHJhaW4Kb2FzaXMKY3V0ZSBleHByZXNzaW9uCnBhZ2FucwpjaGFyYWNodGVyIGRlc2lnbgpib3JlZCBleHByZXNzaW9uCnJlaSBheWFuYW1pCnZlcnkgdmVyeSB2ZXJ5IGRldGFpbGVkCmNvbG9yZWQgcGVuY2lsIGFydCBvbiBwYXBlcgpsaWdodCBvZiBnb2QKYXV0dW1uIGxlYXZlcwpzb3ZpZXQgcHJvcGFnYW5kYSBwb3N0ZXIKcmF5IG9mIHN1bmxpZ2h0CmJlYXV0aWZ1bCBjaW5lbWF0b2dyYXBoeQpwb3NpdGl2ZQpzYXJjYXN0aWMgc21pbGUKYmFkIHF1YWxpdHkKc2hhZG93IG9mIHRoZSB0b21iIHJpZGVyCmNpbm5hYmFyCmxvdyB2aXNpYmlsaXR5CmNvbWZvcnQKYW5jaWVudCBmb3Jlc3QKd2F0ZXIgZHJvcGxldHMgb24gbGVucwp6b2RpYWMgc2lnbnMKYXp1cmUgc2t5CmFtYXppbmcgbGlnaHQKZCAmIGQgYW5kIG10ZwpmYW50YXN5IGNvbG9yaW5nCnJlbmRlciBuYXVnaHR5IGRvZwp1bmlxdWUgcGVyc3BlY3RpdmUKbWFyaW5hIGFicmFtb3ZpYwpzcGFya2xpbmcgd2F0ZXIKcmFkaWF0aW5nCmJlaHJlbnMgc3R5bGUKY29sb3JmdWwgY29taWNzIHN0eWxlCm9ybmF0ZSBnaWxkZWQgZGV0YWlscwpqdXN0aWZ5IGNvbnRlbnQgY2VudGVyCm92ZXJqb3llZApmcm9zdGJpdGUgZW5naW5lCjQgayBkaWdpdGFsIHBhaW50aW5nCnN0eWxlIGl2YW4gdGFsYXZlcmEgYW5kIGFydGdlcm0Kc3RhYmlsaXR5CmFhYWEgYWNoaWV2ZW1lbnQgY29sbGVjdGlvbgpjdXRlIGRldGFpbGVkIGFydHdvcmsKbWluaW1hbGlzdCB3YWxscGFwZXIKYmVoaW5kIGJhciBkZWNrIHdpdGggYmVhciBtdWdzCnN1cGVyIHJlYWxpc3RpYyBncml0dHkKZiAwLiA0CmV4dHJlbWUgaW50cmljYXRlIGRldGFpbHMKaHlwZXJyZWFsaXR5CmdyZXkgc2t5CmpvaG4gc2luZ2VyIHNhcmdhbnQKZ2lsZGVkIGRldGFpbHMKcGljdHVyZXNxdWUKdGltIGphY29idXMKbG9sCnNwYWNleApib29rIGlsbHVzdHJhdGlvbgpsb3cgbGlnaHRpbmcKZmluZSBmYWNpYWwgZmVhdHVyZXMKc3VwZXIgLSByZXNvbHV0aW9uCndlcyBhbmRlcnNvbiBmaWxtCnNsaWdodGx5IGJsdXJyeQpidXNoZXMKbGl0aG9ncmFwaCBlbmdyYXZpbmcKcmljayBndWlkaWNlCmdydWVzb21lCjNkIHJlbmRlcmVkCnBvcCAtIGFydCBzdHlsZQpjaGVlc2UKcmVkIHNraW4KbWFnbWEKY3JldGVyaW9uIGNvbGxlY3Rpb24KdWx0cmEgZ3JhcGhpY3MKbm9pc3kKaW50cmljYXRlIGRldGFpbGVkIHBhaW50aW5nCmJpbGF0ZXJhbCBzeW1tZXRyeQpoaWdobHkgc3R5bGl6ZWQKZmFpcmllcwpkZXRhaWxzIHZpc2libGUKa2VuIGJhcnRoZWxtZXkKZHJhbWF0aWMgc2hvdApibGFjayBza3kgZnVsbCBvZiBzdGFycwphZHZhbmNlZAptZWdhcGl4ZWwKbW9uc3Ryb3VzCnN0b25lZApsYW5kc2NhcGUgYmFja2dyb3VuZApib2R5IHBvcnRyYWl0CnNlbWkgcmVhbGlzdGljIGFuaW1lCmhkIHJlbmRlcgplZHdpbiBsb25nCmh5cGVyIHJlYWxpc3RpYyBhcnQKcGhvdG9yZWFsaXN0aWMgZGlnaXRhbCBwYWludGluZwoxOTcwcyBmYXNoaW9uCmxpcHMgc2xpZ2h0bHkgcGFydGVkCmNhc3RsZSBiYWNrZ3JvdW5kCmRldGFpbGVkIGFuaW1lIGZhY2UKY3JlZXB5IGFtYmlhbmNlCnJhZmVhbCBhbGJ1cXVlcnF1ZSBjb21pYyBhcnQKbWF4aW0gbWFnYXppbmUKY29udGVtcG9yYXJ5CnBvcnRyYWl0IG9mIGEgeW91bmcKc21vb3RoIG1hcmJsZSBzdXJmYWNlcwpkZXRhaWxlZCBpbmsgaWxsdXN0cmF0aW9uCnNhbXVzIGFyYW4Kc3Ryb25nIGltYWdlcnkKcGFkZGxlIG9mIHdhdGVyCnlvc2hpa2F0YSBhbWFubwozIGQgcGVyc3BlY3RpdmUKZ29yZ2VvdXMgYnJ1c2ggc3Ryb2tlcwphcnQgbm91dmVhdSBhcmNoaXRlY3R1cmUKZmxvYXRpbmcgZW1iZXJzCnVudXN1YWwgYmVhdXR5CmxvbW8KY2xvc2UgdXAgYW5nbGUKc3dpcmx5IHZpYnJhbnQgY29sb3JzCmFwb2NhbHlwdGljIGFydApleG90aWMgdmVnZXRhdGlvbgpicm9rZW4gdmVuZGluZyBtYWNoaW5lcwpvcm5hdGUgd2hpdGUgYW5kIGdvbGQgYXJtb3VyCm1vdmluZyBmb3J3YXJkCmRyb3BzCmpvcmdlIGxhY2VyYQpiZW4gbG8KaW5kaWUgY29uY2VwdCBhcnQKYW4gYXJ0IG5vdXZlYXUKZ3JpdHR5IGJhY2tncm91bmQKaG9sb2dyYW0gY2VudGVyCmRlYW4gY29ybndhbGwKZGlzbmV5IDggayBwaG90bwplYXJidWRzCnZpZXRuYW0gZG9vciBndW5uZXIKZWxpc2hhIGN1dGhiZXJ0IGFzIGEgcGFsYWRpbgpmbGF3bGVzcyBzdHJ1Y3R1cmUKaW5jcmVkaWJsZSBzY3JlZW5zaG90Cmtlcm91YWMgbWFnYXppbmUKc2hvdCBvbiBpcGhvbmUKYnJpZ2h0IGV5ZXMKcGFsZSBwaW5rIGJpa2luaQpnbG93aW5nIG5lb24KZHJhd2Nyb3dkCnNob3cKd2l0aCBhIGJpZyBoZWFkCmxvdyBmb2cKc3ltbWV0cmljIGV5ZXMKaGVhcnRoc3RvbmUgYXJ0d29yawpkZS1ub2lzZQoxIDkgMCAwIHMKaGlnaGx5IGRldGFpbGVkIHJlbmRlcgphdG1vc3BoZXJpYyBmb2cKY2xvdWR5IGRheQpjcm93ZAppbnNwaXJhdGlvbmFsIGFydGhvdXNlCnNwaWtlIHBhaW50aW5nCnN1YmplY3QgaW4gbWlkZGxlCjMgZCByZW5kZXJlZApwYWxhY2UKMzVtbSBjb2xvcgpldmVuaW5nIGxpZ2h0CmFsbCBib2R5CmxpZ2h0IHJlZnJhY3Rpb24KZGlzaG9ub3JlZCAxCmRheXRvbmVyCmFuYXRvIGZpbm5zdGFyay4gaHlwZXIgZGV0YWlsZWQKZm9ydG5pdGUKZ2xvb215IGxpZ2h0aW5nCjYwcyBzdHlsZQpibGFjayBhbmQgd2hpdGUuIGhpZ2ggY29udHJhc3QKZnJlc2NvCm15dGhvbG9naWNhbCBwYWludGluZwpib21icwpjYWxsIG9mIGR1dHkKbW9kZXN0CnZlY3RvciBncmFwaGljCm1vc3N5CjE5NzAKMTk5OQpnYWxheHkgYmFja2dyb3VuZApzYWQgYXRtb3NwaGVyZQpvY3RhbiByZW5kZXIKc2xhdmljCndhc2hlZCBjb2xvcnMKZW5oYW5jZWQgZmFjZXMKYWJhbmRvbmVkIGNpdHkKd29vZGJsb2NrIHByaW50CnBhdHJlb24KMmQgZ2FtZSBhcnQgZ3RhNSBjb3ZlcgpmYW5ib3gKYnJvd24gc2hvcnQgaGFpcgpkYXJrIHZvbHVtZXRyaWMgbGlnaHRpbmcKZ29kbHkKdGhvbWFzIGVocmV0c21hbm4KbmVidWxhIGJhY2tncm91bmQKcmV0cm8gc3R5bGUKcmVkIHdoaXRlIGJsYWNrIGNvbG9ycwpyZWFsaXN0aWMgYm9keSBmZWF0dXJlcyBhbmQgZmFjZQpsYXB1dGEKYnVyZ2VyCmRhdGEKZGoKZGVzaWduIHRlbnNpb24KaW1wYWN0ZnVsIGdyYXBoaWMgZGVzaWduCmNpbmVtYXRpY3MgbGlnaHRpbmcKcmVsZW50bGVzc2x5IGRldGFpbGVkCmdpbGxzCmVsbGUgZmFubmluZwpwcmludHMKYXNpYW4gYXJ0CmdpCndlYXJpbmcgYSBjb3dib3kgaGF0Cm1pbmltYWxpc3QgYXJjaGl0ZWN0dXJlCmluIHN0eWxlIG9mIHN5ZCBtZWFkCmJlYXV0aWZ1bCBpbWFnZQp0aHJvbmUKanVhbiBnaW1lbmV6CnByb2Nlc3NpbmcKb3Jpc2hhCmdhcnkgbW9udGFsYmFubwpkZXRhaWxlZCBtYXR0ZSBmYW50YXN5IHBhaW50aW5nCnRyZW5kaW5nIGFydHdvcmsKamF3IGRyb3BwaW5nCmZvY3VzIGV5ZXMKcmV0cm9mdXR1cmUKcGVhcmxzIG9mIHN3ZWF0CnN1biB5dW5qb28Kd2hpdGUgcGFpbnQKbWFueSBjb2xvciBzY2hlbWUKY3JlYW0gd2hpdGUgYmFja2dyb3VuZApodW1hbm9pZGUgcm9ib3QKc2xpZ2h0IHNtaWxlIGV4cHJlc3Npb24KZmFzaGlvbiBwaG90byBzaG9vdAp0b3JjaGVzCnBhaW50IGRyaXBzCnNlcmlvdXMgZmFjZQpvbGQgcGhvdG9ncmFwaApnYXMgbWFzawpwaW5lIGZvcmVzdHMKaGQgNCBrCmYvMi44CmZhbnRhc3kgYXJ0IGlsbHVzdHJhdGlvbgoxOTgxCnNoYWRvdwpiYWxjb25pZXMKcG5nCnJlYWxpdHkKbmFycm93IGZhY2UKbHNkIGRyZWFtIGVtdWxhdG9yIHBzeApzdW4gc2hpbmluZyB0aHJvdWdoCjEgNiBrIHJlc29sdXRpb24Kb2YgYSBmYW1pbHkgbGVhdmluZyBhIHNwYWNlc2hpcApuZXV0cmFsIGJhY2tncm91bmQKdGhlIHZvaWQKYmFtYm9vCnN5bW1ldHJpY2FsIHZvZ3VlIGZhY2UgcG9ydHJhaXQKcmVuZGVyZWQgaW4gY2luZW1hNGQKcml2ZXJzCmNpbmVtYXRpYyBmcmFtaW5nCmN5YmVycHVuayBvdXRmaXRzCmR1bmdlb24gYW5kIGRyYWdvbnMgYXJ0CmJpbGxib2FyZHMKc21hbGwgYnVpbGRpbmdzCmNpbmVtYXNjb3BlCnN0b3J5Ym9vawplcGljIHNjZW5lcnkKc3Vuc2V0IGxpZ2h0CmNhdGhlZHJhbApjcmFzaGluZyB3YXZlcwp2ZWN0b3IgbG9nbwp0b3BoYXQKdGF5bG9yIHN3aWZ0CmRyZWFteSBhdG1vc3BoZXJlCnN0YXJzIGluIHNreQpsb25nIHdhdnkgYmxhY2sgaGFpcgpjaGFyYWN0ZXIgZGVzaWduIGFydApkaWdpdGFsIHJlbmRlcmluZwptYWdpYyBwb3Rpb25zCmdsaXRjaHkKcGFsZSB3aGl0ZSBza2luCmVsZiBlYXJzCjIwNzcKcHJpc20gaGlnaGxpZ2h0cwpuYXZhbCBiYWNrZ3JvdW5kCmxlc2xpZSBkYXZpZCBhbmQgbGlzYSBmcmFuawpzeW1tZXRyaWNhbCBzaG90CndpY2tlZApzcGVlZCBwYWludGluZwpjb3p5IGFuZCBjYWxtCmZpZ2h0ZXIKZ2xvd2luZyBlZmZlY3QKcG9zdGVyIHN0eWxlCmZ1biBwb3NlCnZpYnJhbnRlIGNvbG9ycwpzcG9uZ2Vib2IKaW50ZXJpb3IgbGlnaHRpbmcKdGFuayB0b3AKaW1hZ2luYXRpdmUKY29sb3IgYmxlZWRpbmcKYmVhdXRpZnVsIGdsb3dpbmcgbGlnaHRzCnBlZHJvIGNvcnJlYQppbiBmcm9udCBvZiBhIGJpZyBtb29uCnZvbHVtbWV0cmljIGxpZ2h0CmZ1amkgY2hva28KY29tcHJlaGVuc2l2ZSBhcnQKa2lsbGlhbiBlbmcKZmlsbWdyYWluCmx1bWlub3VzIHNreQpyYWNrcwp0eWxlciB3ZXN0CnBob3RvcmVhbGlzdGljIHNob3QKZmxvYXRpbmcgYnViYmxlcwpzcGFjZSBncmFwaGljcyBhcnQgaW4gYmFja2dyb3VuZApyb2NraW5nIG91dApjYXVzdGljcyBsaWdodGluZyBmcm9tIGFib3ZlCm1pbGl0YXJ5IGNhbXAgaW4gdGhlIGJhY2tncm91bmQKbWV0YWwgZWFycwp3ZWlyZCBzdHVmZgpsb25nIHRoaW4gbGVncwpkZXRhaWxlZCA1IGsgZGV0YWlscwpmcm9tIHdpa2lwZWRpYQpoaWdseSBkZXRhaWxlZCBtYXN0ZXJwaWVjZQpzbGlnaHQgb3ZlcmNhc3QKYmFjayB2aWV3LiBudXJpIGl5ZW0KbGlnaHQgYmx1ZSBmaWx0ZXIKZ2xvYmFsIGlsbHVtaW5haXRpb24KdHJlbmRpbmcgY2dzb2NpZXR5CmxpcXVpZCBtZXRhbAphYnN0cmFjdCBwYWludGluZwpvcm5hdGUgbWVkaWV2YWwgcmVsaWdpb3VzIGljb24KbmV3Z3JvdW5kcwohISEhISEhISEhISEhISEhISEhISEhISEhCmZhY2VzCnBldGVyIGNodW5nCnJlZCBpcmlzCndpZGVhbmdsZQpjb2xvcmZ1bCBsaWdodGluZwoxIDkgMSAwIHMKd2V0IHBsYXRlIHBob3RvZ3JhcGh5CmhpZ2hseSBkZXRhaWxlZCB3aGVlbHMKbm8gd2F0ZXJtYXJrCnJlZCBsaWdodHMKYmxhY2sgYmVhcmQKc2NhcmVkCmFycmkgYWxleGEKcGFpciBvZiBrZXljYXJkcyBvbiB0YWJsZQpyZWFsaXN0aWMgZnVyCmN1dHNjZW5lCnBvdGlvbnMKYXBlcnR1cmUKY29sbGFnZSBwYXBlciBhbmQgdGFwZQpib3RhbmljYWwgaWxsdXN0cmF0aW9uCnN0ZWVscHVuawpib3JpcyB2YWxlam8KdHJlbmRpbmcgb24gYXJ0c3RhaW9uCnN1biBiZWFtcwpvbGQgbWFuCm92ZXJsYWlkIHdpdGggYWl6b21lIHBhdHRlcm5zCmFic3RyYWN0aW9uCmZlcmFsCnJhaW5kcm9wcwpmYWNpbmcgZm9yd2FyZApyZWFsIGxpZmUgcGhvdG8KdHJhZGl0aW9uYWwgYXJ0CnBhcGFyYXp6aQpiYWxlbmNpYWdhCnZpYnJhbnQgd2F0ZXJjb2xvcgo4ayBtYXN0ZXJwaWVjZQp2ZXJ5IHZlcnkgdmVyeSBhZXN0aGV0aWMKZ3JlZW4gZm9yZXN0CmVtcHlyZWFuCmxvdHIKZ3JhaW55IGZpbG0KZnVsbCBib2R5IGNvbmNlcHQgYXJ0CmludHJpY2F0ZSBpbGx1c3RyYXRpb24KcHJpc21hdGljIGhpZ2hsaWdodHMKcm9zZSB0b25lcwpleHRyZW1lIGRldGFpbGVkCmNpdHkgc3RyZWV0CmludGVuc2UgZGV0YWlsCmV0aGVyaWMKZXh0cmVtZWx5IGRldGFpbGVkIQpkcmlwcGluZyBiYnEgc2F1Y2UKbWFyayB6dWNrZXJiZXJnCnJ5ZGVuCmQmZCBjaGFyYWN0ZXIKc2NoZW1hdGljCmFsYnJlY3RoIGR1cmVyCmdyZWVuIG1pc3QKd29vZHMKZGFwcGVyCmFudGxlcnMKbGlnaHQgZGFyawpzbW9vdGggZm9jdXMKa2lkbmV5cwppbXByZXNzaW9uaXN0IHN0eWxlCmJlYXV0aWZ1bCBza2luCnN0ZWFtIHJvbWFuY2UKdmVyeSBoaWdoIGRldGFpbHMKYWJzdXJkbHkgYmVhdXRpZnVsCmVsZWdhbnQgY2FwZQpuZXVyYWwgYWNyeWxpYyBwYWludApzYXRjaGVseQpkcmFtYXRpYyBzdW5zZXQKc29mdCBzaGFkb3cKKCBzb255IGEgNyByIGl2CmxvdyB2aWV3CmNhbm9uIDUgZAptYXNhbXVuZQpwZXJmZWN0IGZhY2UgYW5kIGJvZHkKZ29sZGVuIHJ1bGUKdmVyeSBjb21wbGV4CnZlcnkgc3ltbWV0cmljYWwKam9obm55IHNpbHZlcmhhbmQKYWxpZW4gMSA5IDcgOQpza3kgYmx1ZSBoYWlyCmFkcmlhbiBzbWl0aCBmYW50YXN5IGFydApsaW1iIG11dGF0aW9ucwpzd29sbGVuIHZlaW5zCmZ1dHVyaXN0aWMgZmFzaGlvbgphcnRnZXJtIG11Y2hhCmZhaXJ5IHRhbGUgaWxsdXN0cmF0aW9ucwp2b2x1bWV0cmljcyBsaWdodHMKaHlicmlkcwpmYW50YXN5IGNoYXJhY3RlciBvY3RhbmUgcmVuZGVyCnJlZmVyZW5jZSBzaGVldCB3aGl0ZSBiYWNrZ3JvdW5kCiggKCAoIGNvbG9yZnVsICkgKSApCnNwbGFzaCBjb21pY3MKaGFsZiBhc2lhbgpwaG90byBvZiBhIGh1Z2UgdGhlYXRlcnN0YWdlCnNzY2ktZmkgYW5kIGZhbnRhc3kKdmVydGlnbwpzb2Z0IGFuZCBjbGVhciBzaGFkb3dzCmludHJpY2F0ZSBwYXR0ZXJucwpyZWQgY29sb3Igc2NoZW1lCmNvbW1lcmNpYWwgcGhvdG9ncmFwaHkKYXdhcmQgd2lubmluZyBvbiBhcnRzdGF0aW9uCmRlbGljYXRlIGZlYXR1cmVzCmJlYXV0aWZ1bCBzaGFkb3dpbmcKYm9vawpzaGFsbG93IGZvY3VzCnRob3VnaHQgcHJvdm9raW5nCndoaXRlIGJhY2tkcm9wCnJlc3RvcmVkCmJyaWxsaWFudCBjb2xvcnMKcm90aGtvCmxpcXVpZCBnb2xkCnN0eWxlIG9mIGd1c3RhdmUgZG9yZQphbmltYXRpb24gY2VsCmFsdGVybmF0ZSBoaXN0b3J5CmNpbmVtYXRpYyBjYW1lcmEKc2NyYXRjaGVzCjE2bW0KY29tcHV0ZXIgc2NyZWVucwpob2xvZ3JhbXMKd2FybG9jawpib2tlaCBiYWNrZ3JvdW5kCnNsaW0gYm9keQptYWRlIG9mIGxpcXVpZCBtZXRhbAphbnRhcmN0aWNhCmJ1bm55CmRpc3RhbnQgc2hvdApvZmZ3aGl0ZQpiaXJkcyBpbiB0aGUgc2t5CmRlbnNlIGZvcmVzdAo1NW1tCmh5cGVycmVhbGlzdGljIHBob3RvCnNpZGUgc2Nyb2xsaW5nCm9mZmljaWFsIGFuaW1lIGtleSBtZWRpYQpnb2xkZW4gbGlnaHRpbmcKY2xlYXIgYmx1ZSBza3kKZ3JlZW4gc2NyZWVuCmV4Y2l0aW5nCmNyb3NzaGF0Y2hpbmcKYWR2YW5jZWQgZGlnaXRhbCBhcnQKY2cgcmVuZGVyCndhc3RlbGFuZAplbW90aXZlCmV4aGliaXRpb24Kc29sZGllcgpjaXJjdWxhcgppbnNpZGUgdmlldwpzcGFjZXN1aXQKYm9yZwp2YW4gZ29naCBzdHlsZQpiZWF1dGlmdWwgZmFjZSEhCmZyb20gYmVsb3cKdG9tYm95CmNoYXJpb3QKd293IQpsb25nIGZ1cgpzb2Z0IG1vb2QKbWFncml0dGUKd2hpdGUgcm9iZQp3YXRlcmNvbG9ycwppbiBzdHlsZSBvZiBkb29tCmZhbnRhc3kgcnBnCnNpbHZlciBmaWxpZ3JlZSBkZXRhaWxzCmJvZHlzdWl0CmdyYXNzbGFuZHMKcGxhZ3VlIGRvY3Rvcgp3YXJyaW9yIGJvZHkKb2FrIHRyZWVzCm1hZGlzb24gYmVlcgplc3RhYmxpc2hpbmcgYWN0aW9uIHNob3QKbW9uYSBsaXNhCm1lZGljYWwKc3RpY2tlciBhcnQKc2FiYXR0aWVyIGZpbHRlcgpvZiBhIG9sZCAxN3RoIGNlbnR1cnkKdGhlIHNhbmRtYW4KcmVkIHJpbSBsaWdodApwZXJmZWN0aW9uIQpzdHJlbmd0aAp3aXJlcyBjeWJlcm5ldGljIGltcGxhbnRzCjIgMCAwIG1tCnBlcmZlY3QgbGlnaHRuaW5nCnZpc2NvdXMKc2hhcGUgbGFuZ3VhZ2UKY2xhc2ggcm95YWwgc3R5bGUgY2hhcmFjdGVycwp2aHMgZGlzdG9ydGlvbgppbnRlcmlvciBzaG90CnBpdGNoIGJlbmRpbmcKYXdhcmQgd2lubmluZyBjZ2kKYW1hemluZyB2YWx1ZSBjb250cm9sCnN0cmVldCBsYW1wcwpubyBkb3VibGUgaGVhZAppbnRyaWNhdGUgbGlnaHRpbmcKZnJhbnRpc2VrIGt1cGthCjUgY29sb3JzCmxhcmdlIGNyYWNrcwpsaXF1aWQgZ2x1ZSBzcG90cwpwZXJmZWN0IHN5bW1ldHJpY2FsIGV5ZXMKYmVhdXRpZnVsIGN1dGUKamluIC0gcm9oCm1pc2EgYW1hbmUKbG9pcyB2YW4gYmFhcmxlIGFuZCBib3VndWVyZWF1CnF1ZWNodWEhCnN0aXBwbGUgYnJ1c2ggdGVjaG5pcXVlCmtvaSBjb2xvcnMKc2NvdHQgd2lsbHMKZ2VubmR5IHRhcnRha292c2tpCmFybm9sZCBib2NrbGluCnNob3J0cwphbmdlbGFyaXVtCjMgZCBzaGFkb3dpbmcKYmVhdXRpZnVsIGFyY2hpdGVjdHVyZQpzdHJlZXQgZmFzaGlvbiBvdXRmaXQKZXllCnNtb290aCB2aWJyYW5jeQpsZWdlbmRhcnkgd2FycmlvcgpqZWFuIC0gYmFwdGlzdGUgbW9uZ2UKam9lbCBwZXRlciB3aXRraW4KdGVuc2UgYXRtb3NwaGVyZQpkaXN0b3J0aW9uCmZhbnRhc3kgY2l0eQpndW5zaG90cwphbmltZSBidWxsZXQgdmZ4CnR5bmRhbGwgZWZmZWN0CmZ1dHVyaXN0aWMgc3R5bGUKcGVhcmxzCnN0cmFpZ2h0IG5vc2UKbm9ydGhlcm4gbGlnaHRzCndoaXRlIHBvcmNlbGFpbiBza2luCmNoYXJhY3RlciBkZXNpZ24gc2hlZXQKc2tlbGV0YWwKd2hpdGUgd2FsbHMKaGVhZApnYWwgZ2Fkb3QKbWFuZ2EgMSA5IDkgMApoaWdoIGNvbnN0cmFzdApleHRyZW1lIHdpZGUgc2hvdAprb3JlYW4Kd2l6YXJkcyBvZiB0aGUgY29hc3QKZWFydGggdG9uZXMKYmJjCmp1c3Qgb25lIGhlYWQKbmF0dXJhbCBsaWdodHMKbmF0aW9uYWwgZ2VvZ3JhcGhpYyBwaG90b2dyYXBoCjhrIHBvc3QtcHJvY2Vzc2luZwpoYXNzZWxibGFkIHBob3RvCmFuaW1lIHdhbGxwYXBlcgpmdWxsLWxlbmd0aApjbG9zZS11cCB2aWV3Cm1vdW50YWlucyBpbiBiYWNrZ3JvdW5kCmRpZmZ1c2VkCnRyZW5kaW5nIGluIGNnc29jaWV0eQpuYXR1cmFsIHRleHR1cmVzCmZhY2UgcGFpbnQKZm9yZXNob3J0ZW5pbmcKcGFzdGVsIGxpZ2h0aW5nCmhvcnJvciBmaWxtCnN0b3AgbW90aW9uCnNwaWRlcndlYnMKcmVkIHJvc2VzCmNnaSByZW5kZXIKa3V2c2hpbm92CmF1ZGkgYTQgYjYgYXZhbnQgKDIwMDIpCndlYXJpbmcgdHJhZGl0aW9uYWwgZ2FyYgphdG1vc3BoZXJlIGFuZCB0ZW5zaW9uCmhlYWRzaG90IHBvcnRyYWl0CmZhc3Qgc2h1dHRlciBzcGVlZApmYWNlbGVzcwpnb2t1CmZhYnJpY3MgYW5kIHRleHRpbGVzCmZyZXF1ZW5jeSBpbmRpZSBhbGJ1bSBjb3Zlcgp1bHRyYSBkZXRhaWxlZCBkaWdpdGFsIGFydApvcmFuZ2UgaGFpcgplZXJpZSBsaWdodGluZwpzY3JlZW5zCmVwaWMgZW52aXJvbm1lbnQKYmVhdXRpZnVsIGlsbHVzdHJhdGlvbgpoaWdoIGtleQpwb3J0cmFpdCBvZiBhIGJlYXV0aWZ1bCBnaXJsCmdhc3BhciBub2UKYW5hbW9ycGhpYyBsZW5zIGZsYXJlcwpzb2Z0IGdyZXkgYW5kIGJsdWUgbmF0dXJhbCBsaWdodAplbmxpZ2h0ZW5tZW50CmxlYW5pbmcgdG93YXJkcyB3YXRlcmNvbG9yCmVkd2FyZCBob3BwZXIuIHNoYXJwIGZvY3VzCmJsYWNrIGxvYWZlcnMKcGluIHVwCmdob3N0IG1hc2sKY2xhc3NpY2FsIGFyY2hpdGVjdHVyZQpzdW5zaGFmdHMKZnJhY3RhbCBiYWNrZ3JvdW5kCmVtcHR5IHN0cmVldHNjYXBlcwpzb2Z0IGdyZXkgYW5kIHJlZCBuYXR1cmFsIGxpZ2h0CmNsb3RoZXMgbWFkZSBvdXQgb2YgdmVpbnMKb21icmUgdmVsdmV0IGdvd24KdmVyeSB2ZXJ5IHZlcnkgdmVyeSBiZWF1dGlmdWwhIQpzaGFsbG93IGQuIG8uIGYKY29sb3VyIGNvcnJlY3RlZAprYW9ydSBtb3JpCmRhcmshISBpbnRyaWNhdGUKZHJpbmtpbmcgdGhlaXIgaGVhcnRzIG91dApvdmVyaGVhZCBsaWdodGluZwptYWplc3RpYyBsaWdodAppbiBhIGRlbmlzIHZpbGxlbmV1dmUgbW92aWUKamFja3kgdHNhaSBzdHlsZQp3aGltc2ljYWwgYW5kIGN1dGUKZXh0cmVtZWx5IHNoYXJwbHkgZGV0YWlsZWQKYm90YW5pY2FsIHByaW50CmFueSByYWNpYWwgYmFja2dyb3VuZAp1cHBlciBib2R5IDJkIGdhbWUgYXZhdGFyCnJlYWxpc3RpYyBzaGFkZXJzCndlYXJpbmcgYSBjcm93bgphcnRicmVlZGVyCndvbWVuCndhdGVyIGRyb3BzCmFydGlzdGljIHJlY29yZCBqYWNrZXQgZGVzaWduCm1hZGUgb2YgY2xheQppbiBmcmFtZQphdXJvcmEKamV0IHNldCByYWRpbyBmdXR1cmUKb2xkIGZpbG0KZHJvbmUgZm9vdGFnZQp0ZWVuIGdpcmwKaGFpcnkgY2hlc3QKZmx1b3Jlc2NlbnQgc2tpbgpncm91bmQgZm9nCnJlYWxsdXNpb24gY2hhcmFjdGVyIGNyZWF0b3IKY2FtcGZpcmUKY2hpbGwKOCBrIC0gaCA3IDAgNApnaWdhbnRpYyBwaWxsYXJzIGFuZCBmbG93ZXJzCmN1dGUgc3VuZHJlc3MKdmlkZW8gZ2FtZSBjb25jZXB0IGFydApoYm8KcmVhbGlzdGljIDRrCmNsZWFuIHNoYXZlbiB3aWRlIGZhY2UKbGlnaHQgbm92ZWwgY292ZXIgYXJ0CnByZXNzIHBob3RvCmNoYXJjb2FsIGRyYXdpbmcKaWRlbnRpY2FsIGV5ZXMKdmVydGljYWwgc3ltbWV0cnkKZmFudGFzeSBvaWwgcGFpbnRpbmcKaGlnaCByZXNvbHV0aW9uIDRrCmdvbGRlbiByaWJib24Kc29mdCBsaW5lcwpjbG91ZHMgaW4gdGhlIHNreQpjYXVjYXNpYW4KcmVhbGlzdGljIGFydApsZW5nIGp1bgphaQpnb2xkZW4gdGltZQpzdGFyIHdhcnMgYXJ0CnNjZW5pYyB2aWV3CnJlc29sdXRpb24KZGVlcCByaWNoIGNvbG9ycwpiYXR0bGVmaWVsZCBiYWNrZ3JvdW5kCmZhY2UgdmlzaWJsZQptYXJrIGVkd2FyZCBmaXNjaGJhY2gKZXBpYyBhbmdsZQpzdGVhbXkKZ3RhIGNvdmVyIGFydApsb29raW5nIGF0IHRoZSB2aWV3ZXIKc3R1ZGlvIGt5b3RvCnNwaWRlcgpmdWxsIGNvbG91ciBwcmludApyZW1hc3RlcmVkCmRlZXAgc3BhY2UgZXhwbG9yYXRpb24KNGsgdWx0cmEKZ3JpbSBkYXJrCmh1bnRlcgozZCBvY3RhbmUgY3ljbGUgdW5yZWFsIGVuZ2luZSA1CnBhdWwgYm9ubmVyCmMgMTIuMApzdXJyZWFsIGFydAptb3VudGFpbiBpbiB0aGUgYmFja2dyb3VuZApjaHJpc3RtYXMgbGlnaHRzCmxvbmcgZXhwb3N1cmUgcGhvdG9ncmFwaApyZWFsaXN0aWMgZ3VucwphbnRvbiBzZW1lbm92CnNsaWNlIG9mIGxpZmUgYW5pbWUKYnVsZ2luZyBtdXNjbGVzCnN5bW1ldHJpY2FsIGZhY2UgZGV0YWlscwpzdGlja3kKbGVvbmV0dG8gY2FwcGllbGxvCnNoaW5pY2hpIHNha2Ftb3RvCmVwaWMgcmV0cm93YXZlIGFydApuZW5kcm9pZApleHBsb3Npb24gb2YgY29sb3IKYnJpZ2h0IGlyaWRlc2NlbnQgbGlnaHQKdGhhbm9zIHN0eWxlIHRyYWl0cwpuZW9uIGFjY2VudHMKd29uZGVyZnVsIGV5ZXMKdmFzdCBjb3Ntb3MKZnJvbnQgZmFjZSBzeW1tZXRyaWNhbApoYXNzZWxibGFkIGNhbWVyYQpoYWxsb3dlZW4gZGVjb3JhdGlvbnMKa3Vwa2EKaGltYWxheWFuIHJvY2tzYWx0IGxhbXAKbG9yZCBvZiB0aGUgcmluZyBhcnQKZmluZSBmYWNpYWwgcHJvcG9ydGlvbmF0ZQptaW5hYmEgaGlkZW8KYmVhdXRpZnVsIGFuZCBvbWlub3VzCmVtaXR0aW5nIGRpb2RlcwptYXJpbmUgbWljcm9iaW9sb2d5Cm9ubHkgaGVhZCBhbmQgY2hlc3QKc3VuYmVhbQphcnQgc3R5bGVzIG1peApnb3VhY2hlIGFuZCB3YXNoIHBhaW50cyBjb2xvcgpzaWx2ZXIgc2hhcnAgc3RyZWFtbGluZWQgYXJtb3IKbWlzY2hpZXZvdXMhISEKY29kCjIgZCBzcHJpdGVzIGFzc2V0IHNoZWV0CnJpY2ggYnJpZ2h0IGNvbG91cnMKc2tpcnQKaGlnaGx5IGRldGFpbGVkIGJhY2tncm91bmQKbnVjbGVhciBleHBsb3Npb24KZGV0ZXJtaW5lZAp0ZW1wbGVzCnQgLSBwb3NlCmZvcmVzdCBpbiB0aGUgYmFja2dyb3VuZApzY3AKc3VzcGVuc2UKY2xlYW4gZGV0YWlscwphaXJicnVzaCBzdHlsZQpyb3NzZHJhdwpjYW5hZGEKYnJ1dGFsaXNtIGFyY2hpdGVjdHVyZQphbHVtaW51bQphcnQgb2YgZW1pbGUgZWlzbWFuIC0gc2VtZW5vd3NreQphcnQgb2YgZWRvdWFyZCBiaXNzb24KYWJzdHJhY3Qgc2N1bHB0dXJlCmljZSBjcmVhbQpjaHJvbWV0eXBlCmhhbmRwYWludCB0ZXh0dXJlCnBlcmZlY3QgcHJvcG9ydGlvbnMKaGVhdnkgZ3JhaW4tcyAxNTAKbG9uZyBncmFzcwpubyBmb2N1cwpzcGFjZXNoaXBzCnZlcnkgbG9uZyBoYWlyCmhhcmRzdXJmYWNlIG1vZGVsbGluZwpmcm9tIGEgZGlzdGFuY2UKNjQgbWVnYXBpeGVscwpibHVlcHJpbnRzCtGBaW5lbWF0aWMgbGlnaHRpbmcKZnV0dXJpc3QKZ2xvd2luZyBoYWxvCnJlcHRpbGlhbgpkdW5nZW9uCm1lbWVudG8gbW9yaQp2ZXJ5IG11c2N1bGFyIG1hbGUgYm9keQplcGljIHN1cnJlYWxpc20KbW91bnRhaW5vdXMgYXJlYQpkcnVpbGxldAphaXJicnVzaCBwYWludGluZwphbmRyZWkgdGFya292c2t5CmRlYXRoIHRhcm90IGNhcmQKeW91bmcgbWFsZQpzdXBlciBoZXJvIHBvc2UKZGFwcGVkIGxpZ2h0CmJlYXV0aWZ1bCBsaWdodCBhbmQgc2hhZG93cwpzY2FyZgpjeWJlcnB1bmsgY2l0eSBiYWNrZ3JvdW5kCmNsb3VkcyBpbiB0aGUgYmFja2dyb3VuZApuZWVkbGUgZmVsdGluZyBhcnQKcm9tZQpzaG90IG9uIGZpbG0KZ3JlZW4gdGVjaG5vbG9neQpjaHJpcyBjdW5uaW5naGFtCjE5MDUKcGFnYW4Kc2VlbiBmcm9tIGJlaGluZApib2R5YnVpbGRlcgpkaWNocm9pYwplbnZpcm9ubWVudGFsIGNvbmNlcHQgYXJ0CmJsYWNrIHBhbnRzCmJlYXV0aWZ1bCBhcnR3b3JrCmZvY3VzIG9uIHB1cnNlZCBsaXBzCnBob3RvIG9mIGEgd29tYW4KZmFjZSBjZW50cmVkCmphbWVzIGplYW4gYW5kIHBldHJhIGNvcnRyaWdodApjaW5lbWF0aWMgZHJhbWF0aWMgbGlnaHRpbmcKbWFuZ2EgMTk5MApiZWF1dGlmdWwgYW5kIGFlc3RoZXRpYwpmYW50YXN5IGZvcmVzdAppbGx1bWluYXRlZCBsaW5lcwpzbW9vdGggc2hhZG93cwp2ZXJ5IGR1bGwgbXV0ZWQgY29sb3JzCmJvYiBjbGFtcGV0dApqdW5nbGUgYmFja2dyb3VuZApibG9vZCBtb29uIGVjbGlwc2UKbm8gbGlnaHQKZnVsbCAtIGxlbmd0aCB2aWV3CjEgLyAxIDIgNSBzaHV0dGVyIHNwZWVkCnN0eWxpemVkIHZlZ2V0YXRpb24KaGVyYnMKMSA4IDggMCBwaG90b2dyYXBoCnBhY2thZ2luZyBkZXNpZ24KZXhwZXJ0IGNvbXBvc2l0aW9uCnByb2Zlc3Npb25hbCByZXRvdWNoCnBsZWFzaW5nIHRvbmUgY29sb3VycwpqZWFuIGdpcmF1ZCA4IGsKcGhhbnRvbQpmYXV2aXN0CnJlYWwgaHVtYW4gZmFjZQpyZWQgZmxlc2ggc3RyaW5ncwpkZXRhaWxlZCA0IGsgcGhvdG8Kam9zZXBoIHRvZG9yb3ZpdGNoCnRyaXVtcGhhbnRseQpiaW9tdXRhbnQKZGV0YWlsZWQgd2FyZnJhbWUgZmFuYXJ0Cm9jY3VsdCBzdHVmZgpmYWRlZCBjb2xvciBmaWxtCm1hc3NhaSB3YXJyaW9yCnNoZSBpcyBhYm91dCAyIDAgeWVhcnMgb2xkCm1hbmdhIGFuZCBhbmltZSAyIDAgMCAwCmFuYW1vcnBoaWMgYm9rZWggYW5kIGxlbnMgZmxhcmVzCnNraW4gdGV4dHVyZXMKZXllLWNvbnRhY3QKaW50cmljYXRlIGluayBwYWludGluZyBkZXRhaWwKaGlnaGx5IGRldGFpbGVkIGNvdmVyIGFydApiaWcgbXVzY2xlcwphcnRnZXJtIHN0eWxlCmx1bWlub3VzIHN0ZWxsYXIgc2t5CmlzbyA0MDAKdG9tYiByYWlkZXIKc3RhaW5lZCBnbGFzcyB3aW5kb3cKYmxlbmRlciBucHIKZG9vZGxlIGFkZGljdHMKc29mdCBkaWZmdXNlIGF1dHVtbiBsaWdodHMKZ29yZ2VvdXMgZmVhdHVyZXMKdWx0cmEtaGQKbmVydmVzCnRoaWNrIGltcGFzdG8KZmFyIHZpZXcKc3dlZXQgc21pbGUKdGhyaWxsZXIKYW5uaWUgbGllYm92aXR6CmhkIDggawphZXJpYWwgc2hvdApwaG90b3JlYWxpYXRpYwp0cm9waWNhbCBpc2xhbmQKcGxhc3RpYyB0b3kKYXJjaGl2YWwgZm9vdGFnZQp3YWNreQpmbHVvcmVzY2VudCBsaWdodGluZwp2b3F1ZQo4IGsgcmVzb2x1dGlvbiA6IDAuIDgKbGVpY2EgMSAwIDAgbW0gZiAwLiA4CmJvdW5jZSBsaWdodAo0IGsgcGhvdG9yZWFsaXN0aWMKbW91c3RhY2hlCmluayBzcGxhdHRlcnMKcm91bmQgamF3CmhkIDhrCmJlYXV0aWZ1bCBsaWdodHMKZGFya3NvdWxzCmtpbSBqdW5nIGdpIHN0eWxlCnNjaS1maSBoaWdobHkgZGV0YWlsZWQKcGVyc29uYWwKYW5hZ2x5cGggZmlsdGVyCmZvb3RhZ2UKMzJrCm9zcgprLW9uCnRyZW5kaW5nIG9uIGFydHN0YXRpb24gaGQKcGhvdG9yZWFsaXN0aWMgc3R5bGUKdG9sa2llbgpwb3J0YWl0CmZsb3cKc2hhcnAgY29udHJhc3QKc29ycm93CnVucmVhbCBlbmdpbmUgM2QKd2VhcmluZyBhIGxlYXRoZXIgamFja2V0CmNyZXNjZW50IG1vb24KZmxhdCBhbmltZSBzdHlsZSBzaGFkaW5nCmdhbWVwbGF5IGZvb3RhZ2UKc3BsYXR0ZXIKYW1hemluZyBxdWFsaXR5CmNsb3NlIHZpZXcKaHVtb3JvdXMKdHJlbmRpbmcgb24gcHhpdgpzaXR0aW5nIGF0IGEgcG9uZApsaWdodCBibHVlIGV5ZXMKbWFyaWEgc3liaWxsYSBtZXJpYW4KYWx0ZXJlZCBjYXJib24KdnJheSByZW5kZXJpbmcKYm9keS1ob3Jyb3IKbm8gZ2xhc3NlcwpmZWF0aGVycyBncm93aW5nIG91dCBvZiBza2luCndoaXRlIGFtYmllbnQgYmFja2dyb3VuZAp3ZXQgc2tpbgpiZWF1dGlmdWwgbmF0dXJlCmdyYW5kIHRoZWZ0IGF1dG8KbW9kZWxpbmcKbGF5ZXJlZApwYWludGluZyBieSBzaW1vbiBzdGFsZW5oYWcKc3RyZWV0IGZpZ2h0ZXIKaWRpb3N5bmNyYXRpYwpkZWF0aCBpcyBzd2FsbG93ZWQgdXAgaW4gdmljdG9yeQptYXJnaW5hbGlhCmhpZ2h0IGRldGFpbGVkCm11dGVkIHBhc3RlbCBjb2xvcnMKYm9vayBzaGVsZgpibHVlIGFuZCB3aGl0ZQpleHRyZW1lIHBlcnNwZWN0aXZlCmd1bmRhbSBoZWFkCmxlbW9uCnZpbnRhZ2Ugc3R5bGUKYWNjdXJhdGUgZmFjZXMKbG9pbmNsb3RoCmdvbGQgb3JuYW1lbnRzCmluayBhbmQgY29sb3VycyBvbiBzaWxrCndlZWRzCmhkcnAKc3ltYm9sb2d5Cm9sZCBwYWludGluZwptYXNha2F6dSBrYXRzdXJhCnNpbmd1bGFyCm9jdGFuZSAzIGQKb2xkIHNraW4Kdm9sdW1ldHJpYyBsaWdodCBlZmZlY3QKYW5jaWVudCBydW5lcwphcnQgZGVjbyEKc29mdCBwYXN0ZWxzCnN0eWxlIG9mIGpvcmRhbiBncmltbWVyCnN0eWxlIGdhbWUgc3F1YXJlIGVuaXggbGlmZQp1bmRlcm5lYXRoIHRoZSBzdGFycwpiZWF1dGlmdWwgdGV4dHVyZQp0aGVvZG9yIGtpdHRlbHNlbgpzaG9ydCB0b3JzbwpzcG9ydCBjbG90aGluZwpibGFjayBhbmQgd2hpdGUgY29sb3IgYWVzdGhldGljCnNvbGlkIGRhcmsgZ3JleSBiYWNrZ3JvdW5kCndpdGggYmxhY2sgZXllcwp0aGljayB2aXNpYmxlIGJydXNoIHN0cm9rZXMKaW4gdGhlIGRlZXAgZm9yZXN0CmRyZWFtIC0gbGlrZSBoZWF2eSBhdG1vc3BoZXJlCnByb2Zlc3Npb25hbGx5CnJvdHRlbiB0ZXh0dXJlcwpzaGlnZXRvIGtveWFtYQpmdXJzb25hIGFydApoZWxtZXQgb24gZmFjZQpjaGluYSBkb2xsIGZhY2UKc2tpbiBjb2xvcgpiYXJvcXVlIHBvcnRyYWl0IHBhaW50aW5nCm1vZGVsIGFnZW5jeQpoYXJwZXIncyBiYXphYXIgYXJ0CmRldGFpbGVkIGdvcmdlb3VzIGZhY2UKdiAtIGZpbgpzdHJlZXQgY2xvdGhlcwpzbm91dCB1bmRlciB2aXNvcgp2YW4gaGVycGVuCnBvcCBhcnQgbG9vawpzbW9vdGggdXRvcGlhbiBkZXNpZ24KZGV0YWlsZWQgdHJpZ2dlcgpnbG93aW5nIHdoaXRlIGxhc2VyIGV5ZXMKYmx1ZSBiaW9sdW1pbmVzY2VudCBwbGFzdGljcwpzbW9vdGggc2hpbnkgbWV0YWwKMyBhY3RvcnMgb24gc3RhZ2UKaW5zYW5lbHkgZGV0YWlsZWQgbGluZXdvcmsKaGlnaGtleSBsaWdodGluZwo0ayBwYW5vcmFtaWMKYmxha2UgbGl2ZWx5CmJlYXV0aWZ1bCBmZW1hbGUKY3JlYXJ5CmVsbG8Kb3VyIGFydCBjb3JuZXIKcGVudXAKdGVhbCBwYWxldHRlCndoaXRlIHBlYXJsZXNjZW50CnRyYXNoCnBhaW50ZWQgd2l0aCBhIHBhbGV0dGUga25pZmUKZG9wCnN0cmVldCBzY2VuZQpibHVlIGplYW5zCmZvY3VzZWQgb24gaGVyIG5lY2sKZG9sb21pdGVzCmNvYndlYnMKaGlnaGx5IGRldGFpbGVkIHBob3RvZ3JhcGgKcHJvcGFnYW5kYQpzeW1ldHJpY2FsIGZlYXR1cmVzCmdvdGhpYyBob3Jyb3IKZGV0YWlsZWQgYXJ0d29yawp0aW1lCmxlZ2VuZCBvZiB6ZWxkYQpoZWF2aWx5IGRldGFpbGVkCmdpdmVuY2h5CmhvdXJnbGFzcyBmaWd1cmUKdGFibGV0b3AKY2luZW1hdGljIHBob3RvCndlYXJpbmcgYSBjYW1pc29sZQpsaWdodCBsZWFrcwpkaW9yCnBiciBtYXRlcmlhbHMKYXJ0c3RhdG9uCjRrIHF1YWxpdHkKc2hvcHMKZnJhbmsgciBwYXVsCmhvbGRpbmcgaGFuZHMKbmF2ZWwKd2F2eQpjaGluZXNlCmFwb2NhbHlwdGljIHNldHRpbmcKcmVhbGlzdGljIGNvbmNlcHQgYXJ0CmNvbXBsZXggY29tcG9zaXRpb24KNGsgcG9zdCBwcm9jZXNzaW5nCmYyCmRyYWN1bGEKY3lib3Jncwpyb2RuZXkgbWF0aGV3cwp3aWRlIGFuZ2xlIHBob3RvZ3JhcGgKY3J5cHRpZAppc2xhbmQKYXdhcmQgd2lubmluZyBmb29kIHBob3RvZ3JhcGh5Cm5vIGJhbmdzCmRhcmsgZ3JlZW4KZHJhbWF0aWMgc2NlbmVyeQpoZWFydApyaWNrIG93ZW5zCmhpZ2ggcXVhbGl0eSB3YXRlcmNvbG9ycwp2YXBvcndhdmUgc3R5bGUKcmlvdCBnYW1lcwpzdXJyZWFsIGF0bW9zcGhlcmUKdGVuZGVyCnJlYWxpc3RpYyBtYXR0ZSBwYWludGluZwpjYXZlcm4KcGluLXVwCmZ1cm5pdHVyZQpjZW50YXVyCmNoaW5hCnZpZGVvIGdhbWUgc2NyZWVuc2hvdAp3b3JsZCB3YXIgMgpnaWxkaW5nCnNub3cgc3Rvcm0KaW50cmljYXRlIG1hc3RlcnBpZWNlCmhlYWQgb25seQp4aWFueGlhCmhhbWJ1cmdlcgpibG9uZAptb3Njb3cKZGVzZXJ0IHBsYW5ldAptaWxhIGt1bmlzCnBpY3RvcGxhc21hCm1vdmllIGFydApuYXR1cmFsIHBvc2UKdG9kYXkncyBmZWF0dXJlZCBwaG90b2dyYXBoCnJldHJvd2F2ZSBlcGljIGFydApjeWJlcnB1bmsgZGFya3N5bnRoCmNvdmVyIGlsbHVzdHJhdGlvbgpoYXBweSBleHByZXNzaW9uCnZpc3VhbCBub3ZlbCBjZwpleHRyZW1lIGRldGFpbCBwaG90byBxdWFsaXR5CmluayBkcmlwcwphdCBhbiBhbmNpZW50IGNpdHkKdmVjdG9yIGJlaGFuY2UgaGQgamVzcGVyIGVqc2luZwpleHBsb3Npb25zIGluIHRoZSBza3kKYmx1ZWJlcnJ5CmxvbmcgYnJhaWRlZCBjdXJseSBibG9uZGUgaGFpcgphYnVuZGFudCBkZXRhaWwKY29sb3JlZCBiYWNrZ3JvdW5kCnZpb2xldCBwb2xzYW5naSBwb3AgYXJ0CmJyb2FkIGxpZ2h0Cm1hamVzdGljIG1vdW50YWlucwpiZWF1dGlmdWwgcGllcmNpbmcgZXllcwooICggaGFiaXRhdCA2IDcgYmFja2dyb3VuZCApICkKZ29sZCBsZWFmIGFydAptb2Rlcm4gY3liZXJwdW5rCnN0eWxpemVkIHN0bApkcmVhbSByZWNvcmRpbmcKcG9zaW5nIGVsZWdhbnRseQpuZW9uIHdpcmluZwp0aGljayBjb2xsYXIKaW4gYSBwYXJrIG9uIGFuIGFsaWVuIHBsYW5ldApzbW9vdGggc3RyZWFtbGluZQpvaWwgcGFpbnQgaW1wYXN0byByZWxpZWYKcG9ydHJhaXQgc29mdCBsaWdodAppbnRyaWNhdGUgYW5kIGRldGFpbGVkCmJhdHMKY2xheW1hdGlvbiBzdHlsZQpmaWdodCBzY2VuZQp3aXJlZnJhbWUKdm9ndWUgcGhvdG9zaG9vdApoeXBlcmRldGFpbGVkIG1ldGFsd29yawpjZW50ZXIKZmFjaWFsIGV4cHJlc3Npb24KZGlzcG9zYWJsZSBjYW1lcmEKY29tcGxleGx5IGRldGFpbGVkCjMgZCBjb25jZXB0IHJlbmRlcgpsaW5lCmxpZ2h0bmluZyBpbiB0aGUgYmFja2dyb3VuZAoxOTg0Cihzb255IGE3ciBpdgpiZWF1dGlmdWwgcGhvdG9ncmFwaHkKcm9jb2NvIHN0eWxlCnZpYnJhbnQgcmljaCBkZWVwIGNvbG9yCmJsdXNoaW5nCnNwcmluZyB0aW1lCmdvb2QgcXVhbGl0eSBwaG90b2dyYXBoeQpkc2xyIHBob3RvZ3JhcGgKYmxhY2sgc2lsa3kgaGFpcgpncmF5IGJhY2tncm91bmQKcmF5IG9mIGxpZ2h0IHRocm91Z2ggc21va2UKbmVidWxhcwpraW1hZ3VyZSBvcmFuZ2Ugcm9hZApjbG9zZSBlc3RhYmxpc2hpbmcgc2hvdApsaWdodCBza2luCnNob3J0IGJsb25kIGhhaXIKZmlyZXMKMTVtbSBsZW5zCmZhbnRhc3kgY2l0eXNjYXBlCm92ZXJoZWFkIHNob3QKaW4gdGhlIGRpc3RhbmNlCmNvc3kKbG9nYW4gY3VyZQpwYW5pYwpyZWFsaXN0aWMgZGlnaXRhbCBwYWludGluZwpjb3VydHJvb20gc2tldGNoCmRhd24gbGlnaHRpbmcKZ3JlZyBydXRrb3dza2kgc3R5bGUKdmVyeSBjdXJ2eQptYWdlbnRhCmRlYWQKZmFlCnZlcnkKZmFzaGlvbmFibGUKcGVyZmVjdCBtYXN0ZXIgcGllY2UKdmVyeSB2ZXJ5IGNsZWFuCmJ1cm5pbmcgbWFuCmh5cGVyZGV0YWlscwphenRlYwpzbmFpbHMKcnVuZXNjYXBlCm5vIGFydGVmYWN0cwpiaWcgaGVhZAphdG1vc3BoZXJpYyBlZmZlY3RzCnBlcmZlY3QgZmFjZSBtb2RlbApjcnlzdGFsbGluZQpyZWxheGluZyBvbiB0aGUgYmVhY2gKY29tcGxldGUgZGFya25lc3MKbmVvLWNsYXNzaWNhbCBjb21wb3NpdGlvbgpib2tlaC4gaXJpZGVzY2VudCBhY2NlbnRzCm1hcm1vc2V0IHRvb2xiYWcgcmVuZGVyCnl1eWEgbmFnYWkKdGltIHdhbGtlcgpjaG9rZXIgb24gbmVjawpoZWFydHMKOGsgcmVzb2x1dGlvbiDigJMgdyAxMDI0CnNtb2tlIGFuZCBtaXN0CnVsdHJhcmVsaXN0aWMKc29mdCBza2luCnBvcnRyYWl0IG9mIGFuZ2VsYSBtZXJrZWwKc3R5bGUgb2YgbWFrb3RvIHNoaW5rYWkKY29udGVtcG9yYXJ5IGNvbGxhZ2UKbXVjaGEga2xpbXQKcGFpbnRpbmcgaW4gdGhlIG11c2V1bQpjbGFzc2ljYWwgYXJ0Cndpbm5pbmcgLSBhd2FyZCBtYXN0ZXJwaWVjZQoyIDggbW0KZmxvcmFsIHdhbGxwYXBlcgptYXN0ZXJwaWVjZSBpbGx1c3RyYXRpb24Kd2l0aCBoYXVudGVkIGV5ZXMgYW5kIGN1cmx5IGhhaXIKbXVsdGlwbGUgYnJ1c2ggc3Ryb2tlcwpjaGFubmVsCmVwaWMgZmFudGFzeSBkaWdpdGFsIGFydApwaG90b2dyYXBoeSBhd2FyZG0KcGVyZmVjdCBmYWNlICkKOCAwIHMgYW5pbWUgdmliZQpzdG9ja3Bob3RvCm1pbmRibG93aW5nCmdyYWRpZW50IHJlZApnZW5lcm91cwpkcmVuY2hlZCBib2R5CmV4cG9zZWQgYm9uZQphbm4gbG9uZwpzdHJhd2JlcnJpZXMKY2VydWxlYW4gYmx1ZQpiaWcgdHdvIHRvbmVkIGV5ZXMKcGFydGljbGUKYmVzdCBvZiBiZWhhbmNlCnNlYW1sZXNzIHRleHR1cmUKY29sb3JlZCBtYXJrZXIKdGhlIGhvYmJpdCBhcnQKY2xvY2t3b3JrIHN0ZWFtcHVuawpyZWFsaXN0aWNhbGx5IHByb3BvcnRpb25lZCBmYWNlCnBheW5lJ3MgZ3JleQpzZW5zdWFsIGZlYXR1cmVzCndlYXJpbmcgc2hpbmluZyBhcm1vcgpibG9vZCBhbmQgYm9uZQpmaXNoLWV5ZSBsZW5zZQp0cnVlIGFuYXRvbXkhCmNsZWFyIGV5ZXMgbG9va2luZyBpbnRvIGNhbWVyYQp3aXRoIHNsZWVrIHNpbHZlciBtZXRhbCBhcm1vcgphZHZhbmNlZCBhcnQKdHVmdHkgd2hpc2tlcnMKbGVhbiBhbmQgdG9uZWQKZ3JhZGllbnQgZ3JlZW4Kc2VhIHBsYW50cwpzb2xkaWVyIGdpcmwKbWVkaXVtIGZ1bGwgc2hvdAoxOTkwCmluZGlhbmEgam9uZXMKY3VsdApkYXJrIHNjaS1maQpleHByZXNzaW9uaXN0Cm11c2V1bSBwaWVjZQpleHRyZW1lCmJhY2tncm91bmQgZ2FsYXh5Cm11c2NsZQpzdXJyb3VuZGluZyBjaW5lbWF0aWMgbGlnaHQKcHJvZmVzc2lvbmFsIHN0dWRpbyBwaG90b2dyYXBoeQpwaXJhbmVzaSBzdHlsZQpoIDYgNCAwCmxpbm9jdXQKd2hpdGUgYmFsYW5jZQpyZXBldGl0aW9uCmhvd2wncyBtb3ZpbmcgY2FzdGxlCmRlZXAgZm9yZXN0CmhpZ2ggY29udHJhc3QgbGlnaHRpbmcKdGFubmVkIHNraW4KaXJpcwpza2VsZXRvbnMKaGVucmkgZGUgdG91bG91c2UgLSBsYXV0cmVjCjMgZCBpbGx1c3RyYXRpb24KMyAwIDAgZHBpCnNob2NraW5nCm1lZGl1bSBjbG9zZSBzaG90CmRyZWFtcwpicmlnaHQgc3RhcnMKaXZvcnkKdmFwb3IKc2NpIC0gZmkgY29uY2VwdCBhcnQKYmlnIGNoaW4KaG93YXJkIHYgYnJvd24KcGxhaW4KZGFuIG1jcGhhcmxpbgpjb2xvciBncmFkaW5nCmZsb3JlbmNlCnN0YXJrCnJlZCB0b3JuIGZhYnJpYwpwcm9maWxlIHNob3QKZ2lhbnQgbXVzaHJvb21zCnRob21hcyBraW5jYWRlCnJldHJvd2F2ZSBhcnQKOGsgM2QKdmlkZW9nYW1lIGNvdmVyIGFydApkZXNrdG9wIHdhbGxwYXBlcgpibGluZGluZyBzdW4KZmVtYWxlIHdhcnJpb3IKYmVhdXRpZnVsbHkgaWxsdXN0cmF0ZWQKZW5jaGFudGVkIGZvcmVzdApwYW5hdmlzaW9uCmNsYXNzeQp2aXZpZCBuZW9uIGNvbG9ycwp1bHRyYSByZWFsaXN0aWMgZmFjaWFsIGRldGFpbHMKY3Jpc3B5CmJyYWlkcwptdXJhbApyZWQgYW5kIGJsYWNrCnpldXMKdGhvbWFzIGtpbmthZAp1bHRyYXNoYXJwCnB5cmFtaWRzCmljb25pYyBzY2VuZQpwaXhhciBtb3ZpZQptb3V0aCBvcGVuCnN1bnMKZ3JlZWtzCmludHJpY2F0ZSBkZXRhaWxlZCBvaWwgcGFpbnRpbmcKYmxhY2sgc3VpdApzdHJlYW1zCmxvdyBzaG90CmNoaWxkcmVuJ3MgYm9vawpwdXJlCmRyYWdvbiBza2luCmRyYWdvbiBleWVzCmFkZGljdGlvbgpnYXJnYW50dWFuCm9mZmljaWFsIGFuaW1lIG1lZGlhCnNlY2x1ZGVkCnNwYXJrbGUgaW4gZXllcwpmcmFuY2lzIGJhY29uIG1hc3RlcnBpZWNlCmNvbXBsaW1lbnRhcnkgY29sb3Vycwpwc3ljaGVkZWxpYyBnbGl0Y2ggYXJ0CnRvbSBiYWdzaGF3IGFydHN0eWxlCnNvbGFycHVuayEhIQpzaWx2ZXIgZ29sZCBkZXRhaWxzCndvb2RsYW5kCnJlYWxpc3RpYyByZW5kZXJpbmcKY2xvc2UgdXAgZmFjZQptYXJjbyBsZW5zZQphdG1vc3BoZXJlcmljCmdsYXNzIGRvbWVzCnZpY3RvciBuZ2FpCmludHJpY2F0ZSBmcmFjdGFsIGRldGFpbHMKbmVuZG9yb2lkCm1pbmcgZHluYXN0eQppbiBzaW1wbGUgYmFja2dyb3VuZApyb3R0aW5nIGZsZXNoCnN1YnN0YW5jZSBkZXNpZ25lciByZW5kZXIKNSAwIG1tIGJva2VoCmZpbmUgY2hpbmEKMSA5IDEgMCBzIHN0eWxlCmludHJpY2F0ZSBmaW5lIGRldGFpbHMKc2hlZW4KdG9ybiBwYXBlcgo5IDAgcyBhbmltZSBhZXN0aGV0aWMKcGFsZSBzbm93IHdoaXRlIHNraW4KaGlnaCBxdWFsaXR5IHBhcGVyCmZvc3NpbAptb25vY2hyb21hdGljIHRlYWwKYmlnIGNsb3VkcyB2aXNpYmxlCmNvcnJlY3QgcHJvcG9ydGlvbnMKY29sb3IgdGVhcmluZwpwcm90b3BoeXRhCm1pY3JvIC0gb3JnYW5pc21zCmJhZ2d5IGNsb3RoaW5nIGFuZCBoYXQKb2xkIGNsb3RoaW5nCnNoYXJwIGZvY2N1cyBpbHVzdHJhdGlvbiBocQpjb25maWRlbnQgcGVyc29uYWxpdHkKZGV0YWlsZWQgbWVkaXVtIGZvcm1hdCBwaG90bwo2IDAgcyBwb3N0ZXIKc2hvcnRlciBuZWNrCnNlYSBrZWxwCnBoeXNpY2FsIHBhaW50aW5nCmxhc2VycyBhbmQgbmVvbiBjaXJjdWl0cwpsaWdodCBmcmVja2xlcwpsYWR5IGdhZ2EKcGV0ZXIgbW9ocmJhY2hlciBkb25hdG8gZ2lhbmNvbGEKZGlzbmV5IGFuaW1hdGlvbgpwaG90b2dyYXBoaWMgcXVhbGl0eQp0ZWFsIG9yYW5nZQpmYW1pbHkKamFtZXMgamVhbiBzb2Z0IGxpZ2h0IDQgawpmdWxsIGJvZHkgY2FtZXJhIHNob3QKcGVyZmVjdGx5IGRldGFpbGVkIGV5ZXMKYmxlbmRlciBjeWNsZXMKdGhpY2sgZm9nCnN5bW1ldHJpY2FsIGRldGFpbHMKMyAvIDQgdmlldwoxIDkgOCA3CnN5bWJvbHMKZmVuZyBzaHUKY3JvbmVuYmVyZwpjb21tZXJjaWFsCnN5cmluZ2VzCnJvdW5kCmhpZ2ggaGVlbHMKbWFycwp3aGl0ZSBiZWFyZAp1cmJhbiBmYW50YXN5Cnl1cnUgY2FtcApwb3NpdGl2ZSBlbmVyZ3kKY2hyb21hdGljIGFiYmVyYXRpb24Kcm9zZXMgYW5kIGx1c2ggZmVybiBmbG93ZXJzCmluIGdhbWUgcmVuZGVyCmxvdyBmYW50YXN5CmJyaWxsaWFudGx5IGNvbG9yZWQKcGlyYXRlIHNoaXAKaCA3NjgKYW5pbWUgc3RpbGwKZWd5cHRpYW4Kc3RpY2tlciBpbGx1c3RyYXRpb24KY29tbWFuZCBwcmVzZW5jZQpleHRyZW1lbHkgaGlnaCBkZXRhaWxlZApob21lciBzaW1wc29uCmNvdmVyZWQgaW4gYmxvb2QKZGF6M2QKYW5pbWUgZXllcwpkZXRhaWxlZCByZWFsaXN0aWMKc29mdCBtb3JuaW5nIGxpZ2h0aW5nCmZ1bGxlc3QgYm9keQpwdXJwbGUgbGlnaHQKa3JlbnoKZnVsbCBib2R5IHBpY3R1cmUKYW1lcmljYW4gZ290aGljCmdydW1weQppbnRyaWNhdGUgZGV0YWlsaW5nCmthaWp1CnN0b25lcwpzYWZlIGZvciB3b3JrCm1lZGl1bSBjbG9zZS11cAp3d2lpCmZyYWN0YWxzIGluIHRoZSBiYWNrZ3JvdW5kCnZpbmNlbnQgY2FsbGViYXV0CmhpZ2ggZmFzaGlvbiBoYXV0ZSBjb3V0dXJlCmdlbnRsZSBzbWlsZQpwcmF5aW5nIG1lZGl0YXRpbmcKd2FyIHBob3RvCm9yaWdpbmFsIG1vZGVybiBhcnR3b3JrCnN1cGVyIGRldGFpbApoZWFkIHBvcnRyYWl0Cm5hdHVyYWwgc2tpbgpwYXNzaW9uCmdhbmRhbGYKaGVsbGZpcmUKbm8gZXllcwptYWRlIG9mIGZlYXRoZXJzCnZpb2xldCBldmVyZ2FyZGVuCnRpcmVkIGV4cHJlc3Npb24KZmV3IGNsb3VkcwpqYW1lcyBqZWFuIGFuZHJlaSByaWFib3ZpdGNoZXYKc3BhY2UgbWFyaW5lCnRvb25hbWkKd29sZmVuc3RlaW4KYWRhbSBzbWFzaGVyCmNocmlzIG1hcnMKdGFsbCBncmFzcwpub3JtYW4gcm9ja3dlbGwgagphZGFmcnVpdApoaWdobHkgZGV0YWlsZWQgdmZ4IHBvcnRyYWl0CmtlbG9nc2xvb3BzIGFuZCBncmVnIHJ1dGtvd3NraQphY2lkIHBpeGllCm1hZ25vbGlhCmh1bWFub2lkcwpzcGxhdHRlciBwYWludApiZWF1dGlmdWwgc3VubGlnaHQgYW5kIHNoYWRvd3MKZGFuIGRlY2FybG8KZGFyayBob2xvZ3JhcGh5ISEhCmFsYmlubyBza2luCnN0YXJpbmcgZGlyZWN0bHkgaW50byBjYW1lcmEKY3liZXJwdW5rIGFkcwp1cHdhcmQgY2luZW1hdGljIGFuZ2xlCjEgOCA5IDAKaW4gYSBwYXJrIG9uIGEgYWxpZW4gcGxhbmV0CnZpYnJhbnQgY29sb3JzIGFtZXJpY2FuYQpjaW5lbWF0aWMgZmFudGFzeSBwYWludGluZwpzdW5yaXNlIGxpZ2h0aW5nCmRldGFpbGVkIHBvcnRyYWl0cwpjeWJlcnB1bmsgZmFzaGlvbgpuaWNvbGEgc2FtdXJpCmdvbGQgZnJhY3RhbCBkZXRhaWxzCnBhY2thZ2luZyBvZiB0aGUgd29ybGQKcG9ydHJhaXQgb2YgYSBnaXJsCnBydXNzaWFuIGJsdWUKc3RlcGhlbiBzaG9yZSAmIGpvaG4gai4gcGFyawpoaWdobHkgZGV0YWlsZWQgZXRjaGluZwpzZW5uaGVpc2VyCmJlcmdoYWluCnZvbHVtZXRyaWMgbGlnaHRpbmcgY2F1c3RpY3MKY29ycnVwdGlvbgpyYWRpb2xhcmlhCm1pbGl0YXJ5IGNocmlzIGZvc3MKZ2lybCBpbiBhIHN1aXQKb2ZmLWNhbWVyYSBmbGFzaApzdHlsaXNlZCBpbGx1c3RyYXRpb24KZmxhdGxheSBib29rIGNvbGxlY3Rpb24Kam9obiBibGFuY2UKbGFjaXZpb3VzIHBvc2UKcGF0dGVybmVkIHRpbGV3b3JrCnBpeGFyIDggayBwaG90bwpzZXh5IHBvc2UKbWFnaWNhbCBsaWdodGluZwptaWRkbGUgYWdlcwpkYXBwbGVkIGxpZ2h0aW5nCmZ1amkgZmlsbQp0aGVvcGhhbmljIGF0bW9zcGhlcmUKdmVyeSBzZXh5IHBvc2UKd29ybgp0ZW5zZQp2aXNpYmxlIGJydXNoIHN0cm9rZXMKZnJvc3QKZ2xvc3N5IGludHJpY2F0ZSBkZXNpZ24Kdm9sY2FubwphdXRoZW50aWMKd2lzcHkgc21va2UKbmV3c3BhcGVyCnN0b25lIHdhbGxzCmZyZWVkb20Kc21vb3RoIHRpbnkgZGV0YWlscwphdXJhCnBpbmsgYmFja2dyb3VuZApsZWljYSBzbDIgNTBtbQpoaWdoLXJlcwoyawpwdXJwbGUgYmFja2dyb3VuZApiZWF1dGlmdWwgc29mdCBsaWdodGluZwpzdGFyY3JhZnQKZ3JhZGllbnQgYmFja2dyb3VuZAppbi1nYW1lIHNjcmVlbnNob3QKdWx0cmEgcmVhbGlzdGljIHJlbmRlcgpkYXJrIGJyb3duIGV5ZXMKYmx1ZSBhbmQgZ29sZApoaWdoIGRldGFpbGVkIGxpZ2h0IHJlZnJhY3Rpb24Kd2l0aG91dCBkdXBsaWNhdGlvbgoxIDkgOCAwCmNpdmlsaXphdGlvbgpociBnaW5nZXIKamFuIHN2YW5rbWV5ZXIKY2xhc3NpY2lzbSBzdHlsZQptb3Jyb3dpbmQKYnJlYXRodGFraW5nIGNsb3VkcwpkcmVhZGZ1bApncmVlbiBkcmVzcwptaWFtaQp0aHVuZGVycwpkYXZpIGJsaWdodApjcmF5b24KbXV0ZWQgdG9uZXMKc2NpLWZpIGFydApodW1vcgpyb2JlCmdvb2QgY29tcG9zaXRpb24KZmxhc2hpbmcgbGlnaHRzCnRvcGF6IGFpCndvb2RlbiBmbG9vcgphbGxleXdheQpvZmZpY2UKc3Vic3VyZmFjZSBzY2F0dGVyCnJpYmJvbnMKZ3JhaW55IGZvb3RhZ2UKaGQgaW1hZ2UKcmFpbmJvdyBsaWdodGluZwplbGRlbiByaW5nIGJvc3MKY25uCmdvbGRlbiBob3VyIDhrCmFuY2llbnQgcnVzc2lhbiBhcmNoaXRlY3R1cmUKdnIKZ2xpdGNoZWQKYW4gaW50cmljYXRlCmVwaWMgdmlzdGEKb2lsIHBhaW5pbmcKY3J5c3RhbGxpYwp0b2VpIGFuaW1hdGlvbgpmbHVmZnkgdGFpbAptZWRpZXZhbCBnbG9iZQpndXRzCmJsYWNrIGNhdAprb2p1IG1vcmltb3RvCmNyb3dkcyBvZiBwZW9wbGUKc2hpZ2Vub3JpIHNvZWppbWEKc3RyZWV0IGxpZ2h0cwptYXN0ZXIgc2hvdApmcmFjdGFsIGFydApzcGF0dGVyCnJvYm90aWMgYXJtcwpmdW5ndXMKaGVhZCB0byB0b2UKZ2xvd2luZyBwYXBlciBsYW50ZXJucwpvdG9tbwprcG9wCnN0eWxlIG9mIHlvc2hpdGFrYSBhbWFubwpvYmFtYQpvdmVyZ3Jvd3RoCnN0aXBwbGluZwpzZWR1Y3RpdmUgbGFkeQpwaG90b3JlYWxpc3RpYyBwaWN0dXJlCmFnZ3Jlc3NpdmUKYnJvd24gbGVhdGhlciBqYWNrZXQKbGFuZCByb3ZlciBkZWZlbmRlciAxMTAgKDE5ODUpCnNhaW50IHdvbWFuCmxpdmUgYWN0aW9uIGZpbG0Kc2xpY2sKb3JnYW5zCnBvcnRyYWl0IG9mIGVtbWEgd2F0c29uCmVuZ3JhdmVkCm9ybmF0ZSBhcmNoaXRlY3R1cmUKd2l0aCBoYXVudGVkIGV5ZXMgYW5kIGRhcmsgaGFpcgpsZW90YXJkCmlyaWRlc2NlbnQgY29sb3IgcGFsZXR0ZQpjeWJlcm5ldGljIGltcGxhbnRzCmdsYXNzIHBhbmVzCndhcm0gY29sb3IKIyBwaXhlbGFydAp2YXBvcndhdmUgbm9zdGFsZ2lhCm1haXNvbiBpa2tva3UKYXN0cmkgbG9obmUKbmVvIGV4cHJlc3Npb25pc20Kc2xlZWsgY3VydmVzCm1lZGljYWwgYW5hdG9teQptaWxsaW9uIG9mIGxpa2VzCmFvc2hpbWEKNCBrIGRyYXdpbmcKMSA5IDIgMCBzIHN0eWxlCnBhdHJpY2sgZmF1bHdldHRlcgpoaW50IG9mIGZyZWNrbGVzCmdyYWRpZW50IGJsdWUKYm9yZGVyZWQKbW9vZHkgaWNvbmljIHNjZW5lCmhlcm9pYyBwb3N0dXJlCnlvdW5nIGdyYXZ1cmUgaWRvbAp2aW50YWdlIHJldHJvIHNjaWZpCnVsdHJvbgpwaW50ZXJlc3Qgd2FsbHBhcGVyCmJpbmFyeQpwcm9wZXIgaHVtYW4gcHJvcG9ydGlvbnMKcHJvcG9ydGlvbmFsIG9iamVjdCBjb250ZW50Cm9tb2lkZSBlbWFub24KZmVhdHVyZWQgb24gYW1pYW1pCm1hbW9ydSBvc2hpaQpzdW4gYmVhbQpzdHJhaWdodCBiYW5ncwp3ZWFyaW5nIGJsYWNrIGJ1c2luZXNzIHN1aXQKamVhbiAtIGxlb24gZ2Vyb21lCmVtb3Rpb25hbCBsaWdodGluZwptYW55IHJhaW5ib3cgYnViYmxlcwpleHRyZW1lbHkgZGV0YWlsZWQgZ29yZ2VvdXMgZmFjZQpkcmF3aW5nIGFyY2hpdGVjdHVyZQpiZWVyIG11ZyBpbiBoYW5kCnJiYwpzdWJnZW5pdXMKeCAtIGRheQpwb3YgZnVycnkgYXJ0CmNhbWlsbGUgdml2aWVyCnN0aXBwbGVkIGxpZ2h0aW5nCmJsYWNrIG1ldGFsIHJvY29jbwpyYXcgZW1vdGlvbgpoZWFydGhzdG9uZSBzdHlsZSBhcnQKOCAwJ3MgbW92aWUgcG9zdGVyCmVwaWMgYWxidW0gY292ZXIKcHJvcCByb2Nrcwpnb3VhY2hlIGFuZCB3YXNoIHBhaW50cwptdWx0aSBsYXllcmVkIHRoaWNrIGJydXNoIG1hcmtzCmFuZHJvaWQgYm9keQpwZXJmZWN0bHkgY2VudGVyZWQgcG9ydHJhaXQKMTkwMOKAmXMgcGhvdG/igJ0KdHJhdmVsIHBob3RvZ3JhcGh5CnNlc2VvbiB5b29uCmFydGdlcm0gYW5kIHdhcnJlbiBsb3V3CmJid2NoYW4Kc21vb3RoIGNhdmUgcm9jawp0cmVuZGluZyBvbiBhcnRpc2F0aW9uCnVzc3IKdmVyeSBhdHRyYWN0aXZlCnJvYm9jb3AKODBtbSBsZW5zCnF1aXhlbCBtZWdhc2NhbnMKZGV0YWlsZWQgc2lsaG91ZXR0ZQpkYXJrIHJvb20gd2FsbApjcmFja2VkCmhvcnJvciBzdHlsZQpkb2xwaGlucwpzYXR1cmF0ZWQgY29sb3VycwpzdHVubmluZyBncmFkaWVudCBjb2xvcnMKYXQgbmV0ZmxpeApnb3JnZW91cyBjbG91ZHMKa2luZydzIHF1ZXN0CjQgayBpbWFnZQpsdXh1cnkgZmFzaGlvbiBpbGx1c3RyYXRpb24KY2luZXN0aWxsIDgwMHQgMzVtbQpkcmliYmJsZQpkYXJrIGR1bGwgY29sb3JzCmxvc3NsZXNzIHF1YWxpdHkKc3VwZXJiIHJlc29sdXRpb24KYnJpZ2h0bHkgbGl0CmZsZXNoIG9ybmF0ZQpibGFjayBsaWdodAprYXRhbmEKaGlnaHdheQphcmNhbmUgbWFnaWMKZnV0dXJlIHRlY2gKc3ltZXRyaWMKbWVkaWV2YWwgc3R5bGUKbGVyYXBpCmFpcnkKcmljaCBkZXRhaWxzCnB1cnBsZSBvdmVyYWxsIHNob3J0cwpoaWdoIHRlY2ggZmFudGFzeQpzdXBlciBzaGFycApycGcgYXJ0d29yawpmbG93ZXJzLiBiYXJvcXVlIGVsZW1lbnRzCmdhbWVzIHdvcmtzaG9wCmZvcm1hbApzY2llbnRpZmljYWxseSBhY2N1cmF0ZQpjb21meQplbnZpcm9ubWVudCBjb25jZXB0IGFydApncm91bmQtYnJlYWtpbmcKc2xpZ2h0bHkgY29sb3JmdWwKZm9jdXMgZmFjZQphZXN0aGV0aWNzCnR2IHN0aWxsCmh5cGVycmVhbGlzdGljIHBob3RvZ3JhcGgKdmVyeSBleHByZXNzaXZlCnNwZWN1bGFyIGxpZ2h0CndpZGVzY3JlZW4gcmF0aW8KbXlzdGVyaW91cyBhdG1vc3BoZXJpYyBsaWdodGluZwphbnViaXMKd2lkZSBhbmdsZSBkeW5hbWljIHBvcnRyYWl0CmF6YW1hdCBraGFpcm92CmF0dHJhY3RpdmUgbWFuCjo6CmRpZSBjdXQgc3RpY2tlcgpvbiBibGFjayBiYWNrZ3JvdW5kCnBvbGx1dGlvbgpzYWt1cmEKY3VyaW9zaXRpZXMgY2Fybml2YWwKaW1hZ2luYXRpb24KY2FzZXkgd2VsZG9uCmxpZ2h0IGFuZCBzaGFkb3dzCm5pbmphCmhwIGxvdmVjcmFmdApmcmVuY2ggaW1wcmVzc2lvbmlzbQpzYW5keQpvYnNjdXJlCmxvZmkgY29sb3JzCmxhcmdlIGJydXNoIHN0cm9rZXMKbG9uZyBzdHJhaWdodCBoYWlyCmludHJpY2F0ZSBhYnN0cmFjdC4gY3liZXJwdW5rCmh5cGVyIHJlYWxpc3RpYyBwYWludGluZwpvbGQgcGFwZXIKd2VhcmluZyBmdXR1cmlzdGljIGFybW9yCmZ1bGwgZGV0YWlsCmNlbnRlciBmb2N1cwp4cmF5CmZyb20gYSBzY2VuZSBmcm9tIHR3aW4gcGVha3MKY3PDs2sgaXN0dsOhbgplZHZpZ2UgZmFpbmkKNSBrIGV4dHJlbWVseSBkZXRhaWxlZApleHRyZW1lIHJlYWxpc20gYW5kIGRldGFpbApmZW1pbmluZSBmYWNpYWwgZmVhdHVyZXMKbWVkaXVtIHNpemVkIHRhdHRvbyBza2V0Y2gKbHVtaW5vdXMgaGFsbwpncmVhdCBzcGFjZQpmIDEuIDIKdHJlbmRpbmcgb24gYXRyc3RhdGlvbgpnbGVubiBicm93bgpleHBlbnNpdmUgdmlzdWFsIGVmZmVjdHMKcmF5Z3VuIGdvdGhpYwp3ZXQgZHJpcHBpbmcgaGFpcgpzaG91bGRlciBleWVzCmVwaWMgYW5pbWUgZmFudGFzeQphcnQgbWF0ZXJpYWxzCm0uIHcuIGthbHV0YQpjYXVsZmllbGQKbGFyZ2UgdHJpYW5ndWxhciBzaGFwZXMKd2l0aCBwcm9mZXNzaW9uYWwgbWFrZXVwCmludGVyZXN0aW5nIGFuZ2xlCndldGEgc3R1ZGlvCmZsYXQgc2hhcGVkIGNocm9tZSByZWxpZWYKcmVhbGlzdGljIHdlYXBvbgpibHVlIGFuZCBibGFjawpmcmVxdWVuY2llcwpzdHJvZ2cKZWxlZ2FudCBmcmVja2xlcwppbnRlY3JhdGUgZGV0YWlscwphLXBvc2UKY29sb3JmdWwgcGlndGFpbAptb2Rlcm5pc3QgaGVhZHBob25lcwpmaW5lIGJvZHkgcHJvcG9ydGlvbmF0ZQptYXcgYXJ0CmN5YmVyIGphcGFuIGFybW9yCmV4Y2l0aW5nIGV4cHJlc3Npb24Kc3VubnkgbW9ybmluZyBsaWdodApzZXQgMSA4IDYgMAp2aXNpYmxlIHNreSBhbmQgc3VubnkgYXRtb3NwaGVyZQptb3JlIGFuZCBtb3JlIGZsb3dlcnMKd2hpdGUgY2F0IGdpcmwKMSAyIGsKbHVja3kgc3RhcgpzY2kgLSBmaSBlbnZpcm9ubWVudApjYXB0aXZhdGluZyA4IGsgaGRyCmh1bWFuIGV5ZXMKbWFybW9zZXQgdG9vbGJhZyByZW5kZXJlZApsZWdlbmQKcnViZW5zCjEgOCAwIDAgcwpzaXR0aW5nIGluIGEgY2hhaXIKY2FjdHVzCmNlbnRlciBjb21wb3NpdGlvbgpzbW9vdGggM2QgaWxsdXN0cmF0aW9uCjhrIGFydGlzdGljIDE5MjBzIHBob3RvZ3JhcGh5Cmx1Y2llbiBydWRhdXgKcm9sZiBrbGVwCm5pZ3JlZG8Kc21va2luZyB3ZWVkCmZyb250YWwgcG9ydHJhaXQKZWxlZ2FudCBjbG90aGVzCmZsb2F0aW5nIHBpZWNlcwp1cHBlciBib2R5IHNob3QKb25lIHNpZGUgaGFpcmN1dAoxIDYgbW0gbGVucwpsb3cgcG9seSBhcnQKdmludGFnZSBsb29rCnBlbiBsaW5lcwpwaXhhciByZW5kZXJtYW4gcmVuZGVyCmRyYW1hdGljIGxhbmRzY2FwZQpjaW5lbWEgNGQgcmVuZGVyCm1pbGt5d2F5CmVtbWEgc3RvbmUKd2VsbCBwcm9wb3J0aW9uZWQKcmljaCBjb2xvdXJzCmluc3RhZ3JhbSBwb3N0Cm11c3RhcmQKYmFsYWNsYXZhCmFyY2hpdGVjdHVyZSBwaG90b2dyYXBoeQpmZWV0Cm92ZXItZGV0YWlsZWQgYXJ0CmdhbWUgY2hhcmFjdGVyCnNpdHRpbmcgZG93bgpkcmFnb25zCnRoZSB1bml2ZXJzZQpncm91bmQgbWlzdAp3ZWFyaW5nIGEgYmxhY2sgamFja2V0CmRyYW1hdGljIGNhbWVyYSBhbmdsZQpoYXJsZXkgcXVpbm4KMTZtbSBsZW5zCmxpZ2h0IHRocm91Z2ggdGhlIG1pc3QKbm8gbWFzawpyZWQgc21va2UKb3JhbmdlIG1pc3QKYWFhIGdyYXBoaWNzCmNoaWxkCmp1aWN5IGxlZ3MKcGFwYXJhenppIHBob3RvCnB1bmsgYXR0aXR1ZGUKY29uY2VwdCBhcnQgY2hhcmFjdGVyCmZyaWVuZHNoaXAKdW5mYXRob21hYmxlIGhvcnJvcgpzY2FyeSBsaWdodGluZwpnZXN0dXJlIGRyYXcKY291cGxlCmNvbG9yZnVsbCBkaWdpdGFsIGZhbnRhc3kgYXJ0CmJvdGFueQpydWxlLW9mLXRoaXJkcwpubyBjb2xvcgpjb21pY2FsCmJsdWUgZmlsdGVyCmZhc2hpb24gc3R5bGUKbW9oYXdrCmFsaWVuIHRlY2hub2xvZ3kKYWR2YW5jZWQgY2l2aWxpemF0aW9uCnNtdWcKZGVpdHkKYm9keWhvcnJvcgpjeWJlcnB1bmsgY29sb3JzCmJlYXV0aWZ1bCBhbWJpZW50IGxpZ2h0Cm9pbCBpbiBjYW52YXMKMSA4IDUgMCBzCmZ1bGwgYm9keSBjaGFyYWN0ZXIgY29uY2VwdApzdXJyZWFsIGxhbmRzY2FwZQpzaG90IG9uIHNvbnkgYSA3IGlpaQptYXJ5IGphbmUgYW5zZWxsCmhvbGRpbmcgbWFnaWMgZmxvd2VycwpzdHVkaW8gZ2hpYmxpIHBhaW50aW5nCmJyZWFrdGhyb3VnaCBpcyBpbWluZW50Cmdsb3J5IGJlIHRvIHRoZSBtYWdpYyB3aXRoaW4KYWxsIHNlZWluZyBleWUKcmFpbmJvdyBmaXJlZmxpZXMKYmlsbGlvbnMgb2YgZGV0YWlscwp2ZXJ5IHRhc3R5CnN1bm55IHNreSBiYWNrZ3JvdW5kCmJsb2NreQpnb2xkIGFybW91cgpzdGFubGV5IGt1YnJpY2sgdGhlIHNoaW5uaW5nCnRyZW5kaW5nIGFydApodW1vcm91cyBpbGx1c3RyYXRpb24KYXJjaGlsbGVjdCBjb25jZXB0IGFydApnbGFjaWVyIGxhbmRzY2FwZQpyb2NrYWJpbGx5IHN0eWxlCnBvcnRyYWl0IGJ1c3QKc21vb3RoIGdsb3dpbmcgc2tpbgp0ZWV0aCBncml0dGVkCmYgLyAxLiAyIDUKaGlnaGx5IGRldGFpbGVkIG9iamVjdCBjb250ZW50CmR1cnR5IGNvbG91cnMKZXhwb3NlZCBtZWNoYW5pY3MKZHluYW1pYyBwaG90b2dyYXBoeQppbnRyaWNhdGUgYW5kIHZlcnkgYmVhdXRpZnVsCndhbGtpbmcgdXByaWdodCBpbiBhIGZvcmVzdAppbnRyaWNhdGUgc2V0CmZhY2Ugb2YgYSBtYW4KYmVhdXRpZnVsIGFuZHJvaWQgd29tYW4Kc3dpcmxpbmcgc21va2Ugc2hhcGVzCmdvdGhpYyBhbmQgYmFyb3F1ZQppbiBzdHlsZSBvZiB6ZHppc8WCYXcgYmVrc2luc2tpCnJlZGRpc2ggaGFpcgpzaGFycCBzaWx2ZXIgYXJtb3IKZmFjZSBpbiB0aGUgc2hhZG93cwpibGFjayBpbmsgJiBjb3BpYyBtYXJrZXJzCmN1bHQgb2YgdGVjaG5vbG9neQptYXN0ZXJwaWVjZSBjb25jZXB0IGFydAp0aW55IGZlZXQKZ3JvdW5kIGFuZ2xlIGhkIDggawpibGFjayBsZWF0aGVyIGhhcm5lc3MKbGl2ZSBjb25jZXJ0IGxpZ2h0aW5nCjUgMCdzIHZpbnRhZ2Ugc2NpIC0gZmkgc3R5bGUKZXBpYyBjaW5lbWF0aWMgbWF0dGUgcGFpbnRpbmcKc2hvcnQgcmVkIGhhaXIKY3Jvc3MKc2hpbmluZyBsaWdodAp0cmFpbGVyLXRyYXNoIGxpZmVzdHlsZQo0ayBoaWdoIHJlc29sdXRpb24KcmVhZGluZyBhIGJvb2sKaHlwZXJlYWxpc20KY2FtZXJhcwp5b2thaQphcmNoaXRlY3R1cmUgZGVzaWduCmxhbXAKYWxleGlzIGZyYW5rbGluCmN1dCBvdXQgY29sbGFnZQpyb2xsZWlmbGV4CnNxdWFyZSBmYWNlCnNtb290aCBhbmR5IHdhcmhvbCBzdHlsZQphaXJzaGlwCm9uIHN0YWdlCmJsb2NrY2hhaW4KbGlnaHQgYmx1ZQpjb29raW5nCmNsZWFuIGJhY2tncm91bmQKaW50cmljYXRlIGZhY2lhbCBza2luIGRldGFpbHMKc2hhbGxvdyBkZXB0aCBvZiBmb2N1cwpwaG90byByZWFsaXN0aWMgaW1hZ2UKc2hvdCB3aXRoIHNpZ21hIGYvIDQuMgoyNTAgbW0gc2hhcnAgbGVucwpyYXlzIG9mIHN1bmxpZ2h0CndpZGUgY2hpbgphZnJpY2FuCmV5ZWxpbmVyCnBpcmF0ZQpkaXNob25vcmVkIGdhbWUKbGlnaHQgZnJvbSBhYm92ZQpiZWF1dGlmdWwgc2t5CmNvcnBvcmF0ZSBwb3J0cmFpdAo0ayBoZCB3YWxscGFwZXIKdmlvbGV0CmluIGEgZGFyayBmb3Jlc3QKYW5hbG9nIHBob3RvZ3JhcGh5CnN1biBmbGFyZQpwb2ludHkgamVzdGVyIHNob2VzCmJsZW5kZXIgM2QKc2hlIGlzIGhhcHB5Cm1hcmNpbiBydWJpbmtvd3NraQphdHRyYWN0aXZlIGNoYXJhY3RlcgpwYXBlcgpwb3NpdGl2ZSB2aWJlcwpjaXR5IHN0cmVldHMKZXBpYyBjaW5lbWF0b2dyYXBoeQpoYWRlcwpzaGllbGQKc3VuIGluIHRoZSBza3kKc2hhbGxvdyBkb2YKdmVyeSBkZXRhaWxlZCBwYXJhZGlzZQpmcm9tIHRoZSB3YWlzdCB1cApnb2xkIGxlYWYKdG93bgpjdXRlIHRvcApoaWdoIHF1YWxpdHkgcHJpbnQKYm9yaXMgam9obnNvbgpsdXNoIGZvcmVzdApmcmVuZXRpYwp3YXRlciB0byB3YXN0ZQpzb3ZpZXQgcHJvcGFnYW5kYQpoYXdrZXllCmJlYXV0aWZ1bCB5b3VuZyB3b21hbgptZWFkb3cKbHNkIHZpc3VhbHMKZmFsbGluZyBzbm93Cm9oCmhpZ2x5IGRldGFpbGVkIGJsYWNrIGluayBvdXRsaW5lCmxvb2tpbmcgYXdheSBmcm9tIHRoZSBjYW1lcmEKbmFpdmUKaW5mZXJubwpkaW0Kc3Bpcml0ZWQgYXdheQpjZ2kgYW5pbWF0ZWQKZGVlcCBzZW5zZSBvZiBzcGlyaXR1YWxpdHkKc3dhZwpqaW0gaGVuc29uCmRhcmsgZW52aXJvbm1lbnQKdGFsbCB3aW5kb3dzCnRyYWRpbmcgY2FyZApwb3J0cmFpdCBvZiBhIHJ1Z2dlZCByYW5nZXIKc3ltbWV0cmljYWwgbG9uZyBoZWFkCnJ1c3RlZCBzdGVlbApkZXRhaWxlZCBjbG91ZHMKdmVyeSB2ZXJ5IGxvdyBxdWFsaXR5CmZlZXQgb24gdGhlIGdyb3VuZApzb2Z0IGNvbG9yIGRvZGdlCmtvbmFtaQphZ2dyZXNzaXZlIGhlYWQKdmVyeSByZWFsaXN0aWMgZWZmZWN0CnNuYWtlIGhlYWQKaW50cmljYXRlIHN0YWluZWQgZ2xhc3MKdHJlbmR5CmF0b21pYyBwdW5rCmRyYXduIGluIHRoZSBzdHlsZSBvZiBtYXJrIGFyaWFuCnNtdWcgZXhwcmVzc2lvbgp3aGl0ZSBzbW9rZQpqLiBjIGxleWVuZGVja2VyCmxvb2tpbmcgc3VycHJpc2VkCmNoYXJsZXMgdmVzcy4gaGlnaCBkZXRhaWwKamFrdWIgZ2F6bWVyY2lrCmdpbnRhcyBnYWx2YW5hdXNrYXMKZXhwbG9zaW9uIGRyYXdpbmcKbHVjaWVuIGZyZXVkCmZyYWN0YWwgZ2Vtcwpjb25jZXB0IGFydCA4IGsKZWFybGUKbG9uZyB0cmlwcHkgaGFpcgpzeW50aGV0aWMgY3VydmVzIHN0cmlraW5nIHBvc2UKbWV0YW1vcnBob3NlCmhvcnJvciBjb3JlCnN1YnRyb3BpY2FsIGZsb3dlcnMgYW5kIHBsYW50cwphdWRpb3BoaWxlCmJlYXV0aWZ1bCByZWRoZWFkIHdvbWFuCm5lcnZlIGNlbGxzCmhlcm9pYyBjb21wb3NpdGlvbgptZXJnZWQgY2hhcmFjdGVyCmNvbG9ubmFkZQpmb3NzaWwgb3JuYW1lbnRzCmJvbGQgY29udG91ciBsaW5lcwpzb2Z0IHR3aXJscyBjdXJscyBhbmQgY3VydmVzCm1pbmltYWxpc3NpbW8KcnBnIGNoYXJhY3RlciBhdmF0YXIKY2xlYXIgZmFjaWFsIGRldGFpbHMKZWthc3BvcnRhbApmcmFjdHVyZQpmdXR1cmUgY29kZXIgbWFuIGxvb2tpbmcgb24Kd2VhcmluZyBzaWx2ZXIgc2lsayByb2JlCnNpdHRpbmcgZHluYW1pYyBwb3NlCnBob3RvbWFuaXB1bGF0aW9uCmhvdCBzcHJpbmdzIGhpZGRlbiBjYXZlCmZsYXNobGlnaHQKY3liZXJwdW5rIHBpbmN1c2hpb24gbGVucyBlZmZlY3QKc2tldGNoYm9vawppbnNhbml0eQppbiB0aGUganVuZ2xlCnNjaG5hcHBzCmlucXVpc2l0aXZlCnRoaWNrIGhlYXZ5IGltcGFzdG8Kc2hhcnAgZm9jdXMgdWhkIDggawoxIDcgbW0Kd2VhcmluZyBhIGRlc2lnbmVyIHRvcApsb3N0IHBob3RvZ3JhcGgKc3RhdHVlcwp2YXJpYXRpb25zCmFmcm8gaGFpcgp3ZWFyaW5nIGEgZHJlc3MKYW5pbWUgbWFjaGluZSBndW4gZmlyZQoxOTg1CmxhcmdlIGNhbGliZXIgc25pcGVyIGZpcmUKYmVuZWRpY2sgYmFuYQpiZWlnZSBjb2xvcnMKdmhzIGZvb3RhZ2UKaGV4YWdvbmFsIG1lc2ggd2lyZQptaXN0eSBiYWNrZ3JvdW5kCnNpbnVvdXMgZmluZSByb290cwpzaW5raW5nIHVuZGVyd2F0ZXIKc2lsdmVyIGdvbGQgcmVkIGRldGFpbHMKbWVkaWV2YWwgY2l0eQprb2RhayBla3RhcgpicmlnaHQgc3VubnkgZGF5Cm9yY2hpZHMKbWVkaXRhdGluZwpnaW5nZXIgY2F0CmQmZCBzdHlsZQp3YXJtIHZvbHVtZXRyaWMgbGlnaHRpbmcKYmxhY2sgbWFrZXVwCnN1bW1lciB2aWJlcwphdG1vc3BoZXJpYyBzY2VuZQptYXJpbwoyNzAwawpub2lyIGZpbG0Kb3ZlcnNhdHVyYXRlZApjb3NtaWMgYmFja2dyb3VuZAp0YXR0b29lZApleHRyZW1lIHJlYWxpc3RpYyBkZXRhaWwKdWhkIDhrIGNyeWVuZ2luZQppbXByZXNzaW9uaXN0aWMKdGhyZWUgY29sb3JzCmlzb21ldHJpYyBpbGx1c3RyYXRpb24KZmluYWwgZmFudGFzeSB4aXYKb2xkIHNjaG9vbApsb3JlbnpvIGxhbmZyYW5jb25pCnJvYmUuIHBlcmZlY3QgZmFjZXMKc2l0dGluZyBvbiBhIHRocm9uZQphbnlhIHRheWxvci1qb3kKZW1pbGlhIGNsYXJrZQp3ZWFyaW5nIGEgc2hpcnQKb2ZmaWNpYWwKdGhlIHdhbGtpbmcgZGVhZApjdXRlIGV5ZXMKY2FuZGlkIHBob3RvCmZhciBmdXR1cmUKaGVhcnRoc3RvbmUgb2ZmaWNpYWwgc3BsYXNoIGFydAptb3RvcmN5Y2xlCmh1bWFub2lkIHBvdgpsYXJnZXN0IGhhdW5jaGVzIGV2ZXIKY29tcGVsbGluZwpmdWxsIGJvZHkgYWN0aW9uIHBvc2UKd2hpdGUgZ2xvd2luZyBleWVzCnBva2Vtb24gc3R5bGUKYW5pbWUgcG9zdGVyCmJlaWdlCnBhaW50ZXJseSBmZWVsaW5nCmNyYXlvbnMKc3RpbGwgZnJvbSBicmVha2luZyBiYWQKbm9yd2F5CmxvdHMgb2YgcGVvcGxlCnNob3QgZnJvbSBiZWxvdwpkZWVwIGJsYWNrcwpwaWVyY2luZyBnbG93aW5nIGV5ZXMKb3ZlcndhdGNoIGNoYXJhY3Rlcgp0aGUgc2hpcmUKZWxlZ2FudCBnaXJsCm92ZXJsb3JkCmtpbSBrYXJkYXNoaWFuCmNoYW5lbApnb3lhCnRyYWRpdGlvbmFsIGNoaW5lc2UgYXJ0Cndvb2xlbiB0b3JzbyBpbiBtZWRpZXZhbCBjbG90aGVzCndlYXJpbmcgY2FzdWFsIGNsb3RoaW5nCmNvenkgbGl2aW5nIHJvb20gYmFja2dyb3VuZAp0aGllZgpzdXBlcm1vZGVsCm5vIGdyYWRpZW50cwpjaW5lbWF0aWMgc21vb3RoIHN0b25lCnJpY2ggc3R5bGUKcmVkIHN1bgpzcGlkZXJtYW4Kd2hpdGUgdGFuayB0b3AKYmxhY2sgYW5kIHdoaXRlIGluawpzb2Z0IGJsdXIKZmVpbW8KYWxlamFuZHJvIGpvZG9yb3dza3kKMyAwIHllYXJzIG9sZApsZWljYSBzCnNoaW55IGV5ZXMKcmVuZSBtYXJnaXR0ZQpjbG9zZSAtIHVwIHNob3QKc2FuZHJhIGNoZXZyaWVyIGFuZCBqb2huIGhveWxhbmQKcGVyZmVjdCBib2R5IGFuZCBmYWNlCmJlYXV0aWZ1bCBibG9uZGUgaGFpcgp0cmFjZXIgb3ZlcndhdGNoCmhkIDRrIHBob3RvCm1hZGUgb2YgbWlzdApoaWdoIHJhZGlvc2l0eSBkdWxsIHNraW4KZ2FsbGVyeSBxdWFsaXR5CnRvbSByaWNobW9uZApmYW50YXN5cHVuawphbGZyZWQga2Vsc25lcgp0cmFuc2Zvcm1lcnMgY2luZW1hdGljIHVuaXZlcnNlCnRpbWVsZXNzCmludHJpY2F0ZSBwYXR0ZXJuCmN5YmVycHVuayBkYXJrIGZhbnRhc3kgYXJ0Cm11c3R5CmZpbmdlcnMKaW50cmljYXRlIGxpbmluZwpuaXpvdSB5YW1hbW90bwpsdXNoIGdyYXNzCmZyYW5rIGZyemV0dGEKbW9lYml1cyArIGxvaXNoCnN0eWxlIG9mIHJpY2hhcmQgY29yYmVuCnRoZSB0aGluZyBhbGllbiBhc3NpbWlsYXRpb24KdGVyYWRhIGthdHN1eWEKZmF0ZSB6ZXJvCmZpbmUgaW50cmljYXRlCnNldCBwaWVjZXMKYnJpZ2h0IHZpYnJhbnQgY29sb3JzCjMgZCBkZW1vIHJlZWwgYXZhdGFyCndpbmQgc29yY2VyZXIKY2xhc3NpY2FsIG9ybmFtZW50CndpdGggYW1iZXIgZXllcwpzb2Z0IG1vcm5pbmcgbGlnaHQKc2VkdWN0aXZlIHJlY2xpbmluZyBwb3NlCmJpYmxlCmxpZ2h0IHNjYXR0ZXIKaW5zYW5lbHkgZGV0YWlsCmN1bHQgLSBjbGFzc2ljIC0gY29taWMgLSBzdHlsZQphdHRyYWN0aXZlIGFuZHJvZ3lub3VzIGh1bWFub2lkCmdvdGhpYyBsaWdodGluZwpjb21wdXRlciBjb21wb25lbnRzCnNjcmF0Y2hlZC4gYmlvbWVjaGFuaWNhbCBjeWJvcmcKbWF3c2hvdAphbGV4YW5kcmUgZmVycmEKZGV0YWlsZWQgcmVhbGlzdGljIGV4cHJlc3Npb25zCmlkZWFsaXN0aWMKZGV6ZWVuIHNob3dyb29tCmZyb20gdGhlIGZyb250CmV5ZXMhCmNvbG91cmVkIHdpdGggbG90cyBvZiBjb2xvdXIKZ2xvd2luZyByYWluYm93IGZhY2UKcG9ydHJhaXQgb2YgY29tcHV0ZXIgJiBjaXJjdWl0cwpodWdlIHNwZWFrZXJzCnNvbGlkIGN1YmUgb2YgbGlnaHQKdGhlIGVsZGVyIHNjcm9sbHMgdmkKbGV2aXRhdGluZwppbmsgcGFpbnRpbmcKYXZldGV0c3V5YSBzdHVkaW9zCnBlbmNpbCBhbmQgaW5rIG1hbmdhIGRyYXdpbmcKaGlzdG9yaWNhbCBwaG90b2dyYXBoCnBvc3RlciBkZXNpZ24Kd2lkZSAtIGFuZ2xlIGxlbnMKdHJvcGljYWwgcGxhbnRzCm11dGVkIGJ1dCB2aWJyYW50IGNvbG9ycwpzdHJhdyBoYXQKY3liZXJwdW5rIQoxOTg3CnNpbmlzdGVyIGF0bW9zcGhlcmUKZGVmb2N1cwpqdWdlbmRzdGlsCmZyZWQgZnJlZW1hbgppbXByZXNzaXZlIGRldGFpbApob2xseXdvb2Qgc3R5bGUKY3liZXJwdW5rIGhpZ2ggZmFzaGlvbgo0IGsgcGhvdG9ncmFwaHkKc3F1YXJlIGphdwpibHVlIGxpZ2h0cwpkcmVhbWxpa2UgYXJ0Cmluc2lkZSB3aGl0ZSByb29tCmRhdmlkIGNyb25lbmJlcmcKZ3JpbWUKdGlnZXIKaHVnZSB3YXZlcwpsZW9uaWQgYWZyZW1vdiBhbmQgdGltIHdoaXRlCmdvb2QgdmliZXMKcmVkIGZsb3dlcnMKaW5zZWN0Cmluc2VjdHMKbm90ZXMKcmVhbGlzdGljIHZvbHVtZXRyaWMgbGlnaHRpbmcKaW5maW5pdHkKdm9sdW1lIGxpZ2h0aW5nCnN0eWxpemVkIHBhaW50ZXJseQpzaWRlIHNob3QKaWxsdXN0cmF0aW9uIHNoYXJwIGRldGFpbApzd2Fyb3Zza2kKc2hvcnQgYmxvbmRlIGhhaXIKcGV0ZXIgYW5kcmV3IGpvbmVzCmZ1bGwtbGVuZ3RoIHBvcnRyYWl0CmFuY2llbnQgY2l0eQpsZXRzIGdldCB3ZWlyZAp2aXJnaWwgYWJsb2gKYmxhY2sgYW5kIHdoaXRlIGltYWdlCmphcGFuZXNlIGFydApmbGF0IGNvbG91ci1ibG9jayBzdHlsZQpncmVhdCBkZXRhaWwKc2ltcGxlIHN0eWxlCnNvZnQgZWRnZXMKcmVkIHRvbmVzCmxvbmcgc2hpbnkgYnJvbnplIGJyb3duIGhhaXIKcGFyawpoaWdobHkgZGV0YWlsZWQgZXllcwphbnRocm9wb2xvZ3kgb2Ygd29uZGVyCmdvZGRlc3Mgb2YgYW5nZXIKZmFzdCBhbmQgZnVyaW91cwphcm1zIGNyb3NzZWQKYW5pbWUgcG9ydHJhaXQKZ2hhc3RseQp3YXRlciBidWJibGVzCndvbmcga2FyIHdhaQpmcm9tIGFib3ZlCmRvb20gZW5naW5lCnV3dQp0aGUgZmlmdGggZWxlbWVudApzdGVyb2lkcwppbnRyaW5jYXRlIGRldGFpbHMKcG9zdGVycwphdmFudC1nYXJkZQpuaXhldSBhbmQgZ3JlZyBydXRrb3dza2kKYmlvbWVjaGFuaWNzCnByb2Zlc3Npb25hbCBwaG90b3Nob290CmNpbmVtYXRpYyBhcnQKamFtZXMgdHVycmVsbApoaWdoIHF1YWxpdHkgZG5kIGlsbHVzdHJhdGlvbgpzY290bGFuZApjb2xvcmZ1bCBhbmQgZ3JheWlzaCBwYWxldHRlCmJhbGNvbnkgZG9vcgpzbWFsbCBleWVzCndpbmRzd2VwdApibGVuZGVyIGRvbnV0IHR1dG9yaWFsCmNydW5jaHlyb2xsCmJyaWNsb3QKcmljaCBicmlnaHQgY29sb3JzCnZlcnkgcG93ZXJmdWwKYXJ0IGNvbmNlcHQKYmxhY2sgYXJtb3IKc2Z4CmJ1YmJseSB1bmRlcndhdGVyIHNjZW5lcnkKcG9pc29uIGl2eQphbWVyaWNhbmEgYXJjaGl0ZWN0dXJlCmRlc2F0dXJhdGVkIGNvbG9ycwp3aGl0ZSBtZXRhbGxpYyBhcm1vdXIKaGVhbHRoeQpjYXN0bGUgaW4gdGhlIGJhY2tncm91bmQKcXVlZXIKZHlzdG9waWFuIHN1cnJlYWxpc20KZGV0YWlsZWQgZW52aXJvbm1lbnQKc2hvcnQgbmVjawpmYWRlZCBlZmZlY3QKbGFzZXIgcmlmbGVzCvCfkL/wn4248J+NiwpzZWR1Y3RpdmUgY29uZmlkZW50IHBvc2UKZXhwZXJ0IGhpZ2ggZGV0YWlsIGNvbmNlcHQgYXJ0CmhhbmEgeWF0YQpoZWF2eSBleWVzIHRvIHRoZSBzaWRlCmNoZXNzIHBhd24KZGFuIHNlYWdyYXZlIGFydApwbGFudHMgaW4gZ2xhc3MgdmFzZQpsaWdodCBtaXN0CmNvbG9yIGZpbG0gc3RpbGwKc29ueSBhIDcgciAzCnBzIDEgZ3JhcGhpY3MKc29mdCB0b25lcwp0aGUgbWFuZSBvZiBhIGxpb24KZGlhYmxvIDQgbGlsaXRoCmRhbiBkb3Mgc2FudG9zCnZlcnkgc3ltbWV0cmljYWwgZmFjZQpsYXNlciBsaWdodApzbGlnaHRseSByb3VuZGVkIGZhY2UKYmxhY2sga25lZSAtIGxlbmd0aCBza2lydApiZWF1dGlmdWxseSByZW5kZXJlZAp3aXRoIGFicwo4IDAgbW0gY2FtZXJhCnZpdmlkIGJyb2tlbiBnbGFzcwphbWJpZW50IHZpYmUKZ2F1Z2hhbgpnaWdlciBoIHIKdm9sdW1ldHJpYyA4IGsKcGVyZmVjdCBwcm9wb3J0aW9ucyBmaW5lIGZhY2UKc3BhdHVsYQpibGFjayBmZWF0aGVycyBpbnN0ZWFkIG9mIGhhaXIKbG9vbWluZyBvdmVyIHlvdQpzdHlsZSBvZiBmcmFuY2lzIGJhY29uCmtuaWdodHMgYXJtb3IKd29sZiBmdXJzb25hCnNpbmsKYWR2ZW50dXJlciBvdXRmaXQgbGFyZ2UgY2xvYWsKYmFja3JvdW5kIGRhcmsKYWxsYSBwcmltYQpjZW50ZXIgbW9kZWwgYnVpbGRpbmdzCm1hemUgbGlrZQpjaW5lbWF0aWMgc3R1ZGlvIGxpZ2h0CnNtb290aCBzaWx2ZXIgYXJtb3IKYm90YW5pYyB3YXRlcmNvbG9ycwp3ZWFyaW5nIGZ1bGwgbWV0YWwgYXJtb3VyCnRoZSBtZXJnZQpnbG93aW5nIG9sZWQgdmlzb3IKc3RhbGluaXN0IGFyY2hpdGVjdHVyZQptdXRlCmNyeWluZy4gc2NpZmkKbS4gay4ga2FsdXRhClsgNCBrIHBob3RvcmVhbGlzbSBdISEhCmRhcmsgYW5kIGR1bGwgcGFsZXR0ZQpldGhuaWMgZ3JvdXAKZ3JlZyBvbHNlbgpicmlnaHRseSBjb2xvdXJlZCBoYWlyCmZhY2Utb24gaGVhZCBzaG90CnBvcnRyYWl0IG9mIG1pc2NoaWV2b3VzCnNmNSBpbmsgc3R5bGUKdGhlIGZhY2Ugb2YgYWJzdXJkbHkgYmVhdXRpZnVsCm1hZGUgb2YgZm9vZAp4Cm11c2N1bGFyISBmYW50YXN5CmdvZ2dsZXMKcHJvZHVjdCBwaWN0dXJlCmZvZ2d5IGxhbmRzY2FwZQp2ZWhpY2xlcwpwb3J0cmFpdCEhIQppc29sYXRlZCBvbiB3aGl0ZSBiYWNrZ3JvdW5kCmhpZ2ggcXVhbGl0eSByZW5kZXJpbmcKY2hhcmxpemUgdGhlcm9uCnBhcmFtZXRyaWMgYXJjaGl0ZWN0dXJlCmtpcmlnYW1pCnZvZ3VlIGNvdmVyCjIgMCAxIDkgYW5pbWUKYmxhY2sgamFja2V0CmJyaWdodCBzdW4KZm9sayBob3Jyb3IKZGFyayBhbmQgc21va3kgYmFja2dyb3VuZApiZWFjaCBiYWNrZ3JvdW5kCmxvdyByZXNvbHV0aW9uCm9yZGVyCjE5MjAKcmVkIHNjYXJmCmdlb3JnZSBwYWwKcG9saWNlIGNhbGxpbmcgZm9yIGJhY2sgdXAKY2l0eSBtaWRuaWdodCBtaXN0IGxpZ2h0cwpyZWQgY29sb3JzCjEgOSA0IDUKdW5pdHkgYXNzZXQgc3RvcmUKcmF5cwpzaWVycmEgZW50ZXJ0YWlubWVudCBnYW1lcwpzdG9ja2luZ3MKdm9yb25vaQpoZWxpY29wdGVyCmhpZ2ggcXVhbGl0eSAzZCByZW5kZXIKdmVyeSBtdXNjdWxhcgp7cGVyZmVjdCBmYWNlfQphcmNoaXRlY3R1cmFsIHJlbmRlcgpzbm93c3Rvcm0KY3J5c3RhbCBsaWdodGluZwpkZXNrdG9wb2dyYXBoeQpnZW9tZXRyaWMgYWJzdHJhY3Rpb24KaG9sZGluZyBhIHN0YWZmCnF1YWxpdHkKYm9hdHMKY2luZW1hdGljIG1vdmllIHBob3RvZ3JhcGgKY29tbWVyY2lhbCBwaG90bwplbnZpcm9ubWVudGFsIGtleSBhcnQKc2hpbmluZyBnb2xkZW4gaG91cgpzb3VyY2UgZW5naW5lCmRpZ2l0YWwgYXJ0IDRrCm11c2V1bSBsaWdodGluZwptYXR0ZSBhcnQKZXllLWNhdGNoaW5nCmNpdHkgaW4gYmFja2dyb3VuZApjYXN0bGUgaW4gdGhlIHNreQpiZWtzacWEc2tpCndoaXRlIGNvbG9yIHNjaGVtZQo0ayBkZXRhaWwKdGludHlwZSBwaG90b2dyYXBoCnBob3RvcmVhbCBvY3RhbmUgcmVuZGVyCnJvc2UKcm9ndWUKc2tpZXMgYmVoaW5kCmJvIGNoZW4KZGlzbmV5IGNvbmNlcHQgYXJ0CmV4dHJlbWVseSBkZXRhaWxlZCBkaWdpdGFsIGFydApicm93biBmdXIKb2xkIG1hc3RlcnMKaGUgaXMgYWJvdXQgMzAgeWVhcnMgb2xkCmZhc2NpbmF0aW5nCmhpZ2ggcmVzb2x1dGlvbiA4awpkZXRhaWxlZCByZWFsaXN0aWMgZXllcwpsb25nIG5vc2UKc2VnbWVudGVkIGFybW9yCmxlbnMgZGlzdG9ydGlvbgppc29tZXRyaWMgdG9wIGRvd24gbGVmdCB2aWV3Cmxvb2tpbmcgZm9yd2FyZApzZW5zZSBvZiBzY2FsZQptYWdpYyBzY2hvb2wgdW5pZm9ybQpkYXZpZCBib3dpZQpmcm9nCm15c3RlcmlvdXMgbGlnaHRpbmcKc29yY2VyZXNzCmJ1cmx5CmRldmlhbiBhcnQKZGV2YWluYXJ0Cm1lZ2FzY2FuCnNhdmFnZQpjaW5lc3RpbGwgNDAwdCBmaWxtCnZlcnkgZGFyayBhbWJpYW5jZQp1bnJlYWwgZW5naW5lIHJlbmRlcmluZwpjaGVycnkgYmxvc3NvbQpyZWQgZ2xvdwpnZW50bGUgc2hhZG93aW5nCm9mZmljaWFsIHN0dWRpbyBnaGlibGkgc3RpbGwKYnJpYW4gc3VtCnNlbGYgY29uZmlkZW5jZQpncmFpbnkgcGljdHVyZQpjaW5lbWF0aWMgc21vb3RoCmJsYWNrIGNsb3RoaW5nCm1hc3RlcnBpZWNlIHBhaW50aW5nCnJvc2UgcGV0YWxzCmhlaXNlLWxpYW4geWFuIGZhbmcKaGlnaCBzcGVlZCBwaG90b2dyYXBoeQp3cmlua2xlZAp2ZWdldGFsIGRyYWdvbiBjeWJvcmcKcGhvdG9ncmFwaHkgYXdhcmQgKQptaXhlZCBtZWRpYSBjb2xsYWdlCmx1c2ggZmxvcmEKaG9vZGllCmJlYXV0aWZ1bCBoaWdobHkgZGV0YWlsZWQgZmFjZQphcnRpc3RpYyBjb21wb3NpdGlvbgpzZWNyZXQgZ2FyZGVuCnJlbmRlcmVkIHdpdGggb2N0YW5lCnJ1ZmZsZWQgZmFicmljCnBob3RvZ3JhcGhpYyBmaWx0ZXIKc2lnbWEgOCA1IG1tIGYgLyA4CmZhbmN5IGNsb3RoaW5nCnN5bnRod2F2ZSBhcnQKbG8gZmkKZGVwdGggb2YgZmllbGQgYmFja2dyb3VuZApzdHJlYW1zIG9mIGdsb3dpbmcgaG90IGxhdmEKZ2lhbnQgd2F2ZXMKc29sYSBkaWdpdGFsIGFydHMKd2hpdGUgY2xvdGhlcwp2ZXJ5IHN0eWxpemVkCm92YWwgc2hhcGUgZmFjZQpzeW50aCB2aWJlCmZyb20gZ2lybHMgZnJvbnRsaW5lCmJsYWRlcnVubmVyIHN0cmVldCBhbGxleQpueW1waGFlYQpmbG93aW5nIGZhYnJpYwpmZW1hbGUgZnVyc29uYQpsb29raW5nIGxpa2UgYW5uaWUgbGVvbmhhcnQKc3Ryb25nIGxlYWRlcgpwaG90b2dyYXBoZWQgb24gZXhwaXJlZCBmaWxtCmJsdWUgZXllcyEhCmlyaWRlc2NlbnQgdGl0YW5pdW0KcmVkIGFuZCB3aGl0ZSBtYXJibGUgcGFuZWxzCnB5cnJvbCBzY2FybGV0CmhvcnJvciBwb3N0ZXIgOSAwIHMKZ290aCBjaGljCnNwZWN0YWN1bGFyIHF1YWxpdHkgdG9ybiBwYXBlcgphdmVkb24Kc2hvdCB3aXRoIGhhc3NlbGJsYWQKdGhpbiBzdHJhaWdodCBsaW5lcwpzcGxvdGNoCmNpdHkgcm9vZnRvcApkcmFnb24gdm9yZQpub3N0YWxnaWMgYXRtb3NwaGVyZQpkZXRlcm1pbmVkIGV4cHJlc3Npb25zCndpdGggc3BhcmtpbmcgY2lyY3VpdHMKc2lsdmVyIHByaW5jZSBjcm93bgpzdGFyIHRyYWlscwphd2FyZCAtIHdpbm5pbmcgZGV0YWlscwpib2tlaHMKZ2xlbm4gYmFycgpzd2lybGluZyB3YXRlciBjb3Ntb3MKc3R5bGUgb2YgYWRlIHNhbnRvcmEKcmFuZG9tIHZvbHVtZXRyaWMgbGlnaHRpbmcKZWxhYm9yYXRlIG9ybmF0ZSBoZWFkIHBpZWNlCmFwcGVhcmluZyBpbiBhIHNob3BwaW5nIG1hbGwKZ2xvd2luZyBsaWdodAptaWNoZWxpbiBzdGFyIHJlc3RhdXJhbnQKY3liZXJwdW5rIHN0eWxlIG91dGZpdAppbnRlbnNlIHNtb2xkZXJpbmcKdml2YXJpdW0KdWx0cmEgbWVnYSBzdXBlciBoeXBlciBiZWF1dGlmdWwKY2xhc3NpYyBjaHJvbWUKcGhvdG9yZWFsaXN0aWMgZGV0YWlscwpzbWFydApjaW5lbWF0aWMgbGlnaHQgc2hhZG93cwptaWRkbGUgZWFzdGVybgp0aGluIGV5ZWJyb3dzCmFxdWF0aWMgcGxhbnRzCmludGVyZXN0aW5nIGNoYXJhY3RlciBkZXNpZ24KYXN0cm9ub215CmNhbWVyYSBmbGFzaAp2aXN1YWwKZGVhZCBjZWxscwptZWRpdGF0aW9uCmhvbGRpbmcgZWFjaCBvdGhlcgpzYXVsIGJhc3MKbHVkZWsgcGVzZWsKdW5iZWxpZXZhYmx5IGJlYXV0aWZ1bApkdXN0ZXIKZGVjb3JhdGl2ZSBmbG93ZXJzCnNvZnQgYW1iaWVudCBsaWdodGluZwpuYWNyZQppcGhvbmUKbWFuZ2EgY292ZXIgYXJ0CnJpY2ggbW9vZHkgYXRtb3NwaGVyZQpzdXJwcmlzaW5nCmR3YXluZSBiYXJsb3dlCmluIGxvdmUKaXNvbWV0cmljIGdhbWUKZHlzdG9waWFuIHNjaWZpIG91dGZpdApwcm9tZXRoZXVzCnNsZWVweSBmYXNoaW9uIG1vZGVsIGZhY2UKZGFuIGhpbGxlcgptb2lzdApzZXJ2YW5kbyBsdXBpbmkKc29saWQgY29sb3IKaGlnaGx5IGRldGFpbGVkIHBob3RvZ3JhcGh5CmJ1enogY3V0CmJpb3Nob2NrIGFydCBzdHlsZQpkZWZpbmVkIGZhY2UKc2F0ZWxsaXRlIGltYWdlCmRhcmsgY2luZW1hdGljIGxpZ2h0aW5nCntwZXJmZWN0IGV5ZXN9CmNsZWFyIGNsZWFuIGZhY2UKdmVyeSB2ZXJ5IHJlYWxpc3RpYwphZHZlbnR1cmUgdGltZQpwYXN0ZWwgb2lsIGlua3MKZi8xLjgKZGF2aWQgYmFpbGV5CnRhbGwgYnVpbGRpbmdzCmZlbWFsZSBhbmltZSBjaGFyYWN0ZXIKcmVkIGFkb3JuZW1lbnRzCmZ1bGwtYm9keSBwb3J0cmFpdAp3aWxkbGlmZQo4ayB1bnJlYWwgZW5naW5lCmRvb21zZGF5CmhpLXJlcwptb25zdGVyIGFydApoZWF2ZW5seSBsaWdodGluZwpkc2xyIGNhbWVyYQpjb2xvcmVkIHNrZXRjaCBhbmltZSBtYW5nYSBwYW5lbApoYWxsdWNpbmF0aW9uCmFzIGEgbXlzdGljYWwgdmFsa3lyaWUKZGFyayBhZXN0aGV0aWMKd2hpdGUgcm9iZXMKY3JlZXB5IHNtaWxlCnJ1c3RlZAptb3ZpZSBxdWFsaXR5CmNhbm9uIDUwbW0Kd2F0ZXJjb2xvciBhcnQKcmFja2luZyBmb2N1cwpleHRyZW1lIHBhbm9yYW1pYwphcnQgc3RhdGlvbiB0cmVuZGluZwptYXRyaXgpCmRheSBvZiB0aGUgdGVudGFjbGUgc3R5bGUKbm9yZGljCmxlZ2dpbnMKcHM1CndpZGUgaGlwcwphbm5hc29waGlhIHJvYmIKdHJhZGl0aW9uYWwgY2hpbmVzZSB0ZXh0dXJlcwpvbWlub3VzIGJhY2tncm91bmQKbXVzY2xlIGV4dHJlbWVseSBkZXRhaWxlZAptYWdudW0gb3B1cwpjaGFpbm1haWwKZnVsbCBib2R5IGFybW9yCnJhdmUgbWFrZXVwCmJhbGFza2FzCmtvZGFjaHJvbWUgZmlsbQpkYWdnZXJzCmdyYXlzY2FsZSBwaG90b2dyYXBoeQpteXRoaWMKc3RhcmZsZWV0IHVuaWZvcm0KZGF2aWQga2Fzc2FuCmNoaW1lcmEKdmVyeSBkZXRhaWxlZCBhbmQgY29sb3JmdWwKdHVtb3VycwpzcGVjdGFjdWxhcgpzaGFycCBmb2N1c2VkCnJlYWxpc3RpYyBvaWwgb24gbGluZW4KZ3VuZmlyZQpzcG9va3kgbGlnaHRpbmcKc3Ryb25nIHBvc2UKY2luw6ltYXNjb3BlCm93bApwaXhhciBhbmltYXRpb24gc3R5bGUKd2VhcmluZyBsZWF0aGVyIGphY2tldApzaGl2YQpsZWdvCmJveQpzaGVsbHMKc2NhcnJlZAplcGljIGJhY2tncm91bmQKc2F0dXJhdGVkIGNvbG9yCmhpZ2hseSBkZXRhaWxlZCBzYXR1cmF0ZWQKbmlrb24gZCA3IDUgMAoxIDkgOCA1CnNjaSAtIGZpIGFuZCBmYW50YXN5CnNlcmVuZSBjb2xvcnMKZW52aXJvbm1lbnRhbCBsaWdodGluZwpkYXJrIHNjaWZpCmNvbW1pc3Npb24gZm9yCmF0ZWxpZXIgbHVsdWEKZ2xvd2luZyB2ZWlucwpzdXJyZWFsICsgaGlnaGx5IGRldGFpbGVkCmdyZWVuIGFuZCB3YXJtIHRoZW1lCnVuaWZvcm0gcGxhaW4gc2t5CjEgOSA4IDAncyBhcnQKYmVycmllcyBkcmlwcGluZyBqdWljZQpoaWdoIC0gdGVjaApjbGVhcnkgc2VlIGZhY2UKdGl0ZSBrdWJvCmNvbG9yIGZpbG0gY2FtZXJhCm5lbyAtIGltcHJlc3Npb25pc3QKZHVuZ2VvbiBiYWNrZ3JvdW5kCnJlZCBuZWNrdGllCmZ1bGwgYm9keSBwaG90b3Nob290CnN1biBsaWdodGluZwpiaWcgYnJlYXN0cwpicm9rZW4gcGlwZXMKdGhvcm91Z2ggZGV0YWlscwpsYW5kIG9mIGFkdmFuY2VkIHJhY2VzCmJpZyB3aW5ncwpza3lkb21lCmluIDEgOSA4IDUKbm8gY2xvdGhlcwpyZWQgZmFjZQplbmdyYXZpbmdzCnByaXN0aW5lIGNsZWFuIGRlc2lnbgpmdWxsIC0gYm9keQpjcnlwdG9ub21pY29uCmlvcwpsb3ctbGlnaHQgcGhvdG9ncmFwaApmZW5nIHpodSB8CmxhcmdlIGFxdWlsaW5lIG5vc2UhIQpob2xvZ3JhcGhpYyBrcnlwdG9uIGlvbgpleHRyZW1lbHkgcG9saXNoZWQKc29mdCBib3ggbGlnaHRpbmcKc3dpcmxpbmcgc2lsdmVyIGZpc2gKY29uY2VwdCBhcnQgb2lsIHBhaW50aW5nCndpdGggaW5zcGlyYXRpb24gZnJvbSBiZWtzaW5za2kKdHdpc3RpbmcgdmFwb3VyCmxhYmVsIGRlc2lnbgpmcm9udCBsYWJlbApmdWNoc2lhIHNraW4KamFwYW5lc2UgY2dpCmNsZWFuIGNvbG9yaW5nIGJvb2sgcGFnZQpqZWZmZXJ5IGNhdGhlcmluZSBqb25lcwpjdXRlIHBpY3RvcGxhc21hCnlvdW5nIG5hdGFsaWUgcG9ydG1hbgozIGQgcmVuZGVyIG9mZmljaWFsIGFydAp3aGl0ZSB3YXgKbGVnIHNob3QKYXMgYSBmdWxsIGJvZHkgZnVua28gcG9wIQp2aWJyYW50IGJ1dCBkcmVhcnkgcmVkCmludHJpbmNhdGUgb3JuYW1lbnRzCnJlYWxpc3RpYyBmbGVzaCB0ZXh0dXJlCnBhaW50ZWQgcG9ydHJhaXQgb2YgcnVnZ2VkIHpldXMKb2xkIGN5Ym9yZyBtZXJjaGFudApmbHVzaGVkIGZhY2UKaGlnaGx5IHJlZmxlY3RpdmUKYWR2ZW50dXJlIGdhbWUKbWFjaG8KcmFwaGFlbGl0ZQpwb3J0cmFpdCBvZiBhIGJlYXV0aWZ1bCBwZXJzb24KZGMKbW91bnRhaW4gYmFja2dyb3VuZApkYWd1ZXJyb3R5cGUKYWdlZAppbnN0cnVjdGlvbnMKbm90YXRpb24KamVsbHkgZmlzaApyZXV0ZXJzCm1lZGl1bSBmb3JtYXQgcGhvdG9ncmFwaHkKbXVsdGlwbGF5ZXIgc2V0LXBpZWNlIGFtYnVzaApzdHVkaW8gYmFja2dyb3VuZApyYWRpYWwgbGlnaHQKYW5kcmV3IGF0cm9zaGVua28Kb3JuYXRlIGRldGFpbHMKZm9jYWwgcG9pbnQKZGV0YWlsZWQgY29sb3IgcG9ydHJhaXQKanVkZ2UgZHJlZGQKOGsgdWx0cmEKcm9ja2V0IGxlYWd1ZQphY2lkIHRyaXAKMyBkIGNvbmNlcHQgYXJ0CnNob3J0IGRhcmsgaGFpcgpncmF2ZXlhcmQKZGV2aWFudCBhcnQKbGFzIHZlZ2FzCm92YWwgZmFjZQpzb2Z0IHNoYWRlCnJvYm90IG1vZGUKY2FydmVkIG1hcmJsZSBzdGF0dWUKcXVpcmt5CmNvbWljcyBzdHlsZQpoaS1mcnVjdG9zZQpxdWl4ZWwKamFuIHVyc2NoZWwKY29mZmVlCmFydCBkZWNvIGRlc2lnbgpiaWcgY2h1bmd1cwpsb3cgcGVyc3BlY3RpdmUKZGltIGxpZ2h0cwptb29keSBjaW5lbWF0aWMgbGlnaHRpbmcKZHJhd24Kc3BlYXIKaGUgaXMgYWJvdXQgMjAgeWVhcnMgb2xkCm9uZSBwaWVjZQpkcmVhZGxvY2tzCnNjaS1maSBhcnR3b3JrCmNvbG9yZnVsIHBhc3RlbApjYWxsaWdyYXBoeQp1bHRyYSBwaG90b3JlYWxpc3RpYyByYXl0cmFjaW5nCmxhcHRvcApsYWRkZXJzCmRlZXAgdmlicmFudCBjb2xvcnMKc3BvdHMKdGFibGVzCndpbGRlcm5lc3MKY29sb3JmdWwgYmFja2dyb3VuZApmbG93aW5nIGRyZXNzCm5lY2tsYWNlCmxhaW4Kc2VhIGZvYW0Kcm9ib3RpY3MKZGFyayBjb25jZXB0IGFydApjYW1lcmEgY2xvc2UgdXAKZWxpdGUgZGFuZ2Vyb3VzCmdyaW0gYXRtb3NwaGVyZQpmaWxtIGtleSBhcnQKamMgbGV5ZW5kZWNrZXIKemVybyBncmF2aXR5CmZ1cnMKZmlyZSBleWVzCnNpbmdsZSBjaGFyYWN0ZXIKc3VwZXJiCmNsZWFuIGZhY2UKZGVzaWduZXIgY2xvdGhlcwpwb2xpY2Ugc3RhdGUKZGVtb24gc2xheWVyCnN0b3JteSBzZWFzCnBjIGdhbWUKc3RyaW5nIGxpZ2h0cwp2aXRhbHkgYnVsZ2Fyb3YKdmVudApjaGltbmV5CmZsZXhpbmcKZ3VsbGl2ZXIncyB0cmF2ZWxzCm5pZ2h0IHNjZW5lcnkKZmxhdCBiYWNrZ3JvdW5kCnJvdWdoIHBhcGVyIHRleHR1cmUKcHVycGxlIGdyZWVuIGNvbG9yIHNjaGVtZQpvY3RhdmUgcmVuZGVyCm9wcHJlc3NpdmUKdW5kZXJ3YXRlciBzY2VuZQpuZXcgeW9ya2VyIG1hZ2F6aW5lIGNvdmVyCm1haGluZHJhIHRoYXIKc2VyaW91cyBsb29rCmhpZ2gKamVhbi12aWN0b3IgYmVydGluCmRhcmsgb21pbm91cyBzdGVhbHRoCmNvbXBsaWNhdGVkCnNsYXZpYyBkb2cgaGVhZCBtYW4KbWVkaXVtIGNsb3NldXAKZHJhZ29uIGNyb3duCmhpZ2ggcG9seQpzaWdtYSA1IDAgbW0gZiAxLiA0CjEgOSA1IDAKdW5wbGVhc2FudCBmYWNlCmludHJvc3BlY3RpdmUKc3R5bGUgb2YgdG9tIGJhZ3NoYXcKaHlkcmFuZ2VhCnNlcmVuZSBldmVuaW5nIGF0bW9zcGhlcmUKc29mdCBsZW5zCnNwbGFzaGluZwpmcm9tIHRoZSBnYW1lIHBhdGhvbG9naWMgMgpuZW8gLSBwcmltaXRpdmlzbQphY2hpbmdseSBiZWF1dGlmdWwKYW1iaXRpb3VzCnJ5dXRhIHVlZGEgYXJ0d29yawpoaWdobHkgZGV0YWlsZWQgc2tpbgpzaGlueSBiYWNrZ3JvdW5kCmludHJpY2F0ZSBsaW5lCmFuaW1lIHBhaW50ZXIgc3R1ZGlvCndoaXRlIGJhbmdzCmdvbGYgZGlnZXN0CndldCB0c2hpcnQKc2FpbG9yIHVuaWZvcm0Kd2lsZGVybmVzcyBncm91bmQKbWF0dGUgc2hhcnAgcGFpbnRpbmcKY2VsbCBzaGFkZWQhISEKc3BvcnRzIGNsb3RoaW5nCmV4dHJhIGNyaXNwIGltYWdlCndpdGggYW4gaW50cmljYXRlCmRhcmsgcGFsZXR0ZQphY2FudGh1cyBzY3JvbGwKam9lIGhpc2Fpc2hpCnlvamkgdGFrZXNoaWdlCm5hb3lhIHRhbmFrYQpyYW5kb20gY2luZW1hdGljIHZpZXcKc3Ryb25nIHN1YnN1cmZhY2Ugc2NhdHRlcmluZwpjaGFyYWN0ZXIgcmVuZGVyCnZvbHVtZSBmbHV0dGVyCmxvb2sgYXQgdGhhdCBkZXRhaWwhCmJ1bGxldCB0cmFpbgpoaWdoIHRvd2VycwpwcmVzZXJ2ZWQgbXVzZXVtIHBpZWNlCmFuaW1lIG1vdmllIHNjZW5lCnJhdyBzaWVubmEKY3liZXJwdW5rIGFydGlmYWN0cwpleHRyZW1lbHkgc2hhcnAgZGV0YWlsCmdsYW0KcGl4YXIgYW5kIGRhIHZpbmNpCndpbGxpYW0gLSBhZG9scGhlIGJvdWd1ZXJlYQpzbGVlayBzaWx2ZXIgYXJtb3IKaGVsZ2hhc3QKYmVsbG93aW5nIGR1c3QKM2QgcmVhbGlzbQpkZXRhaWxlZCBmYWNlIG9mIGEgd29tYW4KYXJha2kKemR6aXNsYXcgYmVraW5za2kKcGFzdGVsIG1hdHRlIGNvbG9ycwpwZXJzb25hIDUgaW5zcGlyZWQKaW4gYSBjeWJlcmNpdHkKOCAwIG1tIHRlbGVwaG90byBsZW5zCnRoZSBicml0dGxlLiBkaWdpdGFsIHBhaW50aW5nCmRhcmt3YXZlIGdvdGggYWVzdGhldGljCmRldGFpbGVkIGxpZ2h0CmhlYWRyb29tCmRhcmsgYW5kIG1vb2R5IGxpZ2h0aW5nCnNlcmdleSBrb2xlc292CmdvcmlsbGF6CnRyYW5zbHVjZW50IHNraW4KYmVhdXRpZnVsIGhhbmRzCmJsYWNrIGFuZCB3aGl0ZSBvbmx5CmludGVycHJldGF0aW9uCmFtYXppbmcgdGV4dHVyZWQgYnJ1c2ggc3Ryb2tlcwphY2N1cmF0ZSBzaGFwZQpiYWdzIG9mIG1vbmV5CmhvdCB3aGVlbHMKY2FydG9ncmFwaHkKMSA5IDQgMAphbm5pZSBsZWlib3dpdHoKZHJvbmUgcGhvdG9ncmFwaHkKbmlnaHRtYXJlIC0gbGlrZSBkcmVhbQp2aWRlbyBnYW1lcwpwdXJwbGUgZm9nCnNwZWN0cmFsIGNvbG9yCnBvbHlnb25hbApncm91bmQKc3ludGh3YXZlIGNvbG9ycwpsYXN0IHBob3RvCjNkY29hdAp2aXN1YWwga2V5CmNnIGFyY2hpdGVjdHMKaGlnaC1kZXRhaWwKc21vb3RoIHRleHR1cmUKcG9sYXJpemVyIGZpbHRlcgp0aXRhbmZhbGwKc3R1bm5pbmcgZGlnaXRhbCBhcnQKZGFya2FydApob3QgYW5kIHN1bm55CnNvbmljCnRoaWdocwpoaWdoLXJlc29sdXRpb24KYmFyb2NjbwpzdHJlZXRsaWdodHMKYmxhY2sgcm9zZXMKZ2xvd2luZyB3aXJlcyBldmVyeXdoZXJlCm5pZ2h0ZmFsbApsYXRlIGFmdGVybm9vbgpkZXRhaWxlZCBoYW5kcwpmIDEuOAptaXlhemFraSBoYXlhbwpjeWJlcnB1bmsgYWVzdGhldGljCnNwYWNlIHBob3RvZ3JhcGh5Cm1hc3RlcnBpZWNlIGFydApoYXJ1aGkgc3V6dW1peWEKb2xlZyB6aGVyZWJpbgptb2xkCnNwaWRlcnMKcmVhbGlzdGljIDNkCnNldHRsZW1lbnQKYm9va3NoZWx2ZXMKZ29sZGVuIGdsb3cKY29sb25pYWwgZXhwZWRpdGlvbgpsb3N0Cm11c2V1bSBwaG90bwplaWdodGllcyBwaW51cCBzdHlsZQpjaGFyYWN0ZXIgcGhvdG9ncmFwaHkKZ3JlZwp2ZXJ5IGNyaXNweQpsYWIgY29hdApwaXhlbCBwZXJmZWN0Cjg1bW0gc2lnbWEgYXJ0IGxlbnMKcGluayBleWVzCjcwbW0gbGVucwpuYW90byBoYXR0b3JpCml2YW4gYWl2YWtvdnNreQptYW1vcnUgaG9zb2RhCml0YWx5CnJpY2ggY29udHJhc3QKZHJhbWF0aWMgaGlnaGxpZ2h0cwpmZXJyYXJpCmR1bmdlb25zIGFuZCBkcmFnb25zIGNoYXJhY3RlcgpubyBsZXR0ZXJzCnByZXJlbmRlcmVkIGdyYXBoaWNzCmFybW91cgp0b2t5byBpemFrYXlhIHNjZW5lCnN0cm9uZyBqYXdsaW5lCmRhcmsgYW1iaWVudApmbGVzaHkKaGlnaGx5IGRldGFpbGxlZAoyZCBtYXR0ZSBpbGx1c3RyYXRpb24KdmFtcGlyZSBmYW5ncwpzaG9vdGluZyBzdGFycwpjZWxzaGFkZWQKc29sYXIgZmxhcmVzCmdvbGRlbiBoYWxvIGJlaGluZCBoZXIgaGVhZApjb3JzZXQKZ29kbHkgbGlnaHQKa2lsbGVyCmNsb3NlIHVwIHZpZXcKZnVuZ2FsCmFsdGVyZCBjYXJib24KaGVhdnkgYnJ1c2hzdHJva2VzCmFydGZhY3QKcnBnIGdhbWUKbm8gc2lnbmF0dXJlCm1hZ2ljIHN5bWJvbHMKY29sb3JlZCBhY2N1cmF0ZWx5CmNvdwpzcG90IGxpZ2h0CnBvcnQgY2l0eQpyYWxwaCBiYWtzaGkKZm9yZXN0IGluIGJhY2tncm91bmQKdGhlIGdyaW0gcmVhcGVyCnVsdHJhIGRlbnNlIGZvZwp3ZWxsIC0gbGl0CnVuZm9jdXNlZApkeW5hbWljIGJhY2tsaWdodGluZwpicmlnaHQgYmx1ZSBza3kKZGltbHkgbGl0IGNvenkgdGF2ZXJuCmNsb3NldXAgaGVhZHNob3QKc2F0dXJhdGVkIGNvbG9yIHNjaGVtZQppbmR1c3RyaWFsIHJvYm90cwp3YWxscGFwZXIgNCBrCmltcHJlc3Npb25uaXNtZQpleHRyZW1lbHkgc3ltbWV0cmljYWwKdmVyeSBkZXRhaWxlZCBhcnQKcm9zc2RyYXdzIHZvbHVtZXRyaWMgbGlnaHRpbmcKcmVhbCBmYWNlcwpheWFtaQpvZmZpY2lhbCB2YWxlbnRpbm8gZWRpdG9yaWFsCiggc3RyZWFtbGluZSBtb2Rlcm5lICkKaC4gciBnaWdlcgpzY2FyeSBzdHlsZQpjcmVhbSBhbmQgd2hpdGUgY29sb3Igc2NoZW1lCnByZXR0eSBleWVzCnNvbnkgYSA3IHIgaXYKdWZvdGFibGUgc3R1ZGlvIGFydCBzdHlsZQpzaG9ydCBtZXNzeSBoYWlyCnRvbmVzIG9mIGJsYWNrIGluIGJhY2tncm91bmQKbWlzc2luZyBwYW5lbHMKZ29sZGVuIGN1cnZlIGNvbXBvc2l0aW9uCnN1bmxpZ2h0IGZpbHRlcmluZyB0aHJvdWdoIHNraW4KaW50cmljYXRlIGJlYXV0aWZ1bCBwYWludGluZwpoZWFkIGluIGZyYW1lCmJhY2twYWNrCmF1dHVtbiBib2tlaApmdXJyeSBmdXJzb25hCmV4dHJlbWVseSBkZXRhaWxlZCBhbmQgbGlmZWxpa2UKYnJpZ2h0IGNvbG9yZnVsCjEgNSAwIG1tIGxlbnMKc2V3YWdlCnNhdnJhc292CmNsYWlyIG9ic2N1cgpuZ2FpIHZpY3RvCmNoZWVyeQpmb3JtcwpzYXBwaGljIGFydApldmlsIGZsdWlkCmx1c2ggYmxhY2sgaGFpcgphdCBraGFqdXJhaG8KZmluaXNoZWQgY29uY2VwdCBhcnQKYmVhdXRpZnVsIGltYWdlIGV2ZXIgY3JlYXRlZApqZXQgc2V0IHJhZGlvIGFydHdvcmsKYmF0dGxlZmllbGQgaW4gYmFja2dyb3VuZApkb29tIGRlbW9uCmZ1dHVyaXN0aWMgY2hyb21lIGRyb25lcwp1bHRyYSBoeXBlciByZWFsaXN0aWMgcXVhbGl0eQphcnQgZnJhbmNpcyBiYWNvbgppbnNwaXJlZCBpbiBiYWx0aHVzCmJlcmxpbiBmYXNoaW9uCmJsYWNrIGhhaXJlZCBnaXJsIHdlYXJpbmcgaG9vZGllCmdsb3dpbmcgbGlnaHRzISEKdmVyeSBkZXRhaWxlZC4gNCBrCm1pZGkgc2tpcnQKZW1tYW51ZWwgc2hpdQphdHRhY2sgcG9zZQpmZW1hbGUgYW5kcm9pZApzaGFycCBsdW1pbmVzY2VudCBmb2N1cwpsZWF0aGVyIGNvYXQKdGlnaHQgYXJvdW5kIG5lY2sKd2VhcmluZyB1bnVzdWFsIGNsb3RoZXMKdmlicmFudCBtdXRlZCBjb2xvcnMKc2ltb24gYmlyY2gKaGlnaGVyIGNvbnRyYXN0cwpzdGFubGV5IGt5YnJpYwptZWx0ZWQgY3lib3JnCnJvc2hhbgppbiBydWluZWQgYWdvcmEgb2YgYXRoZW5zCndhdGVyIGd1c2hpbmcgZnJvbSBjZWlsaW5nCnpvb21lZCBpbiBzaG90cwpjYXMKZHJpcHBpbmcgZ29vCmRldGFpbGVkIGZlYXR1cmVzCm9jdG9wYXRoIHZveWFnZXIKc3BsYXNoZXMgb2YgbmVvbgpuZWtybyBib3JqYQplbGFib3JhdGUgcG9saXNoZWQKZHJpcHB5CnRyZW5kaW5nIGFydHN0YXRpb24KY29vbCB0b25lcwohISBoYXV0ZSBjb3V0dXJlISEKc3VwZXIgZmluZSBpbmtpbmcgbGluZXMKY2FyaW5nCmdvbGRlbiBzdW5saWdodAptZWdhIHNjYW5zCmNhdCBnaXJsCmVsZWN0cm9uaWMgYmlsbGJvYXJkcwp3ZWF0aGVyZWQKc29mdCBsaWdodGluZyBhbGJ1bSBjb3ZlcgpjYXBpdGFsaXNtCm1ham9yIGFyY2FuYQpjb21tdW5pY2F0aW9uCmdyYXkgc2tpbgp3aXRoIGJhY2tsaWdodAphbHBpbmUKc2hpbmthaSBtYWtvdG8KZmlzaG5ldCB0aWdodHMKY2hpbGQncyBkcmF3aW5nCnVsdHJhZmluZSBkZXRhaWxzCnZpcmFsIHBob3RvCmJlYXIKOCBrIHBvc3Rwcm9jZXNzaW5nCnN0YXJrIGxpZ2h0aW5nCmRyaXAKcmVhbGlzdGljIGRldGFpbHMKdWx0cmEKYXJ0d29yayBtYXN0ZXJwaWVjZQpuYXNhIHNwYWNlIHBob3RvZ3JhcGh5CmJlYW5pZQpkYXJrIHJlZAoyMDIxCnBpdGNoIGJsYWNrIGJhY2tncm91bmQKZiAxLjQga29kYWsgcG9ydHJhCnRvdG9ycmwKdW5kZXJ3YXRlciBlbnZpcm9ubWVudAptYXJtb3NldCB0b29sYmFnCm1ldGFsIGdlYXIKamVhbi1sZW9uIGdlcm9tZQo3IDAgcwp0ZWxlIHBob3RvIGxlbnMKbXVnc2hvdApyZWZyYWN0ZWQgc3BhcmtsZXMKbXVzdGFjaGUKZnhhYQozIGQgYW5pbWUKYmVhcmRsZXNzCmzDqiBsb25nCmRlcHRoIG9mIGZpZWxkIGJsdXIKYmlnIGJsdWUgZXllcwphd2FyZC13aW5uaW5nIGRpZ2l0YWwgYXJ0CmxvdmVseSBjb2xvcnMKc2V4eSBsb29rCm9jdGFuZSByZW5kZXIgdyAxMDI0CjI0bW0KcmVhbGlzdGljIGFuZCBkZXRhaWxlZApsb29rIGF0IGFsbCB0aGF0IGRldGFpbCEKbm9yaWxzawpkYW5nZXIKdG9ybgp1bml0eSBlbmdpbmUKdW1pbmVrbwpjb21mb3J0aW5nCm1vb2R5IHZvbHVtZXRyaWMgbGlnaHRpbmcKdG93ZWxzCmJlYWNoIHNldHRpbmcKaGVhdnkgYXJtb3IKdmVyeSBjb2hlc2l2ZQplcmlrIGpvaGFuc3Nvbgp1bnJlYWwgNSBlbmdpbmUgcmVuZGVyCmluIGJsYWNrIHVuaWZvcm0KZGF5IGxpZ2h0aW5nCmN1cmxzCmV4cHJlc3NpdmUgYnJ1c2ggc3Ryb2tlcwpqZXJtYTk4NQpwZXJmZWN0bHkgcHJvcG9ydGlvbmVkIGZhY2UKaW50cmlndWluZwpyb21hbmNlIG5vdmVsIGNvdmVyCnNoYW5naGFpCm1vb24gaW4gdGhlIGJhY2tncm91bmQKYmV0dGVyIGNhbGwgc2F1bAppbGx1bWluYXRpCmxlaWNhIHNsMiAzMG1tCm9mZmljaWFsIHBvcnRyYWl0Cm5vIG1hbidzIHNreQppbnNpZGUgYSBzcGFjZSBzdGF0aW9uCmRyZWFkCmFuYWxvZyBob3Jyb3IKc2hvdCBvbiBsYXJnZSBmb3JtYXQgZmlsbSBjYW1lcmEKZmFtaW5lCmFuaW1lIG1hbmdhIHN0eWxlCm1pbmltYWxpc3Qgc3R5bGUKOGsgcmVzb2x1dGlvbiBvY3RhbmUgcmVuZGVyZXIKcmFpbmJvdyBoYWlyCm4gOQpmYW50YXN0aWMgZGV0YWlscwphcnRlbWl4ZWwKcGFuYXZpc2lvbiBwYW5hZmxleCB4CmJlaGluZCB0aGUgc2NlbmVzCmV4cGxvZGVkIHZpZXcKdmVjdG9yIGFydCBzdHlsZQp3aGl0ZSBsaWdodAp0b3JjaGxpZ2h0CmFuZHJlYXMgbWFyc2NoYWxsCnZlY3RvciBzdHlsZQpraW5lbWFjb2xvcgpzaWxob3VldHRlcwpleWViYWxscwpwcmVjaW91cyBlbGVtZW50cwpkaW5vc2F1cgp2ZXJ5IGxvdyBhbmdsZSBwaG90b2dyYXBoCm1hbmljCm11dGVkIGNvbG9yIHBhbGV0dGUKZW1tYSB3YXRzb24gYXMgY2F0d29tYW4KMS8yNTBzCmVzb3RlcmljIGFydApiYXR0bGVzdGFyIGdhbGFjdGljYQpzdGFyZ2F0ZQpsYXJnZSBibGFjayBleWVzCmlsbHVzdHJhdGlvbiBpbiBwZW4gYW5kIGluawpzY2hvb2wgZ2lybApmdXR1cmlzdGljIGNsb3RoZXMKYXJ0IG11c2V1bQo2MHMgcG9zdGVyCm1haW4gY2hhcmFjdGVyCnBpb3RyIGphYmxvbnNraQpkZXRlY3RpdmUgY29hdApzdHlsZSBvZiBzdGFubGV5IGFydGdlcm0KYmVlcGxlLiBvY3RhbmUgcmVuZGVyCmhvcnJvciB2YWN1aQp3ZWRkaW5nIHBob3RvCmxnYnQKdmhzIGdsaXRjaApib2tlaCBjaHJvbWUgYWNjZW50cwpyb3R0ZW4gZmxlc2gKcGlnbGV0CnVyYmFuIGFyY2hpdGVjdHVyZQpwcm91ZApmZW1tZSBmYXRhbGUKZ29vZCBsaWdodAp0aGUgYXlhaHVhc2NhIHNwaXJpdAppbnRlbnNlIGNvbG9yCmdsb3dpbmcgZ3JlZW4gZXllcwozIGQgbW9kZWxpbmcKc2hhcnAgZWRnZQppbm5vdmF0aXZlIGF2YW50IC0gZ2FyZGUgYXJ0CnJldHJvIHZpYmUKYmVhdXRpZnVsIGxvdyBsaWdodApmb29kIHN0YWxsCnNlcmVuZSBkZXNlcnQgc2V0dGluZwpzeW1ib2xpc3QgcGFpbnRpbmcKZXhwcmVzc2lvbmlzbSBtb3ZlbWVudApoZWxsaXNoIGJhY2tncm91bmQKZGlvcmFtYSBtYWNybyBwaG90b2dyYXBoeQpjaGFybGllCmdyYXBoaWMgcHJpbnQKbWlhbWkgdmljZQpzb3ZpZXQgYXJ0CnN0eWxpemVkIHBhaW50aW5nCndlbGwgYXJtb3JlZAptYW50aWQgZmVhdHVyZXMKd2hpdGUgYm9iIGN1dCBoYWlyCnJlcGxpY2FzCnBpcGluZwphcnQgZGVjbyBhcmNoaXRlY3R1cmUKaC4gaHlkcm9jaGFlcmkKaGlnaCBkZWZpbml0aW9uIGRldGFpbApkZXRhaWxlZCBhbmQgc3ltbWV0cmljIGZhY2VzCmJlZXBsZSBhbmQgZ3JlZyBydXRrb3dza2kKc3R1bm5pbmcgYmVhdXRpZnVsCm9jZWFuIGZsb29yCnBhc3RlbHMgY29sb3VycwoxIDkgOCAwIHMgc2NpZW5jZSBmaWN0aW9uCmR5bmFtaWMgaGFpciBtb3ZlbWVudApyZWFsaXN0aWMgbGlnaHRuaW5nCnVsdHJhc2hhcnAgZGV0YWlsCmJla3Npc25za2kKOCBrIGhkciBtb3ZpZSBzdGlsbApwZXJmZWN0bHkgZGV0YWlsZWQKbGlnaHQgc3BhcmtsZXMKc3ByYXlwYWludAptYXhpbWFsaXN0IG1hZ2F6aW5lIGNvbGxhZ2UgYXJ0CnlvdW5nIGJveQpzdHVkaW8gZ2hpYmxpIGtleSB2aXN1YWwKdWx0cmEgc21vb3RoCmNvcnBzZQp0YWxsIGhhbmRzb21lIGd1eXMKaGVhZHBob25lcyBkaiByYXZlCnIuIGNydW1iCmRhcmsgLSBmYW50YXN5CmNlbnRlcmVkIHBhaW50ZWQgcG9ydHJhaXQKdHJlbmRpbmcgYXJ0c3RhaXRpb24KY3VydnkgaG91cmdsYXNzIGZpZ3VyZQpkbXQgZnJhY3RhbCBwYXR0ZXJucwpvZmYgd2hpdGUKYm9uZSBwbGFudHMKbG92ZWx5IGJva2VoCnJlZCB3ZWFwb24gOCBrIHMgMyA1CmNvb2tlIGFuYW1vcnBoaWMgLyBpIGxlbnNlcwpib3VnZXVyZWF1CnJlZmxlY3RpdmUgcHVmZmVyIGphY2tldAprb2kKbG9uZyBmaW5lIGZsb3dpbmcgaGFpcgpnbGl0Y2ghIQpkZXNpZ25lZCBpbiBibGVuZGVyCmVwaWMgcmVhbCBmYW50YXN5CmNvbXB1dGF0aW9uCnRoZSBmaW5hbCBmcm9udGllcgpyZWQgc3RyaXBlCmRyZWFtIGhlYXZlbmx5IGNsb3VkeSBza3kKaHlwZXJtYXhpeW1hbGlzbQpwb3J0cmFpdCBuaW5qYSBnYWlkZW4gZ2lybApjeWJlciBuZWNrbGFjZQphd2FyZCAtIHdpbm5pbmcgZGV0YWlscyDigJ0KdmZ4IGZpbG0gY2xvc2V1cAozIGQgb2lsIHBhaW50aW5nCmV4dHJlbWUgY2xvc2UgdXAgc2hvdApwaXhhciBhbmltYXRpb24KZ3JlYXQgbGV2aWF0aGFuIHR1cnRsZQpoIHIgZ2lnZXIgYW5kIGFscGhvbnNlIG11Y2hhCjE5NzUKNzVtbSBsZW5zCmFmdGVyIGVmZmVjdHMKaW5kdXN0cmlhbCBzY2kgLSBmaQpqdXN0aWNlCmFwcGxlCnJlY29yZCBqYWNrZXQKbWFycyBtaXNzaW9uCnRhdHN1cm8ga2l1Y2hpCnNjdWxwdGVkCmhpZ2hseSBkZXRhaWxlZCBmdWxsIGJvZHkKbW9vbmxpdCBuaWdodApjYWxsb3V0cwpwZWRpb3Bob2JpYQpyb2JvdGljIHByb3N0aGV0aWMgbGltYnMKdHdvIHBvaW50IHBlcnNwZWN0aXZlCjEgOSA5IDMKdGVhbCBhbmQgb3JhbmdlCnZhcmlhdGlvbgplbGVjdHJpZmllZCBoYWlyCm1peGVkIGRldmVsb3BtZW50Cm1hZGUgaW4gMjAxOQpzcHJpbmd0aW1lCmF1dG9kZXNrIG1heWEKbGlnaHQgYnJvd24gc2tpbgpleWUgLSBsZXZlbCBtZWRpdW0gc2hvdApiaWxsZWxpcwpibGVuZGVyIGN5Y2xlcyByZW5kZXIKaW4gYSBjb250ZW1wb3JhcnkgYXJ0IGdhbGxlcnkKdmZ4IGFydApmaXJzdCBwZXJzb24KZnVqaWZpbG0gdmVsdmlhIDUgMAptb3ZpZSBmcmFtZQpleHRyZW1lbHkgZGV0YWlsZWQuIDhrCmRhcmsgaG9ycm9yCmh5c3RlcmljYWwKcHN5Y2hlZGVsaWMgdGhlcmFweQpzdW1tZXJ0aW1lCnNoZWVwCmdvcnkKcGF0dGVybnMKc3BlY2lhbCBmb3JjZXMKc2l0dGluZyBvbiB0aGUgY29zbWljIGNsb3Vkc2NhcGUKdWkKY290dG9uIGNhbmR5CnVuaWZvcm0KdmVyeSBjb29sCnB1ZmZ5CmRyYW1hdGljIHBlcnNwZWN0aXZlCmluayBzdHlsZQpleGNpdGVkCm1hZ2ljIGhvdXIgbGlnaHRpbmcKaW1heCA3MG1tIGZvb3RhZ2UKZWxnYW50Cmxvbmcgc2hhZG93Cm1vYml1cwpkYXJrIGJsdWUgaGFpcgplbmdsaXNoIGhlcml0YWdlCm9seW1wdXMKcmVkIHN1bnNldApjYXRob2xpYwpvdmVyY2FzdCBza3kKb3ZlcmRldGFpbGVkCjMwIHllYXJzIG9sZAp0aW1lcyBzcXVhcmUKc2lkIG1lYWQKdHJpYmFsIHRhdHRvb3MKc2hvcnQgc2lsdmVyIGhhaXIKY3JhY2tzCnByb2R1Y3Qgc2hvd2Nhc2UKdG9kZCBtY2ZhcmxhbmUKY291cnRlc3kgb2YgY2VudHJlIHBvbXBpZG91CmNoYXJpc21hdGljCnVsdHJhIGhpZ2ggZGV0YWlsIHVsdHJhIHJlYWxpc20KaW1tZW5zZSBkZXRhaWwKaGlnaCByZWFsaXNtCmJvbGQgY29sb3VycwptYXlhIGVuZ2luZQpwcm9tb3Rpb25hbCBwb3N0ZXIKOGsgaGlnaCBkZXRhaWwKYmF0dGxlIHN0YW5jZQpzdW4gc2hpbmluZwp2aWJyYW50IGJyaWdodCBjb2xvcnMKc3RhaW5lZCBnbGFzcyB3aW5kb3dzCnNob3J0IGJsYWNrIGhhaXIgd2l0aCBiYW5ncwpzaXJlbgpsaWdodG5pbmcgYm9sdApzaGlueSBnb2xkCmxpZ2h0IHB1cnBsZSBtaXN0CnNvdmlldCByZWFsaXNtCmF3YXJkLXdpbm5pbmcgY2luZW1hdG9ncmFwaHkKZGVzdGlueSAyCnRyYW5zZm9ybWF0aW9uIHNjZW5lCmdvbGRlbiBkZXRhaWxzCmVwaWMgZGV0YWlsCmFtZXJpY2FuIHByb3BhZ2FuZGEKZ29sZGVuIGhhbG8KcmVkIG1vb2QgaW4gYmFja2dyb3VuZApraW5kCmVsZWN0cmljIHNwYXJrcwpidWZmCmZpc2huZXRzCmhlbGxvIGtpdHR5Cmdob3N0IGluIHRoZSBzaGVsbCBtb3ZpZSBzY2VuZQp2ZXJ5IGRldGFpbGVkIHBhaW50aW5nCmJhcmUgc2hvdWxkZXJzCmFtZXJpY2FuIGZsYWcKaGlnaCBsaWdodCBvbiB0aGUgbGVmdApsYXJhIGNyb2Z0CmZhY2UgYW5hdG9teQpjb2xvciBncmFmbGV4IG1hY3JvIHBob3RvZ3JhcGgKY29ycmVjdCBkZXRhaWxzCmZhbnRhc3kgYWVzdGhldGljCnllYWgKc2FiYmFzIGFwdGVydXMKa2FybCB1cmJhbgpzeWx2ZXN0ZXIgc3RhbGxvbmUKc3Ryb25nIGRlcHRoIG9mIGZpZWxkCmRyYW1hdGljIGFjdGlvbiBwb3NlCnNlb3VsCmZpZ3VyYXRpdmUKd2F0ZXIgZHJvcGxldHMKd29ybGQgb2Ygd2FyY3JhZnQgc3BsYXNoIGFydApycGcgZ2FtZSBpbnZlbnRvcnkgaXRlbQoyIGQgdmVjdG9yIGxvZ28Kd2l0aCBhIGJyaWxsaWFudApibHVyIGVmZmVjdApjZ3NvY2lldHkgLSB3IDEgMCAyIDQgLSBuIDggLSBpCmNyb3dkIG9mIHBlb3BsZQpjaGFyYWN0ZXJzIGZyb20gbWFjaGluYXJpdW0KbG90ciApCnNpZ21hIDggNSBtbSBmIC8gMS4gNAoxIDkgMiAwCmxvb2tpbmcgc3RyYWlnaHQgaW50byBjYW1lcmEKdXRvcGlhbiBhcmNoaXRlY3R1cmUKa295b2hhcnUgZ290b3VnZQpoaWRla2kgYW5ubwp0aGljayBsaW5lcyBoaWdobHkgZGV0YWlsZWQKc2NoaXpvcGhyZW5pYQpndGEgNSBjb3ZlcgpjbXlrCmdyZWVuIG1hZ2VudGEgYW5kIGdvbGQKYXdhcmQgLSB3aW5uaW5nIHBhaW50aW5nCmVsZGVuIHJpbmcgYXJ0CmhhcnNoIG5lb24gbGlnaHRzCmVwaWMgZmFudGFzdHkgY2FyZCBnYW1lIGFydApsZXNiaWFuCndhcm0gY29sb3VyIHNjaGVtZQpzd2VhdHkgNCBrCigoc3BhY2UgbmVidWxhIGJhY2tncm91bmQpKQpkYXJrIG15dGggbXl0aG9zCmFsaWVuIHNoaXAgd3JlY2sKc3RhbmRpbmcgdW5kZXIgdGhlIHNlYQp0aGluIGdsb3dpbmcgd2lyZXMKYXJub2xkIDMgZCByZW5kZXIKdGVjaG5vbG9neSBtZWV0cyBmYW50YXN5CmZ1bGwgc2hvdCBmYXNoaW9uIHBob3RvZ3JhcGh5CnNtb290aCBmYWNpYWwgZmVhdHVyZXMKcmVuZGVyZWQgaW4gcG92IC0gcmF5CnB1a2luZyBibG9vZAp2ZXJ5IGhpZ2ggaW50cmljYXRlIGRldGFpbHMKc3RyaXBlcwpkb29kbGUKdGVjaG5vbG9naWNhbCBsaWdodHMKYmlvZGl2ZXJzaXR5CnByaXR6a2VyIGFyY2hpdGVjdHVyZSBwcml6ZQpibGFjayB3aXJlZCBjYWJsZXMKYW5hdG9taWNhbGx5IGNvcnJlY3QgZXF1aW5lCnNwaXJhbCBjbG91ZHMKcm95YWwgYWNhZGVteQpldGhlcmVhbCBnbGFyZSBvZiB0aGUgc3VuCnN0cmVhbWxpbmVkIHdoaXRlIGFybW9yCnByZXkgcG92CmJyb3duIGNvbG9yIHBhbGV0dGUKYnVyc3Qgb2YgcG93ZGVycwptaW5vcnUgbm9tYXRhCnBlbmNpbGUgYW5kIGluawpwcm9kdWN0IGRlc2lnbiBjb25jZXB0CmxpcXVpZCBoYW5kcyBhbmQgZmVldCBzcGlubmluZwpnaXJsIHdpdGggbG9uZyBoYWlyCnVoZHIKKCAoIHZpY3RvIG5nYWkgKSApCnBsYW50IHByZWRhdG9yCiggKCBydWlucyBvZiBhbmNpZW50IHJvbWUgKSApCm1pbGl0YXJ5IGdlYXIKc21vb3RoIGJhY2tncm91bmQKcHVibGlzaGVkIGNvbmNlcHQgYXJ0Cmdsb3dpbmcgbWFnZW50YSBmYWNlCm1pbmltYWwgbW92aWUgcG9zdGVyCm5hdHVyYWwgYm9uZXMgYW5kIHNraW4Kd2luZCByb3NlCnR3aW4gcGVha3MgbW92aWUgcG9zdGVyIGFydAp3YXRlcmNvbG9yIGlsbHVzdHJhdGlvbiBzdHlsZQpjb2xsYWJvcmF0aXZlIGFydHdvcmsKbWVyY3VyeQpkZXRhaWxlZCBmYWNlIGZlYXR1cmVzCnN1biBnbGludHMKbG90cyBvZiBzdGVhbSBhbmQgc3BhcmtzCmRyYW1hdGljIHN0YW5kaW5nIHBvc2UKeW91bmcgd2l0aCBsb25nIGhhaXIKdG9vbiByZW5kZXJpbmcKc2hyb3VkZWQgZmlndXJlCmRldGFpbGVkIGFuZCByZWFsaXN0aWMgaGFuZHMKZ2xvd2luZyBibHVlIGV5ZXMKc2NoZW1hdGljcwpwcml2YXRlIGNvbGxlY3Rpb24KbWFzdGVycGllY2Ugd29yawpjb2xvcmZ1bCBtb2Rlcm4KY29vbCB3aGl0ZSBjb2xvciB0ZW1wZXJhdHVyZQpiYWNrbGlnaHQgZ2xvdwpoeXBlciBkZXRhaWxlZCBwaG90b3JlYWxpc3RpYwp1bHRyYSB3aWRlLXNob3QKYnJpdG5leSBzcGVhcnMKd29ybXMKaW4gdm9sdW1ldHJpYyBzb2Z0IGdsb3dpbmcgbWlzdApzdW1pIC0gZSBzdHlsZQpvcmFuZ2Ugc2t5CmhvcnJpZmljIGJlYXV0aWZ1bCB2aWJlCm11bHRpcGxlIGFuZ2xlcwpjbG9ja3dvcmsgaG9ycm9yCnZlcnkgZm9nZ3kKZ3VjY2kgY2F0d2FsawpleGFnZ2VyYXRlZCBib2R5IGZlYXR1cmVzCmxvdyBxdWFsaXR5IHByaW50CnVsdHJhZGV0YWlscwpjb2xvcmZ1bCByZWZyYWN0ZWQgc3BhcmtsZXMKc3RhciBsaW5lcwptYXN0ZXJwaWVjZSBpbmsgaWxsdXN0cmF0aW9uCnNlcXVlbmNlcwp2aXN1YWxpdHkKcGFyYWxsZWwKY2xlYXIgY3VydnkgZGV0YWlscwpwcmVjaXNlIGFuZCBpbnRyaWNhdGUgbGluZXdvcmsKbWFjaGluZSBndW4gZmlyZQpsbGFtYQp2aXJhbCBvbiBpbnN0YWdyYW0KZ2lnZXIgc3R5bGUKY2FydG9vbiBpbGx1c3RyYXRpb24Kd2lkZSBmb2N1cwpzeW1tZXRyaWNhbCBwb3NlCm92ZXJ3ZWlnaHQKZmluZWx5IGRldGFpbGVkIHBlcmZlY3QgZmFjZQptb2JpbGUgZ2FtZQplbW90aW9uCmFycm93cwpnbWFzdGVyCnllbGxvdyBiYWNrZ3JvdW5kCmZ1enp5Cmh1bWJsZQpoYW5kIHBhaW50ZWQKZXh0cmF2YWdhbnQKbmV0ZmxpeApsb3JkIG9mIHRoZSByaW5ncyBzdHlsZQpiaW90ZWNoCmNvbmZpZGVudCBwb3NzZQpmbG9jayBvZiBiaXJkcwpnYW1lIG1hcApzaGF2ZWQgaGVhZApzZWNyZXQKZ2FpYQpkaXJ0eSBmYWNlCnBvcnRyYWl0IGxpZ2h0aW5nCmdvcHJvCmVjbGVjdGljCmNhc3RsZXZhbmlhCm9pbCBwYWludCBvbiBjYW52YXMKcGFpbnQtb24tZ2xhc3MgcGFpbnRpbmcKYXdhcmQgd2lubmluZy4gbWFzdGVycGllY2UKdG9wIGhhdApzaGFkZXJzCnRpbHQtc2hpZnQKc3RhaW5lZCBwYXBlcgp2b2x1bWV0cmljIHNvZnQgbGlnaHRpbmcKc2lnZ3JhcGgKZGV0YWxpZWQKYmx1ZSBnbG93CmhpZ2hseSBkZXRhaWxlZCBpbnRlcmlvcgphcm15CnJlYWwgZXZlbnQKc2VsZiBwb3J0cmFpdApmcnVpdCB0cmVlcwppbGx1bWluYXRlZCBtYW51c2NyaXB0CmNpbmVtYSBsaWdodGluZwp2aW50YWdlIHBob3RvZ3JhcGh5CmVwaWMgaWxsdXN0cmF0aW9uCmV4dHJlbWUgY2xvc2UtdXAKcmVhbGlzdGljIGxpZ2h0CndoaXRlIHBhcGVyCmhpZ2ggYW5nbGUgc2hvdApyb3R0ZW4KYmVhdXRpZnVsIGFuaW1lIGdpcmwKYWxiZWRvCnBpeGFyIHJlbmRlcmluZwpmb3VuZCBmaWxtCmluIGludGVyZ2FsYWN0aWMgaHEKaGVhdnkgZGV0YWlsCmNsb3NlIHBvcnRyYWl0CmFuIGluc2FuZQp0b3VnaAplbXB0eSBoYW5kcwpiYXJhY2sgb2JhbWEKdmludGFnZSAxOTYwIHByaW50CmZpbmFsLWZhbnRhc3kKbWlkcmlmZgplbnZpcm9ubWVudCBkZXNpZ24KYmlnIGJ1ZGdldCBob3Jyb3IgbW92aWUKcm9jayBxdWFycnkgbG9jYXRpb24KbWFuZ2EgcGFuZWwKc3RlYW1wdW5rIGNpdHkKYm9keSBidWlsZGVyCm92ZXIgdGhlIHNob3VsZGVyIHNob3QKbGlnaHQgbW9kZQphdXR1bW4gY29sb3JzCm5vIGhhaXIKY2FydG9vbiBuZXR3b3JrCm1vcmFuZGkKZHJlYW1jb3JlCmNsZWFuIGluawpkYW5ueSBkZXZpdG8KY3Jvd3MKbXVsdGljb2xvcmVkIGdsaW50cwpncmVlbiBsaWdodApvcndlbGxpYW4Kd2FybSBsaWdodHMKZW5pZ21hCmNoZWVybGVzcwpyZ2IgZXRoZXJlYWwgbGlnaHRpbmcKaG9seSBnbG93CmJlYXV0aWZ1bCBjb25jZXB0IGFydApvaWxlZCBoYXJkd29vZCBmbG9vcnMKYWJzdHJhY3QgYmFja2dyb3VuZApmZXJyb2ZsdWlkCmNpbmVzdGlsbCBjb2xvdXIgY2luZW1hdG9ncmFwaHkKcHVscCBmaWN0aW9uCmZyaWVuZGx5IGd1eSBhbmQgc21hbGwgY3JlYXR1cmUKdGFpbApzdXBlciBjdXRlCmdlaXNoYQpwcm9maWxlIHBpYwppbWFnaW5lIGZ4CnNtb2tpbmcgY2lnYXJldHRlcwpodW1pZApzdG9wbW90aW9uCmplYW4gc2hvcnRzCnNob3J0IGJsYWNrIGN1cmx5IGhhaXIKZnJlbmNoCmNvbmNyZXRlIGFyY2hpdGVjdHVyZQpyYWlkZW4gbWV0YWwgZ2VhcgpzbWFsbCBkZXB0aCBvZiBmaWVsZAppbiBhIGZpZWxkCnZpY3RvcmlhbiBzdHlsZQppbmsgYW5kIHdhdGVyY29sb3IKd2hhbGUKbWFzdGVyZnVsIGNvbXBvc2l0aW9uCnJhaW5mYWxsCm5ldmlsbGUgcGFnZQpzdGFuZGluZyBpbiBhIGxha2UKd2VhcmluZyBhIGJvbWJlciBqYWNrZXQKbWVkaXVtIC0gc2hvdAp1bnJlYWwgNSBlbmdpbmUKdG9ueSBzYW5kb3ZhbApzdGFycnkgYmFja2dyb3VuZAphZ2VkIGFybW9yIHBsYXRpbmcKZGV0YWlsZWQgc2NlbmVyeQpzbWFsbCB2aWxsYWdlCnBpbmsgd2F0ZXJmYWxscwpsaWdodCBlZmZlY3QuIGh5cGVyIGRldGFpbGVkCmdyZWF0IGxpZ2h0CmFxdWlsaW5lIG5vc2UKaW50cmljYXRlIHdyaXRpbmcKc3BlY2lhbCBlZmZlY3RzCnJlYWxpc3RpYyBjcmlzcCB0ZXh0dXJlcwpjdW11bG9uaW1idXMKaGVhdmVubHlkYWVtb25pYwp0b3AgYW5nbGUKbmF0dXJhbCBwaHlzaXF1ZQpzd2lybHkKMyAvIDQgc2hvdApob2xkaW5nIGEgZ2xhc3Mgb2Ygd2luZQpydXN0aWNhdGVkIHN0b25lIGJhc2UKbmV3IHlvcmtlciBpbGx1c3RyYXRpb24KdHdvIGNvbG9ycwpuaWNvIHRhbmlnYXdhCnNtZWFyZWQgZmxvd2Vycwp3aGl0ZSBzdWl0IGFuZCBibGFjayB0aWUKZmx1ZW50IGNvbXBvc2l0aW9uCnJlYWwgaHVtYW4gZmFjZXMKdGVjdG9uaWMgc2t5CmN1cnZlZCBwZXJzcGVjdGl2ZQphbmltZSBzdGlsbCBmaWxtIGFuaW1lIHNoaWtpc2hpCmZyb3N0aW5lIGVuZ2luZQpuYyB3eWV0aCBwYWludGluZwppbmsgZHJhdwphcnQgaW4gNCBrCmZ1dHVyZSBzb2xkaWVyIGNsb3RoaW5nCmZ1dHVyZSBjb21iYXQgZ2VhcgphbmFtb3JwaGljIGNpbmVtYXRvZ3JhcGh5CmdvbGRlbiBjaGFpbgpoeXVuZyB0YWUgYW5kIGZyYW5rIGZyYXpldHRhCmhvbGRpbmcgYSB3b29kIHBpZWNlCmRpZ2l0YWwgZm94Cmh5cGVyIC0gZGV0YWlsZWQgOCBrCmRpZ2l0YWxibGFzcGhlbXkKYnJlYXN0cGxhdGUKbGFyZ2UgZGlhbW9uZHMKY3Jvd24gb2YgZ2lhbnQgZGlhbW9uZHMKZnVsbHkgYm9keSBwb3NlCmluIHNvZnQgZHJlYW15IGxpZ2h0IGF0IHN1bnNldApzb3JheWFtYS4gb2NjdWx0IGFydApzdG9pYyBmYWNpYWwgZXhwcmVzc2lvbgpzYXQgZG93biBpbiB0cmFpbiBhaWxlCm1lZGlldmFsIGRyZXNzIHllbGxvdyBvY2hyZQp3aWxsIHRlcnJ5CmhvcnpvbgpoZSBpcyBhYm91dCAyIDAgeWVhcnMgb2xkCmFuaW1lIHZpYmVzCnZlcnkgY2xvc2UgdXAgZm9vdCBwb3Ygc2hvdApzYWNyZWQgZmVtaW5pbmUKYnJlYXRodGFraW5nIGxhbmRzY2FwZQpmbHVpZCBsaW5lcwpoaWdobHkgZGV0YWlsZWQgc3VycmVhbGlzdCBhcnQKY2luZW1hdGljIDQgawp3aXJlcyBtYWRlIG9mIGNvcHBlcgp0bXoKd3cxIHBob3RvCmhvcnJvciBzcG9va3kKc291bHMKbW91bnRhaW5zIGluIHRoZSBkaXN0YW5jZQphbmltZSBjaGFyYWN0ZXIKZ3JhaW55IHRleHR1cmUKdmlld2VkIGZyb20gYWZhcgp6ZW5pdGhhbCBsaWdodG5pbmcKbmlnaHQgdmlzaW9uCnBlcmZlY3QgcGhvdG8Kd2V0IHN0cmVldApjaW5lbWF0aWMgbW92aWUgc2NlbmUKYWZ0ZXJub29uIGxpZ2h0CnN1cmZhY2UKaW1tYXRlcmlhbAppbGx1c3RyYXRpdmUKYnVsbGV0IGhvbGVzCmZyYW5jb2lzZSBuaWVsbHkKbGFyZ2UgY3Jvd2QKYmFsZGluZwpkYW5jZQpjb3JnaQpsaWdodHMgYXJlIG9uIGluIHRoZSB3aW5kb3dzCm1ldGFsbGljIHJlZmxlY3Rpb25zCmR5c3RvcGlhbiBmdXR1cmUKdmlld2VkIGZyb20gYmVsb3cKNiA0IG1lZ2FwaXhlbHMKc2VhIGluIHRoZSBiYWNrZ3JvdW5kCmRhcmsgZ3JleSBza2luCmRpcmVjdCBzdW5saWdodAozNW1tIGNvbG9yIGxvbW9ncmFwaHkKc2hvdCBpbiB0aGUgcGhvdG8gc3R1ZGlvCndpZGUgcGVyc3BlY3RpdmUKZmlsbSBsb29rCnByb2R1Y3QgaW50cm9kdWN0aW9uIHBob3RvCmhpZ2hseSBpbnRyaWNhdGVseSBkZXRhaWxlZApnb29kIHZlcnN1cyBldmlsCmJhbGxvb25zCmRhcmsgYWNhZGVtaWEKaW5zcGlyYXRpb25hbAptZWFuaW5nZnVsCnZlcnkgZXBpYwpicml0aXNoIG11c2V1bQpkcmVhbS1saWtlCnZlcnkgaGlnaCBkZXRhaWxlZApwZWFjZWZ1bCBhdG1vc3BoZXJlCmJlYXV0aWZ1bCBibHVlIGV5ZXMKcmFwdHVyZQpmYXJtCmJlYXV0aWZ1bCBleWVzIG1lZGl1bSBzaG90Cmdob3N0LWluLXRoZS1zaGVsbAptaWxhbiBmYXNoaW9uIHdlZWsgYmFja3N0YWdlCmNhbmR5CmJhZ2d5IHB1cnBsZSBvdmVyYWxsIHNob3J0cwpmbG9hdGluZyBpc2xhbmRzCnBob3RvZ3JhcGhpYyBwb3J0cmFpdApzaGFkeQpibGFkZXJ1bm5lciAyMDQ5CmNvbW1pc3Npb24KYmVhdXRpZnVsIGhhaXIKY3VzaGlvbnMKYW1hemluZyBiYWNrZ3JvdW5kCm9jZWFuIGJhY2tncm91bmQKdHJhaWwgY2FtCmV4b3RpYyBhcnRpZmFjdHMKZ3JlZW4gaGlsbHMKc3Ryb25nIGphdwpyZWQgdGllCnN0cm9uZyBsaWdodAphcGV4IGxlZ2VuZHMgY29uY2VwdCBhcnQKc2lnbWEgYXJ0IGxlbnMKYm8gYmFydGxldHQKcGl4YXIgY2hhcmFjdGVyCmxpZ2h0bmluZyBzdG9ybQpjaGVuZ3dlaSBwYW4KYm91cXVldHMKYm9yaXMgdmlsbGFqbwpyZWQgYW5kIGdvbGQKaG9nd2FydHMKbW92aWUgcG9zdGVyIHN0eWxlCnN1bmRvd24KaW5zcGlyZWQgYmxpenphcmQgZ2FtZXMKZ29kcwphdmF0YXIgdGhlIGxhc3QgYWlyYmVuZGVyCmh1Z2Ugd2luZ3MKZWVyaWUgZm9nCmxhcmdlIGRyYXBlZCBjbG90aApzY2FybGV0dCBob29mdApncmFhZmxhbmQKcG9sYXJvaWQgcGljdHVyZQpodW1hbiBicmFpbgpwYWdlCmRyZWFtaW5nIGlsbHVzaW9uCnB1bGl0emVyIHdpbm5pbmcKZmlsbXN0aWxsCnByb2Zlc3Npb25hbCBsaWdodApkYXJrIGVwaWMgZmFudGFzeQpncmVlbiBkcmVzcyB3aXRoIGEgYmxhY2sgaG9vZApoYW5kc29tZSBzcXVpZHdhcmQKZXhhc3BlcmF0ZWQgZXhwcmVzc2lvbgpmYWlyeSBsaWdodHMKcmVzdGluZwpnb29nbHkgZXllcwplbW1hIHdhdHNvbiBmb3IgdmljdG9yaWFuIHNlY3JldApkZXB0aCBvZiBmaWxlZApmYW50YXN5IGNoYXJhY3RlciBhcnQKcGFsbXMKdGhpY2sgYnJ1c2hzdHJva2VzCmF3a3dhcmQKZXBpYyB1bHRyYXdpZGUgc2hvdApzb21lIHN1bmxpZ2h0IHJheQp2b2dlIHBob3RvCnRveXMKcmViaXJ0aAp3aW50ZXIgbGFuZHNjYXBlCmJpZyBwaW5rIGV5ZXMKc2lzdGluYQpkYyB1bml2ZXJzZQpnYXRlCm9uIHdoaXRlIGJhY2tncm91bmQKZGFyayBmYW50YXN5IGVzb3RlcmljCnNob3J0IHB1cnBsZSBibGFjayBmYWRlIGhhaXIKZmFpciBjb21wbGV4aW9uCmZsdWZmeSEhIQpwb3J0cmFpdCBvZiBhIHlvdW5nIHdvbWFuCm5la28Kc2lnbWEgbG9vawpoYW5naW5nIHNjcm9sbAp3aWxsaWFtIHdhdGVyaG91c2UKY2VsZWJyYXRpb24KYXJjaGl0ZWN0dXJhbCBkaWdlc3QKZWxhYm9yYXRlIGRldGFpbHMKcGV0ZXIgbW9ocmJhY2hlciBzdHlsZQpkZXRhaWxlZCBsaW5lIGFydApoYWNrbmF1dCBjeWJlcnB1bmsKaGlnaGx5IGRldGFpbGVkIQppY29uaWMgaWNvbgp0IC0gc2hpcnQgZGVzaWduCmFjY2lkZW50YWwgZmxhc2gKd2VzdGVybiBjb21pYwpuZXcgY2xhc3NpYwphenRlYyBzdHJlZXQgZmFzaGlvbgpob25leSBiaXJkZXR0ZQpyYWluc3Rvcm0KYXdlIC0gaW5zcGlyaW5nIGF3YXJkIC0gd2lubmluZwpkYXJrIHBoYW50YXN5Cnhpc2lvbgpib3dhdGVyIGNoYXJsaWUgYW5kIGJyb20gZ2VyYWxkCmdyZWVuIGdsb3dzCmJlYXV0aWZ1bCBtYWNybyBwaG90b2dyYXBoeQpicmlnaHQgZ3JlZW4gZXllcwppc28gNCAwIDAKaGkgLSBmcnVjdG9zZSBhcnQgbWFnYXppbmUKY29udHJhc3Qgc2hhZGluZwpzb3Vsc2xpa2UKMSA5IDAgMApkaWxhcGlkYXRlZApkaXNjb3ZlcnkgY2hhbm5lbAplbXBhdGhpYwp2aW50YWdlIGNsb3RoaW5nCmxhcmdlIGVhcnMKc2luZ2xlIHJheSBvZiBzdW4Kc3R5bGUgb2YgbWFydmVsCjggMCdzCmZvZyByb2xsaW5nIGluCnBvc3QgbW9kZXJuaXN0IGxheWVyaW5nCmhpZ2hrZXkKaGlnaGx5IGludHJpY2F0ZSBkZXRhaWxlZApncmFkaWVudCBsaWdodCB5ZWxsb3cKYXJjaGl0ZWN0dXJhbCBtb2RlbApibGFjayB3aW5ncwpzaG90IHdpdGggYSBhcnJpZmxleCAzNSBpaQp3bG9wISBtdXRlZCBjb2xvcnMKdm9sdW1ldHRpYyBsaWdodAphY2N1cmF0ZWx5IHNoYXBlZCBmYWNlCnNlbnN1YWwgYm9kaWVzCndoaXRlIG1vb24Kd2VpcmQgYW5kIGRpc3R1cmJpbmcKY3Jpc3AgZm9jdXMKaW50cmljYXRlIGN5YmVycHVuayBjaXR5CmFsZXggcGFyZGVlCmRlbGljYXRlIGNvcmFsIHNlYSBib3R0b20KZGV0YWlsZWQgYW5pbWUgc29mdCBmYWNlCmN5YmVycHVuayB3ZWFyaW5nCnRoaW4gZ2xvd2luZyBsaWdodHMKdmVyeSBwb29yIHF1YWxpdHkgb2YgcGhvdG9ncmFwaHkKbGV5ZW5kZWNrZXIgc3R5bGUKZmlyZSBwb3dlcnMKc3RvbmUgb2NlYW4KcHVycGxlIGNsb2FrCmJhZ2VscwpyYXZlIG90dWZpdApiYXR0ZXJ5IGFuZCB3aXJlcwpwcmluY2UgY3Jvd24gb2YgcGluayBnZWFycwpzbGVlayBleWVzCmZsYXdsZXNzIGNvbXBsZXRpb24KYXJ0IG5vdXZlYXUgKCAxIDkgMiAyICkKcmFiYml0IGdyb290IGFzIG1hcmJsZSBzdGF0dWUKdmNyIHRhcGUKaXJhcSBuYWRhcgpmbG93ZXIgZ2FyZGVuCmNvenkgYXRtb3NwaGVyZQpjcmVlcHkgY3JlYXR1cmUKNCBrIC8gOCBrCmRydWdzCnN1cGVyLXJlc29sdXRpb24KdmlyYWwKZGF2aWQga29zdGljCmhhdW50aW5nIGF0bW9zcGhlcmUKZW5nbGFuZApzaWduCm1lbnRhbAppbXByb3Zpc2F0aW9uCmV2aWwgZXllcwpzdHlsZSBvZiBnaWdlcgpyb29mdG9wCmJ1bGxldCBob2xlcyBhbmQgYmxvb2Qgc3BsYXR0ZXIKY2hpYwphbWJpZW50IHZvbHVtZXRyaWMgbGlnaHRpbmcKc2lkZSBhbmdsZQpnaW9yZ2V0dG8gZ2l1Z2lhcm8KbWFkZSBpbiBibGVuZGVyCnJlZmxlY3QKZGV0YWlsZWQgaW50cmljYXRlCnBob3RvIG9mIHRoZSB5ZWFyCmZsb29kZWQKdGFjdGljYWwgZ2Vhcgpjb29sIHBvc2UKcGVkZXN0cmlhbnMKc3BhY2Ugc2NlbmUKdml2aWQgYW5kIGNvbG9yZnVsCnByaWVzdAptbW8KZmxhdCBpbGx1c3RyYXRpb24KZHJlc3NlZCBpbiBhICgocmFnZ2VkKSkKd2VhcmluZyBqZWRpIHJvYmVzCmhkIHNjcmVlbnNob3QKcGVhY2VmdWwgYW5kIHNlcmVuZQpmIDEvNAppbiBhIG11c2V1bQpsdWNpZCBhbmQgaW50cmljYXRlCnBob3RvcmVhbGlzdGljIDRrCnZpcnR1YWwgcmVhbGl0eQpleHRyZW1lbHkgY3V0ZQpmIDIuOApob3VkaW5pIHJlbmRlcgpldmEgZ3JlZW4KYXVkcmV5IGhlcGJ1cm4KZnVsbCBwb3YKaW5kdXN0cmlhbCBsaWdodCBhbmQgbWFnaWMKbXVya3kgd2F0ZXIKdGhyZWUgZGltZW5zaW9ucwpoaXN0b3JpY2FsIGFyY2hpdmUKaHlwbm90aWMgZXllcwpvZGluJ3Mgc3RvbmUgYXJlbmEgYmFja2dyb3VuZApwcm9kdWN0IGltYWdlCnRhbGwgdHJlZXMKbmVvIG5vcmlsc2sKbWljaGFlbCBhbmNlbApldmUgb25saW5lCmpva2VyCndpZHRoIDc2OAplbXB0eSB3YXJlaG91c2UgYmFja2dyb3VuZAphMjQgY2luZW1hdG9ncmFwaHkKYnJpZ2h0IGZsYXNoCnJlYWxpc3RpYyBzdHVkaW8gbGlnaHRpbmcKb3JhbmdlIGxpZ2h0cwp0aHVuZGVyIHN0b3JtCmFsaWVuIHdvcmxkCm9uZSBzaW5nbGUgY29udGludWVzIGxpbmUKdHJlbmRpbmcgb24KcG90cmFpdAptYWdpYyBsYWIgYmFja2dyb3VuZApwaW5rIGdvbGRlbiBob3VyCmV2YW5nZWxpb24gc3R5bGUgZXllcwpiZWF1dGlmdWwgY2luZW1hdGljCndlYmJpbmcKdGhlIGpva2VyCmdlbnpvbWFuCm5vIGFydGlmYWN0cwpwdXRpbgpkZWF0aCBub3RlCmZsb3dlciBmaWVsZAp3ZWFyaW5nIGRyZXNzCmRhcnJlbGwgayBzd2VldAprYW1lbiByaWRlcgpzdHJpa2luZyBleWVzCnJ1c3NpYW4KYmVhdXRpZnVsIGFuaW1lCmNvd2JveQpkYW5nZXJvdXMgYXVyYQpkZW1vZ29yZ29uCm1lZGlldmFsIGFydApsZWUgbWlsbGVyCmV4dHJlbWVseSBjb21wbGV4CmhpZ2ggZGV0YWlsIHBhaW50aW5nCmJyaWdodCByZWQgaGFpcgphd2FyZCB3aW5uaW5nIGNvbmNlcHQgYXJ0CmZyYW5jZQpjb21wbGV4IGdlb21ldHJ5CmxvcmQgb2YgZGFnZ2Vycwp3aXJlcyBhbmQgdHViZXMKbXVzaHJvb20gY2xvdWQKMTkwMHMgcGljdHVyZQp0d2luIHBlYWtzCnB1cHBldApzZXJpYWwgZXhwZXJpbWVudHMgbGFpbgpjb3dzCm1lZGl1bSBwb3J0cmFpdApheGUKc2x1bXMKcm9jayBjb25jZXJ0CnRoZSBsb3JkIG9mIHRoZSByaW5ncwpwaWVyY2luZyBzdGFyZQpzb3V0aCBrb3JlYQpnYWxheHkgdGhlbWUKb3J0aG9kb3gKZ29sZGVuIGJhY2tncm91bmQgd2l0aCBmbG93ZXJzCnd3MSBmaWxtIHBob3RvCmZsaWdodCBzcXVhZHJvbiBpbnNpZ25pYQpleWVzIHdpZGUgb3BlbgpmdWxsIGhlYWQKb2ZmaWNpYWwgdmVyc2FjZSBlZGl0b3JpYWwKcGhvdG8gdGFrZW4gaW4gMSA5IDMgMApwZXJzb25pZnkKc3R1bm5pbmcgaW50cmljYXRlIGRldGFpbHMKZ29sZCBkZWNvcmF0aW9uCmNyZWVweSBzaGFkb3dzCjEgOSA3IDkgb21uaSBtYWdhemluZSBjb3Zlcgp3aXRoIG1lcmNoYW50IGxvZ28Kc3R1bm5pbmcgYXJ0d29yawo4IGsgaGlnaCByZXNvbHV0aW9uCmdhbGF4eSB0aGVtZSBjb2xvcnMKbHVzY2lvdXMgbGlwcwpicmlnaHQgZ2xvd2luZyB2ZWlucwp3aW1tZWxiaWxkZXIKYW5pbWUgZGlnaXRhbCBhcnQKZmFjZSBvbmx5CmVhZ2xlIGJlYWsKaW4gYSBsaXZpbmcgcm9vbQpvdXRlciBnbG93CmN5YmVyIHdvcmxkCnJheXRyYWNpbmcgOiA6CmdvbGQgaG91cgpvbiBwYXRoIHRvIGVubGlnaHRlbm1lbnQKbG9uZyBjdXJseSBibGFjayBoYWlyCnJlZCBpcmlzZXMKY2hhaXIKcm91bmQgZ2VudGxlIGZhY2UKMSA5IDcgMCBzIHNjaWVuY2UgZmljdGlvbgooICggcGhvdG9ncmFwaCApICkKZGV0YWlsZWQgaGVhZAppbiB0aGUgc3R5bGUgb2YgaGFucyB0aG9tYQpncmFkaWVudCBkYXJrZXIgdG8gYm90dG9tCmF0ZXkgZ2hhaWxhbiBhbmQgc3RldmUgbWNjdXJyeQpkZWVwIGJvbGQgY29sb3JzCmRldGFpbGVkIHZlY3Rvcgo4NSBtbSBsZW5zCnNob2NrCnZlcnRpY2FsIGNvbXBvc2l0aW9uCmR5bmFtaWMgZm9sZHMKcG9pbnRlIHBvc2UKMzVtbSBncmFpbiBmaWx0ZXIKaW4gMiAwIDUgNQp2ZXJ5IGF0bW9zcGhlcmljCmZpbmUgNSBrIGRldGFpbHMKc2xpY2sgZWxlZ2FudCBkZXNpZ24Kd29vZGVuIGFydCBub3V2ZWF1IHN3aXJscwphbHBob25zZSBtdWNoYSBqb2hhbm5lcyB2b3NzCnNoaW55IGNvbG9yZnVsCmpvaG4gZnJlZGVyaWNrIGxld2lzCnJ1ZG9sZiB3ZWlzc2UKZnVsbCBwZXJmZWN0IGZhY2UKbGlnaHQgbmlnaHQKcGllcnJlIHB1dmlzIGRlIGNoYXZhbm5lc2EKbmF2YWwgbGFuZHNjYXBlCndoaW1zaWNhbCBzdXJyZWFsaXNtCmZpbmVseSB0dW5lZCBkZXRhaWwKaHlwZXJlYWxpc3RpYyBvY3RhbmUgcmVuZGVyCmRldGFpbGVkIGFuZCBzb2Z0CmRyYWdvbiBtYXdzaG90CmVrdGFjaHJvbWUgY29sb3IgcGhvdG9ncmFwaAp2ZXJ5IGhpZ2ggY29tcGxleGl0eQp3aXphcmRzIGxhYm9yYXRvcnkKbW9ydGFyCnBlc3RsZQppbiByZWQgYmFja2dyb3VuZAptYXJ5IGxvdWlzZSBicm9va3MKaW4gYSB2YWxsZXkKc3VidGxlIHB1cnBsZSBhY2NlbnRzCmJlYXV0aWZ1bCBkZWVwIGNvbG91cnMKZnVsbHkgcGhvdG9yZWFsaXN0aWMKcG9ydHJhaXQgb2YgYW4gb2xkCnBhaW5pdG5nCnJhdmUgZ2lybApnYWxheHkgKyBiYXJvcXVlCnN5bW1ldHJpYyBmYWNlIQpvbiB3aGl0ZQpkYXJrbmVzcyBiYWNrZ3JvdW5kCmZsb3dpbmcgbmVvbi1jb2xvcmVkIHNpbGsKaGFuZHNvbWUgZ3V5IGluIGRlbW9uIHNsYXllciBhcnQKdWx0cmEgd2lkZSBob3Jpem9uCmRvdGEgbWF0dGUgcGFpbnRpbmcgY29uY2VwdCBhcnQKd2VhcmluZyBkYXJrIHNpbGsKc3ltbWV0cmljYWwgcGVyZmVjdCBmYWNlCmJhY2tsaWdodCBib2R5CmJ1cm5pbmcgYmF0dGxlZmllbGQgYmFja2dyb3VuZApwZXJmZWN0IHdoaXRlIGhhaXJlZCBnaXJsCnN0cmFpZ2h0IG9uIHBvcnRyYWl0CnBvcnRyYWl0IG9mIG1hZ2ljYWwgbG9saXRhIGdpcmwKaGFwcHkhISEKdGVlbiBib3kKcGVyZmVjdCBzaGFkaW5nCmhlciBoYWlyIGZsb3dpbmcgZG93bgpyZXRybyBjb21wdXRlciBncmFwaGljcwpwYXNzaW9uYXRlIHBvc2UKcmFpbnkgYmFja2dyb3VuZApob2xvZ3JhcGhpYyByYWluYm93CnN1cnJlYWxpc3Qgb2lsIHBhaW50aW5nCmJhcmQKc3RhbmRpbmcgaW4gYSB0b3duc2hpcCBzdHJlZXQKdG9yY2hlcyBvbiB0aGUgd2FsbApkcmFtYXRpYyBjb2xvcnMKaGlnaCBhZXN0ZWh0aWMKcnlhbiBjaHVyY2gKb3JjCndpbmRzIG9mIHdpbnRlcgpyb3VuZCBnbGFzc2VzCmNsYXNzaWMgYXJ0Cmdvb2dpZSBhcmNoaXRlY3R1cmUKaW5zdHJ1Y3Rpb24KZXBpYyBjb25jZXB0IGFydApob3Jyb3IgYXRtb3NwaGVyZQpsb3R1cwp0YWN0aWNhbCBzcXVhZHMgOjEwCjoxMCBnYXMgZ3JlbmFkZXMKMTk4OQppbmRpZQpnaWdhbnRpYyBmb3Jlc3QgdHJlZXMKZHluYW1pYyBwb3NpbmcKc29mdCBjb2xvdXJzCnN0b2NrIGltYWdlCmN1cmlvdXMKdGh1bmRlciBjbG91ZHMKNCBrIDggawp3YWxraW5nCnNtaWxpbmcgZmFzaGlvbiBtb2RlbCBmYWNlCmZhbGwKYnJpbGxpYW50IGxpZ2h0aW5nCjM1bW0gZjIuOAo0IGsgaGlnaCByZXNvbHV0aW9uCmhpZ2ggLSByZXMKc29mdCBleWVzCnVsdHJhIHJlYWxpc3RpYyBhcnQKZXhwbG9zaXZlCmJlbGx5Cm9uIHRleHR1cmVkIGRpc2MgYmFzZQpzaWdtYSA4NW1tIGxlbnMgZi8xLjQKZmlyZWZseQpkdW5nZW9uIGFuZCBkcmFnb25zCnByb2Zlc3Npb25hbCBjaGFyYWN0ZXIgZGVzaWduZXIKdGFsb25zCmNocmlzdG1hcwpjb25jZXB0YXJ0d29ybGQKdG95IHBob3RvZ3JhcGh5CmZvcmVzdHMKaW4gcmVhbCBsaWZlCmJsdWViZXJyaWVzCmRyZXNzZWQKZ2F1bnQKcGFyZWlkb2xpYQpzaGFkb3d5IGxpZ2h0aW5nCnByb2R1Y3QgbGlnaHRpbmcKYXJ0c3RhdGlvbmhkCmRldGFpbGVkIGFuYXRvbXkKc3RyZWV0IHBob3RvCnZlcnkgYW5ncnkKbG93IGVuZXJneQpzcXVhcmVzCmJ1enplZCBzaWRlcwpsaWdodCBicm93biBoYWlyCm5lYWwgaGFuc29uCnZpa2luZyBydW5lcwpoaWdobHkgZGV0YWlsZWQgbGFiZWxlZAptYXJ2ZWwgc3R1ZGlvcwpzdHlsZSBvZiBoLiByLiBnaWdlcgpldGhlcmFsCm1hcmlvIHRlc3Rpbm8KZHJhbWF0aWMgc2hhZG93cwpsaWdodCByZWZsZWN0aW9ucwpzY3JlYW0KZWxlZ2FudCBjaW5lbWF0aWMgZmFudGFzeSBhcnQKb3ZlcndoZWxtaW5nIGRlcHRoIGFuZCBkZXRhaWwKbWF0ZSBwYWludGluZwpiYWNrCjhrIGh5cGVycmVhbGlzdGljCmhlcm1hbiBuaXRzY2gKd2lzcHMKaGlnaCBxdWFsaXR5IGNnIHJlbmRlcgpuZXdzCmZsb3dpbmcgYmxvbmRlIGhhaXIKcmVkIGNsb3RoZXMKbG9va2luZyBhdCB2aWV3ZXIKYXJ0IGRlY28gcGFpbnRpbmcKY2FzdGluZyBlcGljIHNwZWxsCmRlZXAgb2NlYW4Kc29mdCBzdHlsZQpuaWdodGltZQpiZWF1dGlmdWwgZmFzaGlvbiBtb2RlbCBib2R5CnRpc3N1ZSBvcm5hbWVudApmcm9tIGp1cmFzc2ljIHdvcmxkICgyMDE1KQpzaWxob3VldHRlZAptYXNhc2hpIGtpc2hpbW90bwpzb2xhcgp0cmFpbCBjYW0gZm9vdGFnZQplYXRpbmcKZXllcGF0Y2gKZmllcnkKY3V0ZSBnaXJsCmludmFzaW9uCnN0b3JteSBiYWNrZ3JvdW5kCm1pY2tleSBtb3VzZQpmb2xkcwpsaXQgd2luZG93cwplcGljIHBob3RvCndvbWFuIHBvcnRyYWl0CnRob20geW9ya2UKYmxhY2sgY3VybHkgaGFpcgpjZXJwdXNjdWxhciByYXlzCmNsaXBhcnQKa2VhbnUgcmVldmVzCmdvbGQgc3VpdCBqYWNrZXQgaW4gc25ha2UgcHJpbnQKY29sb3VyZWQKZWxkcml0Y2ggYWJvbWluYXRpb24KcmVhbGlzdGljIHRleHR1cmVkIHNraW4Kc2VtaSByZWFsaXNtCmRldGFpbGVkIHN5bW1ldHJpY2FsIGZhY2UKaW1hZ2VzIG9uIHRoZSBzdG9yZSB3ZWJzaXRlCmplZmYgYmV6b3MKZnJvd25pbmcKc3RlYW1wdW5rIGNpdHkgYmFja2dyb3VuZAphcyBzZWVuIG9uIGFydHN0YXRpb24KZmxhbWV0aHJvd2VyCnpvbwpwb3NlaWRvbgpjYWxvdHlwZQp6b29tZWQgb3V0IHBob3RvZ3JhcGh5Cmhpc3RvcmljYWwgcGFpbnRpbmcKc3BhY2UgYXRtb3NwaGVyZQp0ZWVuYWdlIGVuZ2luZWVyaW5nIG1vYWQKZHJhbWF0aWMgbW9vZHkgc3Vuc2V0IGxpZ2h0aW5nCm92ZXJjYXN0IHdlYXRoZXIKd29tYW4gbWFzdGVycGllY2UKbHVjaWQgZHJlYW0gc2VyaWVzCmFydGRlY28KbmF0aW9uYWwgZ2VvZ3JhcGhpYyBjaGFubmVsCnZpdmFjaW91cwpwc3ljaGVkZWxpYyBwYXR0ZXJucwpiYWQgbG9va2luZwpnb2QncyByYXlzIGhpZ2hseSBkZXRhaWxlZAo4IGsgcGhvdG8KdmludGFnZSBzY2kgLSBmaQp3ZWFyaW5nIHByb2Zlc3Npb25hbCBtYWtldXAKaW4gdW5yZWFsIDMgZCBlbmdpbmUKbmVyZHkKc3BhcnNlIGRldGFpbApibGFja3NhZAp1bHRyYXJlYWxpc3RpYyBtYXR0ZSBwYWludGluZwpibGFjayBhbmQgd2hpdGUgbW9ub2Nocm9tZQpkYXJrIHNjaSAtIGZpCnJvdGF0aW5nCmNvbG9yZnVsIHBhaW50CmFydCBkZWNvIHNoYW1hbgpzYW5hIHRha2VkYQpoYXJkIHJ1YmJlciBjaGVzdAphbWF6aW5nIHZpZXcKdG9wIDEgMCAwCnd3IDIKYWxleGV5IGVnb3Jvdgp3YXRlcndheXMKZXRoZXJlYWwgYmFjayBsaWdodApnbG93aW5nIGJ1dHRlcmZsaWVzCmRyYWdvbiBoZWFkCnRvbSBoaWRkbGVzdG9uCmRhcmsgbmlnaHQgZW52aXJvbm1lbnQKc2VhIGluIGJhY2tncm91bmQKc2hvdWxkZXIgbGV2ZWwgc2hvdApmdXJyeSBib2R5Cm1peWF6YWtpIHN0eWxlCmJpb3B1bmsgZnV0dXJpc3RpYyB3YXJkcm9iZQpwZW5jaWwgc3R5bGUKYXN5bW1ldHJpY2FsIGRlc2lnbgpibGFjayB3aGl0ZSBwaW5rCmNvdXJ0eWFyZAppbml0aWFsIGQgYW5pbWUgMSAwIDggMCBwCmluZHVzdHJpYWwgcGhvdG9ncmFwaHkKaGVuZyB6CnJpY2ggaXJpZGVzY2VudCBjb2xvcnMKZGVhdGhzY2FwZQpyZWQgcmVmbGVjdGlvbnMKbG9tb2dyYXBoeSBlZmZlY3QKY292ZXJlZCEhCnRoaWNrIHBhaW50aW5nCmN5YmVycHVuayBhcm1vcgpxdWFrZSBzdHJvZ2cKZHJlYW15IGFlc3RoZXRpYwpsYW1lbnQKY29ycG9yYXRlIGxvZ28Kb24gYSBqdW5nbGUgZm9yZXN0CmJyaWdodCBmdXR1cmUKYmFtYm9vIGZvcmVzdAppbiB0aGUgZm9nZ3kgaHVnZSBmb3Jlc3QKaW4gd2hpdGUgcm9vbQphbmltZSEhCmRlY29yYXRpdmUgZGVzaWduCmJyb3duIGFuZCB3aGl0ZSBjb2xvciBzY2hlbWUKZG96ZW5zIG9mIGpld2VsZWQgbmVja2xhY2VzCnNpdHRpbmcgb24gdGhlIGVkZ2UKaG90IGFuZCBzdW5ueSBoaWdobHktZGV0YWlsZWQKcGl4ZWwgcGVyZmVjdCBwaG90b2dyYXBoCmJ1aWxkaW5nIGNydW1ibGluZwpuZWtybyBwZXRyb3MgYWZzaGFyCmV2ZXJ5dGhpbmcgaXMgYmx1cnJlZApsaXNhIC0gZnJhbmsKZnVsbCBjbG9zZS11cCBwb3J0cmFpdAphbnRpbG91cyBjaGFvCm1pbmlhdHVyZSBhbmltYWwKbmVidWxhIHNpemVkCmRvbWluZWVyaW5nCmR5c3RvcGlhbiBzZXR0aW5nCmJ1cm5lZApvdXRsaW5lIGdsb3cKZ290aGljIC0gY3liZXJwdW5rCnRvdGFsIGRhcmtuZXNzCnBvcnRmb2xpbyBxdWFsaXR5Cmpvb3AgZ2Vlc2luawpnb2dvCjMgMCAwCmluIHRoZSBzaGFkb3dzCmZlZWRiYWNrIGxvb3AKbG9uZyBlbGVnYW50IHRhaWwKaGlnaCBxdWFsaXR5IDNkIHJlYWxpc3RpYwpoZWF2eSBsZW5zZmxhcmUKaHlwZXJkZXRhaWxlZCBvYmplY3QKdmVydGljYWxseSBmbGF0IGhlYWQKcGluayBkaWFtb25kcwpzb2Z0IHJ1YmJlcgpoaXNva2EKaHVtYW4gbWFsZSBkZW1vbgpnb2xlbiByYXRpbwpkb25hdG8gZ2lhbmNvbGEgYW5kIHRvbSBiYWdzaGF3CmljZSAtIHQKb3ZlcndhdGNoIGJ1aWxkaW5nCmNvbm5lY3Rpb24gcml0dWFscwptYXlhIGFsaSBhcyBkJmQgc29yY2VyZXIKc3R1ZGlvIGdoaWJseSBzdHlsZSBtb25vbm9rZQpodXJyaWNhbmUgc3Ryb215IGNsb3Vkcwo1NW1tIGYvNCBsZW5zCndpbmRvdyAoIGNpdHkgKQptYXggcml2ZQpkb3VibGUgLSBleHBvc3VyZQpwaG90b2dyYXBoIGNhcHR1cmVkIGluIGEgZm9yZXN0CnRoaWNrIGxpbmVhcnQKZG90YWRvCjUwbW0gZjEuOApoaWdoIG5vb24KZHJlc3Mgc2hpcnQKc2hvdCBmcm9tIGRyb25lCi1uIDkKc3VibmF1dGljYQpsYXRpbmEKNGsgZXh0cmVtZWx5IHBob3RvcmVhbGlzdGljCnBsYXN0ZXIKbmQ0CndhdGVyIHBhaW50aW5nCnIgY3J1bWIKaG9yc2VzCnNlcmllcwp0ZW1wb3JhbGl6YXRpb24KcHJvY2Vzc3VhbGl6YXRpb24Kc2VxdWVudGlhbApkaXNvcmRlcmVkCnVuY29ubmVjdGVkCmxhcmdlLXNjYWxlCm11bHRpLXBhcnQKYmx1ZSB0aGVtZQp1Zm9zCmVwaWMgdGhlYXRlcgphdCBpbnN0YWdyYW0KY29vbCBsaWdodGluZwpzaXR0aW5nIG9uIHJvY2tzCndpbGRsaWZlIHBob3RvCmluY3JlZGlibHkgZGV0YWlsZWQgZmFjZQpyZXNpZGVudGlhbCBhcmVhCm1hbnkgcGVvcGxlCmJyaXRpc2ggY29sdW1iaWEKc29mdCB2b2x1bWV0cmljIGxpZ2h0aW5nCnhwYXJ0aWNsZXMKcHVycGxlIGNvbG9yIHNjaGVtZQpzbWFsbCBzbWlsZQpsc2QgZHJlYW0gZW11bGF0b3IKdmlraW5nCnNwZWxscwp2ZWlsZWQKdXNhCnRoZSBtZWFuaW5nIG9mIGxpZmUKYXdhcmQgd2luaW5nIHBob3RvZ3JhcGgKc21hbGwgZ2xhc3NlcwpncmVhdCBxdWFsaXR5CmhhcHB5IGNvbG9ycyBkYXJpdXN6IHphd2FkemtpCjEgOCBtbSBsZW5zCjE4ODUKbXVzZXVtIHF1YWxpdHkgcGhvdG8KaG9uZXkKaW5jcmVkaWJsZSBwZXJzcGVjdGl2ZQpibHVlIGZsYW1lcwpkdWxsCmV4cGVyaW1lbnRhbAplbGVuYSBtYXNjaQptb3JuaW5nIG1pc3QKaGlnaCBhcnQKc21va2V5IGJhY2tncm91bmQKbW9vZHkgYW1iaWFuY2UKZnV0dXJpc3RpYyBhcmNoaXRlY3R1cmUKZmFjdG9yeQpoYW5kbWFkZQpjcmF0ZXJzCmN1cnNlZCBpbWFnZQpoYWxmIGxpZmUgMgpjb2xvc3NhbCBzY2FsZQpoaWdobHkgZGV0YWlsZWQgY29uY2VwdCBhcnQKZmFudGFzdGljIGxhbmRzY2FwZQp1bmtlcHQgaGFpcgpiZWF1dGlmdWwgbGl0Cm1vZGVybiBkZXNpZ24Kd2lraWFydApoaXJlcwpwbGFndWUKb3ZlcmNhc3QgZGF5Cmd1bgpjaXJjbGVzCmVtcHR5IHN0cmVldApmbGlja2VyaW5nIGxpZ2h0CjI4bW0Kd2FybXRoCnN0b2NrIHBob3RvZ3JhcGh5CmxhcmdlIGdsYXNzZXMKY29ybmVycwpjbGVhciB3YXRlcgpmYWNlIHBhaW50aW5nCmJsYWNrIGxlZ2dpbmdzCm1hY3JvIGRldGFpbHMKdWx0cmFtYXJpbmUgYmx1ZQpjb2xvciBhbmQgY29udHJhc3QgY29ycmVjdGVkCmlucmluY2F0ZQpoYW5kcyBpbiBwb2NrZXRzCmJlYXV0aWZ1bCBsaWdodG5pbmcKemJydXNoIHNjdWxwdCBjb2xvcmVkCmZpbG0gZm9vdGFnZQpvcmdhbmljIHJpcHBsaW5nIHNwaXJhbHMKaW5kaWdvCm1vbnN0ZXIgZ2lybAp2ZXJ5IGNsb3VkeSBza3kKcGl4aWUgdW5kZXJjdXQgaGFpcnN0eWxlCmhhbG8gb2YgbGlnaHQKaHlwZXJyZWFsaXNt4oCdCmVsdmVzCmJvbmUKamVhbiBsZW9uIGdlcm9tZQpzb2xpZHdvcmtzCmNpbmVtYXRpYyBhdG1vc3BoZXJpYwpyZWFyIHZpZXcKaW5maW5pdHkgZ2x5cGgKc2t5bGluZQpwb3N0ZXIgYXJ0d29yawp0aGUgY2l0eSBvZiBsaXNib24KaW5mb2dyYXBoaWNzCmZhbGxlbiBhbmdlbApwcmF5aW5nCmVjbGlwc2UKZGFyayBjb2xvdXIgc2NoZW1lCmdpdHMKZXRoZXJlYWwgYmx1ZSBsaWdodGluZwp1bnNoYXZlbgp2ZXJ5IGRldGFpbGxlZApzaGFwZSBhbmQgZm9ybQpzeW1ldHJ5CnNwYWNlIHRyYXZlbApjbGVhbiByZW5kZXIKcmVhbGlzdGljIGRldGFpbAphcmtoYW0gaG9ycm9yCmdlbXN0b25lcwpzdGV2ZSBwdXJjZWxsCmlrZWEgY2F0YWxvZ3VlIHBob3RvCmdyYXkgaGFpcgpkb29tIGV0ZXJuYWwKbmF0dXJhbCBza2luIHRvbmUKc3RyZWV0IGxldmVsCm1vbGx5IG1pbGxpb25zCmRhcmsgZm9nCmNyaXRpY2FsbHkgYWNjbGFpbWVkCmtuaWZlCm1lZGl1bSBoYWlyCnByaW1hcnkgY29sb3JzCnNpZ21hIGxlbnMKc3BhY2Ugc2hpcHMKZm9yYmlkZGVuIGtub3dsZWRnZQpzdG9yeWJvYXJkCndoZXJlJ3Mgd2FsZG8Kd29ybSdzIGV5ZSB2aWV3Cmh5cGVyIHJlYWwgcGFpbnRpbmcKcnViYmVyCmhhbmZ1CmNhcmxvcyBodWFudGUgYW5kIGRvdWcgY2hpYW5nCmRlYmx1cnJpbmcKYmxhY2sgbGVhdGhlciBnYXJtZW50Cm1hZ2ljIGluIHRoZSBhaXIKNCBrIGhkcgp1bmRlciB0aGUgc2VhCnggLSByYXkKamFnZ2VkCmdsb3dpbmcgd2l0aCBzaWx2ZXIgbGlnaHQKdHJlbmRpbmcgb24gc3R1ZGlvIGdoaWJsaQpjaW5lbWF0aWMgbGlnaHRpbmcgYXQgbmlnaHQKdW5pdHkgMyBkCnNub3dmYWxsCmVuZG9la2VsZXRvbiBleHBvc3VyZQpzY2FuZGluYXZpYW4gLyBub3JzZSBpbmZsdWVuY2VkCjEgOSAyIDAncyBjb2xvcmVkIHBlbmNpbApkYXJrIHNjaSBmaQpibG9vZGJvcm5lIG1vbnN0ZXIKZXhwb3NlZCB3aXJlcwpoZXJtYW5uIGhlbmRyaWNoCnN3YW5zCnNpbXBsZSBzaGFwZXMKa2FldGhlIGJ1dGNoZXIKaGlnaCBjb250cmFzdCBjaW5lbWF0aWMgbGlnaHQKYmVldGxlCndlYXJpbmcgMTg2MHMgZXJhIGNsb3RoZXMKZ29vZCBsaWdodGluZyBiZWF1dGlmdWwgZXBpYwpiZWF1dGlmdWwgc2hhZG93cwp2ZXJ5IHdhcm0gY29sb3JzCmluIG15IGhlcm8gYWNhZGVtaWEKcmVhbGx5IHJlYWxpc3RpYwpiaXJvcmVtZWRpYXRpb24gcGxhbnQKbW9vZHkgc2t5CnB1ZGRsZXMgb2YgdHVycXVvaXNlIHdhdGVyCmp1bGlhbiBjYWxsZQpvcmFuZ2UgYW5kIHR1cnF1b2lzZQp0aW1lbGVzcyBkaXN0dXJiaW5nIG1hc3RlcnBpZWNlCmh5cGVycmVhbGlzdGljIGZhY2UKZGFyayByb2JlZAphd2FyZCBmYXNoaW9uCmRyZW4gZnJvbSBzcGxpY2UKaG9ycm9yIGxpZ2h0aW5nCnRvcCBzZWNyZXQgc3R5bGUKd2VhcmluZyBhIGJsYWNrIHRzaGlydApoZWF2ZW4gcGluawp5ZWxsb3cgb2NocmUKam95ZnVsIHNtaXJrCjE0NTAKbGlnaHQgZ2xhcmUKZmVlbGluZyBvZiBncmltZGFyawpoLiBoeWRyb2NoYWVyaXMKZXh0cmVhbWx5IGRldGFpbGVkCm1lY2hhbmljYWwgc3VwZXJzdHJ1Y3R1cmUKY2FuZGxlIHZvbHVtZXRyaWMKdGhvbWFzIGtpbmthZGUgY2ZnIF8gc2NhbGUgOQpzdXJyZWFsIGhvcnJvcgpwcyA1CmJlYXV0aWZ1bCBnbG93aW5nIGdhbGF4eSBleWVzCmhpZ2hseSBkZXRhaWxlZCB2ZngKbWV6ZSBhdWRpbwpzbWFsbCBwbGFudHMgb24gdGhlIHdpbmRvdyBzaWxsCmluc2FuZSBuaWdodG1hcmUKMiBtcHggcXVhbGl0eQpzdG9ybSEKYnJhc3Mgc2VtaSAtIG1lY2hhbmljYWwgd29tYW4KbWV0YWwgaGFyZCBzdXJmYWNlcwpubyByZWlucwpmYWNlbGVzcyBwZW9wbGUKb3J0aG9ncmFwaGljIGZyb250IHZpZXcKZmxvcHB5IGRpc2sgZXllcwpnb2dnbGUgZXllcwoxIDkgOCAwIHMgYWlyYnJ1c2gKZmFkZWQgZ2xvdwpoZCBtYWNybyBwaG90b2dyYXBoCmxhcmdlIG1vdW50YWlucyBpbiBiYWNrCndlYXJpbmcgaGVsbWV0CmRpbSBzdGFycyBhcyBleWVzCm9uIGEgdmlsbGFnZQpzdHVubmluZyBza2kKcGxhbnRzIGFuZCBqdW5nbGUKbmljZSBjb21wb3NpdGlvbiBhbmQgcGhvdG9ncmFwaHkKbWVkYWwKKCgoaW50cmljYXRlKSkpCnN5bW1ldHJpYyByb3VuZCBkZXRhaWxlZCBleWVzISEKbGFudGVybiBjYW5kbGUKZnVsbCBib2R5IHdoaXRlIHB1cnBsZSBjbG9hawpjcmFpZyBtdWxsaW5zIGdyZWcgcnV0a293c2tpCnJpcHBlZCB0byBzaHJlZHMKcGljdHVyZSBmcmFtZXMKbWFyaWVsIGhlbW1pbmd3YXkKZXh0cmVtZSBzcG9ydHMgcGhvdG9ncmFwaHkKcHJvZHVjdCBsaWdodGluZy4gNCBrCmF0IGZ1dHVyZSBuZW9uIGxpZ2h0IHJvb2Z0b3AKc21pbGluZyBraW5kbHkKKCB3YXRlcmNvbG9yICkKZmFzaGlvbmFibGUgY3liZXJwdW5rIG1lY2hhbm9pZApyZWFsIGxpZmUgcG9rZW1vbgptZXRyb3BvbGl0YW4gbXVzZXVtIHBob3RvCmF3YXJkIC0gd2lubmluZyBkaWdpdGFsIGFydApjaW5lbWF0aWMgZnJhbWUKZnJvbnQgYW5nbGUKZWYgOCA1IG1tIGYgMS4gOCB1c20KeW91bmcgc2V4eSBlbGVnYW50IHdvbWFuCndoaXRlIGZhY2UKZ3VhcG8KcGFsZXR0ZSBrbmlmZSBwYWludGluZwpub24gYmluYXJ5IG1vZGVsCndoaXRlIGxvbmcgaGFpcgpjb25jZXJ0CmRlcHQgb2YgZmllbGQKbG9va2luZyB0byBjYW1lcmEKaW50cmljYXRlIGRldGFpbHMgaW4gZW52aXJvbm1lbnQKaGF0ZQpwZXJmZWN0aW9uaXNtCmNvZ3MKZGlzdHJlc3NlZAp0aGUgdGhpbmcKZHJ1bW1lcgppbWFnaW5hdGl2ZS4gY3JlYXRpdmUKNTBtbSBwaG90b2dyYXBoeQpwYWludGVkIGNoYXJhY3RlciBwb3J0cmFpdAppbmR1c3RyaWFsIGFydCBzdHlsZQpjb250ZW1wb3JhcnkgZGVzaWduCmFybXMgZG93bgpyb2xsIDIgMAp0cmFuc2Zvcm1hdGlvbgoyMDA2CmxhdGUgbmlnaHQKcGhvdG8gcXVhbGl0eQpnZW9yZ2UgbWlsbGVyCmF1c3RyYWxpYQpkdW5lcwpleWUgLSBsZXZlbCB2aWV3CmN5Y2xlcwpleHF1aXNpdGVseSBpbnRyaWNhdGUgZGV0YWlscwptY2RvbmFsZHMKdHJvcGljYWwgZm9yZXN0Cm9jdGFuZSAzZAozZCBhYnN0cmFjdCByZW5kZXIgb3ZlcmxheWVkCmJlYXV0aWZ1bCBzdHVkaW8gc29mdCBsaWdodAp2aWRlbyBnYW1lIGNoYXJhY3RlcgphbmNpZW50IGVneXB0Cmxvdy1rZXkgbGlnaHRpbmcKc2NpLWZpIHN0eWxlCm5lb24gc2lnbgphd2FyZCB3aW5uaW5nIGRlc2lnbgpoMAoxOjg3CmFuYW1vcnBoaWMgNTBtbSBsZW5zCmhhaXIgZmxvd2luZyBkb3duCnRyZW5kaW5nIG9uIGFydHN0c3Rpb24KcGxhaW4gYmxhY2sgYmFja2dyb3VuZApmdWxsIGJhbmdzCmdyYWNlZnVsIGJvZHkgc3RydWN0dXJlCmR5bmFtaWMgc2hvdAphc2gKYXJ0aXN0cyBwb3J0cmFpdApwZXJzb24KaXBob25lIHdhbGxwYXBlcgpmaWVsZHMKZ3JpbSBsaWdodGluZwpsaXF1aWQgb2lscGFpbnQKYXJ0aWZhY3RzCmRpc2NvIGVseXNpdW0gc3R5bGUKbXRnIGFydApzaGUgaXMgc21pbGluZyBhbmQgaGFwcHkKYmVhdXRpZnVsIGFuaW1lIHBvcnRyYWl0CmNoaWNrZW4KaG9sZGluZyBhIGxpZ2h0c2FiZXIKM2QgbW9kZWxpbmcKc3RhYmxlIGRpZmZ1c2lvbgpsb29raW5nIGludG8gdGhlIGNhbWVyYQpzaGlueSBwbGFzdGljCnByb21vdGlvbmFsIHNob3QKZmxhdCBhcnQKd2VhcmluZyBhIHJlZCBkcmVzcwpidXR0b24gbm9zZQpob29kZWQKcmVhbCBwaG90b2dyYXBoCnRvcCBkb3duCnZyIGhlYWRzZXQKd2l6YXJkIGhhdApkYXJrIGNvbG9yIHNjaGVtZQpsb3RzIG9mIHJlZmxlY3RpdmUgc3VyZmFjZXMKY3ViaXN0CnN5c3RlbSBzaG9jayAyCnN0aWxsIGltYWdlCndpdGggbG9uZyBoYWlyCnBob3RvIHByaW50CmNoZXNoaXJlIGNhdApmbG93ZXIgcGV0YWxzCmZyYW5rIGZyYW56ZXR0YQpjb25mdXNlZApzdGVyaWxlCmluc2FuZSBkZXRhaWxlZApubyB3b3JkcwpwbGFudHMgZW52aXJvbm1lbnQKZmFjZSBjb3ZlcmVkCmhpZ2h0bHkgZGV0YWlsZWQKYm94IG9mZmljZSBoaXQKc29sbyBwaG90b3Nob290CmRlZXAgdW5kZXJ3YXRlcgpzdHJvbmcgbGluZXMgYW5kIGJvbGQgY29sb3JzCndlYXJpbmcgYSBmdXIgY29hdAppbnRyaWNhdGUgb2lsIHBhaW50aW5nIGRldGFpbApuZWJ1bGEgaW4gdGhlIGJhY2tncm91bmQKcGhvdG9nZW5pYwpibGFjay1hbmQtd2hpdGUKd2lkZSBleWVzCmtvb25zCmZvY3VzIG9uIG1vZGVsCmlubm9jZW5jZQpvcGFxdWUKc3dpcmxpbmcKY3Jvc3Nlcwpsb3N0IGZvb3RhZ2UKcHJvbW90aW9uYWwKdmVyeSBwcmV0dHkKcGl4YXIgcmVuZGVyCm9ybmF0ZSB0aWxlZCBhcmNoaXRlY3R1cmUKdGFuZyBkeW5hc3R5CnJhdmVucwpoeXBlcmRldGFpbGVkIHVucmVhbCBlbmdpbmUKdGhlIGRlc3Ryb3llciBvZiB3b3JsZHMKZW5kbGVzcwppZG9sCnJlZnJhY3RpdmUKaGVyIGhhaXIgaXMgbmF0dXJhbCBkaXNoZXZlbGVkCnNoYXJwIGFuZCBibG9ja3kgc2hhcGVzCmF3YXJkIHdpbm5pbmcgc2hvdApjb2xvcmVkIHBlbmNpbCBvbiBwYXBlcgppbnN0YWdyYW0gZmlsdGVycwprZXJtaXQgdGhlIGZyb2cKd2xvcCBzdHlsZQpsdWNpZCBkcmVhbQppbnRyaWNhdGUgb3JuYXRlIGRldGFpbHMKbWFydmVsIHN0eWxlCmphY2tldCBvdmVyIGJhcmUgdG9yc28KamF6eiBhZ2UKbm9jdHVybmUKdm9sdXB0dW91cyBib2R5CnBhb2xvIHJvdmVyc2kKY29tcGxlbWVudGFyeSBsaWdodGluZwpwcmVkYXRvcgpiZWF1dGlmdWwgcmVhbGlzdGljIGZhY2UKbWFuZ2EgMTk4MAoyMDAzCnNhbmQgc3Rvcm0KZmlvbmEgc3RhcGxlcwppbmdhbWUgc2hvdApjaGV2YWwgbWljaGFlbApjaW5lbWEgNCBkIHJlbmRlcgpsb25nIHdoaXRlIG1hbmUKcmVhbCBtYXN0ZXJwaWVjZQpwaW51cCBwb3NlCmNsZWFuIGVkZ2VzCmRhZmZvZGlscwphdHRyYWN0aXZlIGZlbWluaW5lIGN1cnZlcwozIGQgc2N1bHB0dXJlIDggayBvY3RhbmUgcmVuZGVyCjEgOSA3IDAKY3VibyAtIGZ1dHVyaXNtCjIgNyAwIDAgawpzYWQgZmFjZQp0cmFuc2x1Y2VudCBtYXRlcmlhbApiZXN0c2VsbGluZyBtb3ZpZSBwb3N0ZXIKc2FsaXZhCm9ydG9uIGVmZmVjdApyZWFsaXN0aWMgZmFicmljCnZhZGltIHZvaXRla2hvdml0Y2gKaGVhZCBhbmQgdG9yc28gb25seQp3aGFsZXMKbmFycm93IHNob3QKY2xvc2V1cCBvZiBmYWNlCmNsb3RoZWQgaW4gYmF0dGxlIGFybW9yCmVuY3ljbG9wZWRpYSBpbGx1c3RyYXRpb24KY29sb3IgYmxvY2sKNiAwJ3MgZnJlbmNoIG1vdmllIHBvc3Rlcgp1bmRlcndvcmxkCmhhbmdpbmcgZ2FyZGVucwpkb3JlCmluIHRoZSBzdHlsZSBvZiBzYWNoaW4gdGVuZwpmYWNpYWwgcG9ydHJhaXQKaW5pbyBhc2FubwpiZWF1dGlmdWwgZmxvd2VycwpzYWdlIGdyZWVuCnVsdHJhIHJlYWxpc3RpYyBwaG90b2dyYXBoeQp0cmFuc2x1Y2VuY2UKZmlsbWljIGdyYWluCmVyaWMgaHUKZmlib25hY2NpIHJoeXRobXMKcHJvbW90aW9uYWwgbW92aWUgcG9zdGVyYXJ0CjIgY29sb3IKbXVzY3VsYXIgbmVjawptYWduZXNpdW0KZm9nZ3khCndob2xlIGZpZ3VyZQpibHVlIHN1Ym1hcmluZSBubyA2CmRhcmsgZmFudGFzdGljCmV4cGVydCBsaWdodCBlZmZlY3RzIG9uIGZpZ3VyZQpjdXNoYXJ0IGtyZW50egptaW5pbWFsaXN0IGVudmlyb25tZW50CmdlZWsKbHVzaCBwbGFudHMgZmxvd2VycwpoaWdoIHN5bW1ldHJ5CnJlc3BpcmF0b3IKY3JlYXR1cmUgY29uY2VwdCBhcnQKaW50cmljYXRlIGh5cGVyIGRldGFpbAprYXN0dWhpcm8gb3RvbW8Kc3RhdHVlIG9mIGhlcmN1bGVzCmxheW91dCBkZXNpZ24KbWFnaWNhbCByZWFsaXNtIHN5bWJvbGlzdApub3JkaWMgcGFzdGVsIGNvbG9ycwpzdGFpbmVkIGRpcnR5IGNsb3RoaW5nCnBsYWluIHVuaWZvcm0gc2t5IGF0IHRoZSBiYWNrCmhpcHN0ZXIKY3JhY2tlZCBkcnkgbGFrZSBiZWQKd2VhcmluZyBhcm1vciEKZGVlcCBvZiBmaWVsZApyaWJjYWdlCnNjcmF0Y2hlcyBvbiBwaG90bwpub2lzZSBlZmZlY3QKa2lkbW8KY3lwaGVycHVuayBiYWNrZ3JvdW5kCmdsb3dpbmcgcHVycGxlIGxlZCBleWVzCnN0eWxpemVkIGJvbGQgb3V0bGluZQp0b3dlcgpkaXhpdCBjYXJkCnNsaWdodCBvdmVyY2FzdCB3ZWF0aGVyCm9wZW4gdG9wCmJsb29kIHJlZCBleWVzCmRlZmluZWQgamF3bGluZQpnYW1lIGFzc2V0IG9mIHBsYW50IGFuZCB0cmVlCmRvZyB0ZWV0aAo4IGsgY2xlYW5pbmcgZnV0dXJlCndlYXJpbmcgYSBsdXh1cmlvdXMgdmVsdmV0IHJvYmUKaW4gdGhlIHdhbGtpbmcgZGVhZAplYXJ0aHdhdmUKZmluZSBkZXRhaWxzLiBhbmltZQp0b3kgZGVzaWduCmZsb29yIGZsb29kZWQKb2JqZWN0cyB0aGF0IGZsb2F0CnNoYXJwbmVzcyBmb2N1cwpoZWFkIGNlbnRlcmVkIHBvcnRyYWl0CnBvcnRyYWl0IG9mIGEgbGFkeSB2YW1waXJlCnBvc3QgLSBwdW5rIG5ldyBhZ2UgYWxidW0gY292ZXIKZ290aGljIHJldml2YWwKdW5zZXR0bGluZyBtb29keSB2aWJlCmRyZWFtIHdhdmUgYWVzdGhldGljCmNyaXNwIGNsZWFyIGhkIHJlc29sdXRpb24KaG9sb2dyYXBoaWMgbWF0ZXJpYWwKMjVtbSBmaWxtIGdyYWluCmplc3VzIGNocmlzdAptYXJpanVhbmEgbGVhdmVzCmxpZ2h0IGJlaW5nCmdlcm1hbiByb21hbnRpY2lzbSBzdHlsZQphbWJpZW50IHN0eWxlCnBvbGlzaGVkIGNvbmNyZXRlCmJsb29kIG1vb24KZmVhcnNvbWUKd2V0IGhkciByZWZyYWN0aW9ucwpibHVyIGRyZWFteSBvdXRkb29yCnRyYW5zcGFyZW5jeQpmdXR1cmUgZGVzaWduCmluY2FuZGVzY2VudApzbWFsbCB0b3duCnRleHQKYnJ1Y2UgZGF2aWRzb24gcGhvdG9ncmFwaHkKY2FzaW5vCmdlbGlvcyBsZW5zCnN0ZXJuIGxvb2sKbWluaW1hbGlzdCBkZXNpZ24Kc25lcwpwcm9kdWN0aW9uIHN0aWxsCmJyaWdodGx5IGNvbG9yZWQKb24gbWFycwpoaXN0b3J5CmluIGEgY2F2ZQp2aXJhbCBvbiB0d2l0dGVyCm5pZ2h0Y2x1Ygphd2FyZCB3aW5uaW5nIHNjZW5lcnkKZHVuZ2VvbmRyYWZ0CmxvdmVjcmFmdCBpbGx1c3RyYXRpb24KcGl4ZWxzCnVsdHJhIHJlYWxpc3RpY+KAnQpndGEgdiBwb3N0ZXIKZWlnaHRpZXMgZXJvcwpyYWNoZWwgYmlya2V0dApyZWFsIGZ1cgpiZWF1dGlmdWwgc3ltbWV0cmljIGZhY2UKbWlkIHRoaXJ0aWVzCnRvd24gc3F1YXJlCmZsYW1lCmxpZ2h0IHJlZCBhbmQgZGVlcCBibHVlIG1vb2QKbG93IGRldGFpbHMKZHJhZ29uIHdpbmdzCnNvZnQgc2hhZGluZwpsaWdodCBwYWludGluZwppZGVudGl0eQpydWFuamlhCm11c2N1bGFyIGJ1aWxkCmRldGFpbGVkIGNsb3RoZXMKdmlkZW8gZ2FtZSBncmFwaGljcwp2cmF5IG9jdGFuZQptYW5kZWxidWxiIDNkCmZ1dHVyZSB0ZWNobm9sb2d5Cm5hcnV0bwppbiBhIGRhcmsgcm9vbQpzaWx2ZXIgc21hbGwgZ2xhc3NlcwpoaWdoIGxldmVsIHRleHR1cmUgcmVuZGVyKQpwaW5rIGFuZCBncmVlbgpzZWFzY2FwZQpzaGFkb3cgZGVwdGgKcmF5cyBvZiBzaGltbWVyaW5nIGxpZ2h0CnpvbWJpZSBhcG9jYWx5cHNlCmRhcmsgc291bHMgc3R5bGUKc3Rvcm15IHNub3d5IHdlYXRoZXIKc21va2luZyBhIHBpcGUKd2VhcmluZyBhIHRvcCBoYXQKd2hpdGUgY2xvdWRzCnN1cGVyIGludHJpY2F0ZQptYXBwYQppcm9uCjhrIHVsdHJhaGQgb2N0YW5lIHJlbmRlcgp6ZHppc2xhdyBiZWxzaW5raQozZCBjb25jZXB0CmFnb255CnZpbnRhZ2Ugc2hhZGluZwpoZHIgcGhvdG8Kbm8gY3JvcHBpbmcKc3VycHJpc2VkCmxvdyBwb2x5Z29uCmdsb3dpbmcgcnVuZXMKZ3RhNQo4ayBwaG90b2dyYXBoCnNvZnQgbGlnaHQgNGsKZXhwcmVzc2lvbgpzaHJvdWRlZCBpbiBtaXN0CmluZmx1ZW5jZXIKcG9zdCBwcm9kdWN0aW9uCmVtcHR5IHN0cmVldHMKb3JhbmdlIGV5ZXMKc3RpbGwgZnJvbSBhIG1vdmllCm1hZGUgb2Ygd29vZAptYW55IGV5ZXMKb24gcGFwZXIKaHlwZXJyZWFsaXN0aWMgZGlnaXRhbCBhcnQKZXllIGdsYXNzCjg1bW0gZi8xLjQKcHVycGxlIG1pc3QKZm9ybXVsYSAxCm9jZWFuIGNhdXN0aWNzCmJlYXV0aWZ5CmFtYXRldXIKcm9ja3N0YXIgZ2FtZXMKbWF5YW4KbWdzCndvbmRlciB3b21hbgo4ayBoZCBvY3RhbmUgcmVuZGVyCnBvb3IKYnJhdmUKYmFyb3F1ZSBjdXJscwrGki84CmFjdGlvbiBtb3ZpZQoxOTg2CmhhcnNoIGxpZ2h0IGFuZCBzaGFkb3cKY2FwdGFpbiBtYXJ2ZWwKYmFyb3F1ZSBvaWwgcGFpbnRpbmcKY2F0Z2lybAp6b29tZWQgb3V0IHZlcnkgZmFyCm5ldHdvcmsKd2l0aCBhY2N1cmF0ZSBmYWNlCndlaXJkY29yZQpncmFpbnkgcGhvdG9ncmFwaAp0aGljayBicnVzaCBzdHJva2VzCm1hY2hpbmUgZWx2ZXMKY29yaW9saW9zIHJwZyBhcnQgc3R5bGUKZ29sZGVuIGhvdXIgbGlnaHQKZG90YSAyCmRyYWdvbiBnaXJsCmluZmluaXR5IGdseXBoIHdhdmVzCmVsaXphYmV0aCBvbHNlbgp0ZWxldmlzaW9uCmdsb3ZlcwpoZCAxNmsKZ2xvd2luZyB5ZWxsb3cgZXllcwpnb2xkIGpld2VybHkKaGlnaGx5IGRldGFpbGVkIGtpbW9ubwpkZWVwIHVuZGVyd2F0ZXIgc2NlbmUKMjRtbSBsZW5zCndob2xlLWxlbmd0aApwbGFuZXQgbWFycwpjb25jZXB0IGlsbHVzdHJhdGlvbgpzYWx0CnN0ZWFtcHVuayBzZXR0aW5nCmtvZGFrIGNvbG9yIGZpbG0KZnVsbCBib2R5IHBob3RvZ2VuaWMgc2hvdAp2ZXJ5IGxvdyBhbmdsZQptYXh3ZWxsIHJlbmRlcgp1c2VyIGludGVyZmFjZQpyZWQgYW5kIGJsdWUKZmluYWwgZmFudGFzeSBzdHlsZQppbW1lbnNlCm5hdGlvbmFsIGFyY2hpdmVzCnJlZCBjb2xvcgpkaWdpdGFsIGltYWdlCnBvc3QgcHJvY2VzcwpzdXJyZWFsaXN0IGFydApzdG9ybSB0cm9vcGVyCm1ha290byBrYW5vCnJvcnNjaGFjaCB0ZXN0CmRhcmsgbGlnaHQKc2NpZmkgY29uY2VwdCBhcnQKYWJvbWluYXRpb24Kc2tldGNoIGFydAptb3RoZXIgb2YgYWxsIGRlY2tzCnBsdW1wIGxpcHMKc3Vuc2V0IGluIGJhY2tncm91bmQKZXBpYyBkaW1lbnNpb25hbCBsaWdodApwZXRlcgo1IGsKbXVua8OhY3N5CmZvZ2d5IHZvbHVtZXRyaWMgbGlnaHQgbW9ybmluZwphbWVlcmEgYWwgdGF3ZWVsCnRpZ2h0Cmhvb3AgZWFycmluZ3MKMiA1IG1tCnBlcmZlY3QgZmFjZSBhbmQgYW5hdG9teQpvcm5hdGUgZGVjbG90YWdlCm5vIG1vdW50YWlucwpzeW1tZXRyaWNhbCBwcm9wb3J0aW9ucwphcnRlbSBkZW11cmEgYmVlcGxlCnZvZ3VlIG1hZ2F6aW5lIGNvdmVyCm9ybmF0ZSBoZWFkcGllY2UKaW50cmljYXRlIHNjdWxwdHVyZQpuZXh0IGdlbiBncmFwaGljcwpoZXJvaWMgbGlnaHRpbmcKZnVycnkgZnVyYWZmaW5pdHkKc29mdCBzdXJmYWNlIHRleHR1cmUKaGlnaCBkZXRhaWxlZCBwaG90b2dyYXBoeSByZXN1bHQKaW5mcmFzdHJ1Y3R1cmUKYW54aW91cwpmYW50YXN5IGZvb2Qgd29ybGQKZHJlYW15IGhhenkKcHJlc3RvbiBibGFpcgpibGFjayBpbmsgb24gcGFwZXIKcG9ydHJhaXQgZmFjaWFsIGhlYWQKKChyYXl0cmFjaW5nKSkKKChvY3RhbmUgcmVuZGVyCm52aWRpYSByYXl0cmFjaW5nIGRlbW8pKQpvY3RhbmUgcmVuZGVyIDggayB1aGQKc29mdCBjbG91ZHMKd2ludGVyIHZpYmVzCmYgMS4gNwozIGRvb3JzCnJheSB0cmFjaW5nIHgKYmlnIHRyZWUKMiA4IG1tIGhlcm9pYyBzY2FsZQpqdXh0YXBvegpzaGliYSBpbnUgZmFjZQphcnQgaWxsdXN0cmF0aW9uCmNhbm9uIDMgNSBtbSBwaG90b2dyYXBoeQptZWRpZXZhbCBlcmEKZnJhbmNvaXMgYm91Y2hlcgp0cnVja3MKcmljaCBkZWVwIHZpYnJhbnQgY29sb3JzCmRvb3J3YXkKbWlzdCBmbG9hdHMgaW4gdGhlIGFpcgppbnNpZGUgc3R5bGl6ZWQgYm9yZGVyCnJlYWxpc3RpYyB3YXRlciBzaGFycCBmb2N1cwpzb3JvbGxhCmRhcmtlcgoxIDkgMyAzCnJpY2ggdmlicmFudCBjb2xvcnMKZGV0YWlsZWQgOCBrCmZsb3dpbmcgbWFuZQpoYW5zIGRhaGwKZW5pZ21hdGljIGJlYXV0eQpzdHJpa2luZyBwb3NlCmNvbnRyZSAtIGpvdXIKZ2Vyb21lCm9jdGFuZSBjaW5lbWEgNGQgcmVuZGVyCndldCBmbG93aW5nIGhhaXIKYXBlcnR1cmUgZiAxLiAyCmYgOCBhcGV0dXJlCmVhc3RtYW4gNSAzIDggNCBmaWxtCm5vcmloaXJvIHlhZ2kKZ3VhcmRyYWlsCm5hdGlvbmFsIGFydCBzY2hvb2wgbWZhCmhhcmR3b29kIGZsb29ycwptYWRlIG9mIGhvbmV5Cml0YWxpYW4gc3R5bGUKbWluaW1hbGlzdCBwb3N0ZXIgYXJ0CmV4dHJlbWUgaGlnaCBxdWFsaXR5Cmhpcm95YSBva3UKc3BhcnRocwpsZWF2ZXMgZm9saWFnZSBhbmQgc3RlbXMKd29vIGtpbQpkZWFrIGZlcnJhbmQKaGlnaGx5IGF0bW9zcGhlcmljIGxpZ2h0aW5nCmRldGFpbGVkIGFybXMKc29sZW1uIGV4cHJlc3Npb24KZ2lybCBzdGFuZGluZyBvbiBjbGlmZgpncm9vdnkgdmliZQp3ZWFwb25zIGNvbmNlcHQgYXJ0CnNleHkgZG9taW5hbnQgcG9zZQppbnNpZGUgYW4gdW5kZXJ3YXRlciB0cmFpbgpnbG93aW5nIGZvZwpsdXN0cm91cwpkd2FyZiB3aXRoIHdoaXRlIGhhaXIKZmxvcmFsIGNsb3RoZXMKdGhpY2sgd2lyZXMgbG9vcGluZwp3ZWFyaW5nIGEgaGFvcmkKbWV0YXRyb24KZ290aGljIHdlYXJpbmcKZ2lybCBzaWx2ZXIgaGFpcgpmbGF0IGFuaW1lIHN0eWxlCm5vc3RhbGdpYSBmb3IgYSBmYWlyeXRhbGUKb3V0c2lkZSB0aGUgc2Nob29sIG9mIG1hZ2ljCmtuaWdodCBkcmlua3MgYmVlcgp0aGljayBzZXQgZmVhdHVyZXMKYmV0dHkgcGFnZSBmcmluZ2UKYnJlYXRodGFraW5nIGZhY2UKbWVkaWV2YWwgd2VhcgppbiB0aGUgbWFjeXMgcGFyYWRlCmluIHRoZSBjb2xvcnMgaG90IHBpbmsgYW5kIGN5YW4KY2hlZWt5ISEhCmVtb3Rpb25zIGNsb3NldXAKdXRvcGlhbiBnYWxheHkKZGV0YWlsZWQgZm9vdCBzaG90CmNvbG9yZnVsIHN0YXRpYwrigJxmaXJlIGJyZWF0aGluZyBkcmFnb24KYmlvbmljIHNjaWZpIGFsZXhhbmRyZSBmZXJyYQpnb2Qgb2Ygd2FyCmJlYXV0aWZ1bCBpbnRyaWNhdGUgcGFpbnRpbmcKaGFsbGUgYmVycnkKZmVtYWxlIGFyY2hlcgozZCBtb2RlbCBodW1hbgphbmNpZW50IGhpZ2ggdGVjaApnYWRnZXRzCnNhcmFoIGFuZGVyc2VuCmNlbGwtc2hhZGVkCm5pbmEgbWFzaWMKMjAwbW0gbGVucwprYXVhaQpjbGFzc2ljYWwgcG9ydHJhaXQKaWxsdXN0cmF0aXZlISEKaW5mdXNlZAplbmdpbmUKZ29ibGluCm1hY2FicmUgYXJ0CndlYXJpbmcgYSByb2JlCmZ1bGwgcGVyZmVjdAppbnRyaWNhdGUgb3JuYW1lbnRzCnBvc3Rtb2Rlcm4Kd2FzaGVkIG91dCBjb2xvcgoxIDkgNSAwJ3MgZnV0dXJpc3RpYwptZWRpdW0gY2xvc2UgdXAgc2hvdAoxIDggbW0Kb3V0bGluZXMKOCBiaXQKZ2xvc3MKYW5jaWVudCByb21lCiMgMSBkaWdpdGFsIHBhaW50aW5nIG9mIGFsbCB0aW1lCmZyb250IGNhbWVyYQppbmZpbml0ZQpkaWZmcmFjdGlvbgpmcmVha3kKZiAvIDEuIDMKY2hhcmFjdGVyIHR1cm5hcm91bmQKc2lnbWEgMiA4IG1tCmdpbGRlZAppbXByZXNzaXZlIHBlcnNwZWN0aXZlCmdsb3dpbmcgbGVkcwpncmFwZXMKdW5pY29ybgozM21tCmxpZ2h0c2FiZXIKc29tYmVyIGxpZ2h0aW5nCndlYXJpbmcgcm91bmQgZ2xhc3Nlcwpkb2xseSBwYXJ0b24KcmFpbiBsaWtlIGEgZHJlYW0KYmVhdXRpZnVsIHN5bW1ldHJpY2FsIGZhY2UKYm9hdAp2ZXJ5IHNob3J0IGhhaXIKZ29sZGVuIGFybW9yCnN1bW1lciBzZWFzb24KaHlwZXJyZWFsaXN0aWMgOGsKbW9uc3RlciBodW50ZXIKcGVuY2lsIGFydCBvbiBwYXBlcgpyaXZlbmRlbGwKcXVhcnR6CnBvc2luZyBoZXJvaWNhbGx5CmNvbWljIGJvb2s6LjIKdGFsbCBjZWlsaW5nCnZlcnkgaGFwcHkKaW4gYSBwb3N0IGFwb2NhbHlwdGljIHNldHRpbmcKbWFjcm9zcwpiZWF1dGlmdWwgdmlldwpzY2lmaSBhcnQKdGFuZ2xlZApncml0dHkgdGV4dHVyZQprZW50YXJvIG1pdXJhIHN0eWxlCjUwMHB4CnRyYXZpcyBjaGFyZXN0Cmplbm5pZmVyIGxhd3JlbmNlCmRldwpzZW1pIHJlYWxpc3RpYwp3ZWF0aGVyZWQgZmFjZQpmb3ggZWFycwpsYW5kc2NhcGUgaW1hZ2VyeQpqYXBhbmVzZSBhbmltYXRpb24KYXZhbnQgZ2FyZGUKbW9kZXJuIGNsb3RoaW5nCnJvdW5kZWQgY29ybmVycwpwc3ljaGVkZWxpYyBiYWNrZ3JvdW5kCnBhY2lmaWMtcmltLW1lY2ggaW4gYmFja2dyb3VuZApib25zYWkKaW5ub3ZhdGlvbgpoZWFkIGFuZCBzaG91bGRlcnMgc2hvdAphbGl2ZQpkYXJrIGF0bW9zcGhlcmljIGxpZ2h0aW5nCnNrZXRjaCBzdHlsZQpoeXBlcgpqb3lvdXMKZHJ1aWQKd2lkZSBhbmdsZSBwaG90bwpoYWxmLWJvZHkgcG9ydHJhaXQKdm9sdW1ldHJpYyByZW5kZXIKaW50cmluc2ljIGRldGFpbHMKYmlnIGJyb3duIGV5ZXMKc3BhcmtsZQpyZXRybyBzY2llbmNlIGZpY3Rpb24Kc25vb3AgZG9nZwpzdGlsbCBwaG90bwpleHRyZW1lIGFlc3RoZXRpYwpjeWJlcnB1bmsgMjA3NykKZWRpdG9yaWFsIHBob3RvZ3JhcGgKaGlnaGxpZ2h0CmFsc28ga25vd24gYXMgYXJ0ZW1pcyB0aGUgc2VsZW5lCnJ1YmJlciB1bmRlcnN1aXQKaGFyZCBsaWdodCBhbmQgbG9uZyBzaGFkb3dzCmVuaGFuY2VkCnByb21wdApoYXJzaCBmYWlyeSB0YWxlCmplb25nc2VvayBsZWUKZnVsbCBsZW5ndGggcGhvdG8KYmx1ZSB3YXRlcgphdHRhY2tpbmcKYm9yaXMgam9obnNvbiBoYWlyc3R5bGUKYW5ncnkgbG9vawpncmFuZCBjYW55b24KYXdhcmQgd2lubmVyCnVua25vd24KaGlnaCBkZWYKY2lyY3VzCmNsaW50IGVhc3R3b29kCnN1Ym1lcmdlZAppbnRyaW5zaWMKY2FzcGFyIGZyaWVkcmljaApmYW50YXN5IGFuaW1lCjNkIGNpbmVtYXRpYyB2b2x1bWV0cmljIGxpZ2h0CmRldGFpbGVkIGNoYXJhY3RlciBkZXNpZ24KbGltaXRlZCBjb2xvdXIgcGFsZXR0ZQpkYXJrIGdhcm1lbnRzCmRhcmsgcHJ1cGxlIHJvYmVzCmJsYWNrIGNsb2FrIGZyb20gbmVjayB0byBhbmtsZXMKdmVyeSBkZXRhaWxlZCBhbmQgYmVhdXRpZnVsIGZhY2UKemVpc3MKbnVjbGVhciBleHBsb3Npb24gYmFja2dyb3VuZApjaGFuZGVsaWVyCmNvbG9yaW5nIGJvb2sKeW91dHViZQptb25vdG9uZQpraWxpYW4gZW5nIGFuZCB0aG9tYXMga2lua2FkZQptaXNzaWxlcwpncmVnIHJ1dGtvd3NraSBhbmQgZnJhbmNpcyBiYWNvbgpmcmVuY2ggcmV2b2x1dGlvbgppbnRyaWNhdGUgYXJtb3IKYmVhdXRpZnVsIGRlc2lnbgpzdXBlciBoZXJvCmxvbW9ncmFwaHkgcGhvdG8gZWZmZWN0CmdvZCBvZiB0aGUgZm9yZXN0CmxpZ2h0IGJyb3duIGV5ZXMKaGFuZHNvbWUgc3F1aWR3YXJkIHBvcnRyYWl0CnJvbWFudGljIHBhaW50aW5nCmRldGFpbGVkIHNjZW5lCmxvdyBjZWlsaW5nCm5pZXIgaW5zcGlyZWQKY3Jvd2QgY2hlZXJpbmcKdGhlIGVsZGVyIHNjcm9sbHMgdjogc2t5cmltCnNpbHZlciBkZXRhaWxzCnNvZnQgY2luZW1hdGljIGxpZ2h0Cmh1YmJsZQoxMDgwcwpncmVlbiB0b25lcwpwYXRyaW90aXNtCmhhbmRzIHN0cmFpZ2h0IGRvd24KZmFzaGlvbiBwb3J0cmFpdApkcmVkZApzcGFya2xpbmcgZXllcwpzd2lybHkgY2xvdWRzIGluIHRoZSBiYWNrZ3JvdW5kCmN1bXVsb25pbWJ1cyBjbG91ZHMKbmljb2xhcyBib3V2aWVyIHNwYXJ0aApoaWdoIHJlc29sdXRpb24gZmlsbSByZW5kZXIgMTAwawphZnRlcmxpZmUKYmVhdXRpZnVsIDMgZCByZW5kZXJpbmcKYW50aWNocmlzdApzaGFycGUgZm9jdXMKIyB2ZnhmcmlkYXkKZXBpYyBsaWdodCBub3ZlbCBjb3ZlciBhcnQKdGFsbCBhbmQgdGhpbgoxIDIgMCBtbQpzZW5zdWFsIHBvc2UKbG9va2luZyBhd2F5CmJlYXV0aWZ1bCBjbG90aGVzCmxvZmkgdmliZQpyYXl0cmFjaW5nIGVmZmVjdHMKY2luZW1hdGljIHRvcCBsaWdodGluZwpheWFtaSBrb2ppbWEgYW1hbm8KYmxhY2sgbG9uZyBoYWlyCnRlcnJhbiB0cmFkZSBhdXRob3JpdHkKcGhvdG8gLSByZWFsaXNtCmZyb25kcwpyZWFsaXN0aWMgYW5kIGRldGFpbGVkIGZhY2UKYmxhY2sgd2luZG93cwpyYWluYm93IHNoaWZ0CmdyZWcgcnV0a293c2tpIDggawpmcm96ZW4ga2xhdXMgZmlsbQpjaW5lbWF0aWMgYWVzdGhldGljCmhpZ2ggcGFydGljbGUgZWZmZWN0cwpkICYgZCBjb25jZXB0IGFydApzYXRvc2hpIGtvbiBhbmQgbW9lYml1cwphIHRpbSBidXJ0b24gZmlsbQpkcmVhbWxpa2Ugc3VucmFpc2UKZWxlZ2FudCBhbmNpZW50IGdyZWVrIGRyZXNzCmNvbG9yZWQgcGFpbnQKYmxhY2sgdW5kZXJ3ZWFyCm1lZGljYWwgZXF1aXBtZW50CnBlcmZlY3RseSBzaGFkZWQgYm9keQptYWdhemluZSBwaG90bwpvcm5hdGUgYm9yZGVyCmRhcmsgZWVyaWUgbW92aWUgZnJhbWUKbmllciA6IGF1dG9tYXRhIGluc3BpcmVkCnN3aW1taW5nCjMvNCBidXN0CmludHJpY2F0ZSBhcnQgcGhvdG9ncmFwaHkKbWFzdGVycGllY2UgYXJ0d29yawpiIHNoYXJwIGZvY3VzCiggcGl4YXIgKSBhbmQgZGlzbmV5IGFuaW1hdGlvbgptb2RlbGluZyBwaG90b2dyYXBoeQpvd2xzCjEgOSA5IDYKaWxsaXRoaWQKc2VyaW91cyBleHByZXNzaW9ucwpleHBlcmltZW50YWwgZmlsbQplcGljIGZlZWxzCmxvdmUgYXJ0CmFnZSBvZiBzaWdtYSBhcnQKdWx0cmEgZGV0YWlsZWQgcG9ydHJhaXQKc2lsIGZyb20gc3BlY2llcwpwcyA0CnJlZCBhbmQgd2hpdGUgbmVvbgpkYXJrc3ludGggY2hhcmFjdGVyIHBvcnRyYWl0CmxvIGZpIGNvbG9ycwpuZXcgYXJ0IG5vdXZlYXUKbWFjaGluZSBwbGFuZXQKcmFpbmJvdyB0dWJpbmcKbHVtaW5pc3QKbXVsdGlwbGUgZGltZW5zaW9ucwpuZW9uIGFtYmlhbmNlCmJvbGQgMyBkCnllbGxvdyBhbmQgYmx1ZSBhbmQgY3lhbgpmdXR1cmlzdGljIGJhY2tncm91bmQKcmVhc29uYWJsZSBmYW50YXN5CnNha3VyYSB0cmVlIGluIGJhY2tncm91bmQKYnJpZ2h0IGZ1Y2hzaWEgc2tpbgpnaXJpaApmcmVuZXRpYyBicnVzaHdvcmsKYXpjdGVjIHdhcnJpb3IKZGV2ZmlhbnRhcnQKMTZrIHJlc29sdXRpb246MC44CnBob3RvcmVhbGlzdGljIGNpbmVtYXRpYwptYXlhIGFsaSBtYWdlCnZ1bHR1cmVzCmZsb3dpbmcgd2hpdGUgaGFpcgpzeWRuZXkgaGFuc29uCndlYXJpbmcgYW4gZWxlZ2FudCBkcmVzcwpkcmliYmJsZS4gY29tCnlvICkKZW5iCm1hbWl5YSByYiA2IDcKY3JhaWcgbXVsbGlucyBuZWtybwpoYXNzZWxibGFkIHggMSBkCm1lY2hhbmljYWwgY3lib3JnCndhdGVyY29sb3IgY29sb3JlZCBwYWludGluZwphcnR1ciBib3JkYWxvCmJlYXV0aWZ1bCAzZCByZW5kZXIKYWxwaG9uc2UgbXVjaGEgOiA6CmZhbGwgdmlicmFuY3kKc2N1bHB0dXJlIG9mIGNhcnZpbmcgbWFyYmxlCjMgZCBvY3RhbmUgY3ljbGUgdW5yZWFsIGVuZ2luZSA1Cm1hc3NpdmUgYmF0dGVyeQpwaHRoYWxvIGJsdWUKZGVjb2hlcmVuY2UKc2hvdCB3aXRoIGEgY2Fub24Kd29vZCBhbmQgZ29sZCBkZXRhaWxzCmJsYWNrIGdlYXJzCnRpbSBidXJ0b24gY29taWMgYm9vayBhcnQKbXVsdGljYW0gKGNhbW8pCnNleHkgcHVzaCB1cCBicmFzCmNpcmN1bGFyIHBsYW5ldCBiZWhpbmQgaXQKc2hhbGxvdyBkZXB0aCBvciBmaWVsZApwb3NpbmcgZWxlZ2FudGx5IG92ZXIgeW91CmhvbGRpbmcgY2xvc2UKZ2xpdGNoIGV5ZXMKc2ltcGxlIHdhdGVyIGNvbG9yCnVwIGZhY2Ugd2l0aCAxIDkgMiAwIHMgaGFpcnN0eWxlCnN0ZXZlbiBrbGVpbgpyZWQgc3VuZ2xhc3NlcwpoYWlyIHRpZWQgdXAgaW4gYSBwb255IHRhaWwKYmF1Z2ggY2FzZXkKaW50ZXJlc3Rpbmcgc2hhcGVzICYgZm9ybQphbmRyb2lkIGNhbWVyYXBob25lCjEtcG9pbnQgcGVyc3BlY3RpdmUKKCBzaHkgc21pbGluZyBmYWNlICkKZ3JlZWsgcm9tYW5pYW4KdG9wIGhhbGYgb2YgYm9keQooKChsdW1uaW91cykpKQp2aW5jZW56byBjYXRlbmEgc3R5bGUKZnJlZGR5IGtydWVnZXIgc3R5bGUKcHN5Y2hlZGVsaWMgZnJhY3RhbCBwYXR0ZXJuCmNsYXNzaWNpc20KaW4gcmV0cm8gY29sb3JzCm1hZ2F6aW5lIHNob290Cmdlb21ldHJpY2FsCjMgLSBkaW1lbnNpb25hbAp0dXJxdW9pc2UgcnVzdApmbG9yYWwgc3BsYXNoIHBhaW50aW5nCmZhY2UgY2xvc2UtdXAKbW9vbmxpZ2h0IHNoYWZ0cwptYWRlIG9mIGhvbG9ncmFwaGljIHRleHR1cmUKaGVhZHNob3QgcGhvdG9ncmFwaAplYXN0bWFuIGV4ciA1MGQgNTI0NS83MjQ1CnN1YnRsZSBwYXR0ZXJuCm1lZ2FzdHJ1Y3R1cmVzCmZpbG0gcG9zdGVyCmdlbGF0aW4gc2lsdmVyIGZpbmlzaApjcmVlcHkgYXJ0CmdyZWVjZQp0dXJidWxlbnQgc2VhCmRpZ25pZmllZAptb3ZpZSBzZXQKc29saXR1ZGUKd3cyCnVuaXF1ZSBsYW5kc2NhcGUKbW9udW1lbnQgdmFsbGV5CmNoYXJhY3RlciByZWZlcmVuY2Ugc2hlZXQKc29saWQgd29ya3MKYmxhY2sgZGVzaWduCnJpZGxleSBzY290dCB1bml2ZXJzZQp2b3J0ZXhlcwp2b2ZhbgpkYXJrIG5lb24gcHVuawp5b3V0dWJlIHRodW1ibmFpbApmaW5lbHkgZGV0YWlsZWQgcGVyZmVjdCBhcnQKZ29vZCBtb3JuaW5nCmZvZyBhbmQgbWlzdAp2aXZpZCBsaWdodGluZwpnYW1lIGRlc2lnbgpkcm9uZXMKbmVvIHRva3lvCnZpb2xlbnQgZ3VuIGFjdGlvbgoxOTk0CnNsZWVweQoyIDAgMiAwCmJsdWUgc2t5IHdpdGggY2xvdWRzCmhpZ2hyaXNlIG1hZGUgdXAgc3RhaXJjYXNlcwpuZWlsIGdhaW1hbgpjb2xvcmZ1bCByZWRzaGlmdCByZW5kZXIKbGlnaHQgYmx1ZSBoYWlyCndhdnkgc2hvcnQgaGFpcgpzbGVlcGluZwpsdWNpZmVyCmp1aWN5Cm9uIHRoZSBtb29uCmFydGlmYWN0CmNhcmRzCmFkcmlhbiBzbWl0aAp2ZXJ5IGNvbG91cmZ1bApib2R5cGFpbnQKZGFyayBibHVlIGJhY2tncm91bmQKOCBrIGhkIGRvZgpyb29tCnNoaW1tZXIKc2hpcnQKZml0IGJvZHkKdGhvbWFzIGtpbmNhaWQKb2N0YW5lIHJlbmRlciAtIDggawozIDUgbW0gZmlsbSBwaG90b2dyYXBoeQplcGljIGZpZ2h0IHNjZW5lCnNpbHZlciBjb2xvcgo4IGsgMyBkIHJlbmRlcgpjb250ZW50CnNlbGxpbmcgaGlzIHdhcmVzCm1ham9yIGFyY2FuYSBjYXJkcwppbmZyYXJlZAphdG9tcHVuawpicmVhdGggb2YgdGhlIHdpbGQgc3R5bGUKMTAwbW0gbGVucwphbGV4aSB6YWl0c2V2CjhrIGhkIHdhbGxwYXBlcgpkZXRhaWxlZCBpbWFnZQptYW5kZWxidWxiIGZyYWN0YWwKbGVhdGhlciBnbG92ZXMKYnJpZ2h0IHJheXMgb2YgbGlnaHQKMTk2Nwp0YWtlbiBvbiBhIDIwMTBzIGNhbWVyYQpkcmFtYXRpYyBiYWNrbGlnaHQKYmlyZHMgZmx5aW5nCmNoaWxkIGxpa2UKYmxhY2sgYW5pbWUgcHVwaWxzIGluIGhlciBleWVzCmluZ2FtZSBzY3JlZW5zaG90CmNvbG9yZWQgcGVuY2lsIGFydApwb3JjZWxhaW4gbG9va2luZyBza2luCm1hc3RlcnBlaWNlCnN3aXJsaW5nIGNsb3VkcwpjcmlzcCBjbGVhciByZXNvbHV0aW9uCmZvdXIgYXJtcwpmbGFncwpuYXR1cmUgZG9jdW1lbnRhcnkKdmlldG5hbSB3YXIKYmxhY2sgbGlwc3RpY2sKbGVhZ3VlIG9mIGxlZ2VuZHMgc3R5bGUKc2NpZW50aXN0CmxpZ2h0aW5nIHN0dWR5CmNsb2NrCnZpZGVvIGdhbWUgYXNzZXQKc2lnbWEgNzVtbQp2YW5pc2hpbmcKb3V0c3RhbmRpbmcgZXBpYwp2aWV3IGZyb20gc3BhY2UKbmVrb21pbWkKOGsgcmVzb2x1dGlvbiAzZAp3aWRlIGFuZ2xlIHBob3RvZ3JhcGh5CmJlYXV0aWZ1bCBkZXRhaWwKYmxhY2sgY2xvYWsKZmx5aW5nIHZlaGljbGVzCnVsdHJhIGludHJpY2F0ZSBkZXRhaWxzCmhpZGVha2kgYW5ubwphbGVrc2FuZGVyIHJvc3RvdgpzdXJyZWFsIGZvcmVzdApmYWxsb3V0IDQKZGFyay1hcnQKbm8gd2F0ZXJtYXJrcwpzcGFya2x5CnNpdHRpbmcgYXQgYSBkZXNrCnNraSBtYXNrCmdvdGhpYyBpbmZsdWVuY2UKam9obm55IGRlcHAKYmxhY2sgYW5kIHdoaXRlIGNvbG9yCmRpc25leSBjYXJ0b29uCmFiYWxvbmUKc2hpbmluZyBleWVzCmZhbnRhc3kgYXJ0IHBvcnRyYWl0CmxpZ2h0cyBhbmQgc2hhZG93cwpzdHJlZXRzY2FwZQpiYXR0cm9pZCBtb2RlCm1lY2h3YXJyaW9yCmRldmluZSBjb21wb3NpdGlvbiBnb2xkZW4gcmF0aW9uCmZyb250IGxpZ2h0CmJpbGxpZSBlaWxpc2gKY2FwdGFpbiBhbWVyaWNhCmdhcmRlbiBvZiBlZGVuCmtlaXRoIHRob21wc29uCm11emluYWJ1Cmd0eCAzMDkwCmZpcnN0LXBlcnNvbiB2aWV3CmNyaXNwIGRldGFpbApkaWdpdGFsIGFydCBzdHlsZQplcGljIHdpZGUgc2hvdApyZWFsIGNvbG9ycwpzaW5naW5nCnNvdmlldApmaWxtIGNhbWVyYQpsaWdodG5pbmcgaW4gYmFja2dyb3VuZAp2ZXJ5IGRldGFpbHMKZmVtYWxlIGNoYXJhY3RlcgppY29ub2dyYXBoeSBiYWNrZ3JvdW5kCmh5c3RvcmljYWwgcGFpbnRpbmcKbGluZ2VyaWUKamVkaSBrbmlnaHQKaGVucnkgY2F2aWxsCnRpbWJ1a3R1CmZ1dHVyaXN0aWMgYXRtb3NwaGVyZQpkYXJrIG1hZ2ljCmZhbnRhc3kgdmVuZG9yIGludGVyaW9yCnJlYWxzaXRpYwphZXN0aGV0aWMhISEKdHdpc3RlZCBicmFpZApnbG9yaW91cyBsaWdodGluZwpvdXR3b3JsZGx5IGNvbG91cnMKbmVvbiBjaXR5CmhhaXJzdHlsZQptYWdpY2FsIGdpcmwKY3JvcHBlZCByZWQgeW9nYSBzaG9ydAp5YWt1emEgdGF0dG9vIG9uIGJvZHkKaXJpZGVzY2VudCBhY2NlbnRzLiB2aWJyYW50CnJhdmVuIGJsYWNrCndlbGwgZHJlc3NlZApjdXRlIHNsaWdodGx5IG5lcmR5IHNtaWxlCndvbHZlcwpwYWludGluZyBpbGx1c3RyYXRpb24KbHVpcyBuaWV2ZXMgc3IKcm9ib3Qgc3VpdApzYXVyb24KaW5zY3JpYmVkIHJ1bmVzCnN5bnRoZXRpYwpmbGFtaW5nIGJhY2tncm91bmQKZWFybHkgbW9ybmluZyBsaWdodAp1bmRlcndhdGVyIGNpdHkKc3BvcnR5CmRyaXBwaW5nIHdldApkZXRhaWxlZCAxMDAwawpoaXJvbyBpc29ubwpzZWN1cml0eSBjYW0KY2xvc2V1cCBhdCB0aGUgZmFjZQppbnRlbnNlIGV4cHJlc3Npb24Kdmlld2VkIGluIHByb2ZpbGUgZnJvbSBmYXIgYXdheQphbGNoZW1pc3QgYm90dGxlcwp3b25kcm91cwp2ZXJ5IGRlZXAgZGVwdGggb2YgZmllbGQKZmFudGFzeSBoZWFydGhzdG9uZSBhcnQgc3R5bGUKZ2xpdHRlcmluZyBzaWx2ZXIgb3JuYW1lbnRzCmV0aWVubmUgaGViaW5nZXIKY29sb3JlZCBpbGx1c3RyYXRpb24gZm9yIHRhdHRvbwozIC0gZCByZW5kZXIKMyBkcyBtYXgKaGVhcnRzdG9uZQpsb25nIGV4cG9zdXJlIHBob3RvZ3JhcGh5CmJsYWRlIHJ1bm5lciBiYWNrZ3JvdW5kCnZmeGZyaWRheQpsaXZpbmcgZm9vZCBhZG9yYWJsZSBwYW5jYWtlCmVsdXNpdmUKZGF5IG9mIHRoZSBkZWFkCjEgOCB0aCBjZW50dXJ5CnNhaXRhbWEgcHJlZmVjdHVyZQpkcmlwIHBhaW50aW5nCmhpZ2ggcmVzb2x1dGlvbiA4IGsKMyBkcmVuZGVyCmRlY2lwdGljb24gYXJtb3IgcGxhdGluZwpwYWxlIGJsdWUKaGFyc2ggbGlnaHQKcGhvdG9kaXJlY3RvciAzIDYgNQpkYXJrIGJsYWNrIGJhY2tncm91bmQKbWluaWF0dXJlIHBvcmNlbGFpbiBtb2RlbAprYWxlaWRvc2NvcGUKZGlnaXRhbCBnbGl0Y2hlcwpoaWdoIHF1YWxpdHkgb2N0YW5lIHJlbmRlcgpmdXJyeSBhcnQhISEKbWFnaWNhbCB3b3JsZApzcGlkZXIgLSBtYW4KcmVzaW4gbWluaWF0dXJlCmRldGFpbGVkIDQgawpkaWdpdGFsbHkgZW5oYW5jZWQKYXBleCBsZWdlbmRzIGNoYXJhY3RlcgphcnRodXIgcmFja2hhbSBhbmQgbWlsbyBtYW5hcmEKdmVyeSBkcmFtYXRpYyBsaWdodApldmVyLXByZXNlbnQKcm9zcyB0cmFuIGFuZCBtYWtvdG8gc2hpbmthaQp3ZWFyaW5nIGEgY2FwZQoyIGsgYWVzdGhldGljCnZpZGVvIGNvbXByZXNzaW9uCjIgZCBnYW1lCnJlZHVjZSBzYXR1cmF0aW9uCnJlYWxpc3RpYyBmYWNpYWwgZXhwcmVzc2lvbgptYWdpY2FsIGNvbG91cnMgYW5kIGF0bW9zcGhlcmUKc2lnbWEgNSAwIG1tCnBpbGxhcnMKb24gYSByZW1vdGUgcGxhbmV0CmNvbG91cmZ1bCBmbGF0IHN1cnJlYWwgZGVzaWduCnR3byBleWVzCmtleWZyYW1lIGlsbHVzdHJhdGlvbgpwZXJmZWN0IHBob3RvcmVhbGlzdGljIGV5ZXMKdmVyeSBzbWFsbCBicnVzaHN0cm9rZXMKZmluZSBhcnQgcG9ydHJhaXQgcGFpbnRpbmcKYWduZXMgY2VjaWxlCmFudGVubmEKc21hbGwgZmVhdHVyZXMKZGFyayBzb3VsIGFybW9yIGNvbmNlcHQKZXBpYyBzdXJyZWFsaXNtIDhrIG9pbCBwYWludGluZwpiaWcgcHVmZnkgY2xvdWRzCmFjcnlsaWMgcGFpbnQgc3R5bGUKdG9ybiBjb3NtbyBtYWdhemluZSBzdHlsZQp0cmFuc3BhcmVudCBqZWxseWZpc2gKY2FpZHljaGVuCmhhcnNoIGJsb29tIGxpZ2h0aW5nCnl1a2F0YSBjbG90aGluZwphbmltZSB2aXN1YWwgb2YgYSBjdXRlIGdpcmwKY29hcnNlIHRleHR1cmUKdmlzaWJsZSBzdHJva2VzCnZpYnJhbnQgYWVzdGhldGljCmtlcmJlcm9zIHJlYWxtCnJhbmRvbSB3ZWF0aGVyCmxvdmVycwpmdWxsIHNob3QgKCBmcyApCmJlYXV0aWZ1bCBwYWludGluZyBvZiBmcmllbmRzCnRob3JuIGNyb3duCmJlYXV0aWZ1bCBjb3NtaWMgbmV1cmFsIG5ldHdvcmsKbW9vZHkgbGlnaHRuaW5nCnNpdHRpbmcgaW4gdGhlIHJvc2UgZ2FyZGVuCmRhcmsgbWluaW1hbCBvdXRmaXQKa2VudGFybyBtaXVyYSEKcGVuICYgaW5rIGRyYXdpbmcKc3RpY2t5IGJsYWNrIGdvby4gcGhvdG9ncmFwaHkKYXJ0IG5vdXZlYXUgZW52aXJvbm1lbnQKcGhvdG9yZWFsaXN0aWMgMyBkCmZhcm1ob3VzZQpkYXJrIGRlc2lnbgpkYSB2aW5jaSBhbmQgcGl4YXIKdGFsbGVyIHRoYW4gbWFuCmNvbG9yIGtvZGFrCjQgMCBtbSBmIC8gMi4gOApkYXJrIGhpZ2gtY29udHJhc3QgY29uY2VwdCBhcnQKc29mdCByZWQgdGV4dHVyZQprZXJiZXJvcyBwYW56ZXIKbWFnbm9saWEgYmlnIGxlYXZlcyBhbmQgc3RlbXMKbW9yZSBzY2FycwpibHVlIHRvbmUgbGlnaHQKY3VybHkgaGFpcmVkCmZyZWNrbGVkCmN1dCBhbmQgcGFzdGUgY29sbGFnZQptaWRuaWdodCBmb2cgLSBtaXN0IQpnaXJsIGdyYWNlZnVsCmRpZSBoYXJkCnZvbHVtZXRyaWMgbGlnaHRpbmcgOiA6CmZlcmFsIGxhbmd1aWQgd29tYW4KYW5pbWUgcmVhbGlzbQpzdXBlci1mbGF0CmRldGFpbGVkIGJ1dCByb3VnaAp2aWJyYW50IGJ1dCBkcmVhcnkgZ29sZApob3VzZSBpbiB0aGUgd29vZApyb2dlciBkZWFuIGFuZCBhbmRyZWkgdGFya292c2t5CmhvdyBhIHJpdmVyCm9sZHdlc3QKdGFsbCBidWlsZGluZ3Mgb24gdGhlIHNpZGVzCnNpbmlzdGVyIGNvbXBsZXhpb24KZGV0YWlsZWQgYmlnIGV5ZXMKc2t5IGluIGJhY2tncm91bmQKcGxheWZ1bCEhIQpldmlsIGlua3kgc3dpcmx5IHJpcHBsZXMKc3R5bGUgc2hlZXRzCnN1cGVyIGRldGFpbGVkIGNvbG9yIGxvd3BvbHkgYXJ0CmFjcnlsaWMgcGFpbnQgc3BsYXR0ZXJzCmVkaWJsZSBmbG93ZXJzCnJlYWxpc3RpYyBzaGFkZWQgcGVyZmVjdCBib2R5CmhvbGRpbmcKZ2xvd2luZyBiYWNrZ3JvdW5kIGxpZ2h0aW5nCmNvbG9yZnVsIGNvbnRyYXN0CnJlZmxlY3RpdmUgc3VyZmFjZQpjaWdhcgpzcGVjdGFjdWxhciByb2NreSBtb3VudGFpbnMKZHJpZWQgYWNyeWxpYyBwYWludApyZW5kZXJlZCBpbiB1bnJlYWwgZW5naW5lIDMKc2hvcnQgcGluayBoYWlyCnNwb3QgbGlnaHRzCmRldGFpbGVkIGhlbG1ldApiYW5uZXJzCmRldGFpbGVkIGxpbmV3b3JrCmNlbnRlcmVkIGltYWdlCnN0eWxlIG9mIGphbWVzIGplYW4KY2FyIGNvbmNlcHQgYXJ0CmFudGlxdWUKY2xpcCBhcnQKZmxpbQptdXNpYyBhbGJ1bSBjb3ZlcgpjYWtlCnZvaWQgZXllYmFsbHMKZWRnZQp3aGl0ZSBzdHVkaW8KZG9vcgpqYXBhbmVzZSB0b3duCnBob3RvIHBpbnRlcmVzdApjb25jZXB0IGNhcgpib2R5IHJpYnMgbWVzaGVzCmNvbmNlbnRyYXRpb24KbWluaW1hbCBkZXNpZ24KYWxidW0gYXJ0d29yawoxOTAwcwpzd2VkaXNoIGNvdW50cnlzaWRlCmNpbmVzdGlsbCA4MDB0IDE4bW0KZ2xvc3N5IGZpbmlzaApzdHJlZXQgYXJ0OjIgbWFzdGVycGllY2UKMTk5NwpwZW9wbGUncyBwZXJzcGVjdGl2ZQpicmF2ZXJ5CjIgZCB0ZXh0dXJlCnBoYW50YXNtYWdvcmljCjIwMDEgc3BhY2Ugb2R5c3NleQplZGl0b3LigJlzIHBpY2t1cAozIDUgbW0gZmlsbSBzdGlsbAphbnRpcXVlIHBob3RvZ3JhcGh5Cm1pbmltYWxpc3QgcnVsZSBvZiB0aGlyZHMKY3J5c3RhbGxpbmUgZWRnZXMKbGlnaHQgc3RyZWFrcwpuZW90cmliYWwKbmlnaHQgc2V0dGluZwpnb2xkZW4gb3JuYW1lbnRzCndpZGUgbm9zdHJpbHMKaGlnaCBmbGF0IGV5ZWJyb3dzCnZvbHVtZXRyaWMgbGlnaHRpbmcgYW5kIHNoYWRvd3MKZGVlcCBuaWdodAozNW1tIGZpbG0gc3RpbGwKYWJzdHJhY3QhCmFydCBvZiDDqW1pbGUgZWlzbWFuLXNlbWVub3dza3kKYXJ0IG9mIMOpZG91YXJkIGJpc3NvbgppbiB0aGUgc2t5CmZpbG0gbm9pciBsaWdodGluZwpwbGFpbiB3aGl0ZSBiYWNrZ3JvdW5kCm9pbHBhaW50aW5nCnRyb3BpY2FsIHRyZWVzCmYxMgpmaWxtaWMgbGlnaHRpbmcKY29tcGFueSBsb2dvCnNob3J0IGJyb3duIGxlYXRoZXIgamFja2V0CmVkbW9uaWEgbGV3aXMKaGVucnkgbWV5bmVsbCByaGVhbQphdXR1bW4gc2Vhc29uCm1vdmluZwpoZWFkc2hvdCBwaG90bwpkYXJrIHNvdWxzIGNvbmNlcHQgYXJ0CmhpZ2gtcXVhbGl0eSB3YWxscGFwZXIKbWFueSBjb2xvcnMKcHJvZmVzc2lvbmFsIGFkdmVydGlzaW5nCmNoaW5lc2UgaGVyaXRhZ2UKc2lkZSBsaWdodGluZwpjZW50ZXJlZCBmYWNlCmdyZXkgYmVhcmQKc3RlZmFuIGdlc2VsbAptZW5kZWxicm90IGZyYWN0YWwKYW5hY2hyb25pc20KcmF5LXRyYWNpbmcKb3Zlcmdyb3duIHdpdGggdmVnZXRhdGlvbgo0MG5tCmFzc2Fzc2luCmVuZ2luZWVyaW5nIGJsdWVwcmludHMKcmVkIG1pc3QKaGlnaGx5IGRldGFpbGVkIGN5YmVybmV0aWMgYm9keQplZ3lwdApoZWFkIGlzIHVwCnJvbWFuCnVsdHJhIGh5cGVyIHNoYXJwCmluIGhlbGwKdGh1bmRlcmNsb3VkcwpjYXRoZWRyYWwgY2VpbGluZwphcnRpc3RpYyBwb3NlCm1ldGF2ZXJzZQpmaXJzdCBwZXJzb24gcGVyc3BlY3RpdmUKaHEgOGsgc2NhbgpvY3RhbmUgNGsgcmVuZGVyCmdvb2QgcXVhbGl0eQpqZWxseWZpc2ggZ29kCm1hZCBtYXggc3R5bGUKc2l0dGluZyBvbiBhIGJlbmNoCmxhcmdlIHNob3QKYXJjdGljCmludHJpY2F0ZSBkaWdpdGFsIHBhaW50aW5nCm1lZGl1bSBza2luIHRvbmUKcGVudGF4IDY3CmJyYWQgcGl0dApkYW1wCnNoYXJwIGZhY2lhbCBmZWF0dXJlcwplaWZmZWwgdG93ZXIKaWNlbGFuZApkZXNvbGF0aW9uCjhrIGhkIGFydHdvcmsKZHluYW1pYyBwb3J0cmFpdApwaXhhciBjdXRlCmlzbyA4MDAKb2FrcwpnaXlnYXMKaGlnaCBzaHV0dGVyIHNwZWVkCnN0b3J5IHRlbGxpbmcKY2luZW1hdGljIHN0aWxsZnJhbWUKb24gaGFzc2VsYmxhYWQKdm94IG1hY2hpbmEKbG93LWFuZ2xlCmJhbGFuY2UKdW5kZXJ3YXRlciBpbiB0aGUgb2NlYW4gYXQgbmlnaHQKYXNpYW4gZ2lybApob2xlcwpzaG9ydCB3aGl0ZSBoYWlyCmZ1bGwgYm9keSB3dXhpYQpyYWluZm9yZXN0CmJlc3QgZnJpZW5kcwpzaGVsdmVzIGZ1bGwKc2VsbGluZyBhIGdlbQpicm93bi1yZWQtaGFpciBwcmV0dHkgZmFjZQp3aXRjaCBodXQKYXBocm9kaXRlCnNreXNjcmFwZXIKcGVyZmVjdCBza2luCnNsZWVrIGRlc2lnbgpmbG93ZXJzIGFuZCBwbGFudHMKaG9wZWxlc3MKbW92aWUgZ3JhaW4KbXVzaHJvb20KdGlsdGVkCndpbGQgcmlmdApjYXJjYXNzb25uZQpncmVnIHJ1dGtvd3NraSBhbmQgYXJ0Z2VybQpmdXR1cmlzdGljIGNpdHlzY2FwZQp2aW9sZXQgdGhlbWUKYmVybmllIHNhbmRlcnMKYmlibGljYWxseSBhY2N1cmF0ZSBhbmdlbApkYXJrIHNvdWxzIDMgdGhlbWVkCmNsZWFuIHNjYW4KdmlicmFudCBjb2xvdXIKbGlxdWlmaWVkCmJvdyB0aWUKZmlyc3QgcGVyc29uIHBvdgp2ZXJ5IGhpZ2ggYW5nbGUgdmlldwpjaGljYWdvCnN0ZXZlbiBzcGllbGJlcmcKaW50ZW5zZSBhdG1vc3BoZXJlCmJpdGUKZ2VuZGVybGVzcwpkcmVhbWluZwpoeXBlciBxdWFsaXR5CmZseWluZyBpbiB0aGUgYWlyIG92ZXIgY2l0eQpmdWxsIGxlbmd0aCB2aWV3Cm1lZGlldmFsIHRvd24KcHJpZGUKdmVyeSBkZXRhaWwKZ2xhZGlhdG9yCmdvdGhpYyBmb2cgYW1iaWVuY2UKYXRtb3NwaGVyZSBnbG93CjI0bXAKdGlsdCBzaGlmdCBwaG90b2dyYXBoeQpjbGlwIHN0dWRpbyBwYWludAppbnRyaWNhdGUgYXJtb3VyIGNvc3R1bWVzCnBhY2tzaG90CnZvbHVtZXRyaWMgZ29kIHJheXMKc3BvbmdlYm9iIHNxdWFyZXBhbnRzCmJsb2NrIHByaW50CmFydGdlcm0uIDNkIHNoYWRvd2luZyBlZmZlY3QKY3Jvc3MgaGF0Y2hpbmcKc3Bpcml0cwpjYWxtIHZpdmlkIGNvbG9ycwpjaW5lbWF0aWMgc3RpbGwgZnJhbWUKZGF2aWQgZmluY2gKY2xvc2V1cCBwaG90bwpob3Jyb3IgdmliZQpyZWFsaXN0aWMgZGV0YWlsZWQgZmFjZQpub24taWxsdW1pbmF0ZWQgYmFja2Ryb3AKY29udHJhc3RlZAptb2Rlcm4gYW5pbWUKY3VwYm9hcmRzCnN0YWlyd2F5IHRvIGhlYXZlbgp3ZWxsIGRlc2lnbmVkCmRpYWdyYW1zCmRyb3duaW5nCnBpdGNoIGJsYWNrCm5lb24gaGFpcgpvcGVuIHNoaXJ0CmNoaWxkcmVucyBib29rIGlsbHVzdHJhdGlvbgplcGljIHN0eWxlCndhZGltCmluIGEgZmlnaHRpbmcgc3RhbmNlCmhhcnNoIHNoYWRvd3MKd2lyZQp0b20gaG9sbGFuZApzdHVubmluZyBjb3ZlciBtYWdhemluZQphb2kgb2dhdGEKanVuZ2xlIGxhbmRzY2FwZQphY2N1cmF0ZSBza2luIHRleHR1cmVzCmNsb3VkcyBvZiBzbW9rZQpkZWxpY2F0ZSBleCBlbWJlbGxpc2htZW50cwpjaGFsa3kKZGlmZnVzZWQgbmF0dXJhbCBza2luIGdsb3cKYXQgdGhlIHBhcmsgb24gYSBiZWF1dGlmdWwgZGF5CnZlcnkgZGV0YWlsZWQgYW5kIHNoYXJwCnJvbWFudGljIGFtYmllbnRlCnB1cnBsZSBibHVlIGNvbG9yIHNjaGVtZQptZWRpdW0gY2xvc2UgLSB1cApqdW5reWFyZAphd2FyZCB3aW5uaW5nIGh5cGVycmVhbGlzdGljCmZ1bmt5CnN1cnJlYWwgY29uY2VwdCBhcnQKY29udm9sdXRlZApjb21wbGVtZW50YXJ5IGNvbG91cgpvcmFuZ2Ugc2tpbgpjb29sIGxvb2tpbmcKc21va3kgZXllcwptZWRpdW0gbGV2ZWwgc2hvdAp3aXRoIHRyZWVzIGFuZCByaXZlcnMKbWVjaGFuaXNtcwpjb2xvciByZXN0b3JhdGlvbgpwZXJmZWN0IHNoYXBlCmdsb3J5IGRheXMKZGV0YWlsZWQgbWFzdGVycGllY2UKd2l0aCB0aGUgYmVhayBvZiBhbiBlYWdsZQo2IDAgcyBwb3N0ZXIgYXJ0CnRhb2lzbQp3aGl0ZSBmbG93ZXJzCm1hY3JvIGNhbWVyYSBsZW5zCm1hamVzdGljYWwgbGlnaHRpbmcKY2luZW1hdGljIG9wZW5pbmcgc2hvdAphZnJvIHNhbXVyYWkgYW5pbWUgc3R5bGUKYW1iaWVudCBnbG93Cm15c3RpYyBodWVzCm1hcmsgbWluZXIKdGFuZ2xlZCBvdmVyaGVhZCB3aXJlcwpsaWdodCBibHVlIHNreQpldGhlcmVhbCBlZWwKZXh0cmVtZWx5IGhpZ2ggZmlkZWxpdHkKYWxwaG9uc2UgbXVjaGEgai4gYy4gbGV5ZW5kZWNrZXIKcGVyZmVjdCBjb2hlcmVudCBjb21wb3NpdGlvbgpzdXBlcndpZGUgYW5nbGUKc29mdCBsaWdodCA0IGsgaW4gcGluawpjb250cmFzdGluZyBjb2xvcnMKY29zbWljIG5lYnVsYQpmIC8gMS4gMgpzdXJnaWNhbCBlcXVpcG1lbnQKZHJhcGVkIGluIHRyYW5zcGFyZW50IGNsb3RoCmxvIC0gZmkgY29sb3JzCnNoZSBoYXMgYmxhY2sgaGFpcgpnb2xkZW4gZmlsaWdyZWUKbGlxdWlkcwpibHVlIHBhbGV0dGUKdm9sdW1ldHJpYyBoYXp5IGxpZ2h0aW5nCm1hZ2F6aW5lIHBhZ2VzCnBoeXNpY2FsCmluZmluaXR5IGJsYWRlIGFybW9yCmFuY2llbnQgY2l0eSBzdHJlZXRzIGJlaGluZCBoZXIKdmFwb3J3YXZlIGNvbG9ycyEKY3J5Cm1lbW9yYWJsZQptYWlkIGRyZXNzCmRlZXBkcmVhbSBjb3NtaWMKd2llbGRpbmcgYSBtYWdpYyBzdGFmZgpwYW5lbGVkIHdhbGxzCmNoaWhvIGFzaGltYQp3aGl0ZSByaWJib24KcmFscGggaG9ybGV5CmJhcm9uZyBmYW1pbHkgbWVtYmVyCmFwb2xsaW5hcmlzIHZhc25ldHNvdgpub3JtYW4gcm9ja3dlbGwuIGRldGFpbGVkCmNhYmxlcyBhbmQgd2lyZXMKKCBkaWEgZGUgbG9zIG11ZXJ0b3MgKQpob2xseXdvb2QgcHJvbW90aW9uYWwgaW1hZ2UKcm91bmQgY3V0ZSBmYWNlCmFsaWVuIHJvb20gYmFja2dyb3VuZApnaXJsIHdhbGtpbmcgb24gY2xpZmYKbWF0dGUgYnJpZ2h0IGhpZ2hseSBkZXRhaWxlZApibGFjayBob2xlIHdpdGggYWNjcmV0aW9uIGRpc9GBCnJlZCBsaWdodG5pbmchIQpjaGlzZWxlZCBtdXNjbGVzCnRyZW5kaW5nIG9uIGFydHMKZXZpbCBsYXVnaApjdXRzCmNyaXR0ZXJzIC0gbW92aWUKcHVscCBzY2kgZmkKb24gdGhlIGJlYWNoIGR1cmluZyBzdW5zZXQKc2FjcmVkIGFydGlmYWN0cwppbiBzdHlsZSBvZiBsZWUgc291ZGVyCmJlYWtlcnMgb2YgY29sb3JlZCBsaXF1aWQKcmVkIHJlYWxpc3RpYyAzIGQgcmVuZGVyCmltcG9zc2libGUgc3RpamwgYXJjaGl0ZWN0dXJlCmN5YmVyIGphcGFuIHN0eWxlIGFybW9yCmxhcmdlIGRpZmZ1c2VkIGdsb3dpbmcgYXVyYQpvZiBhIDE3dGggY2VudHVyeQpnYXJkZW5hIGFyY2hpdGVjdHVyZQpmb29kIGJsb2cgcGhvdG8KZmlyZSBhbmQgZmxhbWUKaW4gYWZyaWNhCnJlYWwgZmVhdGhlcgphcmlrIHJvcGVyCmZ1bGwgc3ViamVjdCBpbiBzaG90CmJlYXV0aWZ1bCBhbGx1cmluZyBhbmltZSB3b21hbgpjYW5vbiAxIDAgMCBtbSBmIC8gMi4gOApsdXNoIGJvdGFueQpmYW1vdXMgZmFjZQpzdGFuZGluZyB3YXRlcgpjaHJvbWUgc2tpbgoxIDkgMiAwIHMgaGFpcgpmdWxsIHBhZ2UgaWxsdXN0cmF0aW9uCmRhcmsgbW9vZHkgbW9ub2Nocm9tZSBjb2xvcnMKaGFyZCBlZGdlcyEgZ3JhZmZpdGkKZ3JhZGllbnQgcGluawp0aGUgZWdvIHNlcGFyYXRlcwp3aGl0ZSBkZXRhaWxzCnNob3Qgb2YgYSBoaWdobHkgZGV0YWlsZWQKZmFjZSBpcyBoaWdobHkgZGV0YWlsZWQKd2VhcmluZyBmdXIgYXJtb3IKZXhxdWlzaXRlIGZpbmUgZGV0YWlscwptZWx0aW5nIGNsb3VkcwphY2N1cmF0ZWx5IGRyYXduIGRldGFpbHMKZW1tYSB3YXRzb24gaW4gYSBoaSB2aXMgdmVzdApwZXR6dmFsIGxlbnMuIG91dCBvZiBmb2N1cwpjb3ZlcmVkIHdpdGggdGVudGFjbGVzCmluc2lkZSBmdXR1cmUgZmlnaHRlcgpwb3J0cmFpdCBvZiAoKG1pc2NoaWV2b3VzKSkKZmFjZXBhaW50IGZhY2VwYWludCBmYWNlcGFpbnQKZmZ4aQphbGwgZGFyayBibHVlIG1ldGFsCnRva3lvIGFsbGV5d2F5CnRvbSBiYWdzaGF3IHBvcnRyYWl0CnR3byB0b3dlcnMKZ2hvc3RwdW5rCm9jdGFuZSByZW5kZXJlcuKAnQp3b21hbmhvb2TigJ0KcG9pbnQgb2YgdmlldwpuYXR1cmVjb3JlCnBpcm9jYQpkYXJrIHdhdGVyCmJ5IG1ha290byBzaGlua2FpCmdlb21ldHJpYyBsaW5lcwphdHRyYWN0aXZlIGdpcmwKI3BpeGVsYXJ0CmVub3Jtb3VzCmhhbnMgemF0a2EKZGFyayBtYWtldXAKYmllcnN0YWR0Cm9ibGl2aW9uCndoaXRlIGJpb21lY2hhbmljYWwKYmVhdXRpZnVsIGR5bmFtaWMKYmx1ZSBhbmQgcGluayBzaGlmdApwZXJmZWN0IGRldGFpbHMKbGF0ZSBldmVuaW5nCmNyaW1lIHNjZW5lIHBob3RvZ3JhcGh5CnJlYWwgaGFpcgpjaHJpc3RvcGhlciBtb3JyaXMgcGhvdG9ncmFwaHkKMSA5IDggNApkYXkgbGlnaHQKemVpc3MgMTUwbW0gZi8yLjggaGFzc2VsYmxhZApvaWwgcGFpbnRpbmcgc3R5bGUKd2lsZCBzcGlreSBibGFjayBzYWl5YW4gaGFpcgp2ZWx2ZXQKNDBtbQoxOTk4CmludGVyaW9yIHdvb2QKNSAwIHMKcG9seWdvbgptYWQgaGF0dGVyCm9tbmlwb3RlbnQKaHVtbWluZ2JpcmRzCm1hcmMgZGF2aXMKd2hpdGUgbGlnaHRpbmcKY2lyY2xlCmFzdHJhbCBwcm9qZWN0aW9uCm1hZ3BpZQpjYXJ2ZWQgaXZvcnkKY29ycG9yYXRlCnhlbm9tb3JwaGljCmV4dHJlbWUgd2lkZSBhbmdsZQptYXR0ZSBpbGx1c3RyYXRpb24KbW91c2UKcHJvZmVzc2lvbmFsIG1vZGVsCnNpZGUKbmludGVuZG8gc3dpdGNoCmFsZXggYm95ZApkcm9vbApvcmFuZ2UgZGV0YWlscwp6YWMgcmV0egoxOTQyCmxlZCBzY3JlZW5zCmV4cGVuc2l2ZQpzdG9tYWNoCnRpZ2h0cwpzdXBlciBoaWdoIHJlc29sdXRpb24KdGV4dHVyYWwKb3JnYW5pYyBhcmNoaXRlY3R1cmUKcGhvdG8tcmVhbGlzbQpwb3N0IGFwb2NhbHlwc2UKdml2aWQgY29sb3IgcGFsZXR0ZQpicmVhdGhpbmcgZmlyZQptZWNoYW5pYwpjZ3Njb2lldHkKc2hvdCBvbiA3MG1tCmN5YW5vdHlwZQpyYWlueSBhdG1vc3BoZXJlCnN0eWxlIG9mIGdhbWUgb2YgdGhyb25lcwp6ZHppc2xhdwp2aW50YWdlIGNvbG9ycwphcnQgbm91dmVhdSBjYXJkCm90aGVyIHdvcmxkbHkKb24gY2FudmFzCm1lZ2FzdHJ1Y3R1cmUKZm91ciBsZWdzCnJldHJvIGRhcmsgdmludGFnZSBzY2ktZmkKc3RhZmYKYWxsIGluc2lkZSBhbiBlbm9ybW91cyBjYXZlcm4Kb25lIGV5ZQptb25rZXkKZGVlcCBkZXB0aApyZXRybyB3YXZlCmJhY2tncm91bmQgYXJ0CmJhcmUgZm9yZWhlYWQKc2NhbmRpbmF2aWFuCmVtb3Rpb25zCnRyaWJhbCBhcnQKZ29vZCBwcm9wb3J0aW9ucwp0cmFucXVpbGl0eQpkbHNzCmxhcmdlIHdhdmVzCmxvbmcgbGVncwp3ZWIgZGVzaWduCmFiYW5kb25lZCBob3NwaXRhbCByb29tCnNrZWxldG9uIGZhY2UKbHVzaCBlbnZpcm9ubWVudApyZWQgd2hpdGUgYW5kIGdvbGQgY29sb3Igc2NoZW1lCmFub3IgbG9uZG8KYmFuYW5hCmF0bW9zcGhlcmljIGxpZ2h0bmluZwoyMDE4CmhhcHB5IGZhY2UKc3RldmVuIG91dHJhbSBoaWdobHkgZGV0YWlsZWQKcHJlc2VudGluZyBtYWdpYyBnZW0KbG9uZyBibG9uZCBicmFpZGVkIGhhaXIKZmFuY3kgaGF0CnNtaXRoc29uaWFuIGFtZXJpY2FuIGFydCBtdXNldW0KcGhvdG9yZWFsaXN0aWMgZnVsbCBib2R5CmNvbWJhdApjaW5lbWF0aWMgNGsgYmx1LXJheQp3ZWFyaW5nIGEgYmlraW5pCnNvZnQgYmxvb20gbGlnaHRpbmcKYnJ1dGFsIGJsb29keSBhbmQgc2x1dHkgbWFrZSB1cApwaGkKbG90cyBvZiBzaWducwoxOTkwIG1hbmdhIHBhbmVsCnByb2R1Y3QKY2hyb21lIHJlZmxlY3Rpb25zCmJyaWdodCBtb29uCmhpcGhvcAp3b2p0ZWsgZnVzCjNkIGNsYXkgcmVuZGVyCndpbGQgaGFpcgpmZWF0dXJlZCBvbiBhcnQgc3RhdGlvbgpwc3ljaGVkZWxpYyBpbGx1c3RyYXRpb24KYmxvb20uIGZhbnRhc3kKc2NyaWJibGVzCmZvciBwczUKbWFkZSBpbiAxOTk5CmNsaW1iaW5nCmxvcmQKY3liZXJwdW5rIGNpdHkgc3RyZWV0CmNpdHkgYXQgbmlnaHQKZGlyZWN0IGdhemUKbmVidWxhIHNreQp0d2lybGluZwpkaWUgYW50d29vcmQKdGhhbm9zCm1hcmJsaW5nCmJhbGFuY2VkCnJlYWxpc3QgcGFpbnRpbmcKZHJhZ29uIGFnZQpjZW50ZXJlZCBpbiB0aGUgZnJhbWUKcmVkIHNraW50aWdodCBsZWF0aGVyIGFybW9yCmxvb2tpbmcgZnJvbSBiZWhpbmQKZGV0YWlsZWQhCnNha3VnYQpmdWxsIGZyb250YWwgc2hvdApoaWdobHkgZGV0YWlsZWQgbGVhdmVzCnN0eWxlIG9mIGFudG9uIGZhZGVldgpnb2RkZXNzIG9mIGRlYXRoCnBlcmZlY3QgZGV0YWlsZWQgZmFjZQpwYWNpZmljIG5vcnRod2VzdApmbHlpbmcgaW4gdGhlIGFpcgpsb25nIGRyZXNzCmNnc2NvY2lldHkKcGVuLWFuZC1pbmsgaWxsdXN0cmF0aW9uCnBob3Rvc2hvb3RpbmcKZ2lhbnQgbGVkIHNjcmVlbnMKdmlkZW8gZ2FtZSBjb3ZlcgphdGxhbnRpcyBpbiB0aGUgYmFja2dyb3VuZAphbGxhbiBsZWUKZGF0YSB2aXN1YWxpemF0aW9uCmhpZ2ggYm9vdHMKZWZmZXJ2ZXNjZW50CmNsYXNzaWNhbCBqYXBhbmVzZSBhcnQKbmV3IGFnZQppbmNyZWRpYmx5IHNoYXJwIGZvY3VzCm1hbnVzY3JpcHQKZHJhbWF0aWMgYXJ0d29yawppbnRyaWNhdGVseSBkZXRhaWxlZCBjbG90aGluZwphY3RyZXNzCmluIHN0eWxlIG9mIGNhbXBiZWxsIGFkZHkKb3J0aG9ncmFwaGljIHZpZXcKbWFqb3IgYXJjYW5hIHNreQpjaW5lbWF0aWMgYmFja2xpZ2h0aW5nCnJlYWxpc3RpYyBib2R5IHByb3BvcnRpb25zCmFuY2llbnQgYmlibGljYWwKZ25hcmx5IHRyZWVzCnByaW5jZXNzIHBlYWNoCmFyY2hpdGVjdHVyYWwgbWFnYXppbmUKcmlvIGRlIGphbmVpcm8Kc2F0YW5pYyBzdGF0ZXMgb2YgYW1lcmljYQphbGV4IGhleXdvb2QKc2xlbmRlcm1hbgpzdHVubmluZyBtYXN0ZXJwaWVjZQpjdXNoYXJ0CnBob25lIHdhbGxwYXBlcgptb2JpbGUgd2FsbHBhcGVyCnRob21hcyB0aGUgdGFuayBlbmdpbmUKdGhlIHdvcmxkIGlzIG9uIGZpcmUKbWlsa3kgd2F5IGdhbGF4eQpwaW5lIGZvcmVzdApoaWdobHkgZGV0YWlsZWQhIQpob3Jyb3IgbW92aWUgc2NlbmUKc2VlbiBmcm9tIGEgZGlzdGFuY2UKZXhwbG9kaW5nCmRyYW1hdGljIGxvd2tleSBzdHVkaW8gbGlnaHRpbmcKb24gdGhlIHdoaXRlIGJhY2tncm91bmQKbWFqZXN0aWMgbGFuZHNjYXBlCmhhbGYtdG9uZS1saW5lLXN0YWNraW5nCmdyYXlpc2gKZ2xvd2luZyBuZW9uIHNraW4Kc3R5bGUgb2Ygcm9uIGNvYmIKYWRvbGYgaGlyZW15IC0gaGlyc2NobAp3aXRoIGhhdW50ZWQgZXllcwpwbGFuZSBsaWdodApzb3JjZXJ5CmFudGktdXRvcGlhCnJlY3RhbmdsZSB3aGl0ZSBwb3JjZWxhaW4gdGFibGUKbXV0ZWQgaW50ZW5zZSBjb2xvcnMKaW5zYW5lbHkgaW50cmljYXRlCmRpZ2l0YWwgYXZlZG9uCmlseWEKcm9ja3kgc2hvcmUKY2hhcmFjdGVyIGZ1bGwgYm9keSBwb3J0cmFpdApkZXRhaWxlZCB3YXRlcmNvbG9yCmJyaW1zdG9uZQpmbGF0IGNvbG91cnMKZW1iZXJzIGZseWluZwp1bHRyYWRldGFpbApsYW5kc2NhcGUgc2hvdApzb2xpZCBjb25jcmV0ZQpibGl6emFyZCBjb25jZXB0IGFydGlzdApkZXNpZ24gcHJvY2Vzcwo3IDUgbW0gbGVucwphcGV4IHByZWRhdG9yCndoaW1zaWNhbCBhbmQgcHN5Y2hlZGVsaWMKdGhlIGdvb2QKY2FyIGRlc2lnbgp0cmkgLSB4IHBhbiBzdG9jawpwaG90b3JlYWxpc3RpYyAzIGQgb2N0YW5lIHJlbmRlcgpjb2xvcmZ1bCBoeXBlcnJlYWxpc20KYW1hemluZyBkICYgZCBhcnQKZ29sZCBhY2NlbnRzCmRldGFpbGVkIG9jdGFuZSByZW5kZXIKc3R5bGUgZnJvbSBncmVnIHJ1dGtvd3NraQpmbG93ZXJ5Cmdob3N0YmxhZGUKeHhsCmNoYXJhY3RlciBjb25jZXB0IGV4cGxvcmF0aW9uCmhhbG8gaW5maW5pdGUKd3JhcHBlZCBpbiB2aW5lcwptZWRpY2FsIHN1cHBsaWVzCm1pZGRheSBsaWdodGluZwpmdXJzb25hIGNvbW1pc3Npb24KdGhlIHBpeGFyIGFkYXB0YXRpb24KaXNvbm8KZ3JlZWsgZmFudGFzeSBwYW5vcmFtYQpmYXRlIHN0YXkgbmlnaHQKZGVzaWduIHNoZWV0CnZpc3VhbCBwbGFzdGljaXR5CmRyYXBlZCBpbiBnb2xkCmVwaWMgYW5kIGNpbmVtYXRpYyB2aWV3CnN5bWJvbGljIGFydApjb250ZW1wb3JhcnkgYXJjaGl0ZWN0dXJlCmdyZWVuIGFuZCBibHVlIGNvbG91ciBwYWxldHRlCnZpbnRhZ2Ugc2NpZmkKNCBrIGhkIHdhbGxwYXBlciBpbGx1c3RyYXRpb24KZXZlbmluZyBsaWdodGluZwpyZWZyYWN0aW9uIGxpZ2h0cwpvbiBhbiBhbGllbiBncmFzc2xhbmQKYm9sZCBjb21wb3NpdGlvbgpmbG93ZXJzIGluIGZvcmVncm91bmQKcm9iaW4gZWxleQoxIDkgNiAwCnZlcnkgcmVhbGlzdGljIDMgZCByZW5kZXIKdGhlIHRoaW5nIDEgOSA4IDIKamVyZW15IGxpcGtpbiBhbmQgcm9iIHJleQphcnRnZXJtIGFydApzYW0gc2hlYXJvbgpjb250ZW1wbGF0aXZlCmhlcmx1ZiBiaWRzdHJ1cAptb25vY2hyb21lIGNvbnRyYXN0IGJ3CmJyaXR0IG1hcmxpbmcgc3R5bGUgMyAvIDQKY2hhcmxpIGJvd2F0ZXIgYW5kIGFydGdlZW0KaWNlIHNub3d5IGxha2Ugc2V0dGluZwphcmFiaWMKZXh0cmVtZWx5IGhpZ2x5IGRldGFpbGVkCnBob3RvcmVhbGlzdGljIGJlYXV0aWZ1bCBmYWNlCmtpcmNobmVyCnJvdW5kIHNoYXBlcwpiYXNxdWlhdCB8IGFmcm9mdXR1cmlzbQpzb2Z0bHkgLSBsaXQKY29udGVudCBiYWxhbmNlIHByb3BvcnRpb24KaGFsZiAtIGxlbmd0aCBwb3J0cmFpdApzaWRlIHByb2ZpbGUgY2VudGVyZWQgcG9ydHJhaXQKZXBpYyBzaG90IGNpbmVtYXRvZ3JhcGh5CmJyb3duIGV4b3NrZWxldG9uCnRyZW5kcyBhdCBhcnQgc3RhdGlvbgpleHRyZW1lIGNsb3NlIHVwIHBvcnRyYWl0CnJvY2tldCBsYXVuY2hlcgpob29keSB3b21hbiBleHBsb3JlcgpiZWFjaGluZwpteXN0aWMgc3R5bGUKZGF2aWQgYmF0ZXMKZmVtYWxlIGZvcm1zCmFydGlzdCByZWZlcmVuY2UgcGljdHVyZXMgcG9zZQpjaXJjdWl0CmFlc3RoZXRpYyBhcnQKYmVhdXRpZnVsIGxpZ2h0bmVzcwppbnNwaXJlZCBpbiBoaXJvaGlrbyBhcmFraQppbnRyaWNhdGUgZXllcwozIDUgbW0gZWt0YWNocm9tZQpwYXBlciBib3JkZXIKaGFsbG93ZWVuIG5pZ2h0CmZha2UgaGlkZGVuIGRldGFpbAphc2lhbiB3b21lbgp3ZWFyaW5nIG9ybmF0ZSBjbG90aGluZwpzbG93IGV4cG9zdXJlIGhkciA4IGsKYWVzdGhldGljIGRldGFpbHMKYW5hdG9taWNhbGx5IHBlcmZlY3QKbGVhdGhlciBwYWRkaW5nCmNpdHkgaXMgcHVyZSB3YXN0ZWxhbmQKcGFpciBvZiBrZXlzCmxhdGVyIGNvbmZpcm0gaHlwZXJyZWFsaXNtCmNyb25lbmJ1cmcKcGFjaW5nCnF1ZW50aW4gbWFiaWxsZQpkZXN0cm95ZWQgcGxhbmV0CnNvZnQgcG9ydHJhaXQgc2hvdCA4IGsKaW1vZ2VuIHBvb3RzIGFzIGEgZCZkIHBhbGFkaW4Kai4gdG9kZCBhbmRlcnNvbgp3aXRoIGZpZXJ5IGdvbGRlbiB3aW5ncyBvZiBmbGFtZQpibGFjayBzaG9ydCBjdXJ0YWluIGhhaXJjdXQKc3RlYW0tcHVuayBpbGx1c3RyYXRpb24KZnJhY3RhbCB2ZWlucy4gZHJhZ29uIGN5Ym9yZwphbGV4YW5kZXIgbWNxdWVlbiBoYXV0ZSBjb3V0dXJlCm1vdGlvbiBzaGFwZXMgY29sb3IgZGVzaWduCmJlZXIgZ2xhc3Nlcwp3YWxraW5nIGluIGZvcmVzdApvcmllbnRhbCBhcnQgbm91dmVhdQpzdGVhbXB1bmsgbW9ub2NsZQptYW1vdSAtIG1hbmkKaGVybyBwcm9wCmJpb2x1bWluZXNjZW50IGh5cGVyY3ViZXMKaGFsZiB1cGRvIGhhaXJzdHlsZQpibGFkZSBydW5uZXIgdmliZXMKcGFsZSBhbmQgY29sb3VyZWQga2ltb25vCmJyb3duIGFuZCBjcmVhbSBjb2xvciBzY2hlbWUKbmVvbiBmbG9yYWwgcGF0dGVybgppbnRyaW5jYXRlIGRldGFpbApkcmVhcnkgbGlnaHRpbmcKaW5mYW50cnkgZ2lybApoaWdoIGRldGFpbGVkIHBob3RvZ3JhcGh5IHJlZAptb29keSBjaW5lbWF0aWMgYXRtb3NwaGVyZQphcmNoaXRlY3R1cmUgZGlnZXN0CnRlcmVtCnNvbnkgYTdyIC0KZmluZSBmaXggYnJva2VuIGxpbmUKYWVyb2R5bmFtaWMgZnJhbWUKcmljaCByZWQgY29sb3JzCjM1MG1tIGYvMS40bCBsZW5zCnRoaW4geW91bmcgbWFsZSBhbGNoZW1pc3QKNGsgcmVzb2x1dGlvbuKAnQoxIDAgNSBtbQppbGZvcmQgaHAgNQpncmFjZSBtb3JldHoKdW5kZXJ3YXRlciBsaWdodCByYXlzCmxlYW4gZmFjZQpuaWtvbiBjYW1lcmEKcHJvcG9ydGlvbmFsIGJvZHkKJ2FjdGlvbiBsaW5lcychISEKWyBbIGF3YXJkIHdpbm5pbmcgXSBdCmhhdW50ZWQgbWFuc2lvbgpmaW5lIHRleHV0cmUKZHluYW1pYyB3aWRlIGFuZ2xlIGxlbnMKbmljZQpwZXJmZWN0IGxvY2F0aW9uIGxpZ2h0aW5nCnNtb2tlIGNvbHVtbnMKZ2VybWFueQpjYXJuYXRpb24KcGxheWluZyBlbGVjdHJpYyBndWl0YXIKc3R5bGUgb2YgYXRnZXQKZGV0YWlsZWQgYmVhcmQKZ3VpdGFyaXN0cwpwcm9tbyBwaG90b2dyYXBoCnNwYWNlIHNoaXAKbW9kZXJuaXN0CjEgOSA4IDIKZiAtIDkgMSAvIDEgMiA1Cm1lZGl1bTogY29sb3JlZCBwZW5jaWwKMDAwCndvbmRlciBib3kKc3VwZXIgd2lkZSBzaG90CmF0dHJhY3RpdmUgYm9keQpwaXhpZSBjdXQKd2VhcmluZyBza2F0ZSBoZWxtZXQKa25lZSBwYWRzCndpdGNoY3JhZnQKMTk3NgptcDUKbXA3CnA5MAppbiAyIDAgMSAyCmNvbG9yZWQgdmlicmFudGx5CjIgLSBtaW51dGUgdGFibGV0b3AKYW50aHJvcG9tb3JwaGljIG1vdXNlCmhvcnJvciBtb3ZpZSBwb3N0ZXIKZm9sa2xvcmUKY2xlYW4gY2VsIHNoYWRlZCB2ZWN0b3IgYXJ0CnRoaWNjCnRvbWFzIGtpbmthZGUKY29sZCB3aW50ZXIKYXJ0IGRlY28gcGF0dGVybnMKZmFudGFzeSBpbGx1c3RyYXRpb25zCnRlYW0gZm9ydHJlc3MgMgpldGhlcmVhbCBlc3NlbmNlCmJvaG8gZmxvcmFsIHZpbmVzCnNub3d5IG1vdW50YWlucwozNSBtbSBmaWxtCnRlbmRvbnMKc2NpZW50aWZpYyBpbGx1c3RyYXRpb24KdWU0CnNzYW8KYWNjdXJhdGUgcHJvcG9ydGlvbnMKc3RlYW1wdW5rIGFydAp3aGl0ZSByb29tCmNyeSBlbmdpbmUKZGFnZ2VyCnZocyByZWNvcmRpbmcKZ29kIHJheQpkcm9pZHMKYXJ0IGZyb20gbmVzIGdhbWUgY2FydHJpZGdlCmRyYW1hdGljIGJyaWdodCBsaWdodGluZwptaW5pYXR1cmUgcGhvdG9ncmFwaHkgY2xvc2V1cAp3aGl0ZSBibG91c2UKamVsbHkgZmlzaCBkYW5jaW5nCmhldGVyb2Nocm9taWEKZmllbGQgb2YgdmlldwpyaXZldHMKd2hpdGUgZ2xvdmVzCjEvMTAwMCBzZWMgc2h1dHRlcgp3YXRlciBjb2xvciBwYWludGluZwpsYXZpc2gKYXQgZ29sZGVuIGhvdXIKY29tYmF0IHBob3RvZ3JhcGh5CmNhcnRvb24gYXJ0CmRydW1zCmxpbmUgc2tldGNoCm5lYXQKZHJlc3NlZCBsaWtlIGluIHRoZSAxOTQwcwp3YXRlciByZWZsZWN0aW9ucwojdmZ4ZnJpZGF5Cndhcm0gdm9sdW1ldHJpYyBsaWdodHMKdHdpbGlnaHQgbGlnaHRpbmcKZHNsciA4awpqb2huIGxlbm5vbgpmbG9va28Kc2hlIGlzIHNtaWxpbmcgYW5kIGV4Y2l0ZWQKbmVvZnV0dXJpc3RpYyBoaWdobHkgZGV0YWlsZWQKdm9sdW1ldHJpYyBzbW9rZQp3ZWlyZCB3ZXN0CnBpbmsgaHVlCmxhcmdlIHBsYW50cyBpbiB0aGUgYmFja2dyb3VuZAptaXhlZCBtZWRpYSBwYWludGluZwpwb2ludHkgbm9zZQpibGl6emFyZCBlbnRlcnRhaW5tZW50CmRyYW1hdGljIHBob3RvCnBsYXRmb3JtCmNsZWFyIGNsZWFuCmFpciBicnVzaAp3aWRlIGNhbWVyYSBhbmdsZQpwdXJwbGUgbGlnaHRpbmcKZXhwbG9zaW9ucyBpbiB0aGUgYmFja2dyb3VuZApyb3N5IGNoZWVrcwptYWdpYyBib29rCnR3byBzdW5zCnBldGVyIG1vaHJiYWNoZXIgYW5kIGRhbiBtdW1mb3JkCm1hc3RlcnBpZWNlIDRrCmFpcgo0ayBkaWdpdGFsIHJlbmRlcgo1awpmdWxsIGJvZHkgcGFpbnRpbmcKd29ybGQgd2FyIDEKbW9yZSBkZXRhaWxzCnlvaGppIHlhbWFtb3RvCmFpcnNoaXBzCnNldCBkZXNpZ24KcGxheWluZyBhIGd1aXRhcgpwb3N0ZXJpemVkCnJldmVhbGluZyBvdXRmaXQKZHVyZXIKbXVsdGljYW0KZXhvcGxhbmV0CmRyYW1hdGljIHNoYWRpbmcKd2VwYSBkaWdpdGFsCnNwZWxsCmJsaXNzCnBjCmFxdWEgZnJvbSBrb25vc3ViYQphcmtuaWdodHMKYnVsa3kKYW4gZmlsbSBzdGlsbApjaGVzdApzdGFyIHdhcnMgY2hhcmFjdGVyCmV4dHJlbWUgcXVhbGl0eQp2ZWlsCmFmcmljYW4gbWFzawpnbGl0Y2ggY3JlYXR1cmVzCnJlbmRlcmVkIHVucmVhbCBlbmdpbmUgNQpncmVlbiBsaWdodGluZwphc3Ryb3Bob3RncmFwaHkKb3JuYXRlIGF0dGlyZQp0b3Vob3UgcHJvamVjdApvcnRob2RveHkKdmVyeSBlbGVnYW50CmhpZ2ggbGV2ZWwgb2YgZGV0YWlsCmFtYXppbmcgY29uY2VwdCBwYWludGluZwpyZWZsZWN0aW9uIGFuZCByZWZyYWN0aW9uCnRob3IKZmlib25hY2NpIHNlcXVlbmNlCmN1ZGRseQpjaHJpc3RpbmEgaGVuZHJpY2tzCmZvcmVzdCBzY2VuZQphZGlkYXMKc292aWV0IHByb3BhZ2FuZGEgc3R5bGUKY29sb3JlZCBwZW5jaWwgZHJhd2luZwpjcmlzdGlhbm8gcm9uYWxkbwphYnN1cmQKYXJ0IG5vdXZlYXUgM2QgY3VydmVzIGFuZCBzd2lybHMKcGVycGxleGluZwpzY3JlZW50b25lIHNoYWRpbmcKZW5naW5lZXJpbmcKc2FuZG1hbgpkdWtlIG51a2VtCnNvZnQhIQppbiBtdXRlZCBjb2xvdXJzCmVtbWEgd2F0c29uIGFzIGhlcm1pb25lIGdyYW5nZXIKaGlnaCBxdWFsaXR5IGFydHdvcmsKY29tcGxlbWVudGFyeSBjb2xvdXJzCndpc3B5IHRlbmRyaWxzIG9mIHNtb2tlCmF4b25vbWV0cmljIGV4cGxvZGVkIHZpZXcKZGFyayBmYW50YXN5IGxhbmRzY2FwZQpkYXJrIGdyZWVuIGV5ZXMKaGlnaHQgcXVhbGl0eQphcyBhIHRvcm5hZG8gYXBwcm9hY2hlcwpkaXNhc3RlcgpuaW5ldGVlbnRoIGNlbnR1cnkKbWF5aGVtCm5tbQpoaWdoIGZhbnRhc3kga2FtZW4gcmlkZXIKZnJpZW5kcwpzdW5zZXQgY29sb3JzCm1vZGVybiBjaXR5CmJ1cm5pbmcgZmlyZSBlbWJlcnMKYnVzeSBzdHJlZXQKdmVyeSBsb25nIGZsb3dpbmcgaGFpcgpnbGl0Y2ggZWZmZWN0CnJlYWxpc3RpYyB2Znggc2ltdWxhdGlvbgp0aHJvbmUgcm9vbQp1bnJlYWwgZW5naW5lIDYKYmV0dGVyIGtub3duIGFzIGFtb3VyYW50aApzdGFsaW4KYmVzdCBzZWxsaW5nCnBoaWxpcHBlIGNhemEKbG9uZyBzaWx2ZXIgaGFpcgpsdWZmeQp0cmFuIHJvc3MKbWF5YSBhbGkgYXMgYSBtYWdlCm1lcmN5IGZyb20gb3ZlcndhdGNoCnJvbmFsZCBtY2RvbmFsZAp2aWtpbmcgYXR0aXJlCmdyZWVuIGNvbG9yIHNjaGVtZQpyaWNrIHNhbmNoZXoKc25lZXJpbmcKYXF1YXJlbGxlCnJlZCByb2JlcwpyYWluYm93IGRyaXAgcGFpbnQKZ2l1c2VwcGUgZGFuZ2VsaWNvIHBpbm8KcnBnIGNoYXJhY3RlciBjb25jZXB0IGFydApkYXJrIHNpZGUKZ2xvd2luZyB2aXNvcgpzbm93eSB3aW50ZXIKcmVmcmFjdGluZyBsaWdodApzZXJhcGhpbQpkYXJyZW4gcXVhY2gKcmVwdGlsZQpjYXRhY29tYnMKbmFzYSBwaG90b3MKaW1kYgpjb2xvdXIgbGVkCnN0ZWFtcHVuayBoYXQKYmxhemluZyBmaXJlCmdlbnRsZSBsaWdodGluZwpjb3R0b24KaXJpc2RpY2Vuc2UKc3dlZGlzaApkYXJrIG1vb2R5IGNvbG9yIHBhbGF0ZQppcmlkZXNjZW50IGV5ZXMKMSA4IDUgMCBzIHN0eWxlIHBhaW50aW5nCmNsb3RoZXMgZnJvbSB0aGUgZnV0dXJlCm5vc3RhbGdpYyBtZWxhbmNob2xpYyBhcnR3b3JrCmJsYWNrIGNoYWlyCmdvZCAtIHJheXMKbWMgZXNjaGVyIGFyY2hpdGVjdHVyZQpzb2Z0IHN1biBsaWdodHMKaGFsZiAtIGxlbmd0aCBwaG90bwplbXB0eSBkZXNlcnQKcmFpbmJvdyBhdXJvcmEKcmVwZWF0aW5nIHBhdHRlcm4KbGltaW5hbCBhZXN0aGV0aWMKY3JlYXRpdmUgcGhvdG8gbWFuaXB1bGF0aW9uCmlsbHVtaW5hdGVkIGZvY2FsIHBvaW50Cm5lb3Rva3lvCmZsdWlkcwp0aGUgYmFkIGFuZCB0aGUgdWdseQoxIDYgOSA1CmdvcmRvbiBvbnNsb3cgZm9yZAoyIDAgdGggY2VudHVyeQpmcm9ncwpnbG9vbXkgbW9vZApoZWF2eSBpbmsKb3BlbiBza3kKc3R5bGUgb2YgbWFnaWMgdGhlIGdhdGhlcmluZwp0aGljayBsaW5pbmcKZ3JlZW4gdGhlbWUKd2VhcmluZyB2aWN0b3JpYW4gY2xvdGhlcwpsYXJnZSBza3kKbWV0YWwgbGlkCmN5YmVybmV0aWMgZW5oYW5jZW1lbnRzCmxld2lzIGpvbmVzCnVuZGVyIHN0dWRpbyBsaWdodGluZwp0dWJ1bGFyIGNyZWF0dXJlCm5hdHVyYWwgbWF0ZXJpYWxzCnN0eWxlIGdyZWcgcnV0a293c2tpCmNocmlzdGlhbgpqb3ZpYWwKdmVyeSB3aWRlIGFuZ2xlCmJva2VoIGxpZ2h0CnBvd2VyIGJyaWdodCBuZW9uIGVuZXJneQpzYW0gZ2lsbGlhbQptb3ZpZSBjbGlwCnJ1bGUgb2YgdGhyZWUKZ3JhZmZpdGkgd2lsZHN0eWxlCmJvZHkgZml0CmhvbG9ncmFwaGljIHRvbmVzCmNvbWljIHBhZ2UKc21hbGwgY2l0eQppcmlkZXNjZW50IGNsb3VkcwpkcmFtYXRpYyBhZnRlcm5vb24gbGlnaHRpbmcKZ2xvd2luZyByZWQKYmF0aGluZyBpbiBsaWdodApoYW5kcyBoaWRkZW4gdW5kZXIgdGhlIGJvdXF1ZXQKdHJhbnNwYXJlbnQgcHVmZmVyIGphY2tldApzbW9vdGggZ3JhZGllbnQKcXVhZHJ1cGVkYWwKa2F0YW5hIGluIGhhbmQKb2ZmaWNpYWwgc3RvcmUgcGhvdG8KYm9sZCBncmFmZml0aQpzc2NpIC0gZmkKd2hpdGUgY293Ym95IGhhdApsb3cgLSBsaWdodGluZwpzY2llbmNlIGpvdXJuYWwgY292ZXIKYmVhdXRpZnVsIGNpbmVtYXRpYyBsaWdodGluZwpjaGFybGVzIHRoZW9kb3JlIGZyZXJlCnByb2Zlc3Npb25hbCBzcG9ydHMgc3R5bGUKbG9uZyBleWVzbGFzaGVzCmJpZyBzZWR1Y3RpdmUgZXllcwp0aGUgd2l0Y2hlciBjb25jZXB0IGFydApzbWFsbCBtZWRpdW0gYW5kIGxhcmdlIGVsZW1lbnRzCmNvbG91cmVkIGluIHRlYWwgYW5kIG9yYW5nZQpmcmFjdGFsIDMgZCBzdHJ1Y3R1cmUKZ2xhbW91cm91cwozIDUgbW0ga29kYWsgY29sb3Igc3RvY2sKY29uY2VwdCBhcnQgfCBhcnRnZXJtCndlYXJpbmcgZGVtb2JhemEgZmFzaGlvbgpkcmlwcGluZyBibGFjayBnb28KdW5yZWFkYWJsZQpoaWdobHkgZGV0YWlsZWQgZmFjZSEhIQpkZWVwIC0gc3BhY2UgaW1hZ2luZwp0b21jYXQgcmFwdG9yIGhvcm5ldCBmYWxjb24KYmFvIHBoYW0KM2QgcmVuZGVyaW5nIQpncmVnIHJ1dGtvd3NraSBhbmQgZGEgdmluY2kKZmVyYWwgYm9keQp3aGl0ZSBhbWVyaWNhbiBzb2xkaWVyCnVsdHJhbWFyaW5lIGJsdWUgYW5kIGdvbGQKY29hdCBmb3IgYSByYXZlCmdvdGhpYyBtYWlkZW4Kc2lsdmVyIGVhcnJpbmcKZ2hvc3Qgc2hyaW1wCmx1a2EgbWl2c2VrCmRhcmsgY2l0eSBidXMgc3RvcApsb3cgYnJpZ2h0bmVzcwpwb21wZWlhbgpmb29kcG9ybgptaWQgYm9keQp0aGUgd2FsbHMgcHVycGxlIGFuZCBwdWxzaW5nCm1vdmllcyB3aXRoIGd1bnMKbW92aWUgZmlyZWFybXMKbXV0ZWQgbmVvbiBzbW9rZQpleHF1aXNpdCBmYWNpYWwgZGV0YWlsCnNhbmRyYSBjaGV2cmllciA6IDogcG9ydHJhaXQKcmlwcGxpbmcKbWlsa3kgd2F5IGVudmlyb25tZW50Cndvb2R5IGZvbGlhZ2UKZXBpYyAzIGQgYWJzdHJhY3QgbW9kZWwKMyAwIHllYXJzIG9sZCB3b21hbgpjYW5kbGUgZHJpcHBpbmcgd2hpdGUgd2F4CnNjYW5kaW5hdmlhCmhpcGVycmVhbGlzdApzaW5ndWxhcml0eSEhIQpleHByZXNzaXZlIGhhcHB5IHNtdWcgZXhwcmVzc2lvbgpzdWx0cnkgc21pcmsKY2luZW1hdGljIGFydGhvdXNlCmJpZyBzaGFkb3dzCmxheWVyZWQgcGFwZXIgYXJ0CmVlcmlseSBiZWF1dGlmdWwKZWVyaWUgaGlnaGx5IGRldGFpbGVkCm1hZ2ljYWwgYW5kIG15c3RpY2FsCmhlcnJ5IGNhdmlsbApwbHVzaCBtYXNjb3QKZjEuOCBib2tlaApmdXR1cmlzdGljIGRlY29yCnZpY3RvIG5nYWkgYW5kIHRyaXN0YW4gZWF0b24KY2hhb3MgbWFyaW5lCndob2xlIHNob2UgaXMgaW4gcGljdHVyZQpjb2xvciAoIHNvbnkgYSA3IHIgaXYKbG90cyBvZiBnbGFzcyBkZXRhaWxzCmx1bWluaXN0IHBvbGFyIGxhbmRzY2FwZQp3ZWFyaW5nIHdpemFyZCByb2Jlcwpyb3VuZCBlbGVtZW50cwpwcm9tb3Rpb25hbCBtb3ZpZSBzdGlsbApkZW1vbiBub2JsZSBjaGFyYWN0ZXIgZGVzaWduCmZpbmUgZml4IGR1cGxpY2F0ZSBsaW5lCihtaXN0IGZpbHRlcnMpCnBvcnRyYWl0IG9mIG1lZGlldmFsIG9sZCBraW5nCmxvYmEgYW5kcmFkZSBmcm9tIGFwZXggbGVnZW5kcwpjaGVuZ3dlaSBwYW4gb24gYXJ0c3RhdGlvbgpzaGUncyBvbiBteSBiZWQgaW4gYmlraW5pCmZsb3JhbCBjbG90aGVzIOKAnQpoaWdoIGRldGFpbOKAnQpncmltIHJlYXBlcgpiZWFzdAptdXNjdWxhciEgZ3JlZW4KamF3IGRyb3BwaW5nIGJlYXV0eQpnb2xkIGpld2VsbGVyeQpkb25nbHUgeXUKcmVkIGNhcGUKZHJpbmtpbmcgdGVhCmNvbG9yZWQgcGVuY2lscwpvb3ppdW0KYW50b24gZmVkZWV2CmN1dGUgZHJhd2luZwpmb3JlYm9kaW5nIGF0bW9zcGhlcmUKcmlwcGxpbmcgcmVmbGVjdGlvbnMKb2N0YW5lIHJlbmRlciBnb2RyYXlzCmhlYWQgYW5kIHRvcnNvCnJlbmUgbGFsaXF1ZQpjaW5lbWF0aWMgbW9vZHkgbGlnaHRpbmcKZnVsbCBib2R5IHNpbmdsZSBjaGFyYWN0ZXIKbXl0aGljYWwgY3JlYXR1cmUKb3JuYXRlIGhhaXIKaHlwZXJyZWFsIHBoYW50YXN0aWMKZnVsbCBtb29uIGxpZ2h0aW5nCm1hZGUgd2l0aCBwaG90b3Nob3AKcGxlYXNhbnQKcmVkIGNsb3VkcwoxIDkgMSAwCmZvcm5pdGUKYmlnIG1vbm9jdWxhcgpmbGF0IHN0eWxlCnNjb3R0IHJvYmVydHNvbgpiYXNzaXN0CnZvY2FsaXN0CmRlcm1hbCBpbXBsYW50cwpleHRyZW1lbHkgZ29vZCBsaWdodGluZwpsb25nc2hvdAprZXlib2FyZAp0YW5rcwplbGJvdyBwYWRzCmVtcHR5IHJvb20KMiAwIDAgNApqb2FxdWluIHNvcm9sbGEKd2VhcmluZyBvcGVuIHRvZSBoZWVscwpoaWdoIGFuZ2xlIHZpZXcKYmF0dGxlIG1hcCBwcm9wCnNlZW4gZnJvbSBiZWxvdwpraXNzCmdyZWcgcnV0a293c2tpIGFuZCBsdWlzIHJveW8KbWVkaXVtIGZvcm1hdCBmaWxtIHBob3RvZ3JhcGh5CmxpZ2h0IGJyb3duIGJhY2tncm91bmQKYnV0dGVyZmx5IHdpbmdzCmdyYXBoaWNzCmluIGhvYyBzaWdubyB2aW5jZXMKY2FyZWZ1bGx5IGRyYXduCm1lbnRhbCBoZWFsdGgKMzVtbSBmaWxtIHBob3RvZ3JhcGh5CnRoaW4gbm9zZQpkaWZmZXJlbnQgYW5nbGVzCmxpZ25lIGNsYWlyZQphcnRzdGF0aW9uIHVucmVhbApyZWQgZGVhZCByZWRlbXB0aW9uMgpyZWQgZGVhZCByZWRlbXB0aW9uIDIKbm9ybWFsIG1hcApnaGlibGkgYW5pbWF0ZWQgZmlsbQpoaWdoIHJlYWxpc3RpYwpzcGFjZSBuZWJ1bGEKcGx1bXAKdmVyeSB0YWxsIGFuZCBzbGVuZGVyCnNreSBiYWNrZ3JvdW5kCnBlYXJsCnNrYXRlYm9hcmQKbm8gaGFuZHMKZXllIHBhdGNoCnRpbWUgdHJhdmVsCmRldG1vbGQgY2hhcmxlcyBtYXVyaWNlCmZhbnRhc3kgd2F0ZXIgY29sb3IKZnVyaW91cwptYWNybyBkZXRhaWwKZnJhbnRpYwp5MmsKcmVhZHkgdG8gZmlnaHQKdWx0cmEgcmVhbAo2MHMKbXkgbGl0dGxlIHBvbnkKdmlicmFudCByZWQKcGF3ZWwgcmViaXN6CnZpdmlkIGNvbG9yIGh1ZXMKY2xlYW4gaG9yaXpvbgpzdW1tZXIgbGFrZSBzZXR0aW5nCmZhaXIKcmVhbGlzdGljIHBpY3R1cmUKcmF5IG9mIGxpZ2h0CmNhbGN1bHVzCmNvc21vbmF1dAp0b3Vob3UgY2hhcmFjdGVyCmFscGhvbnMgbXVjaGEKd2VhcmluZyBhIGJsYWNrIGNsb2FrCmVsdmVuIGFybW9yCnRhdHRvbyBhcnQKdW5pcXVlIGFyY2hpdGVjdHVyZQptYXR0ZSBwaG90bwp1c2VyIGludGVyZmFjZSBkZXNpZ24KbmFnYQpjaW5lbWEgNGQgbXVsdGktcGFzcyByYXkgdHJhY2VkCmRlY2F5ZWQKZGluZ3kKcHVscApraXRjaGVuCnN1bmZsb3dlcnMKcGF0cmljayBuYWdlbApzYXR1cm4Kc2lsayBzaG9lcwp0aXRsZS1zaGlmdAppbmRpYW4KbWlsaXRhcnkgY29tcG9zdXJlCndlYXJpbmcgYmx1ZSBzdW5nbGFzc2VzCmdvbGRlbiBjcm93bgp2ZXJ5IHZlcnkgdmVyeSB2ZXJ5IGJlYXV0aWZ1bApzdHJvbmcgYnJ1c2h3b3JrCnN1cGVyIHF1YWxpdHkKY29sbGFwc2VkIGZsb29ycwpyb3NzCndpZGUgd2lkZSBzaG90CmNsZXJpYwphZG9scGhlIGJvdWd1ZXJlYXUKbWFrb3RvIHNoaW5rYWkgY3lyaWwgcm9sYW5kbwpmaWxtcHVuawpleWUgb2YgcHJvdmlkZW5jZQp0b21hcyBzYW5jaGV6CmYvMi41CmRldGFpbGVkIHNrZXRjaApoeXBub3RpYwp3ZWFyaW5nIGhhdApwbGF5ZnVsIHNtaWxlCmJhcmUgbWlkcmlmZgpjbGltYXRlIGNoYW5nZQppY2ljbGVzCmRhcmsgc291bHMgMwphbiBhbmNpZW50IGNyZWF0dXJlCnRoaWNrCmFuIGFuZ2VsCmxpZ2h0IHJheXMgc2hpbmluZyB0aHJvdWdoCmtpc3NpbmcKZ29sZCBhcm1vcgpncmVlayBnb2RkZXNzCmhvbWljaWRlCnN3aW1zdWl0CmV0aGVyZWFsIGxpZ2h0aW5nIC0gaCA2NDAKZ2xvd2luZyBleWVzIGluIGhlbG1ldApkZXRhaWxlZCBhcmNoaXRlY3R1cmUKYnJhc3MgcGlwZXMgb24gdGhlIHdhbGxzCnJlYWxpc3RpYyEKbWVkaWV2YWwgZnJlbmNoIGxhbmRzY2FwZQppbmRpYQpncmVlbiBoaWdobGlnaHRzCmJyYWRsZXkgY29vcGVyCnN0eWxlIG9mIHR5bGVyIGVkbGluCnRyaWJlIG1lbWJlcnMgYXR0YWNraW5nCml2YW4gYWl2YXpvdnNraQp3aW5kb3dzIGFuZCB3YWxscyA6NQppY2UgbWFnaWMKcGFzdGVsIHBhaW50aW5nCmNvdmVyIGFydCBvZiBncmFwaGljIG5vdmVsCmV4cGFuc2l2ZQphZGRlZCBkZXRhaWwKZGFydGggcmV2YW4KZWluYXIgam9uc3NvbiBhbmQgYm91Z3VlcmVhdQpwc3ljaGFkZWxpYwpkYXJrIHVuZGVydG9uZXMKZmxhZ3Mgb2YgYXJnZW50aW5hIGJlaGluZApteXN0aWZ5aW5nCnJvemFsc2tpCnByaW1ldmFsIGZhbnRhc3kKYmVhdXRpZnVsIG1hc3RlcnBpZWNlCmluIHRoZSBzbm93Cmdvcmdlb3VzIG1haWQKd29vZGVuIGpld2VybHkKZmFudGFzeSBkcmF3aW5nCmxvbmcgYnJhaWRlZCBibG9uZCBoYWlyCmZpbmUgZGluaW5nCmJsYWNrbGlnaHQKbG9nIGNhYmluCm15YXpha2kKY2Fub24gNWQgNTAgbW0gbGVucwpicmlnaHQgc2t5CmhhbmRzb21lIG1hbgpndW1yb2FkCmR5c3RvcGlhbiBmZWVsCmF1YnVybiBoYWlyCmRzbHIgMzVtbQpqZW5uaWZlciBjb25uZWxseQpnb3RoaWMgY2F0aGVkcmFsCmZpcmUgZW1iZXJzCnN0aWxsIGZyb20gdGhlIGZpbG0KYWxleGEgNjUKbWFzdGVyIHBpZWNlCnZlcnkgdmVyeSB2ZXJ5IGJlYXV0aWZ1bCEKbGVvbmFyZG8gZGEgdmluY2kgc3R5bGUKZXllIGNhdGNoaW5nCmZ1cmlvdXMgYWN0aW9uIHNjZW5lCm5pa2UKc3ViIHN1cmZhY2Ugc2NhdHRlcmluZwpsb25nIGZsdWZmeSBibG9uZCBjdXJseSBoYWlyCmxhcmdlIGRlcHRoIG9mIGZpZWxkCmVsZWdhbnQgZHJlc3MKZGF6IHN0dWRpbyAzZApzbW9vdGggdGV4dHVyZXMKdGhpY2sgcGFpbnQKc3VycmVhbGlzbSBhZXN0aGV0aWMKZGFyayB3b29kCmphbWVzIGplYW4gc3R5bGUKbGlnaHQgY3V0ZSBmcmVja2xlcwpyZWxheGluZyBvbiBhIG1vZGVybiBjb3VjaApyYW0gc2t1bGwKc3RyYWlnaHQgamF3CmJhcm9xdWUgYXJ0CnVwbGlmdGluZyBtb29kCmZ1bGwgbGVuZ2h0IHZpZXcuIHdoaXRlIHBsYXN0aWMKZGVzdHJveWVkIGJ1aWxkaW5ncwpyZWFsaXN0aWMgaGFuZHMKZ2FsYWN0aWMgZGVpdHkKZ3dlbnQKa2FidXRvCnllbGxpbmcKbmVvbiBnbG93aW5nIGV5ZXMKdmludGFnZSBwb3N0ZXIKY2VsIHNoYWRlCnN0ZXZlIGpvYnMKanVuamkgbXVyYWthbWkKbWFza2VkCm1hZ2ljYWwgbGlnaHQKZm94IGFuaW1hbAphZXJpYWwgcGhvdG8KdG9vbiBzaGFkZXIKbXVya3kKZHV0Y2ggYW5nbGUgZnJvbSBzcGFjZSB2aWV3CmxpdmVseSBjb2xvcnMKdm9sdW1ldHJpYyBzdW5saWdodAptYW8gaGFtYWd1Y2hpCnplbiBzYW5kIGNhcnZlZCBsYXduCnZlcnkgZGV0YWlsZWQgdGV4dHVyZQpwYWxlLXNraW5uZWQKd2ViY2FtIGZvb3RhZ2UKbmV1dHJhbCBwb3NlCmJhbmRuYW1lIGlzIHRyaXBtYWNoaW5lCmNhdGUgYmxhbmNoZXR0CmRpbWx5LWxpdCBjb3p5IHRhdmVybgpkYXRlIHBhbG0gdHJlZXMKYXdhcmQgLSB3aW5uaW5nIGlsbHVzdHJhdGlvbgpsc2Qgd2F2ZXMKdml2aWRlIGNvbG9ycwpoaWdoIGNsYXNzCm1hZGUgb2YgZ2xhc3MKOCBrIGhpZ2ggZGV0YWlsCmRpeQpidW1wIG1hcApza2V0Y2hlcwpkYXJrIHNob3cgcm9vbQphYnN0cmFjdCBlbnZpcm9ubWVudAoxIDkgOCAwJ3MKZGF1IC0gYWwgLSBzZXQKaGlnaCBkZXRhaWxlZCBwaG90bwptdXJreSBkdXN0eSBkZWVwCmVwaWMgbWF0dGUgcGFpbnRpbmcKbWFnYXppbmUgc3ByZWFkCnJldHJhY2luZwpwYWludCBzbWVhcnMKZ3JleSBtaXN0Cmh5cGVyYWxpc20KY2l0YWRlbCBjb2xvdXIKc3BhY2Ugc2h1dHRsZQpzaWxlbmNlCmRyZWFtbGlrZSBsaWdodCBpbmNpZGVuY2UKZGV0YWlsZWQgYXJtb3VyCnRpbHQgLSBzaGlmdApzY2F0dGVyZWQKYW5jaWVudCBmdXR1cmlzdGljCm9jZWFuIGluIHRoZSBiYWNrZ3JvdW5kCmFpb24KYmlnIGxlYXZlcwpoaXBlcnJlYWxpc3RjCnRlZW5hZ2UKc2NyYXRjaGVkCmNyb29rZWQgbm9zZQpydXN0eSBtZXRhbCB3YWxscwptYXJjbyBidWNjaQpwaW5rIHN0b3JtIGNsb3Vkcwp2b2x1bWVudHJpYyBsaWdodGluZwpqYWNxdWVzIC0gbGF1cmVudCBhZ2Fzc2UKaGVhdCBzaGltbWVyaW5nCnN0YW5kaW5nIGFuZCBwb3NpbmcgZWxlZ2FudGx5CjMgZCBjZwpwYWNrYWdlIGNvdmVyCnRoZSBhcnQgb2Ygc2tpbm5lcgp0b25hbCBjb2xvcnMKYmFyZSBsZWdzCm1heCBtYXNueXkKdmludGFnZSA4IDAgcyBwcmludApwYWxlIHBhc3RlbCBjb2xvdXJzCnJlbmRlcmVkIGluIHNmbQpjdXRlIGxvb2tpbmcKZHJpcHBpbmcgdGFyCmVybnN0IGZ1Y2hzIGFuZCBhcnRnZXJtCndlbGwgd29ybgp3ZWFyYWJsZSBhcnQKcGhvdG8gLSBiYXNoCmhpZ2hseSBkZXRhaWxlZCBjaW5lbWF0aWMKYmVhdXRpZnVsIGRldGFpbGVkIGJhY2tncm91bmQKbWFuIHN0YW5kaW5nCmVuYW1lbApleGFnZ2VyYXRlZCBmZWF0dXJlcwpsaWdodG5pbmdzCmNvYXQKd29ybiBvdXQgY2xvdGhlcwphYnN0cmFjdCBhcnQgcGFpbnRpbmcKbG93IC0gbGlnaHQgcGhvdG9ncmFwaHkKY2hpaHVseQp0cmFuc3BhcmVudCBmZWF0aGVycwpmYW50YXN5LiBpbnRyaWNhdGUKZG9sb21pdGVzIGluIGJhY2tncm91bmQKd2lkZSBlc3RhYmxpc2hpbmcgc2hvdApwaG90b2dyYXBoeSA0IGsKY3liZXJwdW5rIDIgMCA3IDcgKQpjb2xsZWN0aW9uIHByb2R1Y3QKdGhlIGxhbmQgb2Ygb2RydWEKYXZvY2FkbwpkcmFtYXRpYyBtb29kCndhcm0gY29sb3JzIGFkdmFuY2UKZG10IGVudGl0eSA7IGxzZCBhcnQKcGVyZmVjdCBzeW1tZXRyaWMgZmFjZQpjb2xsYWJvcmF0aW9uCmZvcmVzdCByaXR1YWwKZWxlZ2FudCBsaWdodAp3ZWFyaW5nIGJsYWNrIGJvb3RzCnZpb2xldCBmbG93ZXIKc2luZ2xlIGJ1aWxkaW5nCmdvb2QgYW5hdG9teQp0IC0gc2hpcnQKaHlwZXIgZGV0YWlsZWQgdWx0cmEgc2hhcnAKbG9yaWNhIHNlZ21lbnR1bQpjYW1lcmEgbG9va2luZyB1cApiaWcgbW9vbiBpbiB0aGUgYmFja2dyb3VuZApyYW5kb20gY29udGVudCBwb3NpdGlvbgpmYW50YXN5IHdvcmxkIGNvbmNlcHQKZWlnaHRpZXMgbG9vawp3ZWFyaW5nIGhvbmV5IC0gdGhlbWVkIG1pbmlza2lydApmbHVmZnkgcGFzdGVsIGNsb3VkcwpiZWF1dGlmdWwgZmVtYWxlIGFuZHJvaWQKaW1wZXJpbAphcG9jYWx5cHRpYyBjb2xvciBwYWxldHRlCm1vb2R5IHZpYnJhbnQgY29sb3JzCnN3b2xsZW4gbXVzY2xlcwpjcmFmdApzaW5nbGUgcGluZQpzbGVlayBhcm1vcgppcm9uIGdhdGUKZGV0YWlsZWQgc2NhbGVzCnZvcmUgYXJ0CmFtZXJpY2FuIG1hbgpzaGFkZXMgb2YgcGluawppbiBhIGdlbnRsZSBncmVlbiBkYXduIGxpZ2h0CnNoYXJwIHN1bnJheSBsaWdodGluZwpkLiB2YSBmcm9tIG92ZXJ3YXRjaApwYXZlZApvbGVkIHZpc29yIG92ZXIgZXllcwplbmlnbWF0aWMgYXRtb3NwaGVyZQpvcmdhbmljIG9ybmFtZW50cwpkaWdpdGFsIGhvcnNlCmV5ZXMgb3BlbiBpbiB3b25kZXIKZHJlYW15IGdvdGhpYyBnaXJsCmJpb21lY2hhbmljYWwgeGVub21vcnBoCm9uZSBwb2ludCBsaWdodAp3b3cgd293IGRldGFpbApyb2JvdCBkcmFnb24gZmVldApjZ3NvY2lldHkgdWhkIDRrIGhpZ2hseSBkZXRhaWxlZApva2F0YSBrYXp1dG8KbmVvc3VycmVhbGlzbQp3ZWFyaW5nIGRldGFpbGVkIGxlYXRoZXIgY29sbGFyCmV4dHJlbWUgZmFjZSBjb250b3J0aW9uCnNtb290aCB3aGl0ZSBza2luCnNsZWVrIHllbGxvdyBleWVzCmdpYW50IGRhaXN5IGZsb3dlciBoZWFkCnBlcmZlY3RseSBjbGVhciBmYWNlCmVsZWdhbnQgamFwYW5lc2Ugd29tYW4KZXZlbmluZyBsaWdodHMKcHN5Y2hlZGVsaWMgZG10CmRpZ2l0YWwgYWlyYnJ1c2ggcGFpbnRpbmcKbWFnYXppbmUgc2NyYXBzCmRlc3Ryb3llZCByb2JvdHMKZW1vdGlvbmFsIGZhY2Ugc2hvdApqb3NzaSBvZiBibGFja3BpbmsKdm9sdW1ldHJpYyBsaWdodCBmb2cKa2luZGNoZW5zY2hlbWEKbWFnaWNrIHN5bWJvbHMKMTk1MOKAmXMKc29mdCBhcnQKcG9ydHJhaXQgb2YgbWVnYW4gZm94CmdsaXRjaCBlZmZlY3RzIG92ZXIgdGhlIGV5ZXMKYnVzdCB3aXRoIGZhY2Ugb2YgZW1tYSB3YXRzb24KZXhwcmVzc2lvbmlzdCBjb2xvdXIKcG9ydHJhaXQgdG9wIGxpZ2h0CmJpZyBicm93biBmcmluZ2UKMSAyIDAgbW0gbWFjcm8Kb3J0b24gZWZmZWN0IGludHJpY2F0ZQpzaGlwaWJvCmdpYW50IGhlYWRwaG9uZXMgcm9ja2luZyBvdXQKZmVldCBhcnQKeWFrdXphIHNsaW0gZ2lybAp5dm9ubmUgc3RyYWhvdnNraQpvbiBkaXNwbGF54oCdCmhpZ2ggcmVzb2x1dGlvbiBkZXRhaWxzCmpvbiBtY25hdWdodG9uCnNpZGUgcHJvZmlsZSBwb3J0cmFpdApmbG93ZXIgcG9wIGFydApmcm9tIHRoZSBwaGFudG9tIG1lbmFjZQpmaWd1cmUKY2hhcmFjdGVycyBtZXJnZWQKc3Bpcml0IGd1aWRlCnYtcmF5IHJlbmRlcgpoZCBkaWdpdGFsIGFydAp2ZXJ5IHZlcnkga2F3YWlpCmxlYXRoZXIgYXJtb3VyCnNlYSBiYWNrZ3JvdW5kCjNkIGNoYXJhY3Rlcgpjb25jZXB0IGNoYXJhY3RlcgpjbG93bgphZG9iZQpoYXVudGVkIGFuZCBzYWQgZXhwcmVzc2lvbgpqdW1waW5nCiogKiAqICogKgotCmxvdyBjYW1lcmEgYW5nbGUgYXQgd2F0ZXIgbGV2ZWwKYWRvYmUgLSBpbGx1c3RyYXRvcgpoYXVudG9sb2d5CmVwawptYWxsCjMgZCB2aWRlbyBnYW1lCmhpZGVvIGtvamltYQpzeW50aCB3YXZlCnRyZW5kaW5nIG9uIGNvbmNlcHQgYXJ0CnBhcmNobWVudApjYW5kbGVsaXQKbWFnaWMgd2FuZApzdHJvbmcgY2hpbgpzdHlsZSBvZiBzdXNwaXJpYSBhbmQgbmVvbiBkZW1vbgpkaWZmdXNlIHRleHR1cmUKaW4gYnVzeSBjaXR5CnZpc2libGUgcHVwaWxzCmxpYnJhcnkgYmFja2dyb3VuZApncm93dGgKdGhpc3RsZXMKcXVldHphbGNvYXRsCmNsaWZmCndlYXJpbmcgY2FzdWFsIGNsb3RoZXMKamVybWEKbW9udW1lbnQKY3JvY29kaWxlCmRhbnRlJ3MgaW5mZXJubwpzaWxlbnQgcnVubmluZwpjb25zY2lvdXNuZXNzCmxpZ2h0bmluZyBjbG91ZHMKeWVuIHByZXNzCjhrM2QKY3JlYXR1cmVzCmhpZ2ggZGVmaW5pdGlvbiBwaG90b2dyYXBoCnN5bW1ldHJpYyBib2R5CnNtYWxsIG1vdXRoCmNpbmVzdGlsbCA4MDB0IDM1bW0gZWFzdG1hbmNvbG9yCndldCBmbG9vcnMKZnV0dXJlIHJldHJvCmd0YSBjaGluYXRvd24gYXJ0IHN0eWxlCmJpenphcmUKZXh0cmVtZSBmaXNoZXllCmFubm8gMTQwNApwZXJmZWN0IHN5bW1ldHJpY2FsCnByZXNlbnRpbmcgd2FyZXMKYnJpdGlzaApkYXZpZGUgc29ycmVudGkKY2FsYXJ0cwpob25leWNvbWIKY2xvc2UKaG9saWRheQpoaWdocmVzCmRldGFpbGVkIGJydXNoc3Ryb2tlcwo0ZApzdHlsZSBvZiBqdW5qaSBpdG8KZmxhZwpnb2xkZW4gaG91ciBwaG90b2dyYXBoeQpibGl6emFyZCBjb25jZXB0IGFydGlzdHMKaHlwZXJyZWFsaXN0aWMgbWl4ZWQgbWVkaWEKc2VyZ2V5IHZhc25ldgp0ZW1wdGluZwpjaGltZXJpYyBvcmdhbmlzbQpmdWxsIHBhZ2UKZHJlYW1zY2FwZSBtYXhpbWl6ZWQKaW5kdXN0cmlhbCBzY2ktZmkKa25pdmVzCnN0dW5uaW5nIHBvcnRyYWl0CnRvbnMgb2YgZGV0YWlscwpoZXIgdGlueSBoYW5kcyBhcmUgb24gaGVyIHRoaWdocwpsb3cgYW5nbGUgcGhvdG8Ka25pZ2h0cwpnb29meQpicmlnaHQgYXRtb3NwaGVyZQpoeXBlIHJlYWxpc3RpYwp2ZXJ5IGh5cGVycmVhbGlzdGljCmJpZyBiZW4KdGVycmFpbgoxOTMwcwpmbGVzaCBoaWdobHkgYmFyb3F1ZSBvcm5hdGUKZW1vCm5lb24gbGlnaHQgcm9vZnRvcAptZWNoYW5pY3MKcGVyZmVjdCByZW5kZXIKcGVyZmVjdCBub3NlCnJvbWFuIG51bWVyYWxzCmV4cGxvcmF0aW9uCmluZmluaXRlIHJlY3Vyc2lvbgpyb21hbmNlCnJlYWxpc3RpYyBmYWNpYWwgZmVhdHVyZXMKc25hcmxpbmcKc2hhcnAgYWdlcwpzdG9ybXkgY2xvdWRzCndvbmRlcmxhbmQKNGsgaW4gcGxhc3RpYyBkYXJrIHRpbHQgc2hpZnQKc3RhcmJ1cnN0Cm1vZGVybiBkaWdpdGFsIGFydApjb2xvdXIgcGhvdG8Ka2FuamkKcGluZWNvbmUKcHVycGxlIGh1ZQpiYWNrIHNob3QKNGsgY29uY2VwdCBhcnQgYW5kIGh5cGVyIHJlYWxpc20KZWRpdG9yaWFsIHN0b3J5CnNtb290aCBkZWZpbmVkIG91dGxpbmVzISEKY2xlYW4gcGhvdG9yZWFsaXN0aWMgcmVhbGlzdGljCmFub3RoZXIgd29ybGQKY3liZXJwdW5rIHRoZW1lCmxpcXVpZCBwb2xpc2hlZCBtZXRhbApmYXRlIGdyYW5kIG9yZGVyCmxvdy1hbmdsZSBzaG90CmFydCBib29rCm5lb24gcmVmbGVjdGlvbnMKaGlnaGx5IGRldGFpbGVkIGFydHdvcmsKd2hpdGUtaGFpciBwcmV0dHkgZmFjZQpnYWluYXgKZGQKaHlwbm9zaXMKZGF6emxpbmcKY29udmVuaWVuY2Ugc3RvcmUKc2VhbiB5b3JvCmxvbmcgYnJhaWRlZCBvcmFuZ2UgcmVkIGhhaXIKZGlzdGFudCB2aWV3CmZhbWlseSBwaG90bwp0aWxlYWJsZQpoZWF2eQpwb2ludMOpIHBvc2U7cHVyc2VkIGxpcHMKaGFyYWp1a3UgaGFpcgpwaXhpZSBoYWlyCnJvbGV4CmNlbnRlcmVkIHBvcnRyYWl0Cmd0YSA1IHNraW4gdG9uZQpoZSBpcyBzbW9raW5nIGEgY2lnYXJldHRlCmljb25vZ3JhcGh5CmJpZGVuCmFudGhyb3BvbW9ycGhpYyByYXQKYmx1ZSBhcm1vcgpyZWFsaXN0aWMgY2luZW1hdGljCnRyZW5kaW5nIG9uIGFydHNhdGlvCmF1dG9kZXNrIGludmVudG9yCmludG94aWNhdGluZ2x5IGJsdXJyeQpmZXJvY2lvdXMKdGVzc2VsbGF0aW9uCnN0cm9uZyBtYXNjdWxpbmUgZmVhdHVyZXMKcGVyZmVjdCBnZW9tZXRyeQpjb2xvciBoYXJtb255CmNvbmNlcHQgcmVuZGVyCmNhcnRvb24gY2hhcmFjdGVyCnN1cGVybWFuCmZsb2F0aW5nIHBhcnRpY2xlcwpuZW8gYnJ1dHJhbGlzbQpmbG9hdGluZyByb2NrcwpjZW50ZXJlZCBzaG90Cmh1bGtpbmcKd2V0IHJlZmxlY3RpdmUgZ3JvdW5kCmNyaW1pbmFsCmdsb3dpbmcgcHVycGxlCmVsZXBoYW50Cmlzbwpjb21pYyBib29rIGNvdmVyIGFydApob3Qgc3VtbWVydGltZSBoaXBwaWUKc2xpbSBmaWd1cmUKY3VyaW91cyBleHByZXNzaW9uCmFydGlzdCBpbnRlcnByZXRhdGlvbgpibGFjayBzaGlydAptaWxsYWlzCmJlYXV0aWZ1bGx5IGRyYXduCmJsYWNrIGFuZCBnb2xkCnJlYWR5IGZvciBiYXR0bGUKc3ltcGhvZ2VhcgpoeXBlciBjb250cm9sLXJlYWxpc20KbmF0dXJhbCBsb29rCnN1biBsaWdodApkYXJrIG91dGxpbmVzCnJpbmcKd29vZGxhbmRzCnBld3MKYW5pbWUgY29uY2VwdCBhcnQKc2lsdmVyIHNoYWdneSBoYWlyCnN1cGVyIGhpZ2ggcXVhbGl0eQpsb3MgYW5nZWxlcyBjYQptYWRlIG9mIGNyeXN0YWxzCnZpZGVvIGdhbWUgYXNzZXRzCndlYXBvbiBkZXNpZ24Kd2V0IGdyb3VuZAptYXlhIGFsaSBhcyBhIHNvcmNlcmVyCnBhdGluYQpjYXRhc3Ryb3BoaWMKYSBtYXN0ZXJwaWVjZSBvZiBzdG9yeXRlbGxpbmcKbWVkaWV2YWwgYmFja2dyb3VuZApyZWFsaXN0aWMgY2hhcmFjdGVyIGNvbmNlcHQgYXJ0CnN0YWlyd2F5Cm9ydGhvZG94IHNhaW50IGNocmlzdG9waGVyCmhyIGdpZ2VyIGFuZCB2aW5jZW50IGRpIGZhdGUKcG9zZWQKKHNmdykgc2FmZSBmb3Igd29yawpzdHVkaW8gZ2FpbmF4CnJlZCBhbmQgd2hpdGUgbGlnaHRpbmcKY29uanVyaW5nIHBzeWNoZWRlbGljIGJhY2tncm91bmQKc25vd2ZsYWtlcwpyaWNoYXJkIHRhZGRlaQp0aGUgcG90YXRvZXMgZWF0ZXJzCnRyYWluIHN0YXRpb24KdGFrYXJhdG9teQpibHVlIHNreSB3aXRoIGRyYW1hdGljIGNsb3VkcwplZHdhcmRpYW4KZGFyayB2aWJyYW50IGNvbG9ycwpwb3BwaW5nIGNvbG9yCnZpYnJhbnQgY2FydG9vbiBhcnQKd29tYW4gd2l0aCByZWQgaGFpcgpmYW50YXN5IGJha2VyeQpvcmllbnRhbCB0YXR0b29zCnN0dW5uaW5nIGNvbmNlcHQgYXJ0CmFib3JpZ2luYWwKNGsgLQo4ayBmYWJyaWMgdGV4dHVyZSBkZXRhaWxzCmFjcm90ZXJpYQplcmlrIGpvbmVzCmNoYXJ0cGFrIGFkIG1hcmtlcnMKd2lsZCBmbG93ZXJzCmxpZ2h0IHNoaW5pbmcgdGhyb3VnaApnZW9mZnJveSB0aG9vcmVucwpibHVlIGFuZCBnb2xkIGNvbG9yIHNjaGVtZQphbWF6aW5nIHdhbGxwYXBlcgpncmVnIHJ1dGhvd3NraQpkZSAtIG5vaXNlCmtsYXVzIG1vdmllIHBvc3RlcgphbmdyeSBleWVzCmluIHRoZSBzdGVwcGUKY2xvdWR5IHdlYXRoZXIKbWFkZSBvZiBpbnNlY3RzCnJvYm90IGFybXMKbWVzc3kgY3VybHkgaGFpcgpwZWtrYSBoYWxvbmVuCmZpbm5pc2ggbmF0dXJhbGlzbQpjb2xvcmZ1bCBtYWdpYyBlZmZlY3RzCmhkIDQgayBwaG90bwphcnJpZmxleCAzNQpvYmplY3QKbGluZXdvcmsKdm9sdW1lIG1ldHJpYyBsaWdodGluZwpnb2QgbGlnaHRpbmcKY2VsbCAtIHNoYWRlZApoeXBlciBwaG90b3JlYWxpc20KY2xlYXIgc2t5IGJhY2tncm91bmQKaW50cmljYXRlIHNoYXJwIGZvY3VzCm9zbApyIC8gcGFpbnRlZG1pbmlzCmF1Z21lbnRlZCByZWFsaXR5Cm9uIGEgYmF0dGxlZmllbGQKc2lkZXNob3cgZmlndXJpbmVzCnNjcm9sbHMKcmFpbmluZyBvdXRzaWRlIHRoZSB3aW5kb3cKKCBzdGVhbXB1bmsgKQpob3Jpem9udGFsbHkgc3ltbWV0cmljYWwKY29sb3JmdWwgZHJlc3MKbGlnaHQgZWZmZWN0LiBmZW1pbmluZQpyb29zdGVyCmdhcG1vZSBncmltZGFyawpkZWVwIHBlcnNwZWN0aXZlCmtpbXVyYQpnaXJsIHdhbGtpbmcgb24gbW91bnRhaW4KaG9ybgpyZWQgc3BvcnQgY2xvdGhpbmcKZGV0YWlsZWQgNCBrIGRyYXdpbmcKcGVyZmVjdGx5IHNoYWRlZCBmYWNlCmR5bmFtaWMgY29udHJhc3QKZiAzLiA1CnByb2Zlc3Npb25hbCBwaG90b2dyYXBoeSAxIDYgawpwaWcgbm9zZQpudWNsZWFyIHdpbnRlcgpob3Jpem9uIHplcm8gZGF3biA4IGsKZm9ycmVzdAoxIDYgYml0cwp6b2RpYWMKYXJhY2hub3Bob2JpYQpyZWQgYW5kIGdyZWVuIGNvbG9yIHNjaGVtZQpzaWdtYSAzIDUgbW0KaW4gdGhlIGF1dHVtbgpib29tYm94CmxheWVyZWQgY29tcG9zaXRpb24KdHJlbmRpbmcgb24gYXJ0c3RyYXRpb24Kb3JuYW1lbnRhbCBhZXN0aGV0aWNzCmZyb3plbiBpY2Ugc3RhdHVlCmdvbGQgc29jY2VyIHNob3J0cwp2aXNpYmxlIG1hZ2ljIGVuZXJneQpmdWxsIGJlYXJkCnJlYWwgbGlmZSBwaG90b2dyYXBoCmNvYXN0CmFsbCBibGFjayBjeWJlcnB1bmsgY2xvdGhlcwp2ZWN0b3Igc2hhcnAgZ3JhcGhpYwptb2Rlcm4gbWluaW1hbGlzdCBmIDIgMCBjbGVhbgpkZXRhaWxlZCBpbnRyaWNhdGUgcmVuZGVyCmRpc3NlY3Rpb24gcmVsaWVmCmFuIGFic3RyYWN0CnZlcnkgdGlnaHQgY29yc2V0CnR1cmJpbmVzCmdvbGRlbiBjaXR5c2NhcGUKZ3JhZml0eQpwZW5jaWwgYW5kIGluayBtYW5nYQrwn5KjIPCfkqUKdnJ1YmVsCmFsZnJlZCBkZWhvZGVuY3EKZGl2ZXJzZSBjb3N0dW1lcwp1bHRpbWF0ZQpyYWluZm9yZXN0IG1vdW50YWlucwpkYXJrc2lkZXJzIGFydCBzdHlsZQpzeW1tZXRyaWNhbCBmdWxsIGJvZHkKZ29sZGVuIGxlYXZlcyBhdCBmcmFtZSBib3JkZXIKaW4gc3R5bGUgb2YgcnVhbiBqaWEKa2l0Cml0ZW1zIGFuZCBnYWRnZXQKaG90IGFpciBiYWxsb29uCmhhbmQgZ2VzdHVyZQpiZWF1dGlmdWwgdmlld3MKYmxhY2sgc3RyaXBlcwpibGFjayB0IC0gc2hpcnQKZHlzdG9waWFuIGVudmlyb25tZW50CnNuZWFrZXIgc2hvZXMKYm9uZSB3YXN0ZXMKY2luZW1hdGljIGZ1bGwgYm9keSBzaG90Cmdsb3dpbmcgc3RhaW5lZCBnbGFzcyBiYWNrZHJvcApuYXR1cmFsIHNvZnQgbGlnaHQKYnJ1dGFsaXN0IGZ1dHVyaXN0aWMgaW50ZXJpb3IKYmxhY2sgdG9wCmh5cGVyIC0gZGV0YWlsZWQgdmlzaW9uYXJ5IGFydAp3aXQgc3R1ZGlvIG9mZmljaWFsIG1lZGlhCmJlc3Qgb24gY2dzb2NpZXR5CnZpYnJhbnQgY29sb3IgZGV0YWlscwpkZXRhaWxlZCBhbmQgY3JlZXB5Cmdpcmwgd2Fsa2luZyBpbiBhIGZsb3dlciBmaWVsZAptZWdhIGhpZ2ggcXVhbGl0eQp0b21vaGlybyBzaGltb2d1Y2hpCnZlcnkgYmVhdXRpZnVsIHNsaW0gbGVncwpyZWFsIHNraW4KdmludGFnZSBzaG91am8KYmxvbmRlIGNyZWFtCmV4cGlyZWQgZmlsbSBhbmFsb2cgcGhvdG9ncmFwaHkKaGlnaCByZXNvbHV0aW9uIAplbGVjdHJpYyB3b21hbgpuYW5xdWFuCmNoYW5ncXVhbgpkYW9zaHUKZ3Vuc2h1CnFpYW5nc2h1CmV0aG9zIG9mIGVnbwpkaXN0YW50IGZvcmVzdCBob3Jpem9uCnNoYXJwIHJvYm90IGRyYWdvbiBwYXdzCmdpcmwgc3RhbmRpbmcgaW4gYSBmbG93ZXIgZmllbGQKYnVzZXMKM2Qgb2N0YW5lIGJsZW5kZXIgcmVuZGVyCmdsb3dpbmcgd2hpdGUgZmFjZQpnbG93aW5nIGxhc2VyIGJlYW0gZXllcwpnbG93aW5nIHdoaXRlIGxhc2VycwpldGhlcmVhbCB3aGl0ZSBkcmlwcGluZyB0YXIKcGluayB0aWdlcnMKd2VhcmluZyBiaW9uaWMgaW1wbGFudHMKb3JuYXRlIGlyb24gYXJtb3VyCnNvZnQgaW5kb29yIGxpZ2h0CmluIGZyb250IG9mIHdoaXRlIGJhY2sgZHJvcAp3b21hbiBtb2RlbApzdHJpcGVkIG9yYW5nZSBhbmQgdGVhbAptb3ZpZSBzdGlsbCBvZiBhIGN5Ym9yZwpvYnNvbGV0ZSB3b3JsZHMKZnJvbSBhIGJpcmQncyBleWUgdmlldwp3aGl0ZSB3YWxsIGNvbG91cmVkIHdvcmtzaG9wCnBvcnRhaXQgb2YgaGFpZmEgd2VoYmUKdGhpZWYgd2FycmlvcgpyYXJlIGNsYXNzaWZpZWQgcGhvdG8Kc2NpIGZpIHBhdHRlcm5zCnNpbHZlciBoYWlyIGdpcmwKZ2lhbnQgc3VibWFyaW5lCm1hZGUgb2Ygd2F4IGFuZCB3YXRlcgp0aGUgd2lsZCBodW50CnVsdHJhIC0gcGhvdG9yZWFsaXN0aWMKdGFsbCB3aW5kb3dzIGxpdCB1cApyYWlzaW5nIGFuIGFybQpoaWdoIHF1YWxpdHnigJ0KcGFpbnQgdHViZXMKcGhvdG9yZWFsaXN0aWPigJ0KbWFzdGVycGllY2XigJ0KZGV0YWlsZWTigJ0KdmVsdmlhCm1vdmllIHBvc3RlciBhcnQKa29uc3RhbnRpbiByYXp1bW92CmJydXNoCnVsdHJhIGRldGFpbGVkIHdhdGVyCm55YwpoaWdobHkgZGV0YWxpZWQKZ3JlZW4gZmllbGRzCmhpZ2ggc2hhcnBuZXNzCnJlZCBjYXJwZXQKcmF3IGR1YWwgcGl4ZWwKdGFybW8ganVob2xhCndhcm0gYW5kIHZpYnJhbnQgY29sb3JzCnBvd2VyZnVsIGJlaW5nCnBsYW50IHNwaXJpdApmcmFjdGFsIGVudGl0eQpsaWdodCBkaXNwZXJzaW9uCmdyZWcgcnV0a293c2t5CmYgMgp0b29uCnN0dWRpbyBsaXQKcGF1bCBwb3BlCmFuaW1lIHByb3BvcnRpb25zCiggKCBzdHJvbmcgZGl0aGVyICkgKQptdXNldW0gZGlzcGxheQpvcmFuZ2UgZ2xvdwpwYXRlbnQgcmVnaXN0cnkKcmF0cwplbmNhdXN0aWMgcGFpbnRpbmcKZ3RhCnNwaXJpdApyYWRpYW50IGFsaWVuCmFydCBwb3N0ZXIKZHJhbWF0aWMgbW9tZW50CjEgOSA2IDkKc3BsYXNoIHBhZ2UKcmVmcmFjdGVkIGxpbmVzIGFuZCBzcGFya2xlcwpjb29sIGphcGFuZXNlIHN0cmVldCBmYXNoaW9uCnBpbmsgY2xvdWRzCmJhc3RpZW4gbGVjb3VmZmUgZGVoYXJtZQp0cmVuZGluZyBvbiBjZ3RhbGsKc3RhaW5zCnBob3RvZ3JhcGh5IGF3YXJkKQplcGljIGxldmVsIG9mIGRldGFpbApndW5wbGF5CnBldHJhIGNvbGxpbnMKMzVtbSBwaG90bwpyaW5ncwoyIDAgMCAxIDogYSBzcGFjZSBvZHlzc2V5CnZpY3RvcmlhbiBwYWludGluZwp0YXZlcm4KbWV0YXBob3JpY2FsCnJlYWxpc3RpY2FsbHkgcmVuZGVyZWQgZmFjZQpjYWVzYXIgdmljdG9yaW91cwpzdGV2ZW4gbWVpc2VsCmxhdWdodGVyCnZpZGVvZ2FtZSBzY3JlZW5zaG90CmRlZXAgYmx1ZQp3b29kZW4KaW4gYSBmYWN0b3J5CnBvdHRlZCBwbGFudHMKbXVjaGEgdmliZQpvcmFuZ2UgYmFja2dyb3VuZApoaWdobHkgZGV0YWlsZWQgOGsKbmVvZnV0dXJlCnZyYXkgcmVuZGVyZWQKZXh0cmVtZWx5IGNsZWFyIGFuZCBjb2hlcmVudApjaXJjbGUgZmFjZQpjaXJjdWxhciBmYWNlCm11c2V1bSBleGhpYml0CmFmcm8KZmxvd2VyIGNoaWxkCm1lZGl1bSBmb3JtYXQgY29sb3IgcGhvdG9ncmFwaHkKZml4ZWQgZXllcwptZXRlb3Igc2hvd2VyCm1lZ2FzY2FucyB0ZXh0dXJlCnRlbi1nYWxsb24gaGF0CjkgMCBzIHRveSBjb21tZXJjaWFsCnV2Cih1bnJlYWwgZW5naW5lKQp2ZXJ5IG5lYXQKZHJlc3NlZCBpbiBhIGZyaWxseSAoKHJhZ2dlZCkpCmxhdGUgYXQgbmlnaHQKaW5rYXJuYXRlCnNvZnQgbGlnaHQuNGsKYXRtb3NocGVyaWMKYXMgYSBwaXhhciBjaGFyYWN0ZXIKb3JuYW1lbnRlZAp3ZXN0d29ybGQKcGVyZmVjdCByZWFkYWJpbGl0eQp0b2RkIHNjaG9yciBoaWdobHkgZGV0YWlsZWQKaGlnaCBjaGVlayBib25lcwpraXRzdW5lCnNtYWxsIGVhcnMKdGVjaG5pY2FsIGRyYXdpbmdzCjg1bW0gdmVsdmlhIDEwMAp3YXRlcmNvbG9yIGFuZCBpbmsKYW5hbW9ycGhpYyB3aWRlc2NyZWVuCmhlYXJ0aHN0b25lIGNvbG9yaW5nIHN0eWxlCnN0YW5kaW5nIG9uIGEgY2xpZmYKdmFsa3lyaWUKbWFnaWNpYW4KYmVhdXRpZnVsIGV5ZQpjaXJjdWl0IGJvYXJkcwpsdW1pb24gcmVuZGVyCnBzeWNoZWRlbGljIGNvbG9yIHNjaGVtZQpzaGludGFybyBrYWdvCmludmluY2libGUKdGhlIGZvb2wKcGhvdG9ncmFwaGVkCmZlcm4KYSBsb25nLXNob3QKYmx1ZSByb2JlcwpjbG9zZWQgbGlwcwo2MCdzIHNjaS1maSBwaW51cCBzdHlsZQpkaXN0YW5jZSBzaG90CnBoeXNpY2FsbHkgYmFzZWQgcmVuZGVyCnNtb2tpbmcgY2lnYXIKbmlrb24gZDgxMAplbnRlcnRhaW5pbmcKcmVzdGF1cmFudApib2R5IGFuZCBmYWNlCmNpdHlzY2FwZSBiYWNrZ3JvdW5kCnpicnVzaCBzY3VscHQKaHlwZXIgZGV0YWlsZWQgaWxsdXN0cmF0aW9uCnRyYW5zbHVjZW5jeQpkZXN0cm95ZWQgY2l0eQptYXN0ZXJwaWVjZSBkaWdpdGFsIHBhaW50aW5nCmdyZWF0IHBob3RvZ3JhcGh5CmlseWEga3V2c2hpbm92IGZhY2UKeC1yYXkKZGltcGxlcwp3YXRlcmNvbG9yIG9uIHBhcGVyCm91dHN0YW5kaW5nIGRldGFpbApldmlsIGxvb2tpbmcKYSB3aWxkCmZmeGl2CmJhbGQgaGVhZCBhbmQgd2hpdGUgYmVhcmQKaC5yIGdpZ2VyCnNvbGRpZXJzCmFuY2llbnQgY2l2aWxpemF0aW9uCmFmcmljYW4gd29tYW4KZnVsbCByZXMKbWFqZXN0aWMgcG9zZQpzcGlsbGluZyBrZXRjaHVwCm11c2ljIG5vdGVzCmFuaXBsZXgKc21va3kgYXRtb3NwaGVyZQpzbW9raW5nIGNpZ2FyZXR0ZQp1bHRyYSBkZXRhaWxlZC1pCnlvdXIgbmFtZQp3aXRjaCBoYXQKYWxidW1lbiBzaWx2ZXIgcHJpbnQKY2FsdmluIGtsZWluIHBob3RvZ3JhcGh5CmhpLXRlY2gKc2hvdWxkZXJzCmRlc3Ryb3llZApob21pY2lkZSBpbiB0aGUgc25vdwpza3lmaXJlCnN1YmplY3QgaW4gY2VudGVyCmtleSBhbmltZSB2aXN1YWwKbm8gZXh0cmEgY2hhcmFjdGVycwpmcm9udCBsaXQKcHJvZmVzc2lvbmFsIHBvcnRyYWl0CmdyZWVuIHNtb2tlCmJlaWdlIG1pc3QKZGFyayBmYW50YXN5IGJhY2tncm91bmQKY2F0aWEKaGFybmVzc2VzIGFuZCBnYXJ0ZXJzCmNhbm5hYmlzCmVwaWMgZmlnaHQKbW9vbiBiZWFtcyBkcmFtYXRpYyBsaWdodApyaW5nbGV0CmNvbW11bmlzdCBwcm9wYWdhbmRhCmhhbGYgZmFjZQpjb25jZXB0IHNrZXRjaApibGFjayBnaXJsCnNuYWtlIGhhaXIKcGFuZWxzCmRhcmsgZWxmCnNtb290aCBvaWwgcGFpbnRpbmcKbWN1IHN0eWxlCmdyb3VuZCBsZXZlbApkZWxpcml1bQpvdmVyZ3Jvd24gcGxhbnRzCmNhc3RpbmcgbWFnaWMgc3BlbGwKY3V0ZSBwaXhhciBjaGFyYWN0ZXIKZHJhbWF0aWMgYmFja2dyb3VuZApldmFuIHJhY2hlbCB3b29kCmJlYXV0aWZ1bCBkYXkKdmludGFnZSBjb21pYwpjYWxtIGFuZCBteXN0ZXJpb3VzIHZpYmVzCmR3YXluZSBqb2huc29uCmNvY2twaXQKY3RodWx1CmVwaWMgYWN0aW9uIHNjZW5lCmJlYXV0aWZ1bCBzdGFycwp0aGUgZGV2aWwKY3liZXJwc3ljaG8KdGVhc2luZwpmYWUgdGVlbmFnZSBnaXJsCnB1c3R1bGVzCmtuaWdodCBhcm1vcgpldGVyZWEKbG9uZyBwaW5rIGhhaXIKcXVhbnR1bSBwaHlzaWNzCmdyZWVuIGRyYWdvbgpkaWZmcmFjdGlvbiBncmFkaW5nCmJlbmV2b2xlbnQKM2QgaG91ZGluaQptb2UKb2lsbCBwYWludGluZwpzaG90IGluIGNhbm9uIDUwbW0gZi8xLjIKc25lYWtlcnMKaHVycmljYW5lCmFybWVkCmluIGZvcmVzdApldHN5Cm11c2UKZmF0ZQp0b2t5byBzdHJlZXQKam9qbydzIGJpemFycmUgYWR2ZW50dXJlCndlYXJpbmcgYSBob29kZWQgY2xvYWsKa2F0ZSBiZWNraW5zYWxlCmxvb2tpbmcgdG8gdGhlIHNpZGUKZ2xvd2luZyBlZGdlcwphbmltYXRpb24gc3RpbGwKd2VhcmluZyBza2F0aW5nIGhlbG1ldApwYWxldHRlIGtuaWZlIHRleHR1cmUKcmVkIGFuZCB3aGl0ZSBmbG93ZXJzCm9pbCBhbmQgY2FudmFzCnByZWhpc3RvcmljIGZhbnRhc3kKdW5saW1pdGVkIGJsYWRlIHdvcmtzCm9yYW5nZSBsaWdodApkaXNpbnRlZ3JhdGlvbgpib2R5Y2FtIGZvb3RhZ2UKc3VuIHNldHRpbmcKZGVjb3JhdGlvbgpwaG90byBvZiBlbW1hIHdhdHNvbiBpbiBzd2ltc3VpdApidWxiYXBlZGlhCnNjaSBmaSBjb25jZXB0IGFydApwb3J0cmFpdCBvZiBtZWR1c2EKZmxvd3kgaGFpcgpkYXJrIHJlZCBoYWlyCm1vZGVscwpwYXN0ZWwgcGluawptb3RoIHdpbmdzCnByaWVzdGVzcwp3aGl0ZSBib3JkZXIKYXJjaHdheXMKcmVsYXhpbmcgb24gdGhlIGNvdWNoCmh1bWFuIGphdwpoYWxmIGhlbG1ldApzbG93IG1vdGlvbgpicmFkIHJpZ25leQpoYW1tZXIgYW5kIHNpY2tsZQpwbGF5aW5nIGNhcmRzCnNjb3R0IHJhZGtlCmluZmVybmFsIHJlbGljcwpsdWJlemtpCmF1dHVtbiBsaWdodApoeXBlciByZWFsaXN0aWMgZmFjZXMKYmFkCndlYXJpbmcgZ2FzIG1hc2tzCmxhbmt5Cm1vZWJpdXMgbW9lYml1cwpwaG90b3JlYWxpc3RpYyBsYW5kc2NhcGUKKCBoaWdobHkgZGV0YWlsZWQgZmlndXJlICkKc3ByaXRlcwpmaWZ0aCBlbGVtZW50CmNvbG9yIHNjaGVtZQpsaXF1aWQgdGhhdCBoYXMgYSB2aXNjb3VzCnNha3VyYSB0cmVlcwpkbmQgZmFudGFzeSBjaGFyYWN0ZXIKYXBwIGljb24KYmFja3ZpZXcKZmxvd2luZyBlbmVyZ3kKbGlmZWxpa2UgYXR0cmlidXRlcwptYXVyaXppbyBjYXR0ZWxhbgpicm9uemUgc2tpbgprYW5kaW5za3kgdG91Y2hlcwp3ZWFyaW5nIHNwYWNlIHRlY2h3ZWFyCmltcG9zaW5nIHByZXNlbmNlCmFtcGhvcmEKd2l0aCBoaXMgYmFjayB0dXJuZWQKaW4gaG9ub3Igb2Ygc2F0dXJuCnRyZW5kaW5nIG9uIGZhY2Vib29rCmJlYXV0aWZ1bCBnYXppbmcgZXllcwphbGllbiBjYXBzdWxlcwphbmNpZW50IGdyZWVrIGNpdHkKZ2xlbm5yYXkgdHV0b3IgYW5kIGVkd2FyZCBob3BwZXIKd2hpdGUgdG9uZXMKZHJpcHBpbmcgb2lsIHBhaW50CnJlcGVhdGluZyAzNW1tIHBob3RvZ3JhcGh5Cmlyb24gY2xhZGRpbmcKZm9jdXNlZCBnYXplCmNyZWF0aXZlIGFuZCBjb29sCmJlYXV0aWZ1bCBpbnRlcmlvcgpiYXkgYXJlYQpob3QgdHViCmluIHN0eWxlIG9mIHN0dWRpbyBnaGlibGkKdW5yZWFsZW5naW5lIDUKZmlyc3QgNCBmaWd1cmVzCnNhbXVyYWkgZmxpZ2h0IHN1aXQKY2xvdGggYW5kIG1ldGFsCnNwaW5uaW5nIHdoaXJsd2luZApoZXJvZXMgb2YgdGhlIHN0b3JtIHNwbGFzaCBhcnQKb3ZlcndhdGNoIHNwbGFzaCBhcnQKdGVsZXBob3RvIHpvb20KZ3JhbnVsYXIgZGV0YWlsCnNjaSAtIGZpIGZhY2UKZnVubnkgc2N1bHB0dXJlCmdlbm5keSB0YXJ0YWtvdnNreQpmdXR1cmlzdGljIGVudmlyb25tZW50CnR1cmJ1bGVudCBibG9vZCBsYWtlCmRldGFpbGVkIHdhdGVyY29sb3VyCnJldmVhbGluZyB3aXJlcyBhbmQgZWxlY3Ryb25pY3MKd2l0aCByZWZsZWN0aW9uIGFuZCB0ZXh0dXJlcwpjb2xsZWN0aWJsZSBhY3Rpb24gZmlndXJlCnN1aXQgYW5kIHRpZQpjb2xvcmZ1bCByYXZlIG1ha2V1cAo1IDAgcyBwdWxwIGlsbHVzdHJhdGlvbgpwaWNhc3NvIG1hc3RlcnBpZWNlCnggLSBtZW4KZmxvd2VyIG1hc2sKcmVtb3ZlIGR1cGxpY2F0ZSBjb250ZW50CnJlZnJhY3RlZCBsaWdodAp0cmlhbmd1bGFyIGZhY2UKYmVzdCBncmFwaGljcwp3aGl0ZSB3YWxsCm5vaXIgcGhvdG9yZWFsaXNtCmlwaG9uZSBjYXB0dXJlCmJhdGlrCnNob3Qgb24gMSA2IG1tCnN0ZXZlbiBvdXRyYW0gaGQKYXJ0c3R5bGUKc2lsdmVycGxhdGUKcGl4aWUgY3V0IHdpdGggc2hhdmVkIHNpZGUgaGFpcgpjaW5lbWF0aWMgcGhvdG9zaG9vdGluZwptYWQgbWF4IGphY2tldApsb3R1cyBwZXRhbHMKbWF0dXJlIGNvbG9ycwpzaW5pc3RlciBkZW1vbmljIGF0bW9zcGhlcmUKdGFyYSBtY3BoZXJzb24KYXQgbmV3IHlvcmsgZmFzaGlvbiB3ZWVrCnNoYW1hbmljIHBvc3RlciBsc2QgYXJ0CmludHJhdmVub3VzIGRyaXAKYW4gYWJzdHJhY3Qgc3Bpcml0dWFsIGJhY2tncm91bmQKY3JhemVkCnZpYnJhbnQuIGZyYWN0YWwgZ2VtcwpwdWRpY2EgcG9zZSBnZXN0dXJlCmNvbnRyYXN0aW5nIHNoYWRvd3MKc3VwZXJzYW1wbGVkCnB1bGxlZCBhcGFydAppbiBhbWVyaWNhbiBwc3ljaG8gKCAxIDkgOSA5ICkKYXJ0IGV4aGliaXRpb24KYXJ0aXN0aWMgcmVuZGVyIG9mIHJlaW11IGhha3VyZWkKMSA1IDAgbW0gZiAyLiA4CmRpc25leSBwaXhhciB6b290b3BpYQpzdXBlciBjbG9zZSB1cAptdXRlZCBjb2xvdXJzIDggawpjaGlyb3B0ZXJhIGVhcnMKYnJ1dGFsaXN0IGZhbnRhc3kKc3ltbWV0cmljYWwgbWVjaGFuaWNhbCBmZWF0dXJlcwppbiB0aGUgYXJ0IHN0eWxlIG9mIGJvd2F0ZXIKd2lsZGVybmVzcyBhbWJpYW5jZQp3ZWFyaW5nIGJsYWNrIGNsb3RoZXMKaGFsbHVjaW5vZ2VuCmNvbG91cmluZyBwYWdlCmh5cGVyIGZvY3VzCmR5c3RvcGlhbiB0b3kKc3R1ZGlvIGdoaWJsaS4gYXJ0Z2VybQp3ZXRhIGRpc25leSBtb3ZpZSBzdGlsbCBwaG90bwpzeXN0ZW0gdW5pdApoZyBnaWdlcgpkZWJyaXMgZmx5aW5nIGFyb3VuZApjYXQgd2l0aCBsdXRlCmludmVydGVkIG5lb24gcmFpbmJvdyBkcmlwIHBhaW50CmhvbGRpbmcgYSBnYWxheHkKZmxvYXRpbmcgaW4gZW1wdHkgc3BhY2UKaW5zaWRlIGEgY2x1dHRlcmVkIGJlZHJvb20KYmx1ZSBzdG9ybSBjbG91ZHMKeWVsbG93IGhhcmRoYXQKbGFyZ2UgZm9ybWF0IGNhbWVyYQpnaG9zdCBpbiB0aGUgc2hlbGwgY29sb3Igc2NoZW1lCnRyZW5kaW5nIG9uIGFydHN0YXJ0aW9uCmJydXNod29yawpjb21meSBhbWJpZW5jZQpjeWJlcnB1bmsgc3ludGgKbmQgNgpncmVlbiBjcnlzdGFsCmZyb2NrCmdsb3dpbmcgZmFjZQpzd2lmdApwYWxlIC0gd2hpdGUgc2tpbgpub3QgcmVhbGlzdGljCmFmcm8gc2FtdXJhaSBhbmltZXMgc3R5bGUKdmVyeSBoaWdoIHF1YWxpdHkgZmFjZQo4IGsgOCA1IG1tIGYgMS4gNAplbGJvdwpmYW50YXN0aWMgYXJ0d29yawppcSA0CmNyb3NzaW5nIHRoZSByaXZlcgpnb2xkZW4gZXRjaGVkIGFybW9yCmVsZWN0cmljYWwKZGV0YWlsZWQgd2hpdGUKZnV0dXJlIGNvZGVyIGxvb2tpbmcgb24KaGFyZCBzdXJmYWNlcyBtb2RlbGxpbmcKZGVzb2xhdGUgZW1wdHkgd2FzdGVsYW5kCnBlcmZlY3QgZGV0YWlsZWQgZXllcwpzaWx2ZXIgaGFpciAocG9ueXRhaWwpCnBvbGlzaGVkIG1hcGxlCnZpbmNlbnQgY2FsbGViYXV0IGNvbXBvc2l0aW9uCmVsZWdhbnQgaGFybW9ueQpmZWxpeCBlbmdsdW5kCndpdGggYnVubnkgZWFycwpzY2VuZSBmcm9tIGxvdWlzaWFuYSBzd2FtcHMKdGVycnkgZ2lsbGlhbQppbmNyZWRpYmxlIG1vdmllIHBvc3RlcgoxIDkgMiAwIHMgZnVybml0dXJlCmJyb29rZSBzaGllbGRzCm9uZSBiaWcgaW5rYmxvdCBvbiB0aGUgcGFwZXIKYW4gYW5jaWVudCBwYXRoCmF0bW9zcGhlcmUgY2luZW1hdGljCmVsYWJvcmF0ZSBwYXR0ZXJuZWQgbWFrZXVwCm1hbmdhIGFuZCBhbmltZSAxIDkgOSAwCmhlcm9pYyEhIQp0aGUgZ29kIHpldXMKdGhlIGxvbmdlc3QgbmlnaHQKdmludGFnZSBsZXZpIOKAmSBzIGFkCmF3YXJkIHdpbm5pbmcg4oCdCm9jdGFuZSByZW5kZXIg4oCdCmVvcmEKZ2FkaWdhbApteXN0aWNhbOKAnQo0IGsgOCBtbSBncmFpbnkgcGFuYXZpc2lvbgpmaXJlIGFuZCBzbW9rZQp3ZWFyaW5nIHZyIGdvZ2dsZXMKZmlsbSBxdWFsaXR5CnNoYXJwIGhpZ2ggcXVhbGl0eQpub3NlIHBpZXJjaW5nCmNyb3AgdG9wCmJsdWUgYW5kIGdyZWVuCmxvbmcgZmFuZ3MKYWxpZW4gcGxhbnRzCmZ1bGwgb2YgZXhwcmVzc2lvbnMKbXlzdGljYWwgYXRtb3NwaGVyZQo4MCdzCmFydGlzdCBsZW9uYXJkbyBkYXZpbmNpCmRpdGhlcmVkCnB1cmUgZXZpbApvaWwgb24gbGluZW4KZW5yYWdlZApjb25zdGFudCBncmVlbiBiYWNrZ3JvdW5kCm9wZW4gZmllbGQKZHJhbWF0aWMgY29sb3IKMSA5IDUgMCdzCmh5cGVycmVhbCA0IGsKZ3JhbmQgc2NhbGUKZ2FuZ3N0ZXIKYXJpc3RvY3JhdApmYWNlIGNvdmVyZWQgaW4gbXVkCmIgLSByb2xsCmFuZ3J5IGZhY2UKc2NpIC0gZmkgbW92aWUKMiAwIDAgMSBhIHNwYWNlIG9keXNzZXkKcmVzdGF1cmFudCBpbnRlcmlvciBwaG90b2dyYXBoeQpmcmFnaWxlCmRhcmsgc21va3kgYmFja2dyb3VuZAp3aG9sZSBwYWdlIGlsbHVzdHJhdGlvbgpjb2xkIGNvbG91cnMKZXBpYyBhcnR3b3JrCnNjZW5lIGZyb20gYSBtb3ZpZQp0ZW5kaW5nIG9uIHBpbnRlcmVzdAoxOTc3CnVucmVhbCBlbmdpbmUgb2N0YW5lCmxhcmdlIGhpZ2hsaWdodHMKdXRhaAp0cmVuZGluZyBvbiBhcnRzdGF0aW8KZXBpYyBjaGFyYWN0ZXIgYXJ0CnJhaW5pbmchCnNldCBpbnNpZGUgb2YgdGhlIGJhbmsKYWs0NQplc2NhcGUgZnJvbSB0YXJrb3YKY29sb3VyZWQgcG9sYXJvaWQgcGhvdG9ncmFwaAp0ZXh0dXJlcy4gY29tCmRldGFpbGVkIHRleHR1cmUKc3Ryb25nIGJydXNoIHN0cm9rZQpwaG90byBvZiBhc3VuYSBmcm9tIHNhbwpmcmVha3Nob3cKY29sb3IgY29udHJhc3QKMyBkIHJlbmRlciBvY3RhbmUKNCBrIGRldGFpbAptYW5zaW9uCnNsaWdodCBvdmVyY2FzdCBsaWdodGluZwp5ZWxsb3cgaGFpcgpiZWF1dGlmdWwgcHJpbmNlc3MKaG9zcGl0YWwKZW1lcmFsZCBncmVlbiBleWVzCmNyaW1zb24gcmVkIGhhaXIgYW5kIHJlZCBleWVzCm5lb24gd2lyZXMKdGl0YW5pdW0Kc3dlZGVuCndlYXJzIG9wcmFoIGdsYXNzZXMKYnVjb2xpYwpiYW9iYWIgdHJlZXMKY2luZW1hdGljIGFydCBzaG90CmNlbnRlcmVkIGZ1bGwgYm9keQptaW1tbyByb3R0ZWxhCmZ1bGwgYm9keTsgZnJvbnQgdmlldwpwb3V0aW5nCm5lb24gcmFpbgp2ZXJ5IGdyYWlueQppbnRyaWNhdGUgdXBwZXIgYm9keQpob2xkaW5nIGEgc2hvdGd1bgphY3Rpb24gbGluZXMKZ29wcm8gZm9vdGFnZQpsb25nIHZpZXcKcG9saXRpY2FsIGNhcnRvb24KZ3JlZW5pc2ggYmx1ZSB0b25lcwp3ZXMgYW5kZXJzb24gY29sb3IgcGFsZXR0ZQp0cmljb3JuZSBoYXQKZmlsbSByZW5kZXIKZGlnaXRhbCAyZCBmYW50YXN5IGFydApnbGFzcyBidWlsZGluZ3MKYW5pbWUgbmF0dXJlIHdhbGxwYXAKcGhvdG9yZWFsaXN0aWMgZGlnaXRhbCBhcnRzCmdlb2RlCmZsdXguIGhpZ2ggZmFudGFzeQptaXN0eSBhdG1vc3BoZXJlCmxlZ2VuZCBvZiBrb3JyYQpncmVlayBhcmNoaXRlY3R1cmUKb2NjdWx0IGN5YmVycHVuawphIGNsb3NlLXVwCmZsdW9yZXNjZW50IGxpZ2h0cwp2aWV3IGZyb20gZ3JvdW5kCmhpZ2hseSBkZXRhaWxlZCBhbmQgYmVhdXRpZnVsCnJlYWxpc3RpYyBpbWFnZQpsaXRob2dyYXBoeQpqYXBhbiB3YXRlcmNvbG91cgpoZWFkIGlzIGNlbnRlcmVkCnN1biBzZXQKd2hhbGUgc2tlbGV0b24KbGFuZHNjYXBlIHBob3RvCmxvdHMgb2YgZmlyZQpvdmVyZ3Jvd24gdmVnZXRhdGlvbgpkbmQgY29uY2VwdCBhcnQKaGVyYWxkcnkKbm8gY2xvdWRzCmZsb29yCmNpbmVtYXRpYyBsaWdodGVuaW5nCnRyZWFzdXJlCmdvZHJheQpzYW11cmFpIGFybW9yCmp1bXAKYXJtb3JlZCBjb3JlCmRyb25lCmZvZ2d5IGRheQpuYXZhbCBiYXR0bGUKZ3Jhc3NsYW5kCnNtaWxpbmcgd2l0aCBjb25maWRlbmNlCmdlb21ldHJpYyBhcnQKYmxhY2sgaGFpcnMKd2l0aCBsb25nCmxha2VzCm1vb24gaW4gdGhlIHNreQpyZWQgb3JhbmdlIGFuZCB5ZWxsb3cgbGVhdmVzCnBpbmsgc3Vuc2V0CmFtZXJpY2FuIHBvc3RjYXJkIGFydCBzdHlsZQpkaW1tZWQgbGlnaHRzCmV4dHJlbWUgcmVhbGlzbQp0b29sCnNsaW0gYnVpbGQKc3ltZXRyaWNhbCBmYWNlCnNweQpmaXJlIGluIHRoZSBiYWNrZ3JvdW5kCmxvbmcgZ29sZGVuIGhhaXIKamVubmlmZXIgd3Vlc3RsaW5nCmluIHRoZSBncnlmZmluZG9yIGNvbW1vbiByb29tCnBhcmFub2lhc2NhcGUgcHMxCnRlY2hub2xvZ2ljYWwgcmluZ3MKb3Vyb2Jvcm9zCnZpY3RvcmlhbiBkcmVzcwptb21hCmNvbG9yIHBhbGV0dGUKbWVjaGEgYW5pbWUKZmFudGFzeSBzY2VuZQp2aWJyYW50IGRhcmsgbW9vZApjeWNsZXM0ZCByZW5kZXIKYmVudCBydXN0ZWQgaXJvbgpoaWdoIHF1YWxpdHkgZGV0YWlscwpldmVuaW5nIHRpbWUKYW5nZWxpbmEgam9saWUKbWFrb3RvIHNpbmthaQpldmVyeXRoaW5nCmd1eQpncmVhdAp0dW5pYwprYXJsIGJsb3NzZmVsZHQKc3RhcmluZyBhdCB0aGUgY2FtZXJhCmRpZ2l0YWwgcGVuY2lsIHBhaW50aW5nCmFscHMKcHJlc3MgcmVsZWFzZQp6b25lIG9mIGVuZGVycwpvbGVvIHBhaW50aW5nCmJhbHJvZwpuYXNhIHBob3RvCm11cHBldAptYXJrIHJ5ZGVuIHN0eWxlCsOpcGF1bGUgZGV2YW50IHBvc2UKaW5ub2NlbnQgbG9vawpuZW9uIGdsb3cgY29uY2VwdCBhcnQKdmVyeSB2YXBvcndhdmUKZGFyayBhbmQgZ2xvb215CnRvbmVkCmZhc2hpb24gcGhvdG8KYmxhY2sgd2lkb3cKcHJvcGFnYW5kYSBzdHlsZQptaW5pb25zCmVvcyByNQpiYXQgd2luZ3MKY3Jvc3Mgc2VjdGlvbgpzdG9ybXkgc2VhCnRoZW9kb3JlIHJhbGxpCmRhcmsgZnVyCnN0dWRpbyBnaGlibGkgc3RpbGwKY29uZnVzaW5nCmNodW4gbGkKdGlsdCBzaGlmdCB6YWhhIGhhZGlkIGJhY2tncm91bmQKZnVsbCBib2R5IGNsb3NlLXVwIHNob3QKd29ya3NhZmUuY2dzb2NpZXR5CmZhY2luZyBhd2F5IGZyb20gdGhlIGNhbWVyYQpoY2wKdWtpeW9lCmN5YmVydHJvbgpwb2ludGVkIGVhcnMKd2FyIG9mIHRoZSB3b3JsZHMKbW90aW9uYmx1cgpoaWdoIHJlc29sdXRpb24gdGV4dHVyZXMKc3lyaW5nZQpwcm9tbwpzY2FybGV0IHdpdGNoCnN0b3JteSBsaWdodGluZwpkZWVyCmdsb29teSBza3kKZmx1aWQgZWxlY3RyaWNpdHkKZnVsbCBib2R5IGNoYXJhY3RlcgpnYXJiYWdlIHBhaWwga2lkcwpnZW9yZ2UgY29zdGFuemEKd29ycmllZAphbiBlc3RhdGUgYWdlbnQgbGlzdGluZyBwaG90bwphd2FyZCB3aW5uaW5nLiBvY3RhbmUgcmVuZGVyCmFzeW1tZXRyaWNhbCBwb3J0cmFpdApyZWQgdGludApoZCB0ZXh0dXJlCnNoYXJwIHF1YWxpdHkKc2lnbWEgNTBtbQppbGllc2N1CmlzdGFuYnVsCmhpZ2hseSBzYXR1cmF0ZWQKeW9zaGlvIGF3YXp1CmdyYWZmaXRpIGluc3BpcmVkCmxpdCBmcm9tIGFib3ZlCmV0aGVyZWFsIHdpbmdzCmNydWVsdHkKY3V0ZSBwb3NlCndoaXRlIHNhbmQKbGVhZ3VlIG9mIGxlZ2VuZApsZXZpIGFja2VybWFuCmNsb3VkcHVuawpsdWtlIHNreXdhbGtlcgptYW5kZWxicm90CmNoYXNlCm1pcnJvciByZWZsZWN0aW9uCnBlcnNpYW4KZ2lhbnQgbW9vbgpvbGQgcGljdHVyZQpmbGFtZXMgZXZlcnl3aGVyZQpncmVnIGJyb2FkbW9yZQpwcm9mb3VuZApoYW5kCmNyZWVweSEhIQpwYXRoCmhvbHkgbGlnaHQKc2hhcGVseQpyZXRyb3dhdmUgc3R5bGUKc21hcnQgbG9va2luZwpzYXRpbiByaWJib25zCmNhcnZhZ2dpbwpjaGVla3kgc21pbGUKbGF0ZXggc2tpbgppcmlkZXNjZW50IHNtb2tlIGJlaGluZApvaWxlZApmcmFnb25hcmQKdHJhbnNmb3JtZXIKeW9kYQpjdW5uaW5nCm5hdGlvbmFsIGdlb2dyYXBoaWMgbWFnYXppbmUKYWxwaG9uc28gYXpwaXJpCmV0aGVyZWFsIGxpZ2h0CnN2ZyBzdGlja2VyCnNwYWNlcG9ydAp0aGUgZ3JlYXQgd2FsbAp0aGUgdGltZSBtYWNoaW5lCm1hdHRlLXBhaW50aW5nCmh5cGVyZGV0YWlsZWQgaWxsdXN0cmF0aW9uCmZpcmUgc3Rvcm0KcmV5CnNoZWV0IG11c2ljCnRvbSBoYW5rcwpoaWdoIHNwZWN1bGFyaXR5CmRlY2F5aW5nIGZhY2UKcGFydGljbGUgc2ltdWxhdGlvbgpzdXBlciBwcmVjaXNlIGRldGFpbApyZWZsZWN0aW9ucyBvbiB0aGUgd2F0ZXIKeW91bmcgZ2lybAp3aXRoIGEgd2hpdGlzaApoZXIgZmFjZSBpcyBjb2F0ZWQgaW4gYSB3aGl0aXNoCmNvbmZpZGVudCBleHByZXNzaW9uCnRyZW5kaW5nIG9uIGRldmlhbnQgYXJ0CndpdGggbW91bnRhaW5zIGFzIGJhY2tncm91bmQKZHJvcGxldHMKMSAyIG1tCmF0IG1pZGRheQp3YWxsIHBhaW50aW5nCmVuY2FycHVzCnBhd3MKc3RhcnJ5IG5pZ2h0IHNreQphbGwgaW4gdGhlIGFtYXppbmcgb3V0ZG9vcnMgdmlldwoyIGQgYXJ0CmZpbmUgdGV4dHVyZSBzdHJ1Y3R1cmUKMSA5IDMgMApyaWNoIGNvbG9yIHBhbGV0dGUKNCBrIGRldGFpbGVkCm5hcnJhdGl2ZSByZWFsaXNtCnVuaXZlcnNlIGJhY2tncm91bmQKemVpc3MgNSAwIG1tIGYgMS4gOCBsZW5zCnZvbHVtZXRyaWMgbGlnaHQgcmF5cwp2aXZpZCBjYXVzdGljcwpwcm9wb3J0aW9uYXRlCnJhdGF0b3VpbGxlIHN0eWxlCnJvc3NkcmF3cyBwYXN0ZWwgdmlicmFudApwYXN0ZWwgYmx1ZXMgYW5kIHBpbmtzCmR1bmdlb25zIGFuZCBkcmFnb24KZnVsbCBvZiB0YXIKbWFkZSBvZiBzbW9vdGggYmxhY2sgZ29vCnR1cm50YWJsaXNtIGRqIHNjcmF0Y2hpbmcKaW50cmljYXRlIHBsYW5ldGFyeSBnZWFycwpmb2cgbWFjaGluZQpnZXJhbGQKNCBrIG9jdGFuIHJlbmRlcgpmbG9vZGVkIGNpdHkKMyBkY2cKc3VycmVhbGlzbSEhISEKbGltZSBncmVlbgppbiBhIGRlcmVsaWN0IGhvdXNlCm1hZGUgd2l0aCB1bnJlYWwgZW5naW5lCmdsb3dpbmcgc3RhcnMKbmVvIC0gcm9tYW50aWNpc20KYmVhdXRpZnVsIG1vZGVybiBjb2xvcnMKaHlwZXJyZWFsaXN0aWMgZmFsbApoZWF0IGhhemUKdm9sdW1ldHJpYyBsaWdodGluZyAmIHNoYWRvd3MKaWRsZQppbnRyaWNhdGUgbWVjaGFuaWNhbCBkZXRhaWxzCmhpdG8gc3RleWVybAp3aGl0ZSBzcGFjZQpkYXJrIC0gYXJ0CmV4dHJlbWVseSBzaGFycCBmb2N1cwooIG5vcm1hbiByb2Nrd2VsbCBvaWwgcGFpbnRpbmcgKQppbnRlbnNlIGV5ZXMKZiAvIDIgMApqYW1lcyBqZWFuIGFuZCB5b2ppIHNoaW5rYXdhCmF3YXJkZWQKbmVidWxhIHNwYWNlIGJhY2tncm91bmQKYmlnIGNsb3VkcwppbnRyaWNhdGUgc3RlYW1wdW5rIG9ybmF0ZQpncmF5IGV5ZXMKbW9kaWdsaWFuaQpvYWsKc2hhcnAgYW5kIGRhbmdlcm91cyBzbGVlayBkZXNpZ24Kbm8gbXVzdGFjaGUKd2l0aCBzaGFycCBmZWF0dXJlcwptYXJpYW5hIHRyZW5jaApqb24gYmVya2V5CnBsZWFzdXJlCnBhcGllciAtIG1hY2hlCmdyYW5kIHRoZWZ0IGF1dG8gdmlkZW8gZ2FtZQpmaWVuZCBmb2xpbwpmYWlyeSB0YWxlIGlsbHVzdHJhdGlvbgpibHVlIGhhemUKeHN1bGxvCmhlcm8gYWN0aW9uIHBvc2UKc3dlZGlzaCBkZXNpZ24KYmxvb21pbmcKd2xvcCBhbmQgcm9zcyB0aHJhbgpob3JucyEKYW5pbWUhCmd1aWxsb2NoZQpoaWdoIHF1YWxpdHkgMyBkIHJlbmRlcgpsb25nIGx1eHVyaW91cyBnb3duCmludHJpY2F0ZSBkZXRhaWxlZCBmYWNlCnRvbnkgcm9iZXJ0cwpoaWdoIHF1YWxpdHkg4oCdCnZvbHltZXRyaWMgbGlnaHQKY3lib3JnIHNhdGFuCm5pZ2h0dGltZSEKdG9yc28gcG9ydHJhaXQKY3JlZXB5IG1hcmlvbmV0dGUgcHVwcGV0Cm1hbmllcmlzbQp0b3dlcmluZwpva2FtaQpmaWd1cmluZXMKd2l6YXJkIGhhdCBjaW5lbWF0aWMgbGlnaHRpbmcKcmVhZGFiaWxpdHkKYmxhY2sgaG9vZGllCnNob3QgYXQgbmlnaHQgd2l0aCBzdHVkaW8gbGlnaHRzCmRhcmsgc291bCBjb25jZXB0IGFydApjeWJlcnRyb25pYyByb2JvdApiaW8gLSBtZWNoYW5pY2FsIGludGVsbGlnZW5jZXMKZ2xvd2luZyBib25lcwpsb3cga2V5IGxpZ2h0Cnl1bGlhIG5ldnNrYXlhCnR1cmJ1bGVuY2UgZmlsdGVyCnBhcHJpa2EKdmlzaWJsZSBzdG9tYWNoCnJlZCBoZWFkcGhvbmVzCmRlc2VydGVkIHNoaW5qdWt1IGp1bmsgdG93bgpvZmYtd2hpdGUgcGxhdGVkIGFybW9yCmxlZnQgZXllIHN0cmlwZQptZWxpbmRhIG1hdHlhcwpsb25nIGJsYWNrIGNyb3duCnVsdHJhIHRleHR1cmUKc21vb3RoIGlsbHVzdHJhdGlvbgphbmltZSBjaGFyYWN0ZXIgYW5hdG9teQpkYW5jZWZsb29yIGtpc21ldApwaG9uayBtdXNpYyBiYWNrZ3JvdW5kCmphcGFuIGF0IG5pZ2h0CmhlYWxpbmcgdGhyb3VnaCBtb3Rpb24KYW5nZWxpYyBoYWxvCmZyb20gc2lkZQpzdGFuZGluZyBvbiBtYWQgbWF4IHBhbnplciB0YW5rCmxhcmdlIG1lZGl1bSBhbmQgc21hbGwgZWxlbWVudHMKZnJvbSB0aGUgc2lkZQphbmRyZWFzIHJvY2hhcwpsZXNiaWFuIGFydAplY2t0b2Nocm9tZQp1bnJlYWwgNSBlbmdpbmUgaGlnaGxseSByZW5kZXIKZ3VzdGF2ZSBrbGltdAoxIDggMiA2CjQgayByZXNvbHV0aW9uIGJsYWRlIHJ1bm5lcgppY2UgY2F2ZQp0aGljayBibGFjayBiZWFyZApwZXJzb24gaW4gZm9yZWdyb3VuZApjYXQgc2VhaG9yc2UgZnVyc29uYQpkZXRhaWxlZCBpbnRyaWNhdGUgZW52aXJvbm1lbnQKaW50cmljYXRlIHJvYmVzCnRhcm90IGNhcmQgYmFja2dyb3VuZAo0MCdzIGFkdmVudHVyZXIKbGVkIHB1cnBsZSBleWVzCmNpbmVtYXRpYyBzaG90IGVwaWMgcG9ydHJhaXRzCnVuZnJhbWVkCnN0YW5kaW5nIGluIGEgYm90YW5pY2FsIGdhcmRlbgp3aWxsaWFtIG9wZW4KbWVkaWV2YWwgdG93biBsYW5kc2NhcGUKY2xlYXIgZm9jdXNlZCBkZXRhaWxzCnNpbHZlciBkZWNocm9pYyBkZXRhaWxzCm1hbnkgbWVjaGZsb3dlcnMKZGFyayBsaWdodGluZyBhdG1vc3BoZXJlCmNpbmVtYXRpYyBtb29keSBjb2xvcnMKc2hvdCBvbiBpcGhvbmUgMSAzIHBybyBtYXgKcGFsZSBibGFjayBhcm1vcgphdXNsZXNlCmJyb3duIGhhaXIgZnJpbmdlCndoaXRlIHdhbGwgYmFja2dyb3VuZAo4ayByZXNvbHV0aW9uIGFydHdvcmsKaHllbmEgZnVyc29uYQppbiBjaXR5IHN0cmVldCBhdCBuaWdodApmbGVldGluZwpnaWxsZWFyZCBqYW1lcwpkamlubiBtYW4gbWFsZSBkZW1vbgpzYWxhZCBhbmQgd2hpdGUgY29sb3JzIGluIHNjaGVtZQp5b3VuZyBiZWF1dGlmdWwgd29tYW4KbW9vbmJvdwpjaW5lbWF0aWMgd2lkZSBzaG90Cmh1bWFub2lkIGZlYXRoZXJlZCBoZWFkCmh5cHJlcmVhbGlzdGljCndlYXJpbmcgZmFzaGlvbiBzdWl0CmdvZGRlc3Mgb2YgbmF0dXJlCndpdGggZ2VhcnMgYW5kIHR1YmVzCndpdGggYXJtb3VyCmZsdWZmeSBiYW5ncwpqdXJpIG1pc2FraQpnb2xkIGFuZCBzaWx2ZXIgdG9uZXMKd2F0ZXJjb2xvciBzdHJva2VzCmdyZWVuIG9yYyBmZW1hbGUKbWFrb3RvIHNoaW5rYWkhCnB1cnBsZSBjbG90aGVzCnBvbGFyaXplcgpxdWVjaHVhCmRlZXJzCnRoZW4gbGVhdmUgaXQgdG8gZ29kCmRlZXAgb3ZlcmhhbmdzLiBncmVlYmxlLiA4IGsKdGhpY2sgbGluaW5ncwpzdGV2ZSBuaWxlcwp2aHMgbm9pc2Ugc3RhdGljCnJlZCBlbGVnYW50IHNoaXJ0CndlYXJpbmcgYSBub2JsZXdvbWFuJ3Mgb3V0Zml0CmNodWNrIGNsb3NlOjcKY2FybCBzcGl0endlZzo3CmludGVyY3Jvc3NlZCBhbmltYWwKaW4gd2FyZWhvdXNlCmhpZ2ggZGVmaW5pdGlvbiBjaGFvdGljCndlYXJpbmcgaW4gYmxhY2sgY2xvdGhlcwpwb3J0cmFpdCBvZiBhIGZlbWFsZSBhbmRyb2lkCndoaXRlIGFjY2VudCBsaWdodGluZwpsYXN0IGplZGkKaGlnaGx5IGRldGFpbGVkIOKAnQpwb3JjZWxhaW4gc2tpbiDigJ0KYXdhcmQgLSB3aW5uaW5nIGNyaXNwIGRldGFpbHMg4oCdCnRyZW5kaW5nIG9uIGFydHN0YXRpb27igJ0KNGsgcGhvdG/igJ0KY2hhcmFjdGVycwp0b20gYmFnc2hhdyApICkgKQo4IDUgbW0gZiAvIDEuIDgKYWNjb21wYW55aW5nIGh5YnJpZApzaGFyawpzdXBlcmZsYXQgYXJ0IG1vdmVtZW50CnR3byB0b25lCjhrIGh5cGVyIHJlYWxpc3RpYwpuZW9nb3RoaWMgYXJ0CmNsZWFuIGFuZCB0ZXh0dXJlcwpzdHlsZSBvZiBhcnRnZXJtCmhvbWUKZ3V5IGJpbGxvdXQKaGFtbWVyCmdlbnpvbWFuIGFuZCBnYXJ5IGd5Z2F4CnBpbmsgbWlzdApkcmFtYXRpYyBsaWdodGluZyBzaGFycCBmb2N1cwpnb2Qgb2YgZGVhdGgKbGFyZ2UgZm9ybWF0Cm9mZmljZSBpbnRlcmlvcgp0b3AKbG92ZWx5IHBhc3RlbCBjb2xvcnMKZGVlcCBzcGFjZSBleHBsb3JhdGlvbiEhIQpsb2lzIHZhbiByb3NzZHJhd3MKMSA5IDMgMCBzCm1vZGVybiBsb29rCmNoaW5lc2UgaW5rIHBhaW50aW5nCnByaW1pdGl2ZQpvbGQgbW92aWUKcGVyZmVjdCBmb2N1cwpsb25nIGZsdWZmeSBjdXJseSBibG9uZCBoYWlyCmJsYWNrIGplYW5zCndvdyA0IGsgZGV0YWlsIGZhbnRhc3kKd29vZGVuIGJ1aWxkaW5ncwoxIDkgMCAwIHMgcGhvdG9ncmFwaHkKY29sb3VyZWQgZmlsbSBwaG90b2dyYXBoeQpsb29uZXkgdHVuZXMKbmVvIC0gZmF1dmlzbQp2ZXJ5IGV4cGVuc2l2ZQp1bHRyYSByZWFsaXN0aWMgZGlnaXRhbCBwYWludGluZwpnYW50egp5ZWxsb3cgYW5kIGdyZWVuCm1pcnJvcnMgZWRnZQpkaWdpdGFsIGFydHMKMTk2MApodW1hbiBmYWNlcwp3aW5uZXIgb2Ygc2V2ZW4gb3NjYXJzCjE5NjkKdGVjaG5pY29sb3IgZmlsbQphY2NlbnR1YXRlZCBoaXBzCmhvc3RhZ2VzCmluY2VwdGlvbgpyb21hbiBoaXN0b3JpYyB3b3Jrcwpyb3NzIHRhbgpkYXJrIGJsdWUgZXllcwp0aGluIGZhY2UKc2tpbiBibGVtaXNoZXMKaG91c2UgYmFja2dyb3VuZApmYWNlIGNsb3NlIC0gdXAKZnVsbCBvZiBnbGFzcyBmYWNhZGVzCnNhdHVyYXRpb24KaG9sbHl3b29kCjEwNW1tCmd0YSA1IGxvYWRpbmcgc2NyZWVuCmhvbG9ncmFwaHkgc3BhY2UKcGl4aWUgY2hhcmFjdGVyCnJlZCBsZWQgbGlnaHRzCnBvcnRyYQpjb3p5IGFuZCBwZWFjZWZ1bCBhdG1vc3BoZXJlCm1vaGFtZWQgY2hhaGluCmNoaXRpbgpjeWJlcnB1bmsgY2l0eSBpbiB0aGUgYmFja2dyb3VuZApwZXRlciB0YXJrYQpmdXR1cmVwdW5rCm9uZSBwZXJzb24Kb3VjaGggYW5kIGFuZCBpbm5hdGUgc3R1ZGlvCmhpZ2hseSBkZXRhaWxlZCAzIGQgcmVuZGVyCmNvenkgbGl2aW5nIHJvb20Kc2FrdXJhIHNlYXNvbgpzcXVpZAp2YW50YWJsYWNrCmNyYXlvbiBkcmF3aW5nCnNvZnQgd2FybSBsaWdodGluZwpzY3J1ZmZ5IGJlYXJkCnByb2Zlc3Npb25hbCBxdWFsaXR5CmhpZ2hseSBkZXRhaWxlZCBmcmFjdGFscwpodW1hbiBib2R5CmVwaWMgZmFudGFzeSB3ZWFwb24gYXJ0CmV4cG9zZWQgbWlkcmlmZgppbnRyb2R1Y3Rpb24gZmFjdG9yeSBwaG90bwpzY3VscHR1cmFsCjNkcyBtYXgKZGFyayBhbWJpZW5jZQp3ZWFyaW5nIGEgc3VpdCBhbmQgdGllCmxvaXMgZ3JlZW5maWVsZApoeXBlcnJlYWxpc3RpYyBjb25jZXB0IGFydAp1bnJlYWwgNiBicmVhdGh0YWtpbmcgZGV0YWlsZWQKbXV6emxlIGZsYXNoCmNvbG9yZnVsIHNtb2tlIGluIHRoZSBiYWNrZ3JvdW5kCmNsb3RoZXMKYXBwbGVzCmRuZCBtYXAKZnVsbCBzaXplCmJsdWUgaW1hZ2UKZGlzaG9ub3JlZCBhZXN0aGV0aWMKb2lsIG9uIHRoZSBjYW52YXMKZ2lhbnQgdHJlZXMKNGsgZGV0YWlsZWQgcG9zdCBwcm9jZXNzaW5nCmNpbmRlcmVsbGEKd2ludGVyIHNlYXNvbgptb3ZpZSBjb3Zlcgp0YXJvdCBjYXJkIGFydAphIGJlYXV0aWZ1bCBhcnR3b3JrIGlsbHVzdHJhdGlvbgpleGlzdGVudGlhbCBob3Jyb3IKYWVyaWFsCnN1bnNldCBiYWNrZ3JvdW5kCmNhbmFscwpzaGFycCBjb2xvcnMKZGF2aWQgd2llc25lcgpoaWdoIGRlZmluaXRpb24gcGhvdG9ncmFwaHkKYW50aHJvcG9sb2d5CnBlcmZlY3QgcXVhbGl0eQp3YXJtIGF0bW9zcGhlcmUKY2hyaXN0aWFuaXR5CnBob3RvcmVhbGlzdGljIG9pbCBwYWludGluZwpnb2xkZW4gcmF0aW9uCmdyZWcgcnV0a293c2tpIGFuZCBsYXJyeSBlbG1vcmUKaGlnaCBldm9sdXRpb24KbG9uZyBncmV5IGhhaXIKbWFkZSBpbiBwaG90b3Nob3AKaW4gYSBsYXJnZSBncmFzc3kgZ3JlZW4gZmllbGQKYWJhbmRvbmVkIGJ1aWxkaW5ncwo4ayBkZXRhaWwgcG9zdCBwcm9jZXNzaW5nCmxhcmdlIHdoaXRlIGJvcmRlcgpoaWdoIHF1YWxpdHkgZmFudGFzeSBhcnQKbGVhbiBidXQgbXVzY3VsYXIKY2FuZGxlIGxpZ2h0aW5nCmdvdWFjaGUgaWxsdXN0cmF0aW9uCmJlaGVtb3RoCmdpcmwgcG9ydHJhaXQKYXR0cmFjdGl2ZSBmYWNlCndpdGggZmxvd2VycwpudmlkaWEgYWkKY2FzcGFyIGphbWVzIGd1cm5leQpqb2huc29uIGhlYWRlCm1hcnRpbiByYXBoYWVsIGxhY29zdGUKMjAgeWVhcnMgb2xkCndvcmxkCmZyb3plbgppbiB0aGUgYXJnZW50aW5lIGNvbmdyZXNzCnN0dW5uaW5nIHBob3RvZ3JhcGh5CnZvbHVtZQpibGFjayBsaW5lcwpkeXNvbiBzcGhlcmUKYmxhY2sgbGVhdGhlciBhcm1vcgpkZWVwIGRhcmsKY29tZm9ydGFibGUKZXh0cmF2YWdhbnQgbWF0dGUgcGFpbnRpbmcKam9obiBhbHZpbgpzYWQgbW9vZApnbG9zcyBmaW5pc2gKYm9zc2ZpZ2h0CnRoZSB3aXRjaGVyIDMKYWZyaWNhbiBzYXZhbm5haApmb3ggbmV3cwpsdWNhcyBjcmFuYWNoCmNpbmVtYXRpYyBtb3ZpZSBwb3N0ZXIKY29uY2VwdCB3b3JsZCBhcnQKcHVycGxlIGV5ZXMgd2l0aCByZWQgZXllIG1hcmtlcnMKbWFyY28gcGxvdWZmZQpzY2FyZWQgZmFjZQpoeXBlciByZWFsaXN0aWMgcG9ydHJhaXQKZ29sZGVuIGpld2VscnkKaHlwZXItcmVzbGlzdGljCmNocmlzdGlhbiBkaW1pdHJvdgptZWNoYSBzdWl0CmRhdmlkIG1hY2sKYXRtb3NwaGVyaWMgcmVuZGVyCnN0cm9uZyBsaW5lcwpwb250b3Jtbwp0b25hbGlzbSBzdHlsZQp1bHRyYSBmYWNpYWwgZGV0YWlsCnBvcnRhaXQgcGhvdG8KbW9kZXJuIHN0eWxlCmFybm9sZCBzY2h3YXJ6ZW5lZ2dlcgpyb21hbnRpYyB1bmRlcnRvbmVzCmFuaW1lIHNjZW5lcnkKYW5uYSBkaXR0bWFuCjRrIGhpZ2hseSBkZXRhaWxlZAp2b2x1bWV0cmljIHNoYWRvd3MKcGluayBhcmNoZXMKdmVyeSB2ZXJ5IHN1cnJlYWwKcHJvdWQgZW1wZXJvcgpodW50aW5nCmJleW9uY2UKdG9rdXNhdHN1CmJsYWNrIHdvbWFuCmJpZyBlYXJyaW5ncwpncmVhdHN3b3JkCmFtYW5vIGFuZCBvbGl2aWVyIGxlZHJvaXQKaG9sbG93IHNvdWxzCmJsYXNwaGVtb3VzCnZlcnkgYXR0cmFjdGl2ZSBtYW4gd2l0aCBiZWFyZAphYXJvbiBicm9va3MKc2VydmluZyBidXJnZXJzCmZpZ2h0aW5nIHN0YW5jZQpleHByZXNzaW9uaXN0aWMKd29yayBvZiBhcnQKa29kYWsgZmlsbSBwaG90bwpwZXJmZWN0IG5hdHVyYWwgc2tpbiB0b25lcwppc29sYXRlZCBvbiB3aGl0ZQphcyBjb2hlcmVudCBhcyBkYWxsLWUgMgpsb25nIG5lY2sKbXV0ZWQgcmVhbGlzdGljIGNvbG9ycwpoaWdoIHN0eWxpemF0aW9uCmNvbGQgbGlnaHQKdGF0dG9vIHNrZXRjaApzdXJwcmlzZWQgZXhwcmVzc2lvbgpkb3JvaGVkb3JvCmJsYWNrc21pdGgKbmVvLWdvdGhpYyBjb25jZXB0CnZpc3VhbCBub3ZlbCBzcHJpdGUKYmVyc2VyayBzdHlsZQpwb3NlIHN0dWR5CmZlbmRlciBzdHJhdG9jYXN0ZXIKbmV1dHJhbCBsaWdodGluZwpuaWVsbHkKcmVsYXhlZCBleHByZXNzaW9uCmZsb3dpbmcgd2F0ZXIKc2NyaWJibGUgYXJ0CmNvbWJhdCBzdGFuY2UKbGVhdGhlciBib290cwpzcGVsbGNhc3RpbmcKcGllY2VzCmFjdGlvbiBtb3ZpZSBwb3N0ZXIKYmFjdGVyaWEKcXVpeGVsIG1lZ2FzY2FuCmJhbGwKZ29vc2UKc3R1bm5pbmcgZ3JhbmQgYXJjaGl0ZWN0dXJlCnZpYnJhbnQgYnV0IGRyZWFyeSBibHVlCmhpZ2ggY2FtZXJhIGFuZ2xlCm5hdGhhbiBmaWVsZGVyCmd1YXJkaWFucyBvZiB0aGUgZ2FsYXh5CnBvcnRyYWl0IG9mIGVsb24gbXVzawppbnRlcmdhbGFjdGljCmJhY2tncm91bmQgZm9jdXMKOGsgcG9ydHJhaXQgcmVuZGVyCnVua2VtcHQgYmVhcmQKamV0cGFjawp1bnJlYWwgZW5naW5lIG9jdGFuZSByZW5kZXIKcmVkIGN1cnRhaW5zCmltYWdlCmphY2sgbmljaG9sc29uIHBsYXlzIHRlcm1pbmF0b3IKam9obiBjZW5hCmNhcHliYXJhCmpvdGFybyBrdWpvCnJlYWxpc3RpYyBjb2xvcmZ1bCBwaG90b2dyYXBoeQpoaWdoIHF1YWxpdHkgbGlnaHRpbmcKY29sb3JmdWwgZGlnaXRhbCBhcnQKYmxhY2sgY2FwZQo4ayBwb3N0IHByb2R1Y3Rpb24KZmFudGFzeSBnYW1lIGFydAprcmFrZW4Kc2t1bGwgbWFzawpsYXN0IHNlbGZpZSBvbiBlYXJ0aApoYXVudGVkIGhvdXNlCmduYXJseSBkZXRhaWxzCmRpZ2l0YWwgZmFzaGlvbgprbm93bGVkZ2UKbGFib3JhdG9yeSBpbiB0aGUgYmFja2dyb3VuZApsdXNoIGxhbmRzY2FwaW5nCnBhaW50dG9vbCBzYWkKbW9ydGFsIGtvbWJhdApjZXJlbW9uaWFsIHBvcnRyYWl0CnRlcnJvciBnbG93cwpyZWFsaXNtIHBhaW50aW5nCnBpeG9sb2dpYyB0b3Agcm93Cmxhc2VyIGxpZ2h0cwpicmlnaHQgY2FtZXJhIGZsYXNoIGVuYWJsZWQKaHVnZSBjcm93ZApwb3J0cmFpdCBvZiBiYXRtYW4KY2xhc3NpY2FsIG9pbCBwYWludGluZwpzaGlueSBnb2xkIGJhY2tncm91bmQKcG9ydHJhaXQgb2YgYSBjYXQKcnViaWVzCmlzbyAxMDAwCmh1bWFuIHNpbGhvdWV0dGVzCnByaW5jZXNzIHplbGRhCmdvb2dsZSBpbWFnZXMKY2xlYW4gbGluZWFydCBhbmQgY29sb3IKc2FpdGFtYQpjZXJhbWljCnZpc2NlcmFsCndvb2RmaXJlZApyZWFsaXN0aWMgd2F0ZXJjb2xvdXIKc3VibWVjaGFub3Bob2JpYQp6ZWxkYQp0aGUgbW9uYSBsaXNhCm9uIGEgaGlsbApiZW5vaXQgbWFuZGVsYnJvdApmbGlnaHQKKCgoZWR3YXJkIGhvcHBlcikpKQpjYWJsZQp2ZW5vbQpvdXQgb2YgcGxhY2UKd2Fsa2luZyBkZWFkCm1pZGRsZSBzaG90IHdhaXN0IHVwCnBob3RvIGZyb20gYWJvdmUKd2FsbHMKbWFnbm9saWEgbGVhdmVzIGFuZCBzdGVtcwpzdHVubmluZyBza3kKcG9tcGVpaQo4IGsgcGhvdG9ncmFwaApjb2xvcmVkIHdvb2RjdXQKdG9hZHMKY2luZW1hdGljIGNvbnRyYXN0CmRlcHJlc3Npb24gYXRtb3NwaGVyZQpwYXJhbWV0cmljCmdyZWVuIHJvYmUKaW4gYXR0YWNrIG9uIHRpdGFuCmNhcnZlZCBzdG9uZQpyZWFsaXN0aWMgcmVuYWlzc2FuY2UgcG9ydHJhaXQKaGlyb2FraSBzYW11cmEKY2VudHJlIGltYWdlCnNoaW1tZXJpbmcgYW5kIHByaXNtYXRpYwpsb25nIGV5ZWxhc2hlcwpmbHlpbmcgYmlyZHMKZnVsbCBjb2xvcnMgaGQKZGVwcmVzc2luZyBhdG1vc3BoZXJlCmZpbGxlZCB3aXRoIHBlb3BsZQptYWNoaW5lIHBhcnRzCjYgcG9pbnQgcGVyc3BlY3RpdmUKc3BvcnQgcGhvdG9ncmFwaHkKcnBnIGl0ZW0KbG92ZWx5IGFuZCBjdXRlCmludHJpY2F0ZSBkZXRhaWwgcmVhbGlzbSBoZHIKdGF0dG9vIGRlc2lnbiBza2V0Y2gKaXJpZGVzY2VudCB2aXNvcgpiaW9sdXNlbmNlCm5lbyAtIGZpZ3VyYXRpdmUKYXRtb3NwaGVyaWMgcGhvdG9ncmFwaApwYWxlIGdyYWRpZW50cyBkZXNpZ24KY29sZCBibHVlIHRvbmVzCmNoaWxkcyBkcmF3aW5nCmVhc3Rlcm4gZnJvbnQKam9obiBiZXJrbGV5CmFkdmFuY2VkIHRlY2huaXF1ZQppbiBmcm9udCBvZiBhIHBhbGUgZnVsbCBtb29uCm15c3RpY2FsIGNvbG9yIHNjaGVtZQppbiB0aGUgd2ludGVyCmRhcmsgZXBpYwp2b2x1bWV0cmljIGlsbHVtaW5hdGlvbgpzdHVubmluZyBhcnQKNCBrIHBvc3QgcHJvY2Vzc2luZwpjbGVhbiBzdHJva2VzCmdlbmVyYXRpdmUKc3ltbWV0cmljIG1hdHRlIHBhaW50aW5nCmF0bW9zcGhlcmljIGFuZCBvYnNjdXJlCnRvZGQgaGlkbwpjdXJ0YWlucwpwb2xpc2hlZCBsb29rCmluayBvdXRsaW5lcwpvdXRmaXQgZGVzaWducwp0aWdodCBzaG90CmluIGNsb3RoZXMhIGludHJpY2F0ZQp2YXBvcndhdmUgbGlnaHRpbmcgc3R5bGUKMSA5IDcgNwppbiAtIGdhbWUgZm9vdGFnZQpib2tlaCBsaWdodHMKYmxhY2sgc2tpbiEhIQpzdGFuZGluZyBvbiB0d28gbGVncwooICggKCBob3Jyb3IgYXJ0ICkgKSApCnBsZWFzaW5nIGFlc3RoZXRpY3MKY29tYmF0IGhlbG1ldAprZXJlbSBiZXlpdAohISBsb3cgY29udHJhc3QhIQpsb3JkIG9mIHRoZSByaW5ncyBjYWxlbmRhcgpjbG90aCBwaHlzaWNzCmdhc21hc2sKb3BlbiBzcGFjZQpzaGluaW5nIHN0YXIKbmVhciBmdXR1cmUKZHJhbWF0aWMgc21pbGluZyBwb3NlCnBob3RvIHJlYWxpc2l0YwoxIDkgMSA3CjggayBwb3N0IHByb2R1Y3Rpb24Kc2VkdWN0aXZlIGN5YmVycHVuayBkYXJrIGZhbnRhc3kKc2NyZWVuY2FwCm1vbnN0ZXIgbWFudWxhCnN0cmFpZ2h0IG9uCmRpZ2l0YWwgc2N1bHB0dXJlCm9pbHkKZG5kIGJleW9uZAptYW5kZWxidWxiZXIgZnJhY3RhbApmYW50YXN5IGdlbnJlCm1pbmltYWxpc3QgY29tcG9zaXRpb24Kc3Bpcml0dWFsIGVubGlnaHRlbm1lbnQKbHVtaW5pc3Qgc3R5bGUKZGVhdGggbm90ZSBzdHlsZQpicmEKc2hvdWpvCmRldGFpbGVkIGV5ZXMhIQplbGVjdHJpY2FsIHdpcmVzCmh5cG5vdGl6ZWQKMSA3IHRoIGNlbnR1cnkKYmx1ZSBhbmQgd2hpdGUgdG9uZXMKd2VsbCBmcmFtZWQKZ2FsYWN0aWMgZG10IGVudGl0eQp3aGl0ZXNwYWNlCjMgZCBzaGFwZXMKY2VsIC0gc2hhZGVkIGFydCBzdHlsZQpmcmFjdGFsIHBhdHRlcm5zCnRoaWNrIHN0cm9rZXMKLSA4IGsKc2NpZW5jZSAtIGZpY3Rpb24KZ3JvdW5kIGFuZ2xlCmxhcmdlIHJvc2UgcGV0YWxzCmdvbGQgdGludApkZWF0aGx5CnN0eWxlIG9mIGplc3BlciBlanNpbmcKcGluc3RyaXBlIHN1aXQKYWR3YXJkIHdpbm5pbmcKbXVsdGljb2xvcmVkIGhhaXIKdGFuZSBza2luCmN1YmVuc2lzCmFtcGxpZmllZCByaXR1YWwgZW5naW5lCmxpbWUKZW5pZ21hdGljIHNjZW5lCnlvdW5nIGN1dGUgZmFjZQpjYXZlIGdsb3dpbmcgc3RvbmVzCmZvdXJ6ZQpib2tlaCBjb2xvciBiYWNrZ3JvdW5kCnRhcmVtZSBleWVzCm5vaXNlIGZpbHRlcmVkCmFuaW1lIG1hbmdhIHBhbmVsCmNvb2wgd2hpdGUKZGFuY2VyCmNvbG9yZWQgd29vZGJsb2NrIHByaW50CmdhbGxlcnkKYW5hdG9teSBza2lsbHMKYW5kcmVhcyBtIHdpZXNlCnN0b3J5Ym9vayBsYXlvdXQKZ29kZXMKdGhlbWUgcGFyawptaW5kIHdhbmRlcmluZwpnZWFyCmV2aWwgY3VsdAptYXR1cmUgY29sb3Igc2NoZW1lCmJva2VoICkKZXBpYyBuYXR1cmFsIGxpZ2h0CmNoaXJvcHRlcmEgaGVhZApkcmliYmxlIHBvcHVsYXIKbG92aW5nIGVtYnJhY2UKdGVlbgpjdXRlbmVzcwpibGFjayBnb2xkIHNtb2tlIGluawpkbmQgZmFudGFzeSBkaWdpdGFsIGFydApob2xkaW5nIGZpcmUgYW5kIGVsZWN0cmljaXR5CmJlYXV0aWZ1bCBnaXJsIG5lY3JvbWFuY2VyCmZvaWwgZWZmZWN0CmR5bmFtaWMgZHJhbWF0aWMgbGlnaHRpbmcKZnJhY3RhbCBwYWlzbGV5IGlubGF5CmJpZW5uYWxlCmRpZWdvIGZhemlvCnZlZ2V0YWJsZXMKZnVsbCBtb29uIGJ1cmllZCBpbiBzYW5kCndlYXJpbmcgZGlydHkgb3ZlcmFsbHMKZm9nIG1pc3Qgc21va2UKY2hlZWtib25lcwp1bHRyYWNsZWFyIGludHJpY2F0ZQp0dXJib3NxdWlkCnNwaXJhbCBsaW5lcwpvcnRob3ZpZXcKZmluZSBmaWxtIGdyYWluCnNvZnQgbmF0dXJhbCBsaWdodApjYW52YXMgY29hdGVkIHdpdGggcmVkIHBhaW50CnRpZ2h0IGZpdApoaWdoIHJlZmxlY3Rpb25zIG9pbApsaXF1aWQgaGlnaCBnbG9zc3kKc2hhcmRzIG9mIHRpbWUKcmFyZSBsdGQKaHVnZSBjdXAgb2YgY29mZmVlCmp1bGlhIHNhcmRhCnNoYXJwIGFybW9yCnNoYXJwIG1ldGFsIGRyYWdvbiBjbGF3cwp3YXJmcmFtZSBob3VuZApyb3VuZCBmYWNlZApncmVlbnMpCm1hbiBkcmVzc2VkIGFzIGEgY2hpY2tlbgplc290ZXJpYyBjbG90aGluZwpyZWR1Y2VkIGNvbnRyYXN0CmNvbGxlZW4gbW9vcmUgMiAyIHllYXJzIG9sZApvcmFuZ2UgaGVhZAp1bmNvbWZvcnRhYmxlCmFydCBmb3IgdGhlIGdhbWUKb21pbm91cyBhcG9jYWx5cHRpYyBiYWNrZ3JvdW5kCnJvdGgncyBkcmFnIG51dCBmdWVsCnB1cnBsZSBjb2xvciBwYWxldHRlCmJhcnJlbGV5ZSBmaXNoCmNocm9tZSB2b3J0ZXgKdmludGFnZSBmaWxtIHBob3RvCnJvY29jbyBydWZmbGVzIGRyZXNzCm1hbGUgdGVlbmFnZXIKdG9hZApiZWF1dGlmdWwgYW5kIGNpbmVtYXRpYyBsaWdodGluZwpyZW5hdWx0IHVsdGltbwpzdXBlciBoaWdoIGVuZXJneQpibGFjayBkZXB0aHMKZmFjZSBmb2N1c2VkCmVsZXZhdGVkIGNvbnNjaW91c25lc3MKYWVyaWFsIGlyaWRlY2VudCB2ZWlucwoyIDAgMiAxIGNpbmVtYXRpYyA0IGsgZnJhbWVncmFiCnNtb290aGVuZWQKdHJhbnNsdWNlbnQgZ2lsbHMKdG93ZXJpbmcgaGlnaCB1cCBvdmVyIHlvdXIgdmlldwpzbGlnaHRseSBhd2t3YXJkIHNtaWxlCnJlYWxpc3RpYyBib2R5IHN0cnVjdHVyZQptYWNybyBzaG90IGhlYWQKbGFyZ2UgY2FwZQptYWRlIG91dCBvZiBwbGFzdGljCmxpZ2h0aW5nIGJhY2tncm91bmQKZ3VuIG1ldGFsIGdyZXkKY3Jvd24gb2YgKHBpbmsgbGFzZXJzKQpsYXJnZSBibHVlIGRpYW1vbmRzCnRyZWUgb2YgbGlmZSBpbnNpZGUgdGhlIGJhbGwKZnVqaXRhIGdvcm8hCnNvZnQgZGVsaWNhdGUgZHJhY29uaWMgZmVhdHVyZXMKc3ltbWV0cmljYWwgZGV0YWlsCm11dGVkIGxpZ2h0aW5nCmRyYW1hdGljIHZvbHVtZXRyaWMgbGlnaHQKc2xlZWsgc21vb3RoIHdoaXRlIHBsYXRlZCBhcm1vcgpzbW9raW5nIG1hc3NpdmUgYW1vdW50cyBvZiB3ZWVkCmNvbXBsZXRlIGRhcmtuZXNzIGJhY2tncm91bmQKcmVhbGlzdGlj4oCdCnVwc2NhbGVkIHRvIGhpZ2ggcmVzb2x1dGlvbgppbiBhbiBvbGQgd2VzdCBjYWJpbgphcmlhbiBtYXJrCnNoaW5pbmcgbGFtcHMKdGlib3IgbmFneQp0b20gb2YgZmlubGFuZCBzdHlsZQptaWNoYWVsIGJvc2Fua28Kc3BhY2Ugc3VpdCB3aXRoIGEgbW9kZXJuIGhlbG1ldAp2ZXJ5IHN0eWxpemVkIGNoYXJhY3RlciBkZXNpZ24KbWFyeSBsb3Vpc2UgYnJvb2tzIGlzIGhhbGYgcm9ib3QKc2xpZ2h0bHkgZXJvdGljCmR5bmFtaWMgYmVhdXRpZnVsIGxpZ2h0aW5nCndsb3AgZ2xvc3N5IHNraW4Kb3JhbmdlIC0gaGFpcmVkIGFuaW1lIGJveQpwYWludGVybHkgcG9ydHJhaXQKbG93IGNsb3VkcyBhZnRlciByYWluCnBoaWwgbm90byBjb21pY2Jvb2sgY292ZXIgYXJ0CmVsZWN0cmljIGF1cmEgd2l0aCBwYXJ0aWNsZXMKaGFzc2VsYnJhZCBwaG90b2dyYXBoeQphc3ltbWV0cmljYWwgYXJ0CnN0YXRobW9yZSA0IDAgMApyZWFsaXN0aWMgcGhvdG8gb2YgYSB0b3duCidzaWxlbnQgaGlsbCAnCmRlbW9uaWMhIGNvbXBlZGl1bSEKc25vb3AgZG9nZyBhcyBkb2N0b3Igc3RyYW5nZQp0aGUgb21uaXBvdGVudCBhc3Nhc3NpbgpwYWxlIGJsdWUgb3V0Zml0CnN1cGVyIHJlYWxpc3RpY+KAnQpyYXNwYmVycmllcwphdmFudCAtIGdhcmRlCjMgZCA4IGsKYmxhY2sgc2NhbGVzCmZlbGluZQpncmltc2hhdwphYnN0cmFjdCBvaWwgcGFpbnRpbmcKc2l0dGluZyBvbiBpbnRyaWNhdGUgdGhyb25lCnByb2Zlc3Npb25hbCBwYWludGluZwpwYWludCBwb3VyCmhhbGZ0b25lCmRhdmlkIGZpbmNoZXIKZGV2aWFudGFydCBhcnRzdGF0aW9uIGNnc2Nvc2lldHkKc3Vuc2V0IHRpbWUKc2Nvd2xpbmcKc2hhcnBseSBkZXRhaWxlZApjcmFpZyBtdWxsZW5zCmZpbmxhbmQKcnVyYWwKdGFuCm5vcm1hbCByb2Nrd2VsbApvdGhlcndvcmRseQpwZW9wbGUgc2l0dGluZyBhdCB0YWJsZXMKMyBkIGRlc2lnbgoxIDkgOCAzCmFycmlmbGV4IDMgNQpjbG90aGluZyBwaG90b2dyYXBoeQpzb3RuCnNhdGlzZnlpbmcKcHVuayBwYXJ0eQoxOTQwcwp3aW5raW5nCnJldHJvcHVuawppbiBwYXJpcwoxOTY1CnRyb3BpY2FsIGZpc2gKc3RyZWV0IGFydDo0IG1hc3RlcnBpZWNlCjE5OTUKMiAwIDAgNgpkcmFnYW4gYmliaW4Kc2FnZSBzbW9rZQphbGJlcnQgbHluY2gKYXJ0aXN0aWMgcmVuZGVyCnBpLXNsaWNlcyBhbmQga2lkbW9ncmFwaAplZGdhciByaWNlIGJ1cnJvdWdocwpkYXJrIHZpYmUKbGFyZ2Ugc3Ryb2tlcwppYW4gY2FsbHVtIQphYmlnYWlsIGxhcnNvbgp0b3JjaCBsaWdodApwb3JlcwpvdXRzaWRlIG9mIHRpbWUgYW5kIHNwYWNlCnBpeGFyIHN0aWxsCnNhbmRjYXN0bGUKZ3JhcGhpY2FsCmZhY2lhbCB0YXR0b29zCnVlIG1hcmtldHBsYWNlCndpdGggaW5zcGlyaW5nIGZlZWxpbmcKamFtZXMgd2ViYiBzcGFjZSB0ZWxlc2NvcGUKbGlnaHQgZWZmZWN0cwpvbGQgbW9pc3QgY2FycGV0CmJpZyBsZWF2ZXMgZm9saWFnZSBhbmQgc3RlbXMKYWQKbmF0dXJlIGJhY2tncm91bmQKcmVhbGlzdGljIGJvZHkKc3dpbW1pbmcgcG9vbApnb2xkIG5lY2tsYWNlCndlYXJpbmcgcm9iZXMKY3liZXJwdW5rIG5vaXIKZmFjZSB0YXR0b29zCnlvZ2EgcG9zZQpibG9vbSBlZmZlY3QKaGFuZCBwYWludGVkIHRleHR1cmVzCmVua2kgYmlsYWwgc3R5bGUKZGlub3NhdXJzCmJyaWNrIHdhbGxzCmdvbGRlbiBhY2NlbnRzCmZyb20gd2hlYXRvbiBpbGxpbm9pcwpwaGlsb3NvcGhpY2FsCnBvcnRyYWl0IGMgMTIuMApnZXR0eWltYWdlcwpqb2pvCnBpYW5vCm5pa29uIGQgOCAxIDAKdHV4ZWRvCmZhbW91cyBhY3RvcnMKZ2FsYXh5IHJlZmxlY3RlZCBoZWxtZXQKZGF2aWQgbGEgY2hhcGVsbGUKdHJpYW5nbGVzCmludGVuc2Ugc2NlbmUKLWggMTAyNAphc3Ryb25vbWljYWwKOCBrIHJlbmRlcmluZwpmYW50YXN5IG1hcHMKcmVuZGVyZWQgM2QgbW9kZWwKZmxvcmFscHVuawpzdGlsbCBmcm9tIG1hcnZlbCBtb3ZpZQpzcHJpbmcgc2Vhc29uCmEgd29tYW4KZGVzaXJlCmZyb250IGZhY2UKcGl4dGEuanAKc3VycmVhbCBkcmVhbSBsYW5kc2NhcGUKY29udGVtcG9yYXJ5IGFydCBpbGx1c3RyYXRpb24KcmF5IHRyYWNlZCBzdW4gbGlnaHQKa25vbGxpbmcKYmlsbCBnYXRlcwpzdW5ueSBtb3JuaW5nCmphcGFuZXNlIHdvb2RibG9jayBwcmludApzZXJlbmUgbGlnaHRpbmcKamFwYW5lc2UgYW5pbWUgc3R5bGUKdmVyeSBkZXRhaWxlZCBkaWdpdGFsIGFydAp1bHRyYS1oaWdoIGRlZmluaXRpb24KbXVzw6llIGQnb3JzYXkgY2F0YWxvZ3VlCmRpc2hldmVsZWQKZGlzcG9zYWJsZSBmaWxtCnByaXN0aW5lIHF1YWxpdHkgd2FsbHBhcGVyCmFydGlzdGljIGxpZ2h0aW5nCmJlYXV0aWZ1bCBhZXN0aGV0aWMgbGlnaHRpbmcKYmx1cnJ5IHBob3RvCmhvcnJvciBwaG90b2dyYXBoeQpzcGxhdHRlcnMKbW9vbmxpdCBuaWdodCBkcmVhbXkgYXRtb3NwaGVyZQpkb29ycwplbHZlbgpnZWxib29ydQpodWJibGUgdGVsZXNjb3BlCm1heCBoYXkKYWxpZW4gbGFuZ3VhZ2UKZ2lnYXBpeGVsCnNjaWVuY2UtZmljdGlvbgplZHdpbiBjaHVyY2gKZnJlZGVyaWMgdGhvbWFzIGNvbGUKYnJvd24gZHVyYW5kCmFzaGVyIGRhdmlkIGZyaWVkcmljaApvdmVyd2F0Y2ggc2tpbgp0ZXJyYWNlZCBvcmNoYXJkcyBhbmQgcG9uZHMKcHVycGxlIHNreQpicm9rZW4gZG93bgpzdHVkaW8gcHJvZHVjdCBwaG90b2dyYXBoeQphbmQKaW50cmljYXRlbHkgZGV0YWlsZWQgYXJ0d29yawpzY2F0dGVyaW5nCmRldGFpbGVkIG1hc2sKaW5rIHNwbGF0dGVyCnBzeWNob2xvZ3kKc3BhaW4Kb2N0YW5jZSByZW5kZXIKNGsgY29uY2VwdCBhcnQKc25ha2UgZXllcwpwdXJwbGUgYW5kIHllbGxvdyBsaWdodGluZwptdXNocm9vbSBmb3Jlc3QKYmlnIHdhdmVzCnJlYWxpc20gdGF0dG9vIGRlc2lnbgp3YXNoZWQgb3V0IGNvbG9ycwptZXRhbGxpYyBwb2xpc2hlZCBzdXJmYWNlcwpjaGFyYWN0ZXIgc3R1ZHkKcHJpc3RpbmUgYW5kIGNsZWFuIGRlc2lnbgpzdG9ybXkgb2NlYW4KbWFjcm9waG90b2dyYXBoeQo4ayBoZHIgc3Vuc2V0IGxpdApsaWdodCBibHVlIGJhY2tncm91bmQKbm9zZQpvZmZpY2lhbCBhcnRib29rCnRoZSB0cmVlIG9mIGxpZmUKbWluaSBqZWFucyBza2lydApkYXJrIGNvbG9yCjNkIGNpbmVtYXRpYyBsaWdodGluZwpnZW9tZXRyaWMgM2Qgc2hhcGVzCmx1eHVyaWFudAppbXBvc3NpYmxlIGFyY2hpdGVjdHVyZQp2aW50YWdlIGNvbG9yCmRydW0gc2Nhbm5lcgpzY2ktZmkgaWxsdXN0cmF0aW9ucwpwYXRod2F5Cm9jdGFuZSByZW5kZXIgdWhkCmhkciBkaWdpdGFsIHBhaW50aW5nCmNpbmVtYXRpYyA0awpvcHBhaSBjeWJlcnB1bmsKdWhkIDRrCmJsdXI6IC00CmZhZXJpZQpncmltIGV4cHJlc3Npb24KZmFuY3kgZnVubnkgaGF0Cm1vdmllIHN0aWxsIGZyb20gYmxhZGUgcnVubmVyCmhvbGRpbmcgc3dvcmQKb3V0IG9mIHRoaXMgd29ybGQKbXVzY3VsYXIgbWFuCnRoaWNrIGRhcmsgZ2xhc3Nlcwpyb2JvdGljIG1hY2hpbmVzCmpldGZpcmUhISEhIQp0cmFuc2Zvcm1lcnMhISEhISEhISEhISEhCmJsYWNrIHRvIHB1cnBsZSBmYWRlIGhhaXJzdHlsZQpyZWFkeSBwbGF5ZXIgb25lCm5pY2UgY29sb3VyIHNjaGVtZQpsb2lzIHZhbiBiYWFybGUgYW5kIHJvc3NkcmF3cwplcGljIGNpbmVtYXRpYwpiZWF1dGlmdWwgZ2FyZGVuCnBoaWxpcHBpbmVzCnNvbnkgYTdpaWkKbW9ybmluZyBzdW4Kd2VhcmluZyBzdW5nbGFzc2VzIGFuZCBhIGNhcAptYXJrZXJzCmNvbG9yZnVsIGltYWdlCmZ1bGwgYm9keSByZWFsaXN0aWMgcG9ydHJhaXQKc3RhbmRpbmcgdXByaWdodApiaXJkcyBpbiBmbGlnaHQKZGlzZ2FlYQpzZXJ2aW5nIGJpZyBtYWNzCmJpcmQgdmlldwpjaGFyaXphcmQKdG91aG91CmxhaW4gaXdha3VyYQpzaG90IG9uIGtvZGFrIHZpc2lvbiAyMDB0CmFybm9sZAo4ayBjaW5lbWF0aWMKbXlzdGVyaW91cyBtb29kCnJvZGluCnNocmFwIGZvY3VzCndsb3AgYW5kIHNha2ltaWNoYW4Kd2lkZSBheWVzCnByb21vIHBob3RvCmRldGFpbGVkIGNoYXJhY3RlcgpzbWFsbCBob3VzZXMKYm94aW5nCmZhbnRhc3kgY2FzdGxlCm5lb3Rva3lvIHNvdXJjZQpzeW5kaWNhdGUoMjAxMikKaXZvcnkgY2FydmluZwp2b2x1bWlub3VzCmFpdmF6b3Zza3kKdXJiYW4gZGVjYXkKZGlhYmxvLTMKc29yYXlhbWEKYmVzdHNlbGxpbmcgbW92aWUgYXJ0IHBvc3RlcgpicmVha2Zhc3QKZXh0cmVtZSBkZXB0aAp0b25lZCBkZXJyaWVyZQpnb2xkZW4gcm9iZXMKZmluZSBpbWFnZSBvbiB0aGUgc3RvcmUgd2Vic2l0ZQptaWNyb3Bob25lCm1peAphcnQgb2YgdW5yZWFsIGVuZ2luZSA1CnNlbnN1YWxpdHkKYWxpZW53YXJlCmdhbmVzaGEKZXhwbG9zaW9uIGluIHRoZSBiYWNrZ3JvdW5kCmdlcmFsdCBvZiByaXZpYQpzaWx2ZXIgamV3ZWxsZXJ5CmdyZWVuIGdsb3cKaHVuZ3J5CmN1bHR1cmUKaGlnaCBleHBvc3VyZSBwaG90bwpjb2xvcmZ1bCBtYWdpYwpwb3N0IHdhciBzdHlsZQpkcmFnb24gaW5zcGlyZWQgYXJtb3IKY29uY2VwdCBhcnRib29rCnN0eWxlIG9mIGVkd2FyZCBob3BwZXIKbGlmZSBtZWFuaW5nCnN0dW5uaW5nIHNraWVkCmJpb2xvZ2ljYWwKZ3JhZGllbnQgc2hhZGluZwptaXN0eSBuaWdodApjcmFmdHMKd2xvcCBhbmQgcm9zcyB0cmFuCmdsb3dpbmcgZXllCnByb2plY3Rpb25zCmNpbmltYXRpYyBjb21wb3NpdGlvbgpwbGF5aW5nIGJvYXJkIGdhbWVzCnJvbWFudGljIGxpZ2h0aW5nCmNhCnByb21vdGlvbmFsIGFydHdvcmsKam9lbCBzdGVybmZlbGQKZ290aGljIG1ha2V1cAplbWJyb2lkZXJ5Cm1ha2UgdXAKd2VhcmluZyBrbmVlIGFuZCBlbGJvdyBwYWRzCmdvbGRlbiB0aGVtZQpyaXBwbGluZyBtdXNjbGVzCm1hcnkgbG91aXNlIGJyb29rcyAyNSB5ZWFycyBvbGQKYXNzYXNzaW4ncyBjcmVlZAptZWdhbiBmb3ggcG9ydHJhaXQKc2hvcnQgZHJlc3MKcGhvdG9yZWFsaXN0aWMgYXJ0IHN0eWxlCnJpbmcgbGlnaHQKZGFyayByYWluYm93CnBsYXlzdGF0aW9uIDUKbW90aW9uIGFuZCBhY3Rpb24gYW5kIHRyYWdlZHkKZ2xhc3N5CmZpc3RzIGluIHRoZSBhaXIKcG9ydHJhaXQgb2YgZG9uYWxkIHRydW1wCnNoZSBpcyBhYm91dCAzMCB5ZWFycyBvbGQKcG9ydHJhaXQgb2YgYSB5b3VuZyBtYW4KNGsgdGV4dHVyZXMKcHN5Y2hvZGVsaWMKdW5yZWFsIGVuZ2luZSA1IHJlbmRlcmluZwpnb2xkZW4gYWdlIHNlcmFwaCBidW5rZXJzCnNrdWxsIGhlbG1ldApzaGFycCBhbmQgZGV0YWlsZWQKcGVyZmVjdGx5IHN5bW1ldHJpY2FsIGZhY2UKcm9wZXMKYmVhY2ggbGFuZHNjYXBlCnNjaW1pdGFyCnVsdHJhIHJlYWxpc3RpYyBwaG90bwpsaWdodGluZy4gZmFudGFzeQpkb2N1bWVudGFyeSBzdGlsbApyYWRpYXRpbmcgYXRvbWljIG5lb24gY29yYWxzCm9jZWFucwp0aGFuY3JlZCB3YXRlcnMKdGhlIGVuZCBvZiB0aW1lCnRpZmEgbG9ja2hhcnQKbWFnaWNhbCBmYW50YXN5Cmxvc3MgaW4gZGVzcGFpcgpoYXBweSBsaWdodGluZwpzY3JlZW5zaG90IGZyb20gYSBtb3ZpZQp3aW5vbmEgcnlkZXIKYmxpc3NmdWwKY3PDs2sgaXN0dsOhbiBhbmQgZGEgdmluY2kKYWtpcmEgc3R5bGUKY2VudGVyZWQhIQpyZWFsaXN0aWMgYW5pbWUgMyBkIHN0eWxlCnN0cmFuZ2UgdmVnZXRhdGlvbgptb3VudGFpbiBpbiBiYWNrZ3JvdW5kCmlyaXNoIGdlbmVzCm9uIGEgYmVhY2gKcm9hZHMKZGVjb3JhdGlvbiBhcm91bmQgdGhlIHJvb20KZXBpYyBpbWFnZQphcmFiaWFuIG5pZ2h0CmJlYXV0aWZ1bCBuYXR1cmFsIGxpZ2h0Cnpvb21lZCBvdXQgc2hvdApmbHVpZCBhY3J5bGljIHBvdXIgYXJ0CmNvdmVyZWQgd2l0aCBibGFjayBnb28Kd3l2ZXJuCjQgayBoaWdoIGRlZmluaXRpb24KcGFpbnRlZCBpbiBhY3J5bGljCmhpZ2hseSBkZXRhaWxlZCB3YXRlciBjb2xvdXIgOCBrCnVudXN1YWwKd2FybSBtb29keSBsaWdodGluZwpjb2JibGVzdG9uZXMKdGhlIGFtYXppbmcgd29ybGQgb2YgZ3VtYmFsbApncmF5IHNreSB3aXRoIHdpc3B5IGNsb3VkcwooICggKCBrb2kgY29sb3JzICkgKSApCnRlbm5pcyBiYWxsIG1vbnN0ZXJzCmVwaWMgbmVidWxhCmZhZGVkIGNvbG91cnMKcHJlIC0gcmFwaGFlbGl0aXNtCnZlcnkgZmluZSBicnVzaCBzdHJva2VzCnJlYWxseSBsYXJnZSBidXN0CmggNyA2IDgKbWFueSBtb25pdG9ycwptYW55IGVsZWN0cm9uaWNzCnJvYmVkCm1vb24gaW4gc2t5CmJsYWNrIG9uIHdoaXRlCjggayBkaWdpdGFsIGFydAptaWRkYXkgbGlnaHQKc3ludGh3YXZlIGNvbG9yIHNjaGVtZQpmb2cgaW4gdGhlIGJhY2tncm91bmQKZW5nbGlzaAptdXRlZCBhcm0gY29sb3JzCm9jdGFuZSByZW5kZXIuIDggawpzaGFreSBjYW1lcmEKbXVjaGEgc3R5bGUgNGsKcHJvdmVuYW5jZQpzdXJlYWxpc20KY2luZW1hdGljIGxpZ2h0aW5nIG1hc3RlcnBpZWNlCndpdGggc2FtZSBoYWlyc3R5bGUKd29ybiBwYW50cwpzbW9vdGggZGV0YWlscwpoaXBlcmRldGFpbGVkCnBpdGNoYmxhY2sgc2t5Cmdsb3NzeSBleWVzCmVwaWMgYmVhdXRpZnVsIGxhbmRzY2FwZQp3aW5uaW5nIGF3YXJkIHBob3RvCmVwaWMgZmFudGFzeSBjb25jZXB0IGFydApzaGFycCBmb2N1cyBpbHVzdHJhdGlvbiBocQpzdHVkaW8gcGhvdG9ncmFwaHkgcG9ydHJhaXQKZGVwdGggcGVyc3BlY3RpdmUKaW5rIHdhc2gKdGhpcnR5c29tZXRoaW5zIHllYXJzIG9sZApwc3ljaGVkZWxpYyBoaXAtaG9wCmhvbGxvdyBlYXJ0aCBpbmZvZ3JhcGhpYwpjaGFpbgpyZW5lIG1hcmdyaXR0ZQpwcmVtaXVtCmdyZXkgc2tpZXMKc2FrdXJhIGZsb3dlcnMKbWFrb3RvIHl1a2ltdXJhCmluIHN0eWxlIG9mIG1hcnZlbAphbnVuYWtpCjEgOCA5IDAgcwpiZW4gbmljaG9sYXMKamEgbW9uZwpwcmV5CmRldGVjdGl2ZQphdCB0aGUgbXVzZXVtCmh5cGVyIC0gcmVhbGlzdGljIGxpZ2h0aW5nCnN0b25lIGZsb29yCmxpZmUgaXMgc3RyYW5nZQpkcmlmdGluZwpyb3VuZCBiYXNlCnZhbGVyaWFuCnN0dWRpbyBwYWNrc2hvdApjb250ZW1wb3Jhcnkgc2N1bHB0dXJlCmV4dHJhIGxpbWJzCiggYXJ0IG5vdXZlYXUgKQp0YXJrb3Zza3kgZ3JlYXRlc3Qgc2NlbmUKYnJlYWtjb3JlCnZpbGxhaW5lc3MKbXV0ZWQgcGFzdGVsIHRvbmVzCmxvbmcgYnJhaWRlZCBjdXJseSBzaWx2ZXIgaGFpcgp0aGluIHNoYXJwIGxpbmVzCmNvbWljIGlua3MKbGlnaHRiZWFtIGV5ZXMKdGhlIHdvcmxkIGVuZHMgd2l0aCB5b3UKYnJ1c2ggcGFpbnQKbGFyZ2UgcG9seWdvbnMKdmVyeSBzd2VhdHkKc2FraW1pbWljaGFuCnNvZnQgLSB3YXJtCmdvbGQgYWNjZXNzb3JpZXMKYWxpZW4gbG9va2luZwpzdHlsZSBvZiBmZW5nIHpodQphbnRvbmkgZ2F1ZGkKa2hhanVyYWhvCmluc2FubHkgZGV0YWlsZWQKaGFyZCBzdXJmYWNlcwptb3J0YWwgZW5naW5lcwppbnRlcmVzdGluZyBsaWdodHMKc3Ryb25nIHBlcnNwZWN0aXZlCmludHJpY2F0ZSBnZW9tZXRyeQphbmNpZW50IHRlbXBsZQpzcHJlYWQgd2luZ3MKZnVsbCBwbGF0ZSBhcm1vciB3aXRoIGNsb3RoCmNsb3RoZWQhISBsdWNpZW4gbGV2eSAtIGRodXJtZXIKZWxlY3Ryb25pYyB3aXJlcwpzaGF1biBkb3duZXkKZGFuaWVsIGUuIGdyZWVuZQpjZWwgc2hhZAphbmltZSBtb3ZpZSBzY3JlZW5zaG90CmFuaW1lIHdvbWFuCmtpZG1vISEhCmp1bmsgdG93bgp1bnJlYWwgZW5naW5lIHRlY2ggZGVtbwpyYWluYm93IGdyYWRpZW50IHJlZmxlY3Rpb24KZXllbGVzcyB3YXRjaGVyCndpemFyZCByZWFkaW5nIGEgZGlyZWN0b3J5CnN0ZXBoZW4gb3V0cmFtCjggMCBzIGFuaW1lIGFydCBzdHlsZQptdXRlZCBhbmQgZHVsbCBjb2xvcnMKZHJlc3MgbWFkZSBvZiBncmVlbiBsZWF2ZXMKc2l0dGluZyBvbiBhIGdyYW5kIHN0YWlyY2FzZQpwc3ggZ2FtZSBncmFwaGljcwp1bmF3YXJlIG9mIHlvdXIgZXhpc3RlbmNlCm1ldGFsIGdhdW50bGV0CmJlYXV0aWZ1bCBmZW1hbGUgYW5kcm9pZCEKZmFudGFzdGljYWwgc2V0dGluZwpoeWFjaW50aGUgcmlnYXVyZApzaGFycC4gdm9sdW1ldHJpYyBsaWdodGluZwpwcmFjdGlzaW5nIHN3b3JkIHN0YW5jZXMKc25vd2ZhbGwgYXQgbmlnaHQKaHlwZXIgZGV0YWlsZWQhISEKd2F0ZXJjb2xvciBwZW5jaWwgKyBpbmsgZHJhd2luZwp1dCA0CmNpbmVtYXRpYyAtIGxpZ2h0aW5nCmJsYWNrIGJsdWUgZ3JlZW4KZXh0cmVtZSBtb3Rpb24gYmx1cgp2ZXJ5IHNvZnQgZGlmZnVzZSBsaWdodHMKZmxvcmFsIGFydCBub3Z1ZWEgZHJlc3MKbWFjaGlhdmVsbGlhbiBwdXBwZXRtYXN0ZXIKbG9wIGVhcmVkCmhpZ2ggcXVhbGl0eSBmYW5hcnQKZW1tYW51ZWwgc2hpcnUKcm9ja2FiaWxseQppbiBzdHlsZSBvZiBiYXJvcXVlCnVsdHJhIGRlZXAgZm9nCmluIC0gZ2FtZSBzY3JlZW5zaG90CndpZGUgbG9uZyBzaG90CmJsYWNrIG1vbGQKYXJ0IGNvbnRlc3Qgd2lubmVyIG9uIGJlaGFuY2UKZnV0dXJpc3RpYyBzb2xpZCBjb2xvcnMKZGlzdHVyYmVkCnJlYWxpc3RpY2FsbHkgcHJvcG9ydGlvbmVkIGJvZHkKZGVlcCBibGFjayB0b25lcwpzaGFycCBkZXRhaWxlZCBjbGF3cwpob21ld29ybGQgc2tpZXMKZXh0cmVtZSBuYXJyb3cKcmVuYWlzc2FuY2UgY29sb3IgcGFsZXR0ZQp2ZXJ5IGRhcmsgbGlnaHRpbmcKdW5kZXJ3YXRlciBwb2xhcm9pZCBwaG90bwpkcmFnb24gbWF3CmJyaWdodCBzb2Z0IGNvbG9ycwpoaWdoIGRldGFpbGVkIHBob3RvZ3JhcGh5CmFxdWVkdWN0cwpjb2xvciAtIG91dCAtIG9mIC0gc3BhY2UKc2NpZW5jZSBmaWN0aW9uIHN1aXQKZGV0YWlscyBmYWNlCmhhbGYgaHVtYW4gaGFsZiBzcGlkZXIKbWV0YWxsaWMgc3VyZmFjZQp0aGluIGFudGxlcnMKcmVmbGVjdGl2ZSBnbGFzcwpjb2xkIGNvbG9yCm5lb24gYW1iaWVudCBsaWdodGluZwpyaWNoIGRlZXAgdml2aWQgY29sb3VycwppbnRyaWNhdGUgZGVzaWduIHBvcCBhcnQKZGV0YWlsZWQgYXJjaHZpeiByZW5kZXIKd3JpbmtsZXMgYW5kIG11c2NsZSB0aXNzdWVzCmNvbnRlbnQhISEKYmVoaW5kIGEgZm9yZXN0Cm1tYQphc3Ryb25hdXQgbG9zdCBpbiBsaW1pbmFsIHNwYWNlCnNsZWF6eQpraXJva2F6ZSBhbmQgcGF1bCByb2JlcnRzb24KZGltbHkgbGlnaHQgcm9vbQpzbWlsaW5nIGFtYXplZAp3ZWFyaW5nIGEgZHJhZ29uIG1hc2sKY2dzb2NpZXR5d2xvcApuaWtvbiBkIDQgeApkaXN0aW5jdApzaGFycCBlZGdlcy4gb2N0YW5lIHJlbmRlcgpvdXRkb29ycyBydWluZWQgY2l0eXNjYXBlCm1ldGFsIG1hc2sKcHJvZ3Jlc3NpdmUgcm9jayBhbGJ1bSBjb3ZlcgppbGx1c3RyYXRvciB2ZWN0b3IgZ3JhcGhpY3MKY2VsdGljIGhhaXIgYnJhaWQKamFwYW5lc2UgZmxvd2VyIGFycmFuZ2VtZW50cwpmb2N1cyBpbGx1c3RyYXRpb24KZ2xvd2luZyBibHVlIGZhY2UKc2xlZWsgc3BpbmVzCmhvd2xzIG1vdmluZyBjYXN0bGUKZXBpYyBib3NzIGJhdHRsZQpnaWx0CnJpbmdmbGFzaApjaHVja3kgc3R5bGUKYmVyZW5pY2UgYWJib3R0ICYgam9obiBqLiBwYXJrCmJsdWUgbGlnaHRzYWJlcgptZWRpZXZhbCByb2JlcwpjaW5lbWF0aWMgc21vb3RoIHVucmVhbCBlbmdpbmUKbGVnIGFuZCBoaXAgc2hvdApsZWcgYW5kIHRoaWdoIHNob3QKMzY4NjRrIGZpbG0KZ29vZCBzcGVjaWFsIGVmZmVjdHMKbHVzaCBmb3Jlc3QgbGFuZHNjYXBlCmxvbmcgY2luZW1hdGljIHNob3QKYnJpZ2h0IHJpbSBsaWdodApyZXRhaWxkZXNpZ25ibG9nCmNpbmVtYXRpYyBhcmNoaXRlY3R1cmFsIHNjYWxlCmxhZHlidWcgYXMgYSBtb25zdGVyCmxnYnQgYXJ0Cm1hZ2ljIHZpYmVzCnNpY2tseSBncmVlbiBjb2xvcnMKYWxwZXMKcGVhY2VmdWwgcHVmZnkgY2xvdWRzCnNjaSAtIGZpIGFybW91cgphbmNpZW50IHNsYXZzCmdyZWVuaXNoIGV4cGlyZWQgZmlsbQpiaXJ0aGRheSBjYWtlIG9uIHRoZSBncm91bmQKbWlkZGxlIGNlbnRlcmVkCndldCBwbGF0ZSBwaG90b2dyYXBoCnBvcnRyYWl0IG9mIGZlbWFsZSBhbmRyb2lkCmxvb2thbGlrZQoxOTkwcyAxOTkyIHNlZ2EgZ2VuZXNpcyBib3ggYXJ0Cmljb25pYyBmaWxtIGNoYXJhY3RlcgpuZW9uIGN5YmVycHVuayBoaWdobGlnaHRzCndlYXJpbmcgMSA4IDUgMCBzIGNsb3RoZXMKZnVsbCBmcmFtZSBpbWFnZQpkaWdpdGFsIGFydCDigJ0KMSA5IDggMCBzIGFuYWxvZyB2aWRlbwo0IGsg4oCdCmhpZ2hseSBkZXRhaWxlZCBpbiA0IGsg4oCdCmN5YmVycHVua+KAnQpnYXJiYWdlCnNvZnQgY29sb3IKZGVzZXJ0IGVudmlyb25tZW50Cmxvb2tpbmcgZGlyZWN0bHkgYXQgdGhlIGNhbWVyYQpicnVzaGVkIG1ldGFsCnRoZXkgYXJlIGluIGxvdmUKd2hpdGUgc3RvbmUKYWtpcmEga3Vyb3Nhd2EKdHJhaW5zCnZpc3VhbGx5IGNyaXNwICYgY2xlYXIKY2luZW1hdGljIHBob3RvZ3JhcGgKamVuIGJhcnRlbAp3ZWFyaW5nIHdoaXRlIHNoaXJ0CmN1bHRpc3QKZ2xhc3Mgc2tpbgphbWVsaWUgcG91bGFpbgpsZW5zZXMKYWxlc3NpbyBhbGJpCnZvbGNhbm8gbGFuZHNjYXBlCmtvZGFrIGdvbGQgMjAwCmZhbnRhc3kgaG9ycm9yCnN0aWxsbmVzcwptaWNoYWVsCmRldGFpbGVkIGltcGFzdG8gYnJ1c2h3b3JrCnNoYWRlZCBsaWdodGluZwpkcmFtYXRpYyBuZW9uIGxpZ2h0aW5nCmRpc3BsYWNlbWVudCBtYXBwZWQKZXhwb3N1cmUKcHN5Y2hpYyBnaXJsCmhlciBoYWlyIHBpbm5lZCB1cAp0cm9waWNhbCBob3VzZXBsYW50cwpsYW5hIGRlbCByZXkKOCAwIHMgc2NpIC0gZmkgY29taWMgYXJ0CnBvcnRhbHMKMTAyNHgxMDI0Cm5vIGdyYWluCmdsaXRlcgp2aW50YWdlIHBvc3RjYXJkCmFzIGEgY2hhcmFjdGVyIGluIHRla2tlbgpzaGFkb3cgb2YgdGhlIGNvbG9zc3VzCnNpbGVudApoYXV0ZSBjb3V0dXJlIGZhc2hpb24gc2hvb3QKYWtpaGl0byB5b3NoaWRhCndoaXRlIGFuZCBibGFjawptdXNjdWxpbmUKZnVuZ2kKZ3JlZW4gdHJlZXMKY29uY2VwdCBoZWFkc2hvdCBhcnQKbmVvY2xhc3NpY2FsIHBhaW50aW5nCnJhcmUKMjAyMApicmlnaHQgYW5kIGNvbG9yZnVsCmZ1dHVyaXN0aWMgY2xvdGhpbmcKZ29sZCBkZXRhaWxzCndoaXRlIHNwYXJrbGVzIGV2ZXJ5d2hlcmUKbWFydmVsIGNvbWljCmYgLyAxIDYKdm91Z2Ugc3R5bGUgcGhvdG8KY2VudHJhbGlzZWQKYm9oZW1pYW4KZ3VucGxhCjMgZCBjaGFyYWN0ZXIgbW9kZWwKZnJpdHogd2lsbGlzCmVsZWN0cmljIGNvbG9yCnBpbG90CnJlZmxlY3RpdmUgd2F0ZXIKaGV4YWdvbmFsIG1lc2ggZmluZSB3aXJlCmNhcmFwYWNlCmxlYWtlZApwcm9mZXNzaW9uYWwgcmVuZGVyCnZlaGljbGUKY3J5ZW5naW5lIDggayB1aGQKYm9zdG9uIGR5bmFtaWNzCmR5c3RvcGljCmZsaXJ0aW5nIGV4cHJlc3Npb24KZGFuaWlsIGt1ZHJpYXZ0c2V2Cm1hc3MgaG91c2luZwpyaWJib24gaW4gaGVyIGhhaXIKc2lsdmVyIG5lY2tsYWNlCnRlcnJhY2VzCm1vdG9yY3ljbGVzCmNhbm9uIDVkCmdvbGQgcmluZ3MKc3Vuc2V0IGluIHRoZSBiYWNrZ3JvdW5kCnBhaW50aW5nIG9uIGNhbnZhcwp3aW5lCmhpcHBpZQppc28gOiAyIDAgMApyZWQgZXllCm1hdHRlbApmbG9hdGluZyBpbiB0aGUgYWlyCmZhbW91cyBhY3RyZXNzZXMKZXh0cmVtZWx5IGdvb2QgcXVhbGl0eSBsaWdodGluZwpyZWFsIHBpY3R1cmUKY3JwZwo4IGsgMyBkIHJlbmRlciByYXkgdHJhY2VpbmcKcG9uZHMKbWFwIHBhdHJlb24KZm91bmRyeSB2dHQKZmFudGFzeSBncm91bmRzCmR1Z2VvbmRyYWZ0CnN0YW5lbHkgYXJ0Z2VybQpzaG9vdGluZyBzdGFyCm5lb24gbGluZXMKZG5kIGNoYXJhY3RlciBkZXNpZ24gY29uY2VwdCBhcnQKc3BvdCBsaWdodGluZwp3aWxkIGFuaW1hbHMKd2VsbCBmb2N1c2VkCnZlcnkgY296eQpiaXNtdXRoCmFuaW1lIGFydCB3YWxscGFwZXIgNGsKbGlseSBwYWRzCjgwcyBzY2ktZmkKOGsgaGlnaGx5IGRldGFpbGVkIOKdpO+4j+KAjfCflKUg8J+UpSDwn5KAIPCfpJYg8J+agAp0aGUgZ3JlYXQgd2F2ZSBvZmYga2FuYWdhd2EKOGsgdGV4dHVyZXMKdGV0c3V5YSBub211cmEKYXJ0aXN0aWMgc3R5bGUKd3Jlc3RsaW5nCmxzZCB0cmlwCmNhcnRvb24gZHJhd2luZwoyMDE2CmtldGNodXAKZm9ydHJlc3MKYmlyZHMgZXllCmhpZ2hseSBkZXRhaWxlZC4gc21vb3RoCmh1a2UKY29sb3JpemVkIHBob3RvCnB1cnBsZSBhbmQgZ3JlZW4KZnJpZ2h0ZnVsCnJlbmRlciB1bnJlYWwgZW5naW5lCnNob2NrZWQgZXhwcmVzc2lvbgpjaG9jb2xhdGUKdGFrZW4gd2l0aCBzb255IGE3ciBjYW1lcmEKc3dpcmxpbmcgZmxhbWVzCmNsZWFuIGxpbmVhcnQKaGlnaCB0ZWNobmljYWwgZGV0YWlsCmFuaW1lIHN0eWxlZAp2aW50YWdlIGNhbWVyYQpydWxlIG9mIHRoaXJkcyBjb21wb3NpdGlvbgp3YXZ5IHdoaXRlIGxvbmcgaGFpcgp3YXZ5IGhhaXIgeWVsbG93IHRoZW1lCmNpbmVtYXRpYyBmdWxsIHNob3QKcG9ydHJhaXQgYXJ0CmFuYWxvZ291cyBjb2xvcnMKbHVzaCBmZXJ0aWxlIGZlY3VuZApkZW1vbiBob3JucwpuZWNrCndvcm4gb3V0CnJlYWxpc3RpYyBhcnR3b3JrCm92ZXJjYXN0IGxpZ2h0aW5nCnN0YXJzaGlwLXRyb29wZXJzCndpbmQgYmxvd2luZwpoaWdobHkgcXVhbGl0eQplZGl0b3JpYWwgZmFzaGlvbiBwaG90b2dyYXBoeQpzbm93IGZhbGxpbmcKOGsgdGV4dHVyZQpzaXRoCmNoZWVreQpzeW1tZXRyaWNhbCBmYWNlIGZlYXR1cmVzCmEgcHJvcGFnYW5kYQp0YWJsZXRvcCByb2xlIHBsYXlpbmcgZ2FtZQp1bHRyYSBkZXRhaWxlZCBjaW5lbWF0aWMKYXJjaGl0ZWN0dXJhbCBkZXNpZ24KaW4gdGhlIHN1bgpubyBsaWdodHMKbG9yYXggbW92aWUKYW5pbWFsIGNyb3NzaW5nCmRyYW1hdGljIGNsb3VkcyBhbmQgYXRtb3NwaGVyZQprb2RhayBjb2xvcgpzaW5nbGUgZmlndXJlCjRrIHNjYW4KbWl0Y2ggZm91c3QKYmVhdXRpZnVsIGV2aWwgc25lZXIKcG9wdWxhciBrb3JlYW4gbWFrZXVwCm9jaGVyIGRldGFpbHMKYWhyaQpkZWVwIGJsYWNrIGJhY2tncm91bmQKaGlzdG9yaWNhbCBwaWN0dXJlCmxlb25hcmRvIGRhdmluY2kKcm9zZSB0d2luaW5nCjhrIGRpZ2l0YWwgYXJ0Cmx1c2ggZm9saWFnZQppbnRlbnNlIG1vbWVudAp2aW50YWdlIHJvYm90aWNzCmZpZXJjZSBsb29rCmFtb25nIHVzCm5hZGV6aGRhIHRpa2hvbWlyb3ZhCnRyYWluCmRhbmNpbmcgaW4gdGhlIHJhaW4KbWFsZXZvbGVudAprb3JlYW4gZ2lybApmcnVzdHJhdGVkCmxvb2tpbmcgc2FkCmYvMy41CnN0YW5kaW5nIHVwCmxpdmVseSBwZXJzcGVjdGl2ZQp3ZWxsLWRlc2lnbmVkIG1hc3RlcnBpZWNlCnZlcnkgcGFsZSBza2luCmV0aGVyZWFsIHZvbHVtZXRyaWMgbGlnaHQKcmVkIGJlYXJkCndoaXRlIGZveAphdmlhbgp0Zndpa2kubmV0IHBob3RvZ3JhcGh5CmVyb3RpYwphcmdlbnRpbmEKYmxhY2sgb3BhbHMKYmF0dGxlIGRhbWFnZQpwZXRlciBqYWNrc29uCmFuaW1lIHJvYm90cwprYXp1a2kgdGFuYWhhc2hpCnByb2Zlc3Npb25hbCBoZWFkc2hvdApjb3kKaW5jcmVkaWJsZSBkZXB0aAp5Z2dkcmFzaWwKY3liZXJwdW5rIGNvbG9yIHNjaGVtZQp0aGUgbG9uZyBzaG90CnBpbmsgYW5kIGJsdWUgbW9oYXdrIGhhaXJzdHlsZQpjcnlzdGFsIGNsZWFyIHdhdGVyCmRyYWdvbiBiYWxsIHoKYnViYmxlZ3VtCmVsZW1lbnRzCmNvcnJ1cHRlZApjaW5lbWF0aWMgY2luZW1hdG9ncmFwaHkKb2xkIDNkIGdyYXBoaWNzCnN1cnByaXNlCnBhY2lmaWMgcmltCnZlc3RzCmhlYWQgYW5kIGJ1c3Qgb25seQpmaWxpZ3JlZSBpbnRyaWNhdGUgZGV0YWlscwpjbG9ja3dvcmsgb3JhbmdlCmNvbnRyYQpzbWlsaW5nIGZhY2UKc3ludGh3YXZlIGJhY2tncm91bmQKY3liZXJuZXRpYyBleWUKZHlzdG9waWFuIGNpdHkKY29kYWNocm9tZQpuaWNvbGFzIGNhZ2UKY29sZCBibHVlIGNvbG9ycwpyb3R0ZW4gZ29sZApmYW50YXN5IGJvb2sgY292ZXIKYWxleCBjb2x2aWxsZQplbHN0cmVlCmRpdmluZSBjaGFvcyBlbmdpbmUKem9vbSBsZW5zCndoaXRlIGhvdXNlCmRvb20gc2xheWVyCmRyb3cKdm9sdW1ldHJpYyByYXlzCmhhaXIgZmxvd2luZwpwb3JjZWxhaW4gd2hpdGUgc2tpbgoxLzEwMCBzZWMKYm93bCBoYWlyY3V0CmVwaWMgd2FsbHBhcGVyCmZvcmdpdmVuZXNzCmNlcGhhbG9wb2QKdmlzaWJsZSBmYWNlIQpkcmFtbWF0aWMgbGlnaHQKZXVyb3BlYW4Kd2VhcmluZyBpbmthIGNsb3RoZXMKc3RhcnNoaXAKbGVhZ3VlIG9mIGxlZ2VuZHMgd2FsbHBhcGVycwpwYWxlIGhhaXIKYWxwaG9uc2UgbWFyaWEgbXVjaGEKaGFuayBoaWxsCnBsYW5ldCBlYXJ0aApkYXJrIGFuZCBvbWlub3VzCmdvbGVtCmNpbmVtYXRpYzowLjl8dW5yZWFsIGVuZ2luZQpodXRzCm11c2V1bSBjb2xsZWN0aW9uCmJyaWdodCBwYXN0ZWwgY29sb3IKYWx5c3NhIG1vbmtzCmFmcApzYXRpcmUKc3RvcCBtb3Rpb24gYW5pbWF0aW9uCnRoZSBzaW1zIDQKc3R5bGlzaCBkcmVzcwppbW1lbnNpdHkKY3J1bWJsaW5nCmFtYW5vIHlvc2hpdGFrYQpjaGliaSBhbmltZQp6b2lkcwpoZWxpY29wdGVycwpmMTEgYXBlcnR1cmUKYmlvLW1lY2hhbmljYWwKc2hvd2luZyB2aWN0b3J5Cm1hcmlseW4gbW9ucm9lCmJlYXV0aWZ1bCBkcmF3aW5nCm5vc3Ryb21vCmxvdHVzIHBvc2UKbGlnaHRuaW5nIGJvbHRzCmNvbG9yIHBhaW50aW5nCmJlYXV0aWZ1bCBicmlnaHQgbGlnaHRpbmcKbW91c2UgcGhvdG8KaG9sZGluZyBzY2ltaXRhciBtYWRlIG9mIGJvbmUKY3liZXJwdW5rIHRlY2gKcmlvdApub3cgaSBoYXZlIGJlY29tZSBkZWF0aApudWNsZWFyCmNocmlzdG9waGUgeW91bmcKaW50cmljYXRlbHkgY2FydmVkCmJsb29kIGFuZCBkdXN0IGluIHRoZSBhaXIKYmF0aHJvb20Kc3RyZWFtbGluZWQKZGV0YWlsZWQgcHJvZmVzc2lvbmFsIHBob3RvCmNhYmxlcyBvbiBmbG9vcgpwdWxpdHplciBwcml6ZSBmb3IgcGhvdG9ncmFwaHkKY3VsdC1jbGFzc2ljLWNvbWljLXN0eWxlCmJsaXp6YXJkIGNvbmNlcHQgYXJ0CmZsb3BweSBlYXJzCmRpZ2l0YWwgc2tldGNoCmJyZWFkCm1lZGlldmFsIGFybW9yCmxpZ2h0IGdvbGQgaGFpcgp1bmlxdWUgZmVhdHVyZXMKZ2xvd2luZyBsaWdodHMhISBzY2ktZmkKcm9ja2V0CnN1YnN0YW5jZSBtYXRlcmlhbApibGFjayBob29kCnNhbXVyYWkgaGVsbWV0CmhvbGRpbmcgcmlmbGUKcGFzdGVsIHBhbGV0dGUKYmFycmVuCmRpc3RyZXNzCm15c3RpYyBleWUKYXN0cm9uYXV0cwp0aGUgam95IG9mIGxpZmUKZmlyZXN0b3JtCmxpbWJvCnRoZSBzdW4KdGltb3RoZWUgY2hhbGFtZXQKdG90b3JvCmFydGVtIGNoZWJva2hhCmNvbGQgY29sb3IgcGFsZXR0ZQp5YW1hbW90bwpjb3JyZWN0IGZhY2VzCmxvdyBzaHV0dGVyIHNwZWVkCndvcmxkIHdhciAzCnRyZW5kaW5nIG9uIHpicnVzaAo0IGsgbHVtaW5vdXMgbGlnaHRpbmcKb2N0YW5lIC0gcmVuZGVyCmF1c3RybyAtIGh1bmdhcmlhbgptZW50YWwgcmF5CmJpZyBkaXNuZXkgZXllcwpjbG90aGVkIGluIG1pbGl0YXJ5IGFybW9yCmx1dGUKY2xvc2V1cCAtIHZpZXcKMSA5IDEgMCBwb2xhcm9pZCBwaG90bwptYXN0ZXJwaWVjZSEKbWlsayBiYXRoIHBob3RvZ3JhcGh5Cm1lbHRpbmcgd2F4CmxvdyAtIGFuZ2xlIHNob3QKcGVhcmwgbmVja2xhY2UKcGFpbnQgYnJ1c2ggc3Ryb2tlcwpyb3lhbCBwb3J0cmFpdApiZWF1dGlmdWwgZXllcyBhbmQgZmFjZQpob21vZXJvdGljIQoxIDYgOiA5CmJlYXV0aWZ1bCBhbmNpZW50IHRyZWVzCnN0cmVldCBhdCBuaWdodApnb2QncyByYXlzCmluY3JlZGlibHkgaW50cmljYXRlCnN0dWRpbyBtdXRpCnBsYW5ldCBzdXJmYWNlCnNhYmluYSBrbGVpbgphdXRvIC0gZGVzdHJ1Y3RpdmUgYXJ0CnNhdmFubmEKYW5pbWFsIGRyYXdpbmcKdHJlbmRpbmcgb25zdHVkaW8gZ2hpYmxpCmNsZWFuIGFuZCBzaW1wbGUgZGVzaWduCnZhcmlvdXMgc2l6ZXMKcGVuIGRyYXdpbmcKd2hpdGUgYW5kIGdvbGQgY29sb3Igc2NoZW1lCmZpbmUgZGV0YWlsZWQgZmFjZQphbGllbiBtb3ZpZQpnZW5pZQpvcmFuZ2UgZnVyCmRpZ2l0YWwgMyBkCmdhcmJhZ2UgcGFpbCBraWRzIHN0eWxlCmFudGVubmFlIG9uIGEgaGVzdGlhc3VsYSBoZWFkCmxhc2VyIHNob3cKdW5lYXJ0aGx5CmZvcmVzdHB1bmsKc2tpbiB0b25lcwprZWxwCnN1bnNldCBkcmFtYXRpYyBsaWdodApzZW5zZSBvZiBhY3Rpb24Kc3BpcmVzCnN0aWxsIG1vbWVudAp1bnJlYWwgZW5naW5lIDUgbHVtZW4KbXlzdApsaW5lIHdvcmsKZXhxdWlzaXQgZGV0YWlsCi4gZXRoZXJlYWwgbGlnaHRzCmhlYWQgYW5kIHNob3VsZGVyIHNob3QKYm95aXNoIGZhY2UKaGFpciBiZWNvbWluZyBhdXR1bW4gcmVkIGxlYXZlcwpibHVlIGhvdXIgc3RhcnMKaGlnaGx5IHJlYWxpc3RpYyBhbmQgaW50cmljYXRlCmJvbGQgYmxhY2sgbGluZXMKa29kYWsgZ29sZAphbWF6aW5nIGFydAp0b2dhCm1hcnRpbiBhbnNpbgpwcmVzcyBwaG90b2dyYXBoCmFtdXNlbWVudCBwYXJrCnBlcmZlY3QgZnJhbWluZwpqZWFuIC0gbWljaGVsIGJhc3F1aWF0Cmh5cGVycmVhbGlzdGljIGxpZ2h0aW5nCmN5YmVycHVuayBhbmltZSBhcnQKMSAvIDEgMCAwIDAgc2VjIHNodXR0ZXIKYW5kcm9pZCBqYW1lcwphcmNoaXRlY3R1cmFsIHBob3RvZ3JhcGgKcGF0Y2h5IGZsb3dlcnMKcGF0Y2h5IGNhY3R1cwo0IDAgawpkaWdpdGFsIHdhbGxzCnNpdHRpbmcgaW4gYSBmaWVsZCBvZiBjYW5uYWJpcwphbGJlcnQgYmllcnN0YWR0IDQgawpkZWxldGUgZHVwbGljYXRlIGNvbnRlbnQKcG9ydHJhIDgwMAptdWlyYQoxIDkgOCA4CnRyaXVtcGgKaGFsZiBwb3J0cmFpdApmdXJyeSBhcm1zCndoaXRlIHR1bmljCmJlYXV0aWZ1bGx5IGZyYW1lZApzdW5iZWFtcyBhdCBzdW5zZXQKbnV0CnJpY2sgYmVycnkKbWFsaWthIGZhdnJlCndyYXBwZWQgaW4gYmxhY2sKaGFucyBiZWxtZXIKbW9lYml1cyEKMSA2IGNvbG9ycwpjaW5lbWF0aWMgdm9sdW1lbnRyaWMgbGlnaHRpbmcKYmxhY2sgcGVvcGxlCmxvdyBob3Jpem9uCnN1YnRsZSBtYWtlIHVwCmFtYmVyIGpld2VscnkKYmVhdXRpZnVsIHNjZW5pYyB2aWV3CmF2ZXJhZ2UgcGh5c2lxdWUKYnVkZGhpc3QgYXJjaGl0ZWN0dXJlCmJlYXV0aWZ1bCBqdWljeSBicnVzaCBzdHJva2VzCnJhZiBzaW1vbnMgZmFzaGlvbiBjb3V0dXJlCmRldGFpbCB0ZXh0dXJlCjIgZCBsYXNlcmN1dCBlYXJyaW5ncwpmcmFjdGFsIHN0cnVjdHVyZQp3YXluZSAtIGJhcmxvd2UKaWxsdXNpb25zCmlzb21ldHJ5CmNpbmVtYXRpYyBzdHVkaW8gbGlnaHRpbmcKc3RpbGwgZnJvbSB0aGUgbW92aWUgYmxhZGVydW5uZXIKYW4gZXBpYyBwYWludGluZyBtaW5pb24KbWV0YWwgZXllIHBpZWNlCmRyZWFteSBsaWdodAp0aGUgZ3JlYXQgYmV5b25kCnNpciBsYXdyZW5jZSBhbG1hIC0gdGFkZW1hCmxpZ2h0aW5nIHJlZnJhY3Rpb24KZGlzc29sdXRpb24gZmlsdGVyCjkgMCdzIGFuaW1lCmZhbnRhc3RpYyBkZXRhaWxzIGZ1bGwgZmFjZXMKeW9qaSBzaGluYWthd2EKZGVzZXJ0ZWQgc2hpbmp1a3UganVuawpuaWdodCBza3kgYmFja2dyb3VuZApzaXR0aW5nIG9uIGEgbG90dXMgZmxvd2VyCnRhdHN1eXVraSB0YW5ha2EgbW92aWUgcG9zdGVyCm5lcnZvdXMgYW5kIHRlcnJpZmllZApjeWJlcnB1bmsganVkeSBhbHZhcmV6CnN0YWNrZWQKbWFudHJhIHJlbmRlcmluZwpjYXJ0b29uaXNoIGN1dGUKcm9ja3N0YXIgZ2FtZXMgYXJ0Cmdsb2JhbCBpbGx1bWluYXRpb24hISBpbnRyaWNhdGUKbWljaGFlbCBnYXJtYXNoIGFuZApzbW9rZSBiZWhpbmQgd2hlZWxzCmdpcmwgd2l0aCBzdXBlciBsb25nIGhhaXIKaWcgbW9kZWwgfCBhcnRnZXJtCnRoZSBtb3ZpZSB0aGUgdGhpbmcKYmFkIG9tZW4KYWNyeWxpYyBwYWxldHRlIGtuaWZlIGFuZCBicnVzaAphdG1vc3BoZXJpYyBlZXJpZSBsaWdodGluZwp3aXNweSBjbG91ZHMgaW4gYSBibHVlIHNreQpmaWJvbmFjY2kgZmxvdwpsaWx5IHBldGFscwpjdXJ2aWxpbmVhciBhcmNoaXRlY3R1cmUKZGVtb25pYyBleWVzCm1hbnkgc2NhcnMKb3JnYW5pYyBtYXR0ZSBwYWludGluZwpob2xvZ3JhcGhpYyBlZmZlY3QKYXJ0Z2VtIGxhdQpzYWtpbWljaGFuIGFuZCBtYWtvdG8gc2hpbmthaQpncmVlayBteXRoCjggayBoZCB3YWxscGFwZXJqcGVnIGFydGlmYWN0CmNpbmVzdGlsbCA1IDAgZAptZWx0aW5nIGZhY2UKdHJhZ2VkeQpob2x5IG1hY2hpbmUKcmFuZG9tIG9iamVjdCBwb3NpdGlvbgpzcGxhdHRlcmVkIGdvbwpleHRyZW1lbHkgd2luZHkKZGVjb21wb3NpdGlvbgpwaWd0YWlscyBoYWlyCmtvZGFrIHBvcnRyYSA4IDAgMApsaWdodCBzdHViYmxlCnlhdyAwIGRlZ3JlZXMKc29sZCBvbiBzdWtlYmFubnljCmRlYWRsYW5kcwp1bmlxdWUgaGFpcnN0eWxlcwpzaWxlbnQgbW92aWUKc3VwZXIgZ2xpdGNoZWQKYW5ndWxhciBtZXRhbAptdXRlIGRyYW1hdGljIGNvbG91cnMKZ292ZXJubWVudCBhcmNoaXZlCmhpZ2ggb2N0YW5lIGN5YmVybmV0aWNzCmFydGZvcnVtCnNob3J0IGZvY3VzIGRlcHRoCmZ1cnJ5IG1hd3Nob3QKb3NjYXIgbmllbWV5ZXIKc3VuIGNvYXN0CmJvbGQgcHN5Y2hlZGVsaWMgY29sb3JzCmtpbGxpYW4gZW5nIGJla3NpbnNraQpqaW1pIGhlbmRyaXggZnVsbCBib2R5CmR1dGlmdWwgcmV0dXJuCnZlcnkgdmVyeSB2ZXJ5IGJlYXV0aWZ1bCBhcnQKdGFibGV0b3AgbW9kZWwKdWx0cmEgaHlwZXIgcmVhbGlzdGljCmNyeWVuZ2luZSByZW5kZXIKaG91ZGluaSBzaW11bGF0aW9uCnNvbGlkIGJhY2tncm91bmQgY29sb3IKbmVvbiBsaWdodCBsYW5ndWFnZQpldGhlcmVhbCBjdXJ0YWluCmdvb2QgZmFjZQpwb3NlIG1vZGVsCmN5YmVydHJvbmljIGdhZGdldHMKbWVnYSBkZXRhaWxzCnNtaXJraW5nIGRldmlvdXNseQpvbGQgcmV0cm8gcHVscApveHlnZW4gdGFuawpibGFjayBhbmQgb3JhbmdlIGNvbG91ciBwYWxldHRlCmxzZCB3YXRlcgpndXN0YXZlIGJhdW1hbgp3ZWFyaW5nIGFzdHJvbmF1dCBvdXRmaXQKYnJpZ2h0IGRldGFpbHMKY2FkbWl1bSByZWQKZWxkcml0Y2ggbGVnaXNsYXR1cmUKZWRvdWFyZCBncm91bHQKa2lyaWxsIGxlb25vdgpraWxpbiBlbmcKdGhpY2sgd2lyZXMKY2Fub24gZW9zIDUgZCBtYXJrIGl2CnNvbnkgZnggNgpzaGF0dGVyZWQgdmlzb3IKZGlydHkgZ3JlYXN5IGZhY2UKbmF0dXJhbCBsaWdoaW5nCm1vb253YWxrZXIgcGhvdG8Kc2hlIGhhcyBhIGNyb3duIG9mIGRyaWVkIGZsb3dlcnMKd29ycnlpbmcgZXllcwpsdW1pbmVzY2VudCBmYWJyaWNzCm1hbGUgYWVyb21vcnBoCmFzdHJvbmF1dCBjeWJlcnB1bmsgZWxlY3RyaWMKY29jb251dHMKc3RlcGhlbiBjb25yb3kKY2xvaXNzb25uZQpnZW0gc3RvbmVzCmdvcmdlb3VzIGthY2V5IHJvaGwKZ2lyYXVkIQpoYW5hZnVkYQpibHVlIG1vb25saWdodApwaG90byBmcm9tIHRoZSBzaWRlCmhpZ2ggaW4gbW91bnRhaW5zCmVwaWMgbG93IHNob3QKZGlzaG9ub3JlZCBpbnNwaXJlZAo0MzU0NTZrIGZpbG0KaG9tZSBwaG90b2dyYXBoeSBwb3J0cmFpdApjb2xvciB2aHMgcGljdHVyZSBxdWFsaXR5CnJvY29jbyBhbmQgYXJ0IG5vdXZlYXUgZnVzaW9uCmRpZ2l0YWwgdWkKaW1tZXJzZWQgd2l0aGluIGEgbmV0d29yawp0b2t5byBkcmlmdApzdGFnZ2VyZWQgdGVycmFjZXMKc2hvcnQgYm9iIGhhaXIKaXJpcyB2YW4gaGVycGVuIGJhcm9xdWUgZHJlc3MKc3R5bGUgb2YgbW9udW1lbnQgdmFsbGV5CnNwbGF0dGVyZWQgcGFpbnQKa2FyY2gga2lyYWx5CmRhcmsgc3R1ZGlvIGJhY2tncm91bmQKbm9yd2F5IGZqb3JkCm1hZ2ljYWwgY2l0eQptdXRlZCBjb2xvdXJlcwpsYXRlIDEgOSB0aCBjZW50dXJ5CmNvbGQgY29sb3VyIHRlbXBlcnR1cmUKd2lkZSBob3Jpem9uCm1hbGUgcGh5c2ljaWFuCmFydCBvZiB2YWxpbiBtYXR0aGVpcwptYXJkaW4gb2xkIHRvd24gY2FzdGxlCm1hcmlhIG9mIG1ldHJvcG9saXMKd2hpdGUgbWV0YWwKZGlzcGxheWVkIG9uIG1haG9nYW55IGRlc2sKdHdsaWdodAp0aGlzIGlzIGl0IHN0eWxlCmdyYWlueSBwaG90b3JlYWxpc3RpYwpkZXRhaWxlZCBzbW9rZQoxIDggNiA4CmRhcmsgYW5nZWwgb2YgY29mZmVlCndpdGggYSBmcmluZ2UKZnJ1c3RyYXRlZCBkZXRhaWxlZApnb2xkZW4gcmF0aW8gamV3ZWxyeQphbWF6aW5nIGJhY2tncm91bmQgdGhlbWUKcG9ydHJhaXQgb2YgYSBmZW1hbGUgc29sZGllcgpwb3J0cmFpdCBvZiBhIGZvcmVzdCBtYWdlCm5pa2UgY3ljbGluZyBzdWl0CndoaXRlIHdyaW5rbGVkIHNoaXJ0CmdvbGQgYW5kIHJlZCBhY2NlbnRzCnN0eWxlIGh5YnJpZCBtaXggb2YgYmVlcGxlCmhhaXIgYmxvd2luZyB0aGUgd2luZApncmVnIHJ1dGtvd3NraSDigJ0Kc2hpcnQgZGVzaWduCnNoZSAtIHJhCmRpZ2l0YWwgYXJ0IGZyb20gZGFuZ2Fucm9ucGEKdGhlIHNhaWxvciBqdXBpdGVyLiBiZWF1dGlmdWwKY3liZXJuZXRpYyBtYWNoaW5lcwp2ZXJ5IGNsb3NlIHVwIGZvb3Qgc2hvdApiaWcgYmVhdXRpZnVsIGJsdWUgZXllcwpoaWdobHkgZGV0YWlsZWQgaW4gNGvigJ0KcmVtYnJhbmR0IHBhaW50aW5nCm5lb24gYmFja2dyb3VuZApmYW5jaWZ1bApzZXBpYSB0b25lcwpvbGRlciBicm90aGVyIHZpYmVzCjQgayBlZGl0b3JpYWwgcGhvdG9ncmFwaApzbW9vdGggZWRnZXMKY2Fub24gMiAwIG1tCnNhdGluCnZlcnkgaGlnaCBjb250cmFzdApmaW5lbGluZSBkZXRhaWwKOGsgZGV0YWlsCndoaXRlIGxhYiBjb2F0CmtvcGVyYQphcnR1ciBib3JkZWxsbwpweXJhbWlkCnNpdHRpbmcgb24gdGhyb25lCmNydWRlIGNyYXlvbiBzY3JpYmJsZXMKYmV0IGZhY2UKaG9sZGluZyB3YW5kCmJvb2sgc2hlbHZlcwpzb2NjZXIKbWluaW9uCmNwdSBncHUgd2FmZXIKaGFsZnRvbmUgdGV4dHVyZQpmdWxsYm9keSBwb3J0cmFpdApzd2VsdGVyaW5nCmNvbXBsZXggY3liZXJuZXRpYyBiZWluZ3MKbWFzdGVycGllY2UuIHJlbmRlcmVkIGluIGJsZW5kZXIKaGlnaCByZW5kZXJpbmcKbHVtaW5hbmNlCmJpcmQgZXllIHZpZXcKc2hvdCBvbiAxIDUgMCBtbQpyZWFsaXN0aWMgY2luZW1hdGljIHN0eWxlCmxvdyBmaQpoZXJvaWMgZmlnaHRlcgpmcmVzaCBtb2Rlcm4gbG9vawp2aXZpZCBjb250cmFzdHMKOG1tCi0gbiA0CmluZGlhbiBhcnQKbWFmaWEKbWFydGhhIGp1bmd3aXJ0aCBza2V0Y2gKc2NpZW50aWZpYyBzY2hlbWF0aWNzCnN0eWxlIG9mIGNhcmF2YWdnaW8KbWVkbnlhbnN6a3kgbGFzemxvCmhhbmRzb21lIGV5ZXMKaGUgLSBtYW4KamsgdW5pZm9ybQpyZWFsaXN0aWMgOGsKMTAKdWx0cmEgcmVhbGlzdGljLiBjaW5lbWF0aWMKMTk5MwphbHAKMTk0NQpjb29rZSB2YXJvdGFsIDIwLTEwMG1tIHQzLjEKY2FzdWFsIGNsb3RoaW5nCjozCnN1cHByZXNzaXZlIGZpcmUKcGlubmVkIGRvd24KaW4gc3R5bGUgb2YgaXZhbiBhaXZhem92c2t5CmN1dGVjb3JlIGNsb3duY29yZQpnb29kIGNvbnRyYXN0Cm9uIHRoZSBjYWxtIGxha2UKbW1vcnBnCmh5cGVyIGRldGFpbGVkIHBhaW50aW5nCnNlcGVyYXRlZCBnYW1lIGFzc2V0CmNocm9tYQpicmFjZWxldHMKNSA1IG1tIGxlbnMKbmF0Z2VvCmZ1bGwgb2YgY29sb3JzCmxvdmUgYW5kIG1lcmN5CndldCBzdHJlZXRzCndpdGhvdXQgbm9zZQpubyBub3NlCmVnZwpmZWF0aGVyCnNwYWNlY3JhZnQKc3R5bGUgbWl4IG9mIMOmb24gZmx1eApzdW4gc2hpbmluZyB0aHJvdWdoIHRoZSB0cmVlcwpsb3N0IHBob3RvCjE5NzgKMy1kaW1lbnNpb25hbAp5ZWxsb3cgc2tpbgpwYXJhbWV0cmljIGRlc2lnbgpjdXRlIGNhdAp1bmZpbmlzaGVkCjUgMCBzIHB1bHAgc2NpZmkgaWxsdXN0cmF0aW9uCnNjaG9tYnVyZwpkeXN0b3BpYW4gc2NpZmkKY2luZXN0aWxsIGNvbG91cgptb25pdG9ycwpmaWd1cmVzCmRyZWFteSBjb2xvcnMKaGFzc2VsYmxhZCB4IDEgZCAtIDUgMCBjCsaSIC8gMi4gNQpmb2NhbCBsZW5ndGggOiA4IDUuIDAgbW0KZXhwb3N1cmUgdGltZSA6IDEgLyA4IDAgMAp3ZWFyaW5nIGplYW5zCmlyZWxhbmQKbGlnaHQgYm94CmhvbGRpbmcgYSBnb2xkIGJhZwpoaWdoIGRldGFpbCA4ayByZW5kZXIKbmljZWx5IGRldGFpbGVkCmNoaWxkcmVuJ3MgaWxsdXN0cmF0aW9uCmFydGljaG9rZQppdCBpcyByYWluaW5nCnNhaWxzCmFtb3JwaG91cwpzb2Z0IGZ1cgp3aGl0ZSBwbGFzdGljCmJlYXV0aWZ1bCBkZXRhaWxlZCBpbGx1c3RyYXRpb24KZmxvcmFsIGhlYWRkcmVzcwpzdGlsbCBmcm9tIHRoZSBtb3ZpZQpuZW9uIG5vaXIKdmlvbGVuY2UKcmVuYWlzc2FuY2UgcG9ydHJhaXQKcnlhbiBnb3NsaW5nCnZlcnkgZGV0YWlsZWQgY29uY2VwdCBhcnQKY2FueW9uCmV4cXVpc2l0ZWx5IGRldGFpbGVkCnJlZCBsaWdodG5pbmcKY3J1ZWwKd2FybSBnbG93CnVrCmZhc2hpb24gY29uY2VwdCBhcnQKYXdhcmQgd2lubmluZyBpbWFnZQplZ2dzCm51Y2xlYXIgd2FyCmxvbGlzaApyaWRpbmcgYSBza2F0ZWJvYXJkCm11c2NsZSBkZWZpbml0aW9uCnZpYnJhbnQgcGFpbnRpbmcKYXN0ZXJvaWRzCmJyaWNrcwp2b2x1bWV0cmljIHN1biByYXlzIGFuZCBkdXN0CmhhbGYgaHVtYW4KdG9ybiBjbG90aGVzCnBzNSByZW5kZXIgcXVhbGl0eQpkZWNyZXBpdApmcnVzdHJhdGlvbgp1bHRyYSBwaG90byByZWFsaXN0aWMKYXRtb3NwaGVyaWMgcGhlbm9tZW5vbgptYXRlcmlhbCBkZXNpZ24KdGl0YW4KY29sb3NzYWwgZHJhZ29uIGluIGJhY2tncm91bmQKamFtZXMgd2ViYiB0ZWxlc2NvcGUKbW9uYSBsaXNhIHN0eWxlCmdsb3cgaW4gdGhlIGRhcmsKZGVlcCBmb2cKc2hvdCBmcm9tIGFib3ZlCm1hcmtldApiYWQgbGlnaHRpbmcKbXVzZXVtIGFydApwdXJwbGUgY29sb3JzCnBpbmhvbGUKYXJ0aXN0aWMgcGhvdG8KZ3JlZW4gc2t5CndpZWxkaW5nIGEga25pZmUKYmxhY2sgYmFja2Ryb3AKZmV1ZGFsIGphcGFuCmNlbWV0ZXJ5CmxhcmdlIHBhdHRlcm5zCmVhcnMKYmVybmluaQpwaWN0b3JpYWxpc20KdHVycXVvaXNlIHdhdGVyCnNwaGVyZXMKYnV0dGVyZmx5IGxpZ2h0aW5nCnBhcGVyIGFydApwcmFkYQozZCBkaWdpdGFsIGFydAppbiBzdHlsZSBvZiBpbHlhIGt1dnNoaW5vdgpndWNjaSBwb3N0ZXIKYXJ0IHdpdGggYWkKc3BvcnRzIGlsbHVzdHJhdGVkCmNsb3NlZCBtb3V0aApmdWxsLWJvZHkgc2hvdAphZnJpY2EKZXBjb3QKZ2FuZwpnb3JnZW91cyBwb3J0cmFpdApwYWludGVkIGZhY2UKZXh0cmVtZWx5IG11c2N1bGFyCmJlYXV0aWZ1bCBmZW1hbGUgZmFjZQpqLiBzY290dCBjYW1wYmVsbApoaWVyb2dseXBocwpjb25jZXB0IGFydCBzdHlsZQpoYXp5IGFuZCBkcmVhcnkKYmVzdCBsaWdodGluZwpzaGlueSBtZXRhbApyaWNoIGRlZXAgY29sb3JzLiBtYXN0ZXJwaWVjZQp3aWxsZW0gZGFmb2UKYm9kaWVzCnN0YXJpbmcgYXQgeW91CmxpdCBmcm9tIGJlaGluZApqYXBhbmVzZSBhcmNoaXRlY3R1cmUKd2l0IHN0dWRpbwpjeWJvcmcgY2F0Cmplc3NpY2EgYWxiYQp6b21iaWZpZWQKcmFjZSB0cmFjayBiYWNrZ3JvdW5kCm1pbGl0YXJ5IHZlc3QKYmx1ZSBmaXJlCmJlbGxhIHJhZ2F6emEKaGFycHkKcHJpc29uCnVwcGVyIGFuZCBsb3dlciBib2R5CnJwZyBjaGFyYWN0ZXIgcmVmZXJlbmNlCnByaW1hcnkgY29sb3Igc2NoZW1lCm15c3RpY2FsIGFydApzaGUgZXhwcmVzc2luZyBqb3kKbWlkIG5pZ2h0CmNvbWljIHN0cmlwCmFuaW1lIGNnaQptYXR0ZSBkaWdpdGFsIGlsbHVzdHJhdGlvbgpjYXZhbGllciBraW5nIGNoYXJsZXMgc3BhbmllbApob21lIGludGVyaW9yCmNvcnNldHMKdmludGFnZSA2MHMgcHJpbnQKMTk5MgpzdWJkdWVkIGNvbG9ycwpsaXF1aWQgc2ltdWxhdGlvbgotaCA3MDQKam9oYW5uIHRpc2NoYmVpbgpmYWNpbmcgYW5kIGxvb2tpbmcgYXQgdGhlIHZpZXdlcgpzY3JlZW4gc3BhY2UgZ2xvYmFsIGlsbHVtaW5hdGlvbgpnbG9vbXkgY29sb3JzCnNhbHNhIHRyaWNrcwpwYWxtIHRyZWUKdHJhZGl0aW9uYWwgYW5pbWF0aW9uCmRyZXNzZWQgaW4gb3JuYXRlCnBsYXlzdGF0aW9uIDEgZ3JhcGhpY3MKY2luZW1hdGljIG1vdmllIHN0aWxsCmNvbG9yaXplZCBwZW5jaWwgc2tldGNoCm9uZSBjaGFyYWN0ZXIKdGhleSBhcmUgd2F0Y2hpbmcKY2VudHJlZCBpbiBpbWFnZQpmaXJlYXJtcwpzY2FuCnZvZ3VlIHBvc2VzCnVucmVhbCBlbmdpbmUgNSB0ZWNoIGRlbW8KZHJhbWF0aWMgcG9ydHJhaXR1cmUgb2YgdXVlbgpzaWxrIGRyZXNzCmVtaWx5IHJhdGFqa293c2tpCmRpbWVuc2lvbnMKYmVlcGxlIHJlbmRlcmluZwozZCBhbmltZQpzdW5saWdodCBzaGluaW5nIHRocm91Z2ggd2luZG93cwpibGFjayBhbmQgd2hpdGUgaW5rIHN0eWxlCndoaXRlIG9uIGJsYWNrCmZlbWFsZSBiYXJiYXJpYW4KcGFycm90CmRhcmsgc3BhY2UKZ3VzdGF2ZSBkb3JlJyBiYWNrZ3JvdW5kCmdyYW5kIHRoZWZ0IGF1dG8gcG9zdGVyCmNyZWF0aXZpdHkKcnllIChzaGlzaGtpbikKY29taWMgc3RyaXAgc3R5bGUKYXJ0c3R1ZGlvCmdpcmFmZmUKZHJpcHBpbmcgd2F0ZXIKZ2xvd2luZyBwdXJwbGUgZXllcwpicm9hZCBkYXlsaWdodApyZWFsaXN0aWMgZGVwdGgKdmlzdWFsbHkgY29oZXJlbnQKcHZjIGFybW9yCmhvbG9zb21uaWEKdW1icmVsbGEKaHlwZXIgcmVhbGlzdGljIGZpbG0gcGhvdG9ncmFwaHkKYmVhdXRpZnVsISEhCmlubnNtb3V0aApnbG93aW5nIHRoaW4gd2lyZXMKbmVvbiBuaWdodAptdXRlZCBjb2xvcnMgd2l0aCBtaW5pbWFsaXNtCnNwaXJpdHVhbCBhcnQKaW4gYSBibGFjayBzdWl0CmhpZ2hseSBkZXRhaWxlZCAzZCByZW5kZXIKY29sb3JlZCBwcm9qZWN0aW9ucwprYWl0bHluIG1pY2hlbGxlIHNpcmFndXNhCmtpdHRlbgpmYW50YXN0aWMgYXJ0CmNvbWVkaWMKcHJhY3RpY2FsIGFybW9yCmV4cHJlc3NpdmUgcGFpbnRpbmcKbGl0dGxlIGdpcmwKd2VzIGFuZGVyc29uIHN0eWxlCmNvbXBsZXhpdHkKbWFsZSBjeWJvcmcKc21va2UgY2xvdWRzCmxhdCBsaWdodGluZwpwYWludCBvbiBjYW52YXMKbW9uc3RlciBhbmF0b215CmluIGRlZXAgZm9yZXN0CnRodW1ibmFpbApubwpuYW1pCm5laWwgeW91bmcKZXBpYyBsaWdodG5pbmcKcGV0ZXIgZ3JpZmZpbgpsaWdodCBibHVzaAozZCB1bnJlYWwgNQptYWdpYyBsaWdodGluZyBvdmVybGF5cwptYWdpY2FsIHBvcnRhbCBvcGVuZWQKaW5mZXN0YXRpb24KM2QgcmVuZGVyIDhrCmtyaXRhCm9uZSBmYWNlCmJsb29kYm9ybmUgY29uY2VwdCBhcnQKdGlyZWQgZXllcwpvdmVyd2F0Y2ggYXJ0IHRlYW0KcG93ZXIgYXJtb3IKYXJjaGlwZWxhZ28Kc2NpLWZpIGFybW91cgpibGFjayBvdXRmaXQKYmVrc2lua3NpCnNjYXR0ZXJlZCBydWJiaXNoIGFuZCBkZWJyaXMKc3R1bm5pbmcgc2NlbmVyeQpkZWFkIHNwYWNlIGFydHdvcmsKY29udHJhc3RlZCBjb2xvcnMKc2hpbmdla2kgbm8ga3lvamluCmFydGdlcm0gYW5kIHBhdHJpY2sgZGVtYXJjaGVsaWVyCnR2IHN0YXRpYwphYnN0cmFjdCBzaGFwZXMKdGF0c3VtYWtpIGZyb20gb25lIHB1bmNoIG1hbgp3aXJlcy4gYmlvcHVuawp0aGUgc3VuJ3MgcmF5cyB0aHJvdWdoIHRoZSBkdXN0Cmh1bWFuaXR5CmxlZ2VuZCBvZiB0aGUgY3J5cHRpZHMKdHJhY2VyIGZyb20gb3ZlcndhdGNoCmJhdHRsZSBwb3NlCmNvbGQgdG9uZXMKcGF0cnlrIGhhcmR6aWVqCmdyYXBoaWMgZGV0YWlsCmRuZCBzdHlsZQp3aW5kbWlsbApjaG9tYXRpYyBhYmVycmF0aW9uCnBpeHYKcmVkIGRlYWQgcmVkZW1wdGlvbgphcnQgdG95CmV4dHJhdGVycmVzdHJpYWwKd2lsbGVtIGNsYWVzeiBoZWRhCmJhcm9xdWUgYXJ0IGpld2VscnkKcGFzdGVsIHB1cnBsZSBiYWNrZ3JvdW5kCm1peGVkIG1lZGlhcwpjb21wbGV4IGxheWVyZWQgY29tcG9zaXRpb24hIQpicmlsbGlhbnQgY29sZCBsaWdodGluZwpuaW5qYSBvdXRmaXQKZHVzdCBjbG91ZHMgfCBob21vZXJvdGljCnRhbGwgdG93ZXJzCnRvaWxldHBhcGVyIG1hZ2F6aW5lCmpld2xlcnkKZGFyayBjaG9jb2xhdGUgaGFpciBjb2xvdXIKd2FkaW0ga2FzaGluLiB1bHRyYSByZWFsaXN0aWMKeW91bmcgZmVtYWxlIGZhY2UKd2luZGJsb3duCmNoZXJyeSB0cmVlcwppbiBwcm9mZXNzaW9uYWwgbWFrZXVwCmNlbC1zaGFkaW5nIHN0eWxlCndpdGggYSBnYXJkZW4KYmx1cnJlZCBlbnZpcm9ubWVudCBiYWNrZ3JvdW5kCnNocmluZQp3aGl0ZSBjYXBlCm1vZGVybiBmYW50YXN5CnJlcG9ydGFnZSBwaG90bwpzaXR0aW5nIGF0IHRhYmxlCnNoYXJwIGNvbG9yIHBhbGV0dGUKc2lkZSAtIHZpZXcKc2V4eSBnb3duCmNsZW1lbnMgYXNjaGVyCmZvY3VzIG9uIGhlYWQKY2hhcmFjdGVyIHJldmVhbApoZWF2eSBzdG9ybQpmaW5lIGFydCBhbWVyaWNhCm5vaXIgYXJ0aG91c2UKYW5kcmVhcyByb2NoYSBzdHlsZQpzY3JlYW1pbmcgaW4gZGVzcGVyYXRpb24KaGQgbW9kCm1vZGVybiBtYXhpbWFsaXN0IGZhc2hpb24gZHJlc3MKb3V0c2lkZSB2aWV3CmNlcmFtaWMgYmFzZQpoaWdoLXF1YWxpdHkgZGlnaXRhbCBhcnQKZ2FyaXMgZWRlbHdlaXNzCmZpZ2h0aW5nIG1vbnN0ZXJzCnNhbmRzdG9uZQp1bHRyYSBvcm5hdGUgZGV0YWlsCjEgMCAwIG1tIGxlbnMKbmVvIC0gZGFkYQpldGhlcmVhbCBvcGFsZXNjZW50IG1pc3QKZmlyZSBoYWlyCnBlcnNwZWN0aXZlIDMgZCBvY3RhbmUgcmVuZGVyCnN0ZXZlIHpoZW5nCmdsaXN0ZW4KZnJhbmNpcyBiYWNvbiBhbmQgYWduZXMgY2VjaWxlCnVsdHJhcmVhbGlzdGljIGRpZ2l0YWwgYXJ0CnNlY3VyaXR5CmxhYmVscwpnbG9zc3kgc3VyZmFjZQpzaWxseSBhbmQgc2VyaW91cwpoZXJtZXMgYWQKdmVudXMgb2Ygd2lsbGVuZG9yZgpib2VpbmcgY29uY2VwdCBhcnQKbW9vZHkgYWVzdGhldGljCm1hZ2F6aW5lIGNvdmVyIGFydApyb3NlcyBpbiBoYW5kcwptb2Rlcm4gY2FyIGRlc2lnbgpyb21hbnRpc20Kc2NvdHQgcm9iZXJzdG9uCnBhaW50IHNwbGFzaApwc3ljaGljIHBvd2VycwpicmFkbGV5Cmhvcm5lZCBiZWV0bGUKOCBrIGRldGFpbGVkCnBvc3VrYSBkZW1penUKaW50ZW5zZSBjb2xvcnMKcmVkd2FsbApjb3ZlcmVkIGZhY2UKamFtZXMgd2ViYiB0ZWxlc2NvcGUgaW1hZ2VzCmFtb25nIGdvbGRlbiBmaXJlZmxpZXMKYXV0dW1uIHN1bmxpZ2h0cwpraXRjaGVuIHRhYmxlCmFtdXNlbWVudCBwYXJrIGF0dHJhY3Rpb25zCmV4dHJhZGltZW5zaW9uYWwKZ29sZGVuIHRvd2Vycwpjb3R0YWdlcwpmbGF3bGVzcyBza2luCmJvaG8gc3R5bGUKZnJvbSBhIGh1Z2UgcmVkIGdsYXNzIGJvbmcKYmxvb2QgdmVzc2Vscwp0cmFkaXRpb25hbCBqYXBhbmVzZSBhcnQKc3VwZXIgZm9jdXNlZApvbmlvbgpzdXBlciBzaGFycCBmb2N1cwpjaW5lc3RpbGwgOCAwIDAKc2hhcnAgbGluZXdvcmsKZmVtbWUKc3BhY2UgaG9ycm9yCmZpbmUgcG9ydHJhaXQKYmVhdXRpZnVsIHNtb290aCBvdmFsIGhlYWQKYXJ0c3RhaXRpb24Ka2FyYSB3YWxrZXIKNiAwIHMKYmxhY2sgZXllc2hhZG93CmRldGFpbGVkIGFjYWRlbWljIGJvdWd1ZXJlYXUKZmVuZyBzaHVpCmNydCBzY3JlZW5zIGluIGJhY2tncm91bmQKb3Zlcmdyb3duIHdpdGggYXF1YXRpYyBwbGFudHMKaWFuIHNwcmlnZ2VyCmRyYW1hdGljIGFuZCBkeW5hbWljIGxpZ2h0aW5nCmh5cGVyLW1heGltYWxpc3QKc292aWV0d2F2ZSBhZXN0aGV0aWMKbm8gY2hhcmFjdGVycwpoeXBlcm1heGltYWxpc20KYm9yaW5nCmxpZ2h0aG91c2UKYmFyCmludGljYXRlCmdsb3dpbiBleWVzCmdlb2Rlc2ljIGRvbWUKc25vd3kgbW91bnRhaW4KZmxvd2luZyB0ZWFsLWNvbG9yZWQgc2lsawpsb25nIGJyYWlkZWQgcHVycGxlIGhhaXIKc3F1YXNoZWQgYmVycmllcyBkcmlwcGluZwppbXByZXNzaW9uaXNtIGFuZCBleHByZXNzaW9uaXNtCmNvbnRyb2wgcGFuZWwKZ3RhIHZpCmNvbXBsZXggbGlnaHRzCmNnc29jaWV0eSA0IGsKYWxiaW5vIG15c3RpYwpmcmVja2xlZCBwYWxlIHNraW4KZXBpYyBjYXN0bGUKZ2VvcmdlIHBlbWJhCjMgZCB1bnJlYWwgZW5naW5lCmJ1Y2sgdGVldGgKYW5pbWUhISEhISEhISEhISEhISEKcmljaCBhenVyZSB0b25lcwpiYWUgc3V6eQpzdHlsaXplZCBkaWdpdGFsIGlsbHVzdHJhdGlvbgpiYXR0bGUgaGFyZGVuZWQKZ29sZGVuIGhhaXIgYmxvd2luZyB0aGUgd2luZApodW50ZXJzIGdlYXIKdmVyeSBsb3cgbGlnaHQKcGFsZSB5ZWxsb3cgc2t5CmZpbHRlcnMgYXBwbGllZAoxIDkgMyA5CnZlcnkgcmVhbGlzdGljIGZpbG0gc3RpbGwKbWFkZSBvZiBkb3RzCmFyY2hpdGVjdHVyZSBtYWdhemluZQpjYXJpY2F0dXJlIGlsbHVzdHJhdGlvbgpzdHJlZXQgc2FtdXJhaQp0cmVuZGluZyBhcnRpc3RpYyBhcnQKZ29sZGVuIHNwaXJhbHMKMyBjb2xvcnMKZXh0cmVtZSBkZXRhaWxzIHBlcmZlY3QgZmFjZQpleHRyZW15IGRldGFpbGVkCnNoYWRvdyBlZmZlY3QKMSA5IDIgMCdzIHNjaSAtIGZpCmF0dHJhY3RpdmUgYmVlZnkgbWFsZSB3aXRoIGFybW9yCmN5YmVycHVuayBjbG90aGVzCmImdyBwaG90b2dyYXBoeQpicm90aGVyaG9vZApzdHlsaXplZCBib3JkZXIKYWxpZW5zIGluIHRoZSBiYWNrZ3JvdW5kCmNyZWVweSBwb3NlCmNocnlzYW50aGVtdW0KaHVnZSBsaXBzCnN0ZWFtcHVuayBjbG90aGVzCmluIGEgcmVuYWlzc2FuY2Ugc3R5bGUKYnJ1bmV0dGUgZmFpcnkgd29tYW4KdmlldyB1cApzaG9ydCB3YXZ5IGhhaXIKcmVhbGlzdGljIGFuaW1lIGFydCBzdHlsZQptaWNrYWVsIGxlbGnDqHZyZQpqYWV5ZW9uIG5hbQpiZWF1dGlmdWwgcmVuZGVyIG9mIGEgbGFuZHNjYXBlCmludHJpY2F0ZSBkZXRhaWxzIHBhaW50aW5nCmRyYW1hdGljIGxpZ2h0aW5nIDRrCnBpbmhvbGUgY2FtZXJhIGVmZmVjdAprb2RhayBla3RhY2hyb21lIDEgMiAwCmZpZWxkIHdpdGggZ3Jhc3MgYW5kIGZsb3dlcnMKYmlvLW1lY2hhbmljYWwgYmlvLWx1bWluZXNjZW5jZQp0aGljayBvdXRsaW5lCmZ1bGwgb2YgYmxhY2sgZ29vCnNldCBiYWNrIGRlYWQgY29sb3JzCmx1aXMgcm95byBhbmQgZ3JlZyBydXRrb3dza2kKdXNlZCBmdXR1cmUKd2l0aCBzbGVlayBzaWx2ZXIgYXJtb3IKdmlsbGFnZXMgY2FzdGxlcwpodW1hbiBzcGluZQpoaXN0b3JpY2FsIGJhcm9xdWUgZHJlc3MgZGFyawpyZWFsaXN0aWNhbGx5IHNoYWRlZAp0cmliYWwgcGF0dGVybnMKdHJhbnNsdWNpZC4gYmlvbWVjaGFuaWNhbCBjeWJvcmcKZ29vZXkgc2tpbgpjb3ZldGVkCmNvbG9yaXplZCBuZW9uIGxpZ2h0cwpleHBsb3Npb24gb2YgbGlnaHQKcm9nZXIgZGVha2lucyBmaWxtaW5nCmFsIGR1a2UKbmVvbiBqZWxseWZpc2ggaGVhZGRyZXNzCjI0bW0gZjggYXBlcnR1cmUKZXhvdGljIGV4cHJlc3Npb24KKCAoICggd2VhcmluZyBqZWFucyApICkgKQplbmVyZ3kgZmxvd2luZwpzb2Z0IHllbGxvdyBiYWNrZ3JvdW5kCmNvbGxlZW4gbW9vcmUgMiA1IHllYXJzIG9sZAptYXJraW5ncyBvbiByb2JvdApkaXN0YW50IHdvcmxkCnJheSB0cmFjaW5nLiBsdW1pbm91cwpmcmFjdGFsIHBhdHRlcm4gYmFja2dyb3VuZAppbGx1c3RyYXRpb24gY29uY2VwdCBhcnQKdml2aWQgaWxsdXN0cmF0aW9uCmRpbWVuc2lvbiBvZiBzdGlsbCBtb21lbnQKc29mdCBoYWlyLiBsaWdodCBjb2xvciBwYWxhdGUKY29sb3JmdWxseSBvbWlub3VzIGJhY2tncm91bmQKbW9kZXJuIGx1c2ggY29uZG8gYXMgc2hvcGZyb250CmdsYXNzIHNoYXJkcwpjcnlzdGFsIHBhcnRpY2xlcwptYWdpY2FsIHNoaW55IHNraW4KbGlzYSBicmF3bgpzbWFsbCBzdHJhaWdodCBub3NlCnN0cm9uZyBkZWZpbmVkIGphdwpyYXBwZXIgamV3ZWxyeQpoaXN0b3JpY2FsIGFybW9yCmRvdWJsZSBsb25nIGJyYWlkcyBibHVlCmluc2FuZSBjcmF6eSBsYXVnaAppbnRlbnNlIHNoYWRpbmcKZ3Jhdml0eSBtZXNzCmRyZWFteSBjeWJlcnB1bmsgZ2lybApibGFjayBsZWF0aGVyIHNsaW0gY2xvdGhlcwpleHRyZW1lIGRldGFpbGVkIGZhY2UgYW5kIGJvZHkKZWJheSBwcm9kdWN0CnBoeXNpY3Mgc3BsYXNoZXMgb2YgY29sb3JzCmRhcmsgc3RhcnJ5IG5pZ2h0Cm1pZCBsb25nIGhhaXIKY2FuZGxlcyBkcmlwcGluZyB3YXgKY29zeSBhdG1vc3BoZXJlCmdpcmwgZGFuY2luZyBpbiBhIGZsb3dlciBmaWVsZApzbHVycGluZyBzcGFnaGV0dGkKc2hvY2tpbmcgcmVhbGl6YXRpb24KcHJvdGVjdGlvbgp0cmFtcwppbnRyaWNhdGUgaGV0ZXJvY2hyb21pYSBzYWQKYmxvb2R5IGV5ZXMKbWFoaXJhIGtoYW4gYXMgYSBkJmQgd2l6YXJkCmJhbmdzIGFuZCB3YXZ5IGhhaXIKYW5uaWUgbGllYm92aXR6LiBndXN0YXZlIGRvcmUKc2hpbnkgYm9iIGhhaXJjdXQKZnVsbCB2aWV3IG9mIGEgY2FyCmVsZWdhbnQgYXRtb3NwaGVyZQpnaXJsIHdhbGtpbmcgaW4gd2hlYXQgZmllbGQKc3Vuc2V0IGJhY2tsaWdodApiZWF1dGlmdWwgc3ltbWV0cmljIGJvZHkKYmxlbmRlciBkZXNpZ24gYXNzZXRzCmdyZWV0aW5nIGNhcmQKYmx1dGghCmFraWhpa28geW9zaGlkYSEKYXQgdGhlIGJlYWNoIG9uIGEgc3Vuc2V0CmhpZ2hseSBkZXRhaWxlZCBnaWFudGVzcyBzaG90Cmdlb21ldHJpYyBwb2x5Z29ucwpwYWludGVybHkgaHVtYW5vaWQgbWVjaGEKcG9yY2VsYWluIGZvcmNlZmllbGQKZ29sZGVuIGpld2VsZXJ5CmVsYWJvcmF0ZWx5IGNvc3R1bWVkCmluZnAgeW91bmcgd29tYW4KbGlnaHQgY29taW5nIGluIGZyb20gdGhlIGxlZnQKd2F0ZXIgY29sb3Igb24gcGFwZXIKYnJvd24gamFja2V0IHdpdGggbG9uZyBzbGVldmVzCmtlcmxpIGtvaXYKc3ludGh3YXZlIG5lb24gcmV0cm9mdXR1cmlzbQplbG9uZ2F0ZWQgZmlndXJlCm1hbnkgeWVhcnMgZ29uZQpncmF2ZXlhcmQgbGFuZHNjYXBlIGF0IG5pZ2h0Cm1vbm9jaHJvbWUgMyBkIG1vZGVsCmdvbGRlbiBob3VyIGNsb3NldXAgcGhvdG8KdW5hdHRyYWN0aXZlCmRvIHdoYXQgd2UgY2FuCmxpYW5hcwpyb2FkIGJldHdlZW4gaGlsbHMKcGVvcGxlIHdhaXRpbmcgaW4gYnVzIHN0b3AKOGsgaW5zYW5lIGRldGFpbApzbm93aW5nIGZyb3plbiBpY2UKcG9ydHJhaXQgb2YgcHJpbmNlc3MgbWVyaWRhCmhlIGlzIGFib3V0IDUgMCB5ZWFycyBvbGQKaGFpciBvdmVyIGZhY2UKcG9pbnR5IGNvbmljYWwgaGF0CjxwZXJmZWN0IGZhY2U+CnBlcGUgdGhlIGZyb2dzIGF0IHdhcgpmYWNpbmcgY2FtZXJhIGRpcmVjdGx5CnNmIDUgaW5rIHN0eWxlCnVsdHJhIGVuaGFuY2VkIGZhY2VzCnNoaXJ0IGFydAptYXlhIGFsaSBhcyBhIHN0b3JtIHNvcmNlcmVyCjcgMCdzIHZpbnRhZ2Ugc2NpIC0gZmkgc3R5bGUKdGFsaXlhaApzd2ltbWluZyBkZWVwIHVuZGVyd2F0ZXIKd2VhcmluZyBhIGx1eHVyaW91cyBzaWxrIGNsb2FrCmNoYXJhY3RlciBkZXNpZ24gZm9yIGFuaW1hdGlvbgp0aGUgYXJ0IG9mIGJvb2tzCmRldGFpbGVkIHNjYW7igJ0Kc2FuY3R1YXJ5CnN0aWNrZXJzCmdsb2JhbCBsaWdodApsdW5hciBsYW5kc2NhcGUKYXJjaGVyCnNoZSBoYXMgYSBjcm93biBvZiBmbG93ZXJzCnJlY2lwZQpmcm9udCBmYWNpbmcgY2FtZXJhCmZpbG0gZ3JhaW4gYW5kIG5vaXNlCmRpc3RhbnQga25vdHRlZCBicmFuY2hlcwpmbG9yYWwgYmFja2dyb3VuZApbMzJrIGhkXV4xMApwYXRyaW90CnNoaXAKYmFja2dyb3VuZCBibHVyCmRldGFpbGluZwpwb2ludGluZwpmdWxsIGJvZHkhISEKY29sZCBuZW9uIGxpZ2h0CmhlYWRkcmVzcwpjb250cmFwcG9zdG8KZWxlY3Ryb25pYwp0aGUgc2ltcHNvbnMKaW4gYSBwb3N0IGFwb2NhbHlwdGljIGNpdHkKcG9rZXIgY2FyZCBzdHlsZQpzZWEgbW9uc3RlcgpuaWdodGxpZ2h0CmJsYWNrIGdvdGhpYyBqYWNrZXQKZmlsdGh5CnN1bWVyaWFuCmFkdmVydGlzaW5nCmZlbWFsZSBhbGl2ZQptb29uIGFuZCBzdGFycwpzdGlja2VyIC0gYXJ0CmNpbmVtYXRpYyBhbmdsZXMKcGlzdG9sCm9vemUKbmFpbHMKbmlndAp2aWJyYW50IGNvbG9yIHBhbGV0dGUKYmFycm9xdWUgcGFpbnRpbmcKcmVhbCBmb290YWdlCjM1IG1tIGxlbnMKYXF1YXRpY2FsIHBsYW50cwp0aGUgbG9zdCBjaXR5IG9mIGF0bGFudGlzCmFydGUgbG93YnJvdyBzdHlsZQpjaGliYSBwcmVmZWN0dXJlCnBzeWNob2xvZ2ljYWwgaG9ycm9yCndlYXJpbmcga2ltb25vCmRhcmsgc3R5bGUKZmlsdGVyCmJlYXV0aWZ1bCBkaWdpdGFsIGlsbHVzdHJhdGlvbgpjb3JvbmEgcmVuZGVyZXIKbGVhZ3VlIG9mIGxlZ2VuZHMgc3BsYXNoYXJ0CmNvbG9yIGdyYWRpZW50CmZhaXJ5IHdpbmdzCmhpZ2ggcmVzb2x1dGlvbiBwaG90b2dyYXBoeQprb2kgZmlzaApzb2xpZCBjb2xvdXJzIG1hdGVyaWFsCnNwaWRlcndvbWFuISEKeWVsbG93IGFuZCBibGFjayBjb2xvciBzY2hlbWUKOCBrIGh5cGVyIGRldGFpbGVkCmZpZWxkIG9mIGZsb3dlcnMKcmVsYXhpbmcgb24gYSBjb3VjaApoaWdobHkgZGV0YWlsZWQgb2N0YW5lIHJlbmRlcgpjbGVhbiBhZXN0aGV0aWMKbW9ybmluZyBnbG9yeSBmbG93ZXJzCmNvbW11bmlzdApvbiBhIHdvb2RlbiB0YWJsZQpwZXJzcGVjdGl2ZSB2aWV3CnZlcnkgbG9uZyBibGFjayBoYWlyCmhpZ2hseWRldGFpbGVkCnBob3RvLXJlYWxpc3RpYyB1bnJlYWwgZW5naW5lCndlYXJpbmcgYSB0YW5rdG9wCm1hZGUgb2YgbWV0YWwKbGFiaWxlIHRlbXBlcgoxMDgwcApjb21wb3VuZCBleWVzCnNraW5ueSBmYWNlCmFjYWNpYSB0cmVlcwpjb2JhbHQgYmx1ZQp3aGl0ZSBhcm1vcgpiYWNrZ3JvdW5kIGNoYW90aWMgZmxvd2Vycwp1a2l5byAtIGUgc3R5bGUKb2ggbGF3ZCBoZSBjb21pbmcKMTkyOQpoYWdnYXJkCnJvdG9zY29wZWQKaGVhZCBkb3duCjE4dGggY2VudHVyeQp3aXRoIGEgc3Vuc2V0CndoaXRlIHQtc2hpcnQKcmVhZHkgZm9yIGEgbWVldGluZwpucHIKY2xlYW4gc2hhcGVzCnBvcCBzdXJyZWFsaXNtIGFydCBzdHlsZQp1bHRyYS1kZXRhaWxlZC4gYW5pbWUKYSBkYXJrCmthbGVpZG9zY29waWMKZGVmaW5lZApvY3RhbmUgcmVkbmVyCmhlYXZ5IG1ldGFsIG1hZ2F6aW5lCmJsb2Nrcwp0b3BhegpzbW9rZSBpbiB0aGUgYWlyCnRpYW4gemkKbXVzZXVtIGNhdGFsb2cKaGlnaCBkZXRhaWwgZGlnaXRhbCBhcnQKdGFrZW4gaW4gdGhlIGxhdGUgMjAxMHMKY29uZmlkZW5jZQpmYXV2aXNtZQphcnQgZHUgeGl4ZSBzacOoY2xlCnR1cmtpc2ggYW5kIHJ1c3NpYW4Kc211ZyBzbWlsZQpyYXktdHJhY2VkCnN0ZXJuIGZhY2UKYmFkIHdlYXRoZXIKdmlzdWFsaXplCm1hY2hpbmUgbGVhcm5pbmcKZm9yY2VkIHBlcnNwZWN0aXZlCmRldGFpbGVkIGFuZCBpbnRyaWNhdGUgaW1hZ2UKY2FzdGxlIHNldHRpbmcKZ3JvdW5kIGJyZWFraW5nCnEgaGF5YXNoaWRhCndhcm0gYW5kIGhhcHB5CmRlbnNlCnBsYXRmb3JtcwpmbHlpbmcgaW4gdGhlIHNreQp5ZWxsb3cgdGhlbWUKZXBpYyBjbG91ZHMKY29sb3JmdWwgZGlnaXRhbCBwYWludGluZwpzdXNwZW5zZWZ1bAptYW5kZWxicm90IGZyYWN0YWwgc2tpbgpyZWQgbW9vbgppYmV4IG1hc3RlcnMKZGlzbWFsCm9yYW5nZSBsaWdodGluZwpicm9rZW4gd2luZG93cwpzb2xpZCBibHVlIGJhY2tncm91bmQKcm9sbGluZyBoaWxscwpyYWRpb2FjdGl2ZQppbiBzdHlsZSBvZiBncmVnIHJ1dGtvd3NraQpzaGF0dGVyZWQKNGsgcGhvdG9ncmFwaHkgYXdhcmQgd2lubmluZwpibG9vZHNob3QgZXllcwplYXJ0aCBpbiB0aGUgYmFja2dyb3VuZApwcm9kdWN0IHNob290CnN1bm55IGxpZ2h0aW5nCmdyZWVuIHNoaXJ0CmltcHJlc3Npb25pc3RpYyBwYWludGluZwp3aG9sZSBoZWFkCnNoYWdneSBoYWlyY3V0CmRhcmsgYnJvd24gaGFpcgpkaWFib2xpY2FsCnNlY3VyaXR5IGNhbWVyYQpyZWQgZ3Jhc3MKYmxhZGUgcnVubmVyIDIwNDkgZmlsbQpleHRyZW1lbHkgZGV0YWlsZWQgYW5kIGludHJpY2F0ZQpwaG9uZSBwaG90bwpyYWluYm93IGNvbG9yIHNjaGVtZQpzcGFjZSBza3kKd2FybSBjb2xvciBzY2hlbWUKd2hpdGUgaHVtYW4gc3BpbmUKbWFzdGVyIGlsbHVzdHJhdGlvbgp1bHRyYXJyZWFsaXN0aWMKYW5hbG9ndWUgcGhvdG8KaG9ycm9yIHNjY2VuZQpoaWdoIHF1YWxpdHkgOGsgaGQKZGV0YWlsZWQgbGVncwphbGJlZG8gZnJvbSBvdmVybG9yZApkZW1vbiBzb3VscwphbGJlcnQgZWluc3RlaW4KYmVhdXRpZnVsIGZsb3dpbmcgaGFpcgpleHRyZW1lbHkgZmluZSBpbmtpbmcgbGluZXMKY292ZXJlZApzbmFrZXMgZm9yIGhhaXIKYW4gYWJhbmRvbmVkCnBpY2tsZSByaWNrCmRhcmsgcGllcmNpbmcgZXllcwpzcHJpbmcgdmlicmFuY3kKdGl0aGkgbHVhZHRob25nCjRrIHJlYWxpc3RpYwphbWJpZW50IGxpZ2h0cwphc3ltbWV0cmljYWwgZmFjZQpyZWFsaXN0aWMgc2tpbgprdW5nIGZ1CnN3ZWF0eSBtb3VudGFpbgpiYWNrIHRvIHRoZSBmdXR1cmUKYTI0IWZpbG0gY2luZW1hdG9ncmFwaHkKbGVha2VkIGZvb3RhZ2UKc3R5bGUgb2Ygc3RvbmUgb2NlYW4gY292ZXIgYXJ0Cm9pbCBwYWludGluZyBhd2FyZCB3aW5uaW5nCmJlYXV0aWZ1bCBjaXR5CnBvd2VyZnVsIHByZXNlbmNlCmFyY2hpdGVjdApiZWF1dGlmdWwgYW5kIGVsZWdhbnQgZWxmIHF1ZWVuCmxhdmVuZGVyCnJvbWFudGljIG1vb2QKYmx1ZSBpcmlzIGV5ZXMKaW4gaGVhcnRoc3RvbmUgYXJ0IHN0eWxlCmZhbnRhc3kgdGhlbWVkCmJpbGxpZSBlaWxpc2ggYXMgZmVtYWxlIGxva2kKYmlvbWVjaAp3ZWlyZCBjYW1lcmEgYW5nbGUKc2NyZWVuIHNwYWNlIHJlZmxlY3Rpb25zCmdvdGhhbSBjaXR5CnBvd2VyIHJhbmdlcnMKZmlsbSBncmFpbiBlZmZlY3QKZ3JvdXAgcGhvdG8KZ3JhcGhpdGUKYmxvb2Qgb24gZmxvb3JzCmludGFnbGlvCmVsZWdhbnQgZGVzaWduCmJyaWdodCB2aXZpZCBjb2xvdXJzCmdsYXNzIGFuZCBnb2xkIHBpcGVzCnBzeWNoZWRlbGlhCmN1dGUgYW5pbWUgZ2lybApjeWJlcnB1bmsgY2l0eSBhdCBuaWdodAo4ayBvY3RhbmUKZGFmdCBwdW5rCnRlcnJpZmllZCDwn5G/CnN0eWxlIG9mIGRhbGkKcmVuZGVyZWQgaW4gb2N0YW5lIHJlbmRlcgpkaXNjbyBiYWxsCmFjY3VyYXRlIGhhbmRzCm1vcnBoZXVzCmJsb2JzCnZpc3VhbCBub3ZlbCBrZXkgdmlzdWFsCmVkbyBwZXJpb2QKZ29kZGVzcyBvZiB0aGUgbW9vbgpmbG9yYWwgZXhwbG9zaW9uCmNvcmlubmUgZGF5CmVkd2FyZCBzdGVpY2hlbgpmdWxsIGJvZHkgd2l0aCBkeW5hbWljIHBvc2UKcHN5Y2hlZGVsaWMgc3dpbXN1aXQKdGhpZ2hzIGZvY3VzCmhpZ2hlc3QgZGV0YWlsCmhpZGRlbiBjYW1lcmEKZW1wdGluZXNzCnN0eWxlIG9mIGFldGhlcnB1bmsKbGl0IGZyb20gYmVsb3cKcmVkIGZsYWdzCnN0YXIgc2hhcnBuZXNzCmZlbWFsZSBrbmlnaHQKYmVhdXRpZnVsIGZhY2UhCnBpbnMKbm8gaGF0CmZvdW5kYXRpb24KZnJvZyBwZXJzcGVjdGl2ZQpsaWdodCBhcnQKd3dlCndpZWxkaW5nIGEgZmxhbWluZyBzd29yZApmcml0eiBsYW5nCmp1c3RpY2UgbGVhZ3VlCmNvaW5zCmdlbmVzaXMKbm9pc2UgZ3JhaW4gZmlsbQpjaW5lbWF0aWMgbGVucwpzaG91bGRlci1sZW5ndGggaGFpcgp1bmJpYXNlZCByZW5kZXIKYmVhdXRpZnVsIGNvbWljIGFydApndWlsZCB3YXJzIDIKZnZja3JlbmRlcgpzYW0gYW5kIG1heApvcm5hdGUgYXJtb3VyCnN0YW5kaW5nIGluIHRoZSByYWluCmhlYXZ5IHBsYXRlIGFybW9yCmhpZ2hseSBkZXRhaWxlZCBhbmltZQpuZWNyb21vcnBoCmRyYWdvbiB0YWlsCmRhcmsgZmFudGFzeSBob3Jyb3IKbm9haCBicmFkbGV5IGNvbmNlcHQgYXJ0Cmd1aWxsZW0gaC4gcG9uZ2lsdXBwaQpyZW5kZXJlZCBpbiBsdW1pb24Kd2VhcmluZyBsZWF0aGVyIGFybW9yCmphbWllIG1ja2VsdmllIGNvbWljIGFydApjb25jZXJ0IHBob3RvZ3JhcGh5Cmpvc2h1YSBtaWRkbGV0b24gYXJ0CmJpYmxpY2FsIGFydApmb2N1cyBvbiBhcnQgbm91dmVhdSBzdWl0Cmt1cmRpc3Rhbgo4ayBoZCB3YWxscGFwZXJqcGVnIGFydGlmYWN0CmxhaWthCnByaW5jZXNzIGxlaWEKY3liZXJwdW5rIHN1aXQKc2Ftc29uIHBvbGxlbgphcnQgaW5zdGFsbGF0aW9uCmxvdmVyY3JhZnQKYmF0dGxlLWRhbWFnZWQKbWFjcm9waG90bwptaW5pbWFsaXN0aWMgYXJ0Cm1vbmtleSBraW5nCmJlYXV0aWZ1bCBmb3Jlc3QKYmxhY2sgYW5kIHdoaXRlIGdyYXBoaXRlIGRyYXdpbmcKbmlja2kgbWluYWoKY3Jpc3AgZWRnZXMKYXJpZWwgdmlldwpoZSBpcyBmcm9tIHZpcmdpbmlhCnRla2tvbiBraW5rcmVldApzaW5raW5nCnBlYWt5IGJsaW5kZXJzCnBlbmd1aW4KYXJ0ZnVsbHkgdHJhY2VkCndpdGggb21pbm91cyBzdG9ybSBjbG91ZHMKc3RvbmVzIGZhbGxpbmcgZnJvbSB0aGUgc2t5CmNvcmFsaW5lCnNtaXJraW5nIGZhY2UKZWxlZ2FudCBmdXR1cmlzdGljIHdhcmRyb2JlCnBvcnRyYWl0IG9mIGdhbCBnYWRvdApwb3J0cmFpdCBvZiBzYXVsIGdvb2RtYW4KcmVkIGhpZ2hsaWdodHMKbmV4dCB0byB3aW5kb3cKcHN5Y2hlZGVsaWMgZWZmZWN0cwpyZW5kZXJlZCBpbiByZWRzaGlmdAp3aGl0ZSBiaWtpbmkKZnJhY3RhbCBkZXRhaWxzCmZyYW5rIGhlcmJlcnQKZmVybmFuZCBrZWxsZXIKc2hvb3RpbmcKcmVtYXN0ZXJlZCBjaHJvbWF0aWMgYWJlcnJhdGlvbgpwaXBlCnBvc3RjYXJkCnNsZWVwIHBhcmFseXNpcwoxOTEwIHBvbGFyb2lkIHBob3RvZ3JhcGh5CmpvZWwgbWV5ZXJvd2l0egpsYXJnZSByb2NrcwpvYmVsaXNrCmpvbmF0aGFuIHdpbnRlcmhhcnQKc3RldmVuIHNlYWdhbApjb3ZlciBtYWdhemluZQpjb2xvcmZ1bCBpbGx1c3RyYXRpb24KdGF0dG9vIHN0ZW5jaWwKdGhlIGxhc3Qgb2YgdXMKaXJpZGVzY2VudCByYWRpYW5jZQp1cHdhcmQgYW5nbGUKbG9zdCBpbiBkZXNwYWlyCnR3byBtZW4KYWx0YXIKY29sb3JzIG9mIG1hcmsgcm90aGtvCmN5YmVybmV0aWMgaW1wbGFudAp3b21hbiBkcmlua2luZyBjb2ZmZWUKbGVhdGhlciBjbG90aGVzCnRyYWRpdGlvbmFsIGluawpnaW5nZXIKZiAxIDgKaW50cmljYXRlIHRleHR1cmUKcGxhbnMKcGVkZXIgYmFsa2UKZ2FtZXIKZnJvbXNvZnR3YXJlCnVudXN1YWwgY29sb3IgcGFsZXR0ZQpwaXh0YS4ganAKcHJlc3MgY29uZmVyZW5jZQptYWdpYyA6IHRoZSBnYXRoZXJpbmcKZHJhbXRpYyBsaWdodGluZwpjdXJseSBtZXNzeSBoaWdoIGJ1biBoYWlyc3R5bGUKc2ltcGxlIHN0cnVjdHVyZQpkJmQgdmliZQo0IGsgdmVydGljYWwgd2FsbHBhcGVyCmNsZWFuIGJvcmRlcnMKY3ljbG9wcwpjbG9zZSAtIHVwIHZpZXcKcG93ZXJzCnplaXNzIDE1MG1tIGYvIDIuOCBoYXNzZWxibGFkCnJlYWxseSBiZWF1dGlmdWwgbmF0dXJlCm1lZGl0ZXJyYW5lYW4gZmVhdHVyZXMKYXJ0IG9mIGFsZW5hIGFlbmFtaQpicnVzaHN0cm9rZSAtIGxhZGVuCmlsbHVzdHJhdGlvbiBhcnQKdGlraQp0b290aGxlc3MKc2ltb24gc3RhbGJlcmcKOCBrIHJlc29sdXRpb24gZGlnaXRhbCBwYWludGluZwpjaGFybGllIGJvd2F0ZXIgY2hhcmFjdGVyIGFydApzb2Z0IG1vb25saWdodCBsaWdodGluZwpjYXN0aW5nIG1hZ2ljCmRlZXAgaW4gdGhlIHdvb2RzCmhpZGluZyBsYXJnZSB0cmVhc3VyZSBjaGVzdApzdXJyZWFsIHBvcnRyYWl0Cm1ldGljdWxvdXMgZGV0YWlsCm1ldGFodW1hbnMKZGFyayBmb2dneSBmb3Jlc3QgYmFja2dyb3VuZAptYWRlIG9mIHZpbmVzCmltcG9zc2libGUgZ2VvbWV0cnkKaW50cmljYXRlIGNvbXBsZXggYmFja2dyb3VuZApzbGVlayBnbGFzcyBidWlsZGluZ3MKbmFycm93IHN0cmVldHMKY2dzb2NpZXR5IDggawppbnRyaWNhdGUgZGV0YWlsZWQgOCBrCnNwcml0ZXNoZWV0CmxhcmdlIHBpcGVzCmFsdmFyIGFhbHRvCm1lc21lcml6aW5nIGZyYWN0YWwgaHlwZXJjdWJlcwpkZW5kcml0aWMKYWJzdHJhY3RlZCBwYWludGVybHkgdGVjaG5pcXVlcwpiZWF1dGlmdWxseSBjb21wb3NlZAphdCBuaWdodCB3aXRoIGxpZ2h0cwptYWRlIG9mIHBsYXN0aWMKbWFkIG1hZ2F6aW5lCnJlYWxpc3RpYyBncmFwaGl0ZQpjb250cm92ZXJzaWFsCmFuaW1lIGFzdGhldGljCndlYXJpbmcgYW4gb3ZlcnNpemVkIHN3ZWF0ZXIKY2xldmVyCmluIHN0eWxlIG9mIGhheWFvIG1peWF6YWtpCnB1bXBraW5zCnVsdHJhIGRldGFpbGVkIDggawpleHRyZW1lIGhpZ2ggaW50cmljYXRlIGRldGFpbHMKbWFnaWNhbCByZWFsaXNtIGFuZCBkYXJrIGZhbnRhc3kKbXV0YXRpb24Kdmlld2VkIGluIHByb2ZpbGUKaWduYW50CmNhciBtb3ZpbmcgZmFzdApvY3RhbmUgdGVuZGVyCm1hb3JpCjEgOSA1IDAgcyBzdHlsZQpicmF2ZS4gYnkgbWFrb3RvIHNoaW5rYWkKZGFuaWVsCnJhZGlvIHNpZ25hbHMKdmlkZW8gZ2FtZSBlbnZpcm9ubWVudCBkZXNpZ24KbmlnaHQgY3liZXJwdW5rIGNpdHkKa29yZWFuIGZpbG0gbm9pcgp3YW5kZXJlcgpyYWYgZ3Jhc3NldHRpIG5ldmlsbGUgcGFnZQpmdWxsIDhrIGhpZ2ggcXVhbGl0eSByZXNvbHV0aW9uCmluaHVtYW4Kbm91dmVhdQpqdW5rCndhdGNoIHRvd2VyCmRzbHIgNSA1IG1tCnNhbXVyYWkgb3V0Zml0CnNvbGlkIGJhY2drcm91bmQKc2VhIG9mIHRoaWV2ZXMgc2NyZWVuc2hvdAp0b3Bkb3duCm1hZCBwYWludGluZwpkaXNwbGFjZW1lbnQgbWFwCnNpZ21hIDIgNCBtbQpiZWF1dGlmdWwgZGV0YWlsIGFuZCBjb2xvcgpjaW5lbWF0aWMgbGlnaHQgZHJhbWF0aWMgbGlnaHQKb3JyZXJ5CmV2ZW4gbGlnaHRpbmcKdGlnaHQgYnVuCmN1cmx5IHBpbmsgaGFpcgpkZWF0aHN0YXIKYW1hemluZyBsaW5lIHdvcmsKcmhhZHMhISEKZXZvbHV0aW9uCmZhY2UgYW5kIHVwcGVyIC0gYm9keSBmb2N1cwpubyB0cmVlcwpkaWdpdGFsIGFzc2V0CnVwc2NhbGVkIHRvIDQgawpzbW9raW5nIGEgYm93bCBvZiBoYXNoIHRvZ2V0aGVyCmFjYWRlbWljCm5lb25wdW5rCnJhaW5ib3dzIGluIHRoZSBiYWNrZ3JvdW5kCjIgY29sb3JzCnJlZmxlY3RpdmUgbGF2ZW5kZXIgb2NlYW4gd2F0ZXIKYm9rZWggYmFja2Ryb3AKZm9jdXMgc2hvdApkaW1seSBsaXQgYmVkcm9vbQpkYXJrIGJsdWUgbG9uZyBoYWlyCnZlcnkgaGFuZHNvbWUKbG9pc2ggdmFuIGJhYXJsZQptZWR1c2EgaGVhZAphbGV4YW5kcmlhJ3MgZ2VuZXNpcwpjaGluLWxlbmd0aCBoYWlyCmhhbmJvawpoaWdobHkgc3ltbWV0cmljCmZldyBkZXRhaWxzCm1lY2hhbmljYWwgYWNjZW50cyEKZXh0cmVtZSBiYWNrbGlnaHRpbmcKdHVycXVvaXNlIGFuZCBvcmFuZ2UKbm8gZGlzdG9ydGlvbgp1bmJlYXRhYmxlIGNvaGVyZW5jeQpzaG90IG9uIGV4cGlyZWQgaW5zdGFtYXRpYyBmaWxtCmxvdmVjcmF0ZnRpYW4gaG9ycm9yCmxpZ2h0IHBpbmsKYmxlYWNoZWQgY29sb3Vycwpqb3NlcGggbW9uY2FkYQpkYW1vbiBzb3VsZQptYW5hYnUgaWtlZGEKc3RyZWV0IGZhc2hpb24KYXAgYXJ0CmN5YmVycHVuayBjbG9pc3RlcnMKZmFsbGluZyByZWQgcGV0YWxzCmVwaWMgcmVkIC0gb3JhbmdlIG1vb25saWdodApzbm93eSBuaWdodAphY3J5bGljIHBvdXJpbmcKc21vb3RoIG92YWwgc2hhcGUgZmFjZQpreXphIHNhbGVlbQpkZWF0aCBzdHJhbmRpbmcgYXJ0IHN0eWxlCmtpdHR5CnN0ZXBoZW4gYmxpc3Mgc3R5bGUKY2hlY2tlcmVkIGZsb29yCmZpYmJvbmFjY2kKc3BhcmtseSBleWVzCnN0YWduYW50IHdhdGVyCmRhIHZpbmNpIG5vdGVzCnRyYXNoIGJhZyBvbiBoZWFkCnJvYm90aWMgYXJtCndpdGggcHRlcm9zYXVycyBmbHlpbmcKMSA4IDkgNgpmcm9tIDE5ODUKZmFkZWQgaGF0CnJpY2sgYW5kIG1vcnR5IHN0eWxlCmNsZWFuIHRoaWNrIGxpbmUKYmxhbWUKZWluYXIgam9uc3NvbgpkaXNyb2JlZApyYWRpYW50IGZsYXJlcwpldmlsIHJlYWxtIG1hZ2ljIHBhaW50aW5nIHZpYmVzCndlbGwgLSBkZXNpZ25lZAphdmFudCBkZXNpZ25lciB1bmlmb3JtCnBlcmZlY3QgZXllcyEhCmJpYmxpY2FsIGltYWdlCnZpZGVvZ2FtZSAzZCByZW5kZXIKaW50cmljYXRlIHZpY3RvcmlhbiBkcmVzcwpuZXcgeW9yayBza3lsaW5lCnNob3J0IGRvZgprZW5kYWxsIGplbm5lcgptb2Rlcm4gY2xvdGhlcwptb29uc2hpbmUKc2F0Y2hlbHkgYW5kIGFraWhpa28geW9zaGlkYQpjaGFyYWN0ZXIgYWRvcHRhYmxlCmRlc2VydCB0cmFuc2l0aW9uIGFyZWEKYXVzdHJhbGlhbiBkZXNlcnQKdGFsZXMgb2YgZWFydGhzZWEKcXVpbmFjcmlkb25lIG1hZ2VudGEKZ2FtZSBtYWtlcgpkb2luZyBhbiBlbGVnYW50IHBvc2UKa2FsaWdoYXQgZmxvd2VycwpjYXN1YWwgZ3JlZW4gY2xvdGhpbmcKYWNjdXJhdGUgcmF5IHRyYWNpbmcKbHVjeSBsaXUga2lsbCBiaWxsCnBlcmZlY3RseSBkZXRhaWxlZCBsaW5ld29yawpyZXRybyBwaW51cCBtb2RlbAp3YXRlZHJvcHMKZWxlZ2FudCBsb29rCjEgOSA4IDAgcyBtdWxsZXQgaGFpcmN1dApqdWxpYW4gb3BpZQpwYXN0ZWwgbmVvbiBjb2xvcnMKaHVtYW5zCmFxdWFtYXJpbmUgZXllcwpnaXJhdWQKY29sb3JmdWwgaW5rCndpdGggZmFtaWxpYXIgc3ByaXRlcwp2ZXJ5IHNoYXJwIGRldGFpbAphc2h0ZXJvdGgKc3BsYXR0ZXJlZCBibGFjayBnb28KZXhoaWJpdAptb2Rlcm4gbWluaW1hbGlzdApndGEgY2hpbmF0b3duCnZlcnkgc2hhcnAgcGhvdG8KY2hyaXN0aWFuIHNhaW50CnZvbHVtZXRyaWMgcGVyZmVjdCBsaWdodApqb2FubmEgZ2FpbmVzCnNob3J0IHNsaWNrZWQgLSBiYWNrIGhhaXIKMSA5IDkgMCdzIGFuaW1lCm1heWEgYWxpIGFzIGEgZCZkIHNvcmNlcmVyCjMgNiAwIGhlYWQKZmFjZSB0dXJuYXJvdW5kIDMgNiAwCmZlcmFsIGFydApjYXRocmluIG1hY2hpbgpiZWF1dGlmdWwgYmFja2xpdApmYXJtIGZpZWxkIGJhY2tncm91bmQKdG9uYWwgY29sb3JzIG91dGRvb3IKZ3RhIHNhbiBhbmRyZWFzIGNvdmVyIGFydAp3aGl0ZSBtZWNoYW5pY2FsIGRldGFpbHMKdWx0cmEgNCBrIGNvbmNlcHQgdHVybmFyb3VuZAp3b29sCnNob3QgZnJvbSBkYW5pcyB2aWxsZW5ldXZlIG1vdmllCjggNSBtbSBsZW5zZXMKYmlnIGV5ZXMgYW5kIGxpcHMKaGlnaCByZWQgbGlnaHRzCmh5cGVyIGRldGFpbCBpbGx1c3RyYXRpb24KY29uY2VwdCBhcnQgZGVzaWduIGlsbHVzdHJhdGlvbgptZWNoYSBpbnNwaXJlZApmcmVzaCBjb29sIGNvbG9ycwpkZXRhaWxlZCBjb2xvcmVkIHRleHR1cmVzCmRyZXNzZWQgaW4gYW4gb2xkIHdoaXRlIGNvYXQKY3V0ZSBhcnR3b3JrCmZ1cnNvbmEgZnVycnkgYXJ0IGNvbW1pc3Npb24Kd2VsbCBtYWludGFpbmVkCmluIGp1bmdsZSBmb3Jlc3QgISEhCnN0ZXBoZW4gbGFuZwppbiBhIGRlc29sYXRlIGVtcHR5IHdhc3RlbGFuZApkcmFtYXRpYyBsaWdodCA4IGsKaXJpZGVzY2VuY2UgcmVmbGVjdGluZwpwZXJmZWN0IGFuZHJvaWQgZ2lybAp3ZWFyaW5nIGEgbGlnaHQgYmx1ZSBzaGlydApoZWF2eSBtZXRhbCBzdHlsZQpmZWFyIG9mIGhlaWdodHMKZ2xvc3N5IHBhaW50aW5nCnZlcnkgdmVyeSB3aWRlIHNob3QKcGFzdG9yYWwgZmFudGFzdGljIHJlYWxpdHkKZ29sZGVuIGZpcmVmbGllcyBsaWdodHMKaWFuIG1jc2hhbmUKaG9yaXpvbiBjZW50ZXJlZApvdmVyZ3Jvd24ganVuZ2xlIGVudmlyb25tZW50CnF1aWV0IGludGVuc2l0eQpoYWxmIGluIHNoYWRvdwoxIDkgMSA2CmdyZWF0IGxldmlhdGhhbgpkYXJrIGJhY2tyb3VuZApuZW8gLSBpbXByZXNzaW9uaXN0IHN1cnJlYWxpc20KYmVhdXRpZnVsIGRlbGljYXRlIGZhY2UKd2F0ZXJjb2xvciBkaWdpdGFsIHBhaW50aW5nCmRpZ2l0YWwgcGFpbnRpbmcgYXJ0CnZlcnkgYmVhdXRpZnVsIHlvdW5nIHdvbWFuCm1hdHVyZSBtYWxlCm1heWEgYWxpIGFzIGEgd2luZCBtYWdlCnN5bW1ldHJpY2FsIG5vc2UKZHJlYWQgKyBoaWdobHkgZGV0YWlsZWQKZGltIHN0dWRpbyBsaWdodGluZwpmdWxsIGZhY2UgZXBpYyBwb3J0cmFpdAp3ZWFyaW5nIGEgdHVydGxlbmVjayBhbmQgamFja2V0CmNhcHR1cmVkIG9uIGNhbm9uIGVvcyByIDYKZ2lhbnQgZHJhZ29uIGZseWluZyBpbiB0aGUgc2t5Cmlubm92YXRpdmUgYXZhbnQtZ2FyZGUgYXJ0CnBvcnRyYWl0IGRyYXdpbmcKdmVjdG9yIGdyYXBoaWNzIGZvcnVtIGJhZGdlCmFsaWVuIHV0b3BpYQpncmVhdCBsaWdodCBhbmQgc2hhZG93cwpkaWFnb25hbCBzcGVsbCB2ZngKaW50cmljYXRlIGZhbnRhc3kgcm9iZXMKaW1hZ2Ugb3ZlcmxheXMKaW4gZGV0cm9pdCA6IGJlY29tZSBodW1hbgpiaWcgcm9ja3MKZXhwb3NlZCBtZXRhbCBib25lcwpicmlnaHQgcmFpbmJvdyBuaW1idXMKaHlwZXJyZWFsaXN0IHBvcnRyYWl0IGluIGEgcml2ZXIKaGlnaGx5IHJlYWxpc3RpYyBoYW5kcwppbnNhbmVseSBjb21wZWxsaW5nCmVkaXRvcmlhbCBhd2FyZGVkCmZhZGVldiA4IGsKc2NpZmkgY2hhcmFjdGVyIHJlbmRlcgpwYWluZnVsbHkgYWRvcmFibGUKMSA5IDIgMCBzIGNsb3RoCmwgwrcgbGF3bGlldApwbGF5ZnVsIGNyZWF0aXZpdHkKbG9uZSBpbmR1c3RyaWFsISEhIHNwYWNlc2hpcCEhCjMgZCBvY3RhbmUgcmVuZGVyIGNvbmNlcHRhcnQKYWN0aW9uIGdsYW1vdXIgcG9zZQptYWxlIHJvYm90aWMgYW50aHJvIG9yY2EKdW5kZXIgdGhlIG9jZWFuCm1lZGl1bSBwb3J0cmFpdCBzb2Z0IGxpZ2h0CndpdGggYSBibGFjayBiYWNrZ3JvdW5kCnZpbnRhZ2UgZ2xvdwpnbG93aW5nIG93bHMKcGhvdG8gKCBmYXIgXyBzaG90ICkKbWV0cm9wb2xpdGFuIG11c2V1bSBjb2xsZWN0aW9uCnBpeGFyIHdldGEgcG9ydHJhaXQKdmVyeSBiZWF1dGlmdWwgc3R5bGUKaG9sbWFuIGh1bnQKbWVkaWV2YWwgYWxjaGVtaXN0IGluIHRoZSBkYXJrCnBvcnRyYWl0IG9mIHRhbGwKZW1icm9pZGVyZWQgcm9iZXMKcmVhbGlzdGljIGZhY2VzIGFuZCBkZXRhaWxzCmhvcml6b24gemVybyBkYXduIG1hY2hpbmUKaGlzdG9yaWNhbCBoZXJvCmZhZSBwcmllc3Rlc3MKc2NpIC0gZmkgLQp0ZWNod2VhciEhIGludHJpY2F0ZQp0YXJvdCEhCnRoZSBib25lIGNyb3duCm1hdGggZXF1YXRpb25zCmJhcmJhcmlhbiBjZWxlYnJhdGUgaGlzIGJpcnRoZGF5CnBpeGVsZWQgc3RyZXRjaGluZwp5b3VuZyBtYW4gd2l0aCBzaG9ydAphcnRzdGF0aW9uIGhx4oCdCnNwYWNlIHNjaSAtIGZpCmRlY2tsZSBlZGdlCmFtb25nc3QgZm9saWFnZQplbGVnYW50IHdhcmRyb2JlCjE5ODIKaGlnaCBmYWNlIGRldGFpbApmdWxsIG9mIHNtb2tlIGFuZCBkdXN0CnNhY3JpZmljaWFsIGFsdGFyCmN1dGUgZWFycwpwYXBlciBvcmlnYW1pCmJsYWNrIHNoYWRvd3MKYnJpZ2h0IG5hdHVyYWwgbGlnaHQKdmVyeSBsb3cgZW5lcmd5CmdvdGhhbQpkZXRhaWxlZCBpbXBhc3RvCndlYXJpbmcgaG9vZGllCnNtYWxsIGZpbmVseSBzdGlwcGxlZCBsaWdodAphbiBvZHlzc2V5IGJleW9uZCByZWFsaXR5CmlyaXNoCm1hbnkgZG9vcnMKdmVyeSB2ZXJ5IHJvYmVydG8gZmVycmkKY29sb3VyIHNwbGFzaApmb3IganVuaW9yCmVsZWdhbnQgZmFjZQpzeW1tZXRyaWNhbCBiYXJvcXVlIHBhaW50aW5nCnlpbiB5YW5nCjAKMSA5IDIgNQpnYW1lIGNoYXJhY3RlciBjb25jZXB0IGFydApibG9uZGUgY3VybHkgaGFpcgp2ZXJ5IGdyYWlueSB0ZXh0dXJlCmFsZXhpcyBmbG93ZXIKcmFwaGFlbCBzdHlsZQpzd2FnZ2VyCmZhbWlseSBwb3J0cmFpdApmaW5lIGRldGFpbGVkCnN0dW5uaW5nbHkgZGV0YWlsZWQKdW5kZXIgbGlnaHQKZGV0YWlsZWQgZGV0YWlscwpzcGlkZXIgd2VicwpwZXJzcGVjdGl2ZSBjb3JyZWN0aW9uCmthaWp1LWVpZ2EKZm9nZ3kgc3Vuc2V0CmJtdyBtMQppbiB0aGUgY2l0eQpzcGVjaWFsIGZvcmNlcyBzZWN1cml0eQpoZWxpcGFkCmRlc3RydWN0aWJsZSBlbnZpcm9ubWVudHMKYW5pbWUgY3liZXJwdW5rCjo2IGdhcyBncmVuYWRlcwptb2ViaXVzIGNvbWljCjIgMCBtZWdhcGl4ZWxzCjEgOSA3IDgKbmF0aW9uYWwgZ2VvZ3JhcGhpY3MKd2hpdGUgb3V0Zml0Cm5vIGh1bWFucwphd2FyZC13aW5uaW5nIG1hc3RlcnBpZWNlCmNoYXJjb2FsIHNrZXRjaApwaW50ZXJlc3QgYW5pbWUKY3J1c2hlZCBxdWFsaXR5CmdhbWUgY2hhcmFjdGVyIGRlc2lnbgphbnlhIHRheWxvciAtIGpveQpzdHJlZXRsYW1wcyB3aXRoIG9yYW5nZSBsaWdodAp1bHRyYSBoaWdoIHNldHRpbmdzCmR5bmFtaWMgY29sb3JzCmRhcmsgbW9ub2Nocm9tZQpib2R5IHBhaW50CnBsZWFzZQpjb21wbGVtZW50YXJ5IHBhbGV0dGUKYnJpZ2h0IGdsb3dpbmcgZXllcwp3ZWxsIHRvbmVkCndoZXJlJ3Mgd2FsbHkKbW9uaWEgbWVybG8KZGFyayBibGFjayBza2luCmFydGdlcm0gYW5kIGphbWVzIGplYW4KYWxpZW4gbW90aGVyc2hpcApqb2FvIHJ1YXMKYXJ0IGRlY28gbmF0dXJlCnNvZnQgbmVvbgp3ZWFyaW5nIGEgYnJvd24KdGl0YW5pdW0gc2tlbGV0b24KY2FwYWNpdG9ycwpoaWdoIHF1YWxpdHkgYW5pbWUgYXJ0CmZpbmUgdGV4dHVyZSBkZXRhaWwKaHlwZXJjdWJlCm1hbm5lcXVpbnMKaHlwZXIgcmVhbGlzdGljIHZmeCBzaW11bGF0aW9uCmluIGEgdHJvcGljYWwgZm9yZXN0CmNpbmVtYXRpYyA4awptYXRyaXggZmlsbSBwaW50ZXJlc3QgY29sb3IKbWFueSBwYXJ0eWdvZXJzCjQgayBmaWxtIHN0aWxsCnZlcnkgdGFsbApoYW5naW5nIHBsYW50cwpzb2Z0IG5lb24gbGlnaHRzCmJ1cm50IHNpZW5uYQpyb2JvdCBleWVzCmhlbnJpIGdpbGxldApqb2huIGhlbnJ5IGRlYXJsZQpvdmVyLWtuZWUgYm9vdHMKd2hpdGUgdGlnaHRzCm92ZXJ3YXRjaCBzdHlsZQpjb29sIGNsb3RoZXMKZWxldmF0ZWQgc3RyZWV0IGFydApicmlnaHQgY29sb3JzIG9pbCBvbiBjYW52YXMKc2NhcnJ5CnJvdG9zY29wZQoxNHRoIGNlbnR1cnkKNGsgcXVhbGl0eSBwaG90bwp1bHRyYS13aWRlIGFuZ2xlCnJlYWxpc3RpYyBhcnQgc3R5bGUKY2VsIGFuaW1hdGlvbgpjZW50ZXIgc3BvdGxpZ2h0Cmx1aWdpCmVsZWdhbnQgc2NlbmUKYnViYmx5Cm1lY2ggc3VpdApkaXJlY3Rpb25hbCBsaWdodGluZwpob3Jpem9udGFsIG9yaWVudGF0aW9uCndhdGVybWVsb24Kc3VycmVhbGlzdGljIGRpZ2l0YWwgYXJ0d29yawpyb2JvdCByZXZvbHV0aW9uCmhpZGVvdXMKNGsgdW5yZWFsIGVuZ2luZQphbWJlcgpjcmltc29uIGhpZ2hsaWdodHMKd2FyaGFtbWVyIGZhbnRhc3kKYmlnIG1vb24KbmF0dXJhbCB2b2x1bWV0cmljIGxpZ2h0CmJsYWNrIGJvcmRlcgpncmV5IGhvb2RpZSBvcGVuZWQKMmQgaWxsdXN0cmF0aW9uCnR6ZWVudGNoCmZsdWZmeSBjYXQKYmVhdXRpZnVsIGZsb3dpbmcgZmFicmljCmFtYmllbnQgbGlnaHRpbmcgYXQgbmlnaHQKbWFzY290CnRyZW5kaW5nIG9uIDUwMHB4CnJlZCBsYXNlcnMKd2lzZSBvbGQgbWFuCmNhbm9uIHRzLWUgMTdtbSBmLzQKY2xlYW4gZGlnaXRhbCBhcnQKbGVhbiBib2R5Cm1lZGlldmFsIGZhbnRhc3kgYXJ0CmFsZXhhbmRyYSBkYWRkYXJpbwpzcGFnaGV0dGkKd2l0aCBnbGFzc2VzCmVuaGFuY2UgZmFjZQoyMDAxCnN0aWxsIGZyb20gYSBwaXhhciBtb3ZpZQpnYW1lIGdyYXBoaWNzCm1hZ2ljIG1pc3QKdGhyaWxsaW5nCnNpbGVudCBoaWxsIGFlc3RoZXRpYwpoeXBlci1yZWFsaXN0aWMgZW52aXJvbm1lbnQKZW5vcm1vdXMgc2NhbGUKZmx5aW5nIGlzbGFuZAp0ZW5uaXMgd2Vhcgo4ayBoaWdoIHJlc29sdXRpb24KYmlnIHJvdW5kIG5vc2UKYmx1ZSBjb2xvcgptaWtlIGZyYW5jaGluYQpsYXNlciBleWVzCmNpbmVtYXRpYyB2b2x1bWV0cmljIGxpZ2h0aW5nCnJvY2t5IGdyb3VuZAp3aXRoIGhpcyBsb25nIGJsYWNrIGhhaXIKYmFjayBhbGxleQpib3JkZXIKY2FuZHkgY29sb3JzCndpZGUgZGVwdGggb2YgZmllbGQKaXJpZGVzY2VudCBoaWdobGlnaHRzCnBpbmsgc2tpbgpicmltbWluZyB3aXRoIGVuZXJneQpmdXR1cmlzdGljIGNhcgpwbGFzdGljIGNlcmFtaWMgbWF0ZXJpYWwKYmxvbmRlIGhhaXIgd2l0aCBwaW5rIGhpZ2hsaWdodHMKdGVycmlibGUKbmFzYSBwaG90b2dyYXBoeQpmbG93ZXJzIGluIGhhaXIKYWJyYWhhbSBsaW5jb2xuCmJlYXV0aWZ1bCBjb2xvdXJzCnBhdGlwaGFuIHNvdHRpd2lsYWlwaG9uZwp5aW50aW9uIGogLSBqaWFuZyBnZXBpbmcKc2hlcmxvY2sgaG9sbWVzCmVuZGxlc3MgaG9yaXpvbgpzdXJyZWFsIGFsaWVuIGtpbmdkb20KZGVwaWN0ZWQgYXMgYSBwaXhhciBjaGFyYWN0ZXIKamV0IGZpZ2h0ZXIKZW52aXJvbm1lbnRzCmJ1bGxldHMKcGFya3MKZGlzY292ZXJ5Cm9yaWdpbmFsCmRvY3VtZW50YXJ5IHBob3RvCmRlc2VydGVkCmNyZXB1c2N1bGFyCmZhbnRhc3RpYyBjb21wb3NpdGlvbgpiZWxseWJ1dHRvbgphZXJpdGggZ2FpbnNib3JvdWdoCnN1biBzaGluaW5nIHRocm91Z2ggY2xvdWRzCm1pY2hhZWwgaHV0dGVyCmZ1dHVyaXN0aWMgYWVzdGhldGljCnBob3RvcmVhbGlzdGljIHBlcmZlY3QgYm9keQpwaW5rIHNreQphbGdhZQp3YXJtIGFtYmllbnQgbGlnaHQKaGFpciB3b3JuIHVwCmVsYWJvcmF0ZSBoYWlyCjo6IG5peHJpCmZ1bGwgY2hhcmFjdGVyIGRlc2lnbgplcGljIHBvcnRyYWl0CndlYXJpbmcgc2hhZGVzCmd0YSBsb2FkaW5nIHNjcmVlbgppbiBzdGFyZmxlZXQgdW5pZm9ybQp3YXJoYW1tZXIgNDAKc3R5bGUgb2YgdmVudG8gYXVyZW8gY292ZXIgYXJ0CmJsYWNrIGNhbmFyeQpnYXplIGRvd24Kd2F0ZXIgdG8gd2Fpc3QKb3V0Zml0IHBob3RvCm5hdCBnZW8gYXdhcmQgd2lubmVyCnN0cmVldCBsZXZlbCB2aWV3CmJlZXRsZWp1aWNlCjE4ODMKaHlwZXJyZWFsaXN0aWMtaCA5NjAKcGhvdHJlYWxpc3RpYwpib2Igb2RlbmtpcmsKMTYgdGhvdXNhbmQKZ29sZCBhbmQgYmx1ZQp1bmlicm93Cm1lZGl1bS1zaG90CmFkdmVydGlzZW1lbnQgcGhvdG8KcmVhbGlzdGljIGNvbXBvc2l0aW9uCnNhdHVyZGF5IG1vcm5pbmcgY2FydG9vbgpkYXJrIGFuZCBpbnRyaWNhdGUKdW5pdHkgcmVuZGVyCmhpZ2hnYXRlIGNlbWV0ZXJ5CmNhcm5pdmFsCmZ1cnkKZm9jdXMgb24gYW50aS1nIGZsaWdodCBzdWl0CnJpY2ggY29sb3VyIGFuZCBkZXRhaWwKYXdhcmQgd2lubmluZyBwb3J0cmFpdAptdXRlZCBjb2xkIGNvbG9ycwoxMjhrCmNvbmNlcHQgY2hhcmFjdGVyIGFydApvcHRpY3MKY296eSBsaWdodGluZwpzYWxzYSBzb2NpYWwgZGFuY2UKc3R1ZGlvIGdoaWJsaSBpbnNwaXJlZAphc2ggdGhvcnAKanVuayBldmVyeXdoZXJlCmdyZWVuIGFuZCBnb2xkCnZpZGVvIGdhbWUgY2hhcmFjdGVyIGRlc2lnbgp0aGljayBzd2lybGluZyBzbW9rZQpwcm9jZWR1cmFsCm5pZ2h0IG1vb2QKZnVsbG1ldGFsIGFsY2hlbWlzdApjb2xvcmVkIGxpZ2h0cwpkb25hbGQgZHVjawpkcmFtYXRpYyBtYXR0ZSBwYWludGluZwpkdWxsIGNvbG91cnMKZHJvc3RlIGVmZmVjdAp0ZXh0dXJlZCBjYW52YXMKZXh0cmVtZSBjb250cmFzdAppcmlkZXNjZW50IGRldGFpbHMKMjB0aCBjZW50dXJ5CnBpdGNoIGJsYWNrIHJvb20Kb24gYSBib2F0CmhpZ2ggZGV0YWxpZWQKZWx2aXMgcHJlc2xleQppbiBhIGRlc2VydApzbGlnaHQgYXdrd2FyZCBzbWlsZQpzZgppY3kKc3BlY3RhY3VsYXIgbW91bnRhaW5zCmJyb3duIGFybW9yCmFydGlzdCBrYXRzdWhpcm8gb3RvbW8Kd29ybGQgd2FyCmZsYW1pbmcgc3dvcmQKYW1hemluZ2x5IGNvbXBvc2VkIGltYWdlCmNvbmNlcHQgc2hlZXQKMTkwMHMgcGhvdG9ncmFwaApsaXNhIGZyYW5rIHN0eWxlCmVtZXJhbGQgZXllcwpnaG9zdCByaWRlcgpyZXN0cmFpbmVkLiBibG9vbQppbnZlcnRlZCBjb2xvcnMKZ290aCBnaXJsCmh5cGVyLWRldGFpbGVkIHBvcnRyYWl0CmZ1bGwgYm9keSBjaGFyYWN0ZXIgZGVzaWduCnByb2R1Y3QgcGhvdG9ncmFwaApmaW5lIGFydCBmYXNoaW9uIHBob3RvZ3JhcGh5CnBob3RvcmVhbGlzbSA4awpob21lbGFuZGVyCmdvZHJheXMgYXQgc3Vuc2V0Cm5pZ2h0IHBob3RvCmdsb3dpbmcgd2luZG93cwpmYW50YXN5IHN1cnJlYWxpc20KamFja3NlcHRpY2V5ZQpjcm93biBvZiBwZWFjaCByb3Nlcwpjcm93ZHMKa2F0eSBwZXJyeQpyZWFsaXN0aWMgYXJtb3IKaGFsZnJlYXIgbGlnaHRpbmcKY2FydmVkCmRlZXBkcmVhbQpsaXR0bGUgbmlnaHRtYXJlcwpraWxpYW4gZW5nIGFuZCBqYWtlIHBhcmtlcgpkb3VibGUtZXhwb3N1cmUKdmVudXMgZ29kbmVzcyBhdGhlbmEKbWFyZ290IHJvYmJpZSBwb3J0cmFpdAptYXN0ZXIgY2hpZWYKbWlrYXNhIGFja2VybWFuCm1pbmRmbGF5ZXIKc3BhcmtzIG9mIGxpZ2h0CmZyb250IGxpZ2h0aW5nCmludHJpY2F0ZWx5IGRldGVhaWxlZApncmVnIHJ1dGtvd3NraSBhbmQgai5kaWNrZW5zb24KZmFjaW5hdGluZwpkaWduaWZ5aW5nCm5vc2ZlcmF0dQpjbG90aGluZwphd2FyZC13aW5uaW5nIHNob3QKc3RhbGFjdGl0ZXMKc3RhbGFnbWl0ZXMKM2QgYmxlbmRlcgp3YXJtIHllbGxvdyBsaWdodHMKc2tpbGxlZCB3YXJyaW9yIG9mIHRoZSBhcGFjaGUKb24gYSBibGFjayBiYWNrZ3JvdW5kCnRpbWUgbWFjaGluZQptaWdyYW50IG1vdGhlcgpwb3J0cmFpdCBtYXN0ZXJwaWVjZQp0aWxkYSBzd2ludG9uCnBvcnRyYWl0IG9mIGRhcnRoIHZhZGVyCmR1bmdlb24ncyAmIGRyYWdvbnMKbWFzdGVycGllY2UgcG9ydHJhaXQKYmxvbmRlIHdvbWFuCnNoYXJwIGphd2xpbmUKcGVhcmxzIGFuZCBjaGFpbnMKd2lsZCBleWVzCnNxdWludGluZwpwb3N0IGFwb2NhbHlwdGljIHBvbGljZSBzdGF0aW9uCnJlYWxpc3RpYyBodW1hbiBmYWNlCmdsYXNzIGJvdHRsZQpkZXRhaWxlZCBhbmQgYmVhdXRpZnVsIGZhY2VzCndvbGYgaGVhZApyaGlubyBiZWV0bGUKYnVzdGxpbmcKbXVyYXRhIHlhc3VzaGkgbmlyYXNhd2Egc3R5bGUKY29taWMgYm9vayBwYWdlCmF0IHRoZSBiZWFjaAoyMDA0CnNvbGFyIHN5c3RlbQpmdWxseSBib2R5CmhlYXZpbHkgZG93bnZvdGVkCm5lbyBreWl2CnZlcnRpY2FsIGdhcmRlbnMKbG9uZyBzcGlreSBoYWlyCmNsZWFuIGxvZ28Kc3RhcmNyYWZ0IDIKY3liZXJuZXRpY2FsbHkgZW5oYW5jZWQKZnJpZ2h0ZW5pbmcgYXBwZWFyYW5jZQp0aGUgd2l0Y2hlcgpodWJibGUgcGhvdG8KZ2xvd2luZyB3aGl0ZSBuZW9uIGV5ZXMKMTkyMHMgc3R1ZGlvIGxpZ2h0aW5nCndheW5lCmZsYXQgZ3JleSBiYWNrZ3JvdW5kCnZpa3RvciBvcmJhbgp3aW5uaWUgdGhlIHBvb2gKb3BlbiBleWVzCnBvY2tldHMKc2NpIGZpIGhvcnJvcgp5b3VuZyBzY2FybGV0dCBqb2hhbnNzb24KZ29sZGVuIHJhdGlvISEKcGlubmFjbGUgc3R1ZGlvCmNhcnZlZCB3b29kCmh5cGVycmVhbGlzdGljIHRleHR1cmVzCmZvcndhcmQgZmFjaW5nIGFuZ2xlCmZpcmUgYmFja2dyb3VuZAptYWtvdG8KcGlsbG93cwphcnRzYXRpb24gY29udGVzdCB3aW5uZXIKY2VsdGljIGtub3RzCmFyYWJpYW4gYmVhdXR5CnRyaSAtIHggNCAwIDAgdHgKY29uY2VydCBsaWdodApyb21lcm8gcmVzc2VuZGkKd2l0aCBicmFuY2hlcyEgcmVhY2hpbmcgdGhlIHNreQpzdXBlciBtYWNybwpzY2ktZmkgY2hhcmFjdGVyIGNvbmNlcHQKbHNkIHJpcHBsZXMKd2FsbCBjb3JuZXIKYW5pbWF0aW9uIGlsbHVzdHJhdGl2ZSBzdHlsZQpnbG93aW5nIG9yYnMKY2luZW1hdGljIHJlYWxpc3RpYwpzdXNwZW5kZXJzCndpdGggY2xvc2VkIGV5ZXMKaGlnaGx5IGRldGFpbGVkISEhCmNoYW5uZWxpbmcgdGhpcmQgZXllIGVuZXJneQpkdXRjaApwaG90b3JlYWxpc3RpYyB0ZXh0dXJlCmNhbm9uIDVkIG1hcmsgaWlpIHBob3RvCmhlYWQgYW5kIHNob3VsZGVycyB2aWV3Cmh1Z2UgdmVpbnMKaGF3awpjaXJjdWl0IGJvYXJkCm9jdGFuZSBoaWdoIHF1YWxpdHkgcmVuZGVyCm1vZGVybiBsb2dvCndlZGRpbmcgcGhvdG9ncmFwaHkKcGVuY2lsIGxpbmVzCmh1bWFuIHBlcnNwZWN0aXZlCnBsZWFzaW5nIHBhbGV0dGUKbmVvbiBjb2xvdXJzCnBvcnRmb2xpbwp2aXZpZW5uZSB3ZXN0d29vZCEKZmlsdGh5IHN0cmVldHMKc2NhcnkgZmFjZQpzdmV0bGFuYSB0aWdhaQpmdWxsIGNvbG9yIGRpZ2l0YWwgYXJ0CnJpY2sgYmFrZXIKcHJvdmlhCmxhbmRzY2FwZSBpbiBiYWNrZ3JvdW5kCnRhY3RpbGUKZGV0YWlsZWQgYWJzdHJhY3QKcHN5Y2hlZGVsaWMgbGlnaHRzIGFuZCBmb2cKbm9ybWFuIHJvY2t3ZWxsIGFraWhpa28geW9zaGlkYQptYWRlIG9mIHdpcmUKc29mdCBuYXR1cmFsIHZvbHVtZXRyaWMgbGlnaHRpbmcKMSA2IHRoIGNlbnR1cnkKZ2FyeSBydWRkZWxsCm1hZGd3aWNrCm15c3RlcnkgY29kZQptYXQgYmxhY2sgbWV0YWwKaW50ZWxsaWdlbnQgZXllcy4gY2VudGVyZWQKbGltaW5hbCBlZXJpZSBtaWRuaWdodCBiYWNrbGl0CnNoYXJwIGRlcHRoIG9mIGZpZWxkCmRhcmsgaGF6eSByb29tCnN1YmplY3QgaW4gY2VudGVyIG9mIGZyYW1lCmxpa2UgYSBwcm9mZXNzaW9uYWwgbW9kZWwKdml2aWQgY29sb3JzIQpmb2dneSBtb3JuaW5nIGxpZ2h0Cm1tCmRyZXNzZWQgaW4gYSBmbG93ZXIgZHJlc3MKc2hhcGVkIGZvY3VzCmJsYWNrIGFybWNoYWlyCjJkIGdhbWUgbGluZWFydCBiZWhhbmNlIGhkCmRvZ3MKZW50aXJlIGNoYXJhY3RlciEKZ2VvbWV0cmljIHRoaXJkIGV5ZSB0cmlhbmdsZQpoeXBlcmRldGFpbGxlZAplZXJpZSBsaWdodAphbmRyZSBsZSBub3RyZQpkYXJrIHNvdWxzIGluc3BpcmVkCmJvbGQgZ3JhcGhpYyBncmFmZml0aQptYXNzaXZlIGRlc3RydWN0aW9uCnBldGVyZHJhd3MKc2V4eSBvdXRmaXQKZGFyayBsaXBzdGljawptb3JuaW5nIGZvZwphcnQgc3R5bGUKaW5zdGFncmFtIHBob3RvIHNob290CmNoYXJjb2FsIGNvbG9yIHNraW4KYW5nZWxpY2FsCmhkIDQgayA4IGsKdGF0dG9vZWQgYm9keQpodWJibGUgdGVsZXNjb3BlIGltYWdlcwpmbGFtaW5nIGV5ZXMKZHJhbWF0aWMgc21pbGUgcG9zZQpqb2huIHNpbmdlciBzYXJnZW50IHN0eWxlCmxvbmcgd2hpdGUgYmVhcmQKc3VuIGRyZW5jaGVkCnJlZCB0LXNoaXJ0CmNvdyBob3JucwpzaGVlcCB3b29sCnRvcCBtaWxrIGJyYW5kcwpzYXhvcGhvbmUKaW5kaSBzdWx0YQp3ZWFyaW5nIGEgcGxhaWQgc2hpcnQKOCBrIHBvc3QgLSBwcm9jZXNzaW5nCmNvbmNlcHQgYXJ0IGluIDMgZApmdWppIDggMCAwCnNlZSAtIHRocm91Z2gKc3VyZmluZwpwaXJhdGUgY2xvdGhlcwpzdHlsZSBvZiBtYXJrIHJ5ZGVuCmNsYXVzdHJvcGhvYmlhCjQgayBjb25jZXB0IGFydApmb2N1c2VkIGV4cHJlc3Npb24KYXR0cmFjdGl2ZSBmZW1hbGUKdXNlIG9mIG5lZ2F0aXZlIHNwYWNlIGFsbG93ZWQKamFwYW5lc2UgbGFuZHNjYXBlCjNkIHNoYWRvd2luZyBlZmZlY3QKc2hhZGVzCnZlcnNhdGlsZQphdXRvZm9jdXMKNCBrIHVoZCB2aWRlbyBjYXB0dXJlIGF0IDMgMCBmcHMKdm9sdXB0dW91cyBtYWxlCmh5cGVyIGRldGFpbGVkIGJhY2tncm91bmQKY29udGluZW50cwozIGQgY2luZW1hdGljIHNjZW5lCnN0cmVldGxhbXBzCmJvcmlzIHZhbGxlZ28KKCgoKG9jY3VsdCBhcnQpKSkpCnBpc3RvbCBpbiBob2xzdGVyCmhlciBoYWlyIGlzIHdoaXRlCmZlbWFsZSBzaGVyaWZmCmxhd3JlbmNlIGFsbWEgLSB0YWRlbWEKc2lkZSBwcm9maWxlIGluIHVuZGVyd2F0ZXIKcmFpbmJvdyBtZWx0aW5nIGNvbG9yIHNjaGVtZQpyb2JvdGVjaCBzdHlsaW5nCm5vc2UgcmluZwptb29uIGxpZ3RoCmZhbmN5IGNvbG9ycwpoYXJuZXNzCmJhbmFsIGJ1dCBteXN0ZXJpb3VzCmZsb3dpbmcgd2lyZXMgd2l0aCBsZWF2ZXMKZHVuZ2VvbiBhbmQgZHJhZ29uIGlsbHVzdHJhdGlvbgp3YXRlciB3aGVlbAppbnRlbGxpZ2VudCBleWVzLiBzeW1tZXRyaWNhbApwYXRob2xvZ3kgc2FtcGxlIHRlc3QgdHViZXMKb2xpdmVyIHZlcm5vbgptb25vcmFpbAp2aWN0b3JpYW4gYWdlCmFscGhvbnNlIG11Y2hhIDggawpzaGlwcwpwdXJwbGUgZ3JhZGllbnQKbWFnYWxpZSB2aWxsZW5ldXZlCnNpdHRpbmcgb24gaGVyIHRocm9uZQpibHVlIGxlZHMKaG90IGNvZmZlZQpiYWNrZ3JvdW5kIG9mIHJlc2lkZW50IGV2aWwgZ2FtZQp3aWxkc3R5bGUKaHlwcGVycmVhbGlzdGljIHBhaW50aW5nCndlbGwgLSBkZWNvcmF0ZWQKbG9tb2dyYXBoeSBwaG90bwpwaWN0b24gYmx1ZQpvbW5pc2NpZW50CnRlYXJzIHJ1bm5pbmcgZG93bgppbnRyaWNhdGUgcmFpbmJvdyBlbnZpcm9ubWVudApmcm9udGFsIHBvc2UKZW50aXJlIGJvZHkKYWxidW0gaXMgY2FsbGVkIHRyaXBtYWNoaW5lCndoaXRlIGxhY2UgY2xvdGhpbmcKYXNjZW5kZW50IHBsYW5lCnN0cmVldCBjbG90aGluZwpyYW1pbCBzdW5nYQpoZXJiZXJ0IGxvd2lzCmZ1cmlvIHRlZGVzc2NoaQpjaHJpc3RvcGhlciBjYW8KaW50cmljYXRlIGNyb3duCmVwaWMga2hhanVyYWhvCmluIHdhdGVyCmV2ZXJ5dGhpbmcgaXMgY2FycGV0IGFuZCAzZApiZWxvdyBvbmx5IGNsb3VkIGRhcmsgdm9pZApzd2FtcHMKMSA5IGNlbnR1cnkKYXJ0IGRpcmVjdGVkIGZpbG1pYyBzdGFyawp2aW50YWdlIGNvbG91cnMKZ2xpbnRpbmcgcGFydGljbGVzIG9mIGljZQphbmFyY2h5CmZsZXNoICsgdGVjaG5vbG9neQpob3Jpem9uIGxpbmUgZm9jdXMKZnVyIGRldGFpbHMKcmVkIGJsdWUgcHVycGxlIGJsYWNrIGZhZGUKZGFyayBhbmQgZ290aGljCmJsdWUgc29mdCBkZXRhaWxzCmRhcmsgZmFudGFzeSBkZXRhaWxlZAp0c3VyaW1lIGV5ZXMKbGlnaHQgYnJvd24gdHJlbmNoY29hdApjcmlzcCBzbW9vdGggY2xlYW4gbGluZXMKZHVzdGluIHBhbnppbm8KZ3JlZW4gaGFsdGVyIHRvcApyaWNoIGluIGRldGFpbHMKc2VlZHkgbGlnaHRpbmcKbGlnaHQgY2luZW1hdGljCjNkIGZlZWxpbmcKd2F0ZXIgYXJtb3IKdGlnaHQgbGlnaHQgYmx1ZSBuZW9wcmVuIHN1aXRzCmdvbGQgYW5kIHNpbHZlciBzaGFwZXMKaGVhdnkgbWV0YWwgY29taWMgY292ZXIgYXJ0CndvcnRoIDEgMCAwIDAuIGNvbQp0b3kgcGhvdG8KMTIwIGRlZ3JlZSB2aWV3CmhpZ2ggZGV0YWlsIHNob3QKZGlhbG9nIHRleHQKbmVlZCBmb3Igc3BlZWQgOiBjYXJib24KY292ZXIgc2hvdApkICYgZCEKYW5uaWUgc3d5bm5lcnRvbgpleXRhbiB6YW5hCnBob3RvZ3JhcGggNCBrCndhdGVyY29sb3Igd2FzaApyZWQgaXJvbiBveGlkZQpiYWNrZ3JvdW5kIGlzIGFuIGFsaWVuIGdhbGF4eQphbGllbiBjb2xvcnMKYmVhdXRpZnVsIGNvZGUKZWwgZGlhIGxvcyBtdWVydG9zCndlZXBpbmcgYW5nZWxzCmJlYXV0aWZ1bCBmZW1hbGUgcG9ydHJhaXQKb2JpIHN0cmlwCmluc3BpcmVkIGluIGtyaXMgZnJvbSBkZWx0YXJydW5lCnllZSBjaG9uZyBzaWx2ZXJmb3gKZiAvIDIgNApzbW9vdGggY29uY2VwdCBhcnQKYmVhdXRpZnVsIHN0ZWxsYSBtYWV2ZSBtYWdpY2lhbgpzaGluc3VpIGl0bwp2ZXJ5IHN0cm9uZwpsb25nIGdvd24KdmVyeSBkZXRhaWxlZCBjdXJ2ZQpvdmVyY2FzdCBtb29kCnBoaWxvc29waGljYWwgc3BsYXNoZXMgb2YgY29sb3JzCmNoaW5lc2UgaW5rIGJydXNoCmluZ3JlZGllbnRzIG9uIHRoZSB0YWJsZQptZXRhbCBmb250CmRyYW1hdGljIGxpZ2h0aW5nKSkpCm11cmF0YQpsb29rIGludG8gdGhlIGRpc3RhbmNlCnNpZGUgbGlnaHQKc3Bsb3RjaGVzCmJyb3duIGNvbG91cnMKeWVsbG93IGNvbG91cnMKaGVycmFydGhzdG9uZQo4IGsgaWxsdXN0cmF0aW9uCnRlY2hub2xvZ3kgdnMgbmF0dXJlCmFuaW1lIHN0eWxlIG1peGVkIHdpdGggZnVqaWZpbG0KcGFpbnRlcmx5IGNvbmNlcHQgYXJ0CmN5YmVycHVuayB3b21hbgpsdW5naW5nIGF0IGNhbWVyYSA6NAp1bmRlcmJvZHkKZnJvbSBsb3JheCBtb3ZpZQpkYXJrIGRlZXAgYmxhY2sgc2hhZG93cwpzdGVsbGFyIGZvcm1hdGlvbgpiaWcgY2hlZWtzCmRyaXBwaW5nIGxpZ2h0IGRyb3BzCmRyYW1hdGljIHBvd2VyZnVsIG5lYnVsYQpnZWxhdGlub3VzIHdpdGggYSBzbWlsZQphZG9yYWJsZSBhcHBlYXJhbmNlISEhCmhhcHB5IGFwZWFyYW5jZQptYWdpYyBhbmQgZmFudGFzeQpzY3JldwpzdW5zZXQgc2t5IGluIGJhY2tncm91bmQKMyA1IG1tIGdyYWluIGZpbHRlcgpoZWF2eSBmb3Jlc3Qgb3V0c2lkZQpvbmlyaWMKamVsbHlmaXNoIGhlYWRkcmVzcwpnaWFudCByb3NlIGZsb3dlciBoZWFkCmNsYXNoIG9mIGNsYW5zIHN0eWxlCmNvbmNlcHQgYXJ0IHwgZmVuZyB6aHUKc3VwZXIgZGV0YWlsaW5nCmR5c3RvcGlhbiB3b3JsZApjb3JydXB0ZWQgZmlsZQpzeW1tZXRyaQp0aGFuYXRvcwpiYXJyZWxleWUKdHJhbnNsdWNlbnQgc3NzCnBhc3RlbCBmdXIKY29tcHV0ZXIgLSBnZW5lcmF0ZWQKY3lwaGVycHVuayBmYXNoaW9uIGlsbHVzdHJhdGlvbgpzcGlubmluZwpmcmFuayBiYWlyc3RvdwpkYXJrIHNvbGFyIGVjbGlwc2UKcHMgNSBzY3JlZW5zaG90CmRhcmsgZmFlCmFuaW1lIDQgawp3aWxkbGlmZSBkb2N1bWVudGFyeQpzdGF0aW9uCnBpbGVzIG9mIG1vZHVsYXIgc3ludGggY2FibGVzCjggayB3aWRlIGFuZ2xlCnJveSBsaWNodGVuc3RlaW4gc3R5bGUKZ29sZCBibGFjawpicm93biBhdG1vc3BoZXJpYyBsaWdodGluZwpsb3ZlIGlzIHRoZSBtb3N0IHJlbGV2YW50IHRoZW1lCmFydGlzdGljIG1vZGUKY2luZW1hdGljIHJvbWFudGljIG1hZ2ljYWwKcm91Z2ggc2VhcyBpbiBiYWNrZ3JvdW5kCmVwaWMgbXVsdGlmaWd1cmVzIGNvbXBvc2l0aW9uCjEgMCAwIG1tIGYgMS4gOApqZXdlbHJ5IGRlc2lnbgpyaXNvZ3JhcGghCmxpcXVpZCBjb29sZWQKYmxhY2sgbGF0ZXggc2N1bHB0CnNsZWVrIHV0b3BpYW4gZGVzaWduCmtpbSBqdW5nIGdpdQpyZWZyYWN0ZWQgc3Vuc2V0CnBldGVyIG1vaHJiYWNoZXIgYyAyIDAKNCAwIDAgMCBrCmRldmlsIHN0dWZmCmRldGFpbGVkIHdoaXRlIGxvbmcgaGFpcgpjaW5lc3RpbGwgODAwdCAzNW1tIGZ1bGwtaGQKcnVubmluZyB3YXRlcgpkYXJrIGFuZCBkcmFtYXRpYwprYWlsZWUgbWFuZGVsCnZlbmRvcnMKY2FuYWwKYmxhY2sgaGFybmVzcwpmdWxsIGZhY2UgY2xvc2UgdXAgcG9ydHJhaXQKYmVhdXRpZnVsIGZlbWFsZSB3aGl0ZQpnbG93aW5nIHZpb2xldCBsYXNlciBiZWFtIGV5ZXMKZ2xvd2luZyBvcmFuZ2UgbGFzZXJzCmZvZ2d5IG1vb2QKZXllIGluIGZvcmVoZWFkCmRhcmsgc21vb3RoIGJhY2tncm91bmQKc3dpcGluZyBicnVzaHdvcmsKZ3VlcnJpbGxlcm8gaGVyb2ljbwooICggKCB5b3NoaW5hcmkgeW9oICkgKSApCndoaXRlYmFuZ3MKaGFsZiBib2R5IHBvcnRyYWl0IG9mIGp1bGlhbmEKZHJlc3NlZCBpbiBibHVlCmludWsKZ2xvd2luZyBsaWdodHMhISBzY2kgLSBmaQpkcmFtYXRpYyBibHVlIGxpZ2h0CnBpbmsgZmx1ZmZ5IGZ1cgpheWt1dCBheWRvZ2R1IGVyaWMgemVuZXIKZm9sbG93IHNob3QKcHJvbm91bmNlZCBmYWNpYWwgY29udG91cmluZwpoaWppa2F0YSB0b3VzaGlyb3UKZmFpcnkgY2dzb2NpZXR5CmZpbmUgc3RpcHBsZWQgbGlnaHRpbmcKd2FsbCB3aXRoIGdyYWZmaXRpCmludGVncmF0ZWQgY2lyY3VpdApyZWQgb3JhbmdlIGxpZ2h0aW5nCmJyb3duIGZyaW5nZQpibHVlIGRpYW1vbmQKd2VhcmluZyBibGFjayBzaWxrIHJvYmUKcGF0cmljaWEgcGljY2luaW5pCmVhcnRocXVha2UgZGVzdHJ1Y3Rpb24KcGVuY2lsIG1hcmtzIGhkCm1hdHRlIGRldGFpbGVkIHBob3RvCmppc29vIG9mIGJsYWNrcGluawpyb3VnaCBjb25jcmV0ZSB3YWxscwptZXRhbCBoYW5kbGVzCmxlZ2VuZGFyeSBkcmFnb24Kb2N0YW5lIHJlbmRlciA6IDoKZ29sZCBnaWxkZWQgY2lyY2xlIGhhbG8KaGFzc2VsYmxhZCBmaWxtIGJva2VoCmN1c3RvbQp3aW5keSB3ZWF0aGVyCmZpZXJ5IHNjb3JjaGluZyByZWQgZXllcwpvbGQgamVkZGFoIGNpdHkgYWxsZXkKZ2xvb215IG1pc3R5IGF0bW9zcGhlcmUKcmlwcGxpbmcgbGlxdWlkCnVucmVhbCBlbmdpbmUuIHJldHJvIGZpbG0gc3RpbGwKd2Vhc2VsIC0gZmVycmV0IC0gc3RvYXQgKSBdCnBvcnRhbCBnYW1lIHZhbHZlCmZyb250IHZpZXcgZHJhbWF0aWMKZ3JhY2VmdWwgYmVhdXR5CnRob3JucyBldmVyeXdoZXJlCmN1cmx5IHBpeGllIGN1dCBoYWlyCm5hdHVyYWwgY29sb3Igc2tpbgpwcm9maWxlIHNob3Qgb2YgcmltdXJ1IHRlbXBlc3QKYXJ0Z2VybSBvbiBhcnRzdGF0aW9uIHBpeGl2CmVrdG9jaHJvbWUKNDM0NTZrIGZpbG0KOTIxNmsgZmlsbQpzbW9vdGggc2hhbmsKc3BlcmljYWwgaGRyaSBtYXAKc3RpbGwgZnJvbSB0aGUgbW92aWUgc2F3CmNvc21pYyB2b2lkIGJhY2tncm91bmQKdGFubmVkIGFtZWVyYSBhbCB0YXdlZWwKc29mdCBibHVlcyBhbmQgZ3JlZW5zCmFraXJhIHZpYmVzCmNpbmVtYXRpYyA4IGsgaGQgbW92aWUgc2hvdAp2aWN0b3JpYW4gbGFkeQp3b3JtJ3MgZXllIHZpZXcgZnJvbSB0aGUgZmxvb3IKb2N0YW5lIHJlbmRlcuKAnQpoZOKAnQpmcm9zdGJpdGUgMyBlbmdpbmUgcmVuZGVyZWQKMiAwIDAgbW0gbGVucwpoeXBlcnJlYWxpc3RpYyBwaG90b2dyYXBoeQphbmltZSBrZXkgYXJ0CnZlcnkgYWVzdGhldGljYWxseSBwbGVhc2luZwpza2V0Y2ggaWxsdXN0cmF0aW9uCmthcm1hIHN1dHJhCndoaXRlIG91dGxpbmUKcG9rw6ltb24KMTJrIHVyc2EKeW9zaGl0b21vIG5hcmEKYWxleGFuZGVyIGphbnNzb24gc3R5bGUKZGV2YXN0YXRpb24KYm9va3MgY292ZXJlZCBpbiBqZXdlbHMKbWFueSBza3lzY3JhcGVycwpwbGFuZXRzIGluIHRoZSBiYWNrZ3JvdW5kCjgtYml0CmludHJpY2F0ZSBzcGlyYWxzCmNvaWxlZCByZWFsaXN0aWMgc2VycGVudHMKYmxhY2sgbGVhdGhlciBjaG9rZXIKZXBpYyBjaGFyYWN0ZXIgY29tcG9zaXRpb24KZGlnaXRhbCBwYWludHRpbmcKcmVuYWlzc2FuY2Ugc3R5bGUgcGFpbnRpbmcKc3RpbGwgZmlsbQo0aycKZGllc2VscHVuayBzdHlsZQp3b29kIGJsb2NrIHByaW50Cndhcm0gaHVlJ3MKZGVlcCBnYXplCmhlcm9pYyBzaG90CmRpY2UKKiAqICoKcG9rZWRzdHVkaW9zCnN5bW1ldHJpY2FsIGxvZ28KZmFudGFzeSAzIGQgcmVuZGVyCjE5NzIKZmxhc2ggb24KMSA2IGJpdApmb29kIHN0YWxscwpoaWdod2F5cwphdXRvbW90aXZlCmFsaWVuIGludmFzaW9uCm1hZ2F6aW5lIHNjYW4KMSA5IDggMCBzIHdvbWFuCmJhY2sgb2YgaGVhZApkYXJrIHRvbmUKdmVyeSBmaW5lIGlua2luZyBsaW5lcwpjaWdhcmV0dGUKbW91dGggd2lkZSBvcGVuCjE5ODMKY3V0IG91dAojbWljcm8KZGFwcGxlZCBzdW5saWdodApwYXlkYXkgMgptcDVzCmdyYXZpdHkKMiAwIDEgMgpkYW4gbXVtZm9yZCBhbmQgYWxleCBncmV5IHN0eWxlCnplYnJhCmdlbQpzenVrYWxza2kKaHlwZXIgcmVhbGlzdGljIHBob3RvZ3JhcGgKYXJ0aWZpY2lhbApnb29kIGRlZmluaXRpb24gb2YgY2hlZWtib25lcwpvcmkgYW5kIHRoZSBibGluZCBmb3Jlc3QKYm9zcyBmaWdodAozIGQgY3liZXJwdW5rIGFwb2NhbHlwdGljIGNpdHkKaW50cmljYXRlIGhpZ2ggZGV0YWlsCmNlbnRyYWwgcGFyawp2ZXJ5IHNtb290aAplZGd5CmdhbWUgb2YgdGhlIHllYXIKcGFydGlhbCBhbmF0b215CmJsYWNrIGNvbG9ycwpmZW1hbGUgYm9kaWVzCmJsYWNrIG9wYWwKbGlmZSBsaWtlCmdyZWVucwp3aW5kb3cgcmVmbGVjdGlvbnMKc2hpYmEgaW51CmZvdXIKY3JhbmVzCmJ1c2luZXNzCm5pbnRlbmRvIGdhbWUKd2FsbCAtIGUKd2VhcmluZyBvdmVyYWxscwppcm9ib3QKZGFyayBtdXRlZCBjb2xvcnMKYW50cm9wb21vcnBoaWMKYmxhY2sgY29hdApyYXQKcm91Z2ggc2VhcwpzdGlsbCBmcm9tIHN0YXIgd2FycwppbiBibGFjayBtaWxpdGFyeSB1bmlmb3JtCnN0ZXZlbiBhcnRnZXJtIGxhdQp3aGl0ZSBoaWdobGlnaHRzIGluIGhhaXIKbm8gZmFjaWFsIGhhaXIKdHVydGxlCmJlbHQKc3VyZmFjZSBwYWludGVyCmJsb25kZSBsb25nIGhhaXIKc2lsdmVyIG1ldGFsIGFybW9yCnplbml0aCBhbmdsZQpwaG90byA0awpyZWFsaXN0aWMgZGlnaXRhbCBhcnQgNCBrCmFjY3VyYXRlIGJvZHkgZmVhdHVyZXMKbW9yZ2FuIHdlaXN0bGluZwp1bm5hdHVyYWwgc2hhcGVzCnN1cmdlcnkKOCAtIGJpdApuaWtvbiBkIDggNSAwCmRlcmVsaWN0Cm1lZGlldmFsIGtuaWdodAppbHlhIGt1c2hpbm92CnRhY3RpY2FsCmhhbmRjdWZmcwpzZW1pLXJlYWxpc3RpYwpoYW5naW5nIHZpbmVzCm5hcnJvdwpuaWdodCB0aW1lIGRhcmsgd2l0aCBuZW9uIGNvbG9ycwppcyAoKGRyaW5raW5nIGEgY3VwIG9mIHRlYSkpCnBhdHJlb24gY29udGVudApyb2xsMjAKZGVuaW0gamVhbnMKYSBsb25nLXNob3QgZnJvbSBmcm9udApyaWNrIGZyb20gcmljayBhbmQgbW9ydHkKcmV0cm8gZnV0dXJpc20gYXJ0CmluZmFyZWQgcGhvdG9ncmFwaHkKb25seSBhIG1vdXRoIHdpdGggbG9uZwpzdWJ0bGUgYW5kIGRldGFpbGVkCmNlbnRlciBmcmFtaW5nCnNhbG1vbgp5ZWxsb3cgbGlnaHRpbmcKb24gcGFyY2htZW50CnNhbHZhZG9yIGRhbGkgc3R5bGUKb3JnYW5pYyBwb2x5Y2FyYm9uCnRyYWZmaWMKZm9yd2FyZHMgZmFjaW5nCnByb21vdGlvbmFsIHBob3RvZ3JhcGh5Cm5vIGJvcmRlcnMKbGF0ZSBtb3JuaW5nCm91dGVyIHdpbGRzIHNjcmVlbnNob3QKbWFkb25uYQpjb2xvcml6ZWQgcGhvdG9ncmFwaApsb25nIGZpbmdlcm5haWxzCnJvb2ZzCmNyb3dkZWQgcGVvcGxlCnNoZSBoYXMgYSBjdXRlIGV4cHJlc3NpdmUgZmFjZQpmb2dneSBuaWdodAp6IGJydXNoCnBhcnRlZCBoYWlyCmFubm90YXRpb25zCjE5ODgKY2xvc2UgYW5nbGUKY2F0d2FsawpiZWF1dGlmdWwgY2l0eXNjYXBlIGJhY2tncm91bmQKYnJpZ2h0IG9uIGJsYWNrCmJpZyBnbGFzc2VzCueOi+eQmwpob2JiaXQKb3Zlcmxvb2tpbmcgYSB2YWxsZXkKaW50cmljYXRlIGZhY2lhbCBkZXRhaWxzCm1hZGUgb2YgZmxvd2VycyBhbmQgZnJ1aXQKZnJlZCB0b21hc2VsbGkKdHJhZmZpYyBsaWdodHMKbGFyZ2UgZXllYnJvd3MKcGFydGVkIGxpZ2h0IGJyb3duIGhhaXIKeW91bmcgY2hpbGQKY3J5c2lzCmJvbWJzaGVsbApyZWxheGVkIHN0eWxlCndlYXJpbmcgYSB0dXhlZG8KamVzc2UgcGlua21hbgpnYXVkeQoyZCBhbmltYXRpb24KZHJlYW15IGxpZ2h0aW5nCmJydXNoZXMKcG90dGVyeQpvY2N1bHQgc3ltYm9scwpuZW9uIGdsb3dpbmcgc3BlbGxzCndhaWZ1CmxpcHN0aWNrCmhpZ2hseSBkZXRhaWxlZCB0YXR0b28Kc3BhY2UgZGVicmlzCm1pc3RlcmlvdXMKa2V5c2hvdCBwcm9kdWN0IHJlbmRlcgptYXNzaXZlIGFuZ2VsIHdpbmdzCnNldHRpbmcgc3VuCndoaXRlIGJ1aWxkaW5ncwpsb3ctcG9seQphbGllbiBhcnQKc2NhbHkKb2N0YW5lIHJlbmRlciBoIDEwMjQKYmV2ZWxlZCBlZGdlcwpsb29raW5nIG91dCB0aGUgd2luZG93CmhhY2tlcgpzaGF2ZW4gZmFjZQpuZW8tYW5kZWFuIGFyY2hpdGVjdHVyZQpuZW9jbGFzc2ljYWwgcGFpbnRpbmdzCmZhY2Ugc2hvdApndWlkbyByZW5pIHN0eWxlCmRhcmsgd2l0Y2gKZjEuMgoxOTY4CnNwYWNlIGNpdmxpemF0aW9uCnVwcGVyIGJvZHkgcG9ydHJhaXQKZG5hCmFsYmVydG8gbWllbGdvCmhvbGRpbmcgYW4gYXhlCm91dCBvZiB0aW1lIGFuZCBzcGFjZQpzdGFycmluZyBnZWVuYSBkYXZpcwpjcnlzdGFsIGJsdWUgZXllcwpzaGFycCBwaG90bwpncmVnIHJ1dGtvd3NraSBhbmQgY3JhaWcgbXVsbGlucwpjYWxtIGF0bW9zcGhlcmUKdGVhbCBlbmVyZ3kKc3RhcmluZyBhdCB0aGUgdmlld2VyCnN0eWxlIG9mIHJhcGhhZWwgbGFjb3N0ZQpldGhlcmVhbCBidWJibGVzCmJsYWNrIGJyYQpwdXJwbGUgbGlwc3RpY2sKMTM1bW0KaW5jcmVkaWJseSBkZXRhaWxlZCBhcnQKc2NpLWZpIGZhY2UKYXBocm9kaXRlIGdvZGRlc3Mgb2YgbG92ZQpzd29yZHNtYW4KY2luZW1hdGljIGFuZCBhdG1vc3BoZXJpYwpncmFpbiBlZmZlY3QKdG9kZCBzY2hvcnIKd2l0aCBob3Jucwpob2xkaW5nIGZsb3dlcnMKYXVzdHJhbGlhbgpkcmVzc2VkIGluIHJvbWFuIGNsb3RoZXMKZnVsbCBpbWFnZQp1bnJlYWwgZW5naW5lIGZhbnRhc3kgYXJ0Cm1hZ2ljYWwgc3VtbWVyCmRldGFpbGVkIGZhY2UhCmdmeCBhc3NvY2lhdGlvbgpkZWNvcmF0aW9ucwptYWdpY2FsIGxpZ2h0cwptaWRkbGUgY2xvc2UgdXAgY29tcG9zaXRpb24KaW4gc3R5bGUgb2YgYXJ0Z2VybQpsb25nIGFmcm8gaGFpcgpkZXRhaWxlZCBsYW5kc2NhcGUKd2hpdGUgZnVybml0dXJlCnByZXNpZGVudGlhbCBwb3J0cmFpdAp0cmFpbGNhbSBmb290YWdlCm1hZ2ljIGhvdXIgcGhvdG9ncmFwaHkKbWlkam91cm5leSBzdHlsZQpzdHVmZmVkIHRveQpsZXR0dWNlCmFlcmlhbCBwaG90b2dyYXBoCm5ldwplcGljIHNjb3BlCmF1dG9kZXNrCm1hbGVzIGFuZCBmZW1hbGVzIGJyZWFrZGFuY2luZwphcmNoaXZlIHBob3RvCmRyb25lIHBvaW50IG9mIHZpZXcKaW50cmljYXRlIGVsZW1lbnRzCm11bHRpcGxlIHBvc2VzCnJlZCBpbnRlcmlvcgp6ZXJnCnNjYW5saW5lcwpjaGVzcwptb3VudGFpbnMgYmFja2dyb3VuZApyZWFsaXN0aWMgZGV0YWlsZWQKNzBtbSBmaWxtCndoaXRlIGJsb3Nzb21zCmludHJpY2F0ZSBhbmQgb3JuYXRlCndpdGggYSBiYWNrcGFjawpzbGlnaHRseSBkaXJ0eSBmYWNlCnNpbmdsZSBsaWdodCBzb3VyY2UKY29uYW4gbydicmllbgpkd2FyZgpkYXJrIGNpdHkKc2hhcGVseSB0b25lZCBkZXJyaWVyZQplbGVjdHJpYyBndWl0YXIKaW4gdGhlIGRhcmsKbWFnaWMgYXRtb3NwaGVyZQphcm1jaGFpcgptb2ViaXVzIHN0eWxlCnZpb2xldCBleWVzCnRoZSBnb2RmYXRoZXIKMTkxMHMKaW5rIHNrZXRjaAphY3RpbmcKaGFpciBpbiB0aGUgd2luZApnb3RoIGFlc3RoZXRpYwp3YXJjcmFmdCBzdHlsZQphcGFydG1lbnRzCmNhbGwgb2YgY3RodWxodQpuZWVkbGVzCmJsdWUgc3VpdApzY2ktZmkgaWxsdXN0cmF0aW9uCmluc3RhZ3JhbSBmaWx0ZXIKbGlnaHQgcmVkIGhhaXIKYWNjZW50dWF0ZWQgZmVtaW5pbmUgZmVhdHVyZXMKdW5lYXN5CmhpZ2ggcXVhbGl0eSB3YWxscGFwZXIKaW50cmljYXRlZAphbmltZSBhcnR3b3JrCmdyYXkgc2NhbGUKcnVkb2xmIGLDqXJlcwpmYWxsaW5nIGxlYXZlcwpnb2xkZW4gcmV0cmlldmVyCnNlaW5lbgptb3VudCBmdWppCmdyZXkgYWxpZW4KdGhlIG1hbmRhbG9yaWFuCmVhcmx5IGV2ZW5pbmcKbWFueSBzbWFsbCBkZXRhaWxzCmN5cGVycHVuawpkaWZmdXNlZCBsaWdodApoaWdoIGZvY3VzCmhpc3RvcmljYWwgZXZlbnQKY3J5c3RhbCBjbGVhcgpwb2x5Y2hyb21hdGljCnRoZSBlbmQKaGlzdG9yaWMKbWFydmVsb3VzCmtlbm5lIGdyZWdvaXJlCnBvaW50aWxpc20KbWluZCBmbGF5ZXIKd2VhcmluZyBhIGNyb3duIGFuZCBjYXBlCmdvdGhpYyBpbnRlcmlvcgpzbm93eSBsYW5kc2NhcGUKaXJvbiBnaWFudApib2toCmNnIGFydApqaW1pbgpmcm9tIG5ldGZsaXgncyBhcmNhbmUKZW1wZXJvcgpib3hpbmcgZ2xvdmVzCmp1cmFzc2ljIHBhcmsKY3JpbWUKd2l0IHN0dWRpbyBhbmltZQpsYWR5IGdhZ2EgYXMgaGFybGV5IHF1aW5uCmhhbmRjcmFmdGVkCndlYnRvb24KdW5rbm93biBsb2NhdGlvbgp0aGUgZGl2aW5lIGZlbWluaW5lCm1hZG9rYSBtYWdpY2EKaXNsYW5kcwptYWxlIHdpemFyZApzdWdhciBza3VsbApjb250cmFzdCBsaWdodGluZwptZXNzaQptZXRhbCBnZWFyIHJpc2luZwp2ZXJ5IHBhbGUKZm9yZXN0IGxhbmRzY2FwZQptb2Rlc3RseSBkcmVzc2VkCmVsZWN0cm9uaWMgY2FzZSBkaXNwbGF5CnByZWhpc3RvcmljCnJhdmVyCm9uZQpzbW9vdGggYW5pbWUgY2cgYXJ0CmFuZ3VsYXIgZmVhdHVyZXMKc2l0dGluZyBvbiB0aGUgdGhyb25lCndpZGUgYXBlcnR1cmUKa2lkbmV5Cm1vbm9jbGUKbmVyZHMKZXZpbCBzbWlyawp2aWJyYW50IDNkIHRleHR1cmVzCnNob3J0IGJsdWUgaGFpcgphdGhsZXRpYyBhbmQgc3Ryb25nCnNoZSBpcyBhYm91dCAyMCB5ZWFycyBvbGQKcGVhcmxzIGFuZCBveWVzdGVycwpvcmllbnRhbGlzdApzbGlnaHQgbmVyZHkgc21pbGUKcHJheWluZyBtYW50aXMKcHJvZmlsZSBwaG90bwpzaGFycCB2YW1waXJlIHRlZXRoCnBsYXlpbmcgZ3VpdGFyCmdsb3dpbmcgZW5lcmd5Cm1pbmltYWwgc3R5bGUKcGhvdG9ncmFwaHkgYXdhcmQgd2lubmluZwptaW5pbWFsaXN0IGFydApjb29sIHRpbnQKc29mdCBwdXJwbGUgZ2xvdwphYmVycmF0aW9ucwp0b29scwpsb3cgcXVhbGl0eSBzaGFycGVuZWQgZ3JhcGhpY3MKZWxlZ2FudCB3b21hbgpzcGxhc2hpbmcgd2F0ZXIKdGhlIGZsYXNoCnJhZGlhdGluZyBhIGdsb3dpbmcgYXVyYQptaWRuaWdodCBibHVlCnBhbGUgYmx1ZSBleWVzCmZhdWx0CnBpZWNlcyBvZiBsYW5kCmdvbGQgY29pbnMKdGhlIGJsb2IKZ3JlZW4gZmllbGRzIGluIHRoZSBiYWNrZ3JvdW5kCnRoZSBtb29uCmdyb3VwIHBvcnRyYWl0CmF1dGhvcml0eQpzdHlsaXplZCBwaG90bwpvcm5hdGUgY3Jvd24KdHlyYW5ub3NhcnVzIHJleAp2ZWxvY2lyYXB0b3IKZW50CmVudmlyb21lbnQKc2V0IGluIHBvc3QgYXBvY2FseXB0aWMgdG9reW8KdGFsbCBvYnNpZGlhbiBhcmNoaXRlY3R1cmUKZmxvd2luZyBsYXZhCmRlZm9yZXN0YXRpb24Kd2lsbGVtIGRhZm9lIGFzIHRoZSBqb2tlcgpiZXN0IGNvbG9yIGdyYWRlZAp2cmF5IGJlYXV0aWZ1bAp0cm9sbApoLiByLiBnaWdlciBzdHlsZQpyaXBsZXkgc2NvdHQKc2FnYSBjb21pYwpkZW5zZSBqdW5nbGUKc3ltbWV0cmljYWxseSBjZW50ZXJlZApjaXRyaW5pdGFzCmNvbnRyYXN0IHNoYWRvd3MKYnJvbSBkaWdpdGFsIGFydApjb2xvcmZ1bCBsYW5kc2NhcGUgcGFpbnRpbmcKb2N0YW5lIHJlbmRlciBjaW5lbWF0aWMKc3VwZXIgY2xlYXIgZGV0YWlsZWQKc3VidGxlIHZpc3VhbCBub2lzZQpyIC8gYXJ0CnBvcmNlbGFpbiBzY3VscHR1cmUKbGlxdWlkIHdheApyb2JvdCBkcmFnb24gaGFuZHMgYW5kIGZlZXQKYmx1ZXByaW50IGRpYWdyYW0Kc3R5bGUgb2YgYWRyaWFuIGdoZW5pZQpkYXp6bGUgY2Ftb3VmbGFnZSEKd2VpZ2h0bGVzc25lc3MKYmVhdXRpZnVsIHNvZnQgbGlnaHQKZGVwdGggb2YgdmlldwpuZW9uIGNvbG9yIHNjaGVtZQpzdW5saWdodCByZWZsZWN0ZWQgb24gdGhlIHJpdmVyCmJ1YmJsZXMgcmlzaW5nCm1hc3RlcnBpZWNlIGFsYnVtIGNvdmVyCmNyeWluZyB0ZWFycwpkcmVzc2VkIHdpdGggZmx1ZW50IGNsb3RoZXMKd2hpbXNpY2FsISEgaW50cmljYXRlIGRldGFpbHMKdG9tIGJhZ3NoYXcgYW5kIHNhYmJhcyBhcHRlcnVzCmluIGdlbnRsZSBncmVlbiBkYXduIGxpZ2h0CmRlbW9uaWMgcGhvdG9ncmFwaAphcHAKZ2lhbnQgdGhyZWVzCmJhY2sgLSBzaG90CnBvcCBzdXJyZWFsaXNtIGxvd2Jyb3cgYXJ0IHN0eWxlCmdhc3RvbiBidXNzaWVyZSBhbmQgYXJ0Z2VybQpidXNoeSBleWVicm93cwpmdXR1cmlzdGljIGJ1dCBjb2xvcmZ1bCBzaGFkaW5nCjQgayB1bnJlYWwgZW5naW5lCm9yYW5nZSBjYXQKZXZpbCBtb29kCnBob3RvcmVhbGlzdGljIG9jdGFuZSByZW5kZXIKaHlwZXIgbGlnaHQgZHJpZnRlcgpqYXJzCnBlcmZlY3RseSBsaXQgZmFjZQpjaGFsa2VkCndpZGUgc2NyZWVuCjUgMCAwIHB4CmRlc29sYXRlLiBkaWdpdGFsIGlsbHVzdHJhdGlvbgpncmVlYmxlIGRldGFpbAppbiB0aGUgYW5pbWUgc2VyaWVzIGVyZ28gcHJveHkKcGxhdGludW0gYmxvbmQKYWJvcmlnaW5hbCBjYXBpcm90ZQpjb2xvciBwZW5jaWwKbWNmYXJsYW5lCm9jIGNvbW1pc3Npb24Kd29uZGVyZnVsIG1hc3RlcnBpZWNlCmNoZWVyZnVsIGNvbG91cnMKbG92ZSBzdG9yeQpmYWRlZXYKdHJlbmNoIGNvYXQKc2F0ZWxpdGUgaW1hZ2VyeQpiZWF1dGlmdWwgZHJlYW15IGxpZ2h0aW5nCnJlZCBuZW9uIGxpZ2h0CmdvdGhpYyBmYW50YXN5CmNyZWF0aXZlIHZmeApzcGFjZSBiYXR0bGUKY29tcG9zaXRpbmcKY2xlYXIgc3ViamVjdApzdG9uZSBoYW5kIHJhaXNlZCB1cAp3YXhlZCBiZWFyZAptb2lzdHVyZQpoZWFkZQpkaXNwbGFjZW1lbnQKZXh0cmVtZWx5IGxvbmcgc2hvdApoaXAKaHlwZXIgZGV0YWlsZWQgaHlwZXIgZGV0YWlsZWQKdWx0cmEgd2lkZSAzNW1tIGxlbnMKc3BlZWRwYWludAp0ZXRyYWNocm9tYWN5Cmxvbmcgc2h1dHRlciBzcGVlZApzdGFubGV5IGFydGdlciBtIGxhdQprcmVueiBjCnJhY2hlbCB3YWxwb2xlCmRyYW1hdGljIGNpbmVtYXRpYwpsb3cgZGVwdGggb2YgZmllbGQKZm9jdXMgb24gZmFjaWFsIGRldGFpbHMKZWRnZSBvZiB0b21vcnJvdwp2ZXJ5IHNleHkgb3V0Zml0CndpbGQgYnJ1c2ggc3Ryb2tlcwpvdmVyIHRoZSBzaG91bGRlciBwZXJzcGVjdGl2ZQpjcmlzcHkgYnVucwpzdHVubmluZyBsaWdodAp2b2x1cHR1b3VzIHNlc2FtZSBzZWVkIGJ1bgpjaW5lbWF0aWMgaG9ycm9yCndoaXRlIHRpbGUgb24gdGhlIGZsb29yCmNvaGVyZW50IHN5bW1ldHJpY2FsIGV5ZXMKdmlzaWJsZSBwYWludCBsYXllcnMKdXBsaWdodGluZwp2aXRydXZpYW4gbWFuCmJ1bXBzCmNvdXJ0IHNlc3Npb24gaW1hZ2VzCjEgOSA3IDYKZiAvIDMKY2xheSB0ZXh0dXJlCmxhc2VyIGxpZ2h0IHNob3cKaGlzYXNoaSBlZ3VjaGkKY3J1bWJsaW5nIG1hc29ucnkKc2V3YWdlIGZhbGxpbmcgZnJvbSBncmF0ZXMKY29zbWljIGhvcnJvciBlbGVtZW50cwphY3Jpb24KYWVzdGhldGljISEKZ3Jhc3N5CnRlc3QgdHViZXMKc3Bpcml0dWFsIGFic3RyYWN0IGZvcm1zCmJhdHRsZSBhbmdlbApnYWxhY3RpYyBiYWNrZ3JvdW5kCnBvcnRhbCB0byBhbm90aGVyIGRpbWVuc2lvbgpzd2lybGluZyBibGFjayBoYWlyCnNpbmdsZSBjaGFyYWN0ZXIgY29uY2VwdCBhcnQKY3JhYgpudmlkaWEgZ3JhcGhpY3MKZGF5IG9mIHRoZSB0ZW50YWNsZQpuYXRpdmUgYXJ0Cmh1bmdhcmlhbgplcGljIGFuaW1lCmZyaW5nZQpwZXlvdGUgY29sb3JzCmNhc2NhZGluZwp2aW55bApmbGF3bGVzcyBvbGl2ZSBza2luCmF0IGEgdHJvcGljYWwgYmVhY2gKc3ltbWV0cmljIGZhY2lhbCBmZWF0dXJlcwpsZW5zIGludGVyb3BlcmFiaWxpdHkKY29tcGxlbWVudGFyeSBjb2xvciBzY2hlbWUKYnVybnQKY3liZXIgbmVvbiBsaWdodGluZ3MKaHVza3kKY2xvdGhlZCBpbiBhbmNpZW50IGJhdHRsZSBhcm1vcgpjb2xvdXJmdWwgcGFzdGVsCm1pbmlhdHVyZSBwcm9kdWN0IHBob3RvCnZlcnkgbG93IHF1YWxpdHkKc3VycmVhbCBkZXNpZ24KYmFuYWwgb2JqZWN0IG9uIGEgcGVkZXN0YWwKMSA5IDggMCBzIGFlc3RoZXRpYwpncmVlbiBjbG9hawpndW0gcnViYmVyIG91dHNvbGUKYmFjayB0byBzY2hvb2wgY29tZWR5CmxvbmcgbHV4dXJpb3VzIGludHJpY2F0ZSBnb3duCm1lZGljYWwgbWFzawphZnRlcm5vb24gbGlnaHRpbmcKbW9vZHkgY2xvdWR5IHNreQp3aGl0ZSBhcmNoaXRlY3R1cmUKcmF5IG9mIGdvbGRlbiBzdW5saWdodApyb2xsaW5nIGZvZwphd2FyZCB3aW5uaW5nIGFyY2hpdGVjdHVyZQphdXR1bW5hbApqaW0gY2hldW5nCmRhdmlkIG1hcnF1ZXoKbWlrZSBkZW9kYXRvIGpyCnBoYXJhb2gKbGVlIGppIC0gZXVuCmxvbmVseSBhdG1vc3BoZXJlCmRpbWx5IGxpdCBkaXZlIGJhcgpkb24gZGF2aXMKb2RkbHkgZmFtaWxpYXIKcHVycGxlIGNvbG9yIHBhbGxldGUKaHVnZSBkaXN0YW5jZQooICggZHIgc3VlcyApICkKY29yYWwgaGVhZGRyZXNzCnRoaWVycnkgbXVnbGVyCmFmcm8gc2FtdXJhaSBtYW5nYSBzdHlsZQppbnRlbnNlIHdhdGVyY29sb3IKanVtcHN1aXQKZ2VvbWV0cmljIDMgZCBzaGFwZXMKMyBkIGFuaW1hdGVkCmRhcmsgdGludApmbG93aW5nIGdvd24KZ29sZCB0aGVtZQpqZXNzaWNhIHJvc3NpZXIgYW5kIGJyaWFuIGZyb3VkCnBjIHNjcmVlbiBpbWFnZQppbnNhbmUgaW50cmljYXRlCnNub3cgZmx1cnJ5CmxvdHMgb2Ygcm9tYW4gYXJjaGVzCmh1aGQKdHJpYmFsIGFybW9yCmFuIGVwaWMgbm9uIC0gYmluYXJ5IG1vZGVsCmFuIGV0aGVyZWFsCnNlY3JldCBob2xvZ3JhcGhpYyBjeXBoZXJzCmludHJpY2F0ZSBwYXJ0cwpibGFjayBpbmsgb3V0bGluZQpnb2xkIHNwZWNrbGVzCnJ1bmVzdG9uZXMKY3liZXIgYmFja2dyb3VuZApkcmFtYXRpYyBmdWxsIG1vb24gbGlnaHRpbmcKcm9zc2RyYXdzIHNha2ltaW1pY2hhbgpmaW5lbHkgZGV0YWlsZWQgZmFjaWFsIGZlYXR1cmVzCnNvIG1hbnkgd2lyZXMKZXZhbmdlbGlvbiBhbmltZSBwb3N0ZXIKbWFjcm8gZmFjZSBzaG90CnNleHkgYmxhY2sgc2hvcnRzCmxlYW5pbmcgYWdhaW5zdCB0aGUgd2luZG93CnRyaXAgdG8gbGVnbmljYQpnb2xmIGNvdXJzZSBpbiBiYWNrZ3JvdW5kCmFyY2hpdGVjdHVyYWwgZGlnZXN0IHBob3RvCmNyeXN0YWwgbm9kZXMKcmVkIGxlZnQgZXllIHN0cmlwZQphZHVsdCB2aWRlbyBzdG9yZQpiYXR0bGUgcmVhZHkKYXNoIGJsb25kIGdyZXlpc2ggaGFpcgpsb25nIGN1cmx5IGJyb3duIGhhaXIKY2l0YWRlbCBvZiBlcmJpbApvbGQgdG93biBtYXJkaW4KbG9uZ2NvYXQKZGlydCBhbmQgc21va2UgYmFja2dyb3VuZApmcmFjdGFsIGxlYXZlcwpwcyA0IGdhbWVwbGF5CmJhcmdlbGxvCm1pbmlhdHVyZSBjaXR5CmVsZGVyIHNjcm9sbHMgdgp2aWV3ZWQgZnJvbSB0aGUgb2NlYW4KdmV0ZW1lbnRzCmluc3BpcmUKcmV0cm8gZnV0dXJpc20gMSA5IDUgMCBzCmZhbnRhc3kgYnVpbGRpbmcKbW9vZHkgc3Vuc2V0IGFuZCBkcmFtYXRpYyBza3kKY2luZW1hc2NvcGUgcGFub3JhbWEKcmVhbGlzdGljYWxseSBwcm9wb3J0aW9uZWQgaGVhZApoaWdoIGRldGFpbGQKcG9wIHB1bmsgYXJ0IHN0eWxlCmluIHRoZSBtb3ZpZSBibGFkZSBydW5uZXIgMjA0OQpwb29sIHBhcnR5CmRldGFpbGVkIHNob3QgbGVncy11cApleHRyZW1lbHkgd2lkZSBhbmdsZQpzdHJhcGxlc3MgZHJlc3MKY2luZW1hIGMgOS4gMApibGFjayBoYWlyIGFuZCBicm93biBleWVzCndhbGxwYXBlciBhZXN0aGV0aWMKdmVyeSBzZWR1Y3RpdmUgcG9zZQpjbG9zZSAtIHVwIGZhY2UKdmlicmFudCBtb29keSBjb2xvcnMKd2F0ZXIgc3RyZWFtCm1hdGggYXJ0Cm11dGVkIHBhc3RlbHMKbWl4ZWQgc3R5bGVzCmVjY2hpIGFuaW1lIHN0eWxlCmFydCBvZiBzaWx2ZXJmb3gKc2tpbiBkZXRhaWxzCmQmZCA0awpiZWF1dGlmdWwgc29yY2VyZXNzCndvb2QgY3VwcwpiZWF1dGlmdWwgd29tYW4gYm9keQpoYWlyIHN0eWxlZCBpbiBhIGJ1bgpibGFjayBhbmQgcmVkIGNvbG9ycwptb25zdGVyIG1hbnVhbApncmFmaXQgc3R1ZGlvCmxpcXVpZCBzaGFkb3dzIGVuZ3VsZgpzaW5nbGUgY2hhaXIKaG9seSBzYWNyZWQgbGlnaHQgcmF5cwpzaW5nbGUgcG9pbnQgb2YgbGlnaHQKYWRhcHRlZCB0byBhIGRyaWVyIGNsaW1hdGUKZnJvbSBzYW0gYW5kIG1heAp6YWhhIGhhZGlkIG9jdGFuZSBoaWdobHkgcmVuZGVyCmF5YSB0YWthbm8KaW4gc3RlYW1wdW5rIGNpdHlzY2FwZQpkeW5hbWljIHBvc2UgYW5kIG1vdmVtZW50Cm5lYnVsYSByZWZsZWN0aW9ucwpkZW5vaXNlIGRlZXAgZGVwdGggb2YgZmllbGQKdGVjaHdlYXIgb2NjdWx0aXN0Cm5hb3RvIGZ1a2FzYXdhCnBzeWNoaWMgbWluZCBmbGF5ZXIKcmFkaWF0aW9uIG11dGF0ZWQKYW5jaWVudCBldmlsCnZvbHVtZSBmb2cKbm9uIGZpY3Rpb24Kd2lsbGlhbSBqb3ljZQpyb2d1ZSB0cm9vcGVyCnB1ZGljYSBnZXN0dXJlIGJvdWd1ZXJlYXUgc3R5bGUKd2xvcCBqZXJlbXkgbGlwa2luCnN0eWxpemVkIHByb3BvcnRpb25zCm9uIHNpbXBsZSBiYWNrZ3JvdW5kCnN5bW1ldHJpY2FsIGhlYWQtb24gY2VudHJhbGl6ZWQKYWR1bHQgY2hhcmFjdGVyCmxlYXRoZXIgYm9tYmVyIGphY2tldApyZWQgZmFicmljCmRyYW1hdGljIGJhY2tsaXQgd2luZG93CmJva2VoIHZvbHVtZXRyaWMgbGlnaHRpbmcKc2t5IGluIHRoZSBiYWNrZ3JvdW5kCnVuaXZlcnNhbCBob3Jyb3IgbW92aWUKdHVybmFkbwpyb2NrIHRleHR1cmUKZHlsYW4ga293YWxzawpibGFjayBwbGF0ZSBhcm1vcgp2YW5pYSB6b3VyYXZsaW92Cmhpcm95dWtpIGltYWlzaGkKaGVhdnkgZm9yZXN0CmhhbnMgemF0emthCm9uIHRoZSBvcmFuZ2Ugc3VyZmFjZSBvZiBtYXJzCnZpbmUgY292ZXJlZAphcnQgbm91dmVhdSBvY3RhbmUgcmVuZGVyCmNvY2tyb2FjaCBjaGFyYWN0ZXIKcmVzdGluZyBoZWFkIG9uIGhhbmRzCmNvbWJhdCBzY2VuZQpkeW5hbWljIGNoYXJhY3RlcgpwdXJwbGUgaGVhZAp2YXN0IHdoZWF0IGZpZWxkcwpleG9za2VsZXRvbiBhcm1vcgpjYXNjYWRpbmcgaGlnaHJpc2UKd2xvcC4gNCBrCnRoZSBvYWsgdHJlZQpiZWF1dHkgZmlsdGVyCmNoYXJhY3RlciBwb3NpbmcgZm9yIGNvbmNlcHQgYXJ0CmVuZ2xpc2ggdGV4dApwYWludGluZyBhIGNhbnZhcwp0cmFuc2x1Y2VudCBzc3MgeHJheQp2aWJyYW50IHNjYXR0ZXJlZCBsaWdodApkYXJrIGJsb25kZSBoYWlyCmN5YmVycHVuayBibGFjayBtZXRhbCBiYW5kCmJhbyBwbmFuCndhbGVzCmRlY29yYXRpdmUgYm9yZGVyCmRhcmsgb2lsIHBhaW50aW5nIGNvbG9ycwpzdG9ueQpzeW1tZXRyaWNhbCBjb21wbGV4IGZpbmUgZGV0YWlsCmV4dHJhIGtldGNodXAKYmFjb24gbGV0dHVjZSBhbmQgdG9tYXRvcwp3ZWFyaW5nIGNob2tlcgoxMjAgYmxhY2sgYW5kIHdoaXRlIGZpbG0KKCBnb2xkZW4gcmF0aW8gKQpncmF2aXR5IHJ1c2gKZG9nIHBsYXlpbmcgdGhlIHNheG9waG9uZQptb25zdGVyIGRlc2lnbgpuZXcgemVlbGFuZApmLzEuMwpzdGVlbCBibGFkZXMKbWFueSBzaGFkb3dzCmFsdG9zdHJhdHVzIGNsb3VkcwpyZWQgaG9vZGllCndlYXJpbmcgaW50cmljYXRlIGJsYWNrIGNob2tlcgpmb3YgOTAgZGVncmVlcwpkcmFtYXRpYyBzdG9ybSBzdW5zZXQKZXh0cmVtZSBoaWdodCBkZXRhaWwKY292ZXJlZCB3aXRoIGJsb29kCmV4dHJlbWVseSBoaWdoIGRldGFpbGVkIGZhY2UKbGVncyB0YWtpbmcgeW91ciBwb3YKZXh0cmVtZSBjbG9zZSBzaG90CnBhaW50ZWQgdGV4dHVyZQpmYWNlIHBvcnRyYWl0IG9mIGEgd29tYW4KWyBvdmVyaGVhZCB2aWV3IF0hCndpdGggc2tpbiBvZiBvYnNpZGlhbgphdXJvcmEgYXJ0aWZhY3RzCmxhdmEgbGFtcApsaWdodHdlaWdodCBsZWF0aGVyIGFybW91cgpmcmFjdHVyZWQgcmVhbGl0eQpjb2xvcmZ1bCBtb2xkCm5hdHN1bWkgbXVrYWkgYXJ0d3JvawpmdWxsIC0gZmFjZSBjbG9zZSAtIHVwIHBvcnRyYWl0CmFuZHJvZ3luIGJlYXV0eQptYWplc3RpYyBzeW1tZXRyaWNhbCBlYWdsZSB3aW5ncwpkaWdpdGFsIGlsbHVzdHJhdGlvbiByYWRpYXRpbmcKcnVzc2lhbiB2aWxsYWdlcyBhdCBiYWNrZ3JvdW5kCmNsZWFuIDMgZCByZW5kZXIKc21vb3RoIGJsdWUgc2tpbgpzbW9vdGggdmVjdG9yIGxpbmVzCmdpcmwgd2l0aCBhIGZsb3dlciBmYWNlCmhhcmQgYXRtb3NwaGVyZQppbnNtb3V0aApkZWF0aGtuaWdodApnaGFpbGFuIQpiZWF1dGlmdWwgcnR4IHJlZmxlY3Rpb25zCmhpbGEga2xlaW4KY3liZXJsb3gKc29mdCBkcmFjb25pYyBmZWF0dXJlcwpoYW5kc29tZSBzYWl0YW1hCnBhdWwgY2FycmljawpldGNoZWQgYnJlYXN0cGxhdGUKZ2xhbW9yb3VzIHBvc2UKc3Vuc2V0IGxpZ2h0aW5nIG9taW5vdXMgc2hhZG93cwp3aW5uaW5nIGlsbHVzdHJhdGlvbgpkYXJrIGJsdWUgbmVvbiBsaWdodApncmFkaWVudCBwdXJwbGUKaGlnaCBxdWFsaXR5IHdhcmZyYW1lIGZhbmFydApwb2ludCBvZiB2aWV3IDogdXAKcGFyYW5vcm1hbCBmbGFzaGxpZ2h0Cmh1bWFuIHNpbGhvdWV0dGUKcmluZ2ZsYXNoIGxpZ2h0aW5nCmhvdHRveXMKbGF0ZSBtZWlqaSBwZXJpb2QKd2V0IGRhcmsgcm9hZAp0aXRhbmljIHRhbmsgd2l0aCBsZWdzCmhlYWQgbmVjayBzaG91bGRlcnMKbW90dGxpbmcgY29sb3JpbmcKZ2FyZGVuIGVudmlyb25tZW50CnZlcnkgYmVhdXRpZnVsIGFtYmllbnQgbGlnaHRpbmcKbW9oYW1lZCBjaGFoaW4gc3R5bGUKZXhwZXJ0IGZpZ3VyZSBwaG90b2dyYXBoeQpleHBvc2VkIGIgJiB3IHBob3RvZ3JhcGh5CnZvbGNhbm8gZXJ1cHRpb24KY29sb3JlZCBnZW1zCm1ha2VzaGlmdCBob3VzZQptb25zb29uIG9uIHRyb3BpY2FsIGlzbGFuZApjaXR5IHN0cmVldCBvbiB0aGUgbW9vbgp5bW1tIGFuZCB0aGF0IHNtZWxsCnBva8OpbW9uIGxvZ28KYmxhY2sgbGlnaHQgcmF2ZQppbnRlbnNlIHN1YnN1cmZhY2Ugc2NhdHRlcmluZwpzdXBwbGUgbG9vawphbWVyaWNhbiByZWFsaXN0CmphcGFuaWMgc3R5bGUKbXVzY3VsYXIhIGN5YmVycHVuawpwaGlsIHNwZW5jZXIKcmlwcGxpbmcgd2F0ZXIKYmx1ZSBhbmQgeWVsbG93IGdsb3dpbmcgbGlnaHRzCm1hbGlidSBjYW55b24KbGF1cmEgemFsZW5nYQp1bnJlYWwgZW5naW5lIDogOiByYXZlIG1ha2V1cApjaW5lbWF0aWMgZHVsbCBjb2xvdXJzCnNoZSBpcyBhYm91dCAzIDAgeWVhcnMgb2xkCnBvcnRyYWl0IG9mIGEgbXVzY3VsYXIKc3Rvcm15IHNub3d5IGZpamkgbW91bnRhaW4KaW50cmlnYW50ZQphdCBhIHJhdmUKeW91bmcgc2tpbm55IGdyYXZ1cmUgaWRvbAp1aGQgaHlwZXJkZXRhaWxlZCBwaG90b2dyYXBoeQpzbWlsaW5nIGFuZCBsb29raW5nIGRpcmVjdGx5Cm5hcnZhbAptYWdpY2FsIGFuZCBhbGNoZW1pY2FsIHdlYXBvbnMKc25hcmxpbmcgZG9nIHRlZXRoCnNsaW1lIGFuZCB0ZW50YWNsZXMKdGVjaG5vbG9naWNhbCBzY3JlZW5zCmRyZXNzZWQgaW4gcm9tYW4gYXJtb3VyCnNtb290aCB0cmFuc3BhcmVudCB2aXNvcgpyaWNoYXJkIGl2IHRoZSByb21hbiBraW5nCnNjZW5lIGZyb20gcHJvbWV0aGV1cyBtb3ZpZQpzaG91bGRlciBwYXRjaCBkZXNpZ24Kc2VjcmV0IDwKbGVnbyBtaXhlbHMKc29sYXIgZWNsaXBzZSBpbiBpY2VsYW5kCnNvcGhpZSB0dXJuZXIgZ2lybAptYXJibGUgd2hpdGUgY29tcGxleGlvbgpzcmkgbGFua2FuIG1hZCBtYXggc3R5bGUKZGFyayBhbmQgZm9nZ3kKZ2xvd2luZyBmb2cgaW50cmljYXRlCmJsaXp6YXJkIHN0b3JtCmRyYWdvbiBwYXdzCnRydW5jYXRlZCBzbm91dCB1bmRlciB2aXNvcgptYWtpbmcgb2YKYW5pbWF0aW9uIGZpbG0gc3RpbGwKZ2xvd2luZyBkZXRhaWxzIQrkuK0g5Zu9IOmsvCDoioIKY29sb3JmdWwgZHJhd2luZwpjcmlzcCBjbGVhbiBzaGFwZXMKbG9uZyBjb2F0Cm9uZSB3b21hbgpwcm9wb3J0aW9uCjEgOCA4IDMKZW9zIDVkCmF0aGxldGljIGJvZHkKZmllcmNlIGV4cHJlc3Npb24KZGlnaXRhbCBhcnQgOGsKbW9ydCBrdW5zdGxlcgpubyBzaGFkZQprb2RhayBla3RhY2hyb21lIGUxMDAKZi8yLjggYXBlcnR1cmUKbWFzdGVycGllY2UgaW1hZ2UKY3VyYXRlZCBjb2xsZWN0aW9ucwpzb255IHdvcmxkIHBob3RvZ3JhcGh5IGF3YXJkcwotdyAxMDI0CmJyaWdodCByZWQgbGlwc3RpY2sKODBzIHN0eWxlCmNyeW9nZW5pYyBwb2RzCmJsYWNrIGhhaXIgYmxhY2sgY2F0IGVhcnMKIXBlbmNpbApleHRyZW1lbHkgaW50cmljYXRlIGFuZCBkZXRhaWxlZApncm9ndQp0ZXh0Ym9vawp3b3JkcwpkZXNlcnQgc2NlbmUKYW5uZSBoYXRoYXdheQpyZWQgYmFja2dyb3VuZCBwaG90b3JlYWxpc3RpYwpmdWxsCmJsdWUgaHVlCnN0cm9uZyBjaW5lbWF0aWMgbGlnaHQKc2hhcnBmb2N1cwpkeW5hc3R5IHdhcnJpb3JzCmFydCBub3V2ZWF1IGlsbHVzdHJhdGlvbgpoaWdoIGFsdGl0dWRlCmphbnVhcnkKc2hvd2luZyBoZXIgc2hvdWxkZXIgZnJvbSBiYWNrCmdyYW5kIG1hc3RlcgpiZWF1dGlmdWwgaGFpcnkgaHVtYW5vaWRzCnN0aWNrZXIgZGVzaWduCnNpbmdsZSByYXkgb2YgZ29sZGVuIHN1bmxpZ2h0CmZ1bGwgYm9keSB3aXRoaW4gZnJhbWUKaG9ycmlmeWluZyBjcmVhdHVyZQpzdXBlciBzYWl5YW4KZWxtbwpzaWFtZXNlIHR3aW5zIG1hZGUgb2Ygc3BhZ2hldHRpCmxvd2VyIHNheG9ueQpwZXJtZWQgaGFpcgoxIDkgMCAwIHMgcGhvdG9ncmFwaApjaHJvbWUgcmVkCnYgLSByYXkgcmVuZGVyCnZpbnRhZ2Ugbm9pcgpwZXBwYSBwaWcKcmF5IC0gdHJhY2VkCm1hbm5lcXVpbgoxIDogMSBhbGJ1bSBhcnR3b3JrCmhhaXJkcnllcgp3aWxkIGJsYWNrIGhhaXIKcHVuayBpbnNwaXJlZApicmVhayBvZiBkYXduIG9uIGp1cGl0ZXIKc3RlYW0gcHVuayBncmFmaXR0aQphbiBhcnQgZGVjbwpvcnlhbnRhbGlzdAoxODAwcwpvbGl2ZSB0cmVlcwpuYWdlbApkaXNjbyBsaWdodHMKb21pbm91cyBhdG1vc3BoZXJlCmNvbG9yZWQgc21va2UKa2luZyBhcnRodXIKd2hpdGUgYW5kIGdyZXkKcGVuY2lsIG9uIHBhcGVyCmNyYWlnIG11bGxpbgoyNTBtcApzbmVzIGdhbWUKYmVhdXRpZnVsIHBob3RvZ3JhcGgKc2VhdGVkIG9uIHdvb2RlbiBjaGFpcgpzaG9ydCBzdHViYmxlCmludHJpY2F0ZSBzbW9rZSBtYWdpYwpjaHJpcyBiYW5nbGUKcHVsc2UgcHJvamVjdGlvbnMKMyBkIGNvbmNlcHQKbm8gYmFja2dyb3VuZCBhbmQgc2hhZG93cwozIGQgZGlnaXRhbCBhcnQKZmFsbG91dCBzdHlsZQpnaWZ0cwpibHVlcwpzaGFycCBmdWNvcwptb29uIGluIGJhY2tncm91bmQKcmVmbGVjdHMKaGlnaGx5IGRldGFpbGVkIGhkcgpzaHJpbXAKb2ZmLXdoaXRlCmd1aQpsb25nIHNub3V0Cmdvb2QgcXVhbGl0eSBsaWdodGluZwpzY2hvb2wKZmlndXJlIHBvcnRyYWl0Cmdpcmx5CmxvZ28gZ3JhcGhpYyBkZXNpZ24Kd2lubmVyCmNoaXBzCm1pbmltYWxpc3RpYyBjb21wb3NpdGlvbgp0b3JjaAp2ciBnb2dnbGVzCmFuaW1lIHdhaWZ1CmJyb3duIGhhaXIhCmRhcmsgYXRtb3NwaGVyZSBwaW50ZXJlc3QKZWFybHkgYmxhY2sgYW5kIHdoaXRlIDhtbQpyaWZsZQppbnRlcmVzdGluZyBkZXRhaWxzCmhpZ2hseSBkZXRhaWxzIGNvbnRlbnQKdmVyeSBkZXRhaWxlZCEKYSBsaXN0IGNhc3QKdml2aWQgZGV0YWlscwpibGFjayB0aWUKZmxvYXRpbmcgc3RvbmVzCnNjYXJ5IHNtaWxlCm1lZGl0ZXJyYW5lYW4gYXJjaGl0ZWN0dXJlCmlsbHVzdHJhdGlvbiBhbmQgc2tldGNoCndlaXJkIHNjcmliYmxlcwpoeWJyaWQgc3R5bGVzCmh5YnJpZCBhcnQgc3R5bGVzCm1pc21hdGNoZWQKc2Vjb25kIHdvcmxkIHdhcgpiYXR0bGVmaWVsZCAxCmZsYXNoIGxpZ2h0CmZlcm5hbmRhIHN1YXJlegppbmZlcm5hbAp5b3V0aAotbiA0CmZpcmUgZXZlcnl3aGVyZQpzaGFnZ3kgc2lsdmVyIGhhaXIKcGFzdGVsIGFydApuaWNrIHNpbHZhCnBhcmFkZQpyZW5kZXJlZCBpbiBlbnNjYXBlCnVuaXF1ZSBkZXNpZ24Kd2l0aCBhIGxvbmcgYmxhY2sgY2FwZQpwZWFjZWZ1bCBsb29raW5nIGFuaW1hbHMKcmVkIGFkb3JubWVudHMKYSBiZWF1dGlmdWwgZmFudGFzeSBlbXByZXNzCmJlYXV0aWZ1bCBmaWd1cmUKaHlwZXIgZGV0YWlsZWQgZmFjZQphbGVuYQpiYW5hbmFzCjRrIGFydAp3YXRlciB3b3JsZApuZW9uIGxpdApqdWxpYSBoZXR0YQpoeXBlcmRldGFpbGVkIHBob3RvcmVhbGlzbQpzaGljaGlybyBrb2JheWFzaGkKc2hpbW1lcnMKY29tcHV0ZXIgcGFydHMKZmlzaCBmbHlpbmcgb3ZlciBoZWFkCmFtYW5kYSBjbGFya2UKdmlzdGEgdmlldwp0aGUgc3VuIHNoaW5lcyBpbgpsb2xpdGEgZmFzaGlvbgpubyB3aW5kb3dzCndlYXJpbmcgYSBwdXJwbGUgZGV0YWlsZWQgY29hdAp2ZXJ5IHByb2Zlc3Npb25hbApoaWd1cmFzaGkKYWxpdGEKaW4gYSBoYWxsb3dlZW4gc3R5bGUKZnJvbSBhdHRhY2sgb24gdGl0YW4KY29hcnNlIGNhbnZhcwpnYW1lIHBhY2sKc29waGlzdGljYXRlZCB3ZWxsIHJvdW5kZWQgZmFjZQo4ayBoZHIgdWx0cmEgaGlnaCBxdWFsaXR5CnNlbGVuYSBnb21legpmdWxsIGNhcgp2ZWN0b3JpemVkCm9jdGFuZSByZW5kZXIgNGsKY29saXNldW0KOGsgaCA3NjgKM2QgYW5pbWF0aW9uCnJlYWxpc3RpYyBiZWF1dGlmdWwKd29ybGQgb2Ygd2FyY3JhZnQgY29uY2VwdCBhcnQKc2hlIHdlYXJzIGhhcnJ5IHBvdHRlciBnbGFzc2VzCmNpbmVtYXRpYyByZW5kZXJpbmcKbmlnaHQgZHJhbWF0aWMgbGlnaHRpbmcKc2l0dGluZyBvbiBhIGNvdWNoCm1hZ2ljIGxpZ2h0cwpuYXR1cmUgcGhvdG9ncmFwaAphIGhpZ2hseSBkZXRhaWxlZApmdWxsIHJlc29sdXRpb24KMzVtbSBtYWNybyBzaG90CnllcwpkZXNwZXJhdGUKaW4gYSBqdW5nbGUKdmVyeSBvbGQKbWFnaWNhbCBnbG93Cmh1Z2dpbmcKc2hvdCBvbiBrb2RhayBla3RhcgphZXN0aGV0aWMgY2Fub24gb2YgcHJvcG9ydGlvbnMKcGluayBhbmQgYmx1ZSBuZW9uCm1pY2hhZWwgYmF5CnBzMSBncmFwaGljcwp0aGljayBqYXdsaW5lCnN0cmFwcwpjb2xpc2V1bSBiYWNrZHJvcAplaWdodGllcy1waW51cCBzdHlsZQpoaWdoIGRvZgp5YW1hdG8Kc3R5bGUgc2ltcHNvbnMKcmVsaWdpb3VzIHBhaW50aW5nCmRuZCBwb3J0cmFpdAp1bmRlcnNlYSB0ZW1wbGUgd2l0aCBmaXNoCmFydGlzYW4KYnJlYXRoIHRha2luZwp0ZW50cwpmb29kIHBob3RvCm9ybmF0ZSBhcm1vcgpuZW9uIGxpZ2h0cyBpbiB0aGUgYmFja2dyb3VuZApuYXJyb3cgc3RyZWV0Cmd1bmRhbSBzdHlsZQp0ZWFyCmRyZXNzZWQgaW4gYSByYWdnZWQKc2FuZHkgYmVhY2gKc3RhciB3YXJzIGNvbmNlcHQgYXJ0CnRha2VuIHdpdGggc29ueSBhbHBoYSA5Cm5iYSBsb2dvCmNyeXB0bwpjcmFpZyBtdWxsaW5zIHN0eWxlCmNvbWljIGNvdmVyCnN1cnJlYWwgc2t5CnN1bnNldCBwaG90byBhdCBnb2xkZW4gaG91cgoxNjo5CmludGVyaW9yIHZpZXcKbG9hZGluZyBzY3JlZW4uIDhrIHJlc29sdXRpb24KYWJzdHJhY3QgcG9ydHJhaXQKbG9uZyBzdHJhaWdodCBibG9uZGUgaGFpcgpsZWF0aGVyIGNsb3RoaW5nIGFuZCBib290cwp6ZHppc2xhdyBiZWtzacWEc2tpCmdvbGQgY2hhaW5zCnN1bW1lciBzZXR0aW5nCm1pbmkgc2tpcnQKYmx1ZSBleWVkCnNob3Qgb24gY2Fub24gZW9zIHI1CmFsZXggam9uZXMKc2FyaQpsaWdodCBzdHVkeQpsaXBzCmRhcmsgcHVycGxlIGhhaXIKd29vZCBjYXJ2aW5nCnN0b3J5CmFtZXJpY2FuCnVyYmFuIHBob3RvZ3JhcGh5CnNlZ2EKZ2FzCmFwcCBkZXNpZ24KY29sb3IgcG9sYXJvaWQgcGhvdG8Kc29mdCBjb2xvciBwYWxldHRlCmxpZ2h0IGJsdWUgcGllcmNpbmcgZXllcwpzdW1tZXIgdmlicmFuY2UKbWFnYXppbmUgYXJ0IGNvdmVyIGlsbHVzdHJhdGlvbgpjb3J1c2NhbnQKOGsgcmV2b2x1dGlvbgpkZWVwIGJsdWVzCmJsdWUgYW5kIHllbGxvdwpzeW1tZXRyaWNhbCBoYW5kcwpiZWF1dGlmdWwgbGlwcwpmYWlyeSBhdG1vc3BoZXJlCmFyY2hpdGVjdHVyYWwgc2VjdGlvbgpzeW1tZXRyaWNhbCBmYWNlIGNvbmNlcHQgYXJ0CmpldCBzZXQgcmFkaW8KcGF1YSBzaGVsbAplZXJpZSBwZXJzb24KamV0IHBhcnRzCmdyZWVrIGRhcmsgbXl0aAp0aW0gYnVydG9uIHN0eWxlCmRlbG9yZWFuCmhvYmJpdG9uCmJsdWUgYW5kIHJlZAp1bnJlYWwgdG91cm5hbWVudApuZW8gcm9jb2NvIGV4cHJlc3Npb25pc3QKc2lsa3NjcmVlbgphbmltZSBmYWNlCnVyYmFuIGp1bmdsZQppbnRyaWNhdGUgYXJ0IGRlY28gbGVhZiBkZXNpZ25zCnV0b3BpYW4gY2l0eQpjaWdhcmV0dGUgc21va2UKY2luZW1hdGljIGNoaWFyb3NjdXJvCnNpdHRpbmcgYXQgdGhlIGJhcgphbHBob25zZSBtdWNoYSBzdHlsZQpmdXR1cmUgY2l0eQp3ZWF0aGVyCmNpbmVzdGlsbCA4MDB0IDUwbW0KcGl4YXIgY29uY2VwdCBhcnQKbWFnaWMgbGlicmFyeQpibGFpciB3aXRjaCBwcm9qZWN0Cm1hZApwb2xpY2UKaXNvbWV0cmljIGdhbWUgYXNzZXQKZ3RhIHYgc3R5bGUKYnJhZGxleSBqYW1lcyBhbmQgY29saW4gbW9yZ2FuCm1vdW50YWluIHJhbmdlCnJlbmRlcmVkIGluIGNvcm9uYQpvaWwgb24gY2FudmFzIDhrCmZsb3dlcnkgY290dGFnZQppbmNyZWRpYmx5IGJlYXV0aWZ1bApmYWNpYWwgaGFpcgp0b3VjaGluZwpjYXR3b21hbgpzdHVyZHkgYm9keQpjaGFyb24gdGhlIGZlcnJ5bWFuIG9mIGhhZGVzCnBvb3JseSBsaXQKZmxlc2h5IG11c2N1bGF0dXJlCmNvbnN0cnVjdGlvbgphbmltZSBjZ2kgc3R5bGUKbWluZCBjaGFyYWN0ZXIKbHVuZ3MKZ3JhZmZpdGkgYXJ0IHN0eWxlCmdvbGRlbiB0aHJlYWQKbW9uc3RlciBtb3ZpZQpqdXBpdGVyCjhrIG5vIGJsdXIKY29uYW4gdGhlIGJhcmJhcmlhbgppbiB0aGUgc3R5bGUgb2YgYWtpcmEKc3RlYWx0aAphcgp0ZWNobm9sb2d5IGFuZCBtYWdpYwpwdXJlIGImdwpuZW9uIHBhc3RlbCBjb2xvcnMKYWJzdHJhY3QgZGlnaXRhbCBhcnQKZnVyc3VpdApwbHVzaApzaG91dGluZwpmdWxsIGJvZHkgdmlzaWJsZQpkdXRjaCB0aWx0CnR3aW5zCmd1cnJlbiBsYWdhbm4KdGhlIHRlcm1pbmF0b3IKcGVuY2lscwphbHBob25lIG11Y2hhCmxpZmVsZXNzCmV5ZSBsZXZlbCBzaG90CmFtYXppbmcgc2hvcnQKaHlwZXItcmVhbGlzdGljIHBhaW50aW5nCnkzCmdheQpkaW9ueXN1cwpkaXNjd29ybGQKdGhlIHBpY3Rpc2ggZ29kIG9mIHN0YWdzCm15c3RpYyBhdG1vc3BoZXJlCm15dGgKbmVyaSBveG1hbgptYWdpY2FsIGZlZWxpbmcKZHV0Y2ggaG91c2VzIGFsb25nIGEgcml2ZXIKc2lsaG91ZXR0ZSEhIQpiJnchCjE5MDQKd2lsbGlhbSBibGFrZSBhcnQgZXhoaWJpdApmYWxsaW5nIGFwYXJ0CndhbmRhIG1heGltb2ZmCndlYXJpbmcgYSB3aXphcmQgY2xvYWsKZWx2ZW4gcHJpbmNlc3MKdm9ydGV4IG9mIHBsdW0gcGV0YWxzCnNob3QgZnJvbSBwcm9mZXNzaW9uYWwgY2FtZXJhCnBhdHJpY2sgZGVtYXJjaGVsaWVyCmVtbWEgd2F0c29uIGFzIGplc3NpY2EgcmFiYml0CmVtbWFudWVsIG1hY3JvbgpicnVpc2VkCndpdGggY3J5ZW5naW5lCnNpbmdsZSBsaW5lCnJldHJvZnV0dXJpc3RpYyBkaWdpdGFsIHBhaW50aW5nCnNoYXBlbHkgZGVycmllcmUKb290ZApleGNpdGVkIGV4cHJlc3Npb24KZW50aWNpbmcKY29udHJvbCBwYW5lbHMKZmxvYXRpbmcgaXNsYW5kIGluIHRoZSBza3kKY29sb3JlZCBpbGx1c3RyYXRpb24KdHJlbmRpbmcgaW4gYmVoYW5jZQpnb2xkZW4gc3Vuc2V0Cm11cmRlcgpkcmFwZXJ5CnZhcmlvdXMgaXRlbXMKZ2lnYSBjaGFkCmludHJpY2F0ZSBsaW5lIHdvcmsKam9qb3MgYml6YXJyZSBhZHZlbnR1cmUKYmFyZSBmZWV0CmluIG1vdGlvbgpncmFzcyB0ZXh0dXJlCndpbmdlZCBleWVsYXNoZXMKY3JhenkgZGV0YWlsCmd1eWJydXNoIHRocmVlcHdvb2QKcmVkIGZlYXRoZXJlZCB3aW5ncwpoYXNzZWxibGFkIHgxZC01MGMKaGVsbWV0IG9mIGEgZm9yZ290dGVuIGRlaXR5CmxvY2F0ZWQgaW4gYSBjYXN0bGUKc3Ryb25nIGF0bW9zcGhlcmUKaW4gdGhlIG5pZ2h0CmVuZXJneSB3YXZlcwpzeW50aC13YXZlCnRhbmsKYWJhbmRvbmVkIGxhYm9yYXRvcnkKc3RhbiBsZWUKamVhbiBncmV5CnBvc2luZyBmb3IgdGhlIGNhbWVyYQp0cmVuZGluZyBhcnQgc3RhdGlvbgpmbGFtYm95YW50CmRhcmsgYW5kIGdsb29tCnByZXR0eSBmZW1hbGUgcGhvZWJlIHRvbmtpbgp3YXJ6b25lCndlYXJpbmcgYSBjbG9hawpzdHVkaW8gc2hvb3RpbmcKd2hpdGUgbGlsaWVzCm5lb24gYmFja2xpdAprcmF0b3MKcm93ZW5hIG1vcnJpbGwKdmlkZW9nYW1lIHJlbmRlcgpzb2xpZApsb3VpcyBpY2FydAptYWNoaW5lIGVsZgptYXJibGUgdGV4dHVyZQpmcmVzaApibHVlIGNvbG9ycwptY2NyZWUgZnJvbSBvdmVyd2F0Y2gKc3BlY3VsYXJpdHkKYW1icm9zaXVzIGJvc3NjaGFlcnQgdGhlIGVsZGVyCmhlYXR3YXZlCm5hdGFsaWUgZG9ybWVyCnRoaWNrIHNtb2tlCmphcGFuZXNlIHBhaW50aW5nCmJvdHRvbSBvZiB0aGUgb2NlYW4KdmluIGRpZXNlbApzdHlsZSBvZiBob2t1c2FpCmxvbmcgY3VybHkgYmxvbmQgaGFpcgpibGFjayBhbmQgd2hpdGUgbWF0dGUgcGFpbnRpbmcKZ29sZCBjcm93bgpncmVlbiB3YXRlcgpmaW5lIGFydCBwcmludAptaW5pYXR1cmVzCmhhZWNrZWwKeW91bmcgcXVlZW4gamV6ZWJlbApiaWcgbW91c3RhY2hlCmhlIGlzIGFib3V0IDQwIHllYXJzIG9sZAp6ZWlzcyAxNTBtbSBmMi44IGhhc3NlbGJsYWQKc3BhY2UgcGlyYXRlCnBvcnRyYWl0IG9mIGFuIGFzdHJvbmF1dApwb3J0cmFpdCBvZiBiZWF1dGlmdWwgZ2lybApzdWJsaW1lIGF0bW9zcGhlcmUKcmFkaWFudCBoYWxvCmxvbmcgcHVycGxlIGhhaXIKY29sb3Jpc2VkCmZpbnMKc2lkZSB2aWV3IGNsb3NlIHVwIG9mIGEgZ2F1bnQKd2Fsa2luZyBpbiB0aGUgZm9yZXN0CmZvcmVzdCByYXkgbGlnaHQKZ29wcm8gcGhvdG8Kc3R5bGUgb2YgaGFqaW1lIHNvcmF5YW1hCmRlbnNlIHZlZ2V0YXRpb24Kb2x5bXBpY3MKYWxlcnQKYmFsY29ueQp2aWRlbyBnYW1lIGZhbmFydAp2ZXJ5IHJ1c3QKcG9ydHJhaXQgY2xvc2V1cAp0aGUgbGFzdCBzZWxmaWUgb24gZWFydGgKaW5zaWRlIGEgc3BhY2VzaGlwCnRoZWF0cmljYWwgc2NlbmVyeQp2aWN0b3JpYW4gYXJjaGl0ZWN0dXJlCmRvdWJ0CnRyZWFzdXJlIHBsYW5ldAppbnRyaWNhdGUgZHJhbWF0aWMgbGlnaHRpbmcKbWljaGFlbCB3aGVsYW4gYW5kIHRvbWVyIGhhbnVrYQp6ZW5kYXlhCmNnbm9kZQpudWNsZWFyIGNsb3VkCmhhcHB5IGNvbG9ycwoxOTAwcyBwaG90bwpiYXJiZWQgd2lyZQpiZWF1dGlmdWwgdGlsZXdvcmsKbmVlZCBmb3Igc3BlZWQKcmFpc2VkIGV5ZWJyb3dzCnBsYXlmdWwgY29tcG9zaXRpb24gY2Fub24KY2l0eSBzdW5zZXQKZXBpYyBjb21wb3NpdGlvbiA4IDUgbW0KZHJhbWF0aWMgaWx1bWluYXRpb24KYXQgc3VucmlzZQptYWRlIG9mIGJlYWRzIGFuZCB5YXJuCm9yYW5nZSBhbmQgdGVhbApyZWQgc2VhCjEgOSA2IDYKYmVhdXRpZnVsIHRyZWVzCnllbGxvdyBhbmQgcHVycGxlIGNvbG9yIHNjaGVtZQpib2tlaCBmb2N1cwpwbGVhc2FudCBmYWNlCnRhbGwgZ3Jvd24gcmVlZCBvbiByaXZlcmJhbmsKZ3JhZmZpdGkgc3R5bGUKaGFpciBibG93aW5nIGluIHRoZSB3aW5kCmVsZWN0cm9uIGZsb3cKbmF0aXZlIGFtZXJpY2FuCnllbGxvdyBhbmQgb3JhbmdlIGNvbG9yIHNjaGVtZQpjZ29zY2lldHkKdmljdG8gbmdhaSBzdHlsZQpmdWNoc2lhIHNraW4gYmVuZWF0aCB0aGUgYXJtb3IKZGFya3NvdWxzIGNvbmNlcHQgYXJ0CnZlcnkgb3JuYXRlCndoaXRlIGJyYQpjb3BwZXIgb3hpZGUgYW5kIHJ1c3QgbWF0ZXJpYWxzCmJlYXV0aWZ1bCBjbG91ZHkgZGVlcCBibHVlIHNreQpkZXZvdXJpbmcgaGFwcGluZXNzIGFuZCBzb3VscwpmaW5lIGRlbGljYXRlIHN0cnVjdHVyZQpzaW1wbGUgY29tcG9zaXRpb24KbG90cyBvZiBmdXJuaXR1cmUKMyByZCBwZXJzb24gYWN0aW9uIGFkdmVudHVyZQpkaWdpdGFsIGFydCB3aWRlc2NyZWVuIDggawp2aW50YWdlIGZpbG0KZmxvYXRpbmcgaW4gd2F0ZXIKYWJzdHJhY3QgbG9nbwprYXJvbCBiYWsgYW5kIHBldGVyIG1vaHJiYWNoZXIKZ29sZGVuIGhvdXIgaHVlcwpzdHlsaXN0aWMgb3ZhbCBibGFjayBleWVzCmhhbGYgLSBmcmFtZSBzcXVhcmUgZ2xhc3NlcwptaW5pIGR2IGNhbWVyYSBmb3VuZCBmb290YWdlCnZlcnkgc2ltcGxlCjMgLSBkCjE5Nzkgb21uaSBtYWdhemluZSBjb3ZlcgplZHZhcmQgZXNjaGVyIGd1YXkKaGlnaHQgZGV0YWxpZWQKcGFsZSBsaWdodApleHRyZW1lIGRldGFpbGVkIGZhY2UKY3lhbiBhbmQgb3JhbmdlCndlYXJpbmcgc3VuZHJlc3MKbG9uZyBoYWxsd2F5CmVkZ2UgbGlnaHQKc2ltcGxlIGJ1dCBlZmZlY3RpdmUgY29tcG9zaXRpb24KdXJzdWxhIHRoZSBzZWEgd2l0Y2gKdG9raSBkb2tpCnN1cGVydmlsbGFpbgpwaWN0b3JpYWwgbWFyawpoYWlyIGxpZ2h0CmtvZGFjaHJvbWUgNiA0CmJpb3Nob2NrIHN0eWxlCnNsaWNrZWQgYmxhY2sgaGFpcgpyaW5nIC0gZmxhc2gKdmVjdG9yIHNwbGluZSBjdXJ2ZSBzdHlsZQpydXN0ZWQgbWV0YWwgYW5kIHN1bmZsb3dlcnMKYXJ0IHN0ZXZlbiBzdGFobGJlcmcgYW5kIGdveWEKd2luZ3NwYW4KdHJpcG1hY2hpbmUKaGFybW9uaW91cwpyb3lhbGNvcmUKcG9ydHJhaXR1cmUKZ3JlYXQgY29sb3JzCmxvd2Jyb3cgc3VycmVhbGlzdGljCnNpdHRpbmcgb24gYSBzdG9uZSB0aHJvbmUKbmlrb24gbGVucwp2ZXJ5IGxvbmcgYXJtcwpzdGFuZGluZyBpbiBzaGFsbG93IHdhdGVyCnN1cnJlYWwgZnJvemVuIGxhbmRzY2FwZQpob2FuZyBsYXAKZGFtYWdlZCBwaG90bwpjbG9zZSBsb29rCm5lb24gb3V0bGluZQp0dXJyZXRzCndob2xlIGVhcnRoCm5vIGZlYXJzCm9rYXkgb25lIGZlYXIKcGhvdG9zeW50aGV0aWMKZG9yaWFuIGNsZWF2ZW5nZXIKcGVyZmVjdCBoYW5kIGFuYXRvbXkKaW50ZXJ0d2luZWQKZHJlYWRqaW0Kd2hpdGUgc2hpcnQgYW5kIGplYW5zCm55Y2hvcwpkdXN0bGlnaHQKdGFibGV0b3AgcnBnCm92ZXJ3YXRjaCB0cmFjZXIKc2VhZ3VsbHMKY2hvY29sYXRlIHNhdWNlCnNtYWxsIGhvcm5zCmJsb29kIGV2ZXJ5d2hlcmUKdW5kZXIgcmVwYWlycwptZXRhbCBjbGFkZGluZyB3YWxsCm5lb24gc2hvcHMKZGlnaXRhbCBzY3JlZW5zCmNoaWFyb3NjdXJvIG9pbCBwYWludGluZwpjb21iYXQgcG9zZQpiYWQgdHJpcAphbWF6aW5nIHdhdGVyIGFydApkZXNvbGF0ZSBnbGFjaWFsIGxhbmRzY2FwZQpwcmFpc2UgdGhlIG9tbmlzc2FpYWgKYmxhY2sgYmFja3JvdW5kLiBpbmtzY2FwZQpjYWxlYiB3b3JjZXN0ZXIKYnJpbGxpYW50IHBob3RvcmVhbGlzbQppcm9uaWMKa2VuIGRvbGwKd2Vicwpzbm93IGdsb3cKY2hpYmkgYXJ0CmZ1bGx5IC0gY2xvdGhlZCEhIQpmb3J3YXJkIGZhY2luZwpmaW5lbHkgZGV0YWlsZWQgZnVybml0dXJlCnN1cGVyYiBkZXRhaWwgOCBrCmZhZGVkIHJlZCBhbmQgeWVsb3cKbmVvY2xhc3NpY2FsIGFyY2hpdGVjdHVyZQptb3NxdWUKZWRpdGVkIGluIHBob3Rvc2hvcApzdGFsZW5oYWcKdiAtIHJheSByZW5kZXIgOCBrIHVoZApyYWluIGFuZCBsaWdodCBmb2cKZCAmIGQgZmFudGFzeSBkaWdpdGFsIHBhaW50aW5nCjQgMCBtbSBsZW5zCmNhc2tldApnbG93d2F2ZQptZWRpY2FsIHBob3RvZ3JhcGh5CnZpZGVvIGdsaXRjaApjb3ZlcmVkIGluIGZsb3dlcnMKaXNvbWV0cmljIHZpZXdzCndpdGggbG9uZyBkYXJrIGhhaXIKYmVsbGUgZXBvcXVlCmh1bWFuIGhlYWQKcmVkIGh1ZQpnbGVhbWluZwpvcHVsZW50IHBlYXJsIG5lY2tsYWNlCmxhY2VkIGRyZXNzCmxhcmdlIGJydXNoc3Ryb2tlcwp3YXcKdXJiYW4gZmFudGFzeSBzZXR0aW5nCmRlY29yYXRpdmUgYXJ0IG5vdXZlYXUgYm9yZGVyCmFuaW1lIHRyZW5kaW5nIGFydHdvcmsKZGVjb3JhdGl2ZSBhcnQgZGVjbyBib3JkZXIKc3R1bm5pbmcgYWxpZW4gbGFuZHNjYXBlCmVybnN0IGhhZWNrZWwgYW5kIGFydGdlcm0KZnJvc3RlZCBnbGFzcwpvbmUgZmlzdCByYWlzZWQgaGlnaCBpbiB0cml1bXBoCnNvY2NlciBwbGF5ZXIgbWFydGluIMO4ZGVnYWFyZApzdHVkaW8gZ2hpYmxpIGFuaW1lCmNvc3kgZmlyZXBsYWNlCndlYXJpbmcgamV3ZWxyeQphcyBhIG1hdHRlIG9pbCBwYWludGluZwpzaGVsdmVzCndlYXJpbmcgYmxhY2sgbW9kZXJuIGNsb3RoZXMKY29zbWljIGhvcnJvciBzdHlsZQpkYXJrIGFjYWRlbWlhIGFlc3RoZXRpYwpzdXJyZWFsIGNsb3VkcwptYWtvdG8gc2hpbmthCm1vdW50YWlucyBhbmQgc3Vuc2V0ISEKYWxwaG9uc2UgbXVjYQo4MHMgcG9zdGVyCmFiYW5kb25lZCBmYWN0b3J5CndlbGNvbWUgdG8gbmlnaHQgdmFsZQpleHRyZW1lbHkgc3Ryb25nIHdpbmQKc2h1c2VpIG5hZ2Fva2EKbWFnYXppbmUgY29sbGFnZSBhcnQKZG9sbGFyIGJhbmsgbm90ZXMKY2xhc3NpY2FsIHNjdWxwdHVyZQpwZXRhbCBwaW5rIGdyYWRpZW50IHNjaGVtZQphY3Rpb25pc20KamVkaSBtYXN0ZXIKYXQgbmlnaHQgd2l0aCBkcmFtYXRpYyBtb29ubGlnaHQKZmFjZSBwaG90bwp3YWx0IGRpc25leSAoIDEgOSAzIDcgKQplbmVyZ2V0aWMgdmFyaWEgc3VpdAphcnRzdGF0aW9uIGdlb21ldHJpYwpjZW50cmFsaXplZApwaG90byA4NW1tCmNyaXNwIGNvbnRvdXIgbGluZXMKaGFuZHNvbWUgbWFsZQp0d2lsaWdodCA7IHdpZGUgc2hvdAphbmF0b215IHN0dWR5CmV4aGliaXRpb24gb2YgcGFpbnRpbmdzCmZhbnRhc3kgYm9vawp3aWRlc2NyZWVuIHJlc29sdXRpb24Kb2xlbwpzY2FyeSBzaGFkb3dzCnBhdGNoZXMgb2YgZnVyCnNvbWUgc21va2UgYW5kIGZpcmUKZGV0YWlsZWQgYW1iaWVudCBsaWdodGluZwp5dXhpYW5nIGNoZW4KbWVkaWV2YWwgZ2F0ZXMKaXJpZGlzY2VudCBsaWdodApkZWVwIGJva2VoCnJlYnVpbGQgb2YgZXZhbmdlbGlvbiAxIDAgOCAwIHAKc3R1bm5pbmcgZmVhdHVyZXMKY2hhc20KZmVtYWxlIGJlYWNoIHZvbGxleSBwbGF5ZXIKMSA2IGJpdCBjb2xvcnMKZmxhdCBjZWwgc2hhZGluZyBtdWNoYQpmdWxsIGNvbG91ciBzcGVjdHJ1bQpzZWNyZXRseSBvbiBhIHZpbGxhZ2UKb25lIG5vc2UKZWRkb3RvcmlhbCBpbGx1c3RyYXRpb24KYW50aHJvcG9tb3JwaGljIHR1cnRsZSBodW1hbm9pZApmYWNlbGVzcyBwZW9wbGUgZGFyawpjYW5vbiBlb3MgciA2CjIgZCBnYW1lIGFydCBndGEgY292ZXIKaGVhcnRoc3RvbmUgY2FyZCBhcnR3b3JrCmV4cGVydCBodW1hbiBwcm9wb3J0aW9ucwppbnRpbWFjeQpyZWQgZGVhZCByZWRlbXB0aW9uIGFydCBzdHlsZQpsYW1wbGlnaHQKZmVhdHVyZWQgb24geiBicnVzaAp3YWxscGFwZXJmbGFyZQo0IGsgOCBrIGhkIHJlc29sdXRpb24KZCAtIGRheQptYWdhemluZSBpbGx1c3RyYXRpb24Ka29kYWsgMTEwCm1hcnNobWFsbG93cwpwcmV0dHkgZmFjZSEhCnVsdHJhcmVhbGlzdGljIGNvbmNlcHQgYXJ0CmV5ZSBjeWJlcnB1bmsgYmlvbmljcwpyZXRybyBmdXR1cmlzdCBzdHlsZQpuYXR1cmFsIGJlYXV0eSBleHByZXNzaXZlIHBvc2UKYmxhY2sgbWFnaWMgc3BlbGxzCmZpbmUgZGV0YWlscyBwb3J0cmFpdApjcmFpZyBtdWxsaW5zIGFscGhvbnNlIG11Y2hhCmNhc3VhbCBwb3NlCmJlYXV0aWZ1bCBmZW1hbGUgZG9yb3RoeSBnYWxlCnBob3RvIC0gcmVhbG9zdGljCmhvbG9ncmFwaGljIGFydGlmYWN0cwp5ZWxsb3cgc2Vhd2VlZApwb3N0ZXIgYmFja2dyb3VuZApzY2VuZSByZW5kZXIKZ29sZCBpbmxheQp2ZXJ5IGZpbmUgZGV0YWlsCmdydW5nZSBjeWJlcnB1bmsKdnNjbyBmaWxtIGdyYWluCnRpbGVkIGZvdW50YWlucwpzY2kgZmkgc2NlbmVyeQp2b2d1ZSBjb3ZlciBwb3NlcwpiZWF1dGlmdWwgb2lsIG1hdHRlIHBhaW50aW5nCmRlcmV2c2NoaWtvdmEKaWdsYQpoaWZpbWFuCnNleHkgYm9keSBhbmQgZmFjZQpzYWQgZXllcyB0ZWFycwpiZW4gaHVyCnNjcmVlbiBtZWx0aW5nCnBob2VuaXggZmxhbWVzCmxhcmdlIGxpZ2h0bmluZyBzdG9ybQpoYWlyIHRpZWQgaW4gYSBwb255dGFpbAp2YXJpb3VzIHJlZmluZSB0ZWNobmlxdWVzCmVkd2FyZCBob3BwZXIgcGFpbnRpbmcKYmVzdCBwcmFjdGljZQooICgga29uc3RhbnRpbiByYXp1bW92ICkgKQp3aXRoIGFueGlvdXMgcGllcmNpbmcgZXllcwpicnV0YWxpc3QgYWxpZW4gY2l2aWxpemF0aW9uCm11cmxvYyB0aW55ZmluCmRyZWFkIGluZmVybmFsCndlZSB3aGVscApzdGFuZGluZyBpbiBhIGNpdHkgY2VudGVyCmFjdGl2aXNpb24gYmxpenphcmQKaW4gZ2FtZSBwYXRob2xvZ2ljIDIKdm9sdW1ldHJpYyBkdXN0Cm1heWEgYWxpIGFzIGEgd2luZCBzb3JjZXJlcgo4IGsgc21vb3RoCmFic29sdXRlIGNoYWQKdHN1dG9tdSBuaWVoaQp1bmlxdWUgaGFpciBkZXNpZ25zCmNsZWFyIHRvZGQgc29sb25keiBmYWNlCndpdGggZmllcnkgZ29sZGVuIHdpbmdzCnNoaW55IGJsYWNrIGRyZXNzCmNoYXJpemFyZCBmbHlpbmcgYWJvdmUgbmV3IHlvcmsKcGluayBhbmQgcGluayBkZXRhaWxzCmRvbmFsZCB0cnVtcCBhcyBhIGtuaWdodApsYXJnZXIgdGhhbiBnYWxheGllcwpjaXR5IG9mIHRoZSBmdXR1cmUKYmlnIHRvcCBjaXJjdXMgdGVudApkcmFnb24gcGF3Cndvb2QgY2FiaW4gaW4gZGlzdGFuY2UKamVsbHlmaXNoIHBob2VuaXggaGVhZAp3aXJlcyB3aXRoIGxpZ2h0cwpkZXRhaWxlZCBmYWNlIGRldGFpbHMKcnV0a292c2t5CmZyb250YWwgcGljdHVyZQpjdXRlIGh1Z2UgcG9ja2V0cwpib2R5IGZpdHRlZCBkYXJ0IG1hbmlwdWxhdGlvbgpoaWdoIGxpZ2h0cwpzb2Z0IGFpcmJydXNoZWQgYXJ0d29yawp3aXRoIGxvbmcgdGhpbiBhbnRlbm5hZQpsaXF1aWQgY2xvdWRzCnN5bW1ldHJpYyBmb3JtIGV4cGxvcmF0aW9uCmNvbW11bmlzdCBjbG93biBwb3J0cmFpdAp3aGl0ZSBtZXRhbCBuZW9jdWJpc20gYXJtb3IKY29tcGxleCBjaXR5CmJsYWNrIGhlYWQKbmF0YXNoYSB0YW4gbWFjaWVqIGt1Y2lhcmEKZXZpbCBleHByZXNzaW9uCmFuY2llbnQgcnVpbnMgYmVoaW5kCmV4b3RpYyBjb3N0dW1lcwpodW1hbiBhcm1zCmRlbnNlIGdyb3VuZCBmb2cKc3RhciB0cmVrIHN0eWxlCmJsb2IgYW5pbWUKYmFja2dyb3VuZCBjb2xvcmZ1bApiYWNrZ3JvdW5kIHVyYmFuIGNpdHlzY2FwZQpoZW5yeSBkb3JzZXR0IGNhc2UKbWF0dGUgcGFpbnRpbmcgY29taWMgYm9vayBhcnQKZm9nZ3kgYmFja2dlb3VuZAphY3J5bGljIHBvdXIgYW5kIHNwbGFzaGluZyBwYWludApib3RhbmljYWwgaGVyYmFyaXVtCmJsYWNrIGhhbmRzIHdpdGggYmxhY2sgY2xhd3MKYXJyaSBhbGZhIGFuYW1vcnBoaWMgbGVucwpzaGFkYXIga2FpCmJvd2wKZmFzaGlvbiBhcnQKMzAwIHRoZSBtb3ZpZQpwb2xpc2hlZCA6IDoKZGlnaXRhbCBub2Rlcwp2YXBvcndhdmUgYWVzdGhldGljcwpzY3VtIGFuZCB2aWxsYWlueQpqYXBhbmVzZSBjaXR5CmVkZ2Ugb2YgdGhlIHVuaXZlcnNlCmlzYWFjIHp1cmVuCnN1bW1lciBjbGVhciBibHVlIHNreQpmb2dneSBhdCBkYXduCm9ic2N1cmVkIGZhY2UKZGlzdGluY3QgaG9yaXpvbgpzZW1pYWJzdHJhY3QKZGV0YWlsZWQgcGlzdG9sIHRyaWdnZXIKLSA5IDkgOSBtbSBtYWNybyBsZW5zCnN0YW5kaW5nIGluIGEgZmxvd2VyIGZpZWxkCm9uZSBzaW5nbGUgaGVhZApiZW5ldm9sZW5jZQpyYXZlIGFydApsaWxhYyBidXNoZXMKaW50cmljYXRlIGRldGFpbGVkIGFuYXRvbXkKYWxwaG9uc2UgbXVjaGEgbWFnYWxpIHZpbGxlbmV1dmUKc3ltbWV0cmljYWwgYmVhdXRpZnVsIGZhY2UKYm9keWJ1aWxkZXIgYm9keQpmZW1hbGUgZmlndXJlIGluIG1heGkgZHJlc3MKZmVtYWxlIHZhbXBpcmUKZmFudGFzeSBnYW1lIHNwZWxsIHN5bWJvbApwdXJwbGUgY29sb3VyIHNjaGVtZQp0aGUgd29ybGQgd2l0aG91dCBmb3JtIGFuZCB2b2lkCjggMCAwIG1tCm11c2N1bGFyIHN5c3RlbSByZWZlcmVuY2UKYnJ5YW4gY2hyaXN0aWUKcG9saWNlIHVuaWZvcm0KZGFyayB2aWduZXR0ZQp0d28gLSBoYW5kZWQgc3dvcmQKc3RhY2tzIG9mIGdpYW50IGJvb2tzCmxvb2tpbmcgdG8gaGlzIHNpZGUKZ2FtZSBpY29uIHN0eWxpemVkCmNhbmRsZXMuIGJhcm9xdWUgZWxlbWVudHMKcHVsbGluZyB0aGUgbW92ZSdkZXJwIGJhbnNoZWUgJwpkb29tIG9mIHRoZSBnb2RzCnVsdHJhIGRldGFpbGVkIGZhY2UgYW5kIGV5ZXMKc2xlZWsgZ29sZCBhcm1vcgptYWdpYyBtdXNocm9vbQpvdHRvIG11ZWxsZXIKd2l0aCBiaWcgcmFiYml0IGVhcnMKcmVuZGVyIHVucmVhbCBlbmdpbmUgLSBoIDcgMCA0CnBhdWwgbHVuZwpnb2xsdW0gYXMgYSB0aXRhbgptYXJ5IGxvdWlzZSBicm9va3MgMiAwIHllYXJzIG9sZApwYWludGJydXNoCmx1bWlub3VzIG5lYnVsYQpncmVlayBhbWF6b24gd2FycmlvcgpvbmUgbGVnZ2VkIGFtcHV0ZWUKcmV0YXJkZWQgd29sZiBwb3J0cmFpdApibGFjayBsZWF0aGVyIGFybW91cgpoaWdoIC0gYW5nbGUgdmlldwozIDYgMCBwcm9qZWN0aW9uCmJsYWNrIGFuZCB3aGl0ZSBjb2xvciBzY2hlbWUhISEKdmlicmFudCBoaWdoIGNvbnRyYXN0IGNvbG9yaW5nCnRhcnRhbiBzY2FyZgppbiBiYXRtYW4gOiBhcmtoYW0ga25pZ2h0CmFybW9yIG1hZGUgb2Ygc3RlZWwKZmFudGFzeSBnYW1lIHNwZWxsIGljb24KY2luZW1hdGlj4oCdCmh1Z2UgZnV0dXJpc3RpYyBidWlsZGluZwptYWxsc29mdAp3ZWF0aGVyaW5nIGFybW9yIHBsYXRpbmcKYnJvbSByZWRzaGlmdApuYXV0aWx1cyBicmFpbgpseW5uIHZhcmxleQpsb3Zlcm4ga2luZHppZXJza2kKc3RldmUgb2xpZmYKaW4gZnJvbnQgb2Ygc21va2UgYmVoaW5kCmxpZmUgbGlrZSBmYWNlCm1hc2N1bGluZSBhbmQgcnVnZ2VkCmFuYW1vcnBoaWMgbGVuc2VzIDIgNCBtbQpkYXJrIHNob3J0IGN1cmx5IGhhaXIgc21pbGluZwpzbWlsZSBvbiBmYWNlCmluY3JlZGlibGUgYW5pbWUgbW92aWUgc2NlbmUKbWFzdGVyZnVsIGRldGFpbGVkIHdhdGVyY29sb3IKaW5jcmVkaWJsZSBydWFuIGppYSBtb3ZpZSBwb3N0ZXIKZHluYW1pYyBleHRyZW1lIGZvcmVzaG9ydGVuaW5nCndoaXRlIG1hcmJsZSBzY3VscHR1cmUKYXN0cmFsIHdpdGNoIGNsb3RoZXMKaW5zdHJ1bWVudCBvZiBsaWZlCmNyeXN0YWxpbmUgY2VsdGljCmlzb21lcmljIHZpZXcKa2lsbHVhIHpvbGR5Y2sKOCBtbSBleHRyZW1lIGZpc2hleWUKb3JnYW5pYyBzaGFwZQppbiBiaWxseSBoZXJyaW5ndG9uIGJvZHkKdGFrZW4gd2l0aCBjYW5vbiA4IDAgZAptYWRuZXNzIGNyZWF0dXJlCnJ1c3NpYW4gY2xvdGhlcwptYW4gbWFsZSBkZW1vbgpqcG9wIGNsb3RoaW5nCm1vb2MKb3JnYW5pYyBhbmQgaW50cmljYXRlCmF1ZGV6ZQptb25zdGVyIGNoYXJhY3RlciBkZXNpZ24KOCBrIGhpZ2ggZGV0YWlsIGNvbmNlcHQgYXJ0Cm1lZGl1bSBibGFjayBoYWlyCmludGVuc2Ugc3VubGlnaHQKdG9wIGd1biBtYXZlcmljawptaXh0dXJlIGFuaW1hbApwZWFjb2NrIGluIHRoZSBkZXNlcnQKdGVsZXBob3RvIGxvbmcgZGlzdGFuY2Ugc2hvdApzdHJlZXQgb2YgbW9zY293CnN0dWRpbyBhdG1vc3BoZXJlCnVucmVhbCBlbmdpbmUgNSA4IGsgcmVuZGVyaW5nCmJpZyBibGFjayBleWVzCnBvcnRyYWl0IGJ1c3Qgb2Ygd29tYW4Kcm95YWwgZ3JlZW4gYW5kIG5hdHVyZSBsaWdodApjaXJjdWl0cnkgdmlzaWJsZSBpbiBoZWFkCnNlcmFwaGluZSBhaHJpIGtkYQpwb3J0cmFpdCBvZiBhIGJlYXV0aWZ1bCBnb2RkZXNzCmhlIGlzIGFib3V0IDYgMCB5ZWFycyBvbGQKYW5ncnkgY29tcGxleGlvbgpjb3BwZXIgYW5kIGVtZXJhbGQgamV3ZWxyeQpwb3J0cmFpdCBvZiBiZWF1dGlmdWwgdmFtcGlyZQpwb3J0cmFpdCBvZiBiZWF1dGlmdWwgeW91bmcgbWFuCmRhcmsgYW5kIG1vb2R5IHNtb2tlCmJvbnkgZmFjZQp3ZXJld29sZiBtYW4KcmVmbGVjdGl2ZSBncmFkaWVudApzaWdtYSBsZW5zIHBob3RvCnZlcnkgc29mdCBzaGFkb3dpbmcKcm91Z2ggYW5kIG1vb2R5CmZvcmVzdCBwdW5rCnZlcnkgZGVlcCBzdGlsbG5lc3MgYXRtb3NwaGVyZQplYWNoIHdlYXJpbmcgY29ycmVjdCBlcmEgY2xvdGhlcwpzaW1wbGUgZmFudGFzeSBtYXAKc3BhY2VzaGlwIGZyb20gdGhlIG1vdmllIGR1bmUKd2V0IGxpcHMKc3VycmVhbCBnb3VhY2hlIGdlc3R1cmUgcGFpbnRpbmcKcGFsZSEKbGVkIGluZGljYXRvcgpzcGVjdWxhciBjb2xvcnMKYXNoZm9yZCBibGFjayBtYXJibGUgc2N1bHB0dXJlCnNwYWNlIHN0YXRpb24gcGxhbmV0IGFmYXIKYmVhdXRpZnVsIGRyYXBlcwphcnRlIGtvdG8gbm8gaGEgbm8gbml3YQp5b3VuZyBtYW4gd2l0aCBtZWRpdW0gLSBsZW5ndGgK4oCcIHNlbnN1YWwK4oCcc2NhcmxldHQgam9oYW5zc29uIHBvcnRyYWl0CmF1dG9kZXNrIGJsdWVwcmludAp2b29kb28KZXhwZW5zaXZlIG91dGZpdApzY2FyCmZlcnJpcyB3aGVlbApzeW1tZXRyaWNhbCBwYWludGluZwp3YXRlcmNvbG91ciBwYWludGluZwpuYXN0eQpibGFjayB3YXRlcgpvbmUgYmxhY2sKYmVuZGluZyBvdmVyCnN0cm9uZyBjb21wb3NpdGlvbgppbiBhdXR1bW4KMiAwIDAgOQptZXNzeSByb29tCmNoYXJhY3RlciBhcnR3b3JrCmJsb29kIHJlZCBza3kKZHJpbmtpbmcKcHN5Y2hvdGljCmhvbGRpbmcgYSByZXZvbHZlcgpjb2hlcmVudCBmYWNlCmluIGEgbWl4ZWQgc3R5bGUgb2Ygw6ZvbiBmbHV4Cmdsb2JhbCB3YXJtaW5nCmludHJpY2F0ZSBhcnR3b3JrLiBvY3RhbmUgcmVuZGVyCmhpZ2hseSBkZXRhaWxlZCBmaWd1cmUKZGV2aW91cwpjeWJlcm5ldGljIGNpdmlsaXphdGlvbnMKbGFyZ2UgZnJvbnQgdGVldGgKYnJpZ2h0IHBpZXJjaW5nIGJyb3duIGV5ZXMKZmlyZSBhbmQgYXNoZXMKZWthdGVyaW5hCnRoZSB0dWRvcnMKc2VjdXJpdHkgY2FtIGZvb3RhZ2UKcnVuCnR3byBwZW9wbGUKaW4gdGhlIG92YWwgb2ZmaWNlCmdyYWluIGtvZGFrCjEgOSA5IDgKcHViCmxpZ2h0IGhhaXIKaG9ycm9yIGNvbmNlcHQgYXJ0CndoaXRlIHNraXJ0Cmx1Y2lkCmJhcGhvbWV0CjE5MDBzIHBob3RvZ3JhcGh5CnJhcHBpbmcgaW50byBtaWNyb3Bob25lCmJsYWNrIHZlbHZldCBwYWludGluZwphbmNpZW50IGdyZWVrCmVhcnRodG9uZSBjb2xvcnMKYmlnIG5vc3RyaWxzCnNlYXJjaGxpZ2h0cwpsZXdkCm9wZW4gYmFuayB2YXVsdApha2lyYSBhbmltZSBjeWJlcnB1bmsKYXQgZXZlbmluZyBkdXJpbmcgcmFpbgp3aGl0ZSBhbmQgZ29sZApvdmFsIG9mZmljZQppbnRlcm5hbCBlbnZpcm9ubWVudApzbW9raW5nIGEgam9pbnQKYnJlYXRodGFraW5nIGlseWEga3V2c2hpbm92CmFudGlxdWUgcmVuZXdhbApvY3RhbmUgOCBrCjE5MzYKbWVkaXVtIHdpZGUgc2hvdApzdGlsbCBsaWZlIHBhaW50aW5nCjggYml0cyBncmFwaGljcwpzbW90aApldGMKY29tcGxleCBkZXNpZ24Kc2FsYWNpb3VzCnZpZGVvIGdhbWUgZ2Vuc2hpbiBpbXBhY3QKcHJvcGVyIGFuYXRvbXkKZWVyeQpjbGF5IHJlbmRlcgpmdXR1cmlzdGljIGZpbmUgbGFzZXJzIHRyYWNpbmcKYmlvCmdyYXZlcwpoYXJkIHN1cmZhY2UgbW9kZWwKcGxheXN0YXRpb24gMiBncmFwaGljcwpuZW8gbm9pcgpjbG90aCBzaW11bGF0aW9uCnZveGVscwp1bnJlYWwgZW5naW5lIDUgaGRyCmRyYW1hdGljIHJpbSBsaWdodGluZwozIGQgY2dpCnBvcnRyYWl0IGltYWdlCmN1dGUgcm91bmQgZ3JlZW4gc2xhbnRlZCBleWVzCmRldmlscyBob3JucwpyaWdodCBhbmdsZXMKb3JnYW5pYyBzaGFwZXMKd2F0ZXIgY29sb3VyCmZseWluZyBkcmFnb24Kd2hpdGUgdG9wCm1vdXNlIGVhcnMKbWFnaWNhbCBkZXRhaWxzCjM2MCBkZWdyZWUgZXF1aXJlY3Rhbmd1bGFyCnRyZW5kIG9uIGJlaGFuY2UgM2QgYXJ0CmluIGNvbG91cgp2ZXJ5IGxvbmcgd2F2eSBhenVyZSBibHVlIGhhaXIKc3RhbmRpbmcgYXRobGV0aWMgcG9zZQpwYWNrYWdpbmcKcHJlZmVjdCBzeW1tZXRyaWNhbCBmYWNlCm1hdGgKbnBjCnN0cmFpZ2h0IHNtb290aCB2ZXJ0aWNhbApjaGVja2VyZWQgcGF0dGVybgphbnRocm9wb21vcnBoaWMgY2F0CmVwaWMgZHJhbWF0aWMgbGlnaHRpbmcKY2VudGVyZWQgaW4gZnJhbWUKZGlzbmV5IHBpeGFyIDNkIHN0eWxlCmR1ZWwKZnJvd24KZ2xvd2luZyBtdXNocm9vbXMKb2lsIGFuZCBhY3J5bGljIG9uIGNhbnZhcwpwb2V0aWMgYW5kIHN5bWJvbGljCnN0b3JtIGluIHRoZSBkaXN0YW5jZQo1NW1tIGxlbnMKYWJzdHJhY3QgY29tcG9zaXRpb24KYmx1ZSBjb2xvciBwYWxldHRlCmdvbGQgc2t1bGxzCmRlY29sbGV0YWdlCnJpZmZsZQpsb25nIGJsYWNrIGN1cmx5IGhhaXIKaW5pdGlhbCBkCmZ1dHVyaXN0aWMgaGktdGVjaCBkZXRhaWxzCm5vIG1hbnMgc2t5CnRhYmxlIGlzIGNlbnRlcmVkCm1pbnQgY29uZGl0aW9uCnVsdHJhIDhrCnBhdWwgcmFuZApnYW1lIGVuZ2luZQp0b3hpYyB3YXN0ZQplcGljIHBob3RvZ3JhcGh5CmRpZ2l0YWxhcnQKd2VsbC1kZXNpZ25lZCBkaWdpdGFsIGFydApjaWdhcmV0dGVzCnBjIHdhbGxwYXBlcgpoaWdobHkgZGV0YWlsZWQgZGlnaXRhbCBhcnR3b3JrCmFsbCBjb2xvcnMKdGFrZW4gaW4gdGhlIG1pZCAyMDAwcwpzY2FyZmFjZQpjb25mZXR0aQpkZXdkcm9wcwpoYWxsd2F5CnNwaXJpdGVkCmludHVpdGl2ZQp2ZXJ0aWdvIGNvbWljcwpkcmFtYXRpYyBkaWdpdGFsIGFydApqcGVnIGFydGlmYWN0cwpyZW5kZXJlZCBpbiBjcnllbmdpbmUKc29mdGxpZ2h0CmJlYXV0aWZ1bCBncmVlbiBleWVzCnNrdWxsIGZhY2UKYXJjaGl0ZWN0dXJlIGRyYXdpbmcKZnJhY3RhbCBzaWxrCmFtYXppbmcgY29sb3JmdWwgYmFja2dyb3VuZApzY2FubmVkCnNpZ25zCmR1c2sgbGlnaHRpbmcKd29ybWhvbGUKYWxleCBncmV5IHN0eWxlCndvcnNoaXAKbWFrb3RvIHNoaW5rYWkgc3R5bGUKMjVtbQptb25rZXkgcHVuY2gKbW9vbiBsaWdodGluZwpyb2NreSBjb2FzdAp3ZWF0aGVyZWQgdWx0cmEgZGV0YWlsZWQKZm9jdXMgb24gZGFydGggdmFkZXIKYnJhaW5zCmplc3RlciBzaG9lcwpibGFjayBhbmQgd2hpdGUgY29sb3JzCigod2F0ZXIgY29sb3IpKQpieSBqYWtlIHBhcmtlcgpzdHJhaWdodApvaWwgcGFpbnRlZApkYXJrIHBob3RvZ3JhcGh5CjE5NTAKbWFkZSBpbiBtYXlhIGFuZCBwaG90b3Nob3AKZnJvbSBoZWFydGhzdG9uZQp3aXRoIG9jdGFuZQp3aXRoIHVucmVhbCBlbmdpbmUKZGVwcmVzc2l2ZQpzaGFycCBhbmQgY2xlYXIKbWV0aWN1bG91cwphbGVncmlhIHN0eWxlCjRrIGhkciBoeXBlciByZWFsaXN0aWMgaGlnaApzdWkgaXNoaWRhCmhvbGRpbmcgYSBzcGVhcgpyZWQgc2NhbGVzCnJpc3RhbiBlYXRvbgptb3VudGFpbnMgaW4gZGlzdGFuY2UKZWxzYQpzcGVjdGFjdWxhciBsaWdodGluZwpsZWVyaW5nCnNvbGFyIHBhbmVscwpnbG93aW5nIGxpZ2h0aW5nCm5hbm8KbW9rb3RvIHNoaW5rYWkKdGlueSBkZXRhaWxzCmEgaHlwZXJyZWFsaXN0aWMgc2Nob29sZ2lybApkYXJrIHNraWVzCmlzb21ldHJpYyBhZXJpYWwgdmlldwpib2l4Y2FyIHN0eWxlCnJ1biBkb3duCmluc2Fpbmx5IGRldGFpbGVkCmNhbmRpZCBzaG90CmdvIHBybwptb29uIGxhbmRzY2FwZQpuYXR1cmFsIGNvbXBsZXhpb24KZXh0cmVtZWx5IGhpZ2ggZGVmaW5pdGlvbiBzaG90CndpY2tlZCBzbWlsZQpkZXRhaWxlZCBmYWNlIGFuZCBib2R5CmRldGFpbGVkIHN3aXJsaW5nIHdhdGVyIHRvcm5hZG8KNHlyIG9sZAppYW4gZGF2aWQgc29hcgp0cmFuc2h1bWFuaXN0Cm9jZWFuIHZpZXcKc3VwZXIgY29oZXJlbnQKaGVhcnR3YXJtaW5nCnBhdHJpY2sgbmFnbGUKY2xvc3VwCmdvbGRlbiBob3Vycwpza3kgYmx1ZQpsb29raW5nIGxlZnQKZHJhbWF0aWMgcGhvdG9ncmFwaHkKMTk5MQpnbG93aW5nIGxpbmVzCnBsdXMtc2l6ZWQKbG93YnJvdyBwb3Agc3VycmVhbGlzbQptZXhpY2FuCnN1YmplY3QgYWN0aW9uOiBob2xkaW5nIHNpZ24KYnJpZ2h0IG1vZGVybiBzdHlsZQpwbGF0ZWQgYXJtb3IKZnV0dXJpc3RpYyBidWlsZGluZ3MKd2hlYXQgZmllbGQKcmlwCmdsYXNzIHdhbGxzCnNocnVicwpyZW5kZXJlZCB3aXRoIHVucmVhbCBlbmdpbmUKaW4gZm9ydG5pdGUKcXVha2UKY29sb3JmdWxsIHBhaW50aW5nCmN1dGUgZGlnaXRhbCBhcnQKc3RhbmRpbmcgaW4gdGhlIG92YWwgb2ZmaWNlCnRyb3BpY2FsaXNtCmRyZWFteSB2aWJlCmt1Ym8gYW5kIHRoZSB0d28gc3RyaW5ncwpwaHlzaWNzCmhvcnJpYmxlCnN1cnJlYWwgcGFpbnRpbmcKZ29ibGlucwpnbG9vbXkgd2VhdGhlcgpzeW1tZXRyaWMgbGlnaHRzIGFuZCBzbW9rZQpzdWJ1cmJhbgpyYWluaW5nIG91dHNpZGUKaGVhdnkgY2xvYWsKaGlzdG9yaWNhbGx5IGFjY3VyYXRlCmh5cGVycmFsaXN0aWMgYXJ0CmxhdHRlIGFydAppbmRpZ28gb2NjdWx0IHBhdHRlcm4KdGhlIG9mZmljZQpiZWtzaW5za2kgYW5kIGRhbiBtdW1mb3JkCmJsb29kYm9ybmUgYm9zcwpzcG90bGlnaHQgYXQgYSA5MCBkZWdyZWUgYW5nbGUKbGVpamkgbWF0c3Vtb3RvCmhvbGRpbmcgdGhlIGVsZGVyIHdhbmQKdGhlIGVsZGVyIHNjcm9sbHMgaWlpOiBtb3Jyb3dpbmQKaGlnaGx5IGRldGFpbGVkIDNkIGZyYWN0YWwKc3VwZXJpb3IgZGV0YWlsCmFuIGFudGhyb3BvbW9ycGhpYyBmb3gKd2VhcmluZyBzaGlueSBicmVhc3RwbGF0ZQpzdHViYmxlIGJlYXJkCmlyaWRpc2NlbnQgYWNjZW50cwpwaW5rIHNraXJ0CmxhcmdlIGxlYXZlcwptdXNldW0gcXVhbGl0eQpwZWFybGl6ZWQKc2lsdmVyIGpld2VscnkKYmVhdXRpZnVsIHBsYW50cwpsZWF0aGVyIHR1bmljCnJvdW5kIHRoaWdocwpjdXRlIG5vc2UKbW9jaGlkdWtpIGtleQp0YXR0b28gb24gdXBwZXIgYXJtCnJlZCBoYWlyIGFuZCBhdHRyYWN0aXZlIGZlYXR1cmVzCmdyZWcgcnV0a293c2tpIGFuZCBrcmVuemN1c2hhcnQKdHJpbmtldHMKYmFkZ2UKYmxhY2sgbWFyYmxlCmFtbW9saXRlCmNhc3Rpbmcgc3BlbGwKaG91cmdsYXNzISBzbGltIGZpZ3VyZQpoeXBlci1kZXRhaWxlZC4gc3R1ZGlvIGxpZ2h0bmluZwp2ZW5kaW5nIG1hY2hpbmUKZWRnZSB0byBlZGdlCjE4MjUtMTgyOQpiYXNrZXRiYWxsCmVsbGVuIHZvbiB1bndlcnRoCmFuaW1hdGVkIHNlcmllcwp3aWRlIHN0cm9rZXMKbWV0ZW9ycwpiZWF1dGlmdWwgZmVtYWxlIGFuZ2VsCmZpc2hlcwpzdHJhbmdlIGJ1aWxkaW5ncwp3ZXQgcGF2ZW1lbnQKcmVsYXgKdWZjCmFtYXRldXIgcGhvdG9ncmFwaHkKNDVtbQpnYXJkZW5pbmcKYmlnZm9vdApvbGl2ZSBza2luIGNvbG9yCm1hZ2ljIHRoZSBnYXRoZXJpbmcgY2FyZApibGFjayBwYW50aGVyCmNyb3cKYmxhY2sgYW5kIHdoaXRlIHNrZXRjaApyYXkgdHJhY2luZyBsaWdodGluZwpzdGVybgpib3JuIHVuZGVyIGEgYmFkIHNpZ24KcHVwaWwKLXcgNzY4CmJyeWFuIGNyYW5zdG9uIGFzIGdvcmRvbiBmcmVlbWFuCm9uIGEgcmFpbnkgZGF5CnZlcnkgaGFpcnkKd2VhcmluZyBtaWxpdGFyeSB1bmlmb3JtCnlvdW5nIHJlZGhlYWQgZ2lybCBpbiBtb3Rpb24KZ2x1ZSBkcm9wcGluZwpraWtpIHBpY2Fzc28gc3R5bGUKc2NpLWZpIGN5YmVybmV0aWMgaW1wbGFudHMgaHEKY2VsZXN0aWFsIGxpZ2h0Cmhpc3RvcmljIHBob3RvCmNoYXJhY3RlciBzcGxhc2ggYXJ0CnNob3Rhcm8gaXNoaW5vbW9yaQplcGljIHN0YW5jZQpjaHJpcyBldmFucwpicmlnaHQgcmVkCmxheWluZyBkb3duCnBzeWNoZWRlbGljIGxpZ2h0aW5nCmZvY3VzIG9uIGNhcmQKY2lybm8gZnJvbSB0b3Vob3UKY29sb3JlZCBsaWdodApnZW5pdXMgY29tcG9zaXRpb24KMjAwMHMKcHJheWVyCnJhaW4gZHJvcHMKaW50cmljYXRlIGRyZXNzCndoaXRlIGFuZCBnb2xkIHJvYmVzCmN5YW4gYW5kIG9yYW5nZSBwYWxldHRlLiB2aXZpZAp3ZWFyaW5nIGEgYmxhY2sgdC1zaGlydApjbGltYXgKc2hpbnkgZmxvb3JzCnJlZmxlY3RpdmUgZ3JvdW5kCihpbmt0b2JlcikKbWluZWNyYWZ0IHN0eWxlCmpheWEgc3UgYmVyZwpibHVlIGFuZCBwdXJwbGUKaGltYWxheWFzCmhyIGdpZ2VyIHN0eWxlCnd3MSB0cmVuY2gKZXh0cmFvcmRpbmFyeSBwaGVub21lbm9uCm9pbCB0byB3YWlzdAp5ZWV6eQphY3JueW0Kc2tldGNoaW5nCmkgcGxheWVkIGEgbWFuIGZyb20gaGlzdG9yeQpoYXBweSBzbWlsZQpncml6emxlZAptaXJhY2xlCmdhbWUgcG9zdGVyCmNhdmV3b21hbgpvZGlsb24gcmVkb24uIGRyZXhsZXIKZHIgc3RyYW5nZQpzdHJlZXQgc3R5bGUKeW91dHViZXIKcmVmbGVjdGlvbnMgb24gdGhlIHJpdmVyCmluIHN0eWxlIG9mIGJlZXBsZQpibGFjayByb3NlIGZyYW1lLiBkJmQKZW1pbmVtCmFsYmVydCB3YXRzb24KZGlydHkgY2xvdGhlcwpncmllZgp0aGljayBwYWludCB2aXNpYmxlCnRyZW5kaW5nIG9uIHlvdXR1YmUKZmxjbCBjb3ZlcgphdmVuZ2VycwphcnRzdHN0aW9uCjRrIGNpbmVtYXRpYwptb29uIGxhbmRpbmcKYWlyIGJ1YmJsZXMKbmVidWxhIHN1bnNldApiZWF1dGlmdWwgYW5pbWUgYXJ0CmNyb2NoZXQKZG9uYXRlbGxvCmV4cXVpc2l0ZSBibGFjayBhY2Nlc3Nvcmllcwpnb2xkZW4gY29yc2V0CmNyaW1zb24gYXR0aXJlCnNoZSBoYXMgYSBnbG93IGNvbWluZyBmcm9tIGhlcgpleWVzIGhhbGYgY2xvc2VkCmtvaSBwb25kCmluIHN0eWxlIG9mIGRhcmsgc291bHMgMwpmbHlpbmcgYmlyZHMgaW4gdGhlIGRpc3RhbmNlCmRyYW1hdGljIGFydApzcGFya2xpbmcgYXRtb3NwaGVyZQpkaWZmZXJlbnQgcG9pbnQgb2YgdmlldwpzdGFyZmluZGVyIHN0eWxlCml0CmZhaW50IHNtaWxlCnVyYmFuIGFydApuaWtvbiA1MG1tIGYvMS44ZwpzZXQgcGhvdG8KbGl6YXJkIGxlZ3MKc3ludGhlc2l6ZXIKaGVybWlvbmUgZ3JhbmdlcgpoYXJyeQp0aGlnaCBmb2N1cwptZWRpdW0gbGVuZ3RoIGhhaXIKaGVhdnkgbWV0YWwgYWxidW0gY292ZXIKaGVsbCBvbiBlYXJ0aAp0b21hc3ogc3RyemFsa293c2tpCnJhdmVuIGFuZ2VsIHdpbmdzCm1hZ2F6aW5lIHBob3RvZ3JhcGh5CmZpZ2h0ZXIgamV0CmFsZm9uc28gbXVjaGEKY2FsaWZvcm5pYSBjb2FzdAp0ZXJyaWZpYwppbWdfOTc1LnJhdwoxNjQ3CmJlYXV0aWZ1bCBsYWJlbHMKdHJpY2tzdGVyCnRoaWNrIHN3aXJsaW5nIHNtb2tlIHRvcm5hZG8Kc2xpY2Ugb2YgbGlmZQpzb2Z0IHRleHR1cmUKc21vdGggM2QgaWxsdXN0cmF0aW9uCm5vdGVib29rCnNlbnNlIG9mIHdvbmRlcgphbGV4IHlhbmVzCmhlYWRzaG90IHBob3RvZ3JhcGh5CnJlbmFpc3NhbmNlIHBhaW50aW5nIHN0eWxlCmppbngKY29uc3BpcmFjeQpqb3JkYW4gcGV0ZXJzb24KcGlyYXRlIGNsb3RoaW5nCm11c2N1bGFyIGFybXMKd2VhcmluZyBhIHNjaG9vbCB1bmlmb3JtCnNwb3J0CmtpbSBwb3NzaWJsZQpraW5nIGtvbmcKZGFyayBrbmlnaHQKYnVzdCB3aXRoIGEgdmVyeSBsb25nIG5lY2sKdW5kZXJ3YXRlciBmYWNlCmZvdXIgZmluZ2VycyBtYXhpbXVtCnNvZnQgYmx1ciBiYWNrZ3JvdW5kCnJlbWJyYW5kdCBsaWdodGluZyBzY2hlbWUKdXNhLXNlcCAyMApkcmVhbS1saWtlIGF0bW9zcGhlcmUKYnViYmxpbmcgZ2V5c2Vycwp3aW5rCnRyYWRpdGlvbmFsIG1ha2V1cAptYWdpY2FsIHNwYXJrbGluZyBsYWtlCnNoaW5lCnRyaS14Cmh5cGVyIHJlYWxpc3RpYyBoZWFkCmJsdWUgYWNjZW50cwpjcm93ZGVkIHN0cmVldHMKMTk0MHMgcHJvcGFnYW5kYSBwb3N0ZXIKc2hvdCBmcm9tIGJlaGluZAphbWF6aW5nbHkgZGV0YWlsZWQKdGhlIGVtcGVyb3IKc3R5bGUgb2Ygd2VzIGFuZGVyc29uCjE5OTYKc3BpZGVyLW1hbgpodWdlIG11c2NsZXMKZmxhdCB0ZXh0dXJlCnd0Zgp0cmVuZGluZyBvbiB1bnJlYWwgZW5naW5lIDUKY2hhcmFjdGVyIGRyYWdvbmJhbGwKbWFwbGUgc3lydXAKcGFuZGEKYXJtb3VyIGFuZCBjcm93bgpzdGVwcyA1MApkb21pbmFudApzY2FseSEhIQoyMHlvCmF2aWF0b3Igc2hhZGVzCnNob3J0IGN1cmx5IGhhaXIKZ2VvbWV0cmljIHBhdHRlcm5zCnBvcnRyYWl0IG9mIGpvZSBiaWRlbgpwb3J0cmFpdCBvZiBrYW55ZSB3ZXN0CndlYXJpbmcgZ2lsZGVkIHJlZCByb2JlcwpkYXJrIHNjaS1mYW50YXN5Cm9yYW5nZSBmbG93aW5nIGhhaXIKdHVyYmFuIG9mIGZsb3dlcnMKcm9jb2NvIGFuZCBiYXJvcXVlIHN0eWxlcwp0dXJiYW4gb2YgdmlicmFudCBmbG93ZXJzCm1ldGFiYXJvbgpwcmV0dHkgZmVtYWxlIGNsZXJpYwpmb3J3YXJkIGFuZ2xlCnF1ZWVuIG9mIGhlYXJ0cwp3aXRoIGEgYmVhcmQgYW5kIGEgYmxhY2sgamFja2V0CnJlYWN0aW9uIGRpZmZ1c2lvbgp5ZWxsb3cgc2t5CnRoZWF0cmljYWwgbGlnaHRpbmcKaW50cmljYXRlIGFjY3VyYXRlIGRldGFpbHMKaW5zaWRlIGEgY2F2ZQpsaXphcmRzCmhkdApzdGFyZHVzdAptYXJ0aW5pw6hyZQpzdGVwaGFuCnNvbG8gcG9ydHJhaXQKamFnZ2VkIHJvY2tzCmNyYXRlcgphc3Ryb2xvZ3kKZWFybHkgbWVkaWV2YWwKc3BhY2VzaGlwIGludGVyaW9yCnNwYWdoZXR0aSBtb25zdGVyCnNwYXJ0YW4gd2FycmlvcgpzcXVpZHdhcmQKdHJlbmRpbmcgb24gci9zdHJlZXR3ZWFyCnBvcnRyYWl0IG9mIHNvbGRpZXIgZ2lybAp0d28gcGllY2Ugd29ya291dCBjbG90aGVzCnRyYWluaW5nIGJyYQpsdXRzCmdpZ2FudGljIHBpbGxhcnMKbGFuc2NhcGUKYW5nZWxpYyBsaWdodApqcnBnIGNoYXJhY3RlcgpmZXN0aXZhbAplbnZpcm9ubWVudGFsIGRlc2lnbgpjcnlzdGFsIGJhbGwKZ2VtaW5pCnBpbmsgYW5kIGdvbGQKaW5zaWRlIGFuIGR5c3RvcGlhbgp0aGUganVuZ2xlIGF0IHRoZSBiYWNrZ3JvdW5kCmVwaWMgOGsKemVpc3MgNzVtbQp3aXRoIGZ1bGwgZGVzY3JpcHRpb25zCmNvbG9yZnVsIHBhaW50aW5nCmhvbG9ncmFtIGNvbG9ycwp2b2xvZHlteXIgemVsZW5za3kgYXQgd2FyCjRrIGFydHdvcmsKcmVkIGJyb3duIGFuZCB3aGl0ZSBjb2xvciBzY2hlbWUKY2hhcmNvYWwgcGFpbnRpbmcKZnJvbnQgYW5kIHNpZGUgdmlldwp0cmVuZGluZyBvbiBkZXZpYW5hcnQKaGlnaCBmYW50YXN5IGFydApmYWNlIHRhdHRvbwpjb2xkIGJsdWUgbGlnaHQKc2lnbWEgMiA0IG1tIGYgLyA4CnV0b3BpYSBhcnQKaW1wYXN0byBvaWwgcGFpbnRpbmcKY2xlYXIgYmFja2dyb3VuZAppbiBtYWQgbWF4IHN0eWxlCm1lY2hhYm90CmJsdWUgYm9keSBwYWludApkYXJrIGNvbWVkeQpiYWxkdXIncyBnYXRlCm1vdmluZyBoZWFkcyBsaWdodCBiZWFtcwpyZWNsYWltZWQgbHVtYmVyCjcgMCBtbSBsZW5zCjIgMCB5bwpmbG93aW5nIHJvYmUKcm91Z2ggdGV4dHVyZQpjaGFyYWN0ZXIgaXMgaW4gaGVyIG5hdHVyYWwgcG9zZQpkYXduIGxpZ2h0Cmdsb3dpbmcgcGxhbnRzCmxhbmRpbmcgZ2Vhcgp3ZWlnaHRsZXNzCnRvcCBsaXQKZmFpcnl0YWxlIGlsbHVzdHJhdGlvbgpjb2xvdXJmdWwgc2t5CmlzbGFtaWMgYXJjaGl0ZWN0dXJlCmhlYWQgYW5kIHVwcGVyIGJvZHkgb25seQpzcGVjdGFjbGVzCmRldGFpbGVkIGNsb3NlIHVwIHBvcnRyYWl0CmRvcGUKY2F0Y2hsaWdodCBpbiB0aGUgZXllcwpmdXR1cmlzdGljIHJvYm90cwplbXByZXNzCmFjaWR3YXZlCmZyZW5jaCBwcm92aW5jaWFsIGZ1cm5pdHVyZQpmYW5jeSBkcmFwZXJ5IG9uIGZ1cm5pdHVyZQpzZXJlbmUgZW1vdGlvbgphZW5hbHVjawpsaWdodGx5IGRyZXNzZWQKZGFyayByb2Nrcwpvbmx5IHNub3cgaW4gdGhlIGJhY2tncm91bmQKYWxwaG9uc2UgbXVjaGEgYW5kIHJvc3NkcmF3cwpzdW1tZXIgZmllbGQKYXV0dW1uIGZpZWxkCnZlcnkgdmVyeSBsb3cgcXVhbGl0eSBwaWN0dXJlCmhhbm5haCB5YXRhCnJpdmVycyBhbmQgbGFrZXMKdHJpIC0geApkeWUgLSB0cmFuc2Zlcgptb3J0IGRydWNrZXIKbmV0dGllIHdha2VmaWVsZAptYXJjIGFkYW11cwpxdWFudHVtIGJyZWFrCmphbWVzIHR1cnJlbApwb3N0IC0gaW1wcmVzc2lvbmlzbQpteXN0aWMgY29sb3JzCjIgMCAwIDIKb2xkIGJ1aWxkaW5ncwpwaW5ob2xlIHBob3RvZ3JhcGh5CmJ1cm5pbmcgZG93bgpndW5tYSBwcmVmZWN0dXJlCmxhc3psbwphcm1zIGFuZCBsZWdzCmhhbnMgYmVsbG1lciBhbmQgd2xvcApyZXRybyBwb3N0ZXIKamFjcXVlcyAtIGxvdWlzIGRhdmlkCm1vb2R5IHN1bnNldCBpbiBiYWNrZ3JvdW5kCnN0b29kIG91dHNpZGUgYSB3b29kZW4gY2FiaW4KbWl4ZWQgcmFjZQpzdG9vZCBpbiBhIGNlbGwKYWJzdHJhY3QgcmVhbGlzbQpnb2xkZW4gY2hhaW5zCmRhcmsgY2F2ZQo0IGsgcmVzb2x1dGlvbiBoIDcgNiA4CmphZGUKc2hhcnAgYW5kIGZvY3VzCm92ZXIgcHJvcG9ydGlvbgozIGQgOCBrIG9jdGFuZSByZW5kZXJlZAprcnlzdGVuIHJpdHRlcgpzcGVlZCBsaW5lcwpkZXRhaWxlZCBza3kKc3BhY2Utc3RhdGlvbiB2dXV0dW4gcGFsYWEKZHJhbWF0aWMgbmVidWxhIHNreQpleHRyZW1lbHkgZGV0YWlsZWQhISEKMSA1IDAgMCBzCmJsb29kIG9uIGhpcyBmYWNlCnZpdmlkIGV5ZXMKd2l0aCBibHVlIGV5ZXMKcmVhbGlzdGljIDMgZCByZW5kZXIKY2VyYW1pY3MKbWFjaGluZSBub2lyIGdyaW1jb3JlCmxhcmdlIHBvcnRyYWl0Cmx5aW5nIG9uIGFuIGVtcHR5CmluZHVzdHJpYWwgYXJjaGl0ZWN0dXJlCmNvbXB1dGVyIHNldHVwCmJsb2F0ZWQKcHN5Y2hlZGVsaWMgbXVzaHJvb21zIGRyZWFtCiMgZGUgOSA1IGYgMApjaW5lbWF0aWMgY2xvc2V1cCEhCmYgMi4gNApzd2lybHkgY2xvdWRzCmhlYXZ5IHRyYWZmaWMKMSA5IDIgMCdzCm5vIGhlYWRnZWFyCmNvbXBsZXggbWFzc2l2ZSBkZXRhaWwKY2xvc2UgLSB1cCBzdHVkaW8gcGhvdG8KcGF3cyBvbiB3aGVlbApqYW1pZSBoZXdsZXR0IGFydAppbnRyaWNhdGUgY2xhc3NpYyBhcnQKZ3JlYXQgd29ya3Mgb2YgdGhlIG1hc3RlcnMKaHVtb25nb3VzIHZpZXcKb2xkIG15c3RpYyBydWlucwpjb21wbGV4aXR5IGZyb20gc2ltcGxpY2l0eQpuZXcgYWR2ZW50dXJlCnB1ZGRsZSBvZiB3YXRlcgpzcGFjZSBtb2xlY3VsZXMKZGlyZWN0IHN1biBsaWdodApjbG9zZSB1cCBwb3RyYWl0CnRhaWwgbGlnaHRzCnBhcmtpbmcgaW4gdGhlIHN0cmVldApqaW5nbmEgemhhbmcKb24gdGhlIHN1cmZhY2Ugb2YgdGhlIG9jZWFuCmNvbGxhcHNpbmcgc3RhcnMKbWFnaWNwdW5rCnJlYWwgZmFjZQpyZWZsZWN0aXZlIGxlbnMKbGlrZSBtYWdpYyB0aGUgZ2F0aGVyaW5nCmh1Z2UgaW5jcmVkaWJseSBpbW1lbnNlIHRyZWVzCmJsYWNrLXdhdGVyLWJhY2tncm91bmQKOCBrIGludHJpY2F0ZSBkZXRhaWwKc2FtdXJhaSBzdHlsZQpvYnNpZGlhbiBza2luCndlYgpjbGlwIHN0YWRpbwp2ZWlucyBtZXJnZWQgZmVldCBoZWFkCnN0b3ZlCmRhcmtyb29tCndhdGVyIHNwbGFzaApwcm9wZXIgaHVtYW4gbWFsZSBwcm9wb3J0aW9ucwprZXppZSBkZW1lc3NhbmNlCnNjaWVudGlmaWMgcGhvdG8KZ29sZGVuIHBpbGxhcnMKYXJ0IC0gZGVjbwpoYWxmIGN5Ym9yZwp5ZWxsb3cgbGlnaHQKbmlnaHQgY29sb3JzCmRhcmtlc3QgZHVuZ2Vvbgp2b2x1bWV0cmljIHN0dWRpbyBsaWdodGluZwptZWNoYW5pY2FsIGRldGFpbHMKa3J6eXN6dG9mIHBvcmNob3dza2kganIKam95IGFuZwpndXJuZXkgd2l0aCBhbWJpZW50IGxpZ2h0aW5nCm9uIGFtaW5vCmxhdGUgYWZ0ZXJub29uIGxpZ2h0CmVlcmllIHNoaW1tZXJpbmcgc3Vycm91bmRpbmdzCmphZGUgY29sb3JlZCBleWVzCmtsYXVzIG1vdmllIHR3aW5zIHBvc3RlcgppbnRlcmlvciBkZWNvcmF0aW9uCnBhcmFub2lkIHZpYmUKNDBtbSB0YXBlCnRlY2huaWNvbG91ciBmaWxtCnN0eWxlIG9mIHdsb3AKZmF0aGVybHkKaGlnaGx5IG9ybmFtZW50YWwKcGFwZXIgbW9kZWxpbmcgYXJ0CnNjaSAtIGZpIHBvc3Rlcgpjb3JyZWN0ZWQgZmFjZXMKYXN0cmFsIHBsYW5lCmludHJpY2F0ZSBvcm5hbWVudGVkIHRpYXJhCmFuaW1pc20KOCBrIHRpbWUgLSBsYXBzZSBmdW5jdGlvbnMKaGlnaCBxdWFsaXR5IDggawp1bHRyYSBkZXRhaWwuIGRpZ2l0YWwgcGFpbnRpbmcKaG9uZXkgZHJpcHBpbmcKdmVyeSB2ZXJ5IGNvaGVyZW50IHBhaW50aW5nCmdyYWR1YXRpb24gcGhvdG8Kc2hvcnQgaW4gc3RhdHVyZQpjYW5kbGUgZHJpcHBpbmcgd2F4CmRyYWdvbiEgbWFuCmRyYWdvbiEgZHJhZ29uIQpkdWxsIGdyZXkgZXhwcmVzc2lvbmlzbQp0cmFuZGluZyBvbiBweGl2CmZ1dHVyZSBmYXNoaW9uCmhlcm9pYyBhY3Rpb24gcG9zZQpsZWF0aGVyIGphY2tldHMKWyB3ZXN0ZXJuIGZpbG0gXQpnbG93aW5nIGdyZWVuCm1vdGhlcgpyYXlvbm5hbnQgc3R5bGUKc3R1bm5pbmdseQpmbG9hdGluZyBpbiB0aGUgY29zbW9zIG5lYnVsYQpicmlnaHQgc3Vuc2hpbmUKdHJlbWVsbGEgLSBmdWNpZm9ybWlzCnN1cnJlYWxpc20gcG9ydHJhaXQKc3RhciBtYXAKcmVhcGVyIG1pbmlzCnBpbnRlcmVzdCBoYWlyIHBpY3R1cmUKY2xvc2V1cCB2aWV3CmluayBhbmQgY29sb3VyIG9uIHNpbGsKZmFudGFzeSBzY2kgLSBmaQpzdHlsaXplZCBhbmltZQptYXJtb3NldApwcmVjaXNlISB2ZWN0b3IgdHJhY2UKNGsuIHByb2Zlc3Npb24gcGhvdG9ncmFwaHkKdmVyeSBsYXJnZSBleWVzLiBzeW1tZXRyeQplcGljIHZvbHVtZXRyaWMgbGlnaHRpbmcKcG9uZHMgb2Ygd2F0ZXIKaG92ZXJpbmcgaW4gdGhlIGFpcgpjcml0aWNhbCBtb21lbnQKcGV0Cmdsb3NzeSBmcm9tIHJhaW4KYmFja2dyb3VuZCBleHBsb3Npb24Kb2lsIHBhaW50aW5nIGluIGEgbW9kZXJuIHN0eWxlCnRob21hcyBraW5rYWlkZQpuZWdhdGl2ZSBzcGFjZSBpcyBtYW5kYXRvcnkKb2xkIHdlc3QKZGlzY28gZWx5c2l1bSBzdHlsZSEhIQpqYXBhbmVzZSBhcnQgb24gYmVoYW5jZQppbmtzCnNvbWUgbG9uZwp0cmFuc3BhcmVuY2llcwpzcXVpcnJlbAp3b3VuZHMKc2Nvcm4gZ2FtZQp1bmZpbmlzaGVkIGNhbnZhcwplbWJyYWNlCmJsYWNrIGRldGFpbHMKeWFzdW5hcmkgaWtlbmFnYQpmaWJvbmFjY2kgY29tcG9zaXRpb24KY2FwaXRhbAp3YXRjaGVyCmxhdXJhIHNhdmEKcGhvdG8gZnJvbSB0aGUgYmFjawpodWdlIGdsaXN0ZW5pbmcgbXVzY2xlcwplYm9ueSBza2luCmRpcmVjdCBmbGFzaApmb3JlaGVhZCBvbmx5CmxlYWtzCmZyYWdpbGUgZ2lybAptZWdhIGhpZ2ggd2hpdGUgbW91bnRhaW4KcmV0cm9mdXR1cmlzbSBzY2kgLSBmaSBvbGQgbW92aWUKc3ltbWV0cmljYWwgZnJvbnQKMyAtIGQgNCBrCnByaXN0aW5lIGdsb2JhbCBpbGx1bWluYXRpb24KMiAwIDEgOSBhbmltZSBzY3JlZW5zaG90CmxvdyBwb2x5IDMgZCByZW5kZXIKY2xlYXIgZXllcy4gMiA0IG1tCmJhY2tncm91bmQgZm9ydHJlc3MKMi4gNSBkCnRyaSAtIHggcGFuCnNtb2tpbmcgYSBiaWcgY2lnYXIKYW4gYW50aHJvcG9tb3JwaGljIHJhdAphbiBlbmRsZXNzIHdhdGVyZmFsbApmdWxsIG1ldGFsIGFsY2hlbWlzdApiaWxsIG11cnJheQp1bnJlYWwgZW5naW5lcwppbnRpbWlkYXRpbmcgZ2xhcmUKcGhvdG9yZWFsaXN0aWMgbW92aWUgc3RpbGwKZ2xhc3N3YXJlCmZ1Y2hzaWEgYW5kIGJsdWUKc3BhcnNlIGZsb2F0aW5nIHBhcnRpY2xlcwpncmltIGNvbG9yIHBhbGV0dGUKcmVnYWwgYWVzdGhldGljCnJheXRyYWN0aW5nCmludHJpY2F0ZSBicm9uemUgYXJtb3VyCnN0cm9uZ21hbgp0ZW9uYW5hY2F0bCBnbHlwaAp0b3JzbyBhbmQgaGVhZAptYWdpY2FsIGVsdmVuIGdlb21ldHJ5CnJ1dGtvc3draQp3ZWFyaW5nIGN1bHRpc3QgcmVkIHJvYmUKcmFkaW8gZ29nZ2xlcwpiaWcgY3Jvd2QKYmlvbHVtaW5lc2NlbnQgb3JicwppbGx1c3RyYXRpb24gcG9rZW1vbgpsaXR0ZXIKZnVsbCAtIGNvbG9yCndhcmVob3VzZQpza2ltcHkgc2hvcnRzCmR1c3R5IHZvbHVtZXRyaWMgbGlnaHQKdGhlIGJpcmQgaXMgd2VhcmluZyBhIGJvd3RpZQphbmltZSBwb3N0ZXIgZmlsbSBzdGlsbCBwb3J0cmFpdApwb3J0cmFpdCBvZiBnaXJsCnBlbHQgY29hdHMKcmVmbGVjdGl2ZSBzdW5nbGFzc2VzCm9uZSBtb3V0aApiZWF1dGlmdWwgc2hhZGluZwp0b25hbCBjb2xvciBzY2hlbWUKdW5wcm9jZXNzZWQgY29sb3JzCiMgbm9maWx0ZXIKc2hvcnRzd29yZApzbW9vdGggc3VyZmFjZQp0cmVhc3VyZSBhcnRpZmFjdApuZW9uIGxpZ2h0IGFuZCBmYW50YXN5Cjsgd2lkZSBzaG90CnN1cnJlYWwgd29vZGJsb2NrIHByaW50CmJvdGFuaWNhbCBmcmFjdGFsIHN0cnVjdHVyZXMKZWd5cHRpYW4gc3VtZXJpYW4gZmVhdHVyZXMKd2F0ZXIgZHJvcGxldAptYXJ2ZWxvdXMgZGVzaWduZXIKaW4gY2l0eSBzdHJlZXQKbGlxdWlkIHNtb2tlCnJlYWxpc3RpYy4gZGV0YWlsZWQgZmVhdGhlcnMKcmV0cm8gc3BhY2UgaGVsbWV0Cm1hcmlqdWFuYSBidWRzCmJydXRhbGlzdCBkYXJrIGZhbnRhc3kKZ2FtZSBvZiB0aHJvbmUgYXJ0CnNwcml0ZSAyIGQKY2xheXRvbiBjcmFpbgooIG1lY2hhbmljYWwgKQptYW5nYSBzdHlsZSBvbmx5CmdyYWRpZW50IG9yYW5nZQpkZXRhaWxlZCBkZXNpZ25zCmhpZ2hseSBkZXRhaWxlZC4gcG9zdCBwcm9jZXNzaW5nCnNoYXJwcyBmb2N1cwp0aW0gcmVlcwpwYXVsIHBlcGVyYQpzb2Z0IGZsYXdsZXNzIHBhbGUgc2tpbgptZWxhbmNob2x5IHBhc3RlbCBhcnQKaW5zcGlyZWQgaW4gZG9uYXRvIGdpYW5jb2xhCnZpbnRhZ2UgZmFzaGlvbgpsaWdodCByYXlzIGFuZCBzaGFkb3dzCnNreSBuaWdodApwbGVhdGVkIHNraXJ0CmJlYXV0aWZ1bCBwb3J0cmFpdCBvZiBhIHdvbWFuCmxlYXRoZXIgdG9wCmZpbmFsIC0gZmFudGFzeQpoZXJvbiBwcmVzdG9uCjgwcyBhbGllbnMgdGVjaApoZWF2eSBleGFnZ2VyYXRlZCBwcm9wb3J0aW9ucwp3ZWFyaW5nIGEgY3JvcHBlZCB0b3AKdmVyeSB3aWRlIHZpZXcKc2hvdWxkZXIgcGFkcwpoZWFsdGgKeXVraW8gLSBlCndoaXRlIGNsYXkKdmlicmFudCBhcnQKc29ueSA1IDAgbW0gbGVucwp2ZXJ5IHNoYXJwISEhCmVhcnJpbmcKam9qbydzIGJpenphcmUgYWR2ZW50dXJlISEhIQpqb2pvJ3MgYml6emFyZSBhZHZlbnR1cmUKZ2FsYWN0aWMgZGFyayBjb2xvcnMKbGlnaHRuaW5nISEKYmx1ZSBoYWlycwpzZWVuIGZyb20gZWFydGgKYmxhY2sgbWV0YWwgYmFuZCBsb2dvCmVwaWMgZGlnaXRhbCBhcnQgaWxsdXN0cmF0aW9uCmFybW9yIGdpcmwKdmVjdG9ycwpzdGlwcGxpbmcgYXJ0CmdyZWVuIG9jZWFuCnNhemFiaQp3ZWFyaW5nIGFuIG92ZXJzaXplZCBob29kaWUKZGV0YWlsZWQgd2lkZSBzaG90Cmdyb3VuZCBkZXRhaWxlZAphcnQgb2Ygd2xvcApkZXRhaWxlZCBjaGFyYWN0ZXJzCmxpIHppeGluCmJydW5ldHRlIHdvbWFuCmxlZwp0b2lsZXQgcGFwZXIKbmVidWxhIHNpemUKYmF0dGxlIHJhbQpoaWdoIHF1YWxpdHkgbWFzdGVycGllY2UgcGFpbnRlZAp0ZWFycyBmcm9tIHRoZSBleWVzCmNvbG9yIHNwbG90Y2hlcwpjaGlsZHJlbiBkcmF3aW5nCnRpcmUKcmljaGx5IGRldGFpbGVkCmdpZ2dsaW5nCnJvYmVydG8gYmVybmFyZGkKY2F0IHNlYWhvcnNlIHNoYXBlc2hpZnRlcgo5MCdzIGFuaW1lCm1hY3JvIGhlYWQgc2hvdApiYWNrZ3JvdW5kIGZ1bGwgb2Ygc3Rvcm15IGNsb3VkcwpvcmdhbmlzbQprZW5rZXQKcGFsZSBibHVlIHNraW4Kb21uaW91cyBpbnRyaWNhdGUKb3JhbmdlIGhhbG8gYXJvdW5kIGhlciBoZWFkCjIgMCAyIDQKdW5ldmVuIGZvZwp3aW5kc3Rvcm0Kd2ludGVyIHN0b3JtCmRyYWdvbiBtYXdzaG90IGFydApzY2lmaSByb2JvdCByZXBhaXIgd29ya3Nob3AKb2ZmIGNhbWVyYSBmbGFzaApjaGVja2VyYm9hcmQgaG9yaXpvbgp0cmFuc3BhcmVudCBzbW9rZSBmcm9tIGhlbGwKcHVycGxlIGxlYXRoZXIgamFja2V0CnZpbnRhZ2Ugb2xkIHBob3RvCmZvcnphCnNvbWJlciBleHByZXNzaW9uCmNvZmZlZSBzaG9wCmNvYXRlZCBwbGVhdHMKY29sb3JmdWwgY2hyb21hdGljIGFiYmVyYXRpb24KcGluayBzaGFkb3dzCmJsYWNrIG91dGxpbmUKb2YgdGhlIGNhdCBpbiB0aGUgaGF0CmRvbiBsZW56ZXIKaGlnaGx5IGRldGFpbGVkIGRhcmsgYXJ0CnVsdHJhIGRldGFpbGVkIHBlbmNpbCBkcmF3aW5nCm92ZXJncm93biBwbGFjZQppbmZvZ3JhcGhpYyB3aXRoIGlsbHVzdHJhdGlvbnMKc3Vuc2hpbmUgbGlnaHQKbWFzYW5vcmkgd2FydWdhaQpzbW9vdGggY29sb3IKc21vb3RoIHJvdW5kIHNoYXBlcwpuZW8tZXhwcmVzc2lvbmlzdGljCmhvcnJvciBtb25zdGVyIG1hc3RlcnBpZWNlCmhvbmV5IGRyaXBwaW5nIGZyb20gY2VpbGluZwpkYXJrIG9jZWFuCmNvcnJlY3QgYW5hdG9teQpkaXN0YW50IGdsb3dpbmcgZmlndXJlcwpjb2F0IHBsZWF0cwpjdXRlIGh1Z2UgcG9ja2V0cyBoYXJkd2FyZQptaW5kIC0gYmxvd2luZwpha2l5dWtpIHNoaW5ib3UKZGV0YWlsZWQgbWFwCmtvZGFrIHBvcnRyYSAxIDYgMApmYWNlIG9uIGhlYWQgc2hvdApza2luIHRleHR1cmUgZGV0YWlscwpkaGFtcGhpcgpjb2xvciBkaXNwbGFjZW1lbnQKbW9uc3RlciBodW50ZXIgdGhlIG1vdmllCmdyYWlueSB0ZXh0dXJpemVkIGR1c3R5CnNhdHVyYXRlZCBjb2xvcml6ZWQKbm90aWNlcwp3aGl0ZSBzbW9rZSBhdG1vc3BoZXJlCmRlbW9uaWMgYXRtb3NwaGVyZQpmYXN0IHBhY2VkIGxpbmVzCnRoaW4gc3RyYWlnaHQgcHVycGxlIGxpbmVzCmRhcmsgbW9ub2Nocm9tZSBjb2xvciBwYWxhdGUKZW50cmFuY2UgdG8gZXRoZXJlYWwgcmVhbG0KZnVsbGJvZHkhISBkeW5hbWljIGFjdGlvbiBwb3NlCmdyZWcgcnV0a293a3NpCmZvY3VzZWQgc3RhcmUKcmF3IHBvcmsKYmF0dGVyeQp3YXh5IGNhbmRsZXMKd29vZCBmdXJuaXNoaW5ncwp0aGUgZXllcyBvZiBzaGFyYmF0IGd1bGEKc3RlcHBpbmcgb24gdG93ZXJzCndhbGtpbmcgb24gdG9wIG9mIGEgdGlueSBjaXR5CnNob3QgZnJvbSA1IDAgZmVldCBkaXN0YW5jZQphbmNlc3RvcnMKd2hpdGUgbWFyYmxlIGJ1aWxkaW5ncwpmb29kIGZvY3VzCmRhdmlkIHBhbGxhZGluaQpiYW5kIG1lcmNoYW5kaXNlCmZlbWFsZSBmdXJyeSBtaW5pIGN1dGUgc3R5bGUKbW9kZXJuIHNwYWNlIHN1aXQKdGVjaG5pY2FsIHN1aXQKZGlzbmV5IHpvb3RvcGlhCmh5cGVycmVhbGlzdGljIGxhbmRzY2FwZQpiYXR0ZXJpZXMgbm90IGluY2x1ZGVkCmZvcmVzdCBpbiB0aGUgbW9ybmluZyBsaWdodApiaWcgbmVidWxhIGFzIGNsb3Zlcgp3aGl0ZSBwb3dkZXIgbWFrZXVwCmZyZXNoIHJhaW5ib3cgYm9keXBhaW50aW5nCnNtb290aCBhbmQgc2hhcnAKdGllcG9sbwpvcmlnaW4gMTAwaQpoeXBlciByZWFsaXN0aWMgcmVuZGVyaW5nCmxvbmcgd2F2eSBvcmFuZ2UgaGFpcgpzdHJhZmluZyBhdHRhY2sgcGxhbmUKZ2xvc3N5IG9sZCBhZHZlcnRpc2luZyBwb3N0ZXIKdGhpcmQgZXllIGluIG1pZGRsZSBvZiBmb3JlaGVhZAp0b3RhbGx5IHdoYWNrCnRvbWUKZmFkZWV2ISA4IGsKY2F2ZSB0b3duCmNsaWZmc2lkZSB0b3duCmhhdmFsIGYgNwpoaWdoIGFlcmlhbCBzaG90CmludHJpY2F0ZSBhbGllbiB0ZWNobm9sb2d5CmFnZmEgYWt1cml0Cm5ldXJvbnMgYW5kIHN5bmFwc2VzCnByaW50ZWQgY2lyY3VpdCBib2FyZApoeWJyaWQgb2YgYSBjYXQgYW5kIGEgY2hpY2tlbgpyb2JlcnRvIGZlcnJpIGFuZCBydWFuIGppYQp3aGVhdCBmaWVsZCBiZWhpbmQgdGhlIGhvdXNlCnBlYXJsIHNpbHZlcnBsYXRlCmxvdWlzaWFuYSBzd2FtcHMKZHluYW1pYyB2aWV3CnNoYXBlZCBwaWN0dXJlCmluIHRoZSBvbGQgd2VzdApnbG93aW5nIGF0YXJpIHNpZ24Kd2hpdGUgY29uY3JldGUgZmxvb3IKMyAvIDQgcGhvdG9ncmFwaGljIGNsb3NlCmtyZXV6YmVyZwp3b21hbiB3aXRoIGhhdApsb25nYm93IGFycm93CnNoYXJwIG91dGxpbmVzCnNvdmlldCBwYWludGluZwp2ZXJ5IGxvbmcgYmx1ZSBoYWlyCnN0cmFpZ2h0IGV5ZWJyb3dzCnZpY3RvcmlhbiBnb2dnbGVzCmdvbGRlbiBmdWxsIGJvZHkgYXJtb3IKYnJlYXRodGFraW5nIGFydApjaGFvdGljIHRlZW5hZ2UgYmVkcm9vbQpiaXNtdXRoIGN1cHMKYmFja2dyb3VuZCBmbGFtZXMKbWVnYW4gZm94IHdpdGNoIHF1ZWVuCmxvdHMgb2YgcGljdHVyZXMKcmVwdGlsCmRldGFpbGVkIGdsYWQgZmFjZQpwcm9mZXNzaW9uYWwgZnJ1aXQgcGhvdG9ncmFwaHkKcmVhbGlzdGljIHBhaW50IGpvYgpyb2FkcyBhbW9uZyBmaWVsZHMKcmVuYWlzc2FuY2UhISEgcGFpbnRpbmchISEKOCAwIC0gcyBzdHlsZSBwb3N0ZXIKZ2lnYW50aWMgc2l6ZQpiZWF1dGlmdWxsIGxvdmVseSBleWVzCnBvcnRyYWl0IG9mIHRheWxvciBzd2lmdAphdXR1bW4gbGVhdmVzIGZhbGxpbmcKcGVyc29uYWwgcm9vbSBiYWNrZ3JvdW5kCnBvcnRyYWl0IG9mIGRlcHJlc3NlZCB0ZWVuCnN0YXRobW9yZSAyIDAgMApwb3J0cmFpdCBvZiBndXRzIGZyb20gYmVyc2Vyawp3ZWFyaW5nIGEgZGFyayBoZWF2eSBwbGF0ZSBhcm1vcgptaWRzb21tYXIgLSB0CnRyYW5zbHVjZW50IHNpbGt5IGRyZXNzCm1wYwptYXJibGUgYW5kIGhpbnQgZ29sZAptYXJpZ29sZCBjZWxlc3RpYWwgdmliZQpjZW50ZXIgc3RyYWlnaHQgY29tcG9zaXRpb24KbXVzZXVtIGFyY2hpdmFsIHBob3RvCndoaXRlIGtpdGNoZW4gdGFibGUKcGFydHlsaWdodHMKcmltdXJ1IHRlbXBlc3QKY2VsbCBiYXJzCnNhaW50cyByb3cKbWF5YSBhbGkgd2luZCBzb3JjZXJlcgp2YXRpY2FuIG1hcCByb29tCnBva2Vtb24gaW5zcGlyZWQKdGFpIGNvc3R1bWUKc29uaWMgdGhlIGhlZGdlaG9nIGluIGEgc3VycmVhbApzaW1vbiBiaXNsZXkgYW5kIGFscGhvbnNlIG11Y2hhCnlvdW5nIGFuaW1lIGdpcmwKc3VwZXIgc2hhcnAgZGV0YWlscwo4ayBoZHIgaHlwZXJyZWFsaXNtCmZ1dHVyaXN0aWMgdG93ZXIKZHJhbWF0aWMgcG9zZXMKdmlrdG9yIG9yYmFuIGluIGEgZm9yZXN0CnJldHJvIHN0eWxlIOKAnQpib3ZpbmUKdmFyaW91cyBzdWJqZWN0cwpjb25jZXB0IGFydOKAnQp1bnJlYWwgZW5naW5l4oCdCnNtb2tlIGFydApyZWxpZ2lvdXMgaW1hZ2VyeQp3aGl0ZSBkZXRhaWxlZCBleWVzCmJsdWUgc2NoZW1lCndwb2wgYW5kIHNhcmFzdGkKMSA4IDggMCBzCm5ldyBtZXhpY28gZGVzZXJ0CnNoZSBoYXMgcGVyZmVjdCB3aGl0ZSB0ZWV0aHMKZGFyayBzdHVkaW8gbGlnaHRpbmcKa293bG9vbgpodWFuZyB5dXhpbmcgYW5kIGF5YSB0YWthbm8KbWFueSBjcnlvZ2VuaWMgcG9kcwpmaWxtZWQgaW4gNzBtbQpmdWxsIGFybW9yCnRyZW5kaW5nIHRvcCBhcnQKZGVtZW50ZWQKaGlnaCBib2R5IGRldGFpbAppbiB0aGUgY2xvdWRzCmdsb3NzeSB3aGl0ZSBtZXRhbAphcmFiaWFuCnNvbWUgc3VuIGxpZ2h0IHJheQpjZWxscwooZ29sZGVuIGhvdXIpCm5pZ2h0LXRpbWUKZGVzYXR1cmF0ZWQgY29sb3IgdGhlbWUKbGFyZ2UgYXJyYXlzCmRhcmsgc2NpZW5jZSBmaWN0aW9uCmFybW9yIGVsZW1lbnRzCmZhY2lhbApzbW9vdGggcGFuZWxsaW5nCmRjcyB3b3JsZCBzdHlsZQptdXNpY2FsIG5vdGVzCm5lb24gZ3JlZW4KZmFjZSBuZWNrIHNob3VsZGVycwpjdXBoZWFkCm5vcm1hbiByb2Nrd2VsbCBwYWludGluZwpvaWwgcGFzdGVsCmNyYXNoaW5nIHdhdmVzIGFuZCBzZWEgZm9hbQpncmlmZml0aApicmlnaHQgZGF5bGlnaHQKMSA5IDkgNQpsaWdodCBicm93biBmdXIKaW4gYSBzdHlsZSBibGVuZGluZyDDpm9uIGZsdXgKZnVsbCBwbGF0ZQptdXNocm9vbSBraW5nZG9tCmRyYW1hdGljIG1vdW50YWlucyBiZWhpbmQKZ3JhZml0dGkKc21va2UgZ3JlbmFkZXMKc3RyZWV0bGlnaHQgYXQgbmlnaHQKZGVhdGhidXJnZXIKbWl1cmEKMiAwIG1tIGxlbnMKMiAwIDAgNiB5b3V0dWJlIHZpZGVvCm1hc2NhcmEKemF3YWR6a2kKZGV2aWxzCmJsYWNrIHdoaXRlCjIwMDUKY2F0YWxvZ3VlIHJhaXNvbm5lCmJyaXR0bmV5IGxlZQpwaW5rIGFuZCBibHVlCmZ1dHVyaXN0aWMgY2xvdGhpbmcgYW5kIGhlbG1ldApvbnl4CnVyYmFuIGJhY2tncm91bmQKYmVhdXRpZnVsIHNtaWxlCmRhcmsgYW5kIG11dGVkIGNvbG9ycwpzaG90IG9uIDMgNSBtbQpwZWFjb2NrCnNjYWxlCjMgZCBoZWFkIG9mIGdyZWVuIGhlZGdlaG9nCmNvbG9yZnVsIHN1bnNldAozIGQgbWF5YSByZW5kZXIKdGlsZWQKbWVkaXVtIHJhbmdlCndhdmUgZnVuY3Rpb24KYWJzdHJhY3Qgc3ltYm9saXNtCmNhYmluIGluIHRoZSB3b29kcwpnb29kIGFuZCBldmlsCnNjcm9sbHdvcmsKb2N0YW5lIDQgayByZW5kZXIKc2N5dGhlCjhrIHNjYW4KY2xhc3Nyb29tCnBvcnRyYWl0cwpuaWtvbiBkODUwCmRlYWRseQpicmlnaHQgcHN5Y2hlZGVsaWMgY29sb3JzCmNoYWQKY2VudGVyIG9mIHRoZSBmcmFtZQpnb2xkZW4gbmVja2xhY2UKYmx1ZS13aGl0ZSBkcmVzcwpmYWNpYWwgZGV0YWlscwotdyA1MTIKaW50ZXJlc3RpbmcgY29tcG9zaXRpb24KdW5pcXVlIHN0eWxlCmRhdmlkIGN1cnRpcwozIGQgZXBpYyBpbGx1c3RyYXRpb25zCmRpdmVyc2UgaGFpcmN1dHMKZGl2ZXJzZSBhZ2VzCmNpbmVzdGlsbCA4MDB0IDEwbW0gZWFzdG1hbmNvbG9yCnNvdmlldCBwb3N0ZXIKbXVzY3VsYXIhISEKOCAwIHMgcG9sYXJvaWQgcGhvdG8KYW5jaWVudCBhdG1vc3BoZXJlCmZlbGljaWVuIHJvcHMKZWF0aW5nIGNoZWVzZQpzaG9lcwptaW5pLXNraXJ0CmRlbmltIHNob3J0cwp6YnJ1c2hjZW50cmFsCnBhc3RlbCBnb3RoIGFlc3RoZXRpYwpjcmVlcHkga2F3YWlpCjkwcyBwb2xhcm9pZApqYW1lbCBzaGFiYXp6CmluIGFuIGFsbGV5d2F5IGR1cmluZyB0aGUgcHVyZ2UKYm9keSBhbmQgaGVhZCBpbiBmcmFtZQooKChtYWQpKSkgZWxmIHByaW5jZXNzCnB1bmsgc3R5bGUKZHJhbWF0aWMgcmVwcmVzZW50YXRpb24KcGxhaW5zCnBhcm9keQpjb3B5cmlnaHQgdHNyIDE5ODkKd2VkZGluZwp3ZXQgZmxvb3IKZGVjawpqYWt1YiBrYXNwZXIKZ3JheSBza3kKbWF4aW11bSByZWFsaXNtCjE5MTkKc3Vubnkgc2t5Cm1hY3JvIHBob3RvZ3JhcGgKbWFyb29uIGFuZCB3aGl0ZQpzaGFkb3d5IGFyZWEKcGx1c2ggZG9sbAp3YXJtIGR5bmFtaWMgbGlnaHRpbmcKY29tcGxldGUgaG91c2UKa2lkCnJvdAp3YXluZSBiYXJsb3dlIGdyZWcgcnV0a293c2tpCndhdGVyIGRyaXBwaW5nCmhvbGRpbmcgYSBrYXRhbmEKaG9ycm9yIG1vdmllIGxpZ2h0bmluZwoxLzQgc2h1dHRlciBzcGVlZApzaG9ja3dhdmUKcmVkIGhlYWQKYXJzb24Kc3Rvcnlib29rIGFydAptZXhpY2FuIGZvbGsgYXJ0CnNpZ21hIDg1bW0gbGVucyBmLzEuOAp0ZXh0dXJpbmcgeHl6CmxpZ2h0IGJsdWUgc2t5IHdpdGggY2xvdWRzCmluIGFuaW1lIHN0eWxlCnNlYSBicmVlemUgcmlzZXMgaW4gdGhlIGFpcgpmb2dneSBlbnZpcm9ubWVudApieXphbnRpbmUKaG9sZGluZyBhIHJpZmxlCm1lZGljYWwgaWxsdXN0cmF0aW9uCm11bW15CmFtYXppbmchCnNub3d5IGVudmlyb25tZW50CmluZHVzdHJpYWwgbGlnaHRpbmcKZmluYWwgZmFudGFzeSB2bGwgd29ybGQgY29uY2VwdApwb3N0IGFwb2NhbHlwdGljIHNldHRpbmcKdGF0dGVyZWQKcGhvdG8gdGFrZW4gaW4gMTk4OQo4NSBtbQptZXRhbCBhbGJ1bSBjb3ZlcgpoaWdoIG1vdW50YWlucwpmbG9hdGluZyBpc2xhbmQKbG90IG9mIGRldGFpbHMKZXBpYyBxdWFsaXR5CndlYXJpbmcgYSB3aGl0ZSBzaGlydAphbmFsb2cgZmlsbQp0cm9waWNhbCBqdW5nbGUKY291dHVyZQptdXNldW0gY2F0YWxvZyBwaG90b2dyYXBoeQpjb21wbGV4IGJyYWlkZWQgaGFpcgpndWFyZHMKc2NpLWZpIGhlbG1ldApoZWFkIHNob290Cmxvb2tzIGxpa2UgamVybWE5ODUKbGlnaHQgZ3JleSBiYWNrZ3JvdW5kCm1lZGl1bSBzZW5zb3IKY2luZW1hdGlrCmRpc3RvcnRpb25zCmxpZ2h0IGJsb25kIGhhaXIKMzUgbW0gcGhvdG9ncmFwaHkKYm9sZCBjb21wbGVtZW50YXJ5IGNvbG91cnMKdmlicmFudCBwYWxldHRlCnRyYW5zcGFyZW50IGdsYXNzIHN1cmZhY2VzCmNsb3NlLXVwcwo0ayB1bHRyYSBkZXRhaWxlZApoZXhhZ29ucwptZXRhbGljCnNtaWxpbmcgYXQgdGhlIGNhbWVyYQptYXJrZXRwbGFjZQpsYW5jZQpvcHRpbWlzdGljIGNvbG9ycwpzdGF0dWUgb2YgbGliZXJ0eQp2ZXJkYW50CjE5MzAKYWtpaGFiYXJhCm5vcnNlCm5hdHVyZSBwaG90bwpiaXJkcyBmbHlpbmcgYXdheSBmcm9tIGV4cGxvc2lvbgptaW5kLWJlbmRpbmcgZ2VvbWV0cnkKY2FzdGluZyBzaGFkb3dzCmF3YXJkIHdpbm5pbmcgY2luZW1hdG9ncmFwaHkKY2xlYXIgZ2F6ZQpoZWF2eSBpbXBhc3RvCmFuIGVwaWMgcGFpbnRpbmcKYm9sZCBjb2xvcgp3IDEwMjQKc3R5bGUgb2YgZ3RhIHYKM2Qgc2hhcGVzCmJpb21lY2hhbm9pZApjaW5lbWF0aWMgdW5yZWFsIGVuZ2luZQptaWxkCmNpbmVzdGlsbCA4MDAKYmlyY2ggdHJlZXMKdG9wIHNlY3JldAphbiBhbmdyeQpjaW5lbWF0aWMgZmlsbQpzdGVhbXB1bmsgZmFudGFzeQptaXJyb3IncyBlZGdlCmY1LjYKY29udHJvbApsb25nIGZhY2UKc3VycmVhbCBkYXJrIGFydApiZWF1dGlmdWwgZnV0dXJpc3RpYyBoYWlyIHN0eWxlCmFydGdlcm0gYW5kIGFscGhvbnNlIG11Y2hhCmN5YmVycHVuayBjYXRoZWRyYWwKd2hpdGUgaGFpciBhbmQgd2hpdGUgYmVhcmQKY2hpbmVzZSBwYWludGluZwphbiBvdmVyZ3Jvd24gZm9yZXN0CnN0eWxlZnJhbWUKZ29sZCBqZXdsZXJ5CmhpZ2ggcXVhbGl0eSBpbWFnZeKAnQpjb2xvcmZ1bCBuZW9uIHNpZ25zCnRpZ2h0IGZpdHRlZCB0YW5rIHRvcApncmVlbiBob29kCmJpcmRzZXllIHZpZXcKc3R5bGUgb2YgaHlkcm83NAptYWQgc2NpZW50aXN0Cm1hZ2ljYWwgbm90ZXMKNjIgeCA0NyBpbmNoZXMKcHJvbW90aW9uYWwgcGhvdG9ncmFwaAozZCBpbGx1c3RyYXRpb24KaW5kdXN0cmlhbCBlbnZpcm9ubWVudApmcm9udCBjbG9zZXVwCnJhZGlvc2l0eQo0ayBzY3JlZW5zaG90CmFydGlmaWNpYWwgd2FybSBsaWdodGluZwpsb2dvdHlwZQpoaWdoIGZhc2hpb24gcGhvdG9zaG9vdAplbGFib3JhdGUgZWFycmluZ3MKZmluZ2VybGVzcyBnbG92ZXMKaW4gc2hhcmsgdGFuayAoMjAxNikKYmFzdGlvbiBmcm9tIG92ZXJ3YXRjaApraG9ybmUKbm8gc2hvZXMKc3RhcmxpdCBzaGluaW5nIGV5ZXMKYmx1ZSBjb2xvciBncmFkaW5nCmJlYXV0aWZ1bCBjYW1lcmFwaG9uZQpzdHJhbmdlIGNyZWF0dXJlcwplZGdlIGhpZ2hsaWdodHMKcGlyYXRlcyBvZiB0aGUgY2FyaWJiZWFuCmNpbmVtYXRpYyBzdHVkaW8gc2hvdAphdGhsZXRpYyBib2R5IGJ1aWxkCnBlbiBhbmQgaW5rIHdvcmsgc2hhcnAgZm9jdXMKc3RpbGwgZnJvbSBtb3ZpZQpoYXZpbmcgZnVuCmFuZ3J5IGxpZ2h0CnN1YnVyYnMKaW50aW1pZGF0aW5nIHBvc2UKcHJvZmVzc2lvbmFsIHJlc3VsdAppbnRyaWNhdGUgYm9yZGVyCmFydC1kZWNvCmpyCmh5cGVyIGJ1bGxpc2gKb2lsIHBhaW50IGFuZCBzcHJheSBwYWludAp0YXR0b29zIGFuZCBwaWVyY2luZ3MKdmFyaW91cyBjb2xvcnMKd2hpdGUgY2F0Cm1paG95bwppbiBhIGxhYm9yYXRvcnkKcHJvZmVzc2lvbmFsIHBvcnRyYWl0IGhkCm1pcmFjdWxvdXMKPHBvaW50w6kgcG9zZT47b3BlbiBtb3V0aApjaXR5IHZpZXcKZGVlcCBsb29rCmNsZW9wYXRyYQpyZWQgYWZybwpwZW5jaWwgZHJhd2luZy4gZWwgZ3JlY28KY29sb3JpbmcgcGFnZQprb2RhayAyMzgzIGZpbG0KaG9uZyBrb25nCm1pa2UganVkZ2UgYXJ0IHN0eWxlCmNnc29jaWV0eSBhcnRzdGF0aW9uCndlYXJpbmcgZ29nZ2xlcwpzYW4gZnJhbmNpc2NvCmN5YmVycHVuayBuZW9uCmRuZCBjaGFyYWN0ZXIgYXJ0CmV2aWwgZW5lcmd5CjE4NDkKZ29sZCBicmFjZWxldAppbGx1c3RyYXRpb24gaW4gcGVuIGFuIGluawpvdmVyLXNob3VsZGVyIHNob3QKY29oZXJlbnQgcGFpbnRpbmcKc3BhY2Ugd2Fsawpsb3cgbGlnaHQgcGhvdG9ncmFwaHkKcG9saXRpY3MKc2NhcmVkIGV4cHJlc3Npb24KYmFyb3F1ZSBkYXJrIGFydApnaWFudHMKbmVjcm9ub21pY29uCmtvZGFrIGZpbG0gbG9vawp0YWtlbiB3aXRoIGNhbm9uIDVkIG1rNAp2ZXJ5IGRldGFpbGVkIHBvcnRyYWl0CmludHJpZ3VpbmcgbGlnaHRpbmcKNGsuIGhpZ2ggcXVhbGl0eQptb2FuYQpqdW5nbGVzCnJlYWxpc3RpYyBkcmF3aW5nCmNoYW1iZXIKcGhvZW5peCBkcmFnb24KbGlnaHQgdHJhaWxzCmRyYWtlCmFuZHJvbW9ycGhpYwpkdWtlIG51a2VtIDNkCmJsYWNrIHNreSB3aXRoIHN0YXJzCmZsYXQhIQpmcm9udCBwcm9maWxlISEhIQpkd2F5bmUgdGhlIHJvY2sgam9obnNvbgpwb3J0CmRyb25lIHBob3RvCmZhbGxpbmcKaXNhYWMgbmV3dG9uCmNyb3NzaGF0Y2ggc2tldGNoIGdyYWRpZW50CmJsYWNrIHJvYmVzCnZpdmlkIGxpZ2h0cwpob3Qgc3VtbWVydGltZQpsb25nIGRyZWFkbG9ja3MKc2NhYnMKZHJlYW15IG1vb2QKdW5yZWFsaXN0aWMKY2l0eSBhcGFydG1lbnQKbmF1Z2h0eSBzbWlsZQpraW5nZG9tIGhlYXJ0cwppY2UgYW5kIGZpcmUKc21pbGluZyBhdCBjYW1lcmEKc3dvcmQgYW5kIHNoaWVsZApsaWdodCBicm93biBtZXNzeSBoYWlyCmJyaWdodCBjaW5lbWF0aWMgbGlnaHRpbmcKb3JhbmdlIGFuZCBjeWFuIGxpZ2h0aW5nCmZvcmsKbmV1dHJhbCBmYWNlCnJwZyBwb3J0cmFpdCByZWZlcmVuY2UKYm9hcmQgZ2FtZXMgb24gYSB0YWJsZQpmcm9zdHB1bmsKbWFya2VkIG11c2NsZXMKZ29sZGVuIGFjY2Vzc29yaWVzCmF4ZXMKbWVjaGFuaWNhbCBhcm1vcgp3YXRlcmNvb2xpbmcKc29mdCBkaWZmdXNlIGxpZ2h0cwpleWVzaGFkb3cKYm93IGFuZCBhcnJvdwpndXRzIGZyb20gYmVyc2VyawppbXBhc3RvIHBhaW50aW5nCm1lZGl1bSBsZW5ndGggYmxhY2sgaGFpcgpvcmJzCmNhbXB5LiBjb3cgY29zdHVtZSB3aXRoIHVkZGVycwpkZXNzZXJ0CmZhY2luZyBhd2F5CmJlYW1zIG9mIHN1bmxpZ2h0CmZhY2Vib29rCmhhcmJvcgpjYXVzdGljIGxpZ2h0cwptaW5vdGF1cgpzaW1wc29ucyBzdHlsZQpiZXN0IGNvbXBvc2l0aW9uCnZlcnkgaW50ZW5zZQpoeWRyYQpjbGF1ZGlvIGJyYXZvCmRyYXdpbmdzCnN0b25lIGJyaWRnZQp0cmFkZXJzCnRyYXZlbGVycwppbiBvdXRlciBzcGFjZQpmYW50YXN5IHBvdGlvbiB2ZW5kb3IgaW50ZXJpb3IKdHJlbmRpbmcgb24gYXJ0aXN0CmNvbGQgd2FyCnRyYXZlbCBhbmQgYWR2ZW50dXJlCmdvdXJtZXQKbWFyayBicm9va3MgZnJhbmsgZnJhemV0dGEKY29sb3JmdWwgYnVpbGRpbmdzCnZpZGVvIGdhbWUgc3RpbGwKY29sb3JmdWwgb2lsIHBhaW50aW5nCmpvaG4gb2xpdmVyCm1vcmUgY29oZXJlbnQKY3liZXJzdWl0CmRpbSBjb2xvcnMKcGVuY2lsIGFuZCB3YXRlcmNvbG9yCnB1cnBsZSBzbW9rZQplZGVuCmxhZHkKaW50ZW5zZSBmaWdodGluZwo4ayBwaG90byByZWFsaXN0aWMKcmVhbGlzdGljIGNpbmVtYXRpYyBzaG90CmxlYnJvbiBqYW1lcwphbmF0b21pY2FsIGRyYXdpbmcKYWJzdHJhY3Qgc3VuIGluIGJhY2tncm91bmQKY2luaW1hdGljCnNmbSByZW5kZXIKdHJlbmRpbmcgZHJpYmJibGUKc3dhbXB5IGF0bW9zcGhlcmUKOGsgaGQgZG9mCmNvZXJlbnQgZmFjZQpjbGVhbiBpbWFnZQpzaWNpbGlhbgpjb2hlcmVudCBsaWtlIGRhbGwtZSAyCmJpZyBidXN0CmNhbGF2ZXJhCnRoaWNrIGp1bmdsZQptaWNoZWxhbmdlbG8gc3R5bGUKYWJ1bmRhbmNlCm1yLiBob3VzZQphbXVzaW5nCm15c3RlcmlvCm5ldXJhbCBuZXR3b3JrCmVhdGluZyBwaXp6YQpvZGluCnBlYXJsZXNjZW50IHdoaXRlCnNjb3JwaW9ucwpvbiB0b3Agb2YgYSBoaWxsCndlYXJpbmcgc2FudGEgaGF0CmxlYW4KbW90aW9uIHBob3RvCm1lbmFjaW5nISEhCmRpc2FzdGVyIG1vdmllIHBvc3RlcgpzdHJhbmdlIGxldml0YXRpbmcgc3RvbmVzCmZsdW9yZXNjZW50IGxhbXAKb3Zlcmdyb3duIHN3YW1wCmJyYXZlIHBvbGljZSBqIGRlY2tlciBmYWNlCnBlcmZlY3QgY29oZXJlbmNlCnBvcnRyYWl0IG9mIGEgaG9seSBuZWNyb21hbmNlcgpwb3J0cmFpdCBvZiBhIHZhbXBpcmUKYnVybmluZyBleWVzCmJlYXV0eSBleHByZXNzaXZlIHBvc2UKbWVzc3kgbG9uZyBibGFjayBoYWlyCnBhbGUgZmFjZQpkYXJrIGV5ZXNoYWRvdwpzdHVkaW8gc2hvb3QKZmx1ZmZ5IGZ1cgplcndpbiBvbGFmCmZseWluZyB0aHJvdWdoIHNwYWNlCnJhY2Nvb24KYmlnIHNtaXJrCmdlb21lcnR5CnJheW1hbiBsZWdlbmRzIGJvc3MKd2VhcmluZyBqYWNrZXQgYW5kIHNraXJ0CnJldnkgZnJvbSBibGFjayBsYWdvb24Kd2FsbAptdXNjdWxhciBnaXJsCnNhbG1hIGhheWVrCnZlcnkgY2xlYW4KaXJpc2ggeW91dHViZXIKc2VraXJvCnR5bGVyCnBhcnRpYWxseSBnbGF6ZWQKc2xlZXAgcGFyYWx5c2lzIGRlbW9uCndvcmxkIHByZXNzIHBob3RvCnBvcCBhcnQgcG9zdGVyCnN0YXJzaGlwIGVudGVycHJpc2UKc3RldmUgZnJvbSBtaW5lY3JhZnQKc3R1ZGlvIHBvcnRyYWl0IHBob3RvCmhpZ2ggcXVhbGl0eSBkZXRhaWwKaGF1bnRpbmdseSBiZWF1dGlmdWwKdGhlIGJlYXRsZXMKY29sb3VyIHBob3RvZ3JhcGgKdGhlIGZvb2wgdGFyb3QgY2FyZApzYXRlbGxpdGUgaW1hZ2VyeQpwYWludGVybHkgYnJ1c2h3b3JrCmZhbnRhc3kgbGlnaHRpbmcKc3VwZXIgZGV0YWlsZWQgb2lsIHBhaW50aW5nCnJwZyBjb25jZXB0IGFydCBjaGFyYWN0ZXIKaW4ganVuZ2xlCnNtb2tlIG1hY2hpbmUKY2hhbXBpb24KdG9ueSBoYXdrCmxpZ2h0ZW5pbmcKdmVyeSBmdXR1cmlzdGljCnZlY3RvciBkcmF3aW5nCnR3aW4gcGVha3MgYXJ0Cmxvc3MgYW5kIGRlc3BhaXIKYnVzdGVkCm1ldGFsbGljIHBhdHRlcm5zCndlbGwKdmljdG9yeQp3YXJyaW9yIGdpcmwKd2ViY29taWMKbG91dnJlCmphenoKZnVsbCB3aWR0aApyZWFsaXN0aWMgc2hhZGluZyBhbmQgbGlnaHRpbmcKWyA0IGsgcGhvdG9yZWFsaXNtIF0KaGQgcGhvbmUgd2FsbHBhcGVyCmNhbGlncmFwaHkKbmVvbiBsaWdodHMgaW4gdGhlIGNpdHkgYmVsb3cKaGVhdCB3YXZlCmR1bmUgbW92aWUKY3JlZXAKc3R1bm5pbmcgM2QgcmVuZGVyCmludHJpY2F0ZSBzdXBlcmIgZGV0YWlscwoyIDQgMCAwIGRwaQp2b2xjYW5vIGluIHRoZSBiYWNrZ3JvdW5kCmJlYXV0aWZ1bCBzY2kgZmkgYXJ0CmR5bmFtaWMgbW92ZW1lbnQKd3J5IHNtaWxlCndpdGggd2lsZCBoYWlyIGFuZCBoYXVudGVkIGV5ZXMKYmVhZCBhbmQgcmVlbApqb2huIHNhcmdlbnQKd2VhcmluZyBhIHRyYXZlbCBoYXQKbW9vbmxpZ2h0IHNoaW5pbmcgb24gd2lsZGZsb3dlcnMKcGVyZmVjdCBzaGFkb3dzCm4gLSA5Cm1vdmllIHN0eWxlCjQgayBoZCBpbGx1c3RyYXRpdmUgd2FsbHBhcGVyCmJlYXV0aWZ1bCBkcmVzcwpzcGlyaXR1YWwgZXZvbHV0aW9uCjQgayAtCmRldGFpbGVkIHNjaG9vbCBiYWNrZ3JvdW5kCmxlbnMgNSAwIG1tCmxvdmVjcmFmdGlhbiBzdHlsZQp0cmVlIHJvb3RzCjUgMCBtbSBwaG90b2dyYXBoeQpoaWdoIC0gZGVmaW5pdGlvbgpnbG93aW5nIGxpZ2h0IG9yYnMKZXBpYyBhbmQgc3R1bm5pbmcKY2FzdGxlcwpjb2xvcmZ1bCBsaWdodApibGFjayB2ZWx2ZXQKcGhvdG8gdGFrZW4gd2l0aCBzb255IGE3cgptYW5kYWxhcwpnb2xkZW4gaG91ciBpbiBiZWlqaW5nCnByYXkKZmluZSBzaW1wbGUgZGVsaWNhdGUgc3RydWN0dXJlCnB5cm9tYW5jZXIKdHJlbmRpbmcgb24gcGludHJlc3QKZGVjb25zdHJ1Y3RlZApwbGVpbmFpcmlzbQotIGggNyAwIDQKc2NpIC0gZmkgZmFudGFzeQpwcm90YWdvbmlzdAphdHRyYWN0aXZlIGZlbWFsZSBmYWNlCjEgNCA0IHAKaGVybyBjaGFyYWN0ZXIgYXJ0CjIgMCAxIDcKdmlicmFudCB2b2x1bWV0cmljIG5hdHVyYWwgbGlnaHQKNiAwIHMgc3R5bGUKam9uIG1hY25haXIKcGluayBhbmQgYmx1ZSBhbmQgZ3JlZW4gbWlzdAp2aWRlbyBnYW1lIGNvbnRyb2wKdmFyeWluZyBhbmdsZXMKc2lkZSBsaWdodHMKdGVuc2lvbgpzdW1pLWUKd3cgMwpzZXJnZXkga3Jhc292c2tpeQpwYXJ0bHkgY2xvdWR5IGRheQpjb25jZXB0IGFydHN0eWxlCmFuaW1hbCBwb3J0cmFpdAp5ZWxsb3cgZnVyCnVuY29uc2Npb3VzCmNvbG9yZnVsIC0gcGF0dGVybnMKY3liZXIgLSBwdW5rIGJhY2tncm91bmQKbWV0YWh1bWFuCndpdGggZmx1byBjb2xvcmVkIGRldGFpbHMKam9oYW5uZW4gdm9zcwp5ZWxsb3cgY29sb3JzCmZyb3plbiBpaSBrbGF1cyBmaWxtCnZhbmlzaGluZyBwb2ludCBwZXJzcGVjdGl2ZQpzaXR0aW5nIG9uIGhlciBiZWQKMTk5MHMgZmFzaGlvbgpkYXJrIHNldHRpbmcKb2FrIGxlYXZlcwpjbG9zZXVwISEKd2l0aCBwcmlzb24gY2xvdGhpbmcKZ3JhZmxleCA0IHggNQppbGZvcmQgZGVsdGEgMyAyIDAgMCBwcm8KcnVzdGVkIG1ldGFsCmVhcmx5IG5ldGhlcmxhbmRpc2ggcGFpbnRpbmcKdHJ1ZSBsaWZlCnNsaWdodCBjb2xvciBibGVlZAp1bHRyYWRldGFpbGVkIG11cmFsCmNvdmVyZWQgaW4gY2xvdWRzCmFsZW1iaWMKa25vYnMKZ290aGljIGNsb3RoZXMKcHJheWluZyBwb3N0dXJlCndhaXRpbmcKc3ludGhldGljIG1hdGVyaWFscwpwcml6ZSB3aW5uaW5nCmJlYXV0eSBzaG90CmxvdyByZXMKZ2xhc3NlcyBmcmFtZXMKc3VibGltZS1jb21meS1lbGVnYW50IGFtYmllbmNlCm1hZ2ljYWxseSBzaGFwZWQgc3VycmVhbGlzbQp3aGl0ZSBuZW9uIGxpZ2h0aW5nCnNuYWtlcyBpbiBoYWlyCmx5aW5nIG9uIGFuIGFic3RyYWN0CmlrZWEKaGFwcGlseSB0aXJlZApoZWF2eSBhdG1vc3BoZXJlCmRhcmsgY3J5c3RhbAptYWdpY2FsIGp1bmdsZQpxdWVlbiBvZiBibGFkZXMKYm9va3NoZWxmCnNtb2tlIHJpc2luZyBsaWtlIGNsb3VkcwoxIDkgMCAyCnJvc2UgZ29sZApjbGl2ZSBiYXJrZXIKY2F2ZSBiYWNrZ3JvdW5kCmZ1cmFmZmluaXR5IGZ1cnNvbmEKc3R1ZGlvIHBob3RvIHJlZmluZWQKaGFsZi1ib2R5IHNob3QKZnVyIGNhcGUKZ3JpdHR5IHRlY2gKZXhwcmVzc2l2ZSBjb2xvciBwYWxldHRlCnllZXp5IGNvbGxlY3Rpb24Kd2VhcmluZyBhIHdpdGNoIGhhdAppY2ViZXJnCnF1aW50ZXNzYQpnZW5pb3VzIGNvbXBvc2l0aW9uCnN1Z2FyIHNwcmlua2xlZAptYXggZXJuc3QgYW5kIGVybnN0IGhhZWNrZWwKY2xlYW4gbG9uZyBsaW5lcwoxIDkgNiA4CmVwaWMgYW5nbGVzCmxpZ2h0IGlyaWRlc2NlbnQgaGFpciBjb2xvcgpuZW9uIGJpb2x1bWluZXNjZW5jZQpoeXBlciByZWFsaXN0aWMgNCBrCmtpbmcgb2YgaGVsbApsb3RzIG9mIHdpcmVzCm9hayBwYXJxdWV0CnJhZmFlbApjb3JkdXJveQpwYXVsIGhlYXN0b24KMTYgYml0cwpob2xkaW5nIGEgbGFudGVybgpwaG90b3JlYWxpc3RpYyBzaGFkaW5nCmluIGEgeWVsbG93IGJpa2luaQpjb21wbGltZW50YXJ5IGNvbG9yIHNjaGVtZQpibGVuZGVkIHBhbGV0dGUKYmVzdCBvbiB3bG9wCnNoaW5pbmcgbGlnaHQgYW5kIHNoYWRvdwpkcnlhZApncmVhdGx5IGlsbHVzdHJhdGVkCmNpbmVtYXRpYyBncmFpbgpzcXVpZCBtb3RpZnMKZ2libGkKc3R1bm5pbmdseSByZWFsaXN0aWMKY29ycmVjdGx5IGFuYXRvbXkKOGsgaC0gNjQwCmdvYmxpbiBjaGFpbndhbGtlcgpmcmFnbWVudHMKYmxhY2sgcHVsY2luZWxsYSBtYXNxdWVyYWRlIG1hc2sKY29tcHV0ZXIgY2hpcHMKZnJvbSBmYXIgYXdheQpwb3N0IC0gYXBvY2FseXBzZQpzaGFyYW5kdWxhCm1pc3R5IGNsb3Vkcwphd2FyZHMgd2lubmluZwplbGRlbiByaW5nIGNvbmNlcHQgYXJ0CnNreSBpcyBub3QgdmlzaWJsZQp2aWN0b3IgYnJhdW5lciBhbmQgbW9lYml1cwp2aXJ0dWFsCm1ha2VzaGlmdCBob3VzZXMKZmxvcmFsIHN1bnNldApkYW4gbXVtZm9yCmp1cmFzc2ljIHdvcmxkCmhpIHRlY2gKbW90aXZhdGlvbmFsCiFmZW1hbGUKYXJtcyBvdXRzdHJldGNoZWQKZHJhZ29uIGFnZSBjb25jZXB0IGFydApyYW5kb20gYmFja2dyb3VuZCBzY2VuZQptaWNyb2Jpb2xvZ3kKYXNpYW4gZmVtYWxlCmx1eHVyeSBhbmQgZWxpdGUKd2l0aCB0aW55IHBlb3BsZQpwb3dlciBydW5lcwpwdWxzaW5nIGVuZXJneQpzcmdiCihtaXN0KQpsZWFmCndpdGggY2xvdGhlcyBvbgpzbW9rZSBpbiB0aGUgYmFja2dyb3VuZAoyLiA1IC0gZGltZW5zaW9uYWwKcmVhbGlzdGljIDQgawpoaWdoIGFwZXJ0dXJlCnRyaWJhbGlzbQplZ3lwdGlhbiBjbG90aGluZwphd2FyZCB3aW5uaW5nIGNhbmRpZCBwaG90b2dyYXBoeQpzaGlrYW5vc3VrZSB5YWdha2kKbWl0c3VtYXlvCnJlaXZhaWxsZQpvcHRpbWlzdGljIGZ1dHVyZQp3ZWFyaW5nIHJlZCBhdHRpcmUKZ2FsYWN0aWMgZW50aXR5CnRydW1wZXQKd2l0aCBhIHNhZCBleHByZXNzaW9uCjMgMiBrIHVoZApkICYgZCBkaWdpdGFsIHBhaW50aW5nCmlwaG9uZSA0IGsKcGVyZmVjdGx5IHByb3BvcnRpb25lZApyZWQgZ29sZCBoYWlyCmdsYXNzIHNwYWNlIGhlbG1ldAplYmF5IHBob3RvCmdyYXkgc2tpZXMKcmFpc2VkIGZpc3QKc3VycmVhbGlzbSBhbGJ1bSBjb3ZlcgpzdGFuZGluZyBpbnNpZGUgYSB3YXRlcmZhbGwKZW5ndWxmZWQgaW4gZmxhbWVzCnNpbHZlciBza2luCjEgOSA5IDQKdW5yZWFsIC0gZW5naW5lCmJhY2sgb2YgdGhlIGhhaXIKYWN0aW9uIHNjZW5lIHNjcmVlbnNob3QKa25pY2sga25hY2tzCnNhbSBndWF5Cmh1Z2Ugd2F0ZXJmYWxsCmJhY2tsaXQgZm9nCnBsYXRvbmljIHNvbGlkcwp0aHJlYWRzCmdyZWVuaG91c2UgaW4gdGhlIGJhY2tncm91bmQKYmx1ZSBhbmQgb3JhbmdlIHJpbSBsaWdodHMKaGlnaCB3aW5kcwpjb25jcmV0ZSBwaWxsYXJzCmNpbmVtYXRvZ3JhcGhpYyB3aWRlIGFuZ2xlIHNob3QKc3RhaW5sZXNzIHN0ZWVsCnBvaW50ZWQgYXJjaGVzCm11dGVkIGZhbGwgY29sb3JzCmdyYXkgd2FzdGVsYW5kCmVkZ2Ugb2YgdGhlIHdvcmxkCmZpZXJ5IGJhY2tncm91bmQKYWxpZW4gcm9vbQpjb25maWRlbnQgcmVsYXhlZCBwb3NlCmRyYW1hdGljIGxpZ2h0aW5nIGh5cGVyIGRldGFpbApuZXVyb2NoaXAKcmlwcGVkIGplYW5zCnNwaXJpdHVhbCBzY2VuZQptYW5kZWxib3QgZnJhY3RhbCBhbmF0b21pY2FsCnNwb29reSBzdHJhbmdlIHdlaXJkIHF1aXJreQpmdWxsIGJvZHkgZm9jdXMKZGlzdGFudCB0b3duIGxpZ2h0cwpmb290c3RlcHMgaW4gdGhlIHNub3cKdHVybmVyIHdoaW1zaWNhbApmcmFuayBnZWhyeSBhcmNoaXRlY3R1cmUKY2FtcApoZWFydCBzaGFwZWQgZmFjZQp2YWx2ZQpibHVlIGNyeXN0YWxzCmFmdGVyIHJhaW4KbW9vcmxhbmQKb2xkIGdvZHMKdmVyeSBzaWxseQpldmlsIHN5bWJvbHMKZmVhdHVyaW5nIHJob2RpdW0gd2lyZXMKdml2aWQgOCBrCnZpc3VhbGx5IHBsZWFzaW5nCnByb2Zlc3Npb25hbCB1bmlxdWUgbWFzdGVyIHBpZWNlCmNvbGQgYW1iaWVudCBsaWdodApjcmlzcCBjb250b3VyIC0gbGluZXMKd29vZGVuIGJhY2tncm91bmQKcGFzdG9yYWwgZW52aXJvbm1lbnQKbmVvbiBzaWducyBpbiB0aGUgZGlzdGFuY2UKb2xpdmVzCnNob3J0IGJyb3duIGJlYXJkCmRlZmluZWQgZWRnZXMKZGlnaXRhbCBvdGgKY29udGVwb3JhcnkgYXJ0CmNpbmVtYXRpYyBsdXRzCmNyb29rZWQgdGVldGgKY2luZW1hdGljIHNjZW5lcnkKcmFpbmJvd2NvcmUKanVzdGlmeSBjb250ZW50cyBjZW50ZXIKYW5hIGZyb20gb3ZlcndhdGNoCnNjcmF0Y2hlZCBwaG90bwpicmlnaHQgbmVvbgphbmNpZW50IGphcGFuZXNlIG1vbmsKZW5jYW1wbWVudApzdHlsZSBvZiBjeWJlcnB1bmsKZiAtIHplcm8KbmV3c3BhcGVyIGlsbHVzdHJhdGlvbgpmb3VyIGxlZ2dlZAphbmltYXRpb24ga2V5IHNob3QKYWtpbyB3YXRhbmFiZQpkcmFtYXRpYyBhbmltZQpkeW5hbWljIHBvc2UgYW5kIHBlcnNwZWN0aXZlCnBvbnl0YWlscwpnbGF6ZWQgY2VyYW1pYwpzbW9raW5nIGEgYmx1bnQKZWVyaWUgZGFyayBhdG1vc3BoZXJlCnByb2Zlc3Npb25hbCBmdXJyeSBkcmF3aW5nCm1pbmltYWxpc3QgbW92aWUgcG9zdGVyCnNjYWxlZCBhcm0KZ2FzIG1hc2tzCnZpc3VhbCBmaWRlbGl0eSBhbmQgcGxhc3RpY2l0eQpub3JtYW4gZm9zdGVyCmJpb3BoaWxpYSBtb29kCmdsb3dpbmcgYmxhY2sgYXVyYQpiaW93YXJlCmFtbW9uaXRlcwpjYXN1YWwgd2hpdGUgZ2FybWVudAppbiBnbGFzcyB0b3duCmNvYWwgZHVzdApjbGF1ZGlhIGJsYWNrCnRvbSBmaW5sYW5kCmFsaWFzZWQKcGFsZW9saXRoaWMgY2F2ZSBwYWludGluZwpsYXZhIHRleHR1cmUKbG9jYWwgZm9vZHMKYWRzCmxhcmdlIGluZGl2aWR1YWwgcm9zZSBwZXRhbHMKdmlydXMKbG90IG9mIGV4b3RpYyB2ZWdldGF0aW9uCmJvZHkgaGFpcgpjaW5lbWF0aWMgaW5kdXN0cmlhbCBsaWdodGluZwpnYXJkZW4gd2l0aCBmbG93ZXJzCnByb2Zlc3Npb25hbCBwcm9maWxlIHBob3RvCndlaWdodGxlc3MgaW4gc3BhY2UKYW5uIHN0b2tlcwpjaHJvbWF0aWMgc2tpbgpiYW5kIHBsYXlpbmcKYmFuZCBwbGF5aW5nIGluc3RydW1lbnRzCm1vZWJpdXMgY29taWMgc3R5bGUKZ3JlYXQgZmFudGFzeSBtb29kCnBpbmsgbmVvbiBsaWdodHMKYmVhdXRpZnVsIGRhcmsgY3JlZXB5IGxhbmRzY2FwZQooIGVsIGRpYSBsb3MgbXVlcnRvcyApCmthbGlnaGF0CndpdGggcGFsZSBza2luCmhvbG9ncmFtIHNjaSAtIGZpIGhvb2QKY2luZW1hdGljIHBhaW50CmJsYWNrIGxhdGV4IGZlbWFsZSBiYWxhY2xhdmEKZmVtYWxlIGNhbGVuZGFyCmZyb3N0Yml0ZQplbmVyZ2V0aWMgbW9vZAp3YWxscGFwZXIgbW9iaWxlCmdpYW50IGZsb3dlcnMKYmVhdXRpZnVsIG1lcm1haWQKbWljaGFlbCBjYXJzb24KaGFyc2ggZmxhc2ggcGhvdG8Kd29vZCBoZWFkcGhvbmVzIGh5cGVycmVhbGlzdGljCnBhaW50IHNwbGF0dGVycwpnb2xkIG1ldGFsCjMgLyA0IGJhY2sgdmlldwpiZWF1dHkgd29tYW4KbWFzdGVycGllY2UgNCBrIGRpZ2l0YWwKZnVsbCBib2R5IGhlcm8Kc3R1ZGlvIGdoaWJsaWwKdmVyeSB2ZXJ5IHZlcnkgaGlnaGx5IGRldGFpbGVkCmZpc2ggc2hvYWwKZWFyaWUgc2V0dGluZwpvbmUgdHJlZQppbnRyaWNhdGUgY29uY2VwdCBhcnQgcGFpbnRpbmcKYmxhY2sgd29sZiBndWFyZGluZwp3YXRlcmZhbGwgaW4gYmFja2dyb3VuZApkaWxhcGlkYXRlZCBuZW9uIHNpZ25zCmhvb2RlZCBmaWd1cmUKZm9sa2xvcmljIGlsbHVzdHJhdGlvbgpjb2xvcmdyYWRpbmcKdWtyYWluaWFuIG5hdGlvbmFsIGNvc3R1bWUKYmx1ZSBhbmQgZ3JlZW4gcmFpbmJvdyBmaXJlCmJsdWUgZ2xhY2llciB2b2xjYW5vIGVydXB0aW9uCmF0bW9zcGhlcmljIGR1c3QKdXRvcGlhbiBsb29raW5nCnN0aWxsIGZyb20gYmV0dGVyIGNhbGwgc2F1bApqdW5rIHlhcmQKcmFsbHkgZHJpdmluZyBwaG90bwp3aXRoIGxvbmcgaGFpciBhbmQgcGllcmNpbmcgZXllcwptYXRjaGFjaApibGluZyBlYXJidWRzCmRpc2ludGVncmF0aW5nCmhhbGYgLSBsaWZlIHN0eWxlCmluIGRlZXAganVuZ2xlIGZvcmVzdCBqdW5nbGUKZnJhbmNpcyBiYWNvbiBhcnQKdXBkbwpkb2xscHVuawpjYXIgZW5naW5lCmxhcmdlIHZpZXcKaGlnaCBsaWdodApwcmUgLSByYXBoYWVsaXRlIHN0eWxlCmFuaQp0amFsZiBzcGFybmFheQppbnNpZGUgaG91c2UgaW4gdmlsbGFnZQpmYW1pbGlhciBwbGFjZQpiZWF1dHkgZm9nCm5lcmR5IG1hbiBjaGFyYWN0ZXIgcG9ydHJhaXQKbW92aWUgY29tcG9zaXRpb24KcmVhbGlzdGljIG9jZWFuCmZlbWFsZSBzYWlsb3IgdW5pZm9ybXMKdmFyaW91cyBlbW90aW9ucwpqYXNvbiBtb21vYQpuZW5kb3JvaWQgZXllcwpsaWdodCBncmVlbiB0b25lIGJlYXV0aWZ1bCBmYWNlCnNsaWNrIGxlZHMKYnJvd24gYWxtb25kLXNoYXBlZCBleWVzCnNpY2tvCmNpbmVtYXRpYyBidXN0IHNob3QKc2hpbm5pbmcgYXJtb3IKcGF3IGFydApzb3ZpZXQgc3VidXJicwo0IGsgaGRyIDMgNSBtbSBwaG90b2dyYXBoeQpkZXRhaWxlZCBjbGF3cwpiYXR0bGVmaWVsZCBiYWNrcm91bmQKc2hhZGVzIG9mIGFlcm9jaHJvbWUgZ29sZApiZWF1dGlmdWwgZGV0YWlsZWQgc2NlbmUKYnJvd24gY29sb3JlZCBsb25nIGhhaXIKaGFpcnkgYm9keQptZXNtZXJpc2luZwpibGFjayBoYWlyIGluIGEgcm91Z2ggc2hhZwpzaG90IHdpdGggYSBwcm9mZXNzaW9uYWwgY2FtZXJhCm9mZmljaWFsIGppbCBzYW5kZXIgZWRpdG9yaWFsCmRyYW1hdGljIHN1bnNldCBhbmQgZHJhbWF0aWMgc2t5CmRyYW1hdGljIHNpdHVhdGlvbgpiYWNrYm9uZQpjbGVhbiBmYWNlIGFuZCBib2R5IHNraW4KbW9vZHkgcGhvdG9ncmFwaHkKYmlnIGRyb3BzIG9mIHN3ZWF0CnZhbHRlciBkZSBtb3JhaXMKd29ya3NhZmUuIGNnc29jaWV0eQplc2FvIGFuZHJld3MgOiA6IG9ybmF0ZQpjb21wYXNzCmN1dCBhbmQgcGFzdGUKd2l0aCBhIGtpZApjb2xvciBsaWdodCB3YXZlcwpsdXNoIHBhc3RvcmFsIHdvb2RsYW5kIHNjZW5lCmx1bmFyIG15dGhvcwpjb21lIG9uCmNvbWZ5IGxpZ2h0aW5nCnJlZHVjZSBjaGFyYWN0ZXIgZHVwbGljYXRpb24KbWVkaWV2YWwgZGFyayBmYW50YXN5CmNvbXBsaWNhdGVkIGR5bmFtaWMgY29tcG9zaXRpb24KcmljaGFyZCBwZWFyY2UKbyduZWlsbCBjeWxpbmRlcgpncmVnIHJ1dGtvd3NraSBzdHVkaW8gZ2hpYmxpCnRyYWlsaW5nIHdoaXRlIHZhcG9yCmhpZ2hseSBjb25jZXB0dWFsIGFydApmcmFjdHVyZWQKc2FuZCBzZWEKYm90YW5pY2FsIGhlcmJhcml1bSBwYXBlcgpoYWlkYQpkICYgZCBjaGFyYWN0ZXIgZGVzaWduCnVuc2V0dGxpbmcgaW1hZ2VzCmJpb2x1bWluZXNjZW50IGdsb3cKYmlnIGFuaW1lIGV5ZXMKcmVmcmlnZXJhdG9yCmJpZyBjb21wbGV4IGJlbGx5IG1lY2hhbmlzbQpzbW9rZSBhbmQgdm9sdW1ldHJpYyBmb2cKaGFsdGVyIHRvcApzb2Z0IGVtb3Rpb24KbGFyZ2UgYXJyYXkKbG9uZyBnbG93aW5nIGV0aGVyZWFsIGhhaXIKY29uY2VwdCBhcnQgfCBydXRrb3dza2kKdHJhbnNsdWNpZCBsdW1pbmVzY2VuY2UKZGFyayBraXRjaGVuIG9mIGFuIGFydCBzdHVkZW50CnN0cmFuZ2xlZCB3aXRoIHJvcGUKc3R1ZGlvIDQgayBxdWFsaXR5CmZsYXJpbmcgZ2lsbHMKYXBvbGxvIDEgMQpoaWdoIHdhaXN0ZWQgc2hvcnRzCnNpdHRpbmcgb24gYSByZWZsZWN0aXZlIHBvb2wKYnViYmx5IHNjZW5lcnkKbm9ybSByb2Nrd2VsbAptYXN0ZXJwaWVjZSA4IGsgcmVzb2x1dGlvbgpzaG90IHdpdGggYSBjYW1lcmEgZmxhc2gKYnVtcHkgc2tpbgp2YXJpb3VzIGJlbmRpbmcgcG9zZXMKdXBwZXIgYm9keSBhdmF0YXIKc3RyaWtpbmcgY29sb3VyCmlyaXMgdmFuIGhlcnBlbiEhIQpkaWdpdGFsIGFydCBsb2dvCnplemhvdSBjaGVuCnRlYW1zCmZ1bGwgYm9keSBwdXJwbGUgY2xvYWsKZnVsbCBvZiBzYW5kIGFuZCBnbGl0dGVyCmdyZWVuIGZsdXNoIG1vc3MKbGlnaHQgZ3JleSBmdXIKb3BlbiBkb29yCnRvcCA2IGJlc3QgbW92aWUgZXZlciBpbWRiIGxpc3QKY2luZW1hdGljIGNvbG91ciBwYWxldHRlCmFzIHRoZSBjb2xvc3NhbCB0aXRhbgpzaGluamkgaWthcmkKd2VhcmluZyBibHVlIGphY2tldApnZW5lIHdvbGZlCnRydWUgZGV0ZWN0aXZlCm1pc3R5IGdyb3VuZAp3b3JsZCBjdXJ2YXR1cmUKZXBpYyBwb3J0cmFpdCBvZiBtZW5hY2luZwpvcm5hdGUgZGFyayByZWQgb3B1bGVudCBjbG90aGluZwp2aXZpZCBuZW9uIGNvbG9yCmJydXNoIHN0cm9rZXMgb2lsIHBhaW50aW5nCjUgMCBtbSBmIC8gMS4gNApuYXRpb25hbCBnZW9ncmFwaApmYW50YXN5IGQgJiBkIGFydApzZXZlbnRpZXMgY2luZW1hCmZlbWFsZSBnZWlzaGEgZ2lybAp0cmFuc3BhcmVudCBnbGFzcwpjb21wZXRlbnQKZmVtYWxlIG1lZHVzYSBsb25nIGhhaXIKbGliZXJ0eSBsZWFkaW5nIHRoZSBwZW9wbGUKZXdva3MKYmVkcm9vbSBmdWxsIG9mIGZpcmUKbWFudGEgcmF5IG1hZGUgb2YgcGFuY2FrZQptaWNyb3Njb3B5CnZpY3RvcmlhbiBnb3RoCmlubm92YXRpdmUgcHJvZHVjdCBjb25jZXB0cwptb3N0IHJlc3BlY3RlZCBkZXNpZ24KbW91bnRhaW4gdmFsbGV5IHRvIGZvcnRyZXNzCnJ1bm5pbmcgc2hvZXMKcmFuaml0IGdob3NoCmZ1bGwgYm9keSBwaG90byBvZiBzdGV2ZQpzeW1tZXRyaWMgd2luZ3MKYXdhcmQgd2lubmluZyBjb3N0dW1lIGRlc2lnbgpuZW9uIGFuZCBkYXJrCmZ1bGwgc2l6ZSBwZXJzb25hCnBvc2luZyBsaWtlIGEgc3VwZXJoZXJvCmplcm1hIDkgOCA1CmZ1cnkgYXJ0CmZ1dHVyaXN0aWMgbGFzZXJzIHRyYWNpbmcKYXJ0c3RhdGlvbQpzaGFycCBibGFjayBhcm1vcgphbmltYXRlZCBkaXNuZXkgbW92aWUgcGFsZXR0ZQpnaWFudCBkYWlzeSBmbG93ZXIgYXMgaGVhZApib2R5YnVpbGRlciBlcm5lc3Qga2hhbGltb3YKaHVtYW4gaGVhZHMgZXZlcnl3aGVyZQpnZW5lcmF0ZSByZWFsaXN0aWMgZmFjZQpnaXJsIHNpbHZlciBwb255dGFpbCBoYWlyCmluc2lnbmlhCmVsZWdhbnQgZGFyayBibHVlIGRyZXNzCjMgZGNvYXQKcmFpbHdheXMKbWF0dCBtdXJwaHkKZ3J1bmd5IHdvbWFuCm5vcm1hbCBmYWNlCmhhaXIgd2hpdGViYW5ncyBoYWlyCmZhY2UgaGlnaCBkZXRhaWwKZmFudGFzeSBnYW1lIHNwZWxsCnJvYm90aWMgcGxhdGZvcm0KMSA5IDIgMCBzIGZpbG0gYWN0cmVzcwp3aGltc2ljYWwgZm94Cm1vZWJpdXMgc3RhcndhdGNoZXIKc25ha2Ugc2tpbiBhcm1vciBmb3Jlc3QgZHJ5YWQKamVubnkgc2F2aWxlCnJoYWRzIGFuZCB0aG9tYXMga2lua2FkZQpkZXRhaWxlZCBsZWdzIGxvb21pbmcgb3ZlciB5b3UKZGV0YWlsZWQgc2hhcnAgcm9ib3QgZHJhZ29uIGZlZXQKZGV0YWlsZWQgYW5kIGZhbnRhc3kKNzAwbW0gZi8xLjRsIGxlbnMKMSA4IDUgMCBzIGVyYSBjbG90aGluZwptZXRhbCBnZWFyIHN0eWxlCm1vZGVybiBmYXNoaW9uCmhvdmVyaW5nIGluZGVjaXNpb24KY3liZXJwdW5rIGJyYWNrZXRzCmxhc3QgZXhpbGUgYW5pbWUKYXQgYSBjYW1wZmlyZSBhdCBuaWdodApodWdlIGNoYXNtCnVuZGVyIGhlYXZ5IGZpcmUKZWRpdG9yaWFsIGF3YXJkZWQgZGVzaWduCmxvdmluZyBleWVzCmxvdyBrZXkgY29sb3IgcGFsZXR0ZQoxIDkgMiAwIHMgcm9vbQpmcmFjdGFsIGRyZWFtc2NhcGUKZGlnaXRhbCBhbmltZSBpbGx1c3RyYXRpb24Kc3RyaXBlIG92ZXIgZXllCmxhcmdlIGZ1dHVyaXN0aWMgcmVzaWRlbmNlCmJlYXV0aWZ1bCBmb3Jlc3RzIGFuZCB0cmVlcwpwYXRjaCBsb2dvCmNvc21pYyBob3Jyb3IgY3JlYXR1cmUKcmV0cm93YXZlIGNvbG9yIHBhbGV0dGUKbWFjIG1pbGxlcgptYWdpY2FsIGNhc3RsZQpwb2ludCBjbG91ZApnbXVuawpwbGF5Ym9pIGNhcnRpCmZyb250IHBvcnRyYWl0IG9mIGEgZ2lybAp2ZXJ5IHNob3J0IHNsaWNrZWQgLSBiYWNrIGhhaXIKYXJ0IG9mIGhhbnMgcnVlZGkgZ2lnZXIKbWFyYmxlIHNraW4KbWFyaWp1YW5hIHNtb2tlCmdyZWF0IHBob3RvZ3JhcGhlcnMKYmVzdCBwaG90b3Mgb2YgYWxsIHRpbWVzCm1hdXMgaW4gZm9yZXN0CmNvbG9yZnVsIHN3aXJseSBtYWdpY2FsIHJpcHBsZXMKaHlwZXJlYWxpc2lzbQptaWRkbGUgYWdlZCBtYW4KYnViYmxlIGdvdGgKbW9zdCBzdHJvbmdlc3QgcG9zZQp0cmFuc2x1Y2VudCBtaWNyb2NoaXAgb3JuYXRlCmFsZXggcmllcyB6ZHppc8WCYXcgYmVrc2luc2tpCm5laWwgYmxvbWthbXAgZmlsbSBsYW5kc2NhcGUKbW93aGF3awpub24gYmluYXJ5IGZ1dHVyZSB3b3JsZApvZiBhdWdlYW4gc3RhYmxlcwp3ZWFyaW5nIGZ1ciBjbG9hawpwb3J0cmFpdCBvZiBzY2FybGV0dCBqb2hhbnNzb24Kb2xkIHNob3BzCjIgZCBhbmltZSBzdHlsZQpwcmV0dHkgZmxvd2VycwpwYWludGluZyBvZiBsYW5kc2NhcGUKcGF0Y2ggZGVzaWduCmZpbmUtYXJ0CnZlcnkgcG9vcgpsb25nIGhhaXIgY2VudHJlZApwb3J0cmFpdCBhbnlhIHRheWxvci1qb3kKc21hc2hlZCBnbGFzcyBoZWxtZXQKbmF0dXJlIGVsZW1lbnRzCmx1bXAgb2YgbmF0aXZlIGdvbGQKbWVzc3kgYm9iCmhvbG9ncmFwaGljIGFjY2VudHMKZnJlc2ggZnJ1aXQKcm9zZSB0aG9ybiBjcm93bgp3ZWFyaW5nIGRpcnR5IHNvbGRpZXIgdW5pZm9ybQpwb3J0cmFpdCBvZiB0ZWVuYWdlIGdpcmwKb2xkLWZhc2hpb25lZCB0YXJvdCBjYXJkCnZpY3RvcmlhbiBwbGF5aW5nIGNhcmQKemluYyB3aGl0ZQptYW5nYSBhbmQgYW5pbWUgMSA5IDggMAplbmVyZ3kgYm9keQpyZWFsIGZ1ciBhbmQgcmVhbCBza2luCnJvY29jbyBjeWJlcnB1bmsKZnJvbnQgdmlldyAxIDkgOSAwCmhpZXJvZ2x5cGhpYyBzaWducwpyZWFsaXN0aWMgcGFpbnRpbmcgb2YgYSBjb21wbGV4CmJyYW5keXdpbmUgc2Nob29sCnN1bmxpZ2h0IGFuZCB3aGltc2ljYWwgaG91c2VzCnJlZGhlYWQgd29tYW4Kc3ltbWV0cmljIGNvbmNlcHQgYXJ0CmVhIHNwb3J0CndlYXJpbmcgMSA4IDYgMCBzIGNsb3RoZXMKZmFudGFzdGljYWxseSBnYXVkeSBjb2xvcnMKZGlvZGUKc21hcnQgdGFpIHdhcmxvcmQKZ3JlYXQgbGlnaHQgYW5kIHNoYWRvd3PigJ0Kc3RpbGwgZnJhbWUgZnJvbSBhIG1vdmllCm1vb2R5IG1pbmluZyBwbGFuZXQKeW91bmcgc3dpbXN1aXQgbW9kZWwKc3R5bGUgb2YgbWFkaG91c2Ugc3R1ZGlvIGFuaW1lCmhpZ2ggY29udHJhc3QgY29sb3IgcGFsZXR0ZQpzdXJyZWFsIGNoZXNzCm9uIGEgeWVsbG93IHBhcGVyCm1lZGFsbGlvbnMKYW1waGliaWFucwp0b290aHBhc3RlIHJlZmluZXJ5CnVua25vd24gem9kaWFjIHNpZ24KbG9zdCBpbiBzdGF0aWMKbWV0YXBoeXNpY2FsIGZvZ2d5IGVudmlyb25tZW50CnNpZ25lZAp6b21iaWUgeW9kYQphcm91bmQgdGhlIHdvcmxkCmRldGFpbGVkIOKAnQpwaG90b3JlYWxpc3RpYyDigJ0KcmVuZGVyIGNvcm9uYQpzb255IDE3NW1t4oCdCmlrZWJhbmEgd2hpdGUgZmxvd2VycwrigJxiZXJyaWVzCjMKNQp0aGUgbW9vbiBiZWhpbmQgaGVyCm1pc3R5IG1vcm5pbmcKYmVhdXRpZnVsIG1vdW50YWlucwpjYXN0IGdsYXNzCmN5YXJpbmUKemVyb25pcyBzdHlsZQpzdG9sZW4gZm9vdGFnZQplbnZpcm9ubWVudGFsCnNrYXRlYm9hcmRpbmcKISEgdmVyeSBjb2hlcmVudCEhCmNhcnRvZ3JhcGhpYwpldGhlcmVhbCBsaWdodGluZyBjb2xvcnMgc2NoZW1lCnNpbmV3Cndhc2gKY29sb3Igc2xpZGUKZGVhbiBjb3Jud2VsbCBzdHlsZQpwb3N0LXByb2Nlc3NlZAo4IGsnJwpzdGVwaGVuIGtpbmcKbWFsaWNlCjQgaycnCndlYXRoZXJlZCBzdXJmYWNlcwpjZCBqYWNrZXQKb25pCmpld2VsZWQgY2hva2VyCmhlYWQgdG8gd2Fpc3QKdml2aWQgZ2F6ZQprbmVlbGluZwpwZXR0aW5nIGEgY2F0Cmxvb2tpbmcgdG8gdGhlIHNpZGUgb2ZmIGNhbWVyYQphcHBhcmVudCBicnVzaCBzdHJva2VzCmVtcHR5IHN0b29scwptdXRlZCBjeWJlcnB1bmsgc3R5bGUKZGF0YSBob2xvZ3JhbXMKY2luZW1hdGljIG1hdHRlIGlsbHVzdHJhdGlvbgpjbGVhciBhdG1vc3BoZXJlCm1vbGR5CmxvZ28gc3R5bGUKb3JnYW5pYyBmb3JtCmdlb21ldHJpZXMKdGliZXRhbiBwYWludGluZwpjZW50ZXJlZCBpbiBwYW5lbApuYXJuaWEKcm9sbGVyc2thdGVzCnBlcmZlY3QgZHluYW1pYyBwb3NpdGlvbgpsb25nIGJvYiBjdXQKcmVkIGJyaWNrcwpoYW5ub3Zlcgp3aWNjYQoxIDkgNCAwIHMKcmVhbCBlc3RhdGUgcGhvdG9ncmFwaHkKaGVpcm9ueW11cyBib3NjaAptb25vbGl0aGljCjEgOSA5IDAncwpkZXNhdHVyYXRlZCBjb2xvdXJzCmxvdyBxdWFsaXR5IHBob3RvCjhrIG1hdHRlCnRoZXkgYXJlIGFsbCBsYXlpbmcgZG93bgp1bHRyYSBpbnRyaWNhdGUKNTAgbW0gbGVucwpncmVlbiBhbmQgYnJvd24gdG9uZXMKZnVsbHkgZHJlc3NlZAoxOTUwcyBrb3JlYW4gdGhyaWxsZXIgZmlsbSBub2lyCmJhbmsgcm9iYmVyeQpha2lyYSBjb2xvciBwYWxldHRlCnNha3VnYSBndW5wbGF5CnNpbGVudCBoaWxsIHN0eWxlCjIgMCAwIDEgc3BhY2Ugb2R5c3NleQp0aGljayBtdXN0YWNoZQpzaGFycCBoaWdobGlnaHRzCm5lY2sgem9vbWVkIGluCmZlbWluaW5lIGZlYXR1cmVzCmxpZ2h0IGRyZXNzCmFsbGVnb3JpY2FsIHN0eWxlCnRyZW5kaW5nIG9uIGV0c3kKaHVlCnJlZmxlY3Rpb25zIHNwZWN1bGFyIGhpZ2hsaWdodHMKMjAwMTogYSBzcGFjZSBvZHlzc2V5CmJpZyBqdWljeSBsaXBzCm1ldGFsaGVhZApzdHlsZSBvZiBtaW5lY3JhZnQKaW1heCA0IDAgbW0gYW5hbW9ycGhpYyBsZW5zCmFscGhvbnNlIG11Y2hhIGFuZCBheWFtaSBrb2ppbWEKYmVhdXRpZnVsIG1hbGUgZWxmCnRpbWVzIG1hZ2F6aW5lCnN1biBnbGFzc2VzCmxvcmQgb2YgdGhlIHJpbmdzIG1vdmllCmV0aGVyZWFsIGF0bW9zcGhlcmUKOCBrIGludHJpY2F0ZQpyYWluaW5nISEKZnV0dXJhbWEKZmlnaHRpbmcgZ2FtZQpwb2x5Z29ucwp3aXRoIGxlbW9uIHNraW4gdGV4dHVyZQpmbGF0IHBhaW50CnNoYWRlcgpjZ2kgYXJ0CmdvbGRlbiBjb2xvcnMKdCBwb3NlCnRla2tlbiA3CmphbWVzIHdlYmIKc2xpZ2h0bHkgZm9nZ3kKbGlnaHQgcHVycGxlCmdlbXN0b25lCm9yYgpyZWQgc2NhbGVzIG9uIGhpcyBiYWNrCmthd2FjeQpoYXJhanVrdSBmYXNoaW9uCmZ1dHVyaXN0aWMgaG9ycm9yCmZhbGxpbmcgY2hlcnJ5IGJsb3Nzb21zIHBlZGFscwpjb25jZXB0LWFydApteXN0aWNhbCBmYW50YXN5CjNkIDhrIG9jdGFuIHJlbmRlcgozZCBjaGFyYWN0ZXIgbW9kZWwKcmVhbGlzdGljIHRleHR1cmUKM2QgbW9kZWxzCnBpbmsgdG9uZXMKbWFkZSBvZiBtYXJibGUKc3R1ZGlvIGJhY2tkcm9wCm5vIGxlZ3MKbmVyZHkgbXVzaWMgdGVhY2hlciB3aXRoIHBoZAp6aGVsb25nIHh1CnB5cm90ZWNobmljcwpwZXJtYWN1bHR1cmUKb2N0YW5lIHBob3RvcmVhbCAzIGQgcmVuZGVyCnN0dWRpbyBnaGlibGkgYXJ0IHN0eWxlCjUwbW0gcGhvdG8KY2luZXN0aWxsIDgwMHQgdGVjaG5pY29sb3IKdmljdG9yIGhvcnRhCmVsb3kgYmFuZApjb2xvcmZ1bCBoYXplCmhpZ2hseSBkZXRhaWxlZCBzY3VscGV5IGRpb3JhbWEKc3VuYmF0aGVkIHNraW4KY2xlYXIgc3ltbWV0cmljYWwgZmFjZQp0ZW5ldAptb25rZXkgaXNsYW5kCmNpcmNsZXQKdGhpZ2ggc2tpbgpmdWxsIGJvZHk7CmNvd2JveSBiZWJvcApiZWtzaW5za2kgaW1wYXN0byBwYWludGluZwpnbG9vbXkgYmFja2dyb3VuZApoZWF2eSBtYWtldXAK44Ki44OL44OhCmluc2FuZWx5IGJlYXV0aWZ1bApkaWdpdGFsIG1lZGlhCmxpZ2h0IHRyYW5zcG9ydCBzaW11bGF0aW9uCm4gNgpwcmUgcmFwaGFlbGl0ZQp0ZWEKZmVuZyB6aHUgY29uY2VwdCBhcnQKd2FyIHBhaW50CnR5bGVyIGR1cmRlbgpkb24gZHJhcGVyCnByb2R1Y3QgcmVuZGVyCjRrIGhpZ2ggcXVhbGl0eQp2aXZpZCBjb2xycwpwb3J0cmFpdCBvZiBiZWF1dGlmdWwgd29tYW4KbG9uZyBtZXNzeSBoYWlyCmJpbGxvd2luZyBzbW9rZQpicmFzaApseWluZyBvbiB0aGUgZ3JvdW5kCm1hZ2ljIHRoZSBnYXRoZXJpbmcgY2FyZCBhcnQKZGV0YWlsZWQgdHJlZXMgYW5kIGNsaWZmcwplYXJ0aHkKZ2lybHMKdW5kZXJ3YXRlciBsYW5kc2NhcGUKdmVyeSB2ZXJ5IGFuaW1lISEhCmZlbWFsZSBhcnQKZ29sZGVuIHJheXMKd2l0aCBzdW5zZXQKci9hcnQKc3BhY2UgaHVsawpjb3ZlcmVkIGluIG1vc3MKY2hyb21vc3RlcmVvcHNpcwpoeWdnZQpibHVlIHNob3J0IGhhaXIKMTkwOApub2lyIHN0eWxlCmdvdGhpYyBkcmVzcwp2ZXJ5IGxpZ2h0IGZyZWNrbGVzCnZlcnkgdmlicmFudApibGluZGluZyBiYWNrbGlnaHQKcmVhbGlzdGljIHNob3QKY3JvdWNoaW5nCmJsYWNrIGFuZCBibHVlCnN0YXJmaWVsZApwcmVjaXNpb25pc3Qgc3R5bGUKcHJvZmVzc2lvbmFsIGNvbXBvc2l0aW9uCmZsb29kCnN1cGVyIG1vZGVsCmV4cG9zZWQgaW5uZXIgc3RydWN0dXJlCmNvbG91cml6ZWQKaCAxMDI0CmFkcmlhbmEgZHhpbQpzeW50aHdhdmUgYWVzdGhldGljCmJ1c2h5IGdyZXkgZXllYnJvd3MKd2VhcmluZyBhIGdyZXkgd2l6YXJkIGhhdApoZSBpcyBhIG1hZCBvbGQgbWFuCnRvbWJzdG9uZXMKc2lnbWEgODUgbW0gZi8xLjQKa3lvdG8gYW5pbWF0aW9uIHN0dWRpbwpjaGFybGVzIG1vbmV0CmFkdmVudHVyaW5nIGdlYXIKZ29yZQp8fCB2ZXJ5IGFuaW1lCmdtb2QKd2l0aCB2cmF5CmJsZW5kIGVsZW1lbnRzCnJvYmUuIGV4dHJlbWVseSBoaWdoIGRldGFpbHMKc3BsaXQgaGFpciBkeWUKY2xhcml0eQpmdXJyCmZ1amlmaWxtIHJlYWxhCmdyaXR0eSBhdG1vc3BoZXJlCnN1cnJlYWxpc20gc3R5bGUKaW4gdGhlIGdvbGRlbiBob3VyCnBob3RvcmVhbGlzdGljIGFuaW1lCmxldCdzIGJlIGZyaWVuZHMKcmVwdGlsaWFuIHdhcnJpb3IKc2hlaWxkCmZhbnRhc3kgYXRtb3NwaGVyaWMgbGlnaHRpbmcKZWxsZSBtYWdhemluZQpuYXNhIHRydWUgY29sb3IgcGhvdG9ncmFwaAoyZCBzaWRlIHZpZXcKZ2FtaW5nIHBjCnRoZSBncmF2ZXlhcmQKcGVuc2l2ZSBleHByZXNzaW9uCnNoYXJrcwpmdXNpb24Kd2VhcmluZyBhIGtpbHQKbWVkaXVtIGZvcm1hdCBjYW1lcmEKZG9mdXMKcGxheWJveQpzbGl0IHB1cGlscwpwcm9mZXNzaW9uYWwgcHJvZHVjdCBwaG90b2dyYXBoeQpyZWZsZWN0aW5nIHBvb2wKY3JlZXB5IGhkIDRrCml2YW4gc2hpc2hraW4gYW5kIGdyZWcgcnV0a293c2tpCnJlYWwgZW5naW5lIDUgY2luZW1hdGljCnNjYXJyZWQgZmFjZQpnbGVhbWluZyB3aGl0ZQpibGFjayBmZWF0aGVycwpjbG9hay4gZXh0cmVtZWx5IGhpZ2ggZGV0YWlscwpibGFjayBtZXRhbApmYWl0aApuZXV0cmFsCnR1bmRyYQp3aXRoIGxhcmdlIGJyZWFzdHMKd2l0aCBicmlnaHQgYmx1ZSBleWVzCnNpbXBsZSBjb2xvcnMKYmF1aGF1cyBzdHlsZQpkaXNjYXJkZWQgbWVjaHN1aXQgaW4gYmFja2dyb3VuZApzb3ZpZXQgdG93bgphcnRnZXJtLiBoaWdoIGRldGFpbApsb3RyKQpiZWF1dGlmdWwgYnJ1c2ggc3Ryb2tlIHJlbmRlcmluZwpqZWxseWZpc2ggcHJpZXN0ZXNzCmh5cGVyIHBob3RvIHJlYWxpc3RpYyA4ayBoZCBoZHJpCm9sZCBjYW1lcmEKbG9va2luZyBkb3duIGZyb20gYWJvdmUKY3liZXJwdW5rIHZpYmUKYW5jaWVudCBhcnQKdmVyeSByZWFsCndpbm5pbmcgYXdhcmQgcGllY2UKcnlhbiBkeWFyCmNvbXBsZXRlIGJvZHkKcmFnaW5nCmR1bmUgc3R5bGUKbWVjaGEgcm9ib3QgZGV0YWlscwppbiB0aGUgZnV0dXJlCmxpZ2h0bmluZyBzdHJpa2VzCnJpY2hhcmQgc2lnYW1hbmkKZnJ1aXQgYm93bAoxOTc0CnNwYWdoZXR0aWZpY2F0aW9uCmZsZW1pc2ggcGFpbnRpbmcKcHJvZmVzc2lvbmFsIGdyYXBoaWMgZGVzaWduCjE5MjMKYmVybGluCnByb2Zlc3Npb25hbCBwcm9kdWN0IHNob3QKbWVkaWJhbmcKaG90IGFpciBiYWxsb29ucwpmMjIKc3ludGh3YXZlIGRpZ2l0YWwgYXJ0CnRvcCBkb3duIHBlcnNwZWN0aXZlCmxvbmcgc3dvcmQKbWVzcwpwcmVjaXNpb24Kc2NyZWFtaW5nIGluIHBhaW4KY2hhcmxlcyBib3dhdGVyCmFtb2d1cwphZGFtIGFuZCBldmUKbHVtaW5lc2NlbnQgZXllcwpwaW5rIGxpcHMKc3BlYXJzCnN3ZWF0aW5nIGhhcmQKYXJ0aXN0aWMgaW50ZXJwcmV0YXRpb24KYWxpY2UgaW4gd29uZGVybGFuZCB0aGVtZQpkaXN0YW50IGZ1dHVyZQptZXRybwpkZXNlcnQgaW4gdGhlIGJhY2tncm91bmQKZHJhbWF0aWMgZHluYW1pYyBsaWdodGluZwphbWVlcmEgYWwtdGF3ZWVsCmFkYW0gaHVnaGVzCihydXN0KQpzdGV0aG9zY29wZQp3aWVsZGluZyBhIHN3b3JkCmZpbmUhISEgbGluZXMKZmxvYXRpbmcgYm91cXVldHMKYnJvd24gbWVkaXVtIGhhaXIKaHlwZXIgcmVhbGlzdGljIDhrCmJlYXV0aWZ1bCB3ZWF0aGVyCmdlb2xvZ3kKYW1hemluZyBhcnR3b3JrCmh1bGsgaG9nYW4KYW4gb2xkCmdvbGRlbiBhbmQgY29wcGVyIGFybW9yCmFuIHVsdHJhIGhpZ2ggZGVmaW5pdGlvbgp3aW50ZXIgc2V0dGluZwo4ayBpbWFnZSBxdWFsaXR5CndlYXJpbmcgYW5nZWwgaGFsbyBjb3ZlcmVkIGZhY2UKdGhlIHByZWRhdG9yCnNjcCBmb3VuZGF0aW9uCnplcm9jaGFuCmV5ZXMgb3Blbgp0ZWtrb25raW5rcmVldAp0cmFpbGVyCmZsb2F0aW5nIHRocm91Z2ggc3BhY2UKdG94aWMKYXBvY2FseXB0aWMgY2l0eQpvaWwgY29sb3JzCnF1YWxpdHkgbGlnaHRpbmcKbWlkc2hvdAp3aGl0ZSBhbmQgYmx1ZQp0aGUgYmVzdApkZXRhaWxlZCBzY3JlZW5zaG90Cm9ic2lkaWFuIHBvbWVncmFuYWRlCmxlYXRoZXIgY2xvdGhpbmcKY29sb3JhZG8KaW5zZWN0b2lkCndvanRlayBiZWtzaW5za2kgbWFjbWFudXMKcm9tYW50aWNpc20gbGFpbgppbiBnbGl0Y2hhcnQgamFyZWQgZm9yZXN0CmppYQpmcmFjdGFsIGFwb3BoeXNpcwpsdW1pbmlzbSB3b29kcwpkcmlwcGluZyBibHVlIG5hdHVyYWwgaXdha3VyYQphbmltZSBoaS1mcnVjdG9zZQpmaW5uaWFuIGluIGdydW5nZXJvY2sgYWxpZW4gc2t5Cm9mIG9mIGF1cmEgaGQKaXdha3VyYSBsYWluCnRoZSBhbnRsZXIgcGVvcGxlCmRpZ2l0YWwgZGVzaWduCmdseXBocwpyYWlsaW5nIGFsb25nIHRoZSBjYW5hbApiZXN0IHNjZW5lCm5lYnVsYSBpbiBiYWNrZ3JvdW5kCm5peHJpCjo6IG1hZGlzb24gYmVlcgpzd2l0emVybGFuZApmdWxsIGJvZHkgYW5kIGZhY2UKcHJpc29uIGJhY2tncm91bmQKZG9vcnMgdGhhdCBhcmUgY29zbWljIHBvcnRhbHMKaW4gYSBkYXJrIGFsbGV5Cm1hZGhvdXNlIGluYwpnYXJkZW5zCmhhbmRzIGJlaGluZCBiYWNrCmJyZWl0bGluZwpwdW5rIG91dGZpdApsaWFtCmJleW9uY2UgZ2l2aW5nIGEgY29uY2VydApmdWppZmlsbSB4LXQzCmJ1Z3MgYnVubnkKNGsgZGV0YWlscwprb2RhY2hyb21lIHBob3RvZ3JhcGgKZXh0cmVtZWx5IGRldGFpbGVkIGZ1cgpzdGVwaGVuIGdhbW1lbGwgc3R5bGUKaGRyIDRrCm1vb24gaW4gdGhlIG5pZ2h0IHNreQpvZmZpY2lhbCBzY3JlZW5zaG90CmJsYWNrIHN1bmdsYXNzZXMKY3JhYnMKd2VhcmluZyBhIHBpbmsgZHJlc3MKZmFibGUKY3JlZXB5IGhvcnJvcgpicnVjZSBsZWUKYm90dG9tIG9mIG9jZWFuCmJpb2xvZ2ljYWwgaHVtYW4gZmFjZQpzbmFrZSBvaWwgc2tpbgpyaW0gbGlnaHRzIHB1cnBsZSBhbmQgZ3JlZW4KcGVyZmVjdCBmYWNlIHByb3BvcnRpb25zCnNlcnZpbmcgaGFwcHkgbWVhbHMKY3lhbiBkaW1lbnNpb25hbCBsaWdodApyb2NvY28gb2lsIHBhaW50aW5nCmNoaW5lc2UgZHJhZ29uCmFuY2llbnQgY2hpbmEKZ2l2aW5nIGEgc3BlZWNoCjNkIHByaW50ZWQKbWV0aWN1bG91cyBicnVzaCBzdHJva2VzCnN0YW5kaW5nIGluIGEgZm9yZXN0CnVuaW1hZ2luYWJsZQphY2VzY2cgY29sb3JzcGFjZQp3aGl0ZSBmYWNlcGFpbnQKY29taWMgYm9vayBwYW5lbHMKYmVrc2luc2tpIHN0eWxlCmVlcmllIHZpYmUKZG9tZXMKZ3Jhc3N5IGZpZWxkCm9wZW4gbmVnYXRpdmUgc3BhY2UKc2NyZWVuc2F2ZXIKNGsgYW5pbWUKbWluaWF0dXJlIGJlYXIKcG9wZQphdXRvZGVzayBzb2xpZG93a3JzIHZpc3VhbGl6ZQpzb2xhciBwdW5rCnNjaS1maSBzZXR0aW5nCmRlc3Ryb3lpbmcgY2l0eQplbW9qaQpmYXNoaW9uIG9mIHRoZSBmdXR1cmUKc2hhZGVkIGluayBpbGx1c3RyYXRpb24Ka2lkcwpzdGFyIHRyZWsgdGhlIG5leHQgZ2VuZXJhdGlvbgpjaXJjdWxhciB3aGl0ZSBmdWxsIG1vb24Kb3B0aW1pemF0aW9uIDRrIDhrIHVsdHJhIGhkCmdyZWVuIGFuZCBwdXJwbGUKdGF0dG9vZWQgZmFjZQplZXZlZQpqb3NlcGggbWljaGFlbCBsaW5zbmVyCmVsZGVucmluZwppbiBhIGNsYXNzcm9vbQphYmFkZG9uIGFuZCBtYWdhbGkgdmlsbGVuZXV2ZQpnaGlibGkgbW9lYml1cwpicnVjZSB3ZWJlcgpnb2F0CnNwaWt5IGhhaXIKYnVuZ2llCmh1cnQKMjAwOSkKc2F0dXJuIGRldm91cmluZyBoaXMgc29uCmNvbG9yIG1hbmdhIHBhbmVsCm5hdWdodHkKZmFudGFzeSBtYXAKZ3JhdmV5YXJkIGJhY2tncm91bmQKcGFudHlob3NlCm91dGZpdC1vZi10aGUtZGF5CmZhc2hpb24gb3V0Zml0Cmluc3BvCnN0cmVldCBvdXRmaXQKcGFpbnQgdG9vbCBzYWkKai5jLiBsZXllbmRlY2tlciB3bG9wCmJvdHRsZXMKbGFuZHNjYXBlIHZpZXcKc2ltcGxlIHdoaXRlIGJhY2tncm91bmQKcmVhbGlzdGljIGRldGFpbGVkIHBob3RvZ3JhcGh5CndoaXRlIHBhbnRzCndhdGVyIGxpbGllcwpzb21icmUKY2hpbmEgdG93bgpodWxsCmdsYWRvcwpzdHlsZSBvZiBhbmNpZW50IHRleHQKcmlmbGVzCmludHJpY2F0ZSBjbG90aGluZwplcm5lc3QgZ2FyeSBneWdheCBmYWNlCmphaW1lIGphc3NvCmdlbmVyYWwgZ3JpZXZvdXMKbnlhcmxhdGhvdGVwCnJldHJvIGFydApkZXRhaWxlZCA4awpuYXR1cmFsIHRvbmVzCmRhcmsgYXVyYQp6YnJ1c2ggYXJ0Cndhcm0gc21pbGUKZ29yZG9uIHJhbXNheQpkZWxpZ2h0ZnVsCmFudG9pbmUgcGllcnJlIG1vbmdpbgpncmFjZSBrZWxseQpzcGxhc2hzY3JlZW4KdmlsZQpndXkgZmllcmkKZHVud2l0Y2ggaG9ycm9yCmZsb3dlciBwb3dlcgp0cmVhc3VyZXMKb3ZlcnZpZXcKd2VhcmluZyBzdWl0CnBsYXlpbmcKYmxvb2RzaG90IGV5ZWJhbGxzCmhlcm1lcyB0cmlzbWVnaXN0dXMKY3VydmVkCmhvdXIgZ2xhc3MKemVpc3MgMjRtbSBmMi44Cm1lcmNpbGVzcwppdQppY2FydXMKZ3Jhdml0eSBmYWxscyBzdHlsZQp3aGVyZSBhIGxhcmdlCmJlYXRpZnVsbHkgbGl0Cm1hcmJsZSBjb2x1bW5zCmxva2kncyBwZXQgcHJvamVjdApwb2xhcm9pZCBwaG90b2dyYXBoeQpyZW5haXNzYW5jZSBhcnQgc3R5bGUKY2FuZGlkIHBob3RvZ3JhcGgKYW5pbWF0ZWQgbW92aWUKZHVjawptb2Rlcm4gYW5pbWUgc3R5bGUKcGFya291cgpqaW54IGZyb20gbGVhZ3VlIG9mIGxlZ2VuZHMKbGltaXRlZCBlZGl0aW9uCnJlYWxpc3RpYyBjb2xvcgphdWJyZXkgcG93ZWxsCndlYXJpbmcgcGxhdGUgYXJtb3IKc3VtbWVyIG9mIGxvdmUKc3Vuc2V0IGJlYWNoCmluY29tcHJlaGVuc2libGUgZGV0YWlsCnF1ZW50aW4gdGFyYW50aW5vIG1vdmllIHBvc3RlcnMKbGFtYm9yZ2hpbmkKbGFyZ2UgZGlvcmFtYQphYnN1cmRpc3QKbWFnaWNhbCBhcnRpZmFjdApoeXBlcnJhbGlzdGljCnBsYXlncm91bmQKdW5lYXN5IGF0bW9zcGhlcmUKbGluawozIGNvbG91ciBwcmludApndWlsbGF1bWUgdGhvbGx5Cmd0aGwuYXJ0CnNraWVzCmh1Z2UgZnV0dXJpc3RpYyB0ZW1wbGUgY2l0eQpzcGFjZSBpbiB0aGUgYmFja2dyb3VuZApoZWFkIGFuZCB3YWlzdCBwb3RyYWl0Cm1hcmlseW4gbWFuc29uCmxpZ2h0cyBpbiBkaXN0YW5jZQpkcmFtYXRpYyBwb3J0cmFpdApsYXlvdXQKZGVzb2xhdGUgbGFuZAp2aWN0b3Jpb3VzCmNoaWxkcmVuIGJvb2sgaWxsdXN0cmF0aW9uCmZ1bGwgYm9keSBzaG90cwptaWNyb3Njb3BlCmRhZ29uCmJvbnNhaSB0cmVlCm1vbmsKd2lsbGlhbSBzIGJ1cnJvdWdocwpiaWN5Y2xlCnNtb290aCBhcnQKc25vdyB3aGl0ZQpibG9vZGJvdXJuZQpjb25jZXB0IGFydCAyMDIyCmJ1c2h5IHdoaXRlIGJlYXJkCnZlcnkgYWNjdXJhdGUgcGhvdG8KdmVyeSBjb2hlcmVudCBpbWFnZQpzZWxmaXNobmVzcwpvcHRpbXVzIHByaW1lCmV4cGxvc2lvbnMgb2YgcG93ZXIKdGh1bmRlcm91cyBiYXR0bGUKZXhwbG9zaW9uIG9mIGNvbG9yZnVsIGZsb3dlcnMKc3RhbmRpbmcgaW4gYSBoZXJvaWMgZmlndXJlCmluZmluaXR5IHBvb2wgbWlycm9ycwptb2Rlcm4gcGhvdG9ncmFwaAp1cmJhbiBlbnZpcm9ubWVudApmLzUuNgpkcmVhbSBhdG1vc3BoZXJlCmNnYQp2aW50YWdlIGlsbHVzdHJhdGlvbgpoYWlyIGxvb2tzIGxpa2UgYSBoZWxtZXQKaW4gYmF0bWFuIG1vdmllIHN0aWxsIGNpbmVtYXRpYwpwb3J0cmFpdCBmcm9udCBmYWNlIHJlZmVyZW5jZQpwb3J0cmFpdCBvZiBnYW5kYWxmCmt1YnJpYyBzdGFyZQptdXNjdWxhciB0b3JzbwpzbW9vdGggYmxlbmRpbmcKb3JpZW50YWxpc3QgcGFpbnRpbmcKc3RyYWlnaHQgbm9zZSEhIQp0aXJlZCBmYWNlCmhvb2tlZCBub3NlCnBvcnRyYWl0IG9mIGFuIGVsZgpmYWNlIGZvY3VzCmFzIGFuIG92ZXJ3YXRjaCBjaGFyYWN0ZXIKb3V0bGluZWQgYXJ0CmplYW4gamFja2V0CmZ1biBzbWlsZQpkZWF0aCBzdHJhbmRpbmcgZ2FtZQpubyBncmF2aXR5CmxvdyBzYXR1cmF0ZWQgY29sb3JzCmhkIGRpZ2l0YWwgcGhvdG9ncmFwaHkKdGhlIGV5ZSBvZiBzYXVyb24KdmljZSBjaXR5CnZlaW55CnJpbWlnaHQKcmVuZGVybWFuIHJlbmRlcgpzaXR0aW5nIG9uIGEgc3Rvb2wKZGlzY28KdGFyZGlncmFkZQptaW5kIGNvbnRyb2wKZ2hvc3RidXN0ZXJzCnJvcGUgYnJpZGdlcwpjb21pYyBjaGFyYWN0ZXIKZmFjZSBmYWNlIGZhY2UKc3VycmVhbCBoeWJyaWQgYW5pbWFscwpzdXNoaQpsYXNlciBiZWFtcwpob2xkaW5nIGEgdHJpZGVudAphcmNoZWQgYmFjawp0ZWVwZWUKdmhzIGVmZmVjdAptYXggYWNjdXJhdGUKbW92aWUgY29uY2VwdApyZWxheGVkIHBvc2VzCnRoZSBjcmVhdGlvbiBvZiBhZGFtCmNyb3duIG1hZGUgb2YgYm9uZXMKaW5jbHVkaW5nIGEgbG9uZyB0YWlsCmVyYXNlcmhlYWQKaGFucyB6aW1tZXIgc291bmR0cmFjawp2ZXJ5IGRldGFpbGVkIHJlbmRlcgprbmVlIGhpZ2ggc29ja3MKdGhlIHdvb2RzCmF1Y3Rpb24gY2F0YWxvZ3VlIHBob3RvCnN0YXJrIGxpZ2h0CnBob3RvcmVhaWxzdGljCmRpYXBoYW5vdXMKdHJlZWJlYXJkCnR1cGFjCnN1cnJlYWwgaWxsdXN0cmF0aW9uCmRzbHIgaGRyIDhrCnZyY2hhdAp2ZXJ5IGJlYXV0aWZ1bCB3b21hbgpib29rIGNvdmVyIGFydAp3YWx1aWdpCmNyeWluZyBhbmQgd2VlcGluZwpmbG9vZGxpZ2h0CndlYXJpbmcgYSBibGFjayBzdWl0CnlhdXRqYQpmYWludCBkdXN0IGluIHRoZSBhaXIKaGlnaGx5IGluIGZvY3VzCmluc2FuZWx5IGRldGFpbGVkIGludHJpY2F0ZQp0YWxsIHNwaXJlcwptYW5ldAozIGQgbmZ0CjggayB0ZXh0dXJlcwpmbG93aW5nIGFxdWEgc2lsawpmdWxseSBmdW5jdGlvbmFsCmdlb2YgZGFycm93IGFydApsdXNoIGp1bmdsZQpqYW1taW5nIHRvIG11c2ljCndpdGggYSBnYXJkZW4gYXMgZm9yZWdyb3VuZApvYWsgdHJlZQp2b2xjYW5vZXMKYXZhbnRnYXJkZQpmYWxsaW5nIGNoZXJyeSBibG9zc29tIHBlZGFscwpzZXJlbmEgbWFseW9uCm1heGltIHNoaXJrb3YKZ2xhcmVzCmJyaWdodCBjYW1lcmEgZmxhc2gKZ3JlYXQgd2hpdGUgc2hhcmsKaW4gcHJvZmlsZQpqdW5nbGVwdW5rCndlYXJpbmcgYSB3aGl0ZSBkcmVzcwpuZW9uIHBhc3RlbCBjb2xvciBwYWxldHRlCmJlbiByaWRnd2F5Cm1vdmllIGxpZ2h0cwpmYXNoaW9uIHNob3cKdWx0cmFmaW5lIGh5cGVyZGV0YWlsZWQKaGFyb2xkIG5ld3RvbgpiZW5pZ24gYW5kIG51bWlub3VzCmRhcmsgbXVzaHJvb20Kc25vd3kgYmFja2dyb3VuZApndGEgYXJ0CnRpbWUgdm9ydGV4IGluIHRoZSBiYWNrZ3JvdW5kCmNvbGQgdG9wIGxpZ2h0aW5nCm1heHdlbGwgYm9hcwplYXJ0aHRvbmVzCnJhZiBncmFzc2V0dGkKZ3JlYXQgbWlncmF0aW9uCmVkZGllIGRlbCByaW8KZGFuaWVsIHJpZGd3YXkga25pZ2h0CnN1bnJheXMgc2hpbmUgdXBvbiBpdApkcmFtYXRpYyBlYXJ0aCBjb2xvcnMKdW5yZWFsIGVuZ2luZSAzIGQKYmx1ZSBzaGFkb3dzCnNsb3ZlbmlhbgppbnRyaWNhdGUgbGlnaHRzCmluIGtpbW9ubwpzdHVubmluZyEKd2VsbCAtIGRyZXNzZWQKYmlsbCByaXplcgphdCB0aGUgc3RvbmUgcnVpbnMKaW50cmljYXRlIG1ldGFsCmNhdWdodCBvbiBzZWN1cml0eSBjYW1lcmEKbWFyYyBuZXdzb20KYmxvbmQgbHRkCnRpbHQgLSBzaGlmdCBwaG90b2dyYXBoeQpsb2Fkc2NyZWVuCmplYW4gY2hyaXN0aWFuIGJpdmlsbGUKdGFrZW4gb24gYSB3dyAyIGNhbWVyYQpzaW5nbGUKZGFyayEhIQptb3ZpZSBmb290YWdlCmFkdmVydGlzaW5nIHBob3RvCnZlcnkgZHVsbCBjb2xvcnMKdHdpcmxpbmcgc21va2UgdHJhaWwKMyBkIHVucmVhbCBlbmdpbmUgcmVuZGVyCndpdGggcmVkIGJlcnJpZXMgYW5kIGljaWNsZXMKYmlnIHdpbmRvdwpmbGFtaW5nCm1pbmltYWwgbW92aWUgcG9zdGVycwpsYXJnZSBkaWZmdXNlZCBsaWdodAp0aHVuZGVyIGFuZCBsaWdodG5pbmcKMSA2IDogOSByYXRpbwpmb2dneSBmb3Jlc3QKc2hpbnlhIHRzdWthbW90bwpzY2kgLSBmaSBtb3ZpZSBzdHlsZQpzdXJyZWFsaXN0aWMgcGFpbnRpbmcKbG90cyBvZiBwbGFudHMKY29zbWljIGF0bW9zcGhlcmUKZGFyayBjbGltYXRlCmdyaW0gZmFjaWFsIGV4cHJlc3Npb24KMSA5IDIgMCBzIG1vbm9jaHJvbWUgc25hcHNob3QKZnVsbCAtIHNob3QKbWV0YWwgcGFuZWxzCnZpZXcgZnJvbSBiYWNrCnBhc3RlbCBjb2xvcnMgc2NoZW1lCnRpZ2h0IHB1c2ggdXAgYnJhCmFzIGEgZCAmIGQgY2hhcmFjdGVyCmJsdWUgcm9iZQpzeW1tZXRyaWNhbCB3aW5ncyBvbiBiYWNrCmJyeWNlIDNkCmZ1bm55IG1lbWUKcHJvZ3JhbW1pbmcKaGlnaC1lbmQKZmFzaGlvbiBzaG9vdGluZwpmYWxsIHNlYXNvbgpidWQgc3BlbmNlcgpzaG93ZG93bgp2aHMgZm9vdGFnZSBzdGlsbApyZWFsaXN0aWMgZmFjZSBhbmQgYW5hdG9teQpwaW5rIGFuZCB0ZWFsCnNob3Qgb24gaXBob25lIDEgMyBwcm8KYmxhY2sgc2t5IGJhY2tncm91bmQKY2FyYm9uIGZpYmVyCm1pY2hhZWwgaHVzc2FyCmZ1bGwgYmxvb20KY2FycnlpbmcgYSBzd29yZApzaGFycCBkaWdpdGFsIHBhaW50aW5nCmRhbiBzZWFncmF2ZQp3aXRoIGJsYWNrIG1hZ2ljIHBvd2VycwpibGFkZXJ1bm5lciAyIDAgNCA5CmNvbm5lY3RvcgpmcmFuY2lzY28gZ295YSBwYWludGluZwp0aGljayBibGFjayBzbW9rZSBiaWxsb3dpbmcKY29taWMgYm9vayBhcnQgc3R5bGUKZmxvb3JzCnNocm91ZGVkCnZpYnJhbnQgZXBpYwpqbXcgdHVybmVyCmR5bmFtaWMgY29sb3JmdWwgYmFja2dyb3VuZApwYWxlIGJsdWUgYmFja2xpZ2h0CndpdGggY3V0ZSAtIGZpbmUgLSBmYWNlCnBhbnRzCnJ1Z2dlZCB8IHN0YXJzCnNrZXRjaHkKaW4gdGhlIGRlZXAKc3RyZXNzZnVsCm1vYWIKYmFkYXNzIHBvc2UKc2FuZG1hbiBraW5nZG9tCnByb2Zlc3Npb25hbCBhcnR3b3JrCnJheXMgb2YgbGlmZQppbiBhIGRhcmtseSBsaXQgbGFib3JhdG9yeSByb29tCm1hZGUgb2Ygd2F0ZXIKMSA5IDkgOQpjeWJvcmcgYWlyY3JhZnQgcGFydHMKaW50cmljYXRlbHkgY2FydmVkIGFudGlxdWUgYm9uZQpjb2xvcmZ1bCBwaG90bwpmdWppY29sb3Igc3VwZXJpYSAxIDYgMCAwIHBob3RvCnNwYWNlIGNvbG9yIHNjaGVtZQphbiBhbGllbgpjaHVyY2ggY2F0aGVkcmFsCmVsZGVuIHJpbmcgaW5zcGlyZWQKb3Zlcmdyb3duIHdpdGggb3JjaGlkcwpndWFuZ2ppYW4KZHlpbmcgZWFydGgKc29mdGFpciBjZW50ZXIgbGFuZHNjYXBlCmZsb3dpbmcgd2hpdGUgZHJlc3MKc2hlIGlzIGhvbGRpbmcgYSBjYXQgaW4gaGVyIGFybXMKbmVvIGdvdGhpYwpkYXJrIHNvdWxzIGNvbG91ciBzY2hlbWUKaG9sbG93CmFydGh1ciByYWNoaGFtCmV4aGF1c3RlZApzaGFkaW5nIGluIHZyYXkKY29oZXJlbnQgYW5kIHNtb290aAp0d2lsaWdodCA7IGRpZ2l0YWwgcGFpbnRpbmcKbmF0dXJhbCBicm93biBoYWlyCmNpbmVtYXRpYyBsaWdodG5pbmcgLSBoIDcgNiA4CmluIGEgYnV0Y2hlciBzaG9wCmNocmlzIHJlZGZpZWxkCmxvb3NlIHBhZ2VzCmNydXNhZGVyIGtpbmdzCnBhbmF2aXNpb24gcGFuYWZsZXgKaXNvIDEgNiAwIDAKdHdvIG1vb25zIGluIHRoZSBza3kKd3JpbmtsZWQgbXVzY2xlcyBza2luCm11c2N1bGFyIQpzdGFuZGluZyBpbiB0aW1lcyBzcXVhcmUKZGV0YWlsZWQgZHJlYW1zY2FwZQpzdGVmYW4ga29pZGwKcm9hZHNpZGUKZGV0YWlsZWQgZ2FtZSBhcnQgaWxsdXN0cmF0aW9uCmltcGFjdGZ1bCBtYXN0ZXJwaWVjZQphcnQgbm91dmVhdSBqdW5nbGUgZW52aXJvbm1lbnQKaGlnaGx5IGRldGFpbGVkIG9pbCBvbiBjYW52YXMKd2F0ZXIgbWFuaXB1bGF0aW9uCnNvbGFycHVuayBzdHlsZQpyb2NvY28gZHJlc3MKY3Jpc3AgOCBrIGxpbmUgd29yawpyaXZlciB3aXRoIGxvdyBoYW5naW5nIHBsYW50cwpjaGlobyBhb3NoaW1hIGNvbG9yIHNjaGVtZQpscG90eQphY25lCnN0YXRlIG9mIHRoZSBhcnQKb3NjYXIgd2lubmluZwpyZWZyYWN0aW9ucyBvbiBsZW5zCm1vZGVybiBpbnRlcmlvciBkZXNpZ24KYmx1ZSBhbmQgZ3JlZW4gY29sb3Igc2NoZW1lCnVsdHJhIGNsZWFyIGRldGFpbGVkCnN0dW5uaW5nISBjb25jZXB0IGFydAppbnRyaWNhdGVseSBkZXRhaWxlZCBtYXJraW5ncwpyZWxpYwpkaW5lcgpkYXZlIG1ja2VhbiBpbmsgZHJpcHMKZGlnaXRhbCBnbGl0Y2hlcyBnbGl0Y2hhcnQKOCBrLiB2b2x1bWV0cmljIGxpZ2h0aW5nLiBkYXJrCnNvdWwgY2FsaWJ1cgpwZXlvdGUgY2FjdHVzIGRlc2VydApiYXJvcXVlIHJlbmFpc3NhbmNlLiBtZWRpdW0gc2hvdApndW5tZXRhbCBncmV5CiggKCAoIGVkd2FyZCBob3BwZXIgKSApICkKaHIgZ2VpZ2VyCmN1cnNlZCBwaG90b2dyYXBoeQpwYnIgdGV4dHVyZQpoZWF2ZW5seSBsaWdodHMKdGhpY2sgb3V0bGluZXMKc3lkbmV5IG1vcnRpbWVyIGxhdXJlbmNlCmxvdyAtIGtleSBsaWdodGluZwpwaWVycmUgcGVsbGVncmluaSBhbmQgYXNoIHRob3JwCmppbiBraW0KdG9reW8gbXVyYWwKc3Bpcml0dWFsaXNtCnVuaGluZ2VkCjIwMDggY2luZW1hdG9ncmFwaHkKcmV0cm8gc2NpIC0gZmkgbW92aWUKYmFybgoxIDkgNyA0CndoaXRlIGJhbmRhZ2VzIG9uIGZpc3RzCndhdnkgbG9uZyBibGFjayBoYWlyCnhyYXkgbWVsdGluZyBjb2xvcnMhIQpob29kIGFuZCBzaGFkb3dzIGNvdmVyaW5nIGZhY2UKcGFsYWRpbiBhcm1vcgpibGFjayByb2NrIHN0YXR1ZSBtYXRlcmlhbApuaWdodCBjbHViCm92ZXJncm93biBncmFzcwpyb3VuZCBuYXJyb3cgY2hpbgpjdXJseSBibGFjayBoYWlyCjE3dGggY2VudHVyeSBvaWwgcGFpbnRpbmcKbWFkZSBvZiBpY2UKbWFnYXppbmUgY29sbGFnZSBzdHlsZQpjYWJpbmV0cwp1Z2x5IGZhY2UKc3RyZWV0IGxpZ2h0CjggOCA4IDgKYmxhY2sgY2xvdWRzCjhrIDNkIHJlYWxpc20Kc3R5bGUgb2YgeW9qaSBzaGlua2F3YQpzaGlmdHkKaW5zaWRlIGEgaGF1bnRlZCBkZXN0cm95ZWQgaG91c2UKd2lkZSBhbmdsZSBzdHVkaW8gc2hvb3QKc3BhcmtsZXMgaW4gdGhlIGFpcgptYWdpYyBhZXN0aGV0aWMKYXJraGlwIGt1aW5kemhpIHBhaW50aW5nCmdhbGFjdGljIG5lYnVsYQpkcmFtYXRpYyBtb3ZpZSBzdGlsbAphc3ltbWV0cmljYWwgY29tcG9zaXRpb24KcGxhdG9uaWMgZm9ybXMKc2ltcGxlIGJydXRhbGlzdCBhcmNoaXRlY3R1cmUKYmVhdXRpZnVsIHNreSB3aXRoIGN1bXVsdXMgY291ZHMKcGFsZSBvcmFuZ2UgY29sb3JzCmluc2lkZSBhIG11c2V1bQpyZWFsaXN0aWMgYmVhdXRpZnVsIGZhY2UKbmVvcGxhc3RpY2lzbSBhcnQKa3lsZSBob3R6CmluIGEgbWFzc2l2ZSBjYXZlcm5vdXMgaXJvbiBjaXR5CmZhbmN5IHRvcApyZWFsaXNpdGMKa2lkcyBwbGFjZQoxIDkgOCAwIHMgY2dpCmJyb3duIGJlYXJkCmhpZ2hsYW5kcwpjaGlyYWwgbGlnaHRpbmcKY29hc3RhbApwYXN0ZWwgY29sb3VyIHBhbGV0dGUKZGVlcnMgYW5kIHJhdmVucwppbnRyaWNhdGUgZ29sZGVuIGZpbGlncmVlCm1hcmdpbnMKdHVybmVyIHBpcmFuZXNpCmN1dGUgcG9ja2V0cwpodWdlIGV4cGxvc2lvbnMKYmxhY2sgYW5kIHdoaXRlIGZpbHRlcgpzdHJvbmcgcmltIGxpZ2h0ISEhISEKd2lkZSBvcGVuIG1vdXRoCjMgZCByZW5kZXJlZCBpbiBvY3RhbmUKd2FybSBtb29kCjEgOSA4IDYKd2VhcmluZyBjb3JzZXQKY2xvd25zCmxvbmcgZHJlc3Mgd2l0aCBhcHJvbgp5b2cgLSBzb3Rob3RoISB5YWgKeWFoCnRvcCAtIGRvd24gcGhvdG8KYXJjaGFpYwpnbm9tb24KaGF1dGUgY291dHVyZSEgZmFzaGlvbiEKZHluYW1pY3MgbGlnaHRpbmcKYmVsbGEgaGFkaWQKYW1pZHN0IG5hdHVyZQpoYXJzaCBmbGFzaCBwaG90b2dyYXBoeQppY29uaWMgY2hhcmFjdGVyIHNwbGFzaCBhcnQKMSA5IDYgMCBzIHRlY2huaWNvbG9yCmJhY2tncm91bmQgb2YgY2xhc3NpYyByZWQgY2xvdGgKaHVoZCAtIDggawphZnJpY2FuIGZhY2lhbCBmZWF0dXJlcwpjb21pY3MgYXJ0CnVuZGVycGFpbnRpbmcKZGV0YWlsZWQgZ291YWNoZSBwYWludGluZ3MKZmxhc2ggcGhvdG8Kd2VhcmluZyBhIHRvcGhhdAptYXJ0YSBzeXJrbwpoaWdobHkgdHVyYnVsZW50CnNoYXJwIHNtb290aCBmb2N1cwp2aW5lIGhlYWRkcmVzcwpmaXJlIGZsYW1lcwpsb29raW5nIGRvd24gYXQgdGhlIHZhbGxleQpkb2luZyBhIHZpc2lvbiBxdWVzdAp1c3NnIGlzaGltdXJhCmZhZGVkIGZlZG9yYQpib2x0cwphcnQgcGFpbnRpbmcKZmFudGFzeSBjYXBpdGFsIGNpdHkKZGFyayBwYWludGluZwp0YWxsIGFyY2hlcwpmbG9hdGluZyBjYXJzCnRoaXJkIC0gcGVyc29uCm15Y2VuYSBhY2ljdWxhCmV4dHJhIHBpY2tsZXMgYW5kIG9uaW9ucwpsb29raW5nIHN0cmFpZ2h0IHRvIGNhbWVyYQpmcm9tIGF2ZW5nZXJzCmZhYnJ5IGdsZW5uCnNhdWwgYnJvbWJlcmdlcgpzYWludGx5CnkgMiBrIGN1dGVjb3JlIGNsb3duY29yZQpsYXJnZSByZWQgZXllcwpoYXJ1aGlrbyBtaWtpbW90bwpsYXRpbm8Kd2hpdGUgZnJlbmNoIGJvYgpjZWwgc2hhZGVkIGFuaW1lCmZzdG9wIG9mIDgKYW50aHJvcG9tb3JwaGljIGNyZWF0dXJlCnJlZmxlY3RpdmUgYXZpYXRvciBzdW5nbGFzc2VzCmZ1cnJhZmZpbml0eQp0d28gZmlndXJlcwpuYXJhbmJhYXRhciBnYW5ib2xkCmZhY2UgdmVyeSByZWFsaXN0aWMKZm9nZ3kgYXJlYQpjb2xvcmVkIGRvdHMKaXJpZGVzY2VudCBnbG93aW5nIGNoaXBzCm1vZGVybiBjYXN1YWwgY2xvdGhpbmcKd2VhcmluZyBtb2Rlcm4gZ290aGljIGNsb3RoZXMKZGV0YWlsZWQgZGlnaXRhbCBhcnR3b3JrCmh1bWFuIHN1Ymp1Z2F0aW9uCjU1bW0gcGhvdG9ncmFwaHkKYmx1ZSBhbmQgcHVycGxlIHBsYW50cwpsYXJnZSB2aW5lcwphdG9tCjcgMiAwIHAKMSA5IDYgMCDigJkgcyBmYXNoaW9uCmF5YW4gbmFnCnZhcmlvdXMgYmFja2dyb3VuZHMKbmludGVuZG8gNiA0IHNjcmVlbnNob3QKcGl4YXIgem9vdG9waWEuIDMgZCByZW5kZXJpbmcKcmFiYml0IHNoYXBlZCBoZWxtZXQKb24gdGhlIGNvdmVyIG9mIGEgbWFnYXppbmUKcmVkIGV5ZXMgd2lkZSBvcGVuCnNreWUgbWVha2VyCndlYXJpbmcgZXBpYyBiaW9uaWMgaW1wbGFudHMKaHVnZSBqdWljeSBsaXBzCmNyaW1zb24gYW5kIGdyZXkgY29sb3Igc2NoZW1lCmZhbnRhc3RpY2FsbHkgcGFzdGVsIGNvbG9ycwpvbmUgcGl4ZWwgYnJ1c2gKbGFrZSBibHVlCndpbmdzIG1hZGUgb2YgZ2xhc3MKdW5kZXJ3YXRlciBob21lCnJvc2VzIGFuZCB0dWxpcHMKYmVhdXRpZnVsIGFuaW1lIHdvbWFuCmxpZ2h0IHNob3cKd2l0aCBhcmNod2F5cwpjYXN0bGUgdG93bgptYWduaWZpY2lhbnQgbGFuZHNjYXBlCnNpbHZlciBlYXJyaW5ncwpnb2dvIGRhbmNlcgpmbG93ZXJpbmcgYnVkcwpzYW5kIGR1bmUgYmFja2dyb3VuZApiZWF1dGlmdWwgZWx2ZW4gcHJpbmNlc3MKZW5qb3lpbmcgdGhlIHdpbmQKYmVhdXRpZnVsIGZlbWFsZSB3YXJyaW9yCnNtYWxsIGhlYXJ0IC0gc2hhcGVkIGZhY2UKZmVtaW5pbmUgcHJvcG9ydGlvbnMKaGFsZiAtIGJvZHkKaHVkc29uIHJpdmVyIHNjaG9vbCBwYWludGluZwpzbW9rZSBiaWxsb3dpbmcgZnJvbSBjaGltbmV5CnNhbyBzdHlsZSBhbmltZQp3aXNweQp3ZXRhIGRpc25leSBwaXhhcgp3bG9wIGhkcgpiaWcgb3BlbiBlbGVjdHJpYyBleWVzCmFydCBub3V2ZWF1IGZhc2hpb24KZGVzdHJveWVkIGNhcnMKZ2xvd2luZyB3aXJlcwpibHVycnkgYW5kIHNoYXJwIGZvY3VzCmJpb3Nob2NrIGNvbmNlcHQgYXJ0CnpkemlzxYJhdyBiZWtzaW5za2kgYW5kIGdpZ2VyCmhpZ2ggZmFzaGlvbiBjbGFzc3kKcmVhbGlzdGljIHNoYWRpbmcgcGhvdG9yZWFsaXNtCnNtb2tlIGNvbWluZyBvdXQgb2YgdGhlIGNoaW1uZXkKZ2lybCBkYW5jaW5nIG9uIGNsaWZmCmJlYXV0aWZ1bCBibHVlIGxpZ2h0cwptaWRuaWdodCB6b25lCmluIGEgc2hhcGVzIGJhY2tncm91bmQKbWF0cml4ICkKdmFudGEgYmxhY2sKcHN5Y2hvIG1hZ2ljayBmdWNrIGl0IGluc2FuZQptYWplc3RpYyB3aW5ncwpibGFja3BpbmsKbWFueSBleG90aWMgY2FycwpsYXNlciBndW5zCmRvdWJsZSBleHBvc3VyZXMgb24gMzVtbSBmaWxtIQpjdXN0b20gZGVzaWduCm9ybmF0ZSBpbnRyaWNhdGUKYmlvbHVtaW5pc2NlbnQgY3JlYXR1cmUKYmlnIHNob3ZlbApkZXRhaWxlZCBzaGFkb3dzIGFuZCB0ZXh0dXJlcwpwb3dlcmZ1bCBwb3NlCmZhbnRhc3kgZ2FtZQpjaHJpc3RpYW4gc2FpbnQgcm9zYWNlCnJvdW5kIHNoYXBlZCBmYWNlCmJhc3RpZW4gZ3JpdmV0Cm1vZHVsYXIgZGV0YWlsZWQKcG9ydGFwb3R0eQpiYncKbWFjcm8gZ2lhbnRlc3MKZnVuZ2FsIGVuY2hhbnRlcgpjaGFvcyBtYWdpY2sKbWFudWVsIHNhbmp1bGlhbgpkb3R0aW5nCnN0eWxlIG9mIG9sZCBwYWludGluZwpjb2xvcmZ1bCBkb3RzCnN0aXBwbGVzCmZhY2UgcGFydGlhbGx5IG9ic2N1cmVkCm1pbGl0YXJpc3RpYwppbiBjeWJlcnB1bmsgMiAwIDcgNyBjcCAyIDAgNyA3Cm1vdGlvbiBibHVyZWQgbW92ZW1lbnQKaWxsdXN0cmF0aW9uIHwgcnV0a293c2tpCmRlc2lnbiBvbiB3aGl0ZSBiYWNrZ3JvdW5kCmh1Z2UgdHJlZXMKZW1hbnVlbGUgZGFzY2FuaW8KaGlnaCBxdWFsaXR5IGRlc2t0b3Agd2FsbHBhcGVyCmdsYXNzZXMgd2l0aG91dCBmcmFtZXMKb3JuYXRlIHRlbnRhY2xlcyBncm93aW5nIGFyb3VuZApyZWFsaXN0aWMgY3JlYXR1cmUgY29uY2VwdApoZWFkLW9uIGNlbnRyYWxpemVkCnJpZGluZyBib290cwp3YWx0ZXIgd2hpdGUgcmVhbGlzdGljIHBvcnRyYWl0CnJpb3QgZ2FtZQp3aWRlIG1vdXRoCmNodW4gLSBsaQpnYWxheHkgaW4gdGhlIHNreQpjaW5lbWF0aWMgYmF0dGxlZmllbGQKbWFjcm8gZnVycnkKZHJhZ29uIGtpc3NpbmcKZG9uYWxkIHRydW1wcyBzZXh5IGZhY2UKd2hpdGUgbWV0YWxsaWMgYXJtb3IKc2hhcnAgZWRnZWQgYmxhY2sgYXJtb3IKbWVjaGEgaG91bmQKMiA0IG1tIGFuYW1vcnBoaWMgbGVucwpwcmVzZXJ2ZWQgaGlzdG9yaWNhbApkcmVhbSBsYW5kc2NhcGUKc2Vhc2lkZSBiYWNrZ3JvdWQKc3RlYW1pbmcgY29mZmVlCmZ1dHVyZSBjbG90aGluZwpob2xkaW5nIGEgY2lnYXIKbG9va2luZyB0aGUgY2FtZXJhCmhhcmQgYnJlYXRoaW5nCm5vdGFuIHN1biBpbiB0aGUgYmFja2dyb3VuZAppbnN0ZW5zZSBnb2QgcmF5cyBpbiB0aGUgc2t5CmRlcHRoIG9mIGZpZWxkIDEgMCAwIG1tCmFybmV5IGZyZXRhZwpjb250cmFzdC4gc3VycmVhbApmYWNlIHZhcmlhdGlvbnMKbW9kdWxhciBnYW1lIGRldiBhcnQKbGlnaHQgdGhyb3VnaCBnbGFzcwpmaWxtIHN0aWxsIHByb21vdGlvbmFsIGltYWdlCnNwb29reSBjcmVlcHkgbGltaW5hbCBzcGFjZQp3aGVlbGllCnJnYmEKY2FtZW8KZGF2aWQgbXllcnMKbWljaGFlbCB3YWRsZWlnaAptaWRkbGUgZmluZ2VyCmxvdmVjcmFmdCBteXRob3MKZHdhcnZlcwpodW1hbiBjaGFyYWN0ZXIKc29mdCB2aW55bApjYXphCmdhcmRlbiByb2FkCmdsYXNzIGRvbWUKZmxvd2luZyBzaGltbWVyaW5nIGZhYnJpY3MKYmF5IHdpbmRvdyBzb2ZhCmh1bWFuIHRvcnNvIGFuZCBoZWFkCnN0b21waW5nCmdyb3VuZCB1cCBhbmdsZQpvdmFsIGZhY2Ugc2hhcGUKZnVycnkgYW5pbWUKbW9vbmdsb3cKcGhvdG9yZWFsaXNtIDQgawpmdWxsIGZhY2VzCnNpdHRpbmcgb24gdGhlIGNvdWNoCmN5YmVybmV0aWMgY3lib3JnIHdhcnJpb3IKY29sb3IgYmFsYW5jZQptYXNzIGVmZmVjdCBmYW50YXN5Cm1vb24gc3VyZmFjZSBiYWNrZ3JvdW5kCm1pbmEgcGV0cm92aWMKbGlnaHRpbmcgY29sb3Igc2NoZW1lCmJvbmV5CmdhcGluZyBnaWxscyBhbmQgYmFsZWVuCnRleHR1cmVkIDMgZApvdmVyd2F0Y2ggdHJhY2VyIGNoYXJhY3RlcgpoZXIgaXJpZGVzY2VudCBtZW1icmFuZXMKaGlnaCBkZXRhaWxlZCBmYWNlIGFuaW1lCmV4dWJlcmFudCBvcmdhbmljIGVsZWdhbnQgZm9ybXMKdWx0cmEgLSByZWFsaXNtCmZ1dHVyaXN0aWMgc2NpLWZpIGZhc2hpb24KZHJhbWF0aWMgZGFyayBlZXJpZSBsaWdodGluZwpyZWFjdG9yCnR3aXJscwpkZXRhaWxlZCBwb3J0cmFpdCBvZiBhIGN5Ym9yZwoxIDkgMiA3CmFiYW5kb25lZCBzY3ViYSB2aXNvcgpkZXVzIGV4IG1hbmtpbmQgZGl2aWRlZApqb255IGl2ZQpiYW5nIG9sdWZzZW4KaG9sZGluZyBhIHN0dWZmCnJhcCBibGluZwpkaXZlcnNlIGV5ZXMhCmV5ZSByZWxlY3Rpb25zCnBhd2cKd2hpdGUgaG9ybnMgZnJvbSBleWVicm93cwpkb2cganVtcHMgb3ZlciBoaWxsCnNjaHdhcnplbmVnZ2VyCmxvdHMgb2YgcmFpbmRyb3BzCmxvdmUgaXMgaW5maW5pdHkKZmVlbCBvZiBkZXB0aAp3YXJoYW1tZXIgNCAwIDAgMCAwCnZpY3RvciBjaGFycmV0b24KZW5jaGFudGluZyBsaWdodGluZwpkdW5lIHRoZSBtb3ZpZQplY2hvIGZyb20gb3ZlcndhdGNoCmxvdmVseSBxdWVlbgplcnVwdGlvbgpwYWxlIHNraW4hCmNvbG9yZnVsIG1hbmRhbGEKbW91bnRhaW5zY2FwZQpzY3JhcCBtZXRhbCBoZWFkZHJlc3MKc2NhcnkgcG9ydHJhaXQKdHJlbWVuZG91cyBtZWNoYSByb2JvdApldmlsIGJhcHRpc20KcHJvcG9ydGlvbmFsIGh1bWFuIGJvZHkKY3JhaWcgbXVsbGlucyBhbmQgYXJ0Z2VybQpleHByZXNzaXZlIHJ1c3RpYyBvaWwgcGFpbnRpbmcKZXh0cmVtZSBjbG9zZSAtIHVwIHNob3QKY3liZXJuZXRpYyBoYW5kcwpvbGVkIHZpc29yIGZvciBleWVzCmJyYXNzIGNvcHBlcgpleHRyZW1lbHkgZmF0CnNpZ2h0aW5nCnJvbGVwbGF5aW5nIGdhbWUgYXJ0Cm1lZGl1bSBjb250cmFzdApmYWNlIG1hY3JvIHNob3QKbHNkIGZlYXRoZXJzCmhpZ2ggY29udHJhc3QgZGFwcGxlZCBsaWdodGluZwpjb2xvciBla3RhY2hyb21lIHBob3RvZ3JhcGgKc3RhbmRpbmcgb24gYSBzaGlwIGRlY2sKYnJvd24gbmVhdCBoYWlyCmRldGFpbGVkIGF0dHJhY3RpdmUgZmFjZQpmaWxtIHN0aWxsIGRuZApsb25nIGJyYWlkZWQgaGFpciBwdWxsZWQgYmFjawpzdHVkaW8gNCBrCmJyeWFuIHNrZXJyeQphbiBiZWF1dGlmdWwKZmxvb2RlZCBhbmNpZW50IHRvd2VyCmJsdWUgLyBncmV5IGJhY2tncm91bmQKYmxhY2sgc2hpbnkgYXJtb3IKd2VhcmluZyBzbGVlayBhcm1vcgpjaHJpcyBrbmlnaHQKbW9kZXJhdGVseSBkZXRhaWxlZApoYWlyeSBjaGVzdCBhbmQgaGFpcnkgYm9keQpjaGVtaXN0eQpzaG9ydCB3aGl0ZSBoYWlyIHNoYXZlZCBzaWRlcwoxOTgwIGNpbmVtYXRvZ3JhcGh5CmZ1bGwgZmFjZSBzaG90IG9mIHJpbXVydSB0ZW1wZXN0CmpvaG4gd2F0a2lzcwpheG9ub21ldHJpYyBkcmF3aW5ncwpjcm93biBvZiB3aGl0ZSBsYXNlcnMKY3Jvd24gb2YgZ2lhbnQgcnViaWVzCmZ1bGxib2R5IG9yIHBvcnRyYWl0Cmdsb3J5IHdhcgpmdXR1cmlzdGljIHNhbyBwYXVsbwpnYW5kYWxmIGF0dGFja3MgdGhlIHdoaXRlIGhvdXNlCmhleGFnb24Kb3JhbmdlIHJvYmUKZ2lhbnQgd2hpdGUgZGFpc3kgZmxvd2VyIGFzIGhlYWQKZ2llc2hhIGRlbW9uCmJpZyBodW1hbiBmYWNlcyBldmVyeXdoZXJlCmJlYXV0aWZ1bCBkZXRhaWxlZCBkcmVzcwpmb2dneSBqdW5nbGUgaW4gdGhlIGJhY2tncm91bmQKZ29kcyBvZiB0aGUgZGVlcAp0aHJvbmUgd29ybGRzCmNvbnN0YW50aW5lCnBvcnRyYWl0IG9mIHBlbmVsb3BlIGNydXoKc29sYXJwdW5rIG1ldHJvcG9saXMKdHJpYmFsIHBhaW50CmNvbW1lcmNpYWwgcGhvdG9ncmFwaApzaWxrZW4gaGFpcgpzdHlsaXplZCBnZW9tZXRyaWMgZmxvd2VycwpoZWFkcGhvbmUgc3RhbmQKcGlyYXRlIG5lb24gc2hpcApwdXJwbGUgYW5kIGJsdWUgbmVvbnMKaGlnaCBwcmllc3Rlc3MKdWx0cmEgd2lkZSBsZW5zIHBpY3R1cmUKaG9vZHkKcm95YWwgZWxlZ2FudCBwb3NlCmdydW5nZSBhZXN0aGV0aWMhISEgKApjaW5lbWF0aWMgbG93IHNob3QKc2lsayBzY3JlZW4gdC1zaGlydCBkZXNpZ24gNGsKd2hpdGUgbGFjZSBkcmVzcwpyYXZlIGluc3BpcmVkCnZpb2xldCB0aWdodCB0YW5rdG9wCmxhcmdlIG92ZXJoYW5ncwpiZWF1dGlmdWwgdmlzdGFzIHdpdGggY2FjdGkKdnJheSBzaGFkaW5nCmhvbGRpbmcgYSByYWluYm93IHRpZ2VyIGdlbQpodW1hbiBwcm9wb3J0aW9uCnNpdHRpbmcgaW4gYSBnaWxkZWQgdGhyb25lCnBsYXRlZCBhcm0KY2hyb21lIGZhY2Ugc3ltbWV0cnkKeGhlbm9tb3JwaAp3ZWFyaW5nIHNpbHZlciBkcmVzcwpsb25nIHN0cmVldAplbmRsZXNzIHN0cmVldApkaWFibG8gLSAzCmNsaWZmc2lkZSBvY2VhbiBzY2VuZQppbW1vcnRhbCBuZXVyb24Kd2FybSBjb2xvciBwYWxhdGUKaG9ycm9yIHNjYXJ5IHRlcnJvcgp3YXRlcmNvbG9yIHBhcGVyCmRlZXAgYmxhY2sgdG9uZXMgY29udG91cgpjaGluZXNlIGJydXNoIHBlbiBpbGx1c3RyYXRpb24KZmFzaGlvbiBwaG90b2dyYXBoeSBwb3J0cmFpdApzZWFyY2hpbmcgZm9yIGV0ZXJuaXR5CmNvbG9yZnVsIHNtb2tlCmFmcmljYW4gc3liaWwKdGVhbCBleWVicm93cwp2b2d1ZSBwaG90byBzdHlsZQpqdW5rcmF0IGZyb20gb3ZlcndhdGNoCmd1c2h5IGdpbGxzIGFuZCBiYWxlZW4KZWFzdG1hbiBjb2xvcgpwb3J0cmFpdCBvZiB3b21hbgphZ2FpbnN0IGxpZ2h0CmRldGFpbGVkIHNvZnQgcGFpbnRpbmcKaGlnaCBkZXRhaWwgc3BpcmFsIGRlc2lnbgp1dGlsaXRhcmlhbiBjYXJnbyBzaGlwCm1vZGVybiBqYXBhbmVzZSBsaXZpbmcgcm9vbQpnZW9tZXRyaWMgZ29sZGVuIHJhdGlvIGRldGFpbHMKbWFnaWNhbCBsb25nYm93Cm1hbiB3aXRoIGEgY3Jvd24KaGlnaGx5IGRldGFpbGVkIHJlYWxpc3RpYyBmYWNlCmhvbHkgbGlnaHQgaGFsbwpnb3RoaWMgc3RhaW5lZCBnbGFzcyBzdHlsZQpiaXNtdXRoIHJhaW5ib3cgbWV0YWwKb2cKZW5oYW5jZW1lbnRzCmZpZ3VyZSBpbiB0aGUgZGFya25lc3MKbWlkIDEgOSB0aCBjZW50dXJ5CmN1dGUgcm91bmQgc2xhbnRlZCBleWVzCmluIHJpY2ggY29sb3IKZHJlYW0gY3JlYXR1cmUgY29zdHVtZXMKbXIgcm9iZXJ0IGlzIGRyaW5raW5nIGZyZXNoIHRlYQp3aXRoIGZ1bm55IGZlZWxpbmcKbXV0ZWQgY29sb3JmdWwgc21va2UKcGFsbSBib2R5CnRyYW5zbHVjZW50IGFsZ2FlIG9ybmF0ZQppbnRlbnNlIGJvdW5jZWQgbGlnaHQKbGFyZ2UgdHJlZSBjYXN0aW5nIHNoYWRvdwp3ZWFyaW5nIGRhcmsgY2xvYWsKd29vZGxhbmQgYmFja2dyb3VuZAppbiBzdHlsZSBvZiA4MHMgc2NpLWZpIGFydApiYWNrZmFjaW5nCm9wdGljYWwgaWxsdXNpb24gd29vZGJsb2NrIHByaW50CjQgMCBrIHdhcmhhbW1lcgpwcmF3bgpnbGl0Y2hlZCBwYXR0ZXJuCnJvYWQgdG8gdGhlIHNlYQpkcmFwZWQgaW4gZmxvd2luZyBmYWJyaWMKYXV0dW1uISBjb2xvcnMKd2VhcmluZyBzdWl0cyEKYmxvc3NvbSB3aGVhdCBmaWVsZHMKcGVudGhvdXNlCmhvbGx5d29vZCBjb25jZXB0CmR5bmFtaWMgY29tcG9zaXRpb24gYW5kIG1vdGlvbgpoZHIgZHJhbWF0aWMgY2luZW1hdGljIGxpZ2h0aW5nCm1hZ2F6aW5lIDE5OTAncwpsYXJnZSB3aGl0ZSBjbG91ZHMKbWFzdGVycGllY2UgemR6aXNsYXcgYmVrc2luc2tpCmVtb3Rpb25hbGx5IHRvdWNoaW5nCm1hbGNvbG0gaGFydAptaWNoYWVsIG1hcmdldHRzCnlvdW5nIHdvbWFuJ3MgZmFjZQpzbWFydCBkZXNpZ24KcmVhbGlzdGljIGN1dGUgZ2lybCBwYWludGluZwphbWJpZW50IG9jY2x1c2lvbjozCmNpbmVtYXRpYyBsaWdodCBhbmQgcmVmbGVjdGlvbnMKcmVkIGdlbXMgc2NhdHRlcmVkIGxpa2UgZHVzdApqb25hdGhhbiB5ZW8gcGFpbnRpbmcKdG9ybiBjYXBlCnBvcnRyYWl0IG9mIGEgcXVlZW4KcG9ydHJhaXQgb2YgY3V0ZSBnaXJsCnBvcnRyYWl0IG9mIGZhaXJ5Cm5pa29uIDMgNSBtbSBwaG90b2dyYXBoeQpwb3J0cmFpdCBvZiByZXRhcmRlZCB3b2xmCnBvcnRyYWl0IG9mIHJveWFsIHByaW5jZXNzCmJlYXV0aWZ1bCBjeWJvcmcgd29tYW4KcG9ydHJhaXQgb2Ygd2hpdGUgdGVlbmFnZSBnaXJsCnJlYWxseSBnb29kIHZpYmVzCm55cGQKcmVkIHBhaW50IGRldGFpbApibHVlIGV5ZS4gYW5pbWUKd2xvcCB8IGFydGdlcm0Kc21hbGwgZnJlY2tsZXMKc2FyYSBhbGkKbWFyeSBkZXZpbmF0CmFjcnlsaWMgcGFpbnRzCnNvZnQgY29sb3JzIG1vbm8gY2hyb21hdGljCnRlbnNlaSBzaGl0YXJhIHNsaW1lIGRhdHRhIGtlbgpydW5lc3RvbmUKcHVscCBjb21pYyBzdHlsZQpjaXJjYSAxOTU4CmZhbnRhc3kgY29uY2VwdCBwYWludGluZwpzcGlkZXJtYW4gYml0aW5nIHBpenphCndlYXJpbmcgYSBjb2xvcmZ1bCB5dWthdGEKYXMgdGhlIGdvZGRlc3Mgb2YgdGhlIHN1bgphbGwgZW5jbG9zZWQgaW4gYSBjaXJjbGUKcmV0cm93YXZlIGF0bW9zcGhlcmUKZnV0dXJpdGljIGFyY2hpdGVjdHVyZQp0aGUgaGlnaCBwcmllc3Rlc3MKbmljbyB3ZWFyaW5nIGEgd2hpdGUgZHJlc3MKcXVpcmt5IDEgOSB0aCBjZW50dXJ5CmZ1dHVyaXN0aWMgY2xvbmluZyBmYWNpbGl0eQpzdHJvbmcgYmxvb2RlZCBib2R5CnNoYXJwIHNpbHZlciBhcm1vciBmdWNoc2lhIHNraW4KYW50aHJvIGRyYWdvbiBhcnQKc29mdCBwYWRzCmdpYW50IGFuZ3J5IHJhdApmcmFtZXN0b3JlCjcwcyBkZXNpZ24Kd2lkZSBmcm9udGFsIHZpZXcKcGx1bWVzIG9mIHNtb2tlIGFuZCBhc2gKbGVha3kgbWFrZSAtIHVwCnlvZGEgYXMgYSB6b21iaWUKb2lsIHBhaW50aW5n4oCdCndpbmluZwpjaW5lbWF0b2dyYXBoeeKAnQpsb2Fkc2NyZWVu4oCdCnN0cmVldCBwaG90b2dyYXBoeSBzdHlsZQpzbGljZSBvZiBsaWZl4oCdCmdyYXNzIGFuZCB3ZWVkc+KAnQpnaWFudCBwaWcKd2VlZHMgYW5kIGdyYXNzCnNvbGlkaXR5IGFuZCBldGVybml0eQpmaXJzdCBwZXJzb24gc2hvb3RlcgpyYWRpYW50IHNsaW1lIHRyYWlsCnJpZGluZwp2ZXJ5IGhhaXJ5IGJvZGllcwpzcGhlcmljYWwKYWxvb2YKMTg2NQpjeWJlcnB1bmsgYXRtb3NwaGVyZQoxOTYwJ3MKcG9zdC1wcm9kdWN0aW9uCmZyYWN0YWwgcGF0dGVybgpnb2xkIHRlZXRoCmJsYWNrIGFuZCB3aGl0ZSBvbGQgcGhvdG8KaW4gaGVhdmVuCnNjaS1meQpncmVlbiBjYXBlCmVkZ2FyZCBtYXhlbmNlCm1hZG5lc3MgY29tYmF0Cm9yYW5nZSByYWNpbmcgc3RyaXBlcwpicmVhdGh0YWtpbmcgc2NlbmVyeQpkcm9wIHNoYWRvdwpsb3R1cyBmbG93ZXIKbHluY2hpYW4gYXRtb3NwaGVyZQptaXN0eSBhdGhtb3NwaGVyZQpkYXJrIHB1cnBsZQpxdWlldCBmb3Jlc3QgbmlnaHQgc2NlbmUKY3Jvc3Nib3cKY3liZXJtYWduZXRvc3BoZXJlCm9pbCBwYWludHMKbWVldGluZyBwb2ludAphbiBhc3Ryb25hdXQKMTk2NgpjeWJlcnB1bmsgYXBvY2FseXB0aWMgY2l0eQpwZXJzaWFuIHJ1Zwpnb3RoaWMgY29hdApibHVlIHN1bnNoaW5lCnNoaWJ1eWEKbG9va2luZyBjb25mdXNlZApyZWdlbmN5Cmdlb3JnaWFuIGRyZXNzCmRhbWFnZQpjZXZhZ3JhZiBjb21pY3MKdW5rZW1wdApjb21pYyBib29rIHRleHR1cmUKYnJhaW4gaW4gYSB2YXQhIQpmaXNoY29yZQpiZWF1dGlmdWwgZmFudGFzeSBhcnQKZHJpbmtpbmcgYXQgdGhlIGJhcgphcnRodXIKdmludGFnZSBhcnQKY29tcG9zaXRpb24gd2lsbGlhbSBzIGJvcm91Z2hzCmFuYWdseXBoCmNhY3RpCmxhcmdlIGdsYXNzIHdpbmRvd3MKZHJlc3NlZCBpbiAxOTcwcyBtZW5zd2Vhcgo6Ngp0YWN0aWNhbCBzcXVhZCA6OQp2aW9sZW50IGFjdGlvbgpjb29sIGhhaXIKMTk5MSB2aWRlbyBnYW1lIHNjcmVlbnNob3QKbW90b3JzcG9ydHMgcGhvdG9ncmFwaHkKdGVsZXBob3RvIHNpZ21hIDggNSBtbSBmIC8gMS4gNAoyIDAgeWVhcnMgb2xkCmN5YmVycHVuayBiYWNrIGFsbGV5CjEgNCBtbQpzdGFuZGluZyBpbiB0b3duc2hpcCBzdHJlZXQKbmVvbiBwaW5rCmhpZ2gta2V5IGxpZ2h0aW5nCmdyZWsgcnV0a293c2tpCnZpZXcKY29sb3JmdWwgZGV0YWlscwp2YXN0IGxhbmRzY2FwZQpyZWFsaXN0aWMgZm9vdGFnZQp0aWVmbGluZwpjb2xvdXJmdWwgMyBkIGNyeXN0YWxzCmNhbm9uIGNhbWVyYQpibGluZGZvbGQKZmxvd2VyIGRyZXNzCmNvbmZpZGVudCBhY3Rpb24gcG9zZQplcXVpcmVjdGFuZ3VsYXIKc2hpcGlibyBwYXR0ZXJucwpwaW5lIHRyZWUKcGluayBjbG91ZHMgYmFja2dyb3VuZApib2tlaCBwaG90b2dyYXBoeQpib3JkZXJzCmRyYWdvbmZseQpzdHlsaXplZCAzIGQgZ3JhcGhpY3MKaW4gbmVvIHRva3lvCm1ha2UgYWxsIGVsZW1lbnRzIHNoYXJwCmhpZ2ggZGV0YWlsIDMgZCByZW5kZXIKc3Vuc2V0IGNsb3VkcwpyYW1lbgpwZXBlCmFydHNhdGlvbiA0IGsKd2FyaW5nIGEgaGF3YWlpYW4gc2hpcnQKbXVsdGljb2xvcgp1Zm8gaW4gdGhlIHNreQpwaWVyY2luZwptb3VzZSBoZWFkCmRldGFpbGVkIGZlYXRoZXJzCnN1YnRsZSBkZXRhaWxpbmcKM2QgbWFzdGVycGllY2UKYXBoZXggdHdpbgphY3J5bGljIHBhaW50IHNwbGFzaGVzCmRldGFpbGVkIDRrCmNhbWVyYSBvYnNjdXJhCnBhcnR5IGJhbGxvb25zCnRoaW5raW5nCnN0eWxpemVkIG5lb24KaW4gYSBtYWdpY2FsIGZvcmVzdApkYXJrIHNoYWRvd3kgc3Vycm91bmRpbmdzCnNpbHZlciBzaWx2ZXIgZ2xhc3NlcwpidWxib3VzIG5vc2UKZ3JlZW4gbGlnaHRzCmxvdyBleHBvc3VyZQpoaWdobHkgZGV0YWlscyBmb3JtCmVsZWdhbnQgcmVnYWwgcG9zdHVyZQptaXNzaW5nIHRlZXRoCmdyZXkgZnVyCnNvbGlkIHdoaXRlIGJhY2tncm91bmQKdG9vbGJlbHQKaGFuZCBkcmF3biBpbGx1c3RyYXRpb24KZmFudGFzeWNvbmNlcHQgYXJ0CnRodW5kZXJzdG9ybSBvdXRzaWRlCm9uIGEgY2xpZmYKZmFjaWFsIHN5bW1ldHJ5CnBvc3Rwcm9jZXNzZWQpCjE3dGggY2VudHVyeQpyb3R0ZW4gdGVldGgKd2l0aCBhIGx1c2ggZ3Jhc3MgbGF3bgphcnQtZ2VtCmZlZG9yYQp0aGUgd29sZiBvZiB3YWxsIHN0cmVldApjdXRlIG91dGZpdApzbm93eSBmb3Jlc3QKcGhvdG9yZWFsaXN0aWMgM2QgcmVuZGVyCnJlbmRlcmVkIGluIHVucmVhbCBlbmdpbmUgNGsgaHEKYXJjaGl0ZWN0dXJlIGluIHRoZSBiYWNrZ3JvdW5kCnRoZSBzcGFjZSBiYWNrZ3JvdW5kCmJvd3Nlcgptb3JuaW5nIGxpZ2h0aW5nCm1vb25saXQgbmlnaHRzY2FwZQphbWF6aW5nIGxhbmRzY2FwZQp3aXRoIHRyZWVzCnBsYWNpZApkZWVwIGRyZWFtCmFydHJpZnQKYnJpZGUKcGxhdGludW0KY2hpbGRyZW4KZGF6IHN0dWRpbwphbGJpbm8KY2xhc3NpYyBwb3J0cmFpdApzY3JlZW4gcHJpbnRpbmcKc2V4eSBib2R5CmJhcnQgc2ltcHNvbgpuZW9uIGdyYWRpZW50Cm9pbCBpbmtzCnNpbHZlciBsaWdodAphIGNhdAoxODkwCmhpZ2ggY29udGFzdApjb29raWVzCndhcm0gc2tpbiB0b25lCmtpbmQgc21pbGUKcmlzb2dyYXBoIHByaW50CmxhdWdoaW5nIGFuZCB5ZWxsaW5nCmhhbGYgY2F0CmJsYWNrIGFuZCB3aGl0ZSBjaGFyY29hbCBza2V0Y2gKZmxvd2VycyBhcm91bmQKc2l0dGluZyBvbiBvbmUga25lZSBvbiB0aGUgZ3Jhc3MKbGl0dGxlIGtpZAphbGl0YSBiYXR0bGUgYW5nZWwKZ2FsYWN0aWMgZW5lcmd5CmZyb20gY3J5cHRpZCBhY2FkZW1pYQpmcm9tIG1hZ2ljIHRoZSBnYXRoZXJpbmcKb3Zlcmdyb3duIHdpdGggbW9zcwpzcGxpdCBkeWUKaGlnaCBkZXRhaWwgaW1wcmVzc2lvbmlzdCBzdHlsZQpkcmVhbXkgbGlnaHQgY29sb3IgcGFsZXR0ZQpjb25jZXB0IGFydCBzdHVubmluZyBhdG1vc3BoZXJlCm51Y2xlYXIgbXVzaHJvb20KZGVzZXJ0IGNpdHkKbm91dmVhdSBwYWludGluZwprYXJlbiBnaWxsYW4KY2hsb8OrIGdyYWNlIG1vcmV0egpzY2FyIG9uIGZhY2UKYWR2ZXJ0aXNlbWVudHMKd2Fsa2luZyBhd2F5IGZyb20gdGhlIGNhbWVyYQpmbGFtaW5nIGxlYXZlcwpjb2xvcmVkIHpicnVzaCByZW5kZXIKcHJlY2lzZSBhcmNoaXRlY3R1cmFsIHJlbmRlcmluZwpkdWFsIHdpZWxkaW5nIHN3b3JkcwpzZXJpYWwga2lsbGVyCmhhaXIgYXJlIHdpcmVkIGNhYmxlcwptLnp1aWtvIDc1bW0KMS80MDAKZmFjaWFsIHJldG91Y2gKcmVkIGFuZCBibHVlIGNvbG9yIHNjaGVtZQpoeXBwZXJyZWFsaXN0aWMKZXh0cmEgZGV0YWlsIG1vcmUgZGV0YWlscwp0ZWNobm9wdW5rCnN1bW1lciBuaWdodAp0b2t5byBjaXR5CmJvYiByb3NzIHBhaW50aW5nCnZlcnkgYXJ0aXN0aWMKdGlsZXMKbW9ybmluZyBoYXJkIGxpZ2h0CmhlYXJ0YnJlYWsKYmVhdXRpZnVsIG5pZ2h0IHNreQpzYXBwaGlyZSB3YXRlcnMgYmVsb3cKY2xvY2tzCnJlZCBjb2xvciBwYWxldHRlCnVuaWZvcm0gdGVldGgKYSBtZWRpdW0gc2hvdApzdGFycyB2aXNpYmxlCnNwYXJ0YW4KYnV6eiBsaWdodHllYXIKYXVnbWVudGVkCmFlc3RoZXRpYyEhISEhCmdvbGRlbiByaWJib25zCmplbGx5ZmlzaCBzaHJpbmUgbWFpZGVuCnBlcnV2aWFuIGxvb2tpbmcKcGF0cmljayBiYXRlbWFuCm1hZ2ljIGF1cmEKZnJhbWUKbWljaGVhbCB3aGVsYW4KZnV0dXJpc3RpYyBhcnQKY29taWMgaWxsdXN0cmF0aW9uCmEgcG9ydHJhaXQgb2YgZ29yZG9uIHJhbXNheQpoZWFkc2V0CmxlYW4gYW5kIG11c2N1bGFyCnN0dWRpbyA0wrBjCmluIGFuIGVtcHR5IHN0dWRpbyBob2xsb3cKZ3JlZyBydXRrb3dza2kgZnV0dXJpc20Kc2hhZGVkIHRhdHRvbwphIHJvYm90IGRvZwpzZWVuIGZyb20gdGhlIGJhY2sKY2xlYXIgZGF5CmdvbGQgYW5kIHdoaXRlCmRhbGwtZSAyCmluIHRoZSBiYWNrZ3JvdW5kCnNhdGVsbGl0ZSB2aWV3CnBob3Rvc2hvcCBjb2xsYWdlCmFkdWx0IHN3aW0KZGFyayBzbW9rZQptYXJvb24gYW5kIGJsdWUgYWNjZW50cwp0cmVuZGluZyBvbiB2c2NvCnJlZCBhbmQgeWVsbG93CnNjYXJ5IHNjZW5lCmludHJ1c2l2ZSB0aG91Z2h0cwppbnRyaWNhdGUgbWF0dGUgcGFpbnRpbmcKdW5yZWFsNQpwb3N0IGFwb2NhbHlwdGljIGNpdHkKYmlnIGdyZWVuIGV5ZXMKZGVzZXJ0ZWQgc2FuZApleHRyZW1lbHkgZmluZSBpbmsgbGluZWFydAp1cmJhbiBleHBsb3JhdGlvbgpmbG9hdGluZyBkdXN0CmZpbG1pYyByZW5kZXIKcG9zdGVyIGZyYW1lZAphYXJkbWFuIGFuaW1hdGlvbnMKZnVsbCBtb29uIGluIHRoZSBiYWNrZ3JvdW5kCmdsaW50aW5nIG1ldGFsCmJvZHkgYXJtb3IKYWhzb2thIHRhbm8KcHJvZmVzc2lvbmFsIG1vZGVsaW5nCndhdGVyIHNwcmF5CnV3dSBoaS1mcnVjdG9zZQpoaWdoIHJlc29sdXRpb24gc2Nhbgpnb3RoaWMgYXJjaCBmcmFtZQpyZXBlYXRpbmcgcGF0dGVybnMKb3Zlcmdyb3duIGNpdHkKc2NpbnRpbGxhdGluZwphbGljaXphdGlvbgpvbmUgZm9vdCByYWlzZWQgb2ZmIHRoZSBncm91bmQKamltaSBoZW5kcml4Cm5vIGZyYW1lCmdlb2Rlc2ljCmVhcnRocXVha2UKaW1wcmVzc2lvbmlzdCBvaWwgcGFpbnRpbmcKaW1wYWN0ZnVsCmxlYWRlcnMKY3liZXJwdW5rIDIwNzcgY29sb3IKbG9uZyBzbGVldmVzCmtpbmcgb2YgZW50cm9weQp2aWJyYW50IGJsdWUgc2t5IGJhY2tncm91bmQKb3JhbmdlIGhvb2RpZQptdWx0aXBsZSBnb2xkZW4gbmVja2xhY2VzCmFuZ2VsIGtuaWdodCBnb3RoaWMgZ2lybApzdW4gYmVhbXMgYWNyb3NzIHNreQphbmdlbGEgbWVya2VsCmxpZ2h0c2hhZnRzCnVuZGVyd2F0ZXIgcGhvdG9ncmFwaAptYWxlIGFuZCBmZW1hbGUKZHJlc3NlZCBhcyB3b25kZXIgd29tYW4Kc3VtbWVyIGRyZXNzCmFyY2hpZSBhbmRyZXdzCm1vdGhlciBlYXJ0aApob3Jyb3IgbW92aWUgY2luZW1hdG9ncmFwaHkKZGVzaWduIGV4cG9zdXJlIGFuaW1lIGpvaG4gcmVpCnJpbmdzIGFzdWthIGl3YWt1cmEgc3RhdGlvbiBnYW1lCmZpbmUgYXJ0IGlsbHVzdHJhdGlvbgphc3Ryb25hdXQgaW4gc3BhY2UKZXhpc3RlbnRpYWwgZHJlYWQKZmFjZSBpbi1mcmFtZQptYWduaWZpY2VudCBzdXBlciB3aWRlIGFuZ2xlCmJyaWxsaWFudCBjb21wb3NpdGlvbgpiYWNvbgpzZW5zdWFsIHdvbWFuCm5vIGV4dHJhIGxpbWJzCnBzeWNoZWRlbGljIGFjaWQgdHJpcApiYXN0ZXQKcm9iZXJ0IG1hcGxldGhvcnBlCnN0ZWZhbm8gYnJ1bmVzY2kKbGFjaGxhbiBiYWlsZXkKaGFyaXMgbnVrZW0Kc3R5bGUgb2YKY2xlYW4gbWluaW1hbGlzdCBkZXNpZ24KZ3JlZWsgZ29kcwppbHlhIGt1dnNoaW5vdiBzdHlsZQpqb3lmdWwgNGsKc2luZ2xlIGNoYXJhY3RlciEKbG9uZyBzaGlueSBoYWlyCmRpYXBoYW5vdXMgaXJpZGVzY2VudCBjbG90aApkaXJ0eSBibG9uZGUgaGFpcgpkYXZ5IGpvbmVzCmF0dHJhY3RpdmUgeW91bmcgbWFuCnNtb290aCBjaGluCmF0bW9zcGhlcmUgb2Ygc2lsZW50IGhpbGwKaG9sZGluZyBhIGJhc2ViYWxsIGJhdApmb290YmFsbAphbGV4YW5kZXIgdHJ1ZmFub3YKYmpvcmsKc2Nhcnkgc3Rvcmllcwp1bHRyYS1yZWFsaXNtCnZhbiBnb2doIHBhaW50aW5nCm1hZCBtYXggZnVyeSByb2FkCnVraXlvLWUgc3R5bGUKamFtZXMgZ2VuZQpibHVlIGxpZ2h0IHNhYmVyCmluayBhcnQKeW91bmcgYmVhdXRpZnVsIGhpcHBpZSBnaXJsCmdlb21ldHJpY2FsIHNoYXBlcwpzdGVhbHRoIHN1aXQKYW5pbWFscyB3aWxkbGlmZQppbiB0aGUgbW91bnRhaW5zCmFjaWQgbGVha2luZyBmcm9tIG1vdXRoCmZ1bGwgc2NyZWVuCm1hcnZlbCBtb3ZpZQphbnRocm9wb2xvZ2lzdApzdG9ybXkgbmlnaHQKZXRoZXJlYWwgYmFja2dyb3VuZApjZXJudW5ub3MKZ2lhbnQgcm9ib3QKdGFrZXl1a2kga2FuZGEKa2VuIGlzaGlrYXdhCmNoaW5lc2Ugd2F0ZXJjb2xvcgpiYXJlCmFhYSBnYW1lCnN0eWxlIG9mIGFyY2FuZQp5ZWFyIDMwMDAKcm9tYW50aWMgY29tZWR5CnN0YWxraW5nCnJwZyBydWxlYm9vayBpbGx1c3RyYXRpb24KZCZkIGZhbnRhc3kgbWFnaWMKZmlyZWJhbGwKbmF0dXJhbCBtYWtldXAKdGVycmFyaWEKZGFyayBodW1vcgpzaGlub2JpCmNpbmVtYXRpYyB2b2x1bWV0cmljIGxpZ2h0CnJlYWxpc3RjIG9jdGFuZSByZW5kZXIKa2V5IGFuaW1lIHZpc3VhbHMKYmVhdXRpZnVsIGxpbmUgYXJ0CmZhZGVkIGJhY2tncm91bmQKb21pbm91cyBjbG91ZHMKaG93ZXZlcgpmdXR1cmlzdGljIHBobm9tLXBlbmggY2FtYm9kaWEKY2FwdGl2YXRpbmcgZ2xvd2luZyBsaWdodHMKdHJlbmNoY29hdApjeWJlcnB1bmsgc2FtdXJhaQpkLWRheQppbnRyaWNhdGUgaXJpZGVzY2VudCBvcGFsIGFybW9yCmRhcmsgYW5nZWwKZGFyayBicmFuZG9uCnZlcnkgZGFyayBiYWNrZ3JvdW5kCmRlYWRwb29sCmlzbGFuZHB1bmsKcGxheWJveSBidW5ueQpicm9jYWRlIGRyZXNzCnRyb3BpY2FsIHZlZ2V0YXRpb24KcGxhdGUKdmludGFnZSA5MHMgcHJpbnQKYXAgcGhvdG9ncmFwaHkKZG9vbWZpc3QgZnJvbSBvdmVyd2F0Y2gKZ29sZGVuIGFnZSBpbGx1c3RyYXRpb24Kc2ltcGxlIGRyYXdpbmcKcG9zdCBpbXByZXNzaW9uaXNtCmV4dHJlbWVseSBjb2xvcmZ1bApsdXNjaW91cwpiaW9zaG9jayBpbmZpbml0ZQppbiBuZXcgeW9yayBjaXR5CmNlbGxzaGFkZWQKZWxzYSBmcm9tIGZyb3plbgpzb255IGE3ciBpaWkKYXNpYW4gZmFjZQpwaG90byByZWFsaXN0aWMgcmVuZGVyCmdpYW50IHNwYWNlc2hpcApjbG9zZSB1cCBkZXRhaWxzCmV2ZW50IGhvcml6b24KbWFnaWMgcGFydGljbGVzIGluIHRoZSBhaXIKc21hbGwgbGlicmFyeQpraW5nZG9tCmZhbGxvdXQgbmV3IHZlZ2FzCmxvbmcgZmxvd2luZyByZWQgaGFpcgpleHRyZW1lbHkgZGV0YWlsZWQgZmFjZSEKZHJpbmtzCmNhbG0gZmVlbGluZwp3YXJyaW9yIGNhdHMKdHJhbnNsdWNpZGx1bWluZXNjZW5jZQpsb3cgYW5nbGUgcGhvdG9ncmFwaHkKaW4gc25vdwpkcmFtYXRpYyBjb250cmFzdApmcmVkZHkgZmF6YmVhcgp3ZWFyaW5nIGEgYmxhY2sgZHJlc3MKZmV2ZXIgZHJlYW0KZmlzaG5ldCBzdG9ja2luZ3MKd29ybSdzLWV5ZSB2aWV3CmdhcmZpZWxkCmdlb3JnZSB3YXNoaW5ndG9uCnN0cm9uZyBjb2xvcnMKZ2xpdGNoIGluIHRoZSBtYXRyaXgKb3Zlcmxvb2tpbmcKbWFnaWMgcnVuZXMKNjBzIGtpdHNjaCBhbmQgcHN5Y2hlZGVsaWEKZ3JlbWxpbnMgbW92aWUKdHJlbmRpbmcgb24gaW1kYgpib3gKaGFsZiBtYW4KY2hpc2VsZWQgamF3CnNwb3J0cwpjb21pY3Mgc2FuZG1hbgpjaGFyYWN0ZXIgcG9zdGVyCmhpZ2ggcXVhbGl0eSBwYWludGluZwpjb2xvcmZ1bCBhcnQKd2l0aCBhIHBhcmsgaW4gdGhlIGJhY2sgZ3JvdW5kCmJ1cnN0cyBvZiBjb2xvcgpzaGFycCBleWVicm93cwpzaGFycCBqYXcKZmFzaGlvbiBtYWdhemluZSBzdHlsZQpiZWF1dGlmdWwgYW5kIHJlYWxpc3RpYwpiZWF1dGlmdWwgY29sb3VyIHBhbGV0dGUKdGVkZHkgZnJlc2gKaGlwcG8KYnVsbAplcGljIGFydCBzdHlsZQpodWxrCm1lYWluaW5nIG9mIHBoeXNpY2FsIHJlYWxpdHkKaW5kdXN0cmlhbCBidWlsZGluZ3MKbWVzc3kgc2hvcnQgaGFpcgpwcm9kdWN0IGNvbmNlcHQKcHVsc2UKYXJub2xkIHJlbmRlcmluZwpwb2UncyBhbmdlbAptYXN0ZXJwaWVjZXMKdGhlIG1hbiB3aXRoIHJvYm90IGhlYWQKYW5pbWUgcGFpbnRpbmcKd2hlZWxzCm1vdmllIHNjcmVlbiBzaG90CmphcGFuIHRyYXZlbCBhbmQgYWR2ZW50dXJlCmxhdmEgcml2ZXIKam9hbiBvZiBhcmMKdWx0cmEgcmVhbGlzdApvcGVuCmNhcnRvb24gYXJ0IHN0eWxlCmthcmVuIGdpbGxhbiBiYXRnaXJsCmthdGFyaW5hIGZyb20gbGVhZ3VlIG9mIGxlZ2VuZHMKdWx0cmEgaGlnaCBjb250cmFzdAprZXJtaXQKcHVyZSB3aGl0ZSBiYWNrZ3JvdW5kCmxvdmVjcmFmdCBob3Jyb3IKbWFydGlhbApzb2Z0IGxpZ2h0aW5nIGNvbG9ycyBzY2hlbWUKc3RvY2sKZmFudGFzeSByZW5kZXIKaW4gaG9sb2dyYW1zIG9mIGFsaWVuIGFydGlmYWN0cwpsaWxpdGgKbGluZWFydCBiZWhhbmNlIGhkCmRhcmsgZmFudGFzeSBhcnR3b3JrCnJhaW5ib3cgYmFja2dyb3VuZApzaXplIGRpZmZlcmVuY2UKY2xvc2VyIHZpZXcKbGFuZApsb2lzaCBhbmQgZ29ybyBmdWppdGEKaXJheQptZXhpY28Kc29mdGJveCBsaWdodGluZwp0cmFpbGNhbQpmYW50YXN5IGF0bW9zcGhlcmUKYmFjayB0dXJuZWQKYmVpZ2UgYmFja2dyb3VuZApjcm9wIHlvZ2Egc2hvcnQKbmF0YWxpZSBwb3J0bWFuIGluIHN0YXIgdHJlawpib3RhbmljYWxzCm5lbwpuaWNob2xhcyBjYWdlCm90dG8gc2NobWlkdApjbG90aGluZyBkZXNpZ24KbXVzaWMgdmlkZW8KMzAwIGRwaQpkcmFtYXRpYyBtb29ubGlnaHQgbGlnaHRpbmcKcGFpbnQgc3BsYXNoZXMKZHluYW1pYyBjb2xvcgppbnRlbnNlIGZsYW1lcwpnb2RmYXRoZXIKdW5yZWFsIGVuZ2luZSBjaW5lbWF0aWMKZ3Jhc3MgbGFuZHNjYXBlCmNhbm9uIGVvcy0xZCBtYXJrIGlpCmNoaW5lc2UgYXJ0CnF1ZWVuIGplemViZWwKbWF0cml4IHRoZW1lCnBvcnRyYWl0IG9mIGVtbWEgc3RvbmUKZ2xvd2luZyBvcmFuZ2UgZXllcwpmaW5lc3NlCmdvcmdlb3VzIGV5ZXMKc2FkIGJsdWUgZXllcwpicml0aXNoIGZlYXR1cmVzCnBvcnRyYWl0IG9mIGEgcm9ib3QKcG9ydHJhaXQgb2YgYSBzYW11cmFpCnBvbnl0YWlsIGhhaXIKcHJhaXJpZQpjYXNjYWRpbmcgaXJpZGVzY2VudCB3YXRlcmZhbGxzCnBpbmsgc2hvcnQgaGFpcgpmaXIgdHJlZXMKYXZvY2Fkb3MKc2hpbmlnYW1pCmRyb2lkCmludGVuc2UgY29sb3VycwpyZWQgcmlkaW5nIGhvb2QKc2VyZW5lIGZvcmVzdCBzZXR0aW5nCmJlbnQgb3ZlcgpkZWF0aCBtZXRhbApzdW5mbG93ZXIKbmVvbiB2aXNvcgpmdWxsIGJvZHkgd2lkZSBzaG90CmZlbWFsZSBmYWNlCnNvIGN1dGUKcG9sYXJvaWQgcGhvdG8gd2l0aCBmbGFzaApzZWFuIG1jbG91Z2hsaW4KZGFyayB2aHMgZ290aGljIGhlYXJ0cwp2ZWdldGEKNGsgbGFuZHNjYXBlCnNtYWxsIGhpcHN0ZXIgY29mZmVlIHNob3AKbmVvbiBhZHZlcnRpc2VtZW50cwpmdWxsIHBsYXRlIGFybW9yCm1lY2hhbmljYWwgd2luZ3MKc3VuIGdvZApiYWxsZXJpbmEKZGFyayBjb2xvciBwYWxldHRlCmxlZ28gc2V0CnRoZSB0aGluZyAxOTgyCmRyb3Agc2hhZG93cwp0aGUgZHJhZ29uIGdpcmwgcG9ydHJhaXQKd2FyIG9mIGNvbG9ycwpleHBlY3RhdGlvbgpjb25mbGljdApzdG9uZSBzdGF0dWVzCmZyb20gdHJhbnNmb3JtZXJzCnRyYWNlcgphcnRnZXJtIHN5bHZhcmkgcG9ydHJhaXQKY2xlYW4gbGluZSBhcnQKbGF1cmVudCBkdXJpZXV4CnR3byBmcmFpbApjb3NtaWMgZHluYW1pYyBsaWdodGluZwpzbW9rZSBhbmQgZmlyZQp0cmFuc2x1Y2VudCByb3NlcyBvcm5hdGUKc3VwZXIgcmVuZGVyZWQgaW4gb2N0YW5lIHJlbmRlcgp3ZWFyaW5nIGJsYWNrIGNvYXQKdmlyZ2luIG1hcnkKYmVsdHMKd29sdmVyaW5lCm1hdHJpeCBjb2RlCnhpIGppbnBpbmcKem9tYmllcyBpbiB0aGUgc3RyZWV0cwp3YWxrClsgZGlnaXRhbCBhcnQgXSEhCmhvbGzDs3N5IHNpbW9uCmdsYXNzIG5lZ2F0aXZlCnNpbHZlciBnZWxhdGluZSByZWFsaXN0aWMKZmlyZSBleHBsb3Npb24gaW4gdGhlIGJhY2tncm91bmQKeW91bmcgc2ltb24gYmFrZXIKc29tZSBydXN0CnVrcmFpbmUKZGFyayBzeW50aHdhdmUKY29sb3JmdWwgY29jdGFpbApuZW9uIGxpZ2h0bmluZwptZXRhbCB3aXRoIGNoaXBwZWQgcGFpbnQgdGV4dHVyZQpjaGlja2VucwpibGFjayBpbmsgb24gd2hpdGUgYmFja2dyb3VuZApqYW5lIG5ld2xhbmQKbmVvbiBzdHJlZXRsaWdodHMKemVuaXRoYWwgbGlnaHRpbmcKcmVmbGVjdGlvbnMgYW5kIHJlZnJhY3Rpb25zClsgY29uY2VwdHVhbCBhcnQgXSEhCm1hcnkgYW5uaW5nCmRpZ2l0YWwgYXJ0IGhpCm1lZGlldmFsIG1hbnVzY3JpcHQKNDgwcApnbmFybHkKZXBpYyB2b2x1bWV0cmljIGxpZ2h0CnNob3QgZnJvbSBhIGRyb25lCmN5bmljYWwKZ29sZGVuIGF1cmEKdm9sdW1ldHJpYyBsaWdodCBhbmQgZm9nCjMgZCB1ZSA1CmNoYXJhY3RlciBpcyBmbHlpbmcKZXBpYyBjeWJlcnB1bmsKdGhlIG1pbGt5IHdheSBpbiB0aGUgc2t5CjEuIDIgYXBlcnR1cmUKcHJvc3RoZXNlcwpjb2xvcmZ1bCBvY3RhbmUgcmVuZGVyCndhaXRpbmcgcm9vbQp0cmVuZGluZyBvbiBhcnRzdGlvbgpmdXR1cmlzdGljIGNpdHkgYmFja2dyb3VuZApyZXZlcnNlCmFkb3JuZWQgd2l0aCBwcmVjaW91cyBzdG9uZXMKZG93bnBvdXIKcGFzdGVsIGdyZWVuCm5pY2Ugc3R1ZGlvIGxpZ2h0aW5nCnJlZmxlY3RpdmUgcG9vbApzdHVkeQpmYW50YXN0aWMgZGV0YWlsZWQgZXllcwpibGFjayBsaXBzCmdyaXR0eSBmZWVsaW5nCndpbGQgd2VzdCB0aGVtZQoxIDkgNiAwJ3MKcm9tYWluIGpvdWFuZGVhdQotIG4gNgpwcm90YWdvbmlzdCBpbiBmb3JlZ3JvdW5kCnNhYmF0dGllciBlZmZlY3QKdmlueWwgY3V0IHJlYWR5CnByb2ZvdW5kIGFuZCB2YXN0CmNvbG9yZnVsIHBhcGVyIGxhbnRlcm5zCmNvbmNlcHQgcGhvdG8KbWluaW1hbGlzdGljIGRlc2lnbgpwaXhhciAzIGQgYW5pbWF0aW9uIHN0eWxlCnN0eWxlIHRob21hcyBraW5rYWRlCmdvZCByYXlzIHRocm91Z2ggZm9nCmxpZ2h0IGF0IHRoZSBlbmQgb2YgdGhlIHR1bm5lbAptYWdpYyBzdXJyZWFsaXNtCmFuZHJleSByZW1uZXYKcHJvZmVzc2lvbmFsIHBpY3R1cmUKaG9ycm9yIGZpY3Rpb24Kc29waGlzdGljYXRlZCB5b3VuZyB3b21hbgpmcm9udCBhbmQgYmFjawpmYWxsb3V0IDcgNgpiYWRsYW5kcwptYWplc3RpYyBtYXR0ZSBwYWludGluZwpjbGVhciBvdXRmaXQgZGVzaWduCnNhdG9zaGkgY29uCmljb25pYyBsb2dvIHN5bWJvbAoxOTkwcyBhbmltZQpmbHlpbmcgc3BhY2VzaGlwcyBpbiBiYWNrZ3JvdW5kCmNvenkgYmVkCmJyb2tlbiB0b3lzIGFyZSBzY2F0dGVyZWQgYXJvdW5kCnN1YnRsZSBnaWdlcgpib3dsIG9mIGZydWl0CnphaGEgaGFkaWQgYXJjaGl0ZWN0dXJlCmh1bWFub2lkIHNlcnZvCmJpb2RvbWUKaGFsZiBzaGF2ZWQgaGFpcmN1dApicmlnaHQgY3liZXJwdW5rIGdsb3cKc21vb3RobHkKemlnZ3VyYXQKdHJlbmRpbmcgb24gdGlrdG9rCmNvbG91cmluZyAtIGluIHNoZWV0CmxhdGUgLSA0IDAgcyBhZ2VkCm11eSBkZWZpbmlkbwpkcmFtYXRpYyBsaWdodCBhbmQgc2hhZG93CmZpbmUgYnJ1c2ggc3Ryb2tlcwpzb2Z0IHJlZCBsaWdodHMKb3ZlcmJsb3duCmluIGEgcmVkd29vZCBmb3Jlc3QKdmlldyBmcm9tIHRoZSBza3kKZG5kIHRyaXRvbgpoaXN0b3J5IHBhaW50aW5nCnBvbHloZWRyYWwKc3VydmVpbGxhbmNlIGZvb3RhZ2UKbm8gdGV4dCEKNSBkCnRleHR1cmVkIHBhcmNobWVudCBiYWNrZ3JvdW5kCmhlcmfDqQpjcm9zc2luZyB0aGUgZGVzZXJ0CnN0YXJyeQpjaGFsayBkaWdpdGFsIGFydAp1bHRyYSBzZXR0aW5nCmZwcyBnYW1lCmxhdmEgZmxvd2luZwptYWdpYyB3b3JsZApkZXNrdG9wIGNvbXB1dGVyCmJsb29kIGFuZCBndXRzCmludHJpY2F0ZWx5IGRldGFpbGVkIHRleHR1cmVzCmggOCAwIDAKZW1wdHkgcGV0IGJvdHRsZXMKcGllcnJlIC0gYXVndXN0ZSByZW5vaXIKb2N0YW5lIDEgMiA4IGsKY29uY2VybmVkCmNsb2NrcHVuawphcm5vbGQgYXJtaXRhZ2UKZGFudGVzIGluZmVybm8KZmxpZ2h0IHN1aXQKY29sZCB3ZWF0aGVyCnJlZmxlY3Rpb24gaW4gd2F0ZXIKMSA5IDAgNQptb2Rlcm4gYXJ0IHN0eWxlCnByaXN0aW5lIGNvbmNlcHQgYXJ0CmZsb2F0aW5nIGJ1aWxkaW5ncwpjcml0aWNhbGx5IGNvbmRlbW5lZAp3YXRlcndoZWVscwp0aGF0IGxvb2tzIGxpa2UgYSBpbnNlY3QKZ29yZ2VvdXMgYW5kIGh1Z2UgaGVhZCBvcm5hbWVudHMKaGF0IGFuZCBob29kaWUKaW4gYXJ0IHN0eWxlCndhbGtpbmcgb24gZ3Jhc3MKZmVsdCEhISB0ZXh0dXJlCmJhciBjaGFydHMKY2FydCB3aGVlbHMKZ2FtZSBlbnZpcm9ubWVudCBkZXNpZ24KY2xvc2V1cCBhdCB0aGUgZm9vZApzcGFjaW91cwpzY2hsaWVyZW4KcmFncwpzZWFwdW5rIG1lY2hhCmZ1bGx5IHRhdHRvb2VkIGJvZHkKc3R1bm5pbmcgbGFuZHNjYXBlCmV0ZXJuYWwgYmxlc3NpbmcKZW52aXJvbm1lbnQgYXJ0aXN0Cndsb3AgYW5kIGFydGdlcm0KaHlwZXJkZXRhaWxlZCAzIGQgbWF0dGUgcGFpbnRpbmcKZmxhdCBwYW5lbHMKZ290aGljISEKY2luZW1hdGljIHNwYWNlIHNjZW5lcnkKY3JpbXNvbiAtIGJsYWNrIGNvbG9yIHNjaGVtZQphcyBhIGQgJiBkIG1vbnN0ZXIKYnJpZ2h0IHN0dWRpbyBsaWdodGluZwpibG9zc29taW5nCmRldGFpbGVkIGZsb3dlcnMKdWhkIDQgawpjaW5lbWF0aWMgc2hhZG93cwpwdXJlIGJsdWUgc2t5CnZlcnkgc2hvcnQgZGFyayBoYWlyCnNxdWFyZSBtYXNjdWxpbmUgZmFjaWFsIGZlYXR1cmVzCmhvbGRpbmcgYSBibGFzdGVyCndoaXRlIGZyaW5neSBoYWlyCmdsaW50cwpzZWxmIC0gcG9ydHJhaXQKY2hhcmNvYWwgc2tpbgpteXN0aWNhbCBlbmVyZ3kgaW4gdGhlIGFpcgpicnVzaGVkIGFsdW1pbnVtCnRoZSBtZXRyb3BvbGl0YW4gbXVzZXVtIG9mIGFydApkaWFkZW0KYmVhdXRpZnVsIHJpbSBsaWdodGluZwpidXRjaGVyIGJpbGx5CnZvbHVtaW5vdXMgY2xvdWRzCnBpbmVhcHBsZQp2ZXJ5IGZpbmUgYnJ1c2hzdHJva2VzCmZyaWRnZQpodW1hbiBsZWdzCnNtb2tlIGV2ZXJ5d2hlcmUKYW1lcmljYW5hIHZpYnJhbnQgY29sb3JzCnByaXplIHdpbm5pbmcgcGhvdG8KbWFnYWxpCmFybXkgb2Ygcm9ib3RzCnlvdW5nIGZlbWFsZQpkYXJrIQp3YXRlciBiZWFyCmNvbmNlcHQgYXJtb3IKcGxhbmUgaWxsdXN0cmF0aW9uCmFzdXJhIGZyb20gY2hpbmVzZSBteXRoCndhcnRzCmNvbG9yZWQgZGFndWVycmVvdHlwZQpqb2huIHdpbGxhaW0gZ29kd2FyZApzaW5jZXJlCmQgJiBkIGZhbnRhc3kgYXJ0CmludHJpY2F0ZSBvcm5hbWVudGFsIGZsb3VyaXNoZXMKa2VudGFybyBtaXVyYSBhcnQgc3R5bGUKbGluZW4Kc2hpcCBpbnRlcmlvcgpmcm9tIGNvbW1lZGlhIGRlbGwnYXJ0ZQppZ25lb3VzIHJvY2sgbWF0ZXJpYWxzCnNhcmNhc3RpYyBhbmQgZnJpZW5kbHkKdHJvb3BzIHNlYXJjaGluZyB0aGUgYXJlYQpmdXR1cmlzdGljIHRldHN1bwpvcmFuZ2UgcGFzdGVsIGNvbG9ycwpob21lIGFuZCBnYXJkZW4KZHlzdG9waWFuIGJhY2tncm91bmQKIyBkaWdpdGFsIDIgZApvaWwgcGFpbnRpbmcgcmVicmFuZHQKdWx0cmEgZGV0YWlsZWQgZmFjZQpwcyAxCnVlIDQKcGluayBzdW4Kc2kgLSBmaQpmaXJlIGZyb20gc29tZSB3aW5kb3dzCmVwb3h5IHJlc2luCmhpZ2ggbWVkaWV2YWwgZmFudGFzeQpvbmUgaGVhZAp3aWxkbGlmZSBwcmVzZXJ2YXRpb24Kd29yZGx5CnBvcnRhaXQgaW1hZ2UKcGhvdG8gaW4gY29sb3IKc21va2V5IGJ1cm50IGxvdmUgbGV0dGVycwphdXN0cmFsaWFuIHdpbGRmbG93ZXJzCmJsdWUgY2FwZQpob3Jyb3Igc2F3IHRlZXRoCmhvcnJvciByb3R0ZW4gdGVldGgKdm9sdW1ldHJpYyBpbnRlcmlvciBsaWdodGluZwp3ZXN0ZXJuIGZpbG0Kd2VhcmluZyBibGFjayBtZWRpZXZhbCByb2JlcwpncmVhdCBjaW5lbWF0b2dyYXBoeQpzdHJhaWdodCBqYXdsaW5lCmV6cmEgc3RvbGxlcgpjbG90aGVkIGluIGFuY2llbnQgc3RyZWV0IHdlYXIKcmVkIGNhcgpsb25nIC0gdGFpbGVkIHR1eGVkbyBjb2F0CmxlaWNhIG0gOQo4IDAgcyBzdHlsZQpvdmVyY2FzdCBmbGF0IG1pZGRheSBzdW5saWdodApuaWNob2xhcyBrYWxtYWtvZmYKY2hhcmxpZSBib3dhdGVyIGFuZCB0b20gYmFnc2hhdwp0cmVhc3VyZSBwbGFuZXQgY29sb3Igc2NoZW1lCmRpb2RlIGxpZ2h0aW5nCm1lY2hhIHBsYXRlIGFybW9yCmluIHRoZSBlbGVtZW50YWwgcGxhbmUgb2YgZmlyZQppbnRyaWNhdGUgYXV0b21hdGlzbQpza2V0Y2ggLSB1cAp0ZWxldHViYmllcwphbmdlbGljIHdpbmdzCmV5ZXMgaW4gdGhlIGJhcmsKYmx1ZSBjb2xvdXJzCmhpZ2hseSBkZXRhaWxlZCBsaW5ld29yawpjb2xvZnVsCnBvc3QgYXBwb2NhbHlwdGljCm9saXZpYQp2aWN0b3IgcHJlemlvCnNwZWN0cmFsCmVuZ2luZSByb29tCm1vZGVzdGx5IGNsb3RoZWQKbHVzaCBwbGFudHMgYW5kIGxhbnRlcm5zCnZpYmVzCmhhaWJhbmUgcmVubWVpCm1hY3JvIHBlcnNwZWN0aXZlCmJyZWF0aHRha2luZyBsaWdodHMgc2hpbmluZwpzb21lIHdyaW5rbGVkCmZvcmVzdCBjbGVhcmluZwplY2NlbnRyaWMKd2ludGVyIHNjZW5lCnVsdHJhcmVhbGlzdGljIG9pbCBwYWludGluZwp3ZWFyaW5nIGEgYmxhY2sgaG9vZGllCmd0YSBhcnQgc3R5bGUKYmxhY2sgYW5kIHdoaXRlIGhhaXIKbG9uZyBkaXN0YW5jZSBwaG90bwpkcnkgYnJ1c2ggdGV4dHVyZQpzdHJva2VzIHZpc2libGUKZ2xvd2luZyByZWZsZWN0aW9ucwphYmFuZG9uZWQgaG91c2UKYWJhbmRvbmVkIHNwYWNlIHN0YXRpb24KcGh5c2ljYWwgcGFydGljbGVzCmxhcGlzIGxhenVsaQpvcmlnYW1pIGNyYW5lIGRyYXdpbmdzCm1hdHRlIHBhaW50IGNvbG9ycwp3aW5lIGdsYXNzCmF1dG9tYXRpb24KZXBpYyB3aWRlIHNreSBhbmQgaG9yem9uCnJldHJvIHBzeWNoZWRlbGljIGlsbHVzdHJhdGlvbgpleHByZXNzaXZlIGJydXNoc3Ryb2tlcwpzdHJvbmcgZW1vdGlvbmFsIGltcGFjdAp2ZnggcGFydGljbGUgc2ltdWxhdGlvbgp1bmRlcnJhdGVkCmd0YSB2aWNlIGNpdHkgc3R5bGUKamFuaWNlIHN1bmcKYWR2ZW50dXJlIHBsYXlncm91bmQgYWNjaWRlbnQKYWxpZW4gY3JlYXR1cmVzCnJvYXJpbmcgdHdlbnRpZXMKbmVhbCBhZGFtcyB8IHNpbmlzdGVyCmNoYXJtaW5nIGV4cHJlc3Npb24gZ2VzaWNodAphZnJpY2FuIHByaW5jZXNzCmFybWl0YWdlCnZhcG9yd2F2ZSEKZXh0cmVtZSBxdWFsaXR5IG1hc3RlcnBpZWNlCmFsaWNlIGNvb3BlcgprZW4gd29uZwpiZWF1dGlmdWxsCmNvbGxlY3RpYmxlCnZpY3RvIG5hZ2kKc3RhcmZpZWxkIGluIGJhY2tncm91bmQKc2hvd2Nhc2VzIGZ1bGwgb2YgZW1icnlvcwpzb2Z0IHNtb2tlCm1hdHJpeCBtb3ZpZSBjb2xvciBncmFkaW5nCmZsZXNoeSAtIHN1cmZhY2VzCmFsaWduZWQgeGVub21vcnBoIG5lc3RpbmcgZG9sbHMKcGxhdGZvcm0gYm9vdHMKcHVmZnMgb2Ygc21va2UKYnJpZ2h0IHNtaWxlCmJsYWNrIGdsYXNzZXMKdW5yZWFsIDQKb3JhbmdlIGZ1enp5IG11cHBldAphbiBhbnRocm9wb21vcnBoaWMgZ2FuZ3N0ZXIgcmF0CmRyYW1tYXRpYyBsaWdodGluZwpoZWxscmFpc2VyCmRldGFpbGVkIHN1bWktZSBpbGx1c3RyYXRpb24Kc3Rvcm1jbG91ZHMKc3VudHVyCmJpcmRzIGFuZCB0cmVlcwppbnRyaWNhdGUgaGFrYW1hCnZpY2lvdXMKc2luZ2xlIHJlYWxpc3RpYyBmYWNlCmhhbmQgLSBkcmF3biBkaWdpdGFsIGFydAptZWxhbmNob25pYyBzb2Z0IGxpZ2h0CmZ1amlmaWxtIHN1cGVyaWEKc2FpbG9yIGplcnJ5IHRhdHRvbyBmbGFzaAp2ZXJ5IG11c2NseQphbmNpZW50IG1lc29wb3RhbWlhbiB3YXJyaW9yCmFuY2llbnQgZ3JlZWsgcnVpbnMKdWx0cmF3aWRlIGVzdGFibGlzaGluZyBzaG90CmFyY2gKd2l0aCBkZXByZXNzaXZlIGZlZWxpbmcKZGlydHlyb2JvdApsb25nIGZsb3dpbmcgZmlucwpicmlnaHQgZ3JvdW5kCmZvY3VzIG9uIHRoZSBmYWNlCmluIHN0eWxlIG9mIGt5b3RvIGFuaW1hdGlvbgpjb25jZW50cmF0ZWQgYnVpbGRpbmdzCmphcGFuZXNlIG5laWdoYm9yaG9vZApyb2xsZXJibGFkZXMKY29sZCBhdG1vc3BoZXJlCml0byBvZ3VyZQprZXdwaWUKcmVmbGVjdGVkIGNocm9tZQpsdW1pbmVzY2VudCBjb25jZXB0IGFydApoYWxmIGJsdWVwcmludApyZ2JhIGNvbG9yCmFudGhyb3BvbW9ycGhpYyBiZWF2ZXIKYWdhaW5zdCBkYXJrIGJhY2tncm91bmQKanVhbmpvIGd1YXJuaWRvCnNuYWtlIHJpdmVyIGluIHRoZSBqdW5nbGUKYmxhY2sgaGVsaWNvcHRlcnMKc3R5bGUgb2Ygc2ltb24gc3RhbGVuaGFnCmNoYXJhY3RlciBtYXNodXAKY29tYmluYXRpb24gYXJ0CnBhdGlvCnRha2F0byB5b21hbW90by4gNCBrCmNyZWF0aXZlIHBob3Rvc2hvcAphcm1hZ2VkZG9uCm1vb2R5IGJlYXV0aWZ1bCBjb2xvcnMKY29sb3VyaW5nIHBhZ2VzCjQgayBmdWxsIGhkCmFycmF5IG9mIGNydCB0ZWxldmlzaW9ucwoyIGQgbWF0dGUKd29tYW5ob29kCndoaXRlIGRlc2VydCBiYWNrZ3JvdW5kCmJlZHMKdXRhbWFybyBraXRhZ2F3YSBzdHlsZQpyb3lhbCBzdHlsZQphbm51YWwgYXdhcmQgd2lubmVyCnRvbmFsaXN0IHBhaW50aW5nCnNjcmVhbWluZyB3aXRoIGZlYXIKbXVzZWUgZCdvcnNheSA4IGsKd2VpcmRjb3JlIHZvaWRwdW5rIGZ1cnNvbmEKaGlnaCBxdWFsaXR5IG1vZGVsIHNoZWV0CmRlZXAgYmxhY2sgcm9vdHMKcmVkIHJvYmUKZGV0YWlsZWQgcmVhbGlzbQpyYXkgdHJhY2VkIHJlZmxlY3Rpb25zCmF5a3V0IGF5ZG9nZHUKcG9seWdvbmFsIGZyYWdtZW50cwpkZXRhaWxlZCBmYW5hcnQKbHVtaW5lc2NlbnQgY29sb3JzCmJsb2NraW5nIHRoZSBzdW4KYmxhY2sgYW5kIHllbGxvdwpiYXJiYXJpYW4gb24gbWFycwpkaWdpdGFsIGNlbCBzaGFkaW5nCnNlZSB0aHJvdWdoIGdsYXNzIGhvbG9ncmFtIG1hc2sKcnVpbmVkIGNpdHlzY2FwZQpqb3JkYW4gbGFtYXJyZSAtIHdhbgptaXJhbmRhIG1lZWtzCmZyYWN0YWwgYXJtb3IKcGVyc2lhbiBmb2xrb3JlIGFydHN0eWxlCmJlYXV0aWZ1bCBnbG93aW5nIGV5ZXMKY2VsbCBzaGFkaW5nLiAoIHJiIDYgcwpiZWF1dGlmdWwgZGFyayBtYWdpY2lhbiBnaXJsCnJhZGlhbnQgdmlicmFudCBjb2xvcnMKd2luZ2VkIGV5ZWxpbmVyCmRpYSBkZSBsb3MgbXVlcnRvcy4gOCBrCmludHJpY2F0ZSBlbGVnYW50CnVyYmFuIGNpdHkgcGhvdG9ncmFwaHkKcmViZWNjYSByb21pam4gYXMgZG9yb3RoeQpzdGlja2VyIHNoZWV0CmluIHRoZSBzdHlsZSBhcnRnZXJtCm1hZ2ljIHN0b3JtIGFuZCB0aHVuZGVyIGNsb3VkcwpqYXBhbmVzZSBjb3VudHJ5c2lkZQpjaGlsbGhvcAp0cmVuZHkgdHlwb2dyYXBoeQpoeXBlciAtIGRldGFpbGVkIGZhY2UKZHJhbWF0aWMgZGFyayBsaWdodGluZwpzcGxlbmRpZCBoYXVzc21hbm4gYXJjaGl0ZWN0dXJlCnBpbmsgZ2xhc3NlcwpnZW5pdXMKYmVhdXRpZnVsIHN1bm55IGRheQptaWxkIGJyZWV6ZSB3aW5kCnN0dW5uaW5nIGV5ZXMKY29sb3JmdWwgZHJlYW0KY29sb3JmdWwhIQpwYWxhY2UgYmFja2dyb3VuZApiZWF1dGlmdWwgeW91bmcgcHJpbmNlCmZpbmFsIGZhbnRzeQpsb3RzIG9mIGNhYmxlcyBhbmQgd2lyaW5nCnJldHJvIGRlc2lnbgp2aXZpZCBwYWludGluZwpkZXRhaWxlZCBhZgpzZWNvbmQgY29taW5nCmJpYmxpY2FsIHBhaW50aW5nCnRodWcgbGlmZQpjbGVhdmVyCmZvcmVzdCBwbGFpbnMgb2YgeW9ya3NoaXJlCmNsZWFyIGdlb21ldHJ5CmNvbmNlcHQgYXJ0IHwgZHlzb24KZHJhbWF0aWMgc2NpLWZpIG1vdmllIHN0aWxsCm1hdHRlIHBhaW50aW5nIG1vdmllIHBvc3RlcgphcnQgbm91dmVhdSBzd2lybHMKY3V0ZSBib3lzCmVsIGFuYXRzdWkKZXZlbmluZyBzdGFybGlnaHQKbWFtaSB3YXRhCm5lZmVydGl0aQpmbGFtZSBjb2xvcnMgYnJpZ2h0Cnlvc2hpa2F6dSB5YXN1aGlrbwpyZWN0YW5nbGVzCnBzeWNoZWRlbGljIHBob3RvbHVtaW5lc2NlbnQKYmxhY2sgc3BhY2UKYmx1ZSBjcnlzdGFsIGV4cGxvZGluZwo0ayAoYmx1ZSkhIQpyZW5kZXJlZCBpbiB1bnJlYWwgZW5naW5lIDQgayBocQpjb2xvcmZ1bGx5IGJhY2tncm91bmQKbWV0YWwgc2hhZGVkCmlua2luZyBvbiBza2luCmJvaXNzYiAtIGJsYW5jYS4gagpjaW5keSBhdmVsaW5vCnNlcmdlIG1hcnNoZW5uaWtvdgpicmFzcyB3b21hbgpicmF2ZSB5b3VuZyBnaXJsCnNwYXJrbGluZyBzcGlyaXRzCmJyaWdodGx5IGNvbG91cmVkIG9pbCBvbiBjYW52YXMKNCBrIHJlYWxpc3RpYyBwaG90bwpicm9rZW4gcmFpbmJvdwpicnVuZXR0ZSB3aXRoIGR5ZWQgYmxvbmRlIGhhaXIKbGV2aWF0aGFuIGNyb3NzCmNhbW8gbWFkZSBvZiB0ZWV0aApnbGl0dGVyIHN0b3JtCm9sZCBkYW1hZ2FlZCBwb2xhcm9pZCBwaG90bwpmYWRlZCEhIHZlcnkgc29mdCBsaWdodHMKYmlnIG92ZXJjYXN0CmNhcmdvIHBhbnRzCmNhcnRvb24gbmV0d29yayBzdHlsZQpkdWcgc3RhbmF0IG1hY2FicmUgYXJ0CmNvbnRyb2xsZXIKc2V4eSBnaXJsCmluIHN0eWxlIG9mIG5hbiBnb2xkaW4KZGFyayBhdWJ1cm4gd2F2eSBoYWlyCmJyZWF0aGUKZmFjdG9yaW8KZmFjZSB0dXJuYXJvdW5kCmtsaW10IGFuZCBuaXhldQphY3Rpb24gcG9zZXMKbG9va2luZyBzdHJhaWdodApqYXBhbi4gdm9sdW1ldHJpYyBsaWdodGluZwpzaGFycCBjbGF3cyBhbmQgc2hhcnAgdGVldGgKZ3RhIHZpY2UgY2l0eSBzdHlsZSBhcnQKdGlnaHQgc2hpcnQKYWxleGFuZHJlIGJvdXJsZXQKc3RhbmRpbmcgb24gdGhlIGJlYWNoIGF0IHN1bnNldAp3aWRlIGFuZ2xlIGNpbmVtYXRvZ3JhcGh5CmNpbmVtYXRpYyBmcm9udCBzaG90CmdyYXBoaWNzIG1vZHMKZHJhbWF0aWMgcmFpbgpmdXNjaGlhIGxlZHMKaGlnaCBmYW50YXN5IG1hdHRlIHBhaW50aW5nCmxpemFyZCBvbiBncm91bmQKcnVuZG93biBuZXcgeW9yayBhcGFydG1lbnQKb24gYSBkZXNvbGF0ZSBwbGFpbgppc29tZXRyaWMgaW52aXJvbm1lbnQKdWx0cmEgaGlnaCBkZWZpbml0aW9uIGRldGFpbHMKc29waGlzaXRpY2F0ZWQKMyBkIGNsYXkgc2N1bHB0dXJlCnN0YXIgd2FycyBtb3ZpZQp3ZWFyaW5nIGJsYWNrIHRpZ2h0IGNsb3RoaW5nCmZ1dHVyaXN0aWMgc3BhY2Ugc2hpcCBpbnRlcnJpb3IKZ2lybCB3YWxraW5nIGJldHdlZW4gZHVuZXMKaGFuc2VsIGFuZCBncmV0ZWwKY2VsdGljIGJyYWlkCnBlbnNpdmUgYW5kIGhvcGVmdWwgZXhwcmVzc2lvbgp0aGUgY2hpY2tlbiBtYW4Kc21va2UgYm9pbGluZwp0cmVuY2ggd2FyZmFyZQp3ZXMgYW5kZXJzb24gY29sb3Igc2NoZW1lCnBvcnRyYWl0IGNhc3RpbmcgbG9uZyBzaGFkb3dzCmNvbG9yIHBob3RvIG9mIGpvc2lwIGJyb3ogdGl0bwpwaG90byBmcm9tIHRoZSA3IDAgcwptY2Jlc3MgaWxsdXN0cmF0aW9uCmNvbG9yZnVsIHNwbGF0dGVycwphbiBhcmN5bGljIGFydApyZXRhcmRlZCB3b2xmCmZyYWN0YWwgdmVpbnMKYmVhdXRpZnVsIHdoaXRlIHRlZXRoCnRyZW1lbGxhIGZ1Y2lmb3JtaXMKNGsgZGVza3RvcCBiYWNrZ3JvdW5kCnZpc3VhbCBzdG9yeXRlbGxpbmcKZ2xhc3Mgd2luZG93cwo4IGsgdWx0cmEgaGlnaCBkZWZpbml0aW9uCmNvbmNlcHQgYXJ0IG9mIGNvbWlrZXQgY29zcGxheQpiYXNlZCBvbiBjaGlsZCdzIGRyYXdpbmcKYW5jaWVudCBnYXJkZW4gYmVoaW5kIGhlcgpzd2VldCBodWdzCndyb3VnaHQgaXJvbgp3YXNoaW5ndG9uIHN0YXRlCnByYW5hCmRldGFpbGVkIGNyZWF0dXJlCnNtb2tlIGFuZCBydWJibGUKdmlzYWdlCmRyYWdvbiBmYWNlCmdsb3dpbmcgbGVucyBmbGFyZQp0YXR0ZXJlZCBkcmVzcwpzdHlsaXplZCBwYnIKbGFjZXMgYW5kIHJpYmJvbnMKbWFueSBsaWdodG5pbmcKc3Ryb25nIGFydGlmaWNpYWwgaW50ZWxsaWdlbmNlCnN0cmVldCBuaWdodApkYXJrIHNjZW5hcmlvCmJsaW5kaW5nIGJyaWdodCBzdW4KY3liZXJwdW5rIGdpcmwKdGFuZ2xlcyBvZiBtZXRhbGxpYyBjYWJsZXMKdG93ZXJpbmcgd2F2ZXMKY3Jvd24gb2Ygc25ha2VzCmV4dHJlbWUgZHJhbWEKc3RyZWV0cyBvZiBob25nIGtvbmcKc3dhcm92c2tpIGFuZCB0aWZmYW55CjIwIG1lZ2FwaXhlbHMKc3Vycm91bmRpbmcgb25pb25zCmhpZ2ggc3BlZWQgYWN0aW9uCnRoaXMgaXMgaGVsbApbIGdyZWcgcnV0a293c2tpIF0KcmVhZGluZyBpbiBsaWJyYXJ5CmRhcmsgYW5kIHdoaXRlCmRvY3RvcgpkaWZmZXJlbnQgd29tZW4ncyBmYWNlcwpzZXJlbmUgZW1vdGlvbnMKc21hbGwgY2hpbgptb25hcmNoeQpwZXJ1dmlhbgp2b2xsdW1ldHJpYyBsaWdodGluZwptb2hhbWVkIHJlZGEgYW5kIGhyIGdpZ2VyCmFib3ZlIGxvdyBsYXllcmVkIGNsb3Vkcwpjb25jZXJ0IGRvY3VtZW50YXJ5CnRpbGVkIHJvb20gc3F1YXJlZCB3YXRlcndheQpkYXJrIGZhbnRhc3kuIGludHJpY2F0ZQp3aGl0ZSBzcGlyYWwgaG9ybnMKamFnZ2VkIHN3b3JkCmN1cnZlZCBzd29yZApvcmtpc2ggc3dvcmQKcHJlc2lkZW50YWwgZWxlY3Rpb25zIGNhbmRpZGF0ZXMKd2l0aCBjbGVhciBnbGFzcwppc29wb2QKc3ltYm9scyBvZiBsaXZlCnZpZXcgZnJvbSBhYm92ZSBvbiBzZWFzY2FwZQpsaWdodG5pbmcgc3Rvcm1zCmF3YXJkIGxhbmRzY2FwZSBwaG90b2dyYXBoeQpjcmlzcCBzaGFycCBmb2N1cwpwYWxtIHNwcmluZ3MKZWxlZ2FudCBsYWR5CnN0YXJzY2FwZQpkcmVhbXkgY29sb3JmdWwgY3liZXJwdW5rIGNvbG9ycwpjb25hbiB0aGUgZGVzdHJveWVyIDEgOSA4IDUKbW9kZXJhdGUgYXRtb3NwaGVyaWMgbGlnaHRpbmcKcmVpbmEgcm9jaW4KY3J5ZW5naW5lIG9jdGFuZQptZWx0ZWQgY2hlZGRhcgphcm5vbGQgbWF5YSByZW5kZXIKaWNlIG1hZ2UKc2hvcmUgb2YgdGhlIGxha2UKZHVhbCB0b25lIGxpZ2h0aW5nCnNtYWxsIG1hbnVmYWN0dXJlCmhpZ2ggcXVhbGl0eSAzZCByZWFsaXNtCnR3aXN0ZWQgdHJ1bmsKcGxlbnR5IG1venphcmVsbGEKbm8gbGlwc3RpY2sKaW5zaWRlIGEgY2FzdGxlCmZlYXN0Cmpld2VsZWQgdmVpbApiYXJlZm9vdCBpbiBzYW5kYWxzCmFjdGlvbiBwb3NlIDogOiBzcG90bGlnaHQKcmVhbCBzdW5zZXQKYWZ0ZXJub29uIGxpZ2h0cwpjbGFzaApteXN0ZXJpb3VzIGdsYW1vdXIKaGF3a2VuCmRvdWdsYXMgaG9mZm1hbgppbXByZXNzaW9uaXN0IHdhdGVyY29sb3IKc3RlYW1wdW5rISEhCmVuY2hhbnRlZCBkcmVhbXMKY3VybGVkIGJlYXJkCmZyb20gYSBtb3ZpZSBzY2VuZQpleHByZXNzaXZlIHN1cnByaXNlZCBleHByZXNzaW9uCmNoYXJhY3RlciBkZXNpZ25zIHBhaW50aW5nCnRhb2lzdCBwcmllc3QKc3VsdHJ5IGV4cHJlc3Npb24Kd2hpdGUgbWluaXNraXJ0Cm11c2NsZWQgaHVtYW5vaWQgYmFscm9nIGRlbW9uCndoaXRlIGRpYW1vbmRzCmRyZXNzZWQgaW4gbG9uZyBmbHVlbnQgc2tpcnQKbHVuYXIgc29pbAppbmNyZWRpYmx5IGRldGFpbGVkIGZhY2VzCnNub3cgY2Ftb3VmbGFnZQpzY2lmaSBiYXNlCnNtb290aCBwdXJwbGUgc2tpbgp3YXJmcmFtZSBkZXN0aW55CnRoZSBzdHJ1Y3R1cmUgb2YgZ2FsYXh5CmV4cXVpc2l0ZSBhbmQgYmVhdXRpZnVsCmluIHRoZSB2b2lkCmFuZHJldyBuZXdlbGwgd3lldGgKbW9yb3NlCmdpZ2VyIGJhY2tncm91bmQgbGltaW5hbCB2b2lkCmNhc3VhbCBibGFjayBjbG90aGluZwpsZWFuaW5nIG9uIGRvb3IKbmV3IHNjaWZpIG1vdmllCmdsb3dpbmcgY3JhY2tzCnRoaWdocyEhISEhIQpncmFpbnkgcmlzb2dyYXBoIG1hdHRlIHBhaW50aW5nCnVwIGNsb3NlIHNob3Qgc2hpbmppIGFyYW1ha2kKZXBpYyBncmltZGFyawpncmltLWhhdHRlcgplbmVzIGRpcmlnCmNvbWZvcnQgcG9zc2UKaG9vZCBjb3ZlcnMgaGlzIGV5ZXMKdG9uZWQgYXJtcwpjb2xsYXIgb24gbmVjawpyYWJpZXMKZXZhbmdlbGlvbiB0aGlyZCBpbXBhY3QgaW5zcGlyZWQKa2FsaWdoYXQgaGlnaGx5IGRldGFpbGVkCnVuZGVyd2F0ZXIgc2hvdAoyIDAgMCBpc28KZ3Jhdml0eSBydXNoIGluc3BpcmVkCmluIG5vIGdhbWUgbm8gbGlmZQpzZWFuIGhhcnJpcwpyZWQgcGVha3MgaW4gdGhlIGJhY2tncm91bmQKY3V0ZSBjb21wbGV4aW9uCnVucmVhbCBlbmdpbmUgcXVhbGl0eQpwYW5jYWtlIHNob3J0IGxhcmdlIGhlYWQKbGVuaW4KYnVzc2llcmUgYW5kIHJvYmVydG8gZmVycmkKYnJpZ2h0bHkgbGl0IHB1cnBsZSByb29tCmN1cnZlZCBmdXJuaXR1cmUKYXdhcmQgd2lubmluZyBhdXRvY2hyb21lIHBob3RvCmhlYXZpbHkgb3JuYW1lbnRhbAphcnQgbm91dmVhdSBwYXR0ZXJuCmVndWNoaQppbnNhbmUgc21pbGUKYmVhdXRpZnVsIGF1ZHJleSBoZXBidXJuCm1lbW9yYWJsZSBzY2VuZQp2aWJyYW50IGdyZWVuZXJ5CmNvbnRvdXIKOGsuIHZvbHVtZXRyaWMgbGlnaHRpbmcKYXdhcmQgd2lubmluZyBpbnRlcmlvciBkZXNpZ24Kc3RvbmUgYW5kIGdsYXNzIGFuZCBnb2xkCmVuaGFuY2UgbGlnaHQgZWZmZWN0CmdsaXN0ZXJpbmcKamVkZGFoIGNpdHkgc3RyZWV0CmJpb3Nob2NrIHNjcmVlbnNob3QKZmF0YWwKaW4gYmx1ZSBkcmVzcwpicm9uemUgaGVhZHNldApraW0gaHl1biBqb28KbG90cyBvZiBlbGVtZW50cwpkcmFtYXRpYyBjbG91ZHMgY3lhbiBhdG1vc3BoZXJlCmxpc3RlbmluZyB0byBtdXNpYyBhdCAyIGFtCnplYnJhIG9wIGFydAppc3R2YW4gc2FuZG9yZmkKZnJvbSB0aGUgbW92aWUgdGhlIHRoaW5nCmluc2FuZWx5IGRldGFpbGVkIHJlbmRlcmluZwp1bmRlcmRldmVsb3BlZAp0cmFkaXRpb25hbCBmaXJlcGxhY2UKY2hhcmFjdGVyIGZyb20gbW9ydGFsIGtvbWJhdApncmVlbiBzcGFya2xlcwptYXl1cmkgc2hpaW5hIGZyb20gc3RlaW5zIGdhdGUKc3VtbWVyIG1vcm5pbmcgbGlnaHQKYW1hemluZyBjaW5lbWF0b2dyYXBoeQp1bnJlYWwgZW5naW5lIHJlbmRlciBjb25jZXB0IGFydApkZXRlY3RpdmUgY2xvdGhlcwpkZXRhaWxlZCBtYWtldXAgb24gZXllcwpmZWF0aGVyeSByZWQgaGFpcgpvbGQgY2FiaW4Kd2hhdApvbmx5IHdpdGggYmx1ZQpvcmlzYSBmcm9tIG92ZXJ3YXRjaApwaG90byB0YWtlbiBpbiAyIDAgMiAwCnN1YnN0YW5jZSByZW5kZXIKYmFyZWx5IHNlZW4gd29tZW4KdGhlIHN1cGVyIGhvdCBhbmQgc2V4eQp1bnNhdHVyYXRlZCBhbmQgZGFyayBhdG1vc3BoZXJlCm5lYnVsYWUgYmFja2dyb3VuZApjb25jcmV0ZSBiYWxjb255CjM2MCoKY2xlYW4gbG9nbyBkZXNpZ24KcG9zdHByb2R1Y3Rpb24Kc2VhbWxlc3MgbWljcm8gZGV0YWlsCm1pbGsgYmFyIG1hZ2F6aW5lCmNlaWxpbmcgZmx1b3Jlc2NlbnQgbGlnaHRpbmcKYnJpZ2h0IHVuaWZvcm0gYmFja2dyb3VuZAplbW90aW9uYWwgc2FkIHBhaW50aW5nCmdpbmdlciB3YXZ5IGhhaXIKZ29sZGVuIGFuZCBjb3BwZXIgc2hpbmluZyBhcm1vcgpnbGFzc2VzIGdsYXNzZXMKb2YgYSBvbGQgMTh0aCBjZW50dXJ5Cm1hZ2ljYWwgYWVzdGhldGljcwplbGVnYW50IGNvbG9yZnVsCm1hZ2ljYWwgd2hpdGUgZm9nCm1hbGwgZ290aApzaGUgaXMgYWJvdXQgNiAwIHllYXJzIG9sZApyZWQgY3JpbXNvbiBoYWlyCmRlZXAgZm9jdXMgZCAmIGQgZmFudGFzeQpwb3J0cmFpdCBvZiBhbiBhYnN1cmRseSBncmFjZWZ1bApwcmVkYXRvcnkgcHJheWluZyBtYW50aXMKZ29sZGVuIGNsb3Vkcwp0aGluIHB1cnNlZCBsaXBzCnNwcmludGluZwpnbG93aW5nIHdoaXRlIGFjY2VudCBsaWdodGluZwprZXkgYXJ0IGFuaW1lIHNoYXJwIGZvY3VzCmVsZWdhbnQgYmFyb3F1ZQptYXN0ZXJwaWVjZSA6IDEKZ3VsZgpibGFja2xpZ2h0IHJlYWN0aW5nCnNpdHRpbmcgaW4gYSByZWZsZWN0aXZlIHBvb2wKcXVlZW4gb2Ygc25ha2VzCjEgOCA5IDAgcyBwaG90b2dyYXBoeQpyZWQgaG9vZCBjb3NwbGF5CmRlY29yYXRpdmUgbGVhdGhlciBhcm1vcgpyZW5kZXIgb2YgaGVhdnkgZmFudGFzeSBhcm1vcgp3aW5kIGtpc3NlZCBwaWN0dXJlcwpjZWxlYnJhdGluZyBkYXkgb2YgdGhlIGRlYWQKc2NlbmVyeSBhcnR3b3JrCndpdGggcGxheXN0YXRpb24gMSBncmFwaGljcwpzZW5uYSBmcm9tIGxlYWd1ZSBvZiBsZWdlbmRzCmJlbmQgb3ZlciBwb3N0dXJlCnNoZXJpbHluIGZlbm4gMiAyIHllYXJzIG9sZAptZW1lIGN1bHR1cmUKZmVtYWxlIG9yYyBmb3Jlc3QgZHJ1aWQKd29ybGQgb2YgbHV0ZQpzcGFjZXNoaXAgaW4gYSBuZWJ1bGEKc3RhdHVlIG9mIGEgcGVyZmVjdCB3b21hbgpzdGV2ZSBoYXJ2ZXkgaG9sZGluZyBsaWdodHNhYmVyCnN0cmVldCBvZiBwYXJpcyBwaG90b2dyYXBoeQpzeW1tZXRyeSBjb25jcGV0IGFydApzeW1tZXRyeSEhIHllbGxvdyByYW5nZXIKdGFwcGluZyBpbiB0byBzb21ldGhpbmcgZ3JlYXRlcgphbmNpZW50IGNoaW5lc2Ugb3JuYXRlCnRoZSBiaXJ0aApzdGlja3kgYmxhY2sgZ29vCmVuZXJnZXRpYyBiZWluZ3MgcGF0cm9sbGluZwp0aGUgZ29kIGhhZGVzCmJpZyBwb2RzCmR5c3RvcGlhbiBzbHVtcwpiZWF1dGlmdWwgc3R1bm5pbmcgd2F0ZXJmYWxsCnVsdHJhIHJlYWxpc3RpYyA4ayBvY3RhbiBwaG90bwptaXNzaW5nIHBvc3Rlcgppc2hpa2VpCmVsZWdhbnQgbGVncwpzb2Z5YSBlbWVsZW5rbwp3aWRlYW5nbGUgYWN0aW9uCnlvdSBtYXkgc2F5IGknbSBhIGRyZWFtZXIKeW91bmcgYW5ncnkgd29tYW4KcmVhbGlzdGljIOKAnQpzdHVkaW8gbGlnaHRpbmfigJ0Kc3R5bGUgb2YgbGVvbmlkIGFmcmVtb3bigJ0Kd2VyZXdvbGbigJ0KbGVzYmlhbiBlbWJyYWNlCmZvcm11bGFlCnoKYW5uaWUgbGVpYm92aXR6IGFuZCB6YWNrIHNueWRlcgpkYXJrIG1vZGUKcHJvbW90aW9uYWwgbWF0ZXJpYWwKbWFzdGVycGllY2UgNCBrCjQgayApCndlYXJpbmcgYSBob29kCndhdGVyd2F5CmZpcnN0LXBlcnNvbgpwbGFuZXMKcmVhbCBlbmdpbmUgNQpqb2huIHdhdGVycwpjbGVhbiBicnVzaCBzdHJva2UKZmVhdGhlcmVkIHdpbmdzCnN1YnRsZSB2aWJyYW5jeQpxdWlldCBiZWF1dHkKbXVsdGlkaW1lbnNpb25hbAp1bHRyYS1oaWdoIHJlc29sdXRpb24KY3liZXItcHVuawpyZXB0aWxlIHNraW4Kc3Rvcm0gaW4gdGhlIGJhY2tncm91bmQKcmVkIGhhemUKY29taWMgYm9vayBwYW5lbApzdGFuaXPFgmF3IHN6dWthbHNraQppbiBhIHdpbGQgd2VzdCB0b3duCmZpbG0gbm9pciBzdHlsZQpsYXRpbmFzCm5ldXJvbWFuY3kKYXR0ZW50aW9uCnZpc2NvdXMgdm9sdW1ldHJpYyBzbW9rZQpzaGFycCBhbmdsZXMKKCBjeWJlcnB1bmsgMiAwIDcgNwphem8geWVsbG93CnQgLSByZXgKc21va2UgYmFja2dyb3VuZApkYXJrIGVuY2xvc2VkCmZyYWdyYW50IHBsYW50cwpsYXcgb2YgdGhpcmRzCnNjYW4gbGluZXMKaGFwcHkgYmlydGhkYXkKcGF1bCBjaGFkZWlzc29uCmJvcm4gc3Vydml2b3IKc2FoYXJhIGRlc2VydApibGFjayBtaXJyb3IKdG9uZXMgb2YgYmxhY2sKaG9nd2FydHMgbGlicmFyeQpyb2xsZXJibGFkaW5nCnJlZHVjZSBkdXBsaWNhdGlvbiBpbnRlcmZlcmVuY2UKcGFydGx5IGNsb3VkeSBza3kKc2VjcmV0IHNvY2lldHkKZW1waXJlIHNpbGhvdWV0dGUKY2hhcmFjdGVyIGZhY2Ugc3R1ZHkKdHJlbmRpbmcgb24gcGludGVyZXN0LiBjb20KZnJlbmNoIHZpbGxhZ2UgaW50ZXJpb3IKZ2FyYWdlCmp1bXAgc2NhcmUKY3JlZXB5IG1hc2tlZCBtYXJpb25ldHRlIHB1cHBldApwYW5vcmFtaWMgYW5hbW9ycGhpYwpjcmVlcHkgcGFzdGEKbWF5YW4gamFndWFyIHdhcnJpb3IKaW4gd2ludGVyCjEgOSA4IDAgcyBtb3ZpZSBwb3N0ZXIKc2ltcHNvbnMKb2xkIGFiYW5kb25lZCBob3VzZQpndWNjaSBjbG90aGVzCjQgMCBtbQpiYXNlbWVudAphbmltYXRyb25pY3MKbWF0aGVtYXRpY3MgYW5kIGdlb21ldHJ5CnBvb3IgbGlnaHRpbmcKaXNvbWV0cmljIDNkIGZhbnRhc3kKdHJlbmRpbmcgb24gY2hhcmFjdGVyIGRlc2lnbgphbGJlcnQgYmllcmRzdGFkdAp0YXhpZGVybXkKcm95YWwgY29tbWlzc2lvbgpicm93biBiYWNrZ3JvdW5kCm10dgpsaXZlIG9uIHN0YWdlCjE5NzMKb2NjdWx0IHNpZ25zCmludHJpY2F0ZSBvaWwgcGFzdGVsIGdsb3cKcHVycGxlIGFuZCBibHVlCiNtYWNybwppbnNpZGUgb2YgYW4gYXV0byBkZWFsZXJzaGlwCnJ1ZGUKY2FzcGVyIHRoZSBmcmllbmRseSBnaG9zdAptdWx0aXBsYXllciBzZXQtcGllY2UgOjkKYmVhcnMKYW5pbWUgdmZ4CnNlcmlvdXMgZmFjaWFsIGV4cHJlc3Npb24Kd2FycAoyIDQgMCBwIGZvb3RhZ2UKZGllIGFudHdvb3JkIHlvbGFuZGkgdmlzc2VyCmhpZ2hseSBkZXRhaWxlZCBiZWF1dGlmdWwKZnJpZW5kbHkgcm9ib3QKc21hbGwgcm9vbQpzcGVjdHJ1bQpibG9ja2J1c3RlcgpmcmlnaHRlbmVkCnBvcHVsYXIgb24gcGludGVyZXN0CnRyYW5zcGFyZW50IHNraW4KaG9sZGluZyBhIHJvY2tldCBsYXVuY2hlcgpza2V0Y2hsYWIKY3J5cHQKaW5kaWUgZ2FtZQpsb25nIHZpb2xldCBhbmQgZ3JlZW4gdHJlZXMKY3JpbmdlCmh5cGVyIHJlYWxpc3RpYyBkZXRhaWxlZApzaGEgeGkKbmVvbiBhcnQKcXVhbnR1bSBzdXBlcnBvc2l0aW9uCnNjaWZpIHN0eWxlCnNvZGEgdGhlbWVkIGdpcmwKY3ljbGVzIHJlbmRlciBlbmdpbmUKYnVnCmljZXkgYmx1ZSBkcmVzcwpjeWFuIHBob3RvZ3JhcGhpYyBiYWNrZHJvcApmIDIuIDggYXBlcnR1cmUKd2FsayBjeWNsZQpuZXRmbGl4IGxvZ28KZHJhZ29uIGluIGRyYWdvbiBsYWlyCmZ1bGwgYm9keSBkcmFnb24gY29uY2VwdApibGFjayBmdXIKZmFudGFzeSBjeWJlcnB1bmsKc3RyZWV0bGlnaHQKZGV0YWlsZWQgdW5yZWFsIGVuZ2luZQpkYXogM2QKZHJhZ29uIHN0YWZmCmxhcmdlIGZyaWVuZGx5IGV5ZXMKZGllZ28gcml2ZXJhIGluIHVraXlvLWUgc3R5bGUKcG9sa2Fkb3RzCml2b3J5IHNraW4KbWF4IHJlc29sdXRpb24KZ3JlZyBydXRrb3dza2kgYW5kIHN0dWRpbyBnaGlibGkKd2lkZSBub3NlCnByb2Zlc3Npb25hbGx5IHBvc3QgLSBwcm9jZXNzZWQKYXVzY2h3aXR6IGNhbXAKcmVhbGlzdGljIGNvbmNlcHQKb3ZlcmxhcCBwZXJzcGVjdGl2ZQppdGVtCmhvbGRpbmcgYSBrbmlmZQp0cmFmZmljIGxpZ2h0Cmphc29uIGZhYm9rCmNpbmVzdGlsbCA4MDB0IDM1bW0gdGVjaG5pY29sb3IKdG9pbGV0Cm1hbnRhIHJheQp3ZWFyaW5nIHdoaXRlIGNsb3RocwphIHJlZCBib3cgaW4gaGVyIGhhaXIKcHVycGxlIGxpZ2h0ZWQgc3RyZWV0CnNvZnQgbW90aW9uIGJsdXIKbmVzCmhpZ2hseSBkZXRhaWxlZCBkaW9yYW1hCmdyYXkgaG9vZGllCnBlcmZvcm1pbmcgYSBtdXNpYyB2aWRlbwp1aGQgZGV0YWlscwpleHBsb3Npb25zIGluIGJhY2tncm91bmQKYmxhY2sgZXllbGluZXIKdG9wdmlldyBtYXAKbG9uZyBjbG9hawo4ayBhcnRpc3RpYyBwb3J0cmFpdCBwaG90b2dyYXBoeQp0ZWVuYWdlIG11dGFudCBuaW5qYSB0dXJ0bGVzCmh5cGVyIHJlYWxpc3RpYyBhbmltZQpnYW1ibGluZwpzd2lybAp0cmlhbmdsZQpjdWJlcwpjb25jZW50cmF0ZWQKaW5kdXN0cmlhbCBhZXN0aGV0aWMKdGVjaG5pY2FsIGF0bW9zcGhlcmUKd2lsbGlhbSBqYW1lcyBnbGFja2VucwpudXR0YXZ1dCBiYWlwaG93b25nc2UKbWFyayBhcm1zdHJvbgphbWFkCmNvbnRhaW5pbmcgdGFibGVzIGFuZCB3YWxscwpza3l3aW5kCjM1IHllYXJzIG9sZAp0cmF2ZWxsZXIKYnV0IGFzIHBob3RvZ3JhcGh5CmV2ZXJ5dGhpbmcgaXMgb24gZmlyZQptYWNoaW5hCmh5YnJpZCBhbmltYWwKYmVoYW5jZS4gcG9saXNoZWQKZWFydGh5IGxpZ2h0IHBhc3RlbCBjb2xvdXJzCmNhbm9uIGVvcyBtNTAKc2lkZWZ4IGhvdWRpbmkKcGl4ZWwgYXJ0IHN0eWxlCnBvc3NpYmx5IGFuIGFuZ2VsCnNob3J0IGV4cG9zdXJlCmNvbG9yZnVsIGJpcmQgd2l0aCBhIGxvbmcKZmFudGFzeSB3b21hbgpyYXkgbGlnaHRpbmcgZnJvbSB0b3Agb2YgZnJhbWUKd2hpdGUgY29uY3JldGUKY29udHJvbCB0aGUgc291bApoaWdoLWRlZmluaXRpb24gcGljdHVyZQpzbXVnIGxvb2sKc3VwZXJnaXJsCmxhbmRzY2FwZSB3YWxscGFwZXIKcm9sZXBsYXkKc29vdGhpbmcgY29sb3JzCndlYXJpbmcgYSB3aGl0ZSBnaQp0cmVuZGluZyBvbiBhcnQtc3RhdGlvbgpzdWJ0bGUgZ29sZCBhY2NlbnRzCmFsZWphbmRybyBvbG1lZG8gYXJ0CmNvbXBsZXggc2NlbmUKZ3JhcGhpYyBub3ZlbCBhcnQKbGVucyBibHVyCnBob3RvZ3JhcGh5IGZyb20gdm9ndWUgbWFnYXppbmUKcGhvbmUgY2FtZXJhCmtvZGFrIHRyaS14IDQwMApuZmwKbWlkLWNlbnR1cnkgbW9kZXJuCnRha2VuIGluIHRoZSBlYXJseSAyMDIwcwpkZXRlcm1pbmF0aW9uCmEgY29sb3JmdWwKc29mdCByb3VuZCBmZWF0dXJlcwpjaGluZXNlIHRlbXBsZQpyZWFsaXNtIGFydApiYXRoZWQgaW4gZ29sZGVuIGxpZ2h0CndlYXJpbmcgYSBzY2hvb2wgc29jY2VyIHVuaWZvcm0Kc2tldGNoZWQKbm9ybWFsIGxlZ3MKZ2FybmlzaApmcm9tIGV2YW5nZWxpb24KaGlnaC1kZWZpbml0aW9uCmJveGluZyByaW5nCnJlZCBodWVzCjRrIGhkciBoaWdoIHF1YWxpdHkKdGFsbCBhbmQgc2xlbmRlcgp4cWMKc29waGllIHR1cm5lcgpmb3Jlc3QgZmlyZQpob3QgZm9vZApwZXJzcGVjdGl2ZSBzaG90CmluIGEgbGlicmFyeQpjYW5vbiBlZiA4NW1tIGYvMS40bCBpcyB1c20KZmFjZSB0byBmYWNlCjIwMG1tIHdpZGUgc2hvdAp0cmFuc2lzdG9ycwpvdmVyZGltZW5zaW9uYWwKcnVpbmVkIGJ1aWxkaW5ncwptYXhpbXVtIGRldGFpbHMKY3liZXJwdW5rIGRpZ2l0YWwgYXJ0CnRvbW9ycm93bGFuZAptdWxsZXQKZ29vZ2xlCnNoYXJwIGZhY2UKc2hhcnBuZXNzIGFwcGxpZWQKYnJvYWQgc2hvdWxkZXJzCnNtb290aCBkcmF3aW5nCmdyZXkgY2xvdWRzCmEgbGFyZ2UKd2lsbGlhbSBlZ2dsZXN0b24KbWFyawpsZWljYSBtNgpoeXBlciByZWFsaXN0CmNvcnBzZXMKZmx1eAptYXJjIG5ld3NvbgpzaXR0aW5nIGF0IGEgdGFibGUKY29waWMgbWFya2VycwphdCBhbiBhbmdsZQpsaXR0bGUgYm95CnNob3J0IGZhY2lhbCBoYWlyCndhdnkgYW5kIHNob3J0IHRvcCBoYWlyCnBpdGNoZm9yawo2MCdzIGNhcnRvb24tZ2xhc3MtaGVsbWV0Ci1uIDYKc2FjcmlmaWNlCmRhcmsgZ3JlZW4gdG9uZXMKZGFyayBmYW50YXN5IHN0eWxlCjNkIHZpZGVvIGdhbWUKdG9uZ3VlIG91dApoZWlzZW5iZXJnCndhc2hlZCBvdXQKY29sb3JlZCBwaG90bwppc286IDIwMApwdW5jaGluZwpoaWdobHkgZGV0YWlsZWQgcGhvdG9yZWFsaXN0aWMKaW5kdXN0cmlhbCBzZXR0aW5nCmRpZ2l0YWwgZmFudGFzeSBwb3J0cmFpdApidXRjaGVyCnNpdGggbG9yZApnb29kIGJvbmUgc3RydWN0dXJlCmZvcnRuaXRlIHN0eWxlCm1lbGFuY2hvbGljIGF0bW9zcGhlcmUKZnJvbSBza3lyaW0Kd2VhcmluZyBhIGtpbW9ubwpkcmFjb25pYW4Kd2l0aCBsYXNlci1saWtlIGZvY3VzCmRhcmsgZ2xvb215CmRhbWFzayBwYXR0ZXJuCmNlbGVicml0eQptYXR1cmUgZmFjaWFsIGZlYXR1cmVzCndpdGggaGlnaCBkZXRhaWwKYmx1cmF5CnN1cnJlYWxpc3Qgc3R5bGUKaGlnaGVzdCByZXNvbHV0aW9uCmV1cm9zdGFyCmV0aG5vZ3JhcGhpYwpkaXNwbGF5CnNjYXJlCnNoZSBpcyB3ZWFyaW5nIHN0cmVldHdlYXIKbmlnaHQgdGltZSBwaG90b2dyYXBoeQphcnRpc3RpYyByZW5kaXRpb24KYSB3aWRlIGZ1bGwgc2hvdApicmVlY2hlcwoxOTE4CmRldGFpbGVkIGJvZHkgYW5kIGZhY2UKZG5kIGNvbW1pc3Npb24KcHVycGxlIGdsb3cKZmFybSBiYWNrZ3JvdW5kCmVhc3RtYW4gNTM4NCBmaWxtCnBhcGFyYXp6aSBwaG90b2dyYXBoCmthYnVraSBtYXNrCmhpZ2ggZGV0YWlsIGZhY2UKbmluamEgc2Nyb2xscwplb3MgNWRzIHIKcGhvdG9yZWFsaXN0IHN0eWxlCmFsaWNlCnN1cGVyIHBob3RvcmVhbGlzdGljCmFsbCBhbG9uZQppbiBhIGd5bQp2ZWlucyBwb3BwaW5nIG91dAozZCBtb2RlbGxpbmcKYW1zdGVyZGFtCmdvbGQgZ2xvdwpkZWV6ZW4KZXZlCm92ZXJncm93biB3aXRoIHBsYW50cwpsby1maQpub3JtYWwgbm9zZQpiaWcgdGVldGgKaGVsbWV0IHdpdGggbGVkIGxpZ2h0cwphbiBkcmFtYXRpYwpzd2VhdGluZyBwcm9mdXNlbHkKZmFudGFzeS1zdHlsZQp0aGUgZW5kbGVzcwpwaWVyY2luZyBibHVlIGV5ZXMKdGhlIGVuZCBvZiB0aW1lcwppbmNvbXByZWhlbnNpYmxlCmNlbC1zaGFkaW5nCnRvbWF0b2VzCmNvbmNyZXRlIGhvdXNpbmcKZnJhY3RhbCBmbGFtZS4gaGlnaGx5X2RldGFpbGRlZApkcmlua2luZyBjb2ZmZWUKZGV2aWwgaG9ybnMKaG9sZGluZyBndW4KaXJpZGVzY2VudCBzbW9rZQphcm0KZXBpYyBjaW5lbWF0aWMgc3RpbGwKY3lib3JnIGdpcmwKaHVtYW4gY29tcHV0ZXIKdHJlbmRpbmcgZHJpYmJsZQpjcmVlcGVycwpibHVlIGNsb3RoZXMKdGFubmVkIHNraW50b25lCmF3YXJkIHdpbm5pbmcgbGFuZHNjYXBlIHBob3RvCnRvcml5YW1hIGFraXJhCm9yYW5nZSBzdW5nbGFzc2VzCmZhbW91cyBwaG90b2dyYXBoCmFyaXpvbmEgZGVzZXJ0CmFybW9yZWQga25pZ2h0CmRydXp5IGdlb2RlCnBvcnRyYWl0IG9mIHRoZSBhY3RyZXNzCmVjb2xvZ3kKc3RvbmUgZ29sZW0KdHdpdGNoIHN0cmVhbWVyCnJlZCBhbmQgYmxhY2sgdG9uZXMKYmxhY2sgbWFnaWMKcGVyZmVjdCBzdHVkaW8gbGlnaHRpbmcKZGVwdGggb2YgdmlldyA4awpiYWJhIHlhZ2EKbWFuZ2EgYXJ0IHN0eWxlCmJsYWNrbGlnaHQgcmVhY3RpdmUKc2tldGNoIGRyYXdpbmcKYW5uaWUgbGVpYm92aXR6LiBkZXRhaWxlZCBwaG90bwpiYXRnaXJsCmFuYWxvZyBwaG90b2dyYXBoCmxvdmUgaW50ZXJlc3QKc2hpbnkgc2lsdmVyCmphY29iICYgY28KY29uY2VudHJpYyBjaXJjbGVzCmluIGRhcmsgZm9yZXN0CnRyZWVzIGluIGJhY2tncm91bmQKYnVtYmxlYmVlCndldCByb2FkCmJsYWNrIGxhY2UgZHJlc3MKZGVlcCBtZWFuaW5nCnBvcnRyYWl0IG1vZGUgcGhvdG8KcHVycGxlIGRyZXNzCmluIHN0eWxlIG9mIHN0YW5pc2xhdiB2b3ZjaHVrCmlzbyAxNjAKc3RhciB3YXJzIGZpbG0gc3RpbGwKZGV0YWlsZWQgYW5kIHJlYWxpc3RpYyBmYWNlCnJvdW5kIGZvcm0KYmxlYWNoCmhhbG8gYWJvdmUgaGVhZApib3JpcyBqb2huc29uIGFzIHB1bmlzaGVyCmdyZWVuIGFuZCB3aGl0ZQpkYXJrIHNvdWxzIGJvc3MKd2lkZXN0IGhpcHMKYmF0IGVhcnMKY2xhc3NpYyBrYWJ1a2kKdGFjdGljYWwgdmVzdHMgYW5kIGhvbHN0ZXJzCmNhbmR5bGFuZAp0aGUgaHVsawpjaGVlcnlibG9zc29tCmdvbGRlbiBob3VyIHN1bmxpZ2h0CnRvbWF0bwpnZW5lc2lzIG9mIGFxdWFyaW9uCmFxdWFyaW9uCmVwaWMgbW92aWUgcG9zdGVyCmJhbmFuYXMgd2VhcG9uCmJhbGQgaGVhZAphaXJjcmFmdCBjYXJyaWVyIHNjZW5lCmNpcmkKbXVzZXVtIHF1YWxpdHkgd29yawppbnRyaWNhdGUgYm9yZGVyIGRlc2lnbnMKc3RyZWV0IHZlbmRvcnMKZmxhc2ggc3R1ZGlvCmRlZXAgcHVycGxlIGhhaXIKcmFkaW9oZWFkIGxvZ28Kb3ZlcndoZWxtaW5nCnBzMQpzbHkKZGFyayBhdG1vc3BoZXJpYwp3YWxsIGFydApyZWQgcGFpbnQKc3R1bm5pbmcgc2NyZWVuc2F2ZXIKcGhvdG9yZWFsIHJlbmRlcgpyaW5nIG9mIGZpcmUKZmF2ZWQgd2F0Y2hlZCByZWFkCnRlZCBnb3JlCmR1c3RpbiBsZWZldnJlCmNnc29jY2lldHkgci9hcnQKZGFyayBzaGFkZXMgb2YgY29sb3JzCmN5Ym9yZyBkb2cKbmVjcm9tYW5jeQpzdHlsZSBvZiBjaGFybGllIGJvd2F0ZXIKbG9uZyBicnVuZXR0ZSBoYWlyCnNlY3VyaXR5IHJob3gKbGVhdGhlciB0cmVuY2ggY29hdAp0b21iYQptZWdhbWFuCmJlYXV0aWZ1bCBmZW1pbmluZSBib2R5CmJ5emFudGluZSBydWlucwpkcmVhbXkgbGFuZHNjYXBlCm1hZGUgb2YgZ29sZApidWJibGUgZ3VtCmthcmwgbWFyeApnb2xkZmlzaAptdXNldW0gd29yawpwbGF0ZSBhcm1vcmVkIGNoZXN0Cmh1Z2UgZmlyZQp3aGl0ZXMKZTMKdHJlbmRpbmcgb24gYXJ0c3Rhcmlvbgpib2FyZCBnYW1lCmR1dGNoIHN0aWxsIGxpZmUgZnJvbSB0aGUgMTYwMHMKZGlzdGF3IGJla3NpbnNraQppbiB0aGUgZ2FyZGVuCmhvbGRpbmcgYSByb3NlCnNwaWRlciB3ZWIKcGxhbmVzd2Fsa2VyCmhlYWQgYW5kIHNob3VsZGVyIHBvcnRyYWl0CmN5YmVycHVuayBsaWdodGluZwpiYWNrZ3JvdW5kIG1vdW50YWlucwp0cmVlcyBvdXRzaWRlCmJhdHRsZSBzY2FycwpwaXJhdGVzIG9mIHRoZSBjYXJyaWJlYW4KcGVyZmVjdCB0b3BvbG9neQpmYW50YXN5IHdlYXBvbgpoZWF2eSBicm93biBtZXRhbGxpYyBhcm1vcgphd2FrZW5pbmcKZmlyaW5nIHN5bmFwc2VzCnZvbHVtZXRyaWMgZHJhbWF0aWMgbGlnaHRpbmcKZXBpYyBhY3Rpb24gcG9zZQpmLzQuNQppbXByZXNzaXZlIGxpZ2h0aW5nCmFyYWIgaW5zcGlyZWQKd2Fpc3QgcmVhY2hpbmcgcG9ueXRhaWwKbGFyZ2Ugd2luZ3MKc29tZSB0ZW50YWNsZXMgYXJlIHRvdWNoaW5nIGhlcgphcnN0YXRpb25oZApoZWF2eSBjb250b3VyIGxpbmVzCnNvbWUgYmFja2dyb3VuZCBibHVyCmZ1dHVyaXN0aWMgYnVpbGRpbmcKbGVvbiB0dWtrZXIKbGVha2VkIHBob3RvCmdhbGFkcmllbAptdXNjbGVkCmplbGx5YmVhbnMKMjAxOQpqb2tlciBtYWtldXAKZ3JhbmJsdWUgZmFudGFzeQpuaWFnYXJhIGZhbGxzCmhpZ2ggYWNjdXJhY3kKY3liZXJwdW5rIHN0cmVldApzbGljayBoYWlyCmFyY2hpdmUKaCAxMDg4Cm5pZ2h0bWFyZSBiZWZvcmUgY2hyaXN0bWFzCmhlcm1pb25lCnRoZSBraW5nIGluIHllbGxvdwpoYXRjaGluZwpmaWxtYXRpb24KaGVsc2lua2kKMTZ0aCBjZW50dXJ5CnBlcmZlY3QgYmx1ZSBleWVzCnN3aXJsaW5nIHRoaWNrIHNtb2tlCnBhbGFjZSBvZiB2ZXJzYWlsbGVzCmVhc3BvcnRzCmludHJpY2F0ZSBvaWxzCnBjaApuYW5vcHVuawptdWQgYW5kIGJyaWNrIGhvdXNlcwptZXJjaGFudCBzdHJlZXQKaHVuZHJlZHMgb2YgaHVtYW5zCnN1biByYXlzIGF0IHN1bnNldApiZWF1dGlmdWwhIQpyYWluIG9mIGJsb29kCmNvc21pYyBlbnRpdHkKbmlrb2xhIHRlc2xhCmRhcmsgcHVycGxlIGJhY2tncm91bmQKdGhlIHZpYnJhbnQgZWNob2VzIG9mIHRoZSBtYXJrZXQKZHJpZnRlcnMKY29sbGVjdG9ycwp3aXRoaW4gcmFkaWF0ZSBjb25uZWN0aW9uCjhrIHN0dW5uaW5nIGFydHdvcmsKY29tbXVuaXR5CnBsYXN0aWNpbmUKZXhwZXJpbWVudHMKdHVuZWQgdG8gYSBkZWFkIGNoYW5uZWwKZG9sbGFyIGJpbGxzCmxlYWYgZ3JlZW4Kc21hbGwgY2hhbWJlci4gaHlwZXJyZWFsaXN0aWMKdG91cmluZwpmdWppCndhaXN0Y29hdApwaXhhciBhcnRzdHlsZQptYXN0ZXJwaWVjZSBvaWwgcGFpbnRpbmcKcGljYXNzbyBzdHlsZQpqb2tlciB3ZWFyaW5nIHZhZGVyJ3MgYXJtb3Igc3VpdAp3aGl0ZSBtYXNrCmhvcnJvcmNvcmUKYm90aCBzbWlsaW5nIGZvciB0aGUgY2FtZXJhCmdyZWVuIGFuZCBibGFjawpraWxsIGJpbGwKY2Fyb2xpbmUgZ2FyaWJhCmtvd2xvb24gd2FsbGVkIGNpdHkKbmVvY2xhc3NpY2FsIHN0eWxlCnBmcAp1cHBlciB0b3JzbwpzaGlueSBzb2Z0IHNraW4KaW50ZXJpb3JzCmluIGRlc2VydAptYWdpY2FsIGVmZmVjdAp1bnJlYWwtZW5naW5lCmZsYXdsZXNzCndlYXJpbmcgYSBoZWFkYmFuZAptYWlzaWUgd2lsbGlhbXMKbmV3IG9ybGVhbnMKbWFqb3JhJ3MgbWFzawpvbmUgbGluZSBkcmF3aW5nCmNpdHkgbmlnaHQKdGhlIHNvcHJhbm9zCmFydCBkZWNvIHN0cmlwZSBwYXR0ZXJuCnRvcm5hZG9lcwozMCB5ZWFycyBvbGQgd29tYW4KY2hhcmFjdGVycyByZWZlcmVuY2Ugc2hlZXQKMmQgY2FydG9vbgpzdGlsbCBpbWFnZSBmcm9tIGdhbWUgb2YgdGhyb25lcwptb3JnYW4gZnJlZW1hbgpkcmFnb24gc2NhbGVzIGluIGhhaXIKc3VuIHJpc2UKbGlnaHQgcmF5Cm1yLiBiZWFuCnByZXNzIHBob3RvZ3JhcGh5CnN0eWxlIG9mIGZyYW5rIGZyYXpldHRhCnNrZXdlZCBzaG90CnRyYW5zY2VuZGVudGFsCm5vcnNlIG15dGhvbG9neQp2YWxoYWxsYQpjaW5lbWF0aWMgc2t5CnBvcnRyYWl0IG9mIGFuIG9sZCBtYW4KbmlnaHQgbGFuZHNjYXBlCmJlYXV0aWZ1bCBhbmltZSBhcnQgc3R5bGUKbXVsdGlwbGUgZXllcwp3aXphcmQgb2Ygb3oKaGlnaGx5LWRldGFpbGVkIDRrIGF3YXJkLXdpbm5pbmcKcGhvdG8gb2YgYSBtb2RlbAp3aXRoIG5lYXQgc3R1YmJsZQpzaHV0dGVyIHNwZWVkIDEvMTAwMApub24tYmluYXJ5CndpbmRvd3MgeHAKcG9ydHJhaXQgb2YgZHdheW5lIGpvaG5zb24KcG9ydHJhaXQgb2YgZ2VyYWx0IG9mIHJpdmlhCnBvcnRyYWl0IG9mIGtlYW51IHJlZXZlcwp0aGUgcXVlZW4gb2YgYmxhZGVzCnBvcnRyYWl0IG9mIG1hcmdvdCByb2JiaWUKd2hpdGUgc2tpcnQgYW5kIGJhcmVjaGVzdApzdGFyIHdhcnMgc3R5bGUKZmxvd2luZyBjYXBlCmVpa28gaG9zb2UKbWlsawpheWFrYQpzdWF2ZQpibGFjayBtYW4KYmxhY2sgYm9iIGhhaXIKbG9uZyBhbnRlbm5hZQpwb3VyIHBhaW50aW5nIGFydApsYXJnZSByb3VuZCBleWVzCmh5cGVyZGV0YWlsZWQgcGhvdG9ncmFwaApzdXBlciBoaWdoIGRldGFpbApnb3RoaWMgY2xvdGhpbmcKcml2ZXJkYWxlCnJvd2FuIGF0a2luc29uCnJ1Z2dlZCByYW5nZXIKcnVwZXJ0IG11cmRvY2gKbXlzdGljYWwgaW5zZWN0cwpteXN0aWNhbCBiaXJkcwpicm93biB0b25lcwpiaXNleHVhbCBsaWdodGluZwpzcGFjZXNoaXAgaGFsbHdheSBiYWNrZ3JvdW5kCmJpbGwgc3RvbmVoYW0KYXBvY2FseXB0aWMgYmFja2dyb3VuZAp1cAplcGljIG1hc3RlcnBpZWNlCnR3byBoYW5kcwpzaXN0aW5lIGNoYXBlbAoxMzBtbQpmYW5ncyBleHRlbmRlZApzZXQgYWdhaW5zdCBhIHdoaXRlIGJhY2tncm91bmQKd2l0aCB0ZXh0dXJlZCBoYWlyIGFuZCBza2luCnN0YXJkZXcgdmFsbGV5Cm5pZ2h0IGxpZ2h0CmJyaWRnZSBiZXR3ZWVuIHRoZSB3b3JsZHMKbWFsZSBjaGFyYWN0ZXIKdGhhbmsgeW91CnRoZSBiaXJ0aCBvZiB2ZW51cwp0aGUgZ29kZXNzIGhlcmEgbG9va2luZyBhbmdyeQpyb21hbnRpY2lzdApodW1ibGV3b29kIGFydCBzdHlsZQptYWdpYyBsaWdodApzZXJwZW50Cm5ld3MgcGhvdG8KdGhlIGVuZCBvZiB0aGUgdW5pdmVyc2UKZnVsbCBmcm9udGFsCnRoZSBraXNzCmV4Y2VsbGVudCBkZXRhaWwKdHJvcGljYWwgYmFja2dyb3VuZAphcmNoaXZlIG1hdGVyaWFsCnNwaW5vc2F1cnVzCmZyb20ga29uZyBza3VsbCBpc2xhbmQgKDIwMTcpCmZyb20gZ3VhcmRpYW5zIG9mIHRoZSBnYWxheHkKdG9tIGhhcmR5CnRyYXZlbCBhZAphbm9ueW1vdXMgbWFzawp0c3VuYW1pCndpa2lob3cKaW5zaWRlIGEgZ3JhbmQKb3JuYXRlIGhvc3BpdGFsIHJvb20Kc2lnbWEgODVtbSBhcnQKY29sb3JmdWwgbGVucyBmbGFyZXMKbmlnaHQgaW4gdGhlIGNpdHkKZHJlc3NlZCBsaWtlIG5hcG9sZW9uIGJvbmFwYXJ0ZQpzYW11cmFpIHdhcnJpb3IKY29sb3VyZnVsIGNsb3NlIHVwIHNob3QKaW4gdGhlIHZvaWQgb2Ygc3BhY2UKY2hpbmVzZSBmYW50YXN5CmhpZ2ggcGFydGljbGUgY291bnQKeW91J3JlIHNvbWV0aGluZyBzcGVjaWFsCm1hc2N1bGluZSBmZWF0dXJlcwpleHRyZW1lbHkgZGV0YWlsZWQgKyA4awpbIG92ZXJoZWFkIHZpZXcgb2YgYSB0YWJsZSBdISEKc2hhZGUKam9lbCBmbGV0Y2hlcgpvd2VuIGtsYXR0ZQphbmdpZSBnbG9ja2EKanVzdGluIGtvaG4Kc2xlZWsgb3V0Zml0CnNhaWwgYm9hdHMKc3VsbGVuIG9sZCBtYWlkICggcmVkaGVhZAphYmFuZG9uZWQgaW4gYSBkZXNlcnQKYWJvdmUgdGhlIHdhaXN0CmFyZHVpbm8KYnJ5Y2UgMyBkCnNoYXJwIHJlbmRlcgp2cmF5IDRrCmJsYWNrIGFuZCBibHVlIHNjaGVtZQpzdGFuZGluZyBpbiBhIGZpZWxkCmVwaWMgc2FuZHN0b3JtIGJhdHRsZQpmbG93aW5nIGNsb3RoIGFuZCBzbW9rZQpuaWNvbGFzIGJvdXZpZXIKYXBvY2FsaXB0aWMgY29udGFtaW5hdGlvbgpib3RhbmljYWwgZ2FyZGVuCmFzc3ltZXRyaWNhbApwb3J0YWl0IHBob3RvIHByb2ZpbGUgcGljdHVyZQpjbGVhcmx5IGRlZmluZWQgb3V0bGluZXMKbWFjb3RvIHRha2FoYXNoaQplY3N0YXN5CmRhd24gY2dzb2NpZXR5CmxvdmVjcmFmdGlhbiBob3Jyb3IhCm1hcmJsZSBhbmQgd29vZCBhbmQgZ2xhc3MKd2hpdGUgY2h1cmNoIGJhY2tncm91bmQKYmxhY2sgcG9ueXRhaWwKdG9hZHN0b29scwpjZWx0aWMgZGVzaWducwp0aGljayBtaXN0Cm1vdmllIGF0bW9zcGhlcmUKcGFyayBiYWNrZ3JvdW5kCnRoZSBzcGFjZXNoaXAgaXMgb24gZmlyZQpjcmFzaApzdGFuZGluZyBvbiBhIGJlYWNoIGluIGJvcmFjYXkKYW5pbWUgZ3JhcGhpYyBpbGx1c3RyYXRpb24KdHJhZGUgb2ZmZXIgbWVtZQp2b2d1ZSBpdGFsaWEKYWxpZW4gYXJjaGl0ZWN0dXJlCnZpYnJhbnQgOGsgcmVuZGVyaW5nCmVsZWdhbnQgZ2xhbW91cm91cyBjb3NwbGF5CmJsdWUgc2t5IGF0IHN1bnNldApmb29sCmZsb3cgc2hhcGVzCmhpZ2ggb2N0YW5lIGZpbHRlcgpyZWVkIG9uIHJpdmVyYmFuawpmdWxsIGRyZXNzIHVuaWZvcm0Kc3ltbWV0cmljIGFuZCBiZWF1dGlmdWwgZmFjZQpzb3VsCmhvbGRpbmcgYW4gYWNlIGNhcmQKc2hlIGlzIHNtaWxpbmcKc2hlJ3Mgc2FkCnBpbmsgdHJlZXMKcGluayBncmFzcwpuZW9uIGp1bmdsZQpkcmFtYXRpYyBjaW5lbWF0aWMgY29tcG9zaXRpb24KY2xlYXIgZGV0YWlsZWQgdmlldwo0IGsgdW5yZWFsIGVuZ2luZSByZW5kZXJzCnByZWRhd24KZ3JleSBzY2FsZQp3ZXQgZmFicmljCmVsZWN0cm9uaWMgY29tcG9uZW50cwp0cmF2ZWwKY2xvc2UgdXAgcG9ydHJhaXQgcGhvdG8KY291cGxlcyBwb3J0cmFpdApjb2xvcmZ1bCBjb3JhbAphc3Nhc3NpbnMgY3JlZWQKcXV5IGhvCm1hcmJsZSBjb2x1bW5zIGluIGJhY2tncm91bmQKc2hhcnAgZWRnZXMuIHVsdHJhIGRldGFpbGVkCnRoZXJlIGlzIGZpcmUgZXZlcnl3aGVyZQpzdGFyayBjb250cmFzdHMKc3RhcnMgYW5kIHBsYW5ldHMKdmludGFnZSB0cmFuc2lzdG9ycwpjaGFybGllIGltbWVyCnBlbiBhbmQgaW5rIG9uIHBhcGVyCnN1bnNldCEKNiBwYWNrCmdvbwphcG9jYWx5cHRpYyBzY2VuZQpubyBoZWFkCmNvbmRlbnNhdGlvbgpjdXRlIGhhdHMKbG9va2luZyBpbnRvIGNhbWVyYQpzaG90IG9uIGFycmkgYWxleGEKc3RhciBkZXN0cm95ZXIKYWlyYnJ1c2ggZmFudGFzeSA4MHMKY3liZXIgc3R5bGUKaWxsdW1pbmF0aW9uIGxpZ2h0aW5nCnBpY25pYwprb2RhayBnb2xkIDIwMCBmaWxtCnNoaWJ1eWEgc2hpYnV5YQpkZXRhaWxlZCBhbGxveSB3aGVlbHMKbWFkZSBvZiBjYXJkYm9hcmQKYmVhcmRzbGV5CmF1c3RyaWEKYnJpZ2h0IG1hY3JvIHZpZXcgcGl4YXIKZG1pdHJ5IHNwaXJvcwppbmZpbml0ZSByZWdyZXNzCmphcGFuZXNlIGlsbHVzdHJhdGlvbgpjaGlsZHJlbnMgZHJhd2luZwpkZW11cmEgYW5kIGFscGhvbnNlIG11Y2hhCnNvcnJvdyBhbmQgZGVzcGFpcgpibHVlIGNvbG9yIHRoZW1lCmlhbiBtY2RpYXJtaWQKZ3JlZW4gZW5lcmd5CmJyYWlkZWQgYmVhcmQKc2NhcnMgaW4gdGhlIGZhY2UKYmxhY2sgdG9uZXMKY3VydmlsaW5lYXIKMSA4IDkgMCB2aW50YWdlIHBob3RvCnBob3RvcmVhbGlzdGljISEhISEKcnViYmxlISEKYmVhdXRpZnVsIGFuZCBjdXRlCnBlcmZlY3QgZmFjZSEhIGludHJpY2F0ZQpwcm9mZXNzaW9uYWwgY2FwdHVyZQp0cmFkaXRpb25hbCBwYWludGluZwpwaGFudG9tIGdyaXAKZmFzdCBmb29kCmJyaWdodCBvcmFuZ2UgY2FtcCBmaXJlCnVwIHRoZXJlCnBvcGFydAp0cmFkaXRpb25hbCBrb3JlYW4gY2l0eQpyZWQgcm9zZQpzdG9uZSB0YWJsZQpjaGlsZHJlbidzIGRyYXdpbmcKaGFqaW1lIHNvcnlhbWEKcmVmbGVjdGluZwpzbGltIGFhcm9ucwoxIDkgOCAwIHMgY2F0YWxvZ3VlIHBob3RvCmluIGEgZGFyayBjYXZlCnN1YmxpbWUtY29tZm9ydGluZyBhbWJpZW5jZQpzdWJsaW1lIGFtYmllbmNlCjUgMCBtbSBmIDEuIDQKc3VyZgpsYWtlIGhvdXNlCnVsdHJhIHJlYWxpc3RpYyBwaG90b2dyYXBoCmJhdHRsZWZpZWxkIGxhbmRzY2FwZQpmYWNpYWwgZXhwcmVzc2lvbnMKc3R5bGUgb2Ygdm9nZWxzYW5nCmVsa2UKd2lyZWQKZi8yIDgKY3VzdG9tIGNvbXB1dGVyCmhvbWUgb2ZmaWNlCmdsb3dpbmcgZ3JleSBleWVzCmNoZWYgdGFibGUKZXh0cmVtbHkgZGV0YWlsZWQgb2JqZWN0cwptYXNzaXZlIHRyZWVzIHdpdGggd2FybSB3aW5kb3dzCm1vb25sZXNzIG5pZ2h0Cm15c3RlcmlvdXMgZm9yZXN0Cm51YnVsYWUgaHViYmxlCm5lb2FydGNvcmUKY2FsYW1pdHkKbmFvdHRvIGhhdHRvcmkKdGVuZGluZyBvbiBhcnN0YXRpb24KZ2luZ2VyLiBhcnQgbm91dmVhdQozIC8gNAp2aWV3ZWQgZnJvbSBhIGRpc3RhbmNlCmNsb3NldXAgb2YgdGhlIGZhY2UKYW4gYXdhcmQgd2lubmluZyBkaWdpdGFsIHJlbmRlcgppbiBvbmUgZnJhbWUKc2hvcnQgdGVsZXBob3RvCm1pZGRsZS1lYXJ0aApoeXBlcmRldGFpbGVkIGZlYXR1cmVzCnNreSB0aGVtZSBpbiBiYWNrZ3JvdW5kCnJlYWxpc3RpYyB1bnJlYWwgZW5naW5lIDMgZCBnYW1lCmNoYWluc2F3CnZlcnkgZ3JhaW55IGZpbG0KdmVyeSBjbG9zZXVwCnNjb3R0aXNoIGZvbGtsb3JlCm1vb2R5IGV2ZW5pbmcgbGlnaHQKaG9sbG93IGV5ZXMKcHJvZmVzc2lvbmFsIHN0dWRpbwphdG9tc3BoZXJpYyBsaWdodGluZwp3YXJtIGNpbmVtYXRpYyBsaWdodGluZwp0b25lZCBvcmFuZ2UgYW5kIHBhc3RlbCBwaW5rCnJpY2hseSB0ZXh0dXJlZApyaWNoIHZpdmlkIGNvbG9yCmxlZ2VuZGFyeSBlcGljIHNob3QKaW4geW9qaSBzaGlua2F3YSdzIGFydCBzdHlsZQptYXRyaXggc3ltYm9scyBpbiB0aGUgYmFja2dyb3VuZAp5b3VuZyBhbmQgY3V0ZSBnaXJsCmogc2NvdHQgY2FtcGJlbGwKc2tpbnRpZ2h0CnNoYWRvdyBwbGF5CmV4cGxvZGUgYW5kIGNoYW9zCmhvbHl3b29kIHNjZW5lCmZsb2F0aW5nIGluIG91dGVyIHNwYWNlCnNtb2tlIHRyYWlscwpjaGVzcyBrbmlnaHQKc2hlIGlzIHJlYWR5IHRvIGZpZ2h0Cmxvb2tpbmcgYmFjayBhdCB0aGUgY2FtZXJhCnN1bmRvd24gZ29sZGVuIGhvdXIKaW5zdGFncmFtIGhkCmFyY2hpdGVjdHVyZSBjYXJ2ZWQgZm9yIGEgdGl0YW4Kc3RvbmUgZ2F0ZSB0byB0aGUgZGFyayBjYXZlCndlYXJpbmcgYSBmZWF0aGVyIGRyZXNzCmdpYW50IG9jdG9wdXMKc25ha2UtaGVhZCBmZW1hbGUgYXNzYXNzaW4KdHJhZGl0aW9uYWwgY2xvdGhpbmcKa2VuCmR1cmluZyBkYXduCnZlcnkgYmVhdXRpZnVsLiBiaWcgbXVzY2xlcwpwYXJhbm9pZApyb2NreSBiZWFjaApwb3N0IC0gYXBvY2FseXB0aWMgdmliZQp3aXRoIGN1dGUgZG90aW5nIGV5ZXMKc3R5bGlzZWQgdGV4dHVyZXMKc2hpYmFyaQp3aXJlZCBsYW5kc2NhcGUKdG90YWxpdGFyaWFuCm9uIHRoZSBzdGFnZQoxIDkgNCAwJ3MKdGF0c3VybyB5YW1hc2hpdGEKd2F2ZXMgY3Jhc2hpbmcKc29hcmluZyB0aHJvdWdoIHRoZSBza3kKY292ZXJlZCBpbiB2aW5lcwpzcGFjZSBuZWJ1bGEgYmFja2dyb3VuZApyYWlueSBtb29kCmJsdWUgYW5kIHBpbmsKZXBpYyBwcm9mZXNzaW9uYWwgZGlnaXRhbCBhcnQKYXJ0LWRlY28gc3R5bGUKZXh0cmVtZSBjbG9zZSAtIHVwCm1vZGVybiBtYXhpbWFsaXN0IHN1aXQKbWl5YXpha2kncyBhbmltYXRlZCBmaWxtCmhpZ2ggcXVhbGl0eSBwaXhlbCBhcnQKcnVpbnMgbGFuZHNjYXBlCmxvbmcgY2xhd3MKd2VzdGVybiBhbmltYXRpb24KZmFjaWFsIGZlYXR1cmUgc3ltbWV0cnkKY3J1ZGUKc2hhcnAgZm9jdXMgZHluYW1pYyBsaWdodAppbiB0aGUgbWlkZGxlIG9mIHRoZSBkZXNlcnQKcXVhbnR1bSB0cmFjZXJ3YXZlCm5lIHpoYSBmcm9tIHNtaXRlCmF0aGxldGljIGNyb3NzZml0IGJ1aWxkCm9wZW4gd2luZG93CmZhbmN5IHdoaXNrZXkgYm90dGxlCjQgMCB5ZWFycyBvbGQKY3liZXJ0cm9uaWMKd2ViIG9mIGxpZmUKd2VhcmluZyBsYWIgY29hdApydXN0aWMgd29vZApzdHlsZSBvZiBhdWJyZXkgYmVhcmRzbGV5CmFyZ2VudGljCmdyZWVuIG1hZ2ljCmZ1bGwgY2FzdApmaW5lIGxpbmUgd29yawp1bnJlYWwgZW5naW4gNQppbnNhbmVseSBkZXRhaWxzCmZpbmUgZGF5CjRrIG9pbCBvbiBsaW5lbgpwZXJmZWN0IHN5bW1ldHJpY2EgYm9keSBzaGFwZQphZHVsdApwcm9mZXNzaW9uYWwgZm9vZCBwaG90bwp0cmFmZmljIGxpZ2h0IG9uCnNwaWVsYmVyZwpkYXJrIGdyZXkgYmFja2Ryb3Agc3R1ZGlvCmVsZXN0aWFsIGNyeXN0YWxzCmhpc3RvcnkgY2hhbm5lbArimJUgb24gdGhlIHRhYmxlCnBsdXMgc2l6ZQpwYXVsLWNoYWRlaXNzb24KbGlmZSBhZnRlciB0aGUgcGxhZ3VlCmhpc3RvcmljYWwgc2V0dGluZwp3b3chISEhISEKZGVueXMgdHNpcGVya28KZXhwcmVzc2l2ZSBhYnN0cmFjdGlvbmlzbQphbGV4YW5kcmlhJ3MgZ2VuZXNpcwpmbGVzaCBlYXRpbmcgd29ybXMKbmV3IHdhdmUKY2Fub24gOCA1IG1tIGYgMS4gMiBwaG90b2dyYXBoCm1lZGljYWwgZG9jdG9yCmhvbGRpbmcgYSBwbGFuZXQKYW5kcmVzIGd1cnNreQpsaW1pbmFsc3BhY2VzCmhpZGluZwpsZWZ0IHJpZ2h0IHN5bW1ldHJ5CnRoaW4gc3Ryb2tlcwp0cnVlIHVuc2ltdWxhdGVkIGVtb3Rpb25zCnNoYXVuIG9mIHRoZSBkZWFkCmpvZXAgaG9tbWVyc29uCmJsb29kIHNwbGF0dGVycwpudmlkaWEgZ2Vmb3JjZQphbiBpbmRlcGVuZGVudCBwc3ljaG8KcGVyZmVjdGx5IHN5bW1ldHJpYwpnb2QgbG9va2luZyBhdCBtZQpkaXN0cmFjdGlvbgpzaW5nbGUgbGluZSBkcmF3aW5nCnBvc3QgcHJvY2Vzc2VkIGRlbm9pc2VkCnNtYXJ0cGhvbmUKZ2VsIHNwaWtlZCBibG9uZCBoYWlyCm1vZGVybiBob3VzZQpzdGVhbXB1bmsgYXJtb3IKMTk1MHMgYXJ0IGRlY28KbWFydmVsIHN1cGVyaGVybwpibGFjayB2ZWx2ZXQgZHJlc3MKbmV1cmFsIHBvaW50aWxsaXNtCnBhaXNsZXkgd2FsbHBhcGVyCmxvdXZyZSBtdXNldW0KbWVkaXVtCm1vdXRoIGluIHRoZSBiYXJrCmxlZ2VuZGFyeSBjaW5lbWF0aWMKc3R5bGUgb2YgamV0IHNldCByYWRpbwptaWRkYXkgc3VuCm5lb24gcGFzdGVsCmNvbG9yZnVsIGZsYXQgc3VycmVhbCBldGhlcmVhbApwZXJmZWN0bHkgZmFjZQpvY3RhbmUgcmVuZGVyIHNjaSAtIGZpCmNvbnRhaW4KaW4gYSB0b2t5byBzdHJlZXQKaGlwIG1vZGVybiB2aWJlCmh5cGVyZGV0YWxpemVkCnNvZnQgaGFwcHkgc21pbGUKZXh0ZXJpb3JzCmdyYWlueSB0YXBlCmNvYXJzZSBwYXBlcgp1bml2ZXJzYWwgYmFja2dyb3VuZApvdXIgZGVzcGVyYXRpb24KZHp1bmcgcGh1bmcgZGluaApibGFjayBhbmQgd2hpdGUgYXJ0aXN0aWMgcGhvdG8KY2VsbCBzaGFkZWQgZ3JhcGhpY3MKYm9sZCBwYXN0ZWwgY29sb3JzCmRldGFpbGVkIHBvcnRyYWl0IG9mIGEgd29tYW4KZXhwcmVzc2l2ZSBsaW5ld29yawpibXcgZSAzIDAKc21vb3RoIDRrCmRlc29sYXRlIHdpdGggem9tYmllcwphZnJpY2FuIGRvbW1lIG1pc3RyZXNzCmRvbWluYXRyaXgKYnJ1dGFsIG1vZGVybiBzY3VscHVyZQpzaWx2YWluIHNhcnJhaWxoCnllYXIgMiAxIDAgMAp5YWghIGN1bHRpc3Qgam91cm5hbCBjb3Zlcgpsb25nIGJyYWlkZWQgYmxhY2sgaGFpcgpwb3J0cmFpdCA4IGsKc2NhbiBvZiBjb2RleCBzZXJhcGhpbmlhbnVzCmFsZXhleSBndXJ5bGV2CmRyZWFteSBldGhlcmVhbCB2aWJlCnN0ZWFtcHVuayBnb29nbGVzCm1hc3RlciBwaG90b2dyYXBoeQpnbGFzcyBvYmVsaXNrcwprYXRzdWh1cm8gb3RvbW8gaGlnaGx5IGRldGFpbGVkCmFuaW1lIGhkIHdhbGxwYXBlcgphdG1vc3BoZXJpYy4gZGlnaXRhbCBwYWludGluZwp3aGl0ZSBtYXJibGUgYW5kIGdvbGQKYnVnZ3kKbHVpcyBtZWxvCnR5bGVyIG1pbGVzIGxvY2tldHQKbGVpIGppbgpob25nIGxlaQphZGFtIG5hcm96YW5za2kKZHJhbWF0aWMgZGFyawpzcXVpbnRpbmcgYXQgaGlnaCBub29uCnZpdmlkIHRvbmVzCndhdGVyIGNhdXN0aWNzCm5pZ2h0IHNreSB3aXRoIHN0YXJzCndlYXJpbmcgc3RhciBmaWxsZWQgbWFnZSByb2JlcwphbiBhbnRocm9wb21vcnBoaWMgdHVydGxlCnVtYSB0aHVybWFuCm1vbm9jaHJvbWF0aWMgY29sb3Igc2NoZW1lCm5lYXQgYnJhaWRlZCBoYWlyCnN1biByYXlzIHRocm91Z2ggdHJlZXMKbGFtaW5hbCBzcGFjZQplbmxpZ2h0ZW5lZApibG9vbSBlZmZlY3QgOCBrCmJyaWxsaWFudCBoaWdobGlnaHRzCmZ1c2VkIGludG8gZXBveGlkZQptYW1vcnUgbmFnYW5vCmFuIGV4dHJlbWVseSBoaWdoIHF1YWxpdHkgaGQKYW4gaW5kb25lc2lhbiBmYW1pbHkgcG9ydHJhaXQKYmF5b3UKc29tYmVyIG1vb2QKYmlydGhkYXkgY2FyZAphdmF0YXIgaW1hZ2UKZmx1bWUgY292ZXIgYXJ0CmFydCBudWV2bwpqYXBhbmVzZSBncmFwaGljIGRlc2lnbgp3aXRob3V0IGxpZ2h0c2FiZXIKYW5jaWVudCBpcmlzaAphbmNpZW50IGFsaWVuIHBvcnRhbApvdmVycG93ZXJpbmcKYmVhcmRlZCBtYW4gc2VhdGVkIG9uIGEgdGhyb25lCmxhbmRzY2FwZSBtb2RlCmdyZXlzIGFuYXRvbXkgYm9vawpmZW1hbGUgaHVtYW5vaWQgY3JlYXR1cmUKcm95YWwgYmx1ZSBjb2xvcnMKbW9ua3MKaW4gc3R5bGUgb2YgZGFyayBmYW50YXN5IGFydAppZiBpIG9ubHkgY291bGQKYmlsbCBzaWVuY2tpd2ljegphcnRpZmljaWFsIGxpbWJzCmFjdGl2aXR5IHBsYXkgY2VudHJlCmNvdmVyZWQgaW4gcm9iZXMKZG91ZyBoaWxsIHN0eWxlCm1hbnkgZmlyZWZsaWVzCmdyYWZmaXRpIHN0cmVldCBhcnQKb3JuYXRlIGFuZCBoeXBlciBkZXRhaWxlZApncmVlayBldGhuaWNpdHkKcHVsaXR6ZXIKYWNjZW50ZWQgaW4gYnJpZ2h0IG1ldGFsbGljIGdvbGQKYXJ0aXNhbmFsIGFydApncmFmZml0aSBvbiB3YWxscwpwdXBweQpwdXJwbGUgY29sb3JlZCBleWVzCmFuaW1lIHNjcmVlbnNob3QgcGF0dGVybgpiZWF1dGlmdWwgYWxsdXJpbmcgYW5pbWUgdGVlbgp0ZWVuYWdlcgpmaXJpbmcgYSBndW4KYmVhY2hlZCBzdWJtYXJpbmUKY2FzdGluZyBhIG1hZ2ljIHNwZWxsCndlYXJpbmcgYSBzYW50YSBoYXQKYmVuIC0gZGF5IGRvdHMKZGFyayBzdXJyZWFsaXN0CnhpYW9ndWFuZyBzdW4Kc2l0dGluZyBpbiBjaGFpcgpkZXRhaWxlZCB2ZWlueSBtdXNjbGVzCmZpbmFsCm1hZ2ljYWwgYXJlYQpmZWF0dXJpbmcgZW5naW5lCnRyaW1tZWQKc3RhciBjaXRpemVuIGNvbmNlcHQgYXJ0CmFyY2hlb2xvZ3kgam91cm5hbCBjb3Zlcgpwb3N0IC0gbW9kZXJuaXNtCndsb3AgOiA6IDYgb2N0YW5lIHJlbmRlciA6IDogMwpwb3N0IC0gbWluaW1hbGlzbQppcmlkZXNjZW50IHNwZWN1bGFyIGhpZ2hsaWdodHMKZGFyayBkZWNvCmZyYW1lZCBwb3N0ZXIKZ2hpYmxpIGFydHN0eWxlCmFtbW9uaXRlCnJpcHBlZCB1cCB3aGl0ZSBnYXJtZW50CmxhcmdlIHRlcnJhcml1bQphcnRzdHlsZSB0b20gYmFnc2hhdwpzY2VuaWMgbW91bnRhaW4gc2V0dGluZwpiYXJiYXJhIGhhbW1lcgpmYWNldHMKc3RvcnkgYm9hcmQgZm9ybWF0CnRoZSBiZXN0IHBob3RvZ3JhcGggb2YgYXVndXN0CmJlcnRob2xkIHdvbHR6ZQptYWVsc3Ryb20KY29sb255CmJsYWNraG9sZSBzdW4KbnBjIHRhbGtpbmcKbG9nb3BvbmQKYmVlcGxlIHwKdml2aWQgYW5kIGJhbGFuY2VkCmJlYXV0aWZ1bCBmZWF0aGVycwpwb3N0IC0gc292aWV0IGNvdXJ0eWFyZApmb3JiaWRkZW4gcGxhbmV0IDEgOSA1IDYKcGFzdGVsIHNvZnQgY29sb3JzCmFuZ3VsYXIgYmFja2dyb3VuZCBlbGVtZW50cwpiYWxhbmNlZCBtYXN0ZXJwaWVjZQpiaWcgc3BsYXNoCmRldGFpbCBhY3J5bGljIHBhbGV0dGUga25pZmUKYmFycmVuIGxhbmRzY2FwZQphdXJvcmEgZ3JlZW4KbW9vbmxpZ2h0IGdyZXkKZ3JvdW5kIGJyb2tlbgpuYXR1cmUgb3Zlcmdyb3d0aAp1bHRyYSBmaW5lIGlsbHVzdHJhdGlvbgpzaWx2ZXIgaGFpciEhCnByb2Zlc3Npb25hbCBtYWtldXAKZHJhbWF0aWMgc29mdCBzaGFkb3cgbGlnaHRpbmcKY29ja3kgc21pcmsKdmlicmFudCBiYWNrbGl0CnNoYWxsb3cgZGVwdGggb2YgZmllbGQgaGRyIDggawplbW90aW9uIDogbWFkbmVzcwpjb21wbGV4IHBhdHRlcm5zCjggayBoaWdoIGRldGFpbCBhbmQgaW50cmljYXRlCmJpbGF0ZXJhbGx5IHN5bW1ldHJpY2FsCnJlZnJhY3RpdmUgYWRvcm5tZW50cwpjb2xvcmZ1bCB0b3JuIG5lYnVsYXMKOGsgZGVmaW5pdG9uCnRvdGFsIHJlY2FsbCBhcnRpZmFjdHMKYW5nZWwgb2YgZ3JpZWYKZnVsbCAtIGJvZHkgc2hvdApzaXR0aW5nIG9uIGVkZ2Ugb2YgYmVkCnRlY2hubyBuZW9uIHByb2plY3RvciBiYWNrZ3JvdW5kCmhpZ2ggdHJlZXMKcmV2ZW5nZQpzaGltbWVyIGRldGFpbGVkCmFudGhyb3BvbW9ycGhpYyBtYWNoaW5lCnZlZ2V0YWwgYXJjaGl0ZWN0dXJlCnllZSBjaG9uZwpmZWx0IHRpcCBwZW4Kc3VycmVhbCBkcmFtYXRpYyBsaWdodGluZwpiZWF1dGlmdWwgcG9ydHJhaXQgb2lsIHBhaW50aW5nCm1hbnRpcwpubyBzdGlwZQpkcmVzc2VkIGluIGxlYXRoZXIgamFja2V0CmNhcnRvb24gZGlnaXRhbCBwYWludGluZwpteXN0ZXJpb3VzIGxpZ2h0CnNpZ25ib2FyZHMKYXVnbWVudHMKY3liZXJwdW5rIGFydCAyMDc3CmRhZGFpc3QKa2luZCBmYWNlCmJlbmV2b2xlbnQgY3lib3JnIG5lY3JvbWFuY2VyCnBjIGJveGFydApzY2FyeSBhbmdyeSBwb3NlCmh1bWlkIGdyb3VuZApzYWlsYm9hdHMgaW4gdGhlIHdhdGVyCnRpbnkgdmlsbGFnZQpiaWcgd2F2ZQpzd2VhdGVyCnB1ZmZiYWxscwptb25vY2hyb21lIGJsYWNrIGFuZCB3aGl0ZQo4ayAtLWhlaWdodCA3NjgKdHJlbmRpbmcgb24gYXJ0c3RhdGlvbiBwaXhpdgo4IGsgdmVydGljYWwgd2FsbHBhcGVyCmJsYWNrIHBvbnl0YWlsIGhhaXIKYWxwYWNhIHNjdWxwdHVyZQprcmFtcHVzCnN5bW1ldHJpY2FsIHJlYWxpc3RpYwpwdXJlIGltYWdlIHdpdGhvdXQgZHVwbGljYXRpb24KYXJ0IG9mIGdyZWcgcnV0a293c2tpCnNjaXNzb3IgcGVvcGxlCmZ1ciBzY2FyZgpmb3JyZXN0IGluIHRoZSBiYWNrZ3JvdW5kCnNoYWRvd3Mgb24gc2lkZQpwZXJmZWN0IHByb3BvcnRpb25zIGZpbmUgLSBmYWNlCnRldHN1eWEgaWNoaWRhCm9sZCBjaGluZXMgcGFpbnRpbmcKcGFzdGVsIHN1bnNldApwYWludGluZyBhcnQKcmljayBhbmQgbW9ydHkgcGlja2xlIHJpY2sKbmVvIC0gY2xhc3NpY2FsIHN0eWxlCnNtYWxsZXIgbW91dGgKbW9vZHkgc2hhZG93cwpvbWlub3VzIGV2ZW5pbmcKbWluaW1hbGlzdCBmdXJuaXR1cmUKZmx5aW5nIG11ZApzcGxpdCBpbiBoYWxmCnNoYXJwIHRleHR1cmVzCm5pa29sYXkgZ2VvcmdpZXYKdWx0cmEgaW50cmljYXRlIGRldGFpbGVkCmJ3IDMgZCByZW5kZXIKY29yb25hdGlvbgpmdWxsIGJvZHkgYmFja2xpZ2h0CmhpZ2hseSB0ZXh0dXJlZCBvaWwgcGFpbnRpbmcKd2l0aCBkcmFtYXRpYyBza3kKY292ZXJlZCB3aXRoIHJvb3RzCm92ZXJjYXN0ISBjaW5lbWF0aWMgZm9jdXMKY2FyIHBhcnRzIGNvbmNlcHQKdGhyb3cKd2F4IGZpZ3VyZQo4IGsgcmVzb2x1dGlvbiBoeXBlcmRldGFpbGVkCnBzIDIKY2FydG9vbiBjb25jZXB0IGFydApjYXNlCmVsb3kgbW9yYWxlcwpjZWxlc3RpYWwgY29zbW9zCnVuY29tZm9ydGFibGUgYW5kIGFueGlvdXMKYmlnIGJlbHQKaGVhdnkgYm9vdHMKd2l0Y2ggYWNhZGVtaWEKYWtpaGlrbyB5b3NoaWRhLiBub21heApzbW9vdGggc3VyZmFjZXMKd2F0ZXJ5IGJsdWUgZXllcwpiaWcgYnJlYXN0cyEhCnByb3RydWRpbmcgY2hpbgpyZWQgYW5kIGJsYWNrIGRldGFpbHMKY2luZW1hdGljIGNsb3NlIHNob3QKc2hhcnAgbWV0YWwgY2xhd3MKZ2xhc3Mgdmlzb3IKY2luZW1hdGljIGdvZGRlc3MgY2xvc2Ugc2hvdAppbiBlbXB0eSBzcGFjZQp3b21hbidzIGZhY2UgbG9va2luZyBvZmYgY2FtZXJhCmFuYW1vcnBoaWMgd2lkZSBhbmdsZSBsZW5zCm9mIHNwaWtlZCBnZWFycyBvZiB3YXIgc2t1bGxzCnNoZSBoYXMgaXJpZGVzY2VudCBtZW1icmFuZXMKMyA1IG1tIGltYXgKaW4gYmV0d2VlbiBhIGdvcmdlCm1ldGFsIGRyYWdvbiB0YWlsCmdvdmVybm1lbnQgYXJjaGl2ZSBwaG90b2dyYXBoCmJyaWdodCBwYWxldHRlCnRoZSBydWlucwpob2xkaW5nIGEgdmlueWwgcmVjb3JkCmZ1bmt5IGZ1cm5pdHVyZQpzdGFuZGluZyBuZXh0IHRvIGEgY2FtZWwKZXhhZ2dlcmF0ZWQgbGlnaHRpbmcKZmFjZSBjb3ZlcnMgaGFsZiBvZiB0aGUgZnJhbWUKbHV4dXJ5IGRyZXNzCm9mZmljaWFsIGRpb3IgZWRpdG9yaWFsCnNraW4gY2FyZQptZXNzeSBsaW5lcwpmaWx0aCBhbmQgZ3JpbQptaWRkbGUgZm9jdXMKd2VhcmluZyBhIHJlZCBvdXRmaXQKZmFyb2UgaXNsYW5kCmNvc3QKdGhvcmF4Cndvcmstd2hlZWxzCnJlZCBza3kgYmx1ZQpiYXIgYmFja2dyb3VuZApzaXR0aW5nIGluIGEgY3JhbmUKbW9ycGhpbmcgZG9nIGhlYWQKbWVyZ2luZyBjcm9jb2RpbGUgaGVhZApzdG9uZSBncm90dG8gaW4gdGhlIGNlbnRlcgpnYWRnZXQKaGFyZHdhcmUKZ2FtZSBkZXYgYXJ0CmNvbG9yIHNwZWN0cnVtIHJlZnJhY3Rpb24KZmFucyBoYWxzCnN0b25lIGV0Y2hpbmdzCnNraWRkaW5nCnR3aWRkbGUKbG9uZSBzaWxob3VldHRlIGluIHRoZSBkaXN0YW5jZQp0aGUgZ2hvc3RzIGluIHRoZSBtYWNoaW5lCmluIHN0eWxlIHRoZSBkZW1vbiBzZWF0ZWQKY29sb3JmdWwgdmFwb3IKc2lsdmVyIHdoaXRlIHJlZCBkZXRhaWxzCnJlYWxpc3RpYyBjaW5lbWEgNCBkIHJlbmRlcgpzb21lIHJlZCBhbmQgcHVycGxlCnF1YW50dW0gY29tcHV0aW5nCnBob3RvIGJhc2gKd29ybGQgd2FyIGlpaQppbiBhIHNjZW5pYyBlbnZpcm9ubWVudApwZW4gb24gd2hpdGUgcGFwZXIKcnVsZQpxdWVlbiBvZiBkcmFnb25zCmlyaWRlc2NlbnQgbGlnaHRpbmcKYm90YW5pYyBnYXJkZW4KZGV0YWlsZWQgZW50YW5nbGVkIGZpYnJlcwpjcmVhdGlvbiBvZiBhZGFtCnNwaWRlciB0aG9yYXgKZ2xvc3N5IGRlc2lnbgp3aWRlIG5vc2UhISEKZ2xvd2luZyBob2x5IGF1cmEKa29iYWx0IGJsdWUKamFtZXMgamVhbiBtYXJjCmRlZXBzZWEKd3JldGNoZWQgY2FtZWwKY3liZXJwdW5rIGJhdG1hbgpwc3ljaGVkZWxpY3MKcGFpbnRlZCBieSBhbmRyZWFzIHJvY2hhCnBsYXNtYSBjaGFyZ2VzCmNhbWVyYSBmYWNlCmNvbXBsZXRlbHkgZ29sZGVuIGV5ZXMKZmluZ2VyCmRhcmsgd29vZHMKZHJlc3NlZCBpbiBkYXJrIGdhcm1lbnQKYmxhY2sgdGVuZHJpbHMKaGlnaCBwb2ludCBvZiB2aWV3CmFib3ZlIGEgdmlsbGFnZQppbnRyaWNhdGUgZGV0YWlsZWQgNCBrCmdlbnRsZSBtaXN0cwpzb2Z0IHN1bmJlYW0Kc3RpbGwgZnJvbSBmaWxtCm1vdW50YWlucyBhdCBiYWNrZ3JvdW5kCmJsdWUgc3VyY29hdAp3cmlua2xlcyBhbmQgbXVzY2xlcwp3ZWlibwpib3dzZXIgbmludGVuZG8Kc29mdCBsaWdodGluZyBhbmQgZm9jdXMKdHdpcmxzIGFuZCBjdXJ2ZXMKc3Ryb25nIHBlcnNvbmFsaXR5CmJleW9uZCB0aW1lCmNob2tlciBhcm91bmQgbmVjawpzdGVlbCBjb2xsYXIKZ3JheSBtb3R0bGVkIHNraW4KY3JhY2tlZCBlYXJ0aApwb3J0cmFpdCBvZiB5b3VuZyB3b21hbgpwcmV0dHkgZ2lybApkZXRhaWxzIG9mIGZsZXNoIGFuZCBza2luCmJyYW5jaGVzIGFuZCB0d2lncwpzb2Z0IHNwb3QgbGlnaHQKc3RhYiB3b3VuZAp0eXJhbnQKbG9uZyBibGFjayBzdHJhaWdodCBoYWlyCmhvbGxpcyBkdW5sYXAKcnVzc2lhbiBzdHlsZQpyYWN5CnZpdGFscyB2aXN1YWxpc2VyISEKZGVlcCByaWNoIG1vb2R5IGNvbG9ycwpkZWZpYnJpbGxhdG9yCnJlYmVjY2Egb2Jvcm4KaGluZHUgdGVtcGxlIGluIGJhY2tncm91bmQKZXBpcGhhbnkKbG9uZyBkYXJrIHNoYWRvd3MKcXVpY2tzaWx2ZXIKZHJlYW1sYW5kIG9mIGNoaW5lc2UKaHlwZXIgY29uY2VwdCBhcnQKY2Fub24gOCAwIGQKc21hbGwgY3Jvd24Kb3Zlcmdyb3duIGdhcmRlbiBlbnZpcm9ubWVudApvbiBhIGJyaWRnZQplbmdyYXZpbmcgaWxsdXN0cmF0aW9uCmNhcnRvb24gZmFjZQp0diBzdGlsbCBmcmFtZQpvcm5hdGUgY2FydmVkIGFyY2hpdGVjdHVyZQptb3NzIHBhdGNoZXMKYmxhY2sgZXllZApkZXd5IHNraW4KZWVyaWUgYXRtb3NwaGVyaWMgbGlnaHRpbmcKZ3JlZyBydXRrb3dza2kgYXJ0CmV2YW5nZWxpb25pYyBpbGx1c3RyYXRpb24Kc2FuZHdpY2ggd2l0aCBmcmllZCB0b2Z1CmV4dHJhIGNsb3NlLXVwCmdsb3dpbmcgbHVtaW5lc2NlbnQgaW52b2NhdGlvbnMKYmxhY2sgYW5kIGN5YW4gY29sb3Igc2NoZW1lCnNwYWdoZXR0aSBtdXN0YWNoZQpzcGFnaGV0dGkgaGFpcgpzcGFnaGV0dGkgYmVhcmQKOGsgY2xlYW5pbmcgZnV0dXJlCmhvbGRpbmcga2F0YW5hCmhlYXJ0cyBvZiBpcm9uIHBvcnRyYWl0CnNwaXJpdCBwaG90b2dyYXBoeQptYXR0ZSBzdXJmYWNlCmJyb2FkCm1hZ2ljIHNjaG9vbApzaG9ydCBoYWlyIHN0eWxlCndvb2RlZCBlbnZpcm9ubWVudApjYXByaWNpb3VzCmhpZ2ggcXVhbGl0eSBjaGFyYWN0ZXIgZGVzaWduCmZlbWFsZSBtb29uIGtuaWdodApzaGFycGx5IHNoYXBlZApzbXVnIGZhY2lhbCBleHByZXNzaW9uCnJheXRhcmNlZApidWRhcGVzdCBzdHJlZXQgYmFja2dyb3VuZApzaWdtYSAyNG1tIGY4CnNtb2tlIGFyb3VuZCBoaW0Kc29mdCB2b2x1bWUgYWJzb3JiYXRpb24KbGlnaHRuaW5nIHN0b3JtIGJhY2tncm91bmQKZnV0dXJpc3RpYyBwcm9kdWN0aW9uIGZhY2lsaXR5CjEwdGggZG9jdG9yIHdobwp3aCA0IDAgayBhcnQKMiAxIHN0IGNlbnR1cnkKd2VhcG9ucyBpbiBoYW5kCnN0ZWFtcHVuayBpbWFnZXJ5IHRoZW1lZAp2aXZpZCBwYXN0ZWwgY29sb3Igc2NoZW1lCmFzIGEgZnVua28gcG9wIQplbGVnYW50IHNsaW0gYmVpZ2Ugc2hpcnQKbW9kZXJuIGhhaXJjdXQKYmVhdXRpZnVsIGFuZCBlbGVnYW50Cm1pc2NoaWV2b3VzIGV4cHJlc3Npb24KbG9uZyBzbGVldmUKcGFpbnRlZCBvdmVyYWxscwpnbG93aW5nIHBpbmsgbGFzZXIgZXllcwpmbG93aW5nIGJsb29kIHJlZCBjb2xvcmVkIHNpbGsKc2lsdmVyIHN0ZWFtcHVuayBnZWFycwpiaWcgbmF0dXJhbCBob3JucyBvbiBoZXIgaGVhZAppZ2hseSBkZXRhaWxlZApwZXJzcGVjdGl2ZSBwZXJjZXB0aW9uCnNsZWVrIGZsb3dpbmcgc2hhcGVzCmZ1dHVyaXN0aWMgY2FzaW5vCnB1cnBsZSBib2R5CmF1dHVtbiByYWluIHR1cmtlbApmaXJld29yayBzbW9rZSB0cmFpbHMKbWlkZGxlIGxlbmd0aCBoYWlyCmdpcmwgd2Fsa2luZyBpbiBmb3Jlc3QKZ2lhbnQgZGFpc3kgZmxvd2VyIGFzIGEgaGVhZApnaWFudCBtZWNoYW5pc21zCmRldGFpbGVkIG1vZGVsCmdlb3JnZXVzCm1vdGhlciBvZiBwZWFybCBpcmlkZXNjZW50CmdsYW1vcm91cyBhbmQgc2V4eSBnZWlzaGEKaW4gdGhlIHVuZGVyd29ybGQKdW5kZXJ3YXRlciBwc3ljaGVkZWxpYyBzbW9rZQpncmFpbnkgcGhvdG8gb2YgYW4gdWdseSBtYW4KaG9zcGl0YWwgaW50ZXJpb3IKZ2FybGljIG9uIGJhY2tncm91bmQKcGhvdG9saXRob2dyYXBoeQptYXJpYSBib3JnZXMKYmlnIGN1dGUgZXllcwpyZW5haXNzYW5jZSByZWxpZ2lvdXMgcGFpbnRpbmcKeW91bmcgbGFkeQpoZWFkIG1hZGUgb2YgZ2lhbnQgZGFpc2llcwpoZWF2eSBmYW50YXN5IGFybW9yCmFjY3VyYXRlIGlsbHVzdHJhdGlvbgpjb21tZXJjaWFsIHByb2R1Y3QgcGhvdG9ncmFwaHkKaXJpZGVzY2VuY2Ugd2F0ZXIgZWxlbWVudGFsCmRyYW1hdGljIHBpbmsgbGlnaHQKc3RpcHBsZWQgd2FsbHMKc2hhcnAgY2xhd3MgZm9yIGhhbmRzCmJ1dCBhcyBhbiBhbnRocm9wb21vcnBoaWMgZHJhZ29uCmdyb3VuZCAtIGxldmVsIHZpZXcKaW1wcmVzc2lvbmlzdGljIGJydXNoIHN0cm9rZXMKaW50aW1pZGF0aW5nIGV4cHJlc3Npb24Kcm9ib3RpYyBsaW1icwptaW5pbWFsIGtpdGNoZW4Kc3R5bGVkIGZvb2QgcGhvdG9ncmFwaHkKd2lsZCBzcGVjaWVzIHBob3RvZ3JhcGh5CmluIHN0eWxlIG9mIGNvbCBwcmljZQpwcmVoaXN0b3JpYyBwbGFuZXQKaW50ZXJ2ZW50cmljdWxhciBmb3JhbWVuCmhvbGxvdyBjaGVla3MKaXZvcnkgbWFrZSB1cCBvbiB0aGUgZXllcwpmaXJld29ya3Mgb24gdGhlIGJhY2tncm91bmQKb3Rha3UgZ2FuZ2FzdGEKaW4gd2F0ZXIgdXAgdG8gaGVyIHNob3VsZGVycwppbnRyaWNhdGUgY3liZXJwdW5rIG1ha2UgLSB1cAp3ZXNsZXkga2ltbGVyCmkgZHJlYW0gb2YgYSB2YXNlIGZsb3dlcnMKY2luZW1hIDQgZCBzaGFycCBmb2N1cwphdmFuZ2FyZApzdGVhbXB1bmshISEgYW5kIG1vZGVybgpob3dhcmQgYnJvd24Kc2luZ2xlIGxvbmcgc3RpY2sKcGhhbnRvbSBjcmFzaAp0YW5rIHdpdGggbGVncwpyb2NrIGNsaW1iaW5nCmluaXRpYWwgZCBhbmltZSBzY3JlZW5zaG90CmNoaW5lc2UgYnJ1c2ggcGVuCmFlcm9jaHJvbWUgZXllcwpmdW5nYWwgcGFnZXMKdGhyZWFkbGlrZQpyZW5kZXJmYXJtCmluc2lkZSBhIG1hZ2ljYWwgaXRlbSBzaG9wCmhkcnAgcmVuZGVyCnNrdWxsIGNsb3duCnNwYXJyb3dzCmFybXMgY292ZXJlZCBpbiBnYW5nIHRhdHRvbwpiZWFjaGZyb250IG1hbnNpb24KanVzdCBhcnQgZm9yIGRhcmsgbWV0YWwgbXVzaWMKYnV0IGFzIG1hY3JvIHBob3RvZ3JhcGh5CmtpbmcgcmljaGFyZCB0aGUgbGlvbmhlYXJ0CnJveWFsIHJvYmUKaHVuY2hiYWNrCm1vZGVybiByZWFsaXNtCmxhbmRzY2FwZSBvZiBhbiBhbGllbiB3b3JsZApvcm5hdGUgc3Bpa2VzCmJlYXV0aWZ1bCB3ZWRkaW5nIGRyZXNzCnp1bWlkcmF3cwpvdmVyIGEgY2hhbGsgY2xpZmYKZnJvbSB0b3Vob3UKbW9kZXJuIHJ1c3RpYwpsaWdodG5pbmcgc3ltYm9sCnNjYXJsZXR0IGpvaGFuc29uCjMgMCB5ZWFycyB3b21hbgpwcmUgcmFwaGFlbGl0ZSBhcnQgc3R5bGUKY2FzdApnYXMgbGlnaHRpbmcKYW15IGp1ZGQKd2VhcnMgYSBzdWl0IG9mIHBvd2VyIGFybW9yCmxvb2sgb2YgZGVzaXJlCmxvdmluZyBzdGFyZQp5b3NoaXRha2EgYW1hbm8gY2hhcmFjdGVyIGRlc2lnbgpkZSBrb29uaW5nCnBvcCBzdXJyZWFsaXN0Cm1vdXNlIGhvbGRpbmcgYSBkcnVtCnNpdHRpbmcgaW4gdGhlIGZvcnJlc3QKbW92aWUgc3RpbGwgb2YgYSBjb29sIGN5Ym9yZwpiaWxsb3d5CmFydCBub3V2ZWF1IGRlc2lnbiBlbGVtZW50cwphcnQgbm91dmVhdSBvcm5hbWVudAphbGwgbG9va2luZyBhdCBjYW1lcmEKZnV0dXJpc3RpYyBjaXR5IGJhY2tkcm9wCm15IGxpdHRsZSBldmVyeXRoaW5nCm5hdHVyYWwgc29mdCBwYWxlIHNraW4KbXlzdGljIHdpbnRlciBsYW5kc2NhcGUKdW1icmEKd2hpdGUgZ2xhc3NlcwphdCBzbm93eSBmdWppIG1vdW50YWluIG1vb25saWdodApiYXJiYXJhIGhhbW1lciA0IGsKYnJpZ2h0IHN1bm55IHN1bW1lciBkYXkKamFwYW5lc2Ugc2NpIC0gZmkgYm9va3MgYXJ0CmRyYXBlZCB3aXRoIHdhdGVyIGFuZCBzcGluZXMKc2hhcnAgZm9jdXMhISEKZ2lhbnQgZmFudGFzeSBjcmVhdHVyZXMKbG9uZyB0dW5pYwpjbG90aGVzIQpzb2Z0IGxpbGFjIHNraWVzCmhhbHRlci10b3AKZXhoaWxhcmF0ZWQKcGFuZGVtaWMKc29tZSB6b29tZWQgaW4gc2hvdHMKZWF0aW5nIG91dHNpZGUKcHN5Y2hlZGVsaWMgZmVybgpibGFjayBwYXBlciB0YXJvdAp3ZWFyaW5nIGhheSBjb2F0Cmdvb2QgbGlnaHRlZCBwaG90bwpoZWF2eSBicm93CmdxIGNvdmVyIDogOgpydXN0eSBhcm1vcgpwaW5lcyBzeW1ib2xzCmF0IGdlbnRsZSBkYXduIHJlZCBsaWdodAphcnQgZGlnaXRhbCBwYWludGluZwpmdXR1cmlzdGljIGFuZCBldGhlcmVhbApzaW51b3VzCnRyYWRpdGlvbmFsIGNvc3R1bWUKYSBibHVlIGRyZXNzCmJhY2tncm91bmQgaXMgcHVycGxlCmJsYWNrIG9uIGJsYWNrCjIgcG9pbnQgbGlnaHRpbmcKYmVkaGVhZApzbGVldmVsZXNzIHR1cnRsZW5lY2sKd2VhcmluZyBibGFjayByb2JlcwpzdG9yeWJvb2sgZmFudGFzeQppbiBwZXJzaWFuIHRlbXBsZSB3ZXQgbmlnaHQKcGxheXNlYXQgZXZvbHV0aW9uCmFmcm8gLSBmdXR1cmlzdCBzdHlsZQpmbG93aW5nIG1hdGVyaWFsCm9uIHRoZSBkZXNlcnQKZXllcyBpbiBkaWZmZXJlbnQgZGlyZWN0aW9ucwppbnRyaWNhdGUgc2lsayBjbG90aGluZwpwb3J0cmFpdCBvZiB0aGUgam9rZXIKYmx1ZSBleWVzIGFuZCBibG9uZCBoYWlyCnByZXNlbnRpbmcgcGl6emEKbmF0dXJhbCBtYXRlcmlhbHMgOjogaGlnaCBkZXRhaWwKY2xvc2UgdXAgZnJvbnQgdmlldwpoaWdoIC0gZW5kIGZhc2hpb24gcGhvdG9zaG9vdApwc3ljaGVkZWxpYyBzaGFtYW4KZ3J1bmdlIGZhc2hpb24KZGVwcmVzc2VkIGRyYW1hdGljIGJpY2VwIHBvc2UKcmFyZSBiaXJkIGluIHRoZSBqdW5nbGUKZGVhZCBmcnVpdHMKZ3VsZiBvZiBuYXBsZXMKZmFjZSB3aXRoIHNjYXJzCm9iamVjdCBkZXRhaWxzCmFzeW1tZXRyaWNhbCEhCnJvb20gb2YgYSBkYXJrIG1hbnNpb24Kc2NlbmUgYmVhdXRpZnVsCnByb2ZmZXNpb25hbCBpbGx1c3RyYXRpb24KcnR4IGdlZm9yY2UgZXhwZXJpZW5jZQp0aW1lIHRyYXZlbGVycyBhcHBlYXIgaW4gYSBwYXJrCndpbnRlcnRob3JuIGJsZXNzaW5nCnRyYWRpdGlvbmFsIGZvbGsgYXJ0IHN0eWxlCmNsZWFuIGVuZXJneQp2aWt0b3IgZGVuaQpoYXZyeWxvIHB1c3Rvdml5dApzcGVjIC0gb3BzIGhlYWQKc3RvcC1tb3Rpb24gZmlsbSAoMTkyNCkKd2VhcmluZyBhIGhvb2RpZSBhbmQgZmxvd2VycwphdCAtIGF0IGltcGVyaWFsIHdhbGtlcnMKY2FmZSB0YWJsZXMKZXh0cmVtZWx5IG1vb2R5IGJsdWUgbGlnaHRpbmcKdmVyeSBsb25nIG9yYW5nZSBoYWlyCnNtaXJrIG9uIGZhY2UKYW5jaWVudCBlcGljIHRvd2VyIGluIHRoZSBkZXNlcnQKd2lkZXIgZmFjZQpvbiBhIGNhbnZhCndob2xlIGNhcmQKdGhlIGZsYW1pbmdvIGNhZmUKbW91bnRhaW4gc25vdwp0cmlvCnRpbm5pdHVzCnVudGl0bGVkIG1peGVkIG1lZGlhCnNlZHVjdGl2ZSBnbGFuY2VzCm1vbGVrc2FuZHJhIHNoY2hhc2x5dmEKd2lsZCBiZWF1dGlmdWwgZG9ua2V5CnZlcnkgbG9uZyBzaG90IG9mIGEgd2luZG1pbGwKdGVycmFyaXVtIGxvdW5nZSBhcmVhCndvbWFuIGxvdmUgd29tYW4KbGVuc2UgZmxhcmVzCmRhcmsgZW1lcmFsZCBtaXN0IGNvbG9ycwp5b3VuZyBkb2xseSBwYXJ0b24gcG9ydHJhaXQKeW91bmcgbWFsZSBhbnRocm8gZHJhZ29uCnpvb21lZCBvdXQgcG9ydHJhaXQgb2YgYSBkdWtlCnBhdGhvbG9neQpoeXBlciByZWFsaXN0aWPigJ0K4oCcZGlhbW9uZHMKbmVvLWV4cHJlc3Npb25pc3Qgc3R5bGUK8J+mqfCfqpDwn5Ce8J+RqfCfj7vwn6azCmluc3RhZ3JhbSBwaWN0dXJlCmR5bmFtaWMgbGlnaHRzIGFuZCBzaGFkb3dzCmRpZ2l0YWwgcGFpbnRlZApiZWF1dGlmdWwgeW91bmcgZmFjZQpwbGF5aW5nIHBva2VyCmNvbG9yZnVsIGhpZ2ggY29udHJhc3QKaW5mYW50cnkKY29mZmVlIGJlYW5zCnZvbHVtZXRyaWMgaGF6ZQppbmsgbGluZXMKc2VlIG5vIGV2aWwKaXJpZGVzY2VudCBkZWVwIGNvbG9ycwpsb3ZlbHkgc21pbGUKYXIgMTY6OQp0b3VjaGluZyBoZWFkcwpmb3JtaW5nIGEgaGVhcnQgd2l0aCB0aGVpciBuZWNrcwpjbG9zZXVwIHNob3Qgb2YgZmFjZQpyb2IgZ29uc2FsdmVzIGFuZCB0aW0gd2hpdGUKc2NpIGZpIGFydAp0b3AtZG93biB2aWV3CnNjaS1maSBsYW5kc2NhcGUKdmFyaW91cyBhcnQgc3R5bGVzCmNsb3NlLXVwIHBob3RvCm91dHNpZGUgYSBzYWxvb24KamVkaSByb2JlcwoxIDkgNSAwIHMgc2NyYW1ibGVyCm1vdG9yY3ljbGUgY29uY2VwdCBhcnQKZW5lcmd5IHNwaGVyZXMKaGFsYmVyZAooIGJyb3duIHNraW4gKQpub3Rhbgp1bHRyYSA0IGsKbW92aWVzdGlsbApidXJudCB1bWJlcgohIGhhdXRlIGNvdXR1cmUhCigoZGFyayBmYW50YXN5CndpdGNoZXIpKQpyZXRhaWxkZXNpZ25ibG9nLm5ldApzY2lmaSBmYW50YXN5CmNydAoxNi1iaXQKd29hbW4gaXMgY3VydmVkCndpdGggZGFtYWdlZCBydXN0eSBhcm1zCmlyaWRlc2NlbnQgbWV0YWxzCmJpb21lY2hhbmljYWwgZ2FybWVudApzZXJ2ZXIKY2luZW1hdGljIGVwaWMKMSAzIDUgbW0Kb3ZlcmNhc3QgZ3JheSBza2llcwpjaXJydXMgY2xvdWRzCndvcmtpbmcKc3RvbmVyIHJvY2sKd2hpc3RsZXIKYmVsb25naW5ncyBzdHJld24gYWJvdXQKYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UhIQoxIDYgbW0gZmlsbQpyZWZpbmVkIGZhY2UKcmVzdGF1cmFudCBleHRlcmlvciBwaG90b2dyYXBoeQpiZWF1dGlmdWwgZmVtYWxlIG5ldXJvbWFuY2VyCmFsaXNvbiBicmllCmxvb2tpbmcgaGVyb2ljCjggMCBzIGdhbWUgYm94IGFydApuZXdzcGFwZXIgcGhvdG8Kc2tlbGV0b3IKcmVwb3J0YWdlCjEgOSA5IDcKc2NyZWFtaW5nIGluIGFnb255CmRvdApkYXJrIGFuZCBkZXNhdHVyYXRlZCBjb2xvdXJzCmNvbnRyYXN0aW5nIGNvbG91cnMKYXVyb3JhIGFrc25lcwp6b8OrIGtyYXZpdHoKbcO2Yml1cwpmYW50YXN5IHdhcnJpb3IKMTYgYml0CmRhbmcgbXkgbGluaApzdGFpbmVkCjE4ODAKZG9sb21pdGVzIGluIHRoZSBiYWNrZ3JvdW5kCmJsYWNrIGhhdAoxOTQwcyBwaG90bwoxOTYwcyBuZW8gcm9jb2NvIGV4cHJlc3Npb25pc3QKMTk2MHMgb3JpZW50YWxpc20Kcm9tYW4gZW1wZXJvcgppbnRydWRlcgpzdW5zZXQgc2t5CmJsYWNrIGJvb3RzCnRodW1icyB1cApwYWlzbGV5CmZpbmFsIHJlbmRlcgpwYXJhbm9pYQpsaWdodCBhcm1vcgphbmdyeSBmcm93bgpibGVhY2hlZApibG9jayBoZWFkCmZyZW5jaCBib2IgaGFpcgoyIGRpbWVuc2lvbmFsCjJiIG5pZXIgYXV0b21hdGEKZW5kbGVzcyBzdW1tZXIgYXJ0CmJpZyBzaXN0ZXIKZGF2ZSByYXBvemEKYmlnIGVhcnMKb3JuYXRlIGpld2VscnkKZGFyayBibHVlIHNoaXJ0CmJlYXV0aWZ1bCBhbmQgZGV0YWlsZWQgZXllcwpyZWQgYW5kIHdoaXRlIGFuZCBibGFjayBjb2xvcnMKbXVzZXVtIHBhaW50aW5nCmlhbiBjYWxsdW0KZ29sZGVuIGhvdXIgc3Vuc2V0IGxpZ2h0aW5nCmFydCA6IDogcHJvZmVzc2lvbmFsIHBob3RvZ3JhcGgKbW91bnQgcnVzaG1vcmUKZmFzaGlvbiBtb2RlbCBpbiBzdW5nbGFzc2VzCmdyZWVuIHNuYWtlcwpkbXQgdHJpcApleHBsb3Npb25zIGFuZCBmaXJlCnNub3d5IG1vdW50YWluIGxhbmRzY2FwZQpsYXJnZSB0aGlnaHMKaGlnaCByZXNvbHV0aW9uIGRpZ2l0YWwgYXJ0CmpvaGFubmEgcnVwcHJlY2h0CmFudGhyb3BvbW9ycGhpYyBhbGxpZ2F0b3IKZGlnaXRhbCBkaXNwbGF5CnNvZnQgbmVvbiBsaWdodGluZwpjZWxsc2hhZGluZwpmYXNoaW9uIG1vZGVsIGZhY2UKaWNvbnMKcmVsYXhlZCBjb2xvcnMKbW91c2UgZmFjZQp0cmVuY2hlcwptb3RoZXJzaGlwCjM2MCBtb25vc2NvcGljIGVxdWlyZWN0YW5ndWxhcgphcnQgdG95cyBvbiBmZWV0CjNkIG1hcmlvIDY0IGNhc3RsZSBhZXJpYWwgdmlldwphbmltZSB2aW50YWdlIGNvbG9ycwpuZW9uIGxlbnNlcyBmb3IgZXllcwp2YWx2ZXMKYW50ZW5uYWUKcHVycGxlIHNoYXR0ZXJlZCBwYWludCEKcmVjZWRpbmcgaGFpcmxpbmUKYm9nCnJlZHNoaWZ0LiBtaWNybyBkZXRhaWxzCmZ1ciBjb2F0CnByaXNtcwp1ZTUgcmVuZGVyCmhvcnJvciBlbGVtZW50CnRzdXRvbXUgbmloZWkgc3R5bGUKYnJvd24gaGFpciB3aXRoIGJhbmdzCmRyaW5rcyBib3VyYm9uCmVkZ2VzCnN0cm9uZyBiYWNrbGlnaHQKc2NyZWVuIGNhcHR1cmUKZ3JlZW5ob3VzZQpza3lzY2FwZXJzCmVuZ2xpc2ggY291bnRyeXNpZGUKb24gbW9vbgpibGFjayBiYWNrZ3JvdW5kIHBpbnRlcmVzdAptZWRpZXZhbCBqYXBhbgp2ZXJ5IHBlYWNlZnVsIG1vb2QKbGFjZSBkcmVzcwpqZXdlbHJ5IGlyaWRlc2NlbnQKc21pbGVzCmNpbmVtYXRpYyByZW5kZXIgdW5yZWFsIGVuZ2luZQpoaWVyb2dseXBoaWNzCnNsYXZpYyBteXRob2xvZ3kKKChnZWFycykpCndoaXRlIGhhaXJlZAozZGNnCndlYXJpbmcgYSBoZWFkc2V0CmJpcmtlbnN0b2NrIHNhbmRhbHMKc2hvdCBvbiBjYW5vbiBjYW1lcmEKbGl2ZWx5IGF0bW9zcGhlcmljCmEgaHlwZXItZGV0YWlsZWQgYWxpZW4KYmxvb2QgcmVkCmYxOApwb3N0IHByb2Nlc3MgaW4gcGhvdG9zaG9wCmphbWVzIGdpbGxlYXJkIGFydHdvcmsKYXJub2xkIDMgbWF0ZXJpYWxzCmJhZGdlcgp3aGlwcGVkIGNyZWFtCnN1cGVyIGRldGFpbGVkIGZhY2UKY3liZXIgdW5pdmVyc2UKYW1vbmcgaGVhdmVubHkgc3VubGl0IGNsb3VkcwpzY2kgZmkgd29ybGQKd2luZwpoYXJyb3dpbmcKY3lhbiBhbmQgZ3JlZW4Kd2l0aCBhbiBhbmltYWwgc2t1bGwgZm9yIGEgaGVhZApjcnlzdGFsIGxha2UKc2t5IGZ1bGwgb2Ygc3RhcnMKb2ZmaWNpYWwgY2hhcmFjdGVyIGFydApvdmVyZWNhc3QKY29sb3VyZnVsIGxpZ2h0aW5nCnNoYWRvdyBhbmQgbGlnaHQKYmx1ZSB2ZWlucwpkZWNvCnllbGxvdyBjb2xvciBzY2hlbWUKbWFnaWNhbCBlbmVyZ3kKa29kYSBrYXp1bWEKYW5hbW9ycGhpYyAzNSBtbSBsZW5zCmRldGFpbGVkIG9pbCBvbiBjYW52YXMgcGFpbnRpbmcKZ29yZ2VvdXMgYXRtb3NwaGVyZQpydHggMzA5MApzZXh5IHJlZCBsaXBzCmVwaWMgZmFudGFzeSBhcnQgc3R5bGUgaGQKbXlzdGljYWwgZXllcwo0ayBmb29kIHBob3RvZ3JhcGh5CnVsdHJhLXdpZGUgc2hvdApnbyBwcm8gZm9vdGFnZQpjYXJkIGdhbWUKd2lkZSBhbmdsZSBjYW1lcmEKZmxhZyBpbiBoaXMgcmlnaHQgaGFuZAptYXNzaXZlIHRyZWVzCmFydGh1ciByYWNraGFtLiBtYXN0ZXJwaWVjZQpjZ3NvY2lldHkgbWFzdGVycGllY2UKcGFpbnRlZCB3YXJnYW1pbmcgbWluaWF0dXJlCmN5YmVyIGltcGxhbnRzCndhbGtpbmcgdGhyb3VnaCB0aGUgZm9yZXN0CnZlcnkgc2NhcnkKYnV0IGFzIGEgcGhvdG9ncmFwaAptZW5hY2luZ2x5CmZvcmVzdCBvbiBiYWNrZ3JvdW5kCnJldHJvIHZpbnRhZ2UKYSBmaWVsZCBmdWxsIG9mIGNyb3dzCnR1cmtleQpoaWdoLXRlY2ggZW52aXJvbm1lbnQKZmFjaW5nIHRoZSB2aWV3ZXIKd2Fsa2luZyB0b3dhcmRzIHRoZSBjYW1lcmEKb24gdG9wIG9mIGEgbW91bnRhaW4KZmlyZSByYWluaW5nCnN0eWxlIG9mIHN5ZCBtZWFkCmxpdHRsZSBwbGFuZXQKZmFsbG91dCA0IHJlbmRlcgozZCBjb21wdXRlciByZW5kZXIKdHJ1ZSB0byBsaWZlCmtpc3NpbmcgZWFjaCBvdGhlcgpkZWxpZ2h0ZnVsIHN1cnJvdW5kaW5ncwprb25hY2hhbgpmaXNoIGV5ZSBsZW5zZQpwcm9kdWN0aW9uIGkuZwpmbG9yYS1sdXNoLWNyYXRlcgpjaGVlcmZ1bCBhdG1vc3BoZXJlCnVsdHJhIGRldGFpbGxlZAptYWdpY2FsIHBvcnRhbApib2tlCjRrIDhrCmNsb3NlLXVwIGltYWdlcnkKZG93bnRvd24KbXVzaWMgZmVzdGl2YWwKeWVsbG93IGhlbG1ldApsYWJjb2F0CmJyaWdodCBkYXkgbGlnaHQgc3VuCmhvcnJvciBlbGVtZW50cwphMjQKYnJ1dGFsIGNvbmNyZXRlIGFyY2hpdGVjdHVyZQpzZW1pcmVhbGlzdGljCmluc2FuZSBjb21wb3NpdGlvbgpyYWluYm93IGFjY2VudHMKdG9uZ3VlIHN0aWNraW5nIG91dApzaGFreQpiYWNrZ3JvdW5kIG91dCBvZiBmb2N1cwphbmRyb2lkIGZvcm1hdApzaXR0aW5nIG9uIGEgdGFibGUKZjMuNQpwb29yIHF1YWxpdHkKcmViaXJ0aCBzeW1ib2xpc20KaW5zaWRlIHRoZSBwaWN0dXJlIGlzIGluZmluaXR5CnNoaW5qaQpvZmZpY2lhbCBhbmltZSBhcnR3b3JrCnN1YmplY3Q6IGthbmdhcm9vCmV4cXVpc2l0ZSBhcnQKZXh0cmVtZWx5IGRldGFpbGVkIHBhaW50aW5nCmxhc3QgbWFuIHN0YW5kaW5nCjJkIG1hdHRlCndhdGVyY29sb3VyIHJlYWxpc20Kc3VwZXIgd2lkZQpjbGVhcmluZwppbnRyaWNhdGUgZmFudGFzeSBzcGVhcgpnbGFzcyByZWZsZWN0aW9ucwp0d28gbW9vbnMKbG9va2luZyBpbnRvIHRoZSBkaXN0YW5jZQpjYXZlcyBvZiBxdWQKZGV0YWlsIHNob3RzCm1vc3N5IHJvY2tzCndpdGggYSBzcG9va3kgZmlsdGVyIGFwcGxpZWQKZGlnaXRhbCBwYWl0aW5nCml0IGlzIHJhaW5pbmcgaGVhdmlseQpiZWF1dGlmdWwgZmFjZSBkZXRhaWwKaGlnaGx5X2RldGFpbGVkISEKd2hpdGUgYW5kIGxpZ2h0LXBpbmsgb3V0Zml0CndoaXRlIHN1aXQKcGVyZmVjdCBzbWlsZQp0ZWFsIGVsZWN0cmljaXR5CnNwYXJrbGluZyBsaWdodAp2ZXJ5IGNvbG9yZnVsIGhlYXZlbmx5CmF3YXJkIHdpbm5pbmcgbmF0dXJlIHBob3RvCmhvcnJvciBtb3ZpZSBzdGlsbApiYWQgYWNpZCB0cmlwCmR5c3RvcGlhIGNpdHkKb3JhbmdlIGNvbG9yIHNjaGVtZQphdCBtaWRuaWdodApmdW4gLSB3IDcwNApzdHlsZSBvZiB3YXluZSBiYXJsb3dlCmRpZ2l0YWwgc3RlYW1wdW5rIGFydApiaWxsIGdvbGQKcmljaGFyZCBhbXNlbApwZXJzb25hIDUKYSB5b3VuZyB3b21hbgp0cmFwcGVkIGluc2lkZSBhbiBob3VyZ2xhc3MKY2luZW1hdGljIGRlcHRoCmRhcmsgYW5kIG1pc3R5CndhdGVyIHB1ZGRsZXMKd2ludGVyIG5pZ2h0Cm1vdW50YWluIGJhdHRsZXMKYWZyb3B1bmsKbG9va2luZyBkb3duIG9uIHRoZSBjYW1lcmEKbWFtaW1pIHNhbWVqaW1hCmFsYnVtIGFydCBmb3IgY2hhciB6dWx1CnNjaWZpIGxhbmRzY2FwZQpkYWVuZXJ5cyB0YXJnYXJ5ZW4Kc3RyYWlnaHQgaGFpcnN0eWxlCmljYXJvIGNhcnZhbGhvCmNpbmVtYXRpYyBwaG90b2dyYXBoIGNvbmNlcHQgYXJ0CmNvbG9yZnVsIGxhbnRlcm5zCnByZS1yYXBoYWVsaXRlIHBhaW50aW5nCmxhcmdlIGJyZWFzdHMKc2l0dGluZyBvbiB0aGUgZmxvb3IKaHlwZXItcmVhbGlzdGljIG9pbCBwYWludGluZwpwaG90by1yZWFsCmNsZWFuIGxpZ2h0aW5nCnZpZGVvZ2FtZSBjaGFyYWN0ZXIKZXhjYWxpYnVyCm1hc3NpdmUgbXVzY2xlcwp1bHRyYSBoZCBkZXRhbGluZwpkZXRhaWxlZCBsaW5lIHdvcmsKYW5pbWUgZHJhd2luZwp1bmljb3JucwpteXN0aWNhbCBlbmVyZ3kKd2VsbCBwcmVzZXJ2ZWQKY2xvc2VkLW1vdXRoIHNtaWxlCjNkIGNnaQplbGRyaXRjaCBjb2xvciBzY2hlbWUKZGFyayBlZXJpZSBwaG90bwpyZWFsaXR5IHdhcnBpbmcKZnVsbCBmcm9udGFsIHBvcnRyYWl0CnZpYnJhbnQgbW9vZApzYW4gbXVtZm9yZApyZWFsaXN0aWMgM2QgcmVuZGVyCmFuIG9yYW5nZSBjYXQKc3Rvcm15IG92ZXJjYXN0CnNoZWVyCmZyYWN0YWwgYmlvbWVjaAp2ZW5pY2UKcm9tYW4gYXJjaGl0ZWN0dXJlCmFuZHJvaWQgbXlzdGljCmJlYXV0aWZ1bCBmYWNlcyBhZXN0aGV0aWMKbmFtY28KYXN0cmFsIGJhY2tncm91bmQKZ3VpbHR5IGNyb3duCnl1cnV5dXJpCmZvdW5kIGZvb3RhZ2UgaG9ycm9yCmhpZ2ggcXVhbGl0eSBmYWNlCmV4cG9zZWQgd2lyZXMgYW5kIGdlYXJzCmdsb3dpbmcgd2F0ZXIKYnV4b20KbG9uZyB0aGljayBzaGlueSBnb2xkIGJlYWsKYXBhcnRtZW50CnN0cm9ib3Njb3BlCnJlYWNoCmFwb2xsbwo4Yml0CnRhbm5lZAptb3ZpZSBzdGlsbCBmcm9tIHN0YXIgd2FycwplbXBpcmUgc3RhdGUgYnVpbGRpbmcKZXBpYyBsZWdlbmRhcnkKY291bnRyeSBzdHlsZQpsaWZ0aW5nIHdlaWdodHMKbXVzZXVtIG9mIG1vZGVybiBhcnQKcmVzb2x1dGUgZXhwcmVzc2lvbgpsaWNoIGtpbmcKdHJhcHMKYmVhdXRpZnVsIGRldGFpbGVkIGNvbmNlcHQgYXJ0CnJ1aW5lZCBnb3RoaWMgY2F0aGVkcmFsCmJyYWQKYmx1cjogLTUKdWx0cmFyZWFsaXN0aWMgb2N0YW5lIHJlbmRlcgpzaWx2ZXIgY3Jvd24Kd2lkZS1hbmdsZSBsb25nIHNob3QKcHJpbWFsCmxhbWVsbGFyIGFybW9yCmJhcmJpZSBkb2xsCmFtYXRldXIgcGhvdG8KZmV0aXNoCmZ1bGwgbWFrdXAKc2FyZGF4CnRoYXQgaXMgMTMwMCBmZWV0IHRhbGwKc3dvcmQgaW4gaGFuZAptYXhpbWFsaXNtLiBzdHVubmluZwppbiB0aGUgbW9ybmluZwpwZXJzaWFuIHN0eWxlIGFyY2hpdGVjdHVyZQpkYXJrIGFuZCBob3Jyb3IKbG9va2luZyBpbnRvIHRoZSBmbGFtZXMKc3RhZ2UgbGlnaHRzCnRyYWRpdGlvbmFsIGNoaW5lc2UgcGFpbnRpbmcKYXAKc2FkYW1vdG8geW9zaGl5dWtpCmJpZyBjaXR5CnRoZSBhdmVuZ2VycwpoYXdhaWlhbiBzaGlydApsZWF2ZXMgdHdpZ3Mgd29vZApodW50CmJqw7hybgpub3JtYW4gcm9ja3dlbGwgc3R5bGUKZ29yZG9uIGZyZWVtYW4KYmxhY2sgbWV0YWwgYWxidW0gY292ZXIKYnJvbnplIHN0YXR1ZQp2aWxsYWdlcwpib2JhIGZldHQKbWFnYXppbmUgYWQKZGFyayBkcmFtYXRpYyBsaWdodGluZwpmZWFyZnVsCmxvdyBwb2x5IHJlbmRlcgptYXJ0aWFsIGFydHMKYnVmZnkgdGhlIHZhbXBpcmUgc2xheWVyCnJqIHBhbG1lcgpleHRlcmlvciBzaG90CnZlcnkgc2hhcnAgYW5kIGRldGFpbGVkCnJlYWxpc3RpYyBiYWNrZ3JvdW5kCm5pZ2h0dmlzaW9uCmNhbHZpbiBhbmQgaG9iYmVzCnNlYmFzdGlhbyBzYWxnYWRvCmNhbiBvZiBwYWludApvbHlhIGJvc3NhawpzdG9ja2hvbG0KY2FybWVuIGVsZWN0cmEKY29udHJhc3R5CmVsYWJvcmF0ZSBjb21wb3NpdGlvbgpjYXRtYW4KY2VsZWJyYXRpbmcgYW4gaWxsZWdhbCBtYXJyaWFnZQp5b3NoaWZ1bWkgdXNoaW1hCm1vZGVsIGtpdApjZW50ZXIgcHVuY2hlZApjaGluZXNlIHByZXNpZGVudApkYXJrIGJsdWUgYmVhbmllCmhhbGYgbGlmZQp2b2d1ZSBjb3ZlciBwaG90bwpyZXRybyBjb3ZlcgpzdXBlcm1hbiBjb3N0dW1lCmtuZWUtaGlnaCBib290cwpvbGQgYm9vawphcnQtaG91c2UgYWVzdGhldGljCmFydCBzdHlsZSBvZiBqb2huIGNvbGxpZXIKZ2hhbmFpYW4gbW92aWUgcG9zdGVyCnN1bnJpc2UgbGlnaHQKbW9sZWN1bGVzCmNvYXQgb2YgYXJtcwpwYXR0ZXJuZWQKcm91bmQgc3ltbWV0cmljYWwgZXllcyEhIQpjb3N0dW1lcwpjbG9zZXVwIG9uIGZhY2UKY3RodWxodSBteXRob3MKc3BhY2UgZnJhY3RhbCBncmFkaWVudAphbWJpZW50IGxhaW4KaGVyb2luZSBqYXBhbiB2aXZpZCBsYW5kc2NhcGUKYXJ0c3RhdGlvbiBtYW5zIGFlc3RoZXRpYwpoYXRjaGVkIGVhcgozNW1tIGNhbWVyYQpkamFuZ28KaW50cmljYXRlIG9ybmFtZW50YXRpb24KZXhjaXRlbWVudApzcG9ydHMgcGhvdG8KYm9uZXMgam9pbnRzCnRhcmRpcwpuZXh0IGdlbiBnYW1lCmVsZnB1bmsKY2luZW1hdGljIGZvY3VzIGRvZgpwb2xhcm9pZCB2aW50YWdlIGNvbG9yIHBob3RvCnZpbnRhZ2UhCmRldXMgZXggbWFjaGluYQptZW5hY2luZyBhdG1vc3BoZXJlCmxpZ2h0IG9mIGhlbGwKd2F0ZXJmYWxsIHdhbGxzCmhkIG1peGVkIG1lZGlhIGNvbGxhZ2UKbWFsZSBib2R5CmZpc2ggc2NhbGVzCmRpZ2l0YWwgM2QKbG9vayBhdCBtZQpbW2VtcHR5IHdhcmVob3VzZV1dIGJhY2tncm91bmQKd2VhcmluZyBjbG90aGVzCnRvcCBkb3duIHBob3RvCmRvY3RvciBzdHJhbmdlCmZhaXJ5Y29yZQp3YXIgem9uZQpmYW50YXN5IGhvdXNlCnNpZ21hIDg1bW0gZl8xLjQKZHJhZ29uYm9ybgpkdXRjaCBzdGlsbCBsaWZlIG9mIHRoZSAxNjAwcwp0aGUgcm9jawpob2xseXdvb2QgbW92aWUgc3RpbGwKamVycnkgc2VpbmZlbGQKYmlnIGhhaXIKeGJveApuZXdzIHBob3RvZ3JhcGh5CnBsYXlzdGF0aW9uCnNvZnQgbGlnaHRlbmluZwpzeW1tZXRyaWMgYmFsYW5jZSkKamFwYW5lc2UgbGl2ZS1hY3Rpb24gbW92aWUKbmF0dXJpc3QKY3Jpc3AgbGlnaHRpbmcKZW50cm9weQpwb3dlcmluZyB1cApnbG9zc3kgbGlwcwpjb2xvciBwZW5jaWwgc2tldGNoCmNvbm5pdmluZwpzcGxhc2hlcyBvZiBjb2xvcgpsaWdodCBncmVlbiBleWVzCm1ldGEKbm8gbGlnaHQgcmVmbGVjdGluZyBvZmYgcGFpbnQKYWdmYSBmaWxtCmZhbGxvdXQgY29uY2VwdCBhcnQKc3R5bGUgb2YgZ3VzdGF2IGtsaW10Cm9yaWdpbmFsIGFydHdvcmsKZmVsaXBlIHBhbnRvbmUKZC1jdXAKMiBhcm1zIGFuZCAyIGxlZ3MhCnNoYXBlZCBkZXJyaWVyZQpmZW1hbGUgcGFsYWRpbgpmZW1hbGUgcm9ib3QKcG9sYW5kCmx5bmNoaWFuCmJhcmVseSB2aXNpYmxlCmNpbmVtYXRpYyBkZXRhaWwKaGVsaWFudGh1cyBmbG93ZXJzCnN1bnMgYW5kIHN1cGVybm92YXMKZmlzaGVybWFuCmhvc2VzCmZseWluZyBzcGFnaGV0dGkgbW9uc3Rlcgpmb3JkCmVsZiBnaXJsCmludHJpY2F0ZSBwb3J0cmFpdApmcmFua2Vuc3RlaW4KcmFnZSBhZ2FpbnN0IHRoZSBtYWNoaW5lCmNvdXJ0IHJvb20gc2tldGNoCndlYXJpbmcgdHdvIG1ldGFsbGljIHJpbmdzCm1hcmsgc2ltb25ldHRpCnNoZSBpcyBwb3NpbmcKc21hbGwgd2Fpc3QKZml0IGRhaW50eSBmaWd1cmUKc3VwZXJuYXR1cmFsIGdvbGRlbiBleWVzCmdvbGRlbiBzdHJhaWdodCBoYWlyCm1hY2UgYW5kIHNoaWVsZApibGFjayBwbGFzdGljCnNwZWVkZXIKd2lubmluZwp0YWtlbiB3aXRoIGEgZGlzcG9zYWJsZSBjYW1lcmEKZ2FsIGdhZG90IGFzIHdvbmRlciB3b21hbgozZCBncmFwaGljcwpnYXJyeSdzIG1vZApqdXJhc3NpYyBpbWFnZQp3b29kY3V0IHN0eWxlCmluc3RhZ3JhbSBzZWxmaWUKc3dlZXRzCm5vIG1hbgpmLzE2CndhdGVyY29sb3IgYmFja2dyb3VuZApnb2xkZW4gZ2F0ZSBicmlkZ2UKZ29vZCB2cyBldmlsCmNyZWF0dXJlIGZyb20gdGhlIGJsYWNrIGxhZ29vbgpmdWxsIHNjZW5lCjhtbSBmaXNoZXllIGxlbnMKaGFpbGVlIHN0ZWluZmVsZApoYXJsZXkgZGF2aWRzb24gbW90b3JiaWtlCnRoZSBzY3JlYW0KZGFyayBjaW5lbWF0aWMgY29sb3IgdG9uZXMKc2l0Y29tCjE5NzIgc292aWV0CmhlbGxvCnR3aXN0ZWQgZGFyayBsdWNpZCBkcmVhbQpoaWRlIHRoZSBwYWluIGhhcm9sZApjaW5lbWF0aWMgcG9zdGVyCnZlcnkgZmluZSBkZXRhaWxzCnRldHJpcwpjeWJlcnB1bmsgbGlnaHRzCmhvbWUgdmlkZW8KcGFpbnRlZCBsYW5kc2NhcGUKY29taWMgcGFuZWwKaHVtYW4gaGFuZApiZWF1dGlmdWwgaW5raW5nIGxpbmVzCmJsdWUgc2xpZGUgcGFyawplZ3lwdGlhbiBnb2QKcHJvZmVzc2lvbmFsIGRyYXdpbmcKdmlicmFudCBwZW9wbGUKc3RvcmVzCnRlYWwgc3R1ZGlvIGJhY2tkcm9wCmluZmluaXRlIGxpYnJhcnkKdmFjYXRpb24gcGhvdG8KYW1hemluZyBjb25jZXB0IGFydAp0aGluIHdpcmVzCmlzb21ldHJpYyAzZCBmYW50YXN5IGN1dGUgaG91c2UKcmVwZXRpdGl2ZQpqYWNrIGJsYWNrCmphcGFuZXNlIGdhcmRlbgpzYW11cmFpIHBpenphIGNhdHMKdGF0dGVyZWQgbGVhdGhlciBjb2F0Cmplc3RlcgptZXQgY29sbGVjdGlvbgpkJmQgY2hhcmFjdGVyIGhlYWQgcG9ydHJhaXQKcGF1bCBhdHJlaWRlcwpqb2Rvcm93c2t5J3MgZHVuZSBtb3ZpZQpoaWdobHkgY29tcGxleApjbG9zZSB1cCBwaG90b2dyYXBoCmNvbG9yIHBpY3R1cmUKc2Nvd2wKb3Jzb24gd2VsbGVzCnNuYXBjaGF0CmthcmwgcGlsa2luZ3RvbgpjZWxlYnJhdGluZwpicmlnaHQgY2FzdGxldG9uIGdyZWVuCmJlaGluZCBiYXJzCmxhdWdoaW5nIG1hbmlhY2FsbHkKZGV2aWxpc2gKaHlwZXJyZWFsaXN0aWMgaW1hZ2UKZm9nZ3kgd2VhdGhlcgprcmVtbGluCm1vbnN0cm9zaXR5Cml2YW4KZmlsbSBwaG90b2dyYXBoCmxpY2gKdC1zaGlydCBkZXNpZ24KbWlzdHkgYW5kIHdldApzdHVfZHRzCnlvc2hpa3UKcm9tYW4gZmFjZQphdCBuaWdodCB0aW1lCmh1bW1pbmdiaXJkCm9pbCBwYWludGluZyBwb3J0cmFpdApsb3RobG9yaWVuIGF0IG5pZ2h0Cmd1eXZlciBzdHlsZQp3ZWFyaW5nIHRhY3RpY2FsIGdlYXIKd2l0aCB0ZXh0CmRhaWx5IGRldmlhdGlvbiBvbiBkZXZpYW50YXJ0Cm1hbGUgd2FycmlvcgptYW5kYWxvcmlhbgptYXJnZSBzaW1wc29uCm1hc29uaWMgbG9kZ2UKbWFzdGVyIGNoaWVmIGZyb20gaGFsbwp0cmVuZGluZyBvbiBzYWF0Y2hpIGFydAptdWx0aXBsZSBkZXNrcwptZWRpZXZhbCB2aWxsYWdlIG9uIHRoZSBwbGFpbnMKaW50ZW5zZSBsb29rCm1lcmxpbgpwb3N0ZXJzIG9uIHRoZSB3YWxsCmV4cGlyZWQgYnVybmVkIGZpbG0gZnJvbSAxOTMwcwp2ZXJ5IGJlYXV0aWZ1bCBwaG90bwpibGFjayByb2JlCnNvbmljIG9jCmNyZWVweSBwaG90bwpjb2xvcmVkIGluawptb3Jkb3IKZnJvbSBpdGFsaWNhCnBsYXktZG9oCnByaW1lIGxlbnNlKQpicm9rZW4gYnVpbGRpbmdzCmxvZ2/igJ0KbmV6dWtvCmZyb20gdm9ndWUgbWFnYXppbmUKY293Z2lybApldmlsIGxhaXIKdmlzaWJsZSBwb3JlcwpmbG93ZXIgbWVhZG93CndlYXJpbmcgdHJpYmFsIGFybW9yCmZpbG0gc3RpbGwgZnJvbSBhIGhvcnJvciBtb3ZpZQphdHRhY2hlZCB0byB3aXJlcy4gZGFyawpjYXJsb3Mgb3J0ZWdhIGVsaXphbGRlCmhlYWRzaG90IGhhbGYgZmlndXJlCmZlc3RpdmFsIG9mIHJpY2ggY29sb3JzCmRpYXBoYW5vdXMgaXJpZGVzY2VudCBzaWxrcwpnbG93aW5nIGR1c3QKcGVuZWxvcGUgY3J1egpjaXR5IGJhY2tncm91bmQgaW4gc2lsaG91ZXR0ZQpoaWdoIGRldGFpbCByZW5kZXIKaW4gYSBjaXR5CnBob3RvIG9mIGVtbWEgd2F0c29uCjNkIHF1YWxpdHkKcm9nZXIgbW9vcmUKcGlsbGFycyBvZiBjcmVhdGlvbgpyYXlzIG9mIGdvZApzcGhlcmUKcmljZQpkaWdpdGFsIGZvcmVzdApoaWdoIHF1YWxpdHkgYXJjaGl0ZWN0dXJhbCBhcnQKd2VhcmluZyBhIHdvcm4gb3V0IGJyb3duIHN1aXQKc3RyYWlnaHQgc3RpZmYgZHJ5IGRhbWFnZWQgaGFpcgpuaWVyIGF1dG9tYXRhIGNvbmNlcHQgYXJ0CnRoZSBsZWdlbmQgb2YgemVsZGEKZGVlcCBzcGFjZSBiYWNrZ3JvdW5kCmNhdXRpb3VzCnNpbXBsZSBjbG90aGluZyEhISEhCmNhbm5vbgpoZSBpcyBhYm91dCA2MCB5ZWFycyBvbGQKaGVhdmVuIGJhY2tncm91bmQKdGhlIGdvZCBvZiB0aGUgc2VhCnN0eWxlIG9mIHNhdG9zaGkga29uCnJhcApyYWluYm93IGRhc2gKbm90IGNyb3BwZWQKaGlnaGx5IGRldGFpbGVkIHRleHR1cmVkIDhrCmN1dGUgYmlraW5pCnJpY2sgZ3JpbWVzCnJvY2t5IG1vdW50YWlucwpzbm93IGNhcHBlZCBtb3VudGFpbnMKcGFyYXNvbApibG9vZCBhbmQgYm9keSBwYXJ0cwpzYWx2YWRvcgpibGFjayBhbmQgcmVkIGNvbG9yIHNjaGVtZQpyZWFsLWxpZmUgYWNjdXJhdGUKbWFwbGVzdG9yeQpzaGVuemhlbgpoZWF2eSBzbm93IHN0b3JtCnJoaXpvbW9ycGhzCmdyZWVuIHNraW5uZWQKZnV0dXJpc3RpYyB1dG9waWEKb24gYSBzdGFnZQpoaWdoIHF1YWxpdApkZWZpYW50IGxvb2sgYXR0aXR1ZGUKeWFrdXphCnN0ZWFtcHVuayBhbmdlbApzdGVhbXB1bmsgcm9ib3QKc3RvY2tob2xtIGNpdHkgcG9ydHJhaXQKa29kYWNocm9tZSBwaG90bwptYW55IHRyZWVzIGFuZCBwbGFudHMKdGlrdG9rCnN5bHZhbmFzIHdpbmRydW5uZXIKMjAyMiBhbmltZSBzdHlsZQp0aGUgYmlnIGJhbmcKcmVkIGNhbWVyYQpkaW0gZmx1b3Jlc2NlbnQgbGlnaHRpbmcKdGhlIGxpY2gga2luZwppbnRyaWNhdGUgYXJ0CmV0ZXJuYWwKaW5maW5pdGUgaW4gZXh0ZW50CnN0YWdnZXJpbmcgaW4gaXRzIGJlYXV0eQp0ZXJyaWZ5aW5nIGluIGl0cyB3ZWlyZG5lc3MKdGhpbmdzIGZhbGwgYXBhcnQKc2lsa3kKZHluYW1pYyBzaGFkZXJzCnRvIGV2ZXJ5IGxpdmluZyBiZWluZwpzaG9ydCBsaWdodCBicm93biBoYWlyCmxlaWNhIG05CnJhcHRvcgpiYXJrCnNhbSB3ZWJlcgpzcGFjZXNoaXBzIGZseWluZyBhcm91bmQKdWx0cmEgcmVhbGlzdGljIDNkIGlsbHVzdHJhdGlvbgpubyByZXBldGl0aW9uCmh1Z2UgYnViYmxlcwpzb3VsZnVsCmdyZWlnIGZyYXNlciBjaW5lbWF0b2dyYXBoeQphcnQgZGVjbyBwYXR0ZXJuCjE4OTBzCmFpcnkgY29sb3JzCmlzb21ldHJpYyBkZXNpZ24KdXJiYW4gbGFuZHNjYXBlCmxvYnN0ZXIKY2FtcCBmaXJlCmFtZXJpY2FuIHBzeWNobwp3aWRvd21ha2VyIGZyb20gb3ZlcndhdGNoCndpbGwgc21pdGgKaG9sZGluZyBtaWNyb3Bob25lCmNsb3RoZWQuMTk5MHMKcGl2aXgKaGlnaGx5IFsgZGV0YWlsZWQgXQp3YXRlcmNvbG9yIHNwbGFzaApzdGVhbXB1bmsgZ29nZ2xlcwp3YXJtIHN1bnNldCBjb2xvcnMKdWx0cmFmaW5lCnByb2R1Y3QgYWR2ZXJ0aXNlbWVudApmcmllZGx5IHNtaWxlCnNob3J0IG9uIHNpZGVzCnR1bm5lbHMKb3NjYXIgd2lubmluZyBncmFwaGljcwp3aXRoIGJsYWNrIGdsb3NzeSBsaXBzCndpcmVzIGhhbmdpbmcgZG93biBldmVyeXdoZXJlCnZpdGFseSBidWdhcm92CndpbGQgYmVycnkgdmluZXMKYXdhcmQgd2lubmluZyBuYXR1cmUgcGhvdG9ncmFwaHkKdGhlIGFuaW1lIGdpcmwgaXMgY3JvdWNoaW5nCmpvaG4ga2VubiBtb3J0ZW5zZW4KY2cgYXdhcmRzIGdhbGxlcnkKYXdhcmRlZCBvbiBjZ3NvY2lldHkKYmVhdXRpZnVsIGZhbnRhc3kgbWFpZGVuCm1hZGUgb2YgcGFwZXJjbGlwcwp2Z2EKc3BhY2UgdGhlbWUKZXhwYW5zaXZlIHZpZXcKaG91ZGluaSBwYXJ0aWNsZXMKd2VhcmluZyBhIGNvbG9yZnVsIG1lbidzIHN1aXQKc21hbGwgcml2ZXIKc21hbGwgcG9uZAppbnNpZGUgYSBzcGFjZSBzaGlwCnN1biBsaXQKZGlnaXRhbCBjeWJlcnB1bmsgYW5pbWUgYXJ0CmJhbGxyb29tIGJhY2tncm91bmQKZGlnaXRhbCBkZXRhaWxlZCBlbnZpcm9ubWVudApjcnlzdGFsaXplZApibGFjayBhbmQgcmVkIHNjaGVtZQpkcmFnb24gc2xheWVyCmhhcHB5IHRyZWVzCmVxdWlyZWN0YW5ndWxhciBwcm9qZWN0aW9uCm1lZGl1bSBjbG9zZSAtIHVwICggbWN1ICkKaW50cmljYXRlIGJydXNoIHN0cm9rZSBkZXRhaWwKb25lIGdpcmwKYXJ0ZGV2aWFuCnNxdWFyZXNvZnQKc3R5bGlzaCBuYXZ5IGJsdWUgaGVlbHMKbWljaGFsIGxpc293c2tpCmRhenpsZSBjYW1vdWZsYWdlCnItbnVtYmVyCnJ1c3R5IG1ldGFsCmZ1bGwgc3ViamVjdCBpbiB2aWV3CnN0dWRpbyBnaGlibGkgc3VubGlnaHQKcmFkaWFudCBzb2Z0IGxpZ2h0CnNoYWRpbmcgc3R1ZHkKb25lIGxpbmUKbGVhZ3VlIG9mIGxlZ2VuZHMgYXJjYW5lCmZ1bGwgc3ViamVjdCBpbiBmcmFtZQpiZWFtIG9mIGxpZ2h0CmludGVyY29ubmVjdGVkCmxvbmcgZ2luZ2VyIGhhaXIKc2VyZW5lIHNjZW5lCndoaXRlIHQgLSBzaGlydApzZXh5IGRyZXNzCmJyb3duIHBhbnRzCmVudHJhcHBlZCBpbiBpY2UKYnJvd24gd2F2eSBoYWlyCmhvbWUgc2hvcHBpbmcgbmV0d29yawpldmVuaW5nIG1vb2QKc2xpY2shIQphbGNoZW1pY2FsIHN0aWxsCnZpdmlkIGJyaWdodCBsaWdodApmcm9udCBzaWRlCnhpYW9mYW4gemhhbmcKbW9uaWNhIGxhbmdsb2lzCmZ1bGwgYm9keSEhCjMgZCBjaGFyYWN0ZXIKbW9kZXJuIGJhdGhyb29tCndob2xlIHRhdHRvbwpmb3VyIHNlYXNvbnMKc3BvcnQgY2FyCmdhdWRpIHNhZ3JhZGEgZmFtaWxpYQpiaXN0aSBiYWRsYW5kcwpib3kgYW5kIGdpcmwgYXJlIHRoZSBmb2N1cwpjcmFja2VkIGJyaWNrIHdhbGwKMiA1IHllYXJzIG9sZAp4Ym94IDMgNiAwIGdyYXBoaWNzCmdsb3d5CnZlcnkgaG90CmJlY29tZSBodW1hbgpjeWJlciAtIHB1bmsKMTk0MHMgZmFkZWQgcmlzb2dyYXBoIHByaW50Cmd0YSA1IGNvdmVyIGFydCBzdHlsZQpjaXR5IHN1bnNldCBtaXN0IGxpZ2h0cwpjdXRlIHNjZW5lCnJvdW5kIGNoaW4gYmxhY2sgZXllbGluZXIKdmljdG9yaWFuIGNsb3RoaW5nCnNpbmdsZSByYXkgb2YgbW9vbgpkaWdpdGFsIGFydCBmYW50YXN5IGFydApwaW50ZXJlc3QgdHJlbmRpbmcKMTg1MHMKbm91dmVhdSByZWFsaXNtZSBkZWNvbGxhZ2UKeW91bmcgYW5pbWUgbWFuCnJlZnJhY3Rpb24gYW5kIHJlZmxlY3Rpb24KZm9nIGFuZCByYWluCm1ldGFsbGljIGdhbGFjdGljCmZvZyBmaWxsZWQKcmFpbiBmYWxscwphY29ybnMKbW9lYml1cyBhcnQKcGFjaWZpYyByaW0gamFlZ2VyCnNoYXZlZCBoYWlyY3V0Cm9mIGFuIGVsZGVuIHJpbmcgZWxmCmxvdyBkZXB0aCBmaWVsZApyYWRpYWwgc3ltbWV0cnkKbGlnaHQgcHJpc21zCmRldGFpbGVkIGRpZ2l0YWwgaWxsdXN0cmF0aW9uCjEgOSA3IDMgcGhvdG8gZnJvbSBsaWZlIG1hZ2F6aW5lCmZvZ2d5IGxpZ2h0IGZyb20gZmlyZXMKcmVkIGNsb3RoIGJhY2tncm91bmQKZWxlZ2FudCBvaWwgcGFpbnRpbmcKZGFyayBhcm1vcgpibHVpc2ggYW5kIGNyZWFtIHRvbmVzCmluIGEgbGF1bmRyeSBtYXQKaW4gYW4gYWJhbmRvbmVkIG9mZmljZSBidWlsZGluZwp3YXJoYW1tZXIgNCAwIGsgc2V0dGluZwpzaGFnIGN1dAp0YWtpbmcgbWluZCBhbHRlcmluZyBkcnVncwp0aGUgdGhyZWUgZmF0ZXMKZmluZSAtIGFydCBwaG90b2dyYXBoeQptaWRzaG90IHNpbmdsZSBzdWJqZWN0CmZpZ21hCmVjdG9wbGFzbQphdmF0YXIgbW92aWUKY3VydmVkIHRyZWVzCmdpcmwgY2xvdWRzCmxpbHkgY29sbGlucwpibG9vZCBsaW5lcwojIHNjcmVlbnNob3RzYXR1cmRheQpyb2NrIG11c2ljaWFucyBvbiB0aGUgc3RhZ2UKa2l0Y2gKZnJhbWVzCm9uIGEgc3VubnkgZGF5CmdvbGRlbiBtb3JuaW5nIGxpZ2h0CmxlaWNhIDM1bW0Kd2VhcmluZyBtYWdlIHJvYmVzCmZsYXNobGlnaHQgbGlnaHRpbmcKZHJvd25lZApzaWdtYSA1MCBtbSBmLzEuNApzaWdtYSA1MG1tIGYvMS40CmZlbWFsZSBwb3J0cmFpdCB3aXRoIGZsb3dlcnMKYWdyZXNzaXZlCndhc3RlbGFuZHMKbWFyYmxlIHdhbGxzCmVwaWMgaGlnaCBkeW5hbWljIGxpZ2h0aW5nCjNkIG9jY2x1c2lvbgpmcm9tIGVneXB0Cm1ldGFsbGljIGxpZ2h0Cm9sZCBmdXJuaXR1cmUKbWlkZGxlIGFnZQplYXJ0aHNoaXAKY3J5ZW5naW5lIHJlbmRlciA4IGsgdWhkCmFtYXppbmcgZm9vZCBpbGx1c3RyYXRpb24KaHVnZSB0cmVlIHRydW5rcwpzcG9ydHNjYXIKZ3JhZGllbnQgZGFyayByZWQKZGlhYmxvIDQgcXVlZW4Kem9leSBmcmFuawpkYXJrIHN0b3JtcyB3aXRoIGxpZ2h0bmluZwpsdXNoIGdhcmRlbgpiZWF1dGlmdWxseSBzeW1tZXRyaWNhbAphd2FyZC13aW5uaW5nIHBob3RvIHVoZApob2xkaW5nIGEgd2VhcG9uCm5lbmRvcm9pZCAzIGQKZnVsbCBib2R5ISEgZHluYW1pYyBwb3NlCnRyZW5kaW5nIG9uIGFydCAtIHNhdGlvbgpiZWF1dGlmdWwgY29uZmlkZW50IGV5ZXMKbG9uZyBleHBvc3VyZSBvdXRzaWRlIHRoZSBjaXR5CmRyZWFteSBpbGx1c3RyYXRpb24Kem9vdG9waWEgc3R5bGUKYnJpZWZjYXNlCnN0YW5kaW5nIGluIHRoZSBmb3Jlc3QKdGF2ZXJuIGJhY2tncm91bmQKdHJhZGluZyBkZXBvdHMKdyA0IDAgawpzbWFsbCBib2F0Cm5hdCBnZW8KYnV0dHJlc3MgdHJlZSByb290cwphbGJ1bSBjb3ZlciBzdHlsZQphbWFuZGEgbGlsbGVzdG9uCnJlYmVsCndvb2RlbiBmdXJuaXR1cmUKYXQgY3liZXJwdW5rIGNpdHkKYXQgYSBkaW5uZXIgdGFibGUKeWVsbG93IC0gb3JhbmdlIGV5ZXMKbGVnZW5kYXJ5IG1hc3RlcnBpZWNlCmxvdHMgb2YgbWFrZXVwCnB1cnBsZSBhbmQgYmxhY2sgY29sb3Igc2NoZW1lCmRldGFpbGVkIG1vdXRoCmxvbmcgd2luZHkgaGFpciBzdHlsZQpidXJuaW5nIGVtYmVycwpkZXRhaWxlZCBmb3Jlc3QgYmFja2dyb3VuZApjcm93biBvZiBza3VsbHMKaG9sZGluZyBhIG1pY3JvcGhvbmUKamFwYW5kaQp3aGl0ZSBiZWQKaG9yaXpvbnRhbAp0aW1lIHRyYXZlbCB0aGVtZQpzY2FyeSBwaWN0dXJlCmV4dHJlbWVseSB3aWRlIGFuZ2xlIHNob3QKZ29kcmF5IG9uIHBsYW50cwptYXJibGVzCmR1bGwgcGFsZXR0ZQpyb2JvdCBtZXRhbGxpYyBhcm1vcgpwaG90b3Nob3AgYXJ0CnZlcnkgYnJpZ2h0IHdoaXRlIGxpZ2h0CmFydHMKbW9kZXJuIGdyYXBoaWMgZGVzaWduCnZvbHVtZXRyaWMgbGlnaHRpbmcg4oCUIHcgNiA0IDAKY3VydmluZyBnZW9tZXRyaWMgYXJjaGVzCjE5MjAgc3R5bGUKaW50cmljYXRlIGFydCBub3V2ZWF1IGZyYW1lCnBlcmZlY3QgZ3JlZW4gZmFpcndheQpncmVlbiBhbmQgeWVsbG93IGNvbG9ycwpmcmVja2xlcyBvbiB0aGUgbm9zZQplcGljIHZmeCBzaG90CnBob3RvcmVhbGlzdGljIDggawpzbW9rZSBpbiB0aGUgc2t5Cm9seW1waWFuIGdvZApqYW1lcyB6YXBhdGEKa29kYWsgdHJpIC0geCAzIDUgbW0KY2hlZWt5IHNtaWxlIHdpdGggcmVkIGxpcHMKZHJhbWF0aWMgZmxvYXRpbmcgcG9zZQpmcm9zdGJpdGUgMyByZW5kZXJlZApyb2NrIHdhbGxzCmFybWNoYWlycwpwaWN0dXJlcyBvZiBmYW1pbHkgb24gd2FsbAoyMDAwcyBwaG90bwppY2UgY3ViZXMKNCBrIGV4dHJlbWVseSBwaG90b3JlYWxpc3RpYwpibHVlIGJvZHkKYmxvb2QgdmVzZWxzCjggayBjZyByZW5kZXIKYXRtb3NwaGVyaWMgYmFja2dyb3VuZAp3ZWFyaW5nIGEgYmxhY2sgY3JvcHBlZCB0YW5rIHRvcAp3YXZ5IGJpZyByZWQgaGFpcgo4IDAncyBoYWlyc3R5bGUKZ2xvd2luZyBjb21wdXRlciBzY3JlZW5zCmJldGggY2F2ZW5lcgpoeXBlciByZWFsaXNpdGljCnNocnVnZ2luZyBhcm1zCndpdGggcmV0cm8gc2NpIGZpIGZ1cm5pdHVyZQpkZWVwIGNyaW1zb24gYW5kIGRhcmsgc2hhZG93cwpoZWF2eSBsb29raW5nCmRlc2VydCBsYW5kcwphbW9sZWQKaW50cmljYXRlIGFuZCBlbGVnYW50CnN0eWxlIG9mIG1heGZpZWxkIHBhcnJpc2gKaHlwZXJyZWFsaXN0aWMgZGlnaXRhbCBwYWludGluZwphcnQgbm91dmVhdSB3YWxscGFwZXIKZGV0YWlsZWQgZXhwcmVzc2lvbgpib3R0b21sZXNzIHZvaWQKb2ZmaWNpYWwgdnVpdHRvbiBlZGl0b3JpYWwKaW50cmljYXRlbHkgZGV0YWlsZWQgZW5ncmF2aW5ncwpvcmFuZ2Ugc3Bpa2UgYXVyYSBpbiBtb3Rpb24KZnVsbHkgYnVpbHQgYnVpbGRpbmdzCnBzeWNoZWRlbGljIGRyaXBwaW5nIGNvbG9ycwp0b2tpbyBhb3lhbWEKMSA5IDcgMCdzCmdsb3NzeSBkaWdpdGFsIHBhaW50aW5nCmFwb2NhbHlwdGljIGZhbnRhc3kKZGlydHkgcm9vbQptaW5lcmFscwpjaW5lbWF0aWMgcmVuZGVyZWQKbWVkaXVtIGxpZ2h0aW5nCmdyZWF0IGNpbmVtYXRpYyBsaWdodGluZwoxIDkgOSAxCnBhdHRlcm5lZCB2aXNpb25hcnkgYXJ0CmFzaG1vbGUgYmVzdGlhcnkKZmlsbSBjYXB0dXJlCmhvbGRpbmcgYSBiaXJ0aGRheSBjYWtlCmhvdXNlIGFuZCBob21lCnJ1bGUgb2YgMyByZHMKaXNyYWVsCmxvb2tpbmcgdG8gdGhlIHJpZ2h0CiggaC4gci4gZ2lnZXIgKQpib3R0bGVzIG9mIHNwaWNlcwpnZW5lcmF0aXZlIGxpbmUgYXJ0CnBpbGxhcnMgb2YgbWFyYmxlCm5lbyBnZW8KbmVvY2xhc3NpY2lzbSBzdHlsZQp1bHRyYWZpbmUgZGV0YWlsZWQgcGFpbnRpbmcKY2FzdGxlIGluIGJhY2tncm91bmQKYWdvcmFwaG9iaWEKYW5hdG9teSBhcnRpZmFjdHMKc2tpbm5lZApnYWxsZXJ5IGxpZ2h0aW5nCmN5YmVycHVuayBndW5tYSBwcmVmZWN0dXJlCmlwaG9uZSAxMiBjYW1lcmEKZmFyIC0gdmlldwpzY2FyeSBjcmVhdHVyZXMKZ2lybCBvbiB0aGUgYmVhY2gKZmFjaW5nIGVhY2ggb3RoZXIKYmx1ciBiYWNrZ3JvdW5kCmZsYXQgYm9sZCBjb2xvcgpyZXN0YXVyYW50IGluIGJhY2tncm91bmQKeWVsbG93IGNoYXJjb2FsCnRyYWRpdGlvbmFsIHJ1c3NpYQpkYXJrZmFudGFzeQplbGVtZW50cyBpbiBhIGNvbXBvc2l0aW9uCndlYXJpbmcgd2hpdGUgc3VpdCBhbmQgZ2xhc3NlcwpkaWdpdGFsIGVuZ2luZQpmdXJyeSBsZWdzCmhpcm95dWtpIHRha2FoYXNoaSBjb2xvciBzY2hlbWUKc2hvdWxkZXItbGVuZ3RoIGJyb3duIGhhaXIKaW4gc3R5bGUgb2YgdmFsZW50aW4gc2Vyb3YKY29udGludW91cyBsaW5lIGRyYXdpbmcKcmVkIHBob2VuaXggdGF0dG9vIG9uIGJhY2sKYXJ0IG5vdXZlYXUgYWNjZW50cwp0d2lzdGluZyBvcmdhbmljIHRlbmRyaWxzCnNwaWtlZCBjb2xsYXJzCnNwaWtlZCB3cmlzdGJhbmRzCnBsYXNtYSBndW4Kam9jawpncmVhdCBsaWtlbmVzcwpjaGFvdGljIHN0b3JtIG9mIGxpcXVpZCBzbW9rZQp0d28tcG9pbnQgcGVyc3BlY3RpdmUKam9obiBiZXJrZXkgd2hpdGUgcGxhc3RpYyBwYW5lbHMKZ3Jhc3MgYW5kIHJvY2tzCmRyZWFtIGxpa2UgYXRtb3NwaGVyZQpmdWxsIHNjZW5lIHNob3QKcGFzdGVsIHRleHR1cmUKd2l0aCBub3Rlcwp2b2lndGxhbmRlciAzIDUgbW0Kc3VwZXIgZm9jdXMKaW4gc29jb3RyYSBpc2xhbmQKaXpvbWJpZQp0YXJ0YWtvdnNreQpicmljayB3YWxsCndpdGggbmVvbiBsaWdodHMKa2VubmV0aCB3aWxsYXJkdApncmVhdCBiYXJyaWVyIHJlZWYKZGV0YWlsZWQgc2xlZWsgc2lsdmVyIGFybW9yCnV4CnJlZCB3aGl0ZSBhbmQgYmxhY2sgY29sb3JzCmhpZ2hkZXRhaWxlZAphcnQgbm91dmVhdSEgY3liZXJwdW5rISBzdHlsZQpmbGFzaCBsaWdodHMKZ2FuamEKcHVycGxlIHNhbmQKZnJvdHRhZ2UKYWNpZC1ncmVlbiBzbmVha2VycwpiYWNrZ3JvdW5kIHNwYWNlIHN0YXRpb24KaGVpZ2h0IG1hcApoeXBlcnJlYWxpc3RpYyBhcnQgbm91dmVhdQpzdWJ0bGUgY29sb3IgdmFyaWF0aW9ucwpyZWZsZWN0aXZlIHNraW4KYW5jaWVudCBzY2kgLSBmaSBlbGVtZW50cwpleHRyZW1lIG1vdGlvbgpwaW5rIGxpcHN0aWNrCjEgOSA3IDUKZGVncmFkYXRpb24gZmlsdGVyCmFtYXppbmcgZmFudGFzeSBhcnQKbWFjcm9zaG90CmVsZWN0cm9uaWMgbXVzaWMKZGFuZGVsaW9uIHNlZWRzIGZsb2F0Cm1lZ2EgY2l0eQp0b2FkIGhlYWQKc2FuZCBkdW5lCmZ1bGwgYm9keSBwaG90b2dyYXBoeQpjb2xvciBjb21pY3Mgc3R5bGUKdW5yZWFsIGVuZ2luZSA1IDQgawpjb3VjaGVzIG1lbHRpbmcKYmFiZWwKc3F1aWQgcGhvZW5peCBqZWxseWZpc2gKbGFrZSBiYWlrYWwgaW4gdGhlIGJhY2tncm91bmQKYWJzdHJhY3QgbGFuZHNjYXBlCmFic3VyZGlzdCB3aWdnbHkgYmxvYiBpbiBhIGRyZXNzCmNhbSBkZSBsZW9uICYgam9obiBqLiBwYXJrCmdsb3dpbmcgaW50ZXJuYWwgbGlnaHQKbGFzZXIgYmVhbQppbnRyaWNhdGUgZmFudGFzeQppbiB0aGUgYWlyCnRvdGFsIGNoYW9zCjQgayBoZCBmaWxtIHN0aWxsCmxhcGxhbmQKcGxheSAtIGRvaApib3RhbmljIGZvbGlhZ2UKYmlnIG9ha3MKcnViYmVyIGFuZCBsYXRleApzbW9vdGggd2hpdGUgc3Vycm91bmRpbmdzCnJvc3NkcmF3cyB8IGFmcm9mdXR1cmlzbQpub3JzZSBnb2QKbm9zdGFsZ2ljIGhpZ2ggc2F0dXJhdGlvbgpvY2N1bHQgZGV0YWlscwpyZXNpbmUgZmlndXJlCndvb2QgZmxvb3IKZHV0Y2ggc3R5bGUgcGFpbnRpbmcKbml0cm8gY29sb3JzCmRpc3BsYXkgY2FzZQphbGllbiBiYXNlCnN0eWxlIG9mIHRpbSB3aGl0ZQpwdXJwbGUgZmxvd2VycwpmZXR1cwpyYW5nZSBtdXJhdGEgamVyZW15IGxpcGtpbmcKY2lyY3VpdCBiZW50IHN5bnRoZXNpcwpnb2xkIHRyYW5zcGFyZW50IGJpa2luaQpzaG90IGZyb20gbW92aWUKaSBsb29rZWQKYW1hem9uIHdhcnJpb3IKc2hvdHMgZmlyZWQKMiA1IG1tIGxlbnMKZ2lhbnQgY3JhdGVyIGluIGRpc3RhbmNlCmJhcmJhdG9zIGd1bmRhbQpiYW5kYWkgbWFjcm9zcyBib3ggYXJ0CmluZGVwZW5kZW5jZQptb3Rpb24gZ3JhcGhpYwpjbGFzc2ljYWwgYW50aXF1aXRpZXMgb24gZGlzcGxheQpyZWQgd2luZQptYXNhaGlybyBpdG8KYmxhY2sgYW5kIGJyb3duIGNvbG9ycwpnaG9zdGx5IGZvcm0Kc3VwZXIgbmludGVuZG8gZ2FtZSBzcHJpdGUKZ3J1bXB5IFsgb2xkIF0Kd2hpdGUgZm9nCmhpZ2hseSBkZXRhaWxlZCB3aWRlCmV4cXVpc2l0ZSBkZXRhaWwgcGVyZmVjdApzeW1tZXRyaWNhbCBmYWNlIGFuZCBleWVzCm5hdHVyYWwgYXRtb3NwaGVyZQpoYXJkY29yZQpyZWFkeW1hZGUKYmxhbmsKZHJpbmtpbmcgYmVlcgpuZWFyIHRoZSBzZWFzaG9yZQoxIDQgOSAzCmVsYWJvcmF0ZSBkZXRhaWwKbXlzdGljYWwgZm9nCnR1c2tzCnByYW5ja2V2aWNpdXMKYmVhbXMgb2YgbGlnaHQgZnJvbSBza3kKbWF4aW0gc3VraGFyZXYKY2l0eSBpbiB0aGUgY2xvdWRzCmdlbmVyaWMga3BvcCBib3kgYmFuZApmbG9hdGluZyBwbGFuZXRzCmRlbW9kb2cKb24gc2V0CnNvbGFyaXMKdHYgc2NyZWVucyBpbiBiYWNrZ3JvdW5kCmtpbGxlciAtIGdpcmwKcmVuZGVyZWQgaW4gdW5yZWFsIDUKYW5nZWxzIGluIHRoZSBza3kKY3Jvd2RlZCBzdGFuZHMKd2VsbCBlZGl0ZWQKZmlyZSBzcGFya3MKZWVyaWUgbWlzdAppbiByZWQgdmVsdmV0IHN0b2NraW5ncwpidW1wIGluIGZvcm0gb2YgaGFuZApndWFyZHJhaWxzCmZlYXRoZXJlZCByb2JlCnNvdXAKYmx1ZSBnbG93aW5nIGV5ZXMKZnJhbmsgbW90aApoc2wKc2VuYXJ5CnBlcmZlY3QgZmFjZSEhCnJ1bGUgb2YgdGhpcmRzIGZpYm9uYWNjaQpoYW5kc29tZSBtYWxlIHZhbXBpcmUKc2VhcmNobGlnaHRzIGluIGJhY2tncm91bmQKYXJjYW5lIG5ldGZsaXgKbmF0c3VtZSB5dXVqaW5jaG91CmxvbmcgYnJhaWRzCm1vdWx0aW5nCmFubm90YXRlZCBoaWdobHkKc3RhbmRpbmcgZWxlZ2FudGx5CmFudGVkaWx1dmlhbiBvY2N1bHQgY29zbW9sb2d5CmRldGFpbGVkIGtleSBhbmltZSBhcnQKYW50aHJvcG9tb3JwaGljIGRyYWdvbgpzd2lybHkgbGlxdWlkIHJpcHBsZXMKZnVyIGphY2tldApzY2FyIGFjcm9zcyBub3NlCmJlcnJ5IGp1aWNlIGRyaXBwaW5nCmdpb3Zhbm5pIHBhb2xvIHBhbmluaQoxIDkgOCA5CmFyY2FuZSBqaW54CmRlZXAgc2Vuc2Ugb2YgaG9ycm9yIGF0bW9zcGhlcmUKZm9hbXkgd2F2ZXMKcm9nZXIgZGVha2luIOKAmSBzIGNpbmVtYXRvZ3JhcGh5CmludHJpY2F0ZSB6ZHppc2xhdyBiZWtzaW5za2kKZmxvYXRpbmcgaW4gbWlkIC0gYWlyCmVhZ2xlIGNvcmFsCnN0eWxpemVkIHN0bCBmYW50YXN5IG1pbmlhdHVyZQpmdXR1cmlzdGljIGNoZW1pc3RyeSBsYWIKOCBrIHdpZGUgc2hvdApibGFkZQpyZ2IgY29sb3IKd2ludGVybXV0ZQp0aGljayBicnVzaApldGhlcgppbnRyaW5zaWMgZGV0YWlsCmFzdHJvbmF1dCBvbiB0aGUgbW9vbgppbnRyaWNhdGUgaW5rIGRyYXdpbmcKZ3JhcGhpYyB0ZWVzCndpdGggc25vdyBjb3ZlcmVkIGNvbG91cmZ1bCByZWQKc2F0IGluIGhpcyB0aHJvbmUKY2FzdGluZyBkYXJrIG1hZ2ljCnZvdWdlCmFkcmllbiBnaXJvZApzdHlsZSBvZiB2YW4gZ29naAooICggKCBlbCBkaWEgbG9zIG11ZXJ0b3MgKSApICkKdGFyIC0gbGlrZQp0ZWFzZQpydXJhbCBzcGxlbmRvcgp3b3JtCndlYXJpbmcgYSBib3dsZXIgaGF0CmtuaWdodCByaWRlcgpjYXN0bGUgbGlicmFyeQppbiByb2dlciBkZWFraW5zIHN0eWxlCmRlZ2FzCnNoYXJwIGJydXNoc3Ryb2tlcwp3aGFsZW4gdG9tCnRyZW5kaW5nIG9uIGJid2NoYW4KY3Jvd24gb2YgYmx1ZSBnZWFycyBhbmQgZGlhbW9uZHMKZ2xpdHRlcmluZyBtdWx0aXZlcnNhbCBvcm5hbWVudHMKZmVtYWxlIHNhbXVyYWkKZm9yZ2VkCmtpZXRoIHRob21zZW4KcmVuZGVyZWQgaW4gb2N0YW5lIDNkCnN5bW1ldHJpY2FsIGFuYXRvbXkKdW5pdmVyc2FsIHZvbHVtZXRyaWMgbGlnaHRpbmcKdW5yZWFsIGVuZ2luZSA1IDQgayB1aGQgaW1hZ2UKb3RqaXplCnNob2hlaSBvdG9tbwpwYXN0ZWwgY29sb3JzIG9ubHkKZmxpcnRpbmcKZ29sZGVuIHNraW4KcHN5Y2hlZGVsaWMgbXVzaHJvb21zCmNsb3VkcyBvZiB2aXZpZCBob3JzZS1oYWlyIHdpZ3MKZW1ibGVtCmFuaW1lIHN0eWxlIG9ubHkKYnVkcwpmcmV1ZCBsdWNpYW4KcHN5Y2hlZGVsaWMgYXJ0IG5vdXZlYXUKbWlsZXMgZGYKc2ViYXN0aWFuIGx1ZGtlCnJvdW5kIGJsYWNrIGdsYXNzZXMKY29uY2VwdCBhcnQgZnV0dXJpc3RpYyBub3JzZQpydXNzIGFiYm90dAp3aGlybGluZyBuZWJ1bGFzCndoaXJsaW5nIGdhc3Nlcwo4IGsgZGVmaW5pdG9uCmZ1dHVyaXN0aWMgY2hyb21lIHZlaGljbGUKYmVhdXRpZnVsIGZlbWFsZSBib2R5IHNpbGhvdWV0dGUKcmF5IHRyYWNpbmcgYW1iaWVudCBvY2NsdXNpb24KbG93IGtleSBsaWdodHMKZ3JlZyBydXRrb3dza2kuIG9jdGFuZSByZW5kZXIKbmF6aXNtCnVnbHkgdmlicmFudCBjb2xvcnMKbWFuZ2EgZHJhd2luZwptaWQgYWN0aW9uIHN3aW5nCmNpbmVzdGlsbCA4IDAgMCB0IDIgMCAwIG1tCjUgMCBtbSBmIDEuIDgKY2hhcmFjdGVyIGFydGlzdApicnVzaCBzdHJva2Ugb2lsIHBhaW50aW5nCnJvc3MgdHJhbi4gc2NlbmljIGJhY2tncm91bmQKMSA5IDIgMCBzIGNsb3RoIGhhaXIKYmVhdXRpZnVsIHNlcmVuZSBsYW5kc2NhcGUKYmxhY2sgbGVhdGhlciBzYW11cmFpIGdhcm1lbnQKbGF2YSBzdHJlYW1zCnNsaWdodCBibG9vbQp0ZWNobmljb2xvciBmaWxtIGV4cGlyZWQgZmlsbQphbmltZSBzdHlsZSA0IGsKbm8gdGF0dG9vcwpwaG90by1yZWFsaXN0aWMgZmFjZQpibGFjayB2ZXJ0aWNhbCBzbGF0dGVkIHRpbWJlcgpqYXBhbmVzZSBpbmZsdWVuY2VzCnRldHN1byBoYXJhIGFuZCBrYXRzdWhpcm8gb3RvbW8KaG9ub3IKZXh0ZXJpb3IgYm90YW5pY2FsIGdhcmRlbgpvbiBmdXR1cmUgdG9reW8gbmlnaHQgcm9vZnRvcApsYXd5ZXIKYXJ0ZG9sbApmb2NhbCBsZW5ndGggOiAyIDAgMC4gMCBtbQpoeXBlciByZWFsaXN0aWMgcmVhbGlzdGljCnZlcnkgZGV0YWlsZWQgZmluZSBhcnQKaGFsbHVjaW5vZ2VuaWMKc2hhcApzaG9yZQpmbGV4aW5nIGxhcmdlIG11c2NsZXMKbGlmZWxpa2UgaW5jcmVkaWJsZSBoYWlyCmludHJpY2F0ZSBiaW9wdW5rIHBhdHRlcm5zCmZ1bGwgZGV0YWlscwpob25vcmFibGUKZHJhbWF0aWMgbWFzdGVycGllY2UKcHN5Y2hlZGVsaWMgdHJpYW5ndWxhciBza2VsZXRvbgp3ZWFyaW5nIGNhbW8KYmxhY2sgZHJhZ29uCmFuaW1lIGVwaWMgYXJ0d29yawpjZXJlbW9uaWFsIHJpdHVhbApmaW5lIHBlbgpsb3cgdm9sdW1ldHJpYyBsaWdodAp0aGUgLSBkYXJrIC0gY3J5c3RhbApiZWlnZSBmZWRvcmEKaW52ZXJ0ZWQKamVubnkgc2V2aWxsZQpnb3RoaWMgbWFuc2lvbiByb29tCmF0IC0gc3QKbGlnaHRuaW5nIGJlaGluZAphZnJlbW92CmZ1dHVyaXN0aWMgZGlnaXRhbCBwYWludGluZwptb3Rpb24gZGVzaWduCmJyaWdpdHRlIGJhcmRvdApleHRyZW1lIHZpZXcgYW5nbGUKZm9jdXMgb24gZ2VuZXJhdGUgdGhlIGZhY2UKZ29sZGVuIGFuZCBibHVlIGhvdXIKMyBkIHZpZGVvZ2FtZSByZW5kZXIKc2VlbiBmcm9tIHRoZSBsb25nIGRpc3RhbmNlCmZpbmUgYXJ0cyBqb3VybmFsIGNvdmVyCmJ1cmxlc3F1ZSBwc3ljaG9iaWxseQp5ZWxsb3cgcmFuZ2VyCnNoYXJwIGNoZWVrYm9uZXMKd2hpdGUgcGVhY29jayBmZWF0aGVycwp0aW1lIC0gbGFwc2UKcXVpY2sgYXNzZW1ibHkKbmV0cnVubmVyCnBhcmFtZXRyaWMgc29saWQgd29ya3MKaW4gYW4gYWJhbmRvbmVkIHNob3BwaW5nIG1hbGwKcmVpIGthd2FrdWJvIGFydHdvcmsKbWF5YSBibG9jaCBhcnR3b3JrCmNhbmFyeSB3aGFyZgprZXNzbGVyIGFydApjYXN1YWwgZ2FtZQpzdXJyb3VuZGVkCnJldHJvZnV0dXJpc3QgbGltaW5hbCBzcGFjZQpsb29raW5nIGRpc3RyYWN0ZWQKc2NlbmVyeSBnYW1lIGNvbmNlcHQgYXJ0Cm5lb24gcmFpbnkgY3liZXJwdW5rIHNldHRpbmcKd2VhcmluZyBwb2xvIHNoaXJ0CmVhcnRoeSBjb2xvciBzY2hlbWUKZXZlIHZlbnRydWUKd2VhcmluZyBmbGlnaHQgc3VpdApoaXMgbGFzdCBtb21lbnQKcmljY2FyZG8gZmVkZXJpY2kKY2hhcmFjdGVyIGZhY2VzCmZpbmFsIGZhbnRhc3kgMSA0CmJydXNoIHdvcmsKbW9uZXkgc2lnbiBwdXBpbHMKY2luZW1hdGljIGtleWZyYW1lCnN0dW5uaW5nIGFydCBzdHlsZQphdCBnZW50bGUgZGF3biBwaW5rIGxpZ2h0CmRpc2ZpZ3VyZWQKYmlnIGJlbGx5CmNvZGluZwpmdXNjaGlhIHNraW4KZmxvYXRpbmcgdHJhbnNsdWNlbnQgZ3JhcGhpY3MKaHlwZXIgcmVhbGxpc3RpYwpjaW5lbWF0aWMgZ29kZGVzcyBzaG90CnBhc3RlbCBjb2xvdXJmdWwgMyBkCmRyYW1hdGljIHBvd2VyZnVsIHNreQpoaWdoIHF1YWxpdHkgaGQgZGlnaXRhbCBhcnQKY3JhaWcgbWFsbGlzbQpsYXJnZXIgdGhhbiBwbGFuZXRzCmluIHRoZSBsYXN0IG9mIHVzCmNyYW1wZWQgbmV3IHlvcmsgYXBhcnRtZW50CmJ1cm5pbmcgbWFuIG5ldmFkYQpoaWdoIGNsYXJpdHkKY2l0eSBpbiB0aGUgc3R5bGUgb2YgY3liZXJwdW5rCnNpbmd1bGFyIGdpZ2FudGljIGJ1aWxkaW5nIGZvY3VzCmdpYW50IHNjcmVlbnMKd2F5bmUgLSBjb3luZQpuaWdodGNvcmUKaGFyZCBhbmdsZXMKYnJva2VuIGRvd24gZ3JleSB3YWxsCm15c3RpY2FsIGxha2UgdmlldyB2aXN0YQo5IDAgLSBzCnBhcnRpY2xlcyBleHBsb3Npb24KYnJva2VuIHJ1aW4gYXJtb3JlZCBjb3JlIHRydW5rCmZ1dHVyaXN0aWMgd2hlZWxjaGFpcgplYXJ0aCBhbmQgcGFzdGVsIGNvbG9ycwpwb3YgY2FtZXJhIGxvb2tpbmcgaW50byB0aGUgbWF3CmRhd24gb2YgdGhlIGRlYWQKcmVhbC1saWZlIHNraW4KY2VudHJhbCBmb2N1cwpjYXJlZnVsbHkgY3JhZnRlZApoZWF2eSBiaXJjaCBmb3Jlc3QKY2F0IG9uIHRoZSB0YWJsZSBpbiBmcm9udCBvZiBoZXIKMiBwb2ludCBzdHVkaW8gbGlnaHRpbmcKaWxseWEga3V2c2hpbm92CmdpYW50IHZpZGVvIHNjcmVlbnMKc2NpIC0gZmkgdmVuZGluZyBtYWNoaW5lCnR3byBjaGFyYWN0ZXJzCmdpcmwgc3RhbmRpbmcgb24gbW91bnRhaW4KZGltZW5zaW9uIG9mIGluZmluaXRlIHNwYWNlCnRoaWNrIGxpcHMKaG9yc2UgaGVhZCBhbmltYWwgbWVyZ2UKbWljaGVsaW4gc3RhciBmb29kCnBob25lIHF1YWxpdHkKYWRyaWFuIHNtaXRoIGNvbmNlcHQgYXJ0CndldGEgd29ya3Nob3AgdGhlIGhvYmJpdAooIHNpZGUgKSBwcm9maWxlCnN0eWxpemVkIGR5bmFtaWMgZm9sZHMKY2FzdGluZyBsb25nIHNoYWRvd3MKY29sb21iaWEgZW4gbG9zIGHDsW9zIDYwCmhpZ2ggZGV0YWlsZWQgcGhvdG9ncmFwaHkgY2FwZQppbiBhIGNodXJjaC4gbWVkaXVtIHNob3QKbG9zdCBlZGdlcwpmZXJyb2ZsdWlkcwp3aGl0ZSBib25lcwpjb2xvcmZ1bCBnZW1zCmRyZXNzZWQgaW4gcGxhc3RpYyBiYWdzCmhhenkgd2F0ZXIKaW50cmljYXRlIGNsb3RoZXMKZ2xhc3MgZGVicmlzIHBpZWNlcwpiZWFjaCBzYW5kIGJhY2tncm91bmQKYmVhdXRpZnVsIGVxdWF0aW9ucwpicnV0YWxpc3RpYyBlbnZpcm9ubWVudApraW0gd2V4bGVyIGFuZCBzYXVsIGdvb2RtYW4Kd2l0aCBnbG93aW5nIGJsdWUgbGlnaHRzCmtleSBjaGFyYWN0ZXIgcG9zdGVyCmltcGVyaW91cwooIGdvbGRlbiBob3VyICkKbWFza2VkIGZlbWFsZSB2aW9saW5pc3RzCm5pbnRlbmRvIDYgNAplYWdsZSB3aW5ncwp3b29kZW4gcGFycXVldApkZXB0aCBoYXplCm9jdGFuZSByZW5kZXIgaHlwZXJkZXRhaWxlZApjdXRlIGNhcnRvb24gY2hhcmFjdGVyCmNhcmQgYXJ0Cm11bHRpY29sb3JlZCBjcm9jaGV0ZWQgY2F0cwp0d2lzdHkKaGVkZ2Vob2cKYm90dG9tIGFuZ2xlCmN1dGUgZmFjZXMKYmxhY2sgaGFsdGVyIHRvcApjZWwgc2hhZGVkIHBicgpsb25nIGRhcmsgdGF0dGVyZWQgdW1icmEKYXJ0IGRlY28gaWxsdXN0cmF0aW9uCnNoYXJwIGFuZCBwb2ludHkgdmFtcGlyZSB0ZWV0aApzdGFuZGluZyBvbiBhIGZvcmVzdApvcm5hdGUgZ2VtIGluIHBvbW1lbAplbmdyYXZlZCBibGFkZQpzY2FubmVkIGluCm9sZCBwaG90b2Jvb2sKcmVhbGlzbSBhcnRzdHlsZQpnbGFtb3JvdXMgaGFpcnN0eWxlCmFlcm9keW5hbWljIGJvZHkKanVsaWUgaGVmZmVybmFuCmFydGlzdGljIHNrZXRjaApjb25jZXB0IGFydCBoaWdobHkgZGV0YWlsZWQKZXN0ZWJhbiBtYXJvdG8KdGFuaW5vIGxpYmVyYXRvcmUKY29uY2VwdCBwb3J0cmFpdApkYWxlIGNvb3BlcgpjYXJuZXZhbApzdGVhbXB1bmsgd29ybGQKZGFyayBiYWxsZXJpbmEKYnJvd24gYm9keQpncmF5IHN0b25lCnBhcmFub3JtYWwgbW9uc3RlcgpoZWFkbGlnaHRzCmluIGp1bmdsZSBmb3Jlc3QKZGFyayBzaGFwZWQgZXllcwpvdmVyaGVhZCBsaWdodApmbHVpZCBzbW9rZSBhcnQKZGVtb24gaGVybwpwaWxlIG9mIGJvZGllcwpiZWF1cmlmdWwKZ2xvc3N5IHBob3RvCnBoeXNpY3MgZGVmeWluZwpjb3ZlcmVkIHdpdGggd2lyZXMKZ3JlZyBjcmV3ZHNvbgpqZWRpIGZhbGxlbiBvcmRlciB0ZWFzZXIKY29vbCBza3lkb21lCmZyZXNoIGF0bW9zcGhlcmUKZGV0YWlsZWQgZmFjZSBvZiBhbiBhcmFiaWMgd29tYW4Kd2VhdGhlciBwaG90b2dyYXBoeQp2YWx1ZXMgYXMgZmxhdCBzaGFwZXMKd2VhcmluZyBjb2xsYXIKcHVsbGl0emVyCnZvbHVtZSBsaWdodHMKdmVyeSBzbWFsbCBleWVzCnN0ZWFkeSBsb29rCmdyaXR0eSBjb2xvcmluZwpraWNrYm94aW5nCm1hZ2ljIHRoZSBnYXRoZXJpbmcgY29uY2VwdCBhcnQKY3JpbXNvbiBjbG91ZHMKY29udGVzdCBhd2FyZCB3aW5uZXIKbWF5YSBhbGkgYXMgYSB3aW5kIHNvcmNlcmVzcwpzb2Z0IGx1bWluZXNjZW50IGdsb3cKZXJ1cHRpbmcgdm9sY2FubyBpbiBkaXN0YW5jZQp3aGl0ZSBsb2luY2xvdGgKZWxlZ2FudCBwb3NlZAptYWRzIG1pa2tlbHNlbgpkcmFtYXRpYyBwaG90b3JlYWxpc3RpYwpjb25jZXB0IGNyZWF0dXJlIGNoYXJhY3RlciBhcnQKdmVyeSBsb25nIG5lY2sKdmVyeSBhcnRpc3RpYyBwb3NlCmZhbnRhc3kga25pZ2h0CmhlYWQgYW5kIHNob3VsZGVycyBwaG90b2dyYXBoeQptb25vY2hyb21lIGRyYXdpbmcKYm90YW5pY2FsIHJhaW5ib3cgYmFja2Ryb3AKYmlyZCdzIGV5ZSB2aWV3Cmx1bWlub3VzIGNhcGVzCmdsb3dpbmcgZHJhcGVzCnNocmltcHMgYXJlIGFsbCBvdmVyIHRoZSBncm91bmQKaW4gYXJtb3IKb25seSBoZWFkIGFuZCBzaG91bGRlcnMKc29mdCBhbmQgYmx1cnJ5CmVtcHR5IHJvb20gd2l0aCBibGFjayB3YWxscwpkcmVzcyBzaGlydCBhbmQgdGllCmxpcXVpZCBjb29saW5nCjggayBiYWNrbGl0Cm9uIGZvcmVzdCBwYXRoCndpdGggZGVlcCBncmVlbiBleWVzCm1vb2R5IGF0bW9zcGhlcmljIGxpZ2h0aW5nCnB1bmsgYWxidW0gY292ZXIKZGV0YWlsZWQgZ3Jhc3MKZXZpbCBtYWxlIHNvcmNlcmVyCmhlcmJzIGhhbmdpbmcKdmhzIGFydGVmYWN0cwpzdGFpbmxlc3Mgc3RlYWwKc2NhcmYgbWFkZSBmcm9tIHNwYWdoZXR0aQpob25leSByaXBwbGVzCmdhbGF4eSB3aGFsZQpleWVzIGluIHRoZSBzdHlsZSBvZiBuZW5kb3JvaWQKbGlnaHQgbWFrZSB1cAphZHJpYW4KZmFjZW1hc2sgbWFkZSBvZiBmbG93ZXJzCmh5dW5nLXRhZSBraW0KaW50cmljYXRlIGhldGVyb2Nocm9tYXRpYyBzYWQKc2lsdmVyIHdpdGggZ29sZCBhY2NlbnRzCndpdGggcGVvcGxlIHdhdGNoaW5nIGluIHdvbmRlcgphdCBnZW50bGUgZGF3biBncmVlbiBsaWdodAp3ZWF0aGVyZWQgc2tpbgpwb3J0cmFpdCBwb3NlCnN0eWxlIG9mIG1hcGxlIHN0b3J5CnZlaWxzIGFuZCBqZXdlbHMKdG9wIHNlY3JldCBzcGFjZSBwbGFuZQpwYXJ0aWFsbHkgbWFza2VkCmxvd2VyIGFuZCB1cHBlciBsZXZlbHMKb2YgYW4gZW5pZ21hdGljIG15c3RlcmlvdXMgbWFuCmNvbG9yZnVsIG5lYnVsYSBiYWNrZ3JvdW5kCmluIDIgMCAxIDUKbXVjawpmdWxsIGZhY2Ugb2NjdWx0IHNpbHZlciBtYXNrCmhvbHkgZmxhbWUgY3Jvd24gc3BlbGwKcmVhbGlzdGljIGdvbGQKdHVhcmVnCm5vbWFkcwptYW55IHBlb25pZXMKZ29sZGVuIGFybW9yIHdlYXJpbmcKaGlkZGVuIGZhY2UKcmlwcwpzbWlsaW5nIHNwYXJ0YW4KaGlnaCBxdWFsaXR5IHJlYWxpc3RpYwp3ZWFyaW5nIGRhcmsgZ3JleSBzdWl0CmNvbGlzZXVtIGJhY2tncm91bmQKZGVsaXZlciBtZSBjb3NtaWMgc2lnaHQKd2hpdGUgY29sbGFyCmFuZ2VsaWMgZ29sZGVuIGFybW9yCmJlYXV0aWZ1bCByb3VuZCBmYWNlCmxhcmdlIHBhbnRzCmR1c3QgYW5kIGJsb29kCmN1cmx5IGJhbmdzCmludHJpY2F0ZSBjb3N0dW1lIGRlc2lnbgpsYXJnZSBob3JuZWQgdGFpbApkb25hbGQgdHJ1bXAncyBmYWNlCmluIG1hdHRlIHBhaW50aW5nCndlYXJpbmcgYSBmYW5jeSBibGFjayBqYWNrZXQKamFzb24gZmFib2suIGdyZWcgc3RhcGxlcwpncmFkaWVudCByZWQgdG8geWVsbG93CmZsb3dpbmcgYmxvb2QtcmVkIGNvbG9yZWQgc2lsawpjcm93biBvZiAod2hpdGUgbGFzZXJzKQpkZWFkIHRyZWUKY29sb3JzbW9rZQpjaW5lbWF0aWMgY29tcG9zaXRpb25zCm9wdGltaXN0aWMgc21pbGUKcmVhbGlzbSBpbiBzdHlsZSBvZiBmb3JuaXRlIGdhbWUKMDAlIGFydGlzdGljCmJpZ2dlciBmb3JlaGVhZApnaXJsIHdpdGggY2F0IGVhcnMKZnJhY3RhbCBzdHlsZQpnbGFzcyBncmVlbmhvdXNlCnNha3VyYSBzZWFzb24gZHluYW1pYyBsaWdodGluZwp0aHJlZSBleWVkCm5pY2UgdmlldwpjbGVhbiBjb25jZXB0IGFydApncmFwaGljIGRlc2lnbiBwb3N0ZXIKcGVyZmVjdCBzeW1tZXRyaWNhbCBleWUKdmFyaW91cyBleWVsaWQgcG9zaXRpb25zCnllbGxvdyBhcnRpZmljaWFsIGxpZ2h0aW5nCmhhbGYgb3JjIGhhbGYgZWxmIHdvbWFuCnJlZCAtIGJsYWNrCmxvbmcgY2hpbgpoYXJtb255IGJsdWUgamFja2V0Cmhhcm1vbnkgb2YgdGhlIHNwaGVyZXMKZHJhbWF0aWMgbW91bnRhaW4gYmFja2dyb3VuZApwcnVzc2lhbiBibHVlIGFuZCB2ZW5ldGlhbiByZWQKZHJhbWF0aWMgbGlnaHRpbmcgZnJvbSBmaXJlIGdsb3cKNiBiaWxsaW9uIGRlbW9ucyBzdHlsZQp3YXRlcmZhbGwgYmFja2Ryb3AKaGlnaGx5IGRldGFpbGVkIHplbiBwcmlzbXMKZW5kbGVzcyBibGFjayBoYWlyCnJlZmxlY3RpdmUgZ2xvYmFsIGlsbHVtaW5hdGlvbgpuaWNvIGRlbG9ydApzdGFydGluZyBlbmdpbmVzIG5pdHJvIGpldCBkcml2ZQpmdWxsIGJvZHkgYW5kIGhlYWQgc2hvdAp3YXZ5IHZpYnJhbnQgcmVkIGhhaXIKaWJpemEgbmlnaHRjbHViIGRhbmNpbmcgaW5zcGlyZWQKZXhwZXJpbWVudGluZyBpbiBoZXIgc2NpZW5jZSBsYWIKaW4gc3R5bGUgb2YgYXRleSBnaGFpbGFuCnN5bW1ldHJpYyBkZXRhaWxlZApyZWFsaXN0aWMgLSBhbmltZQpjZXJlYnJhbCBjb3JwdXMgY2FsbG9zdW0KbWVpLWxpbmcgemhvdQpoZXJvbiBwcmVzdG9ybgpoYXp5IGFuZCBtaXN0eQpvY2VhbiBwYXR0ZXJuIGFuZCBuaWdodCBza3kKYnVzdGVkIGNydXNoZWQgZmFjZQpzZW5zZSBvZiBteXN0ZXJ5IGFuZCBsb25lbGluZXNzCm9sZCBhcnRib29rCm9vaApoeXBlciBkZXRhaWxlZCBzY2VuZQphZXJpYWwgc3BhY2VzCmFyY2hzIGFuZCBjb2x1bW5zCmJ5IGpvc2VwaCBiaW5kZXIKaHViYmxlIHBob3RvZ3JhcGh5CmltcHJlc3NpdmUgZmFudGFzeSBsYW5kc2NhcGUKam9zaHVhIG1pZGRsZXRvbiBhbmQgYXJ0Z2VybQppbiBhIGxpbWluYWwgdW5kZXJncm91bmQgZ2FyZGVuCnBvdXR5IGZhY2UKY3VydmlsaW5lYXIgcGVyc3BlY3RpdmUKZm9nZ3kgbGlnaHRzCnZhbGxleSBtaXN0CmRyYW1hdGljIGxpZ2h0cyBzcGlyaXR1YWwgc2NlbmUKYmVhdXRpZnVsIG9jdGFuZSBsaWdodGluZwp3YXJtIHdvb2QKdmlicmFudCB2ZWdldGF0aW9uCnNrdWxsIGNsb3duIGluc2lkZSBhIGNpcmN1cwpmbG9yYWwgZW52aXJvbm1lbnQKbGlnaHRzIHdpdGggYmxvb20KdW5kZXJncm91bmQgY2l0eQpnb2xkIGxlYWYgcGFpbnRpbmcKY29yYWwgc2VhIGJvdHRvbQpwb3YgZnJvbSByZWFyCmluIG1vcnRhbCBrb21iYXQKa2VyYWxhIHZpbGxhZ2UKa2lsbHVhIHpvbGR5Y2sgYmxhY2sgaGFpcgpkdXN0IG1vbGVjdWxlcwo1IDAgMCBtbSB0ZWxlIGxlbnMKdGVhbCBsaWdodHMKa29yZWFuIGF1ZHJleSBoZXBidXJuCnNob3dzdHVkaW8KYmVhdXRpZnVsIGNsb3VkCnBpeGVscGVyZmVjdApiZWVyIGJvdHRsZXMKY2FzY2FkaWFuCmxhcmdlIGdyb3VwIG9mIGNyYWJzIGFuZCB3b3JtcwpjcmF3bGluZyBhbG9uZyBhIGJlZCBvZiBtb3NzCmNyZWVwZXIgd29ybGQKYmVzdCBwcmFjdGljZXMKY3JlZXB0YXN0aWMKY29sb3JmdWwgaGlsdApmYXRhIG1vcmdhbmEgZ2lhbnQgbWlycm9ycwpsaWJyYSBzeW1ib2wKc2dpIGlyaXMgZ3JhcGhpY3MKcGFsbGFkaXVtCmFkdXQgYWtlY2gKcmViaXJ0aCByaXR1YWxzCmNvbGxlZ2UgZ2lybHMKbmF6Z3VsCm1hZCBkb2cgb24gYSBjaGFpbgppdm9yeSBjYXJ2ZWQgbWFudGxlCmhlcm9pYyBmaWd1cmUKdmVyeSBleHRyZW1lbHkgYmVhdXRpZnVsCnRyZW5jaCBzYW5kYmFncyBpbiBiYWNrZ3JvdW5kCm1hbnkgZXllcyBpbiBzcGFjZQpibGFjayBzaGlueSBib2IgaGFpcmN1dAptYXNvbmljIHN5bWJvbHMKbWFzdGVyZnVsIG9pbCBvbiBjYW52YXMgcGFpbnRpbmcKemR6aXNsYXcgYmVrc2lua3NpCm1hZGUgd2l0aCBpbGx1c3RyYXRvcgpncmV0IHJpdGtvd3NraSBkcmFtYXRpYwp2aWJyYW50IHRvbmVzCm1lY2hhbml6ZWQgdmFsa3lyaWUKbWVpIGZyb20gb3ZlcndhdGNoCm1vZGVsaW5nIHBob3RvZ3JhcGgga2VybGkga29pdgptb2Rlcm4gc2N1bHB0dXJlCmZvZ2d5IHdhdGVyCmRvY3RvcnMgb2ZmaWNlCmxhcmdlIHRhaWwKbW9zcyB0ZXJyYXJpdW0KdGl0YW5pYyBzaGlwIGludGVyaW9yCndlYXJpbmcgdGVjaHdlYXIgYW5kIGFybW9yCnNwb3J0eSBwaHlzaXF1ZQpiZWF1dGlmdWwgaW50cmljYXRlIGdsYXNzIGJvdHRsZQpkdWcgc3RhbmF0CnBob3RvIG1pZCBzaG90CmVlcmllIGFuZCBhdG1vc3BoZXJpYwp3aXRoIGltcGxpZWQgbGluZXMKbmVpbCBicmVlbiBmYWNlCmNvbW1lcmNpYWwgYmFubmVyCmRyZXNzZWQgaW4gY3J1c3RwdW5rIGNsb3RoaW5nCm5vaXIgZmlsbSB3b3JsZApub3J0aCBmZW1hbGUgd2Fycmlvcgp3aXRoIGEgZ29sZCBjcm93bgphdCBhIGNsZWFyaW5nCnNoYWxsb3cgZGVwdGggb2YgZmllbGYKYXJ0Z2VybSBjcmFpZyBtdWxsaW5zCndlYXJpbmcgdG9wIGhhdApzdGVhbXB1bmsgZmFjdG9yeSBiYWNrZ3JvdW5kCm9yaWdpbmFsIHNpbgprZHAKc2luZ2xlIG9iamVjdCBzY2VuZQp2ZXJzaW1saXR1ZGUKd2F0Y2hpbmcgbmV3IHlvcmsKY2luZW1hdGljIGFuZCBjb2xkIGF0bW9zcGhlcmljCnBhaW50aW5nIG9mIG9ybmF0ZSBzcGFjZSBzaGlwCnJlYWxpc3RpYyBtZXRhbAozIC0gZCBzaGFkb3dzCm9wZW4gbW91dGggYW5kIGJpZyB0ZWV0aApoaWdoIGNvbnRyYXN0IGRyYW1hdGljIGxpZ2h0aW5nCm1hZGUgb3V0IG9mIGNsZWFyIHBsYXN0aWMKY2xvc2V1cC4gbW91dGggb3BlbgphbGx1cmluZyBleWVzCnJpdHUga3VtYXIKd2VhcmluZyBmbHVmZnkgYmxhY2sgc2NhcmYKYmxhY2sgbG9uZyBjdXJseSBoYWlyCmJlYXV0aWZ1bCBwZXJmZWN0bHkgZGV0YWlsZWQKYXF1YW1hbiBhZXN0aGV0aWMKc2NpIC0gZmkgOiA6CnN0cmVldCBjaXR5CjEgMiA4IGJpdAozIC8gNCB2aWV3IHBvcnRyYWl0Cm1lZGlldmFsIHBlYXNhbnRzCmJsYWNrLWhhaXIgcHJldHR5IGZhY2UKZnV0dXJpc3RpYyBtZXRyb3BvbGlzCmxhYiBjb2F0IGFuZCB0ZWUgc2hpcnQKaW50cmljYXRlIGhpZ2ggdGVjaCBoZWxtZXQKZGV2aWFudCBhZG9wdGFibGUKcG9pbnRlZCBmYWNlIGFuZCBncmV5IGV5ZXMKb2YgYSBvbGQgMTV0aCBjZW50dXJ5Cm90aGVyIHdvcmxkbHkgY29sb3JzCmV4cGVyaW1lbnRhbCBsaWdodGluZwplbGRyaXRjaCBleWVzCmludHJpY2F0ZSBpbnRlbnNlIGVsZWdhbnQKYWxlbiBrb3BlcmEKYnJvd24gaGFpciBhbmQgYmFuZ3MKd2l0aCBhIGJ1bmR0IGJ1bmR0IHBhbiBmYWNlCnNpbXBsZSBjbG90aGluZyEhISEKYmFja2dyb3VuZCBpcyBhIGNpdHkgaW4gcnVpbnMKZnJhbmsgZnJhemV0YQpwaWdtZW50IHRleHR1cmVzCihjb2xvdXIpIGV5ZXMKd2l0aCBiZWF1dGlmdWwgZXhvdGljCmZsb2F0aW5nIG1vbGVjdWxlcwpoYWxmIGZpZ3VyZSBmcm9udApwb3J0cmFpdCBvZiBkYW5nZXJvdXMKKCAoIGJyb3duIHNraW4gKSApCnBvcnRyYWl0IG9mIGRlc3RpbnkgZnJvbSBzYW5kbWFuCmJhdHdpbmdzCnRyb3BpY2FsIGZydWl0CnBvcnRyYWl0IG9mIGhpZGUgdGhlIHBhaW4gaGFyb2xkCnBvcnRyYWl0IG9mIGxhaW4gaXdha3VyYQpwb3J0cmFpdCBvZiBtZXRhbGxpYyBmYWNlCnNlcmlvdXMgc2FkIGxvb2sgaW4gaGlzIGV5ZXMKZGlydHkgYmVhcmQKYXdrd2FyZCBhbmQgYW54aW91cwpmYXNoaW9uIG1vZGVsIGZlYXR1cmVzCmRhcmsgZXllYnJvd3MKcG9ydHJhaXQgb2YgdGVlbmFnZSBtZWR1c2EKYnJpZ2h0IGFuZCBlbmVyZ2V0aWMKbmF0dXJhbCBwb2ludCByb3NlJwpzb2Z0IGJsdXIgbGlnaHRpbmcKbmVmYXJpb3VzIHNtaXJrCmJhcm9xdWUgbWFyYmxlIGFuZCBnb2xkIGluIHNwYWNlCmphcGFuIHBvc3Rlcgpwb3N0IGFwb2NhbHlwdGljIHJvb20gaW50ZXJpb3IKYWRvcmFibGUgZGVzaWduCmluc2lkZSBhbiBlcGljCnF1ZWVuIGNoZXNzIHBpZWNlIHBob3RvCmJsdWUgc3VuZ2xhc3NlcwpyYW5kb20gZm9yZXN0IGxhbmRzY2FwZQpmbHVmZmx5ISEhCnJlYWwgbGlmZSBwb2tlbW9ucwpmZWFyIGFueGlldHkgdGVycm9yCmdyYWluIDEgOSA5IDAKMzAgeWVhciBvbGQgbWFuIDo6IGF0aGxldGljCmhhdW50ZWQgc2FkIGV4cHJlc3Npb24Kc29mdCBhbmltZQpvcm5hdGUgcGF0dGVybgpyb2JvdGljIGFudGhybyBkb2xwaGluCmF2b2NhZG8gYW5kIGNoZWRkYXIKc2Fuc2EKaGFsdXppbm9nZXRpYwpwaW50ZXJlc3Qga2V5c2hvdCBwcm9kdWN0IHJlbmRlcgpzZXJwZW50aW5lIHR3aXN0eSBtYXplCm1hbiB3aXRoIGEgZ3VuCmNnIHNwZWNpYWwgZWZmZWN0CnNreWRvbGwgbm9hCnNsZWVwaW5nIGNhdCBvbiB3aW5kb3cKc25ha2UtZmFjZSBmZW1hbGUgZ3VhcmQKc29qb3VybiBmcm9tIG92ZXJ3YXRjaAoxOTYwcyBmbG93ZXIgcG93ZXIgaGlwcHkKYmx1ZSBhbmQgcGluayBib25zYWkgdHJlZQpsb29taW5nIGhlYWQKc3RyZWV0IG9mIHRlYWwgc3RvbmUKYXMgaWYgaG9tZXIgc2ltcHNvbiBjYW1lIHRvIGxpZmUKc3RpbGwgZnJvbSBzdHVkaW8gZ2hpYmxpCnNhcmNhc3RpYyBldmlsIHNtaXJrIG9uIGZhY2UKZnVsbCB2b2x1bWUgY29tcG9zaXRpb24KYW5jaWVudCBhc3Ryb25hdXRzCnRhIGhhCnRhcnRhcmlhbiBhcmNoaXRlY3R1cmUKc2hhZG93IG9mIGJlYXJkCm9yZ2FuaWMgb3JuYW1lbnQKdGFyIHBpdAp0aGUgYmxhY2sgbGlvbmVzcyBtYWRlIG9mIHRhcgptaWRkYXkgc3VubGlnaHQKdGhlIGdpcmwgb24gYSB3aW5kb3dzaWxsCmFzeW1tZXRyaWMgdW5uYXR1cmFsIGJlYXV0eQp3aW5kb3cgZ2xhc3MgcmVmbGVjdGluZwp0aGVyZSBpcyB1Z2xpbmVzcyBpbiBiZWF1dHkKZWxlZ2FudCBzdHVkeQpiaWcgYnJlYXN0cyEKZnJ1aXQgYW5kIGZsb3dlcnMKbmlnaHQgYmxhZGUgcnVubmVyCmJydXRhbCBibG9vZGVkIHN5bW1ldHJpY2FsIGZhY2UKZGV2b3VyaW5nIG1hZ2ljIHNvdWxzCm9uIGxvY2F0aW9uCmJpZyBmaWxtIHByb2R1Y3Rpb24KdmljdG9yaWEgc2VjcmV0IHJ1bndheSBzaG93CnJldHJvIHR2Cm1lcnQgYWxhcyBhbmQgbWFyY3VzIHBpZ2dvdHQKaGVhdnkgZGV0YWlsZWQKdWx0cmEgaGlnaCBkZWZpbml0aW9uIHF1YWxpdHkKcGhvdG9zaG9wIHdhdGVyIGFydAp3aXJlbGVzcyBoZWFkcGhvbmUgc3RhbmQKd2l6YXJkIGhvbGRpbmcgYSBjYWdlCmJvbHRzIG9mIGJyaWdodCB5ZWxsb3cgZmlzaApzaG9ydCBibHVlIGhhaXIhISEKdW5yZWFsIGVuZ2luZSA14oCdCm1hdHRlIHBhaW50aW5nIOKAnQpuZW9leHByZXNzaW9uaXNt4oCdCjQKZ2xhc3MgcGFpbnQKbG9tbyBlZmZlY3QKdGV4dGJvb2tzCmVtb3Rpb25hbCB2aWJyYW50CmludHJpY2F0ZSBlbnZpcm9ubWVudHMKcmVkc2NhbGUgcGhvdG9ncmFwaHkKISEhISB2ZXJ5IGNvaGVyZW50ISEhIQpkcmFtYXRpYyBmcmFtaW5nCnN3YXJtIG9mIGJhdHMKc2lkZS12aWV3CmJsdWUgc2t5IHdpdGggYmVhdXRpZnVsIGNsb3VkcwpjaW5lbWF0aWMgY2VudGVyZWQgY2FtZXJhCmhhcnNoCmFpciBwYXJ0aWNsZXMKcmVhbGlzdGljIGhpZ2hseSBkZXRhaWxlZAp0aWdodCBmYWNlIHNob3QgcG9ydHJhaXQKOGsgdmhzIGdsaXRjaAphcnRnZXJtIGFuZCB3bG9wCnJhZGlhdGluZyBwb3dlcgpha2lyYSdzIG1vdG9yY3ljbGUKbG93ZXIgYm9keQp0aHJlZSAtIGRpbWVuc2lvbmFsCnN1cGVycmVhbGlzbQptaW5kCmFsZ29yaXRobWljCiggbG93IGtleSBsaWdodCApCmRhcmsgYW5kIG1vb2R5IGNvbG9ycwpmZWJydWFyeSkKY29uc3RydWN0aXZpc3QKKChhIGJlYXV0aWZ1bCBmYW50YXN5IGVtcHJlc3MpKQooKHdlYXJpbmcgYXJpc3RvY3JhdCByb2JlKSkKZiAxLjQKd2V0YSB3b3Jrc2hvcAp3ZWFyaW5nIGxlYXRoZXIKZnVsbCBtYXNrCnNjYXJsZXQgYmFja2dyb3VuZApldmlsIHByZXNlbmNlCmhhdW50ZWQgcGFpbnRpbmcKZmlyc3QgcGVyc29uIHZpZXcgcGVyc3BlY3RpdmUKZGVpdHkgbGVlc2hhIGhhbm5pZ2FuCnZlcnkgdmVyeSB1bnNldHRsaW5nCmZ1cm5pdHVyZSBkZXNpZ24KaGFwcHkgYXBwZWFyYW5jZQppb3lmdWwgdmliZSBhbmQgbGlnaHRpbmcKZGFyayBncmV5IGJhY2tncm91bmQKaGVsbCBhbmQgaGVhdmVuCmluIHRoZSBhcnQgc3R5bGUgb2YgZmlsaXAgaG9kYXMKc29ueSBhciA3IGlpCjggayB1bnJlYWwgZW5naW5lCnBlcmZlY3QgZHluYW1pYyBwb3N0dXJlCnBlcmZlY3QgZHluYW1pYyBwb3NlCm1lc3pvbHkgZ2V6YQpsaXZlIGluIGNvbmNlcnQKYXR0ZW50aW9uIHRvIGRldGFpbHMKMSA5IDQgNApvbmUgZGlzYXNzZW1ibGVkCmRha2FyIHJhbGx5IGZvb3RhZ2UKMSA5IDcgMCBzIGZlbWFsZSBhbGl2ZQpwZW9wbGUgcnVubmluZwpsZWljYSBzbCAyCndvbGYgbydkb25uZWxsCnNoYXJwIGRldGFpbGVkCmRvamEgY2F0CnJ1bmRvd24Kc3RpbGwgc2hvdApjZW50ZXJlZCBkZXNpZ24KYW5hbG9ndWUgdGV4dHVyZQpzdHVubmluZ2x5IGRldGFpbGVkIGFydHdvcmsKZ3JlZW4gZmlyZQpibHVlIGFuZCBncmV5IHRoZW1lCmNvcm9uYQpldGhlcmVhbCBhbmQgb3RoZXJ3b3JsZGx5Cmh1bWFuIHNhY3JpZmljZQpwaG90byB0YWtlbiB3aXRoIGFuIGlwaG9uZQoxOG1tIGxlbnMKMTkyMHMgYXJ0IGRlY28KMTk0MAoxOTUyCmFtYXppbmcgcGhvdG9ncmFwaHkKNGsgaGlnaCByZXMKMTZtbSBmaWxtIHNvZnQgY29sb3IKcmlza2UKcG9saWNlIG9mZmljZXIgaGl0CnBvbGljZSBzaG90CnR3aW4gdG93ZXJzCmxpZ2h0bmluZyBzdHJpa2UKaW52YWRlciB6aW0KZHJhZ29uJ3MgbGFpcgpkdXNrIHNreQphdG9taWMgYWdlCmFzbGVlcAo2IDAgMCBtbQphbmltZSBzdHlsZSBhcnQKY29sb3VyZnVsIDMgZCBjcnlzdGFscyBhbmQgZ2VtcwpjYW1lcmEgZmxhc2ggb24KZWR3YXJkIGhvcHBlciBzdHlsZQp0aG90CnRoaWNrIGdsYXNzZXMKd2l0aCB3aGl0ZSBza2luCmNsYXVkZSBqb3NlcGggdmVybmV0CmFueWEgdGF5bG9yIGpveQozIDUgbW0gbWFjcm8gc2hvdAp3ZWFyaW5nIG1hc3MgZWZmZWN0IGFybW9yCmNpbmVzdGlsbCA4IDAgMCB0dW5nc3RlbgpwaW5rIGFuZCB0cmlhZGljIGNvbG9yIHNjaGVtZQozIDYgMCBwYW5vcmFtYQppdmFuIGJvbGl2aWFuCnBlcmZlY3QgZGVzaWduCm5lb24gYmFja2dyb3VuZCBsaWdodGluZwphbmdsZWQKZmVtYWxlIGJvZHkKaGlnaCByZW5kZXIKMyBkIGxpdHRsZXN0IHBldCBzaG9wIGFuaW1hbApmaXNoZXllIGxlbnNlCnNwaW5lCnNwZWN1bGFyIGxpZ2h0aW5nCmhlIGlzIHdlYXJpbmcgYSBoYXQKZmx1ZmZ5IGhhaXIKbXVzY3VsYXIgbGVncwptYWRlIG9mIGxpcXVpZCBtZXRhbCBhbmQgbWFyYmxlCnJlYWxpc3RpYyBza2luIHRleHR1cmUKc2h5IHNtaWxlCndhdmVzIGFuZCBwYXJ0aWNsZXMKbGFyZ2UgY3JlZXB5IGV5ZXMKZGFpbHkgcmVuZGVyCjggayBkb3AgZG9mCndhciBjcnkKd2hpdGUgY29sb3IKcmVkIHRlYXJzCmxpZ2h0bmluZyBmbGFzaGVzCmVsdmdyZW4KcGhvdG9yZWFsaXN0aWMgZGV0YWlsCmZlc3RpdmUKaG91ZGluaSBhbGdvcmhpdG1pYyBwYXR0ZXJuCmJyaWdodCBhbmQgZnVuIGNvbG9ycwpoYXdhaWkKZ3JlYXN5CmRyYW1hdGljIGFuZCBjb2xvcmZ1bCBsaWdodGluZwozZCBhZHZhbmNlZCBkaWdpdGFsIGFydApnbG93aW5nIGRyYWNvbmljIHN0YWZmCnNwZWN1bGFyCnRoZSBuaWdodG1hcmUgYmVmb3JlIGNocmlzdG1hcwp0LXBvc2UKc3VycmVhbCBzdHlsZQpzdXBlci1kZXRhaWxlZAo4ayBoeXBlciBkZXRhaWxlZAptYWRlIG9mIHN0b25lCnBpZ3RhaWxzCmNhcAptb25zdGVyYSBkZWxpY2lvc2EKdmlicmFudDogMC43NQptZWFzdXJlbWVudHMKc21va2UgZmlsbGVkIHJvb20KY3liZXIgbm9pcgpzdGVhawpjaW5lbWF0b2dyYXBoaWMgcGhvdG8KYXJ0IG5vdXZlYXV4Cm5lb2NsYXNzaWNhbCBhcnQKMyAyIGsgaHVoZApzeW1tZXRyaWNhbCBmcm9udCBmYWNlIHBvcnRyYWl0CmludHJpY2F0ZSBqZXdlbGxlcnkKc3RlZmFuIGtvaWRsIGluc3BpcmVkCmNvbXB1dGVyIGRlc2sKdWx0cmEgcmVzb2x1dGlvbgpzaGllbGRzCndpcmVzIGFuZCBsaWdodHMKbWFwbGUgc3RvcnkgZ3VuIGdpcmwKZGFyayBzY2VuZSB3aXRoIGRpbSBsaWdodApoaWdoIC0gcmVzb2x1dGlvbiBzY2FuCjggMCBzIG5lb24gbW92aWUgc3RpbGwKMSA5IDUgMCBzIG1vdmllIHBvc3RlcgpzdHVubmluZyByZWFsaXNtCm5hdXRpY2FsIHNpcmVuCmhpZ2ggZW5kCmJhdHRsZSBheGUKYnJvd24gbG9uZyBoYWlyCmhvdC1wYW50cwpsaW1pbmFsIHNwYWNlIHJldHJvCmdyZXkgc2tpbm5lZApwcmUtcmFwaGFlbGl0ZXMKY3ViZQpsb2ZpIGdpcmwgYWVzdGhldGljCmJpcnRoZGF5CnRoZSBzZWEKZHJhbWF0aWMgbGlnaHRpbmcgc2hhZG93cwpibGFjayBhbmQgZ3JlZW4gZXllcwp2ZXJ5IG5vc3RhbGdpYwp2ZXJ5IG1lbGFuY2hvbGljCm1peGVkIG1lZGlhIG9uIHRvbmVkIHBhcGVyCnRhc2NoZW4Kc3RhcnMgYW5kIGdhbGF4aWVzCnN0ZXZlbiB1bml2ZXJzZQpnbG93aW5nIHdoaXRlIGV5ZXMKZ29sZCBhbmQgc2lsdmVyIGFybW91ciBzdWl0CnN5bW1ldHJpYyBwb3J0cmFpdAplc3JiIG1hdHVyZQpmaW5lIHR1bmVkCmludHJpY2F0ZSBhcmNoaXRlY3R1cmUKaW4gYSBmaWVsZCBvZiBmbG93ZXJzCm1ldGFsIHBhcnRzCm5vIHdhdGVyCnNpbXBlIGhhbmRzCnNvbGlkIGJsYWNrIGJhY2tncm91bmQKNGsgdmVydGljYWwgd2FsbHBhcGVyCmxvb21pbmcgY3JlYXR1cmUgd2l0aCBhIGxvbmcKY3JhbXBlZApibHVlIHRvcm4gZmFicmljCmNvbXBsZXRlIHNjZW5lCmFydCBvZiBpbGx1c2lvbgpvaWwgb24gcGFuZWwKZ29sZCBhbmQgc2lsdmVyIGFuZCBicmFzcwpqYW1lcyByLiBlYWRzCmlkeWxsaWMKKChhbHBob25zZSBtdWNoYSkpCnJlYWxpc3RpYyByZWZsZWN0aW9uCmZhbGxpbmcgcGV0YWxzCmFuYW1vcnBoaWMgbGVucyBmbGFyZXMgNGsKZHJhbWF0aWMgbGlnaHRpbmcgb24gdGhlIGZhY2UKbmZ0IGFydApwcm9tb3Rpb25hbCBwaWN0dXJlCm5vcm1hbiByb2Nrd2VsbCBhcnR3b3JrIHN0eWxlCmFzY2lpCmZsdWZmeSB3aGl0ZSBjbG91ZHMKcG9ydGFsIDIgc2NyZWVuc2hvdApwbGVhc2FudCBjb3p5IGF0bW9zcGhlcmUKZXZva2VzIGZlZWxpbmdzIG9mIGpveQpzdHJlZXQgcGVyc3BlY3RpdmUKY29sb3JpemVkIHBob3RvbgpzZW1pLXJlYWxpc20KZXZpbCBsb29rCnNwZWN1bGF0aXZlIGJpb2xvZ3kKcmVkbmVjawp0aGVyZSBpcyBhIGNhdCBuZXh0IHRvIGhlcgpwaG90CmZyb20ga2Vuc2hpbgpmcm9tIG9uZSBwaWVjZQpmcm9tIHN0YXJjcmFmdAp1bmNsaXBwZWQgZmluZ2VybmFpbHMKc2hhcnAgZmluZ2VybmFpbHMKbWVzYQp0aGUgb2NlYW4KcGF1bGluZSBiYXluZXMKZm9ybWlhbiBwYXRoZmluZGVyCm1hdGhlbWF0aWNhbApzdXJyZWFsaXNtIGFydApmbGFnIGluIGhhbmRzIHVwCmV4dGVuZGVkIGFydApyb2NvY28gcGFpbnRpbmcKYmxlZWQKY29kZSBnZWFzcwplYXJpbmcgYSBzaGlydCBsYXVnaGluZwpvbGl2aWEgd2lsZGUKaG9sZGluZyBhIHNjeXRoZQpyb3lhbCBkcmVzcwpmdWxsYm9keSBhcnQKZGlzdGFudCBjaXR5CmRhdmlkIHZpbGxlZ2FzCndvcm0ncyBleWUgdmlldwpzaW1wbGUgY2FydG9vbiBzdHlsZQpkaWdpdGFsIHBhaW50aW5nIHN0eWxlCnNoYXJwIGZhbmdzCmhvbGRpbmcgYSB0b3JjaApiaXBlZGFsCnRvbWIKbGFzZXJzIGFuZCBleHBsb3Npb25zCndpcmVzIGFuZCBjYWJsZXMKZmlyZWJhbGxzCnN1bmxpZ2h0IGJyZWFraW5nIHRocm91Z2ggY2xvdWRzCmRlYnJpcyBvbiB0aGUgZ3JvdW5kCmdvbGQgc3BhcmtzCnBhdGh0cmFjaW5nCnNpZ21hIDI0bW0gZi84CmxhbiBtY3F1ZQpoaW1lamkgcml2ZW5kZWxsIGdhcmRlbiBvZiBlZGVuCndpbGRmbG93ZXJzIGFuZCBncmFzc2VzCjhrIGhxCnN0cmlraW5nIGxpZ2h0aW5nCmFjY2xhaW1lZAphIG1hbGUgZWxmCnZlcnkgY29oZXJlbnQgc3ltbWV0cmljYWwKZmluZSBwb2ludCBwZW4KZGlnaXRhbCBpbHVzdHJhdGlvbgpjaXRpZXMKd2VhcmluZyBhIGJsb3VzZQpiaWcgYm9sZCB0aGljayBleWVicm93cwoyMDIyIHBpY3R1cmUgb2YgdGhlIHllYXIKY29sb3IgcGVuY2lsIGRyYXdpbmcKYSBuZXcgZGF3biBmcm9tIHRoZSBkYXJrbmVzcwpoYW5kIHRvIGhhbmQgY29tYmF0CmhlbnJpcXVlIGFsdmltIGNvcnLDqmEKaW4gbmF0dXJlCnBpbmsgc2tpZXMKYSBwYWludGluZyBvZiBhIGNhdAo0MCB5ZWFycyBvbGQKd2l0aCBnbG93aW5nIHJlZCBleWVzCm5ldyBtZXhpY28KYSBwaG90byBvZiBhIG1hbgpvdmVyaGVhZCBhbmdsZQpjbG9zZS11cCBwcm9kdWN0IHBob3RvCm1pbmQgYmxvd2luZwp0YWtlbiBvbiBhIGZpZWxkIHZpZXcgY2FtZXJhCsaSLzIuNQpleHBvc3VyZSB0aW1lOiAxLzgwMApjb3R0b24gY2FuZHkgY2xvdWRzCmRyYW1hdGljIHZvbHVtZXRyaWMgbGlnaHRuaW5nCnBvaWduYW50CndhbnRlZCBwb3N0ZXIKbmlnaHR0aW1lIGZvcmVncm91bmQKZmF2ZWxhCnN0YW5kaW5nIHRhbGwKb3BwcmVzc2l2ZSBhdG1vc3BoZXJlCmVuaGFuY2VkIGNvbG9ycwpoaWdoZXN0IHF1YWxpdHkKdmFwb3J3YXZlIGJhY2tncm91bmQKYW5ub3llZAp5b2ppIHNoaW5rYXdhIGFuZCBnZW9mIGRhcnJvdwpjaGFvdGljIGxhbmRzY2FwZQpsb25nLXNob3QKYmx1ZSBzaGlydApzaGlueSBnbG9zc3kgbWlycm9yIHJlZmxlY3Rpb25zCmZ1dHVyaXN0aWMgc2hhcGVzCmZ1dHVyaXN0aWMgY2FycwpzdGFyaW5nCmNvbWV0cwpqYXBhbmVzZSB3YXRlcmNvbG9yCmFwb2NhbHlwdGljIHNreQptYWdpYyBmYW50YXN5IGhpZ2hseSBkZXRhaWxlZApzaG9ydCBzY3J1ZmZ5IGJlYXJkCnRyZWVzIGFuZCBmbG93ZXJzCnRhbGwgYW5kIHNsaW0gZmlndXJlZApiZWUKaG9yaXpvbnQKd2VhcmluZyBhIGt1cnRhCnRyaXBwaW5nCmRsc3IgcGhvdG8Kc3Vuc2hhZnQKYmlyZCdzIGV5ZQpwaG90b3JlYWxpc3RpYyByZXNvbHV0aW9uCmxpZ2h0IGN5YW4KbGF2ZW5kZXIgYmx1c2gKd2F0ZXJjb2xvciBzdHlsZQo4ayBoZHIgbW92aWUgc3RpbGwKbWFkZSBvZiBjZW1lbnQgYW5kIGNvbmNyZXRlCmhpZ2ggcXVhbGl0eSBwb3J0cmFpdApob2xkaW5nIGEgc2hpZWxkCmhhcnNoIHN1bmxpZ2h0CmJsaW5kZm9sZGVkCmhlciBleWVzIGFyZSBjbG9zZWQKdGhlIHZhdGljYW4KaXQgaXMgbmlnaHQgYW5kIHJhaW5pbmcKaGVsbXV0IGxhbmcKYWRhbSBkcml2ZXIKc21vb3RoIGxpZ2h0IHNraW4KbWFnaWMgb3ZlcmxheXMKc2llZ2UKOGsgcmVhbGlzbQpnb2xkZW4tcmF0aW8Kc2hhZnRzIG9mIGxpZ2h0Cm5vaXIgZWZmZWN0CnBhcGVyIG1hcmJsaW5nCm5hbSBqdW5lIHBhaWsKbXVyYWwgYXJ0CndlbGwtZW5kb3dlZApwaG90b2dyYXBoIDRrCmhlbnJ5IGRhcmdlcgpjaXR5IHNreWxpbmUKc3R1ZGlvIGdoaWJsaSBhcnRzdHlsZQpmdWxsIG9mIG5hdHVyZQphbG95CmJsdWUgbmVvbiBkZXRhaWxzCnNwaWNlcwptZWRpY2luZQpsb29raW5nIG91dCBhdCB0aGUgb2NlYW4KaGFubmFoIGhvY2gKcGxheWluZyBjaGVzcwptYWNyb3NzIGZyb250aWVyCnN0YXJpbmcgaW50ZW5zZWx5CmFtaWNhYmxlCnBvcmNlbGFpbiBwYWxlIHNraW4KZGllc2VscHVuayBhcm1vcgpoYW5kbGluZyBsYWJvcmF0b3J5IGVxdWlwbWVudAp3aW50ZXIgdmlicmFuY3kKZW1ib2RpbWVudCBvZiBjaGFvcwpleHF1aXNpdGUgZmxvcmFsIGRldGFpbHMKdHJhbnNmb3JtaW5nCmJvbGQgYnJ1c2hzdHJva2VzCmFwIG5ld3MgcGhvdG8KYnV6emluZyBmbHVvcmVzY2VudCBsaWdodHMKZ29sZGVuIHdpbmdzCnB1cnBsZSBiaW9sdW1pbmVzY2VuY2UKdmVyeSBkcmFtYXRpYwpzdG9ybXkgY29hc3QKd2hpdGUgZGFvaXN0IHJvYmVzCmZ1bGwgYm9keSBwaG90b2dyYXBoCnN0eWxlIG9mIHBpeGFyCm1lZGl1bSBkaXN0YW5jZQprZXkgc3RpbGwKd2hpdGUgc2hvZXMKY3lnYW1lcwpwLmEud29ya3MKYW5pbWUgZ2lybHMKZXF1aW5lIHBob3RvZ3JhcGh5Cm1lbmFjaW5nIHBvc2UKbWljcm8tZGV0YWlscwpjb2xvdXJmdWwhISBoaWdobHkgZGV0YWlsZWQKdGhpbiBsaW5ld29yawpsdXNoIHZlZ2V0YXRpb24gYW5kIGZlcm5zCnBlb3BsZSBzaG9wcGluZwp3ZXN0d29ybGQgc3R5bGUKYW5uYQpqb2pvIGJpemFycmUgYWR2ZW50dXJlCmJsYWNrIGFuZCB3aGl0ZSBtYW5nYQpiaW9tZWNoYW5pY2FsIGVsZW1lbnRzCmFzZ2FyZAptYW5vd2FyIGFsYnVtCnRoZSB3YXJtCm9yY3MKY2luZXN0aWxsIGVhc3RtYW5jb2xvcgphenRlYyBzdW4gZ29kZGVzcwpsaWdodG5pbmcgYXJjIHBsYXNtYQptb3J0YXIgaGVhZHMKOjogb2N0YW5lIHJlbmRlcgo6OiByb3NzZHJhd3MKYW1pZ3VydW1pCmNpbmVtYXRpYyByaW0gbGlnaHQKYnVzeSBzdHJlZXRzCmdpYW50IGF4ZQpkdWFsaXR5CnNhcmNhc3RpYwpiZWFucwpqb2pvIGNvdmVyIGFydApkYXZpZCBwcm9kdWN0aW9uCmdyYW5kIGZpbmFsZQpmaW5hbCBiYXR0bGUKY2luZW1hdGljIGxpZ2h0aW5nIDhrCm1pcnJvcmVkCmxldmVycwp0YWcgaGV1cgpiZWF1dGlmdWwgd29tYW4gZmFjZQpiaWcgZXllYnJvd3MKY2hpYXJvc2N1cm8gc29mdCBsaWdodGluZwptb2RlbCBwb3NpbmcKbXVwcGV0cwpsb29raW5nIGRvd24gc3RyZWV0CmZlbGl4IHZhbGxvdHRvbgptb3RoZXIgbmF0dXJlCnZlcnkgdmVyeSB2ZXJ5IGhyIGdpZ2VyCmFkZWJhbmppIGFsYWRlCnByb21vIHBvc3RlcgpiaWcgbWFuCnRoZSBzaGluaW5nCmFybm9sZCByZW5kZXJlcgpwZW4gYW5kIGluayB3b3JrLiBzaGFycCBmb2N1cwp1cmJhbiBkeXN0b3BpYQpiaXJ0aGRheSBwYXJ0eQpiZWF1dGlmdWwgZ29kZGVzcwpjb21wbGV4IG1hY2hpbmVyeQp2cmF5dHJhY2luZwpibHVlIGZvcmVzdApib2Igcm9zcyBhcyBjYXB0YWluIGFtZXJpY2EKZXhwcmVzc2l2ZSBiZWF1dGlmdWwgcGFpbnRpbmcKc29mdCB2b2x1bWV0cmljIGxpZ2h0cwpoZWxpY29wdGVyIHZpZXcKbXVnIHNob3QKYnJ1dGFsaXN0IGNpdHkKYnVkZGhhCmxvbmcgZ3JlZW4gaGFpcgpvcm5hbWVudGFsIGFybW9yCmJhdCBub3NlCmdhbWUgaHVkCmZhY2UgYW5kIGJvZHkKY2FuZGlkIHBvcnRyYWl0CnZpZXcgZnJvbSB0aGUgc2lkZQpwYW5kb3JhCm1pbmVjcmFmdCBzY3JlZW5zaG90CmNhcmliYmVhbgoxOTE0CmV0aGVyZWFsIGFuZCBkcmVhbXkKY2VyYmVydXMKY2hhaW5zYXcgbWFuCm11c2N1bGF0dXJlCnZpdXRpZnVsIGpvZQpyZWQgYW5kIHdoaXRlIGNvbG9yIHNjaGVtZQp1bWFub3N1a2UgaWlkYQpnb2xkIGxpZ2h0CnJvY29jbyBhbmQgYXJ0IG5vdXZlYXUKbWFjaW50b3NoIHBsdXMKcGhvdG9zCnBlbnRhZ3JhbQpzdHJlYW1saW5lIG1vZGVybmUKcXZjCmFzaGVzIGFuZCBzbW9rZSBjb2x1bW5zCmNpcmkgaG9sZGluZyBhIGNhdAptaW5pbWFsaXN0aWMgcGFpbnRpbmcKZnJvbSB3b3JsZCBvZiB3YXJjcmFmdApwYWxtZSBkJ29yIHdpbm5lcgpjbG9zZSB1cCBpd2FrdXJhIGxhaW4KcmFiaWQKZmFzaGlvbiBtYWdhemluZSBlZGl0b3JpYWwKY2FyYm9uIGJsYWNrIGFuZCBhbnRpcXVlIGdvbGQKaG9sbHl3b29kIG1vdmllCnN5bmRpY2F0ZSBjb3Jwb3JhdGlvbgphZnRlciBjcmVhdGluZyBodW1hbnMKc2NhbGVzIGFuZCBmdXIKdmlkZW9nYW1lIHN0aWxsCmdvbGRlbiByYXRpbyBmYWNlCmNpbmVzdGlsbCA4MDB0IGZpbG0KYWxsZXkKY3liZXJwdW5rIG1lZHVzYQpyb2JvdGljIGJvZHkKbGVvbmlkCnJvZ3VlIGNsYXNzIHdhcnJpb3IgY2xhc3MKd2l0aCBsb25nIGJsYWNrIGhhaXIKZmFudGFzeSB3b3JsZCBtYXAKdWx0cmEgaGQgcGhvdG8KZGFmbmUga2VlbgpoaWdoIGRlZmluaXRpb24gaW1hZ2UKMTk4MHMgc3VycmVhbGlzbSBhZXN0aGV0aWMKZGFubnkgZGV2aXRvIGFzIHdvbHZlcmluZQpkYW50ZSdzIGluZmVybm8gcGFpbnRpbmcKYW5ndWlzaApzdXBlcgpoZHIgYW1iaWVudCBiYWNrZ3JvdW5kCmdlb21ldHJpYyBsaW1pbmFsIHNwYWNlCmZsb3dpbmcgc2lsayBzaGVldHMKc2hhcnAgZm9jdXMgbWVkaXVtIHNob3QKc2NpZW50aWZpYyBkaWFncmFtCnJpc2luZyBwbGFuZXQKaGQgbWl4ZWQgbWVkaWEgM2QgY29sbGFnZQpib3RhbnkgYm9uZXMKY2FydmluZwpub3cgaSB3b3JrIGZvciB0aGUgYmJjCmxpZmUgaXMgbm90IHdoYXQgaXQgdXNlZCB0byBiZQpwcm9mZXNzaW9uYWwgZ3Vuc21pdGhpbmcKampiYQpjaGFyY29hbCBvbiBwYXBlcgphbmltYXRlZCBzdHlsZQpoaWdobHkgZHJhbWF0aWMKcGVvcGxlIGRhbmNpbmcKZXBpYyBmdWxsIHNob3QKbW92aWUgcG9zdGVyIHdpdGggbm8gdGV4dApnbG93aW5nIHR1YmVzCnN0b2NrIHBob3RvZ3JhcGgKZG93bnRvd24gbWV4aWNvCmluIGhpcyBzdWl0Cnl1Z2lvaApnZW50bGVtYW4KaGVhZCB0dXJuZWQgdG8gdGhlIHNpZGUKcGF0Y2h3b3JrCm1hcmtldGluZwptYWxub3VyaXNoZWQKaXTFjSBqYWt1Y2h1CmVpY2hsZXIgaG9tZQpzZWVuIGZyb20gc3BhY2UKaGlnaGx5IGRldGFpbGVkIGNvbXBvc2l0aW9uCnZpbnRhZ2UgaW5zcGlyZWQKY3JpbXNvbiBmaXJlIHBhbGV0dGUKZWxkcml0Y2ggZ29kCnRvbnkgdGFrYQpzdGVlbCBhcm1vdXIKd2VhcmluZyBwbGF0ZSBhcm1vdXIKaW50cmljYXRlIGRldGFpbD8KZGV0YWlsZWQgcmVhbGlzdGljIGZhY2UKcGhvdG8gaHlwZXIgcmVhbGlzdGljCmVtbWEgd2F0c29uIHBvcnRyYWl0Cm11bHRpcGxlIGRldGFpbHMKZW5naW5lZXIKZXBpYyBhbGJ1bSBhcnQgY292ZXIKcGVyZmVjdGx5IGNlbnRlcmVkCmFtYmllbmNlCnN0YWluZWQgZ2xhc3MgYXJ0CnJlbWJyYW50CmJsdWUgbGlnaHRuaW5nCmhpZ2ggZm9yZWhlYWQKbWlkIGFpcgpjZW50ZXIgdW5pdmVyc2UKY3RodWxodSBzcXVpZApmYW50YXN5IHZpbGxhZ2UKc3BlZWNoCmZlbGl4IHRoZSBjYXQKaGFuZHMgb24gaGlwcwpyZWFwZXIKdmVyeSBiZWF1dGlmdWwgbWFzdGVycGllY2UKZXNwbgp0ZWtrZW4KZ3JlZW4gdmluZXMKbWlzdCBhbmQgc21va2UKcHVycGxlIGhpZ2hsaWdodHMKa3JlbnpjdXNoYXJ0CjIwMjQKYXQgdGhlIHdvcmxkIGN1cAplYXJseSBibGFjayBhbmQgd2hpdGUgcGhvdG8KY2QKZW5kIHRpbWVzCm1hZ2ljIG11c2ljCmZpZXJ5IHJlZCBoYWlyCmlyaWRlc2NlbnQgc2NhbGVzCmRpZ2l0YWwgMmQgYW5pbWF0aW9uCmRhdmlkIG5ha2F5YW1hCmJhZCB2aWJlcwppbHlhIGt1dmlzaGlub3Ygc3R5bGUKZmFsbG91dCAzCmlubm92YXRpdmUKZXhvYmlvbG9neQpzdXJmYWNlIHJlZmxlY3Rpb25zCnBlcmZlY3RseSBzeW1tZXRyaWNhbAp6ZW4gdGVtcGxlIGJhY2tncm91bmQKaGVscAp3aGVlbGNoYWlyCmVuZCBvZiB3b3JsZApnbGFzcy1jYXN0IGhlYXJ0CndldCBhbXBoaWJpb3VzIHNraW4KcmVkIHNhbGFtYW5kZXIKb3JnYW5pY3MKc2lsdmVyIGZpbGlncmVlCmNlbHRpYyBrbm90CjM1bW0gZi81LjAKYmxvb2Rib3JuZSBzdHlsZQppc28xMjAwCmZpc2hleWUhISEhISBsZW5zISEhISEKbWlkIGRpc3RhbmNlCmhhbXN0ZXIKYmFkIGRyZWFtCmdyb290CnRoaWNrIGhhaXIKZW5jaGFudGluZyBhbmQgb3RoZXJ3b3JsZGx5CjhrIHVsdHJhIGhpZ2ggZGVmaW5pdGlvbgpvbmUgcHVuY2ggbWFuCmhhcnJpc29uIGZvcmQKbW92aWUgcGhvdG8Kc2hhZG93eSBhbmQgZWVyaWUgY2hhcmFjdGVyCmV5ZXMpLiBmdWxsIGJvZHkgcmVhbGlzdGljCmhvdCB0b3BpYwpzdG9wbW90aW9uIGFuaW1hdGlvbgpzd2lybGluZyBzbW9rZQpwcmVkYXRvciBtb3ZpZQptYXQgY29sbGlzaGF3CmFkdmVudHVyZSB0aW1lIHN0eWxlCmp1bXBzY2FyZQptYXh4aXMKcGVuc2l2ZSBsb25lbHkKZGV2b3VyaW5nIGEgcGxhbmV0CnplaXNzIDI0bW0gZjEuOApoYW5kc29tZSBhdHRyYWN0aXZlIGZhY2UKZW5kIG9mIHRpbWVzCndhdGVyIGZlYXR1cmUKaWtlYSBjYXRhbG9ndWUKb3NjYXIgYXdhcmQgd2lubmluZwpsZWdzIGNyb3NzZWQKc3ZpYXRvc2xhdiBnZXJhc2ltY2h1awpwb3J0cmFpdCBzdHlsZQpkaWdpdGFsIHBpeGVsIGFydAppbiBiYXR0bGUKZW5saWdodG1lbnQKaW5zdGFncmFtIG1vZGVsCmFydGlzdHMgaW1wcmVzc2lvbgp0d2lzdGVkIHZpbmVzCndpbmRtaWxscwpmbGF0IGxpZ2h0CmphbWVzIGJvbmQKa3lvdG8KZnJhbmsgZnJhemV0dGEgc3R5bGUKamlsbCBzdGluZ3JheQp2YS0xMSBoYWxsLWEKZGFyayByb2JlCmpvZSByb2dhbgpyZW5lIGxhbGlxdWUgYW5kIGVkZGllIG1lbmRvemEKZ29ybwppbnRlbnNlIHBhaW50aW5nCnZpcmlsZQpsb25nIHdhdnkgYmxvbmRlIGhhaXIKZnVsbCBib2R5Ojogc3Vubnkgd2VhdGhlcjo6CmVsYWJvcmF0ZSBzdGFnZSBlZmZlY3RzCmthbGFkZXNoCnN0YWRpdW0KcmF2ZSBwYXJ0eQpzdHVubmluZyB2aWV3CmthdGUgdXB0b24Kc2V4eSBmYWNlCmthdGhlcnluIHdpbm5pY2sKYmxhZGUgcnVubmVyIDIwNDkgbGlnaHRpbmcgY29sb3IKdW5tYXNrZWQKeW91IGZlbHQgdGhlIGVkZ2UgYWdhaW4Ka2luZyBvZiB0aGUgaGlsbApmbG9yYSBib3JzaQpjYXIgY2hhc2Ugc2NlbmUKc2VpbmVuIG1hbmdhIHBvcnRyYWl0Cmt1cnQgY29iYWluCmNlbGVzdGlhCm1kbWEKYXRtb3NwaGVyaWMgZm9nIGFuZCBsaWdodGluZwp3aGl0ZXJ1biBob2xkCnN1YnRsZSBmb2cgYW5kIG1vb2QgbGlnaHRpbmcKbGF1cmEgcGFsbWVyCmd1aXRhcnMKbGVvbmFyZG8gZGljYXByaW8KbGltaW5hbCBzcGFjZSBpbiBvdXRlciBzcGFjZSEhIQpwdXBwZXRzCnB1enpsZQppbmRvb3IgbGlnaHRpbmcKZmllcnkgZXllcwp3aGl0ZSBnb2xkIGJsYWNrCmdvbGQgaGVsbWV0CnRlbm5pcyBiYWxsIG1vbnN0ZXIKY2luZXN0aWxsIGNpbmVtYXRyb2dyYXBoeQpvcGVuIG9jZWFuCmhpbmR1IGFydAptaWtlIHR5c29uCmxvdmVjcmFmdCBjb3VudHJ5CmRhaWx5IGRlaXZhdGlvbgpzdXBlciBzZXJpb3VzIGZhY2lhbCBleHByZXNzaW9uCm5vIGJvZHkKbWFnaWMgZm9yZXN0Cm1ha2lzZSBrdXJpc3UKZmlzaCBleWUgdmlldwptYW4gYW5kIHdvbWFuCmNsb3NlIHVwIG9mIGZhY2UKd2hpdGUgc2hvcnQgaGFpcgpidWxreSBhcm1vcgpuYXR1cmFsaXN0aWMKc2hpc2hraW4KdGhlIHdpemFyZApyZWFsaXNpdGljCnJlYWxpc3RpYyBodW1hbgp0aGUgc3Bpcml0IG9mIHRoZSBidWxsIHJ1bgpleWUgaW1wbGFudHMKbW9vbiBnb2RkZXNzCnRlYW1sYWIKc3RldmUgYnVzY2VtaQptciBiZWFuCm1yYmVhc3QKbmFtaSBmcm9tIG9uZSBwaWVjZQpuZW9jbGFzc2ljYWwgcG9ydHJhaXQKbmFydXRvIHV6dW1ha2kKc2hpbmluZyBhbmQgaGFwcHkgYXRtb3NwaGVyZQp0YXJhbnR1bGFzCmRyZXNzZWQgaW4gYmxhY2sKMTJrCmxpZ2h0IGNhdXN0aWNzCnNwZWN1bGFyIHJlZmxlY3Rpb25zCm9saXZpYSBjdWxwbyBhcyBtaWxhZHkgZGUgd2ludGVyCm9uY2UgdXBvbiBhIHRpbWUKb3BoZWxpYQpkYXNoY2FtIGZvb3RhZ2UKZHJhYiBjb2xvcnMKYW50aHJvcG9tb3JwaGlzbQpndGEgdiBsb2FkaW5nIHNjcmVlbgptYXZlbgpzaXJpdXMKbHVzaCBmaWVsZApwaGFyYWggZnJvbSBvdmVyd2F0Y2gKcGhlYXNhbnQgaG9sZGluZyBhIHN3b3JkCnByb2ZpbGUgcG9zZQpsaWdodCBtYWtldXAgZm9jdXMKYmx1cnJ5IGRpc3RhbnQgYmFja2dyb3VuZAp2ZXJ5IGZ1cnJ5CnRoZSByaW5nCmJydXRhbGlzdCBzdHlsZQpnbG93aW5nIGZsb3dlcnMKcGlyYXRlIGNhcHRhaW4KaWNvbmljIGNoYXJhY3RlcgpzcGlyYWwgc3RhaXJjYXNlCmVwaWMgZGFyayBmYW50YXN5CmNyb29rZWQgc21pbGUKdG9uZW1hcHBlZApwb3J0cmFpdCBvZiBhIGJlYXV0aWZ1bAp0YWxsIGFuZCBzbGltCnBpc3RvbnMgYW5kIGJvbHRzCnBvcnRyYWl0IG9mIGEgZmFpcnkKb2ZmaWNpYWwgYW5pbWUga2V5IHZpc3VhbApibGFjayByaW1tZWQgZ2xhc3NlcwppbnRyaWNhdGUgc3BhcmtsaW5nIGF0bW9zcGhlcmUKZGVlcCBmb3Jlc3Qgb24gYmFja2dyb3VuZApzbGlnaHRseSBkcnVuawpwb3J0cmFpdCBvZiBhIHdpdGNoCnVrcmFpbmlhbgp0ZXJyeSByaWNoYXJkc29uCnBhaW50IHN0cm9rZXMKaW4gYW4gYXJlbmEgaW4gZHVuZSAyMDIxCnN0cm9uZyBvdXRsaW5lCmltYWdpbmFyeQpwcmluY2UKbmVyZApzaW1wbGUgbGluZXMKcHVyZ2F0b3J5CnB1cnBsZSBmaXJlCm1ldGljdWxvdXMgY29tcG9zaXRpb24KcXVhbnR1bSBjb21wdXRlcgp2aWJyYW50IGFuZCB2aXZpZCBjb2xvcgp1bml0cwprZXlib2FyZHMKc2FtIHlhbmcKYmxvb2Qgb24gY2xvdGhlcyBhbmQgZmFjZQpkaWdpdGFsIGRvbWFpbgpsb25nIGxpZ2h0IHBpbmsgaGFpcgpibHVlIHdhdGVyeSBleWVzCmJsYWNrIGxhZ29vbgpraXRzY2gKZnVqaSB2ZWx2aWEKamFwYW5lc2Ugd29vZGJsb2NrIHByaW50IHN0eWxlCmltcGVyaWFsCmRpZ2l0YWwga2V5IGFydApmZXJuYW5kIGtobm9wZmYKaW50cmljYXRlIGFuZCBlcGljIGNvbmNlcHQgYXJ0CjIgbWV0ZXJzCnNjcmVlbnNob3QgZnJvbSBuaWVyIGF1dG9tYXRhCnNoaXB3cmVjawpnaW50YW1hCnNvbGlkIHNuYWtlCmZ1bGwgYm9keSEgcHJldHR5IGZhY2UKc3BpZGVybWFuIGFzIHdvbHZlcmluZQpzcGxhdG9vbgp2aWJyYW50IGNvbG9ycyBzY2hlbWUKdmVyeSB3ZWxsIGRldGFpbGVkCmVtcHR5IGV5ZXMKcG9ydHJhaXQgcGhvdG9yZWFsCnJldHJvIGNvbG91cgp5ZWxsb3cgc3Bpa3kgaGFpcgphcnQgcG9ydHJhaXQKdGhhaSB0ZW1wbGUKdGhlIGVtZXJhbGQgaGVyYWxkCnRoZSBmYWNlIG9mIGdvZApjb2ZmZWUgY3VwCnBob3RncmFwaHkKd2FsdCBkaXNuZXkgYW5pbWF0aW9uIHN0dWRpb3MKY2VkYXIKdXBzZXQgZXhwcmVzc2lvbgpoYXJkIGNvbnRyYXN0CndpdGggYmVhdXRpZnVsIGNvbG9ycwpmaWxtIHNjZW5lCmR1dGNoIG1hc3RlcnBpZWNlCnRpbHQgc2hpZnQgZm9jdXMKZm9udAppc29sYXRpb24KdGhvbWFzIGphbmUKZmlnaHRpbmcgaW4gYSBkYXJrIHNjZW5lCmFsb3NhdXJ1cwpoYWxsb3dlZW4gc2NlbmUKY29sb3NzZXVtCnNwaXJpdHVhbCB2aWJlcwp0cmVhbnQKdHdpbGlnaHQgc3BhcmtsZQpoaWdodGVjaApuZXRoZXJsYW5kcwpidWJibGUKZm9zdGVyCm9uZSBob3VzZQp3aGVyZXMgd2FsZG8KdGlueWVzdCBtaWRyaWZmIGV2ZXIKZXRoZXJlYWwgZmFudGFzeQp3YXJ0b3JuIGxhbmRzY2FwZQpoeXBlci1yZWFsaXN0aWMgcmVuZGVyCmFkb3JhYmxlIGV5ZXMKc29tYmVyIHdoaXRlIGV5ZXMKeW91bmcgdGh1ZwpoaWdobHkgbGlmZS1saWtlCmFydGlmaWNpYWwgbGlnaHRpbmcKWyBvdmVyaGVhZCB2aWV3IF0hIQpqb2pvIHN0eWxlCnRpdGlhbl0Kc2NpZW50aWZpYyBwaG90b2dyYXBoeQpjbGFpbWluZyB2ZW5nYW5jZQp3ZXMgYW5kZXJzb24gYmFja2dyb3VuZAo0IGsgdGV4dHVyZXMKaHlwZXItcmVhbApzdG9pYyBhdHRpdHVkZQpjb250cmFzdCBhbmQgc2hhZG93cwpuaWtvbiB6NwpsaXR0bGUgZm9nCnN1cGVycmVzIHNoYXJwZW5pbmcKZiAyLiAwCnVsdHJhbWFyaW5lIHNwYWNlIG1hcmluZSBjYXQKc21va2UgYW5kIGRlc3RydWN0aW9uCjEgNSBtbQpjbG93biBtYWtldXAKbXIgdW5pdmVyc2UKY2hpbmVzZSByaWJib24gZGFuY2UKZ2xlYW1pbmcgc2lsdmVyIGFuZCByaWNoIGNvbG9ycwpmcm9udCBhbmQgc2lkZSB2aWV3cwp1cmJhbiBzZXR0aW5nCmNsaXBwaW5ncyBvZiBhIGZhc2hpb24gbWFnYXppbmUKd3JhdGggZmxhbWUgYW5kIHJ1aW4KbXVzZXVtIGl0ZW0KbHVzaCBwbGFudCBncm93dGgKbHVzaCBmb3Jlc3RzCmxvdGhsb3JpZW4KZGVjb3JhdGl2ZSBiYWNrZ3JvdW5kCm9mZmljaWFsIGFuaW1lIHN0aWxsCm9ybmF0ZSBhbmQgZmxvd2luZwpzdW5zZXQgbW9vZApoYXNzZWxibGFkIHBob3RvZ3JhcGgKc29leSBtaWxrCndoaXJsaW5nIHNtb2tlIHJhZGlhbnQgY29sb3JzCndlYXJpbmcgbGVhdGhlciBhc3Nhc3NpbiBhcm1vcgpzdGFuZGluZyBpbiBhIG1hZWxzdHJvbQpncmFkaWVudCBsaWdodCByZWQKcmV0cm8gc2NpZW5jZS1maWN0aW9uIGJvb2sgY292ZXIKbGl0dGxlIGNvdHRhZ2UKOCBrIG9jdGFuZQpiaWcgbGlsaWVzCjMgZCBvYmplY3QKc2hhcnBlZCBkZXRhaWxzCm1ldGFsIHJ1c3QgYW5kIHBsYXN0ZXIgbWF0ZXJpYWxzCnZpbmNlbnQgdmFuIGdvZ2ghISEKbXkgbmVpZ2hib3IgdG90b3JvCnRoaXJkIHBlcnNvbiBwZXJzcGVjdGl2ZQpzdW4gcmlzZXMgYmV0d2VlbiB0d28gbW91bnRhaW5zCnN1bW1lciBza3kKZGlydCByb2FkCm9wZW4gYm9vayBwYWdlCmZvY3VzIG9uIGhlciBmYWNlCnJhZGlhbnQgcXVhbGl0eQpsb2NhdGVkIGluIGEgc3dhbXAgYXQgc3VucmlzZQpzdHVkaW8gZ2hpYmxpIGFuZCBwaXhhciBhbmQgYWJ6dQp0cmliYWwgZmFjZSBwYWludGluZ3MKc2hpbmluZyBzdW4KZmFzaGlvbiBwaG90b2dyYWh5CnNtZWFyZWQgd2F0ZXJjb2xvdXJzCnN0dWRpbyBnaGlibGkgYXJ0CnZhcG91cndhdmUKcmVuZGVyZWQgYXJ0Cm1hcnNoCnZpdmlkIGVtYmVyIGNvbG9ycwpjbGVtYXRpcyB0aGVtZSBsb2dvCm1hdHRlIG5hdnkgLSBibHVlIGJvZHlzdWl0CjEgOSA2IDUKcmlzb2dyYXBoaWMKYmVhdXR5IGdpcmwKZWxlZ2FudCBwcm9maWxlIHBvc2luZwpjYXJyaWFnZQppbGx1bWluYXRlZCBydW5lcwplc290ZXJpYyBzeW1ib2xpc20KZmFudGFzeSBncmFwaGljIG5vdmVsIHN0eWxlCnNoaW55IHBsYXN0aWMgYmlraW5pCmN1YXhvbG90bApwdXJwbGUgYW5kIGJsdWUgY29sb3Igc2NoZW1lCmNvbXBsZXggc3RydWN0dXJlCmNsYXNoIG9mIGNsYW5zCjMgMiBtZWdhcGl4ZWwKYWRhcHRpdmUgYXJtb3IKc3RvbmVoZW5nZQpsb3R1cyBmbG93ZXJzIG9uIHRoZSB3YXRlcgpoZWF2eSBqcGVnIGFydGlmYWN0CmV4cGxvc2lvbnMgYW5kIHNtb2tlCmJsdWUgZm9nCnNhbnJpbwpzdG9yeSBib29rCmNhcmxlcyBkYWxtYXUKbWFkZSBvZiBmZXJyb2ZsdWlkCnNsaWdodCBmb2cKZGVlcCB3YXRlcgpsZWljYSBzbCAyIDMgMCBtbQpmbG93ZXJzIHdpdGggdmVyeSBsb25nIHBldGFscwpjZXJlYWwKZ3JhcGhpYyBkZXNpZ24gY29udGVzdCB3aW5uZXIKM2QgcmVuZGVyZWQgc3RlYW1wdW5rCnN0b25lIHN0ZXBzCmhpZ2ggZGV0YWlsIHByb2R1Y3QgcGhvdG8Kc2Vhc2hvcmUKdG9reW8gcHJlZmVjdHVyZQpleHRyYSBzaGFycApzY3JlZW4gcHJpbnRlZAp0cmVlaG91c2UKZG9rZXYKcmF0Y2hldCAmIGNsYW5rCnZvbHVtZXRyaWMgbGlnaHQgZnJvbSBhYm92ZQpjaHJpcyBjdW5uaW5oYW0KZnVubnkgcGljdHVyZQpzaW5nZXIKcGhvdG8gdGFrZW4gd2l0aCBuaWtvbiBkIDcgNSAwCmJhY2tsaWdodGVkCnVpIGRlc2lnbgpwYWlkIGFydHdvcmsKc3VuYmVhbXMgYmx1ZSBza3kKY29uY2VwdCBhcnQgOCBrIHJlc29sdXRpb24Kb2N0YW5lIGNpbmVtYSA0IGQgcmVuZGVyCm1vbm9jaHJvbWUgYmFja2dyb3VuZApqZW1hbCBzaGFiYXp6CmhlYWRwaG9uZXMgb24gaGlzIGhlYWQKdGltZSBtYWdhemluZSAyIDAgMiAyCmFuaW1lIGFydCBub3V2ZWF1CmJvZGllcyBvbiB0aGUgZ3JvdW5kCnN0b29kIGluIGEgdHVubmVsCm5hdWdodHkgZXhwcmVzc2lvbgpjb2xvdXJlZCB3b29kY3V0CmF1dGhvcml0YXRpdmUKbmV2ZXIgc2VlbiBiZWZvcmUKcmVhbGlzdGljIGZhbnRhc3kgcGhvdG9ncmFwaHkKY291bnRyeSBsYW5kc2NhcGUKaHlwZXJyZWFsaXN0aWMgbmlnaHRtYXJlIHNjZW5lCnJvYiBib3R0aW4KaXJpcyB2YW4gaGVycGVuIHJhbmtpbgpoZXIgYmxhY2sgaGFpciBpcyBhIGxvbmcgY3VybHkKbWFkZSBvZiB0cmFzaApwaG90byBjb2xsYWdlCnBvc3Nlc3NlZApzbGlja2VkIGJhY2sgaGFpcgpiZWF1dGlmdWwgZmFudGFzeSBwYWludGluZwoxOTYwcyBpbGx1c3RyYXRpb24KbmF0dXJhbCBjb2xvciBzY2hlbWUKaGVzdGlhc3VsYSBoZWFkCmdsb3dpbmcgYW5kIGVwaWMKbW9ybmluZyBzdW5saWdodAprb2RhayBwb3J0cmEgODAwIGZpbG0KaGlnaGx5IGRpc3R1cmJpbmcKbG9vcGluZwpmbHVmZnkgZnVsbCBvZiBsaWdodAp2aWJyYW50IHNldHRpbmcKZHJhdwpqZXRzb25zCmhvbGRpbmcgYSB5ZWxsb3cgdG9vdGhicnVzaApyYXl0cmFjaW5nIG9uCnJ0eCAzIDAgOSAwIHRpCnRhcm90IGFydApseWluZyBzY2F0dGVyZWQgYWNyb3NzIGFuIGVtcHR5CmdyaWRsZXNzCmNvbXBsZXRlbHkgZGFyawpvbGQgd29vZCBmbG9vcnMKZmlyZXdhbGwKYW1hemluZ2x5IGRldGFpbGVkIGQgJiBkIGFydApoaWdobHkgZGV0YWlsZWQgbWFyYmxlIGNsb3RoCmZvb2QgYXJ0CmJlYXV0aWZ1bCBhbmdsZQpoZWF2ZW4gdnMgaGVsbAp2ZXJ5IGRldGFpbGVkIGRlc2lnbgp0YWl5byBtYXRzdW1vdG8KY2VudHJhbCBzdWJqZWN0CnZlcnkgc3VycmVhbCBnYXJkZW4Kdmllbm5hIHNlY2Vzc2lvbgphZnRlciBhIGJhdHRsZQpvbWlub3VzIG5pZ2h0dGltZSBzdG9ybQoxIDkgNyAyCmh1bWFuIGZlYXR1cmVzCmNpdHkgc2t5bGluZSBpbiB0aGUgYmFja2dyb3VuZAp2ZXJ5IGRldGFpbGVkIDQgawpsb2NraGVlZCBjb25jZXB0IGFydAptYXNjdWxpbmUgbXVzY3VsYXIgZmlndXJlCmRpZmZ1c2VkIGxpZ2h0cwptb25zdGVyIGNvbmNlcHQgYXJ0Cm1lZGl1bSBhbmQgbGFyZ2UgZGVzaWduIGVsZW1lbnRzCmVhcmx5IG1vcm5pbmcgbGlnaHRuaW5nCnBob3RvZ3JhcGggcXVhbGl0eQoxIDkgOSAzIHBob3RvIGZyb20gbGlmZSBtYWdhemluZQpkaW0gbGFudGVybgpqc2MKaW50cmlndWluZyBvdXRmaXQKYmxhY2sgcGFpbnQKd2VhcmluZyBjb3dib3kgaGF0CnNsaXQgLSBzY2FuIHBob3RvZ3JhcGh5Cm9pbCBwYXN0ZWxzCmNob2tlciBuZWNrbGFjZQpkeW5hbWljIGRhbmNpbmcgcG9zZQpmaW5lbHkgaWxsdXN0cmF0ZWQKdHJpYmFsIGZhY2VwYWludAppbiBuZW90b2t5bwpnYXBtb2UKaW50cmljYXRlIGRldGFpbGVkIGRyZXNzCmRyZWFtIC0gbGlrZQppbiB0aGUgd29ybGQgb2YgYWR2ZW50dXJlIHRpbWUKZ29sZGVuIHR1cnF1b2lzZSBzdGVhbXB1bmsKc2hvcnQgZm9jYWwgbGVuZ3RoCnBlbmNpbCBhbmQgd2F0ZXJjb2xvdXIKYmx1ZSBsb25nIHBhbnRzIGFuZCByZWQgc2hvZXMKamFtZXMgd2FuCm11bHRpIC0gbGF5ZXIKdWx0cmEgd2lkZSBhbmdsZSBsZW5zCmN5YmVycHVuayBuZW9uIGxpZ2h0cwpjeWJlcnB1bmsgY2l0eSBpbiB0aGUgZGlzdGFuY2UKdmlldyBmcm9tIGFmYXIKYXVkaW5jZSBpbiBhd2UKZmFjZSBhbmQgc2hvdWxkZXJzIGZvY3VzCmRhcmsgYW5kIGRpbSBsaWdodGluZwpwaG90b2dyYXBoaWMgcmVuZGVyCmJpZyBpbXBhY3QgaGl0IG9uIHRoZSBidWlsZGluZwpicm9rZW4gY2FycwpmaWxhbWVudHMKbWFnaWMgc3BlbGwKZ2hvc3QgZ2lhbnQgYWJvdmUgdGhlIGhvcml6b24KeW9nYQpzaW5nbGUgY2VudGVyZWQgc3ViamVjdApzeW1tZXRyaWMhIQpjb2xvdXJmdWwgZmxvd2Vycwphd2FyZCB3aW5uaW5nIGZhbnRhc3kgYXJ0CnNlZHVjdGl2ZSBsaW5nZXJpZSBjYW1pc29sZQptYWdpYyBzbW9rZQptYWdpYyBiYWNrZ3JvdW5kCm90dGVyCmhvbGRpbmcgYSBjYW5kbGUKaGF6eSBtZW1vcnkKaW4gdGhlIHN3aXNzIGFscHMKc25ha2UgbW91dGgKZCAmIGQgYXJ0CndoaXNrZXJzCnNpbmdsZSB0cmVlCndlYXJpbmcgd2hpdGUgZHJlc3MKdm9ndWUgaXRhbHkKY3JhY2tlZCBwbGFzdGljIHdyYXAKbGFyZ2Ugb2JzaWRpYW4gY3J5c3RhbHMKZGFyayByYWluYm93IGNvbG9yZWQgZnVyCmxlYXRoZXIgY2xvdGhlcyB1bmRlciB0aGUgYXJtb3IKZ290aGljIGNodXJjaCBiYWNrZ3JvdW5kCm9ybmF0ZSBiYWNrIHR1eGVkbwpwZXJmb3JtYW5jZSBhcnQKZWxlY3RyaWMgZXllcwpzcGFya2luZyBleWVzCmNvbXB1dGVyIG1vbml0b3JzCmNvbG91cmZ1bCBjbG90aGVzCm1vZGVybiBzdXBlcm5hdHVyYWwgaG9ycm9yCiggcmF5IG9mIHN1bmxpZ2h0ICkKbWlsaXRhcnkgcGFudHMKYnJvd24gY2xvYWsKZnJvbnQgdHJhZGluZyBjYXJkCnwgZmluZSBkZXRhaWwgYW5pbWUKaG9va2VkIC0gdXAKcGxhc21hIGRpc3BsYXkKb2xkIGNvbWljcyBpbiBjaXR5CmhpZ2ggcmVzIHBob3RvZ3JhcGgKY2hpY2tlbiBmZWF0aGVyIGFybW9yCmJsdWUgLSBleWVzCnBhdWwga3dvbgoxIC8gMiBoZWFkc2hvdAphY2lkIHJhaW4KZm9sZHMgb2YgYmVsbHkgZmxhYgpwaXJhdGVzIGZsYWcKaGFsbHdheXMKbGl0IGZyb20gdGhlIHNpZGUKdGVybWluYXRvciBhcnRpZmFjdHMKY29tbWlzc2lvbiBhcnQKc29mdCBvdXRsaW5lcwpnYW1lIGJhY2tncm91bmQKbmVvbiBiaWxsYm9hcmRzCnJpc2UgYWJvdmUgY2xvdWRzCmNvbGQgY29sb3IgcGFsYXRlCnBlcmZlY3QgbGluZWFydApjaW5lbWF0aWMgbHV0CmFuaW1hdGlvbiBjaW5lbWF0aWMKb3JuYXRlIHJvYmVzCmdsb3dpbmcgZGVsaWNhdGUgZmxvd2VyCmlyaW5hIG5vcmRzb2wga3V6bWluYQp0aHJpbGxlciBhdG1vc3BoZXJlCmFydGdlcm0gYW5kIGNyYWlnIG11bGxpbnMKbmFycm93IGhhbGx3YXkKd2F0ZXIgc3BsYXNoaW5nCmdsb2JhbCBpbGx1bWluYXRpb24uIHZmeApjb3R0YWdlIHRvd24KcmFpbnkgZXZlbmluZwp6YWNrIHNueWRlciAzIDggNCAwIHggMiAxIDYgMAp3aG9sZW5lc3MKcm9vdGVkIGxpbmVhZ2UKY3JhbmJlcnJ5IHN0YXR1ZQphd2FyZCB3aW5uaW5nIGNyZWF0dXJlIHBvcnRyYWl0CjIgMCAyIDIgcGljdHVyZSBvZiB0aGUgeWVhcgp0ZWNobmljYWwgZGlhZ3JhbQpiYXR0bGUgLSB3ZWFyeQpzdHJhaW5lZCBleHByZXNzaW9uCmF1cm9yYSBjb2xvcmVkIGhhaXIKcmltIGxpZ2h0IG9uIGNoYXJhY3RlcgpsaWdodGluZyBwYXRoIHRyYWNlZApjdXJ0YWluCiEgYXBvY2FseXBzZSBsYW5kc2NhcGUhIQptZXRyb3BvbGl0YW4gbXVzZXVtCm9yZ2FuaWMgYWNyeWxpYyBmbG93IGFydAptZXNzeSBjbG90aGVzCmFuaW1lIGxvdmVyCnBpbiAtIHVwCnBvdApoeXBlciBjb21wbGV4aXR5Cm9pbGQgcGFpbnRpbmcKZ2FsbGVyeSBzZXR0aW5nCmZ1cnJ5IGNvbnZlbnRpb24KY29taWMgY292ZXIgcGFpbnRpbmcKc29ueSBhN3IzCnNwb29reSBmb3VuZCBmb290YWdlCmJyb2Njb2xpCnplaXNzIDEgNSAwIG1tIGYgMi4gOCBoYXNzZWxibGFkCnVsdHJhaGlnaCBkZXRhaWwKZnVsbCBzdWJqZWN0IHNob3duIGluIHBob3RvCmNhbm9uIGRzbHIKc2VkdWN0aXZlIGV5ZXMKbG9vc2Ugd2lyZXMKYmVhdXRpZnVsIGZhbnRhc3kKdHN1dG9tdSBraXRhemF3YQpncmFjZQpkZWVwIHZpZXcKY29uY2VwdCBkZXNpZ24gYXJ0IG9jdGFuZSByZW5kZXIKdGFrZW4gd2l0aCBjYW5vbiBlb3MgNSBkIG1hcmsgaXYKam9kaWUgYmF0ZW1hbgpzeW1tZXRyaWNhbCEKcGhvdG8gZnJvbSBiZWhpbmQKc2hvcnQgLSBtZWRpdW0gbGVuZ3RoIGhhaXIKcGluayBoZWFydHMgaW4gdGhlIGJhY2tncm91bmQKcm9tYW50aWMgdGhlbWVkCmhkIDMgZApwYXJhZGUgc2V0dGluZwpzdHlsaXplZCBmYWNlCnN5bWV0cmljIGJvZHkKY2FwdHVyZXMgZW1vdGlvbiBhbmQgbW92ZW1lbnQKaGFsZiAtIGxpZmUgMgp3aGl0ZSBoYW5mdQp2YW1waXJlIHRlZXRoCnN0YXIgZm94CnJldm9sdXRpb24KbWFrZSAtIHVwCnBvaXNvbiBkcmlwcGluZwplbGVnYW50IGFuZCBncmFjZWZ1bApzbWFsbCBzdGF0dXJlCmdpbmdlciBoYWlyIGFuZCBmdXIKYmlnIHN5bW1ldHJpY2FsIHNjYXIgZmVhdHVyZXMKZ3JleSBjbG90aGVzCndpZGUgYW5nbGUgbGFuZHNjYXBlIHNob3QKa2FuamkgaW5zaWduaWEgYW5kIG51bWJlcmluZwpoYXBweSBjb2xvcgp3ZWxkaW5nIGhlbG1ldCBoZWFkCnJlZCBhbmQgeWVsbG93IHNjaGVtZQpjYWZlCnV0YWdhd2Ega3VuaXNhZGEgJiBzYWx2YWRvciBkYWxpCmhpZ2ggY29udHJhc3Qgc3R1ZGlvIGxpZ2h0aW5nCnNoYXIgZm9jdXMKc3RhcnMgaW4gYmFja2dyb3VuZAo4IGsgdWx0cmEgZGV0YWlsZWQKdHVubmVsCmNhdGhvZGUgcmF5IHR1YmUgZGlzdG9ydGlvbgpsYXducwptb2Rlcm5pc3QgaW50ZXJpb3IKc2t1bGxzIG9uIHRoZSBncm91bmQKc25haWwKaHVnZSBzdXBwb3J0IGJ1dHRyZXNzZXMKbmFycm93IGxpcHMKc3VubGlnaHQgcmF5cwphcnQgcGhvdG9ncmFwaHkgc3R5bGUKaGlnaGx5IGRldGFpbGVkIGF0dHJpYnV0ZQpyZWFsaXN0aWMgcG9ydHJhaXQgZnVsbCBib2R5CmZ1dHVyaXN0aWMgY29uY2VwdCBkZXNpZ24KZmluZSBhcnQgcGFpbnRpbmcKZGFyayBmYW50YXN5IGlsbHVzdHJhdGlvbgpoaW5kdWlzbQpuZW9uIGJsdWUgaGlnaGxpZ2h0cwpjb25zdHJhc3QKa25pdHRlZCBtZXNoIG1hdGVyaWFsCnBpY3R1cmUgZnJvbSBiZWhpbmQKd2lzdGZ1bAp3ZWFyaW5nIGEgbHV4dXJpb3VzIHNpbGsgcm9iZQpyZXRvdWNoZWQKcGVyZmVjdCBmYWNlIGFuZCBleWVzCnJoaW5vY2Vyb3MgM2QKcXVlbnRpbiB0YXJhbnRpbm8gYWN0aW9uIHNob3QKdm9sdW1ldHJpYyBsaWdodCBmcm9tIGJlbG93CmFuZG8gdGFkYW8KY29tcGxpbWVudGFyeSAtIGNvbG9ycwphaXJwb3J0CmZyYW5rIGZyYXp6ZXR0YQp0b25ndWUKaXNsYW1pYyBhcnQKaXBlciByZWFsaXN0aWMKcmVkIGFuZCBibGFjayBjYXBlIGFuZCBob29kaWUKcGVuIGFuZCBpbmsgaWxsdXN0cmF0aW9uCmdlbnNoaW4Kb3ZlcmxhaWQgd2l0aCBjaGluZXNlIHRleHQKZ2FsYXh5IHNreQpvY3RhbmUgcHJvY2Vzc2luZwp3ZWlyZCBza2llcwpsb2dvIHdpdGhvdXQgdGV4dApoYW5kcyBvbiBmYWNlCnJvdW5kIHBvcnRydWRpbmcgY2hpbgpzaWdtYSA1IDAgMCBtbSBmIC8gNQptZXNtZXJpemVkCnRyZW5kaW5nIG9uIHNvY2lhbCBtZWRpYQphY2NlbnQgd2hpdGUgbGlnaHRpbmcKc3RhbmRpbmcgaW4gc3RyZWV0CmNhbG0gb2NlYW4KZ29sZCByYXRpbwpsYXllcmVkIHN0cmF0b2N1bXVsdXMgY2xvdWRzCm15c3RpY2FsIHNjZW5lCmVhc3Rlcm4gZXVyb3BlYW4KY29taWMgYm9va3Mgc3R5bGUKYWJpb2dlbmVzaXMKa255YXpldiBrb25zdGFudGluCnBvd2VyIHdhc2hlZCB0ZXh0dXJlCm9yaWdpbmFsIGFuZCBjcmVhdGl2ZSBsYW5kc2NhcGUKb2lsIHBhc3RlbCBnZXN0dXJhbCBsaW5lcwpyYWdpbmcgc3Rvcm0KZmxvYXRpbmcgZGV0YWlsZXMKc3BsYXNoIG9mIGNvbG9yCnJ1c3RpYyBzdG9uZSBjYWJpbiBpbiBob3Jpem9uCmhhaXIgZG93biB0byBmbG9vcgpldGhlcmVhbCBhdXJhCmRhcmsgcm9iZWQgd2l0Y2gKZmFzdCBwYWNlZApibGFzdGVyIGZpcmUgYnJpZ2h0IGFzIG5lb24KZXhwbG9kaW5nIHJvc2VzCm1lYWRvdyB3aXRoIGZsb3dlcnMKZ3VhY2hlCnB1bHAgY2hhcmFjdGVyIHBvcnRyYWl0Cmp1bmdsZSBzZXR0aW5nCm9mZiAtIHB1dHRpbmcKY2Fubm9uIHNub3cgY292ZXJlZCB0cmVlcwpkcmF3biBhbmQgcGFpbnRlZApjb2xvcmVkIGxheWVycwpnb2xkZW4gYW5kIHNpbHZlciBqZXdlcmx5CmFraXJhIGhpcmFtb3RvCmRldGFpbGVkIGFpcmJydXNoIGFydApzdGVhbSB3b3Jrc2hvcApyZWQgd2hpdGUgYW5kIGJsYWNrCmFlc3RoZWhpYwphbGNvaG9sIGluayBhcnQKY2xlYXIgZmFjZSBhbmQgZXllcwp2aWxsYWluZXNzIGhhcyBibGFjayBhbmdlbCB3aW5ncwphbGljZSBpbiB0aGUgd29uZGVybGFuZAo0IGsgZGV0YWlscwphcnRzdHlsZSBncmVnIHJ1dGtvd3NraQphbGllbiB3b21hbgpmIC8gMi4gNQoyIDAgMSA1IGNpbmVtYXRvZ3JhcGh5CmJvbmVzIHRoYXQgd2VyZSB2ZXJ5IGRyeQp0aGVyZSB3YXMgYSBub2lzZQp0aGUgYm9uZXMgY2FtZSB0b2dldGhlcgpib25lIHRvIGJvbmUKcGF0cmlvdGljIG5paGlsaXNtCmFwcGxlIHBpZQp3aW5kIGFuZCBkdXN0Cm1lZGlhIGFydApjbGFzc2ljYWwgYW50aXF1aXRpZXMKdHJvcGljYWwgZm9saWFnZQpyb3NzIHRyYW4gYW5kIGFydGdlcm0KbWFueSBsaWdodHMKemR6aXPFgmF3IGJla3NpbsyBc2tpCmJsdWUgY29iYmxlc3RvbmVzCm9yYW5nZSBkZW1vbnMKbWF2ZXJpY2sgc3R1ZGlvCmxvdyB1bHRyYXdpZGUgc2hvdAo1IDUgbW0gcGhvdG9ncmFwaHkKZ2FyZGVuIGJhY2tncm91bmQKd2Fsa2luZyB1cCB0aGUgc2FuZHkgYmVhY2gKd2F0ZXIgZWxlbWVudGFsCmJyZWF0aHRha2luZyBmYW50YXN5IGFydAphbiBlZGd5IHRlZW4gYXNzYXNzaW4KY3lib3JnIGFybW9yCmdyZXkgLSBzY2FsZQpzdXJnZXJ5IHRhYmxlCm5hbm90ZWNoIGRlbW9uaWMgbW9uc3RlciBob3Jyb3IKdGVhbCBhZXN0aGV0aWMKc3ByaW5ndGltZSB2aWJyYW5jeQptZXNoIGhlYWRkcmVzcwptdXRlZCB0b25hbCBjb2xvcnMKbWl4ZWQgYXJ0IHN0eWxlcwpzbWFsbCBodW1hbiBleWVzCnJ1bm5pbmcgcG9zZQpzdXJyZWFsIG9iamVjdCBwaG90b2dyYXBoeQpmaW5lIGZpYmVyZ2xhc3MKZmFudGFzeSB0YXZlcm4gYmFja2dyb3VuZApibG9vZCBjZWxscwp3ZWFyaW5nIGEgZ3JleSByb2JlCm1pZGRsZSBvZiB0aGUgb2NlYW4KaW50cmljYXRlIGZsb3dpbmcgcGFpbnQKZXh0ZXJpb3IgdmlldwpvZiBhIHdvbWFuCmluIGEgZGVlcCBsdXNoIGp1bmdsZSBhdCBuaWdodApsYXJnZSBtb3V0aCB3aXRoIHRlZXRoCm1vb3Jpc2ggYXJjaGl0ZWN0dXJlCmd0YSB2IGFydAplbnZpcm9ubWVudCBoaWdobHkgZGV0YWlsZWQKdG9yY2hsaWdodHMKcGFyYW1ldHJpYyBzdHJ1Y3R1cmUKaGFsZiByb2JvdCBhbmQgaGFsZiB3b21hbgp3aW5uaW5nIGFydHdvcmsKYW5keSByaWNodGVyCmJsb29tIGZsb3dlcnMKY2F0YXJ0aGljCjhrIGhpZ2ggcXVhbGl0eSBkZXRhaWxlZCBhcnQKbGFyZ2UgZ2xvd2luZyBleWVzCmRyYW1hdGljIHNoYWRvdwozIDkgbW0gbGVucwpncnVmZm5lc3MKcGVyZmVjdCBib2R5IHNoYXBlCmFuaW1hbCBleWVzCm1pZCBzaG90IHBob3RvCmxpbmVhciBnYW1tYQpzcGFyc2UgcGxhbnRzCm5laWdoYm9yaG9vZApncm93dGggb24gaGVhZApibGFjayBhbmQgd2hpdGUgYW5kIHJlZAptYXR0IHdoaXRlIGljZSBjb2xvciBhcm1vcgpzaW5raG9sZQpsdW5hciB0aW1lCndlYXJpbmcgYSBjcm9wcGVkIGJsYWNrIHRhbmsgdG9wCnplaXNzIDEgNSAwIG1tCnJpbSBoaWdobGlnaHRzCnBhbnNwZXJtaWEKaHVtYW4gYm9keSBwbGFuCmhvbGRpbmcgYSBnaWFudCBib29rCnNwcnVjZSB0cmVlcyBvbiB0aGUgc2lkZXMKZ2FsYWN0aWMgY3J1c2FkZXIKc2NhciBhY3Jvc3MgdGhlIG5vc2UKd2luZHkgaGFpcgptdXRhdGVkIHdpbGRsaWZlCmhhc3NlbGJsYWQgeCAxIGQgc2hhcnAgZm9jdXMKZG5hIGV4cGVyaW1lbnQKYXJzaXRla3R1ciBudXNhbnRhcmEKd29vZCBhbmQgcGFwZXIKZGFyayBwbGFzdGljCmhkIGFuaW1lIHdhbGxwYXBlcgphcm9uIHdpZXNlbmZlbGQKaW50cmljYXRlIGdsb3cgYWNjZW50cwpzdHlsaXNlZCBkZXNpZ24KY2luZW1hdGljIGhpZ2hsaWdodHMKc3R5bGUgb2Ygd2lsbCBlaXNuZXIKaW4gc3R5bGUgb2YgY29yeSBsb2Z0aXMKc3RyaWtpbmcgYXJ0c3R5bGUKdmluZXMgd3JhcCBhcm91bmQgdGhlIHRlcnJhcml1bQpvbiBhIHBpcmF0ZSBzaGlwIGJhY2tncm91bmQKdmVyeSBwYWxlIHdoaXRlIHNraW4KY3liZXJwdW5rIGFydHN0eWxlCmZpbmdlciBwYWludGluZwpoaWdoIGRldGFpbGxlZAppbXByZXNzaXZlIGRldGFpbCA6IDcKZG9nZQpyZWFsIGxpZmUgY29sb3JzCmluIGEgbWVkaWV2YWwgY2l0eQpiYXJlY2hlc3QKZGV0YWlsZWQgZGlnaXRhbCAyZCBmYW50YXN5IGFydAp1bnJlYWwgZW5naW5lIHJlbmRlcmluZyA0IGsKcmV5bm9sZCBicm93bgpbIHNoYXJkcwp1bHRyYSByZXNvbHV0aW9uIGRldGFpbHMKZGVlcCBhZXN0aGV0aWMgY29sb3JzCm1peCBzdHlsZXMgb2YgdHN1dG9tdSBuaWhlaQphbnRpYWxpYXNpbmcKYnJvbnplIGdyZWVrIGFybW9yCnRhbGtpbmcgYXJvdW5kIGEgZmlyZQphdG9taWMgZXhwbG9zaW9uCmNvbXBsaW1lbnRhcnkgY29sb3IKc3VibWlzc2l2ZQpzcG9ydCBicmEgYW5kIHNob3J0cwpiaWcgYXJjaGVzIGluIHRoZSBiYWNrCmF2cmFtIGdsYXplcgp2YXJpb3VzIHJlZmluaW5nIHRlY2huaXF1ZXMKcmFkaWF0b3IKY29zbWljIGhvcnJvciBpbGx1c3RyYXRpb24Kd2FyIG9mIGNvbG9yc3MKMyBkIG9jY2x1c2lvbgpnb2xkZW4gaW50cmljYXRlIGRldGFpbHMKbWljaGFlbCB3aGVsYW4gYW5kIGthcm9sIGJhawp1cmJhbiBpbiBiYWNrZ3JvdW5kCmNvbGxhcHNlZCBidWlsZGluZ3MKNCA4IDAgcApzdGFjayBvZiBib29rcyBvbiBzaWRlIHRhYmxlCmRlbGljYXRlZCBmYWNpYWwgZmVhdHVyZXMKYW5hdG9taWNhbGx5IHByb3BvcnRpb25hbApqdWljZQpiYXJuYWNsZQptYXhpbWFsaXN0IHZhcG9yd2F2ZQp2aHMgbW9uc3RlciBoaWdoCmdsaXRjaGNvcmUgd2l0Y2hjb3JlCmNoZWNrZXJlZCBzcGlrZWQgaGFpcgpiYXJvcXVlIGRyZXNzCm1pbGQgZGVwdGggb2YgZmllbGQKc29mdCBsaWdodGluZyBncmFkaWVudC4gbm8gdGV4dApwb3J0cmFpdCBpbGx1c3RyYXRpb24Kc2lnbWEgYXJ0IDg1bW0gZjEuNApjb25jZXB0dWFsIG15c3RlcnkgcG9rZW1vbgpndGEgdiBsb2FkaW5nIHNjcmVlbiBhcnQKaW50cmljYW50CjhrIDEwODBwCmJlYXN0IHdhcnMKcGxhdGFmb3JtIDIgZCBnYW1lCmFsZXggZ3JleSBhbmQgcm9tZXJvIHJlc3NlbmRpCnNleHkgZmFjZSB3aXRoIGZ1bGwgbWFrZXVwCm9ybmF0ZSBhbmQgZWxlZ2FudAphcXVhcHVuawpmaXJlIGluIGV5ZQpiZWF1dGlmdWwgYW5jaWVudCBmcm9zdCB3aXRjaApjcnlpbmcgZXllcyBjbG9zZWQhCmJsYWNrIGFuZCByZWQgaGFpciBoYWlyCmdhbGF4eSBleWVzCmdsb3dpbmcgLSB0aGluIC0gd2lyZXMKY29sb3JmdWwgZGV0YWlsZWQgcHJvamVjdGlvbnMKZmFzaGlvbiBnYW1lcGxheSBzY3JlZW5zaG90CnB1bmstcm9ja2VyCmN1cnZ5IGZpZ3VyZQpwdWRpY2EgcG9zZQpmZWF0dXJlZCBhcnQKc3ltbWV0cmljYWwgZmFjZSBhbmQgZnVsbCBib2R5CjMgZCByZW5kZXIgaW4gb2N0YW5lCmZhCnZpeGVuCm1lZHVzYSBnb3Jnb24gaGVhZApwcm9taW5lbnQgcm9zeSBjaGVlayBib25lcwpyZWFsaXN0aWMgY2xvdWRzCmNvbG9ybGVzcyBhbmQgc2lsZW50CmN5YmVybmV0aWMgbGVncwpiZWF1dGlmdWwgZnV0dXJpc3RpYyBuZXcgZGVsaGkKd2VhcmluZyBhIGxvdyBjdXQgdGFua3RvcApvcm5hbWVudGFsIGhhbG8KdHdpbGlnaHQgcmF5CmZhbnRhc3kgYXJ0aWZhY3RzCnN0dW5uaW5nIGFuZCByaWNoIGRldGFpbApjaXR5IHBvcApqdW5rIG9uIHRoZSBncm91bmQKZGFyayByZWQgYW5kIGJsYWNrIGNvbG9yIHBhbGV0dGUKYXJzdGF0aW9uIGFuZCBiZWVwbGUgaGlnaGx5CnRvbyBtYW55IGV5ZXMKc2t1bGwgZWFyaW5ncwpnb3VhY2hlIG9uIHBhcGVyCmRpdmVyc2UgY29sb3JzCm1hdHVyZSBjb250ZW50CmtuZWVoaWdoIGJvb3RzCmZ1dHVyaXN0aWMgdmFsbGV5CmJsdWUgYW5kIHNpbHZlcgpyaXNxdWUKYmlnIGNhc3RsZSBydWluCnRvcm5hZG8gdHdpc3RlcgpkcmVzc2VkIGluIHNob3J0IGxlYXRoZXIgamFja2V0CnVwIGxpZ2h0CmJsb29keSB0ZWFycwpjaGFpbnMgaGFuZ2luZyBmcm9tIGNlaWxpbmcKaW4gYSBzcGFjZSBtZXRyb3BvbGlzCmd5cHN5CmJlYXV0aWZ1bCB5b3VuZyBoaW1hbGF5YW4gd29tYW4KbGFyZ2Ugd2luZG93CmxlZSBiZXJtZWpvCmJ1bm55IGhlYWQKaW4gcmVuYWlzc2FuY2UgdGltZXMKaHVtYW4gc3RydWN0dXJlIGNvbmNlcHQgYXJ0Cm5vIGRvdWJsZSBmaWd1cmUKZnJlc2gga2lsbAp0cmVuZCBvZiBhcnRpc3RhdGlvbgo0IGsgaGQgZnVyIGZhY2UhISEKc3R5bGUgb2YgMyBkCmVwaWMgY292ZXIKZGlzbmV5IGZhbnRhc3kgc3R5bGUKcnBnIHN0eWxlCmJydXRhbGlzdCBpbGx1c3RyYXRpb24KZ3JhbmQgYnVkYXBlc3QgaG90ZWwKYmlvbmljcwptb3N0IHdpbm5pbmcgYXdhcmRzCnZpb2xlbnRseSBmaXN0IGZpZ2h0aW5nCnZlcnkgaHVtb3JvdXMhISEKd2VhcmluZyBwcmlzb24ganVtcHN1aXQKY29uY2VwdCBhcnQuIDggawp0ZWFsIGNsb3RoCmNvc21pYyBpbWFnZXJ5Cmd1Y2NpbWF6ZQo0IGsgc2hhcnBlbmluZwpicmVhdGh0YWtpbmcgbW91bnRhaW5zCmVneXB0aWFuIGNsb3RoZXMKdHYgcHJvZHVjdGlvbgptdWx0aWNvbG9yZWQgdHNoaXJ0IGFydAp8IDI4bW0gfAo0IGsgZGV0YWlsZWQgcG9zdCBwcm9jZXNzaW5nCmhhcmQgZHJhbWF0aWMgbGlnaHRpbmcKc3RhbmRpbmcgb24gcm9ja3kgZ3JvdW5kCnN0eWxlIG9mIGtpbGlhbiBlbmcKanVhbm1hbwp3ZWlyZCBhYnN0cmFjdApsb25kb24gZmFzaGlvbiB3ZWVrCmJydW5ldHRlIGZhaXJ5IHdvbWFuIHN0cmV0Y2hpbmcKbmFtZSBpcyB0cmlwbWFjaGluZQpzaWxrIHNjcmVlbiBhcnQKNCBrIGhpZ2hseSBkZXRhaWxlZCBhcnQKY3Jvc3MgaGF0Y2hlZApjb2xkIGJyZWF0aApidXJuaW5nIGhvdXNlcwpzcGlyYWwgc21va2UKZmFzaGlvbiBlZGl0b3JpYWwgcGhvdG9ncmFwaHkKZmYgNwp0cmFuc3BhcmVudCBiYWNrcm91bmQKb3ZlcmNhc3QhISEgY2luZW1hdGljIGZvY3VzCmNhYmxlIHBsdWdnZWQgaW4KcG91cmluZyBpcmlkZXNjZW50IHJhaW4KZm90b2dyYWZpYQp1aSBjYXJkCnJlZmxlY3QgOCBrIHVoZApjYXN0bGUgaW4gZGlzdGFuY2UKZXZlcmdyZWVuCmNhbm9uIDEgZApzdHlsZSBvZiBpdmFuIHNoaXNoa2luCmNhdCBmcm9tIHRoZSB2b2lkCnJvbmluCm1vcm9jY28KcGFsdXRlbmEKc2VydmljZSB0aWNrZXQgY2xvc2UgdXAKdGhyZWUgaGVhZCBvbmUgYm9keQphdHRhY2hlZCB0YWlsCnBhbGUgYW5kIHNpY2tseQppbiBmbGlnaHQgc3VpdApqZWFuIHBhbnRzCnN0eWxlIGluIGRpZ2l0YWwgcGFpbnRpbmcKbGlnaHQgYnJvd24gY29hdApydWtpcwptb3J0YWwgc2hlbGwKc3RlYW1wdW5rIGFyY2FuZSBzaGFtYW4KZHlzdG9waWFuIDE5MjBzIHNvdmlldCBtb29kCmN1dGUgY2FzdWFsIHN0cmVldHdlYXIKaHlwZXIgZGV0YWlsZWQgZXllcwpwZXRlciBwYXVsIHJlYmVucwpiaXp6YXJvCm1pZG5pZ2h0IGNpdHkgbGlnaHRzCmRldGFpbGVkIHNoYXJwIG1ldGFsIGNsYXdzCm9wZW4gbWV0YWwgbWF3CmxvbmcgYmxhY2sgamFja2V0Cm1pbmltYWwgYXJ0IHN0eWxlCnZocyBjb3B5CmFwYXJ0bWVudCBkZXNpZ24Kam9obiBvbGl2ZXIgaW4gZnJvbnQKc3RpbGwgZnJvbSB0aGUgbW92aWUgYWxpZW5zCmRyZXNzIGluIHZvaWxlCnBob3RvIGZyb20gdGhlIDcwcwp2ZWhpY2xlIGlsbHVzdHJhdGlvbgpzbGFzaCBhbmQgYnVybgptYWlkZW4gYW5kIGZvb2wgYW5kIGNyb25lCm5lYXIgYSBqZXR0eQpjYXBhcmlzb25zCm1vcm5pbmcgZ29sZGVuIGhvdXIKcG9zaW5nIGluIGJyYQoxIDIgLSBiaXQKdmVyaXNpbWlsaXR1ZGUKZmxvYXQgdW5kZXIgbW9vbiBsaWdodCBhdCBuaWdodApib25uYXJkCmVhdGluZyBjYW1lcmEgcG92CnlvdSBiZWluZyBkcmFnb24gZm9vZApkdXN0IHN3aXJsaW5nCmxpZ2h0bmluZyBzdG9ybSBoaXR0aW5nIHRoZSBjYXIKbGlnaHQgcmF5cyBiZWFtaW5nIHRocm91Z2gKZ29sZGVuIGFyY2hlcyBsb2dvCnNtb290aCBmZWF0dXJlCndoZW4gbWFycyBhdHRhY2tzCmxhbXAgKCAoICggZmlzaCB0YW5rICkgKSApICkKY2xvc2V1cCBnaWFudCBkYWhsaWEgZmxvd2VyIGhlYWQKc3RhbmRpbmcgb24gbW91bnRhaW4KZGVuc2VseSBwYWNrZWQgYnVkcyBvZiB3ZWVkCnBvcnRhbCB0byBhbm90aGVyIHdvcmxkCm5ldyB5b3JrIGJhY2sgc3RyZWV0CnNpbHZlciBhbmQgY29vbCBjb2xvcnMKaW4gYW4gZW1wdHkgZmllbGQKaXZvcnkgY2FydmVkIHJ1ZmYKd2hpdGUgbWluaW1hbGlzdCBhcmNoaXRlY3R1cmUKZ2lhbnQgZmxvd2VyIGhlYWQKZGVwdGggZGV0YWlscwpyZWQgYmx1ZSB0aGVtZQpjcml0dGVycwpmcmVja2xlCndvcmxkIHByZXNzIHBob3RvIGF3YXJkZWQKZWR1Y2F0aW9uYWwgZGlzcGxheSBjYXNlCmFiYW5kb25lZCByYWlscm9hZHMKc3R1ZGlvIGRpc25leQpjb2xvciB2ZWN0b3IKbmV0d29ya2luZwpnbG93aW5nIGludGVyaW9yIGNvbXBvbmVudHMKZ3JlZW4gaGVhZApsZWQgbGFtcHMKbGlseSBmbG93ZXJzLiA4IGsKcG9ydHJhaXQgb2YgcmljayBzYW5jaGV6Cm1lYW5pbmcgb2YgbGlmZQpiY3kuIG5ldApsYXNlciBsaWdodCAqCmtpbGFydApkYXJrIHB1cnBsZSBza3kKYXJjaGl0ZWN0dXJhbCBzY2FsZQp0cmFkaXRpb25hbCByb21hbmlhbiBjbG90aGluZwpsb3N0IHdvcmxkCnN1cGVyIGV4YWdnZXJhdGVkIHByb3BvcnRpb25zCnNhY3JlZCBhbmNpZW50IGFyY2hpdGVjdHVyZQptdWx0aWNvbG9yIGNvbG9yIHNjaGVtZQpzaXJlbnMKZW1icm9pZGVyZWQgYnJvY2FkZQplbWJyb2lkZXJlZCB2ZWx2ZXQKbG9zdCBydW5lcwphbmNpZW50IGNpdmlsaXphdGlvbnMKcGFyY2htZW50IHBhcGVyCnR3byB3b21lbgpzcGlyaXQgaHVncwpqdWRnZQpjb3VydHlhcmQgd2Fsa3dheQp3YXRlcmNvbG9yIHdhc2ggb3ZlciBpbmtzCmJsYWNrIHN0ZXRzb24gaGF0CnJha2luZyBsaWdodApjcmFuYm93IGplbmtpbnMKbG9yZCBvZiB0aGUgaGFtYm9uZQpjcmVhbXkKZ2FsYXh5IG9yYml0IHN5c3RlbQpwb3VyIHBhaW50Cm1vZGVybiBzdHJlZXQgYXJ0CmNyeXN0YWxsaXplZCBodW1hbiBzaWxob3VldHRlCnRlbGVncmFtIHN0aWNrZXIgZGVzaWduCnB1cnBsZSBtYWtldXAKZnVsbGJvZHkgcGFpbnRpbmcKYmlnIGxpemFyZCBoZWFkCmNyeWVuZ2luZSBvY3RhbmUgYmxlbmRlcgphbWJpZW50cwpjdXRlIGZveApiYXR0bGVncm91bmQgYmFja2dyb3VuZApmaXJlZmxpZXMgYXJvdW5kCmZ1bGwgYm9keSBtZWNoYSBzdWl0CmVwaWMgdXJiYW4gYmF0dGxlCmxjZCBzY3JlZW4Kbm8gc3Vycm91bmRpbmdzCmNsb3RoZWQgaW4gaG9vZGVkCmV4dHJlbWUgbG93IGFuZ2xlCmx1c2ggc2FrdXJhCmR5c3RvcHRpYW4Kcm9vbSBmdWxsIG9mIGNhbmRsZXMKYmx1ZXN0b25lIHdhbGxzCnNjaWVuY2UgZmljdGlvbiBwYWludGluZwpvbW5pcHJlc2VudCBhaSBnb2QKY3liZXJwdW5rIG1ldHJvcG9saXMKc2NpZW5jZSBmaWN0aW9uIGRpZ2l0YWwgYXJ0CnZpY3RvciBzdG9uZQpoZWF2ZXkgbWV0YWwgbWFnYXppbmUgY292ZXIKcGVwZSBtb3Jlbm8KbWF0dCBob3dhcnRoCnN0ZWZhbm8gdGFtYnVyaW5pCmx1aXMgcm95byBhbmQgYWxleCBlYmVsCmFyY2FuZSB2aQpreWxlIG1jbGF1Z2hsaW4KZGFyayBhbWJpZW50IGFsYnVtIGNvdmVyCmxhcmdlIGNoYWluCmdyZWcgcnV0a292c2tpCmRhcmsgZmFudGFzeSBhdG1vc3BoZXJlCm5vIGdyb3VuZApnb3RoaWMgZm9nCmRpcnQgYW5kIHVuY2xlYW4KZHJhbWF0aWMgbGlnaHRpbmcgcmVuZGVyCnRoaXJkIHBlcnNvbiBnYW1lcGxheQpzaGlueSBhcm1vcgpwZXJmZWN0IGFydHdvcmsKZ2xvcmlvdXMgY29tcG9zaXRpb24KbGludXggbWludAp3aWVsZGluZyBrbmlmZQpiYWFycwpib3RhbmljCnBvcnRhbC4gemFoYSBoYWRpZApsaWdodCBob2xvZ3JhcGhpYyB0b25lcwpmcmFtZSBmcm9tIHBpeGFyIG1vdmllCndlYXJpbmcgdmljdG9yaWFuIGRhcmsgZ29nZ2xlcwprb29wYQppZ2ggZGV0YWlsZWQKa3dhayBqaSB5b3VuZwpicnV0YWwgYXJjaGkKZGV0YWlsZWQgcG9ydHJhaXQgb2YgYW5pbWUgZ2lybApwZXJzZWlkZXMgbWV0ZW9yIHNob3dlcgp1bHRyYSBkZXRhaWxlZCB0cmVlcwp0b3Agb2YgdGhlIGhpbGwKZGlzc29jaWF0aW9uCmRpc3RhbnQgZnVsbCBib2R5IHZpZXcKY29sb3JmdWwgYXVyYQpyb3VuZCBpcmlzCnZhcmlvdXMgZXllIHNoYXBlcwpvbiBhIGRlc2VydCBwbGFuZXQKY2FyZWxlc3MKZGppbm4Kc3RyYW5nZSBnZW9tZXRyaWMgZmFjaWFsIHRhdHRvb3MKZ3JleSByb2JlCnRpcmVkIGhhdW50ZWQgZXhwcmVzc2lvbgpsaXphcmQgdGFpbApkb21lc3BhY2UKZnVyaW91cyBnb3JnZW91cyB3b21hbgpmYW50YXN5IGFuZCBkcmVhbXMgdmliZXMKZG91YmxlIGV4cG9zdXJlIG9mIGxvdmUKZHJlYW0gYSBwb3J0cmFpdCBvZiBhIG1hbgpwZXJmZWN0bHkgcmVhbGlzdGljIHlldCBzdXJyZWFsCnZvbHVtZXRyaWMgb2JqZWN0CmdvbGQgd2Fpc3Rjb2F0CmZ1bGwgYm9kaWVkIHBvcnRyYWl0CmNvbmNyZXRlIHdhbGwKd2VhcmluZyB2aWN0b3JpYW4gZ29nZ2xlcwp2aXNpYmxlIGhlYWQgYW5kIGV5ZXMKc3BvdGxpZ2h0IGZyb20gZmFjZQp2aWN0byBuZ2FpISBtdXRlZCBzZXBpYSBjb2xvcnMKc3ByaW5nIGVhcmx5IG1vcm5pbmcKbmljZSB3ZWF0aGVyCnJhbmRvbSBvYmplY3QgbW92ZW1lbnQKc3VidGxlIHRvbmVzCmhhbmQgY2FydmVkIGJyb3duIHJlc2luCnByb2ZpbGUgZmFjZQpsb29raW5nIHRvd2FyZHMgY2FtZXJhCmxpYnJhcmlhbgpmYXN0IGZvb2QgcmV2aWV3CmluIHRoZSBzaWx2ZXIgaG91cgplbWlseSByYWp0a293c2tpCmVwaWMgZGViYXRlcwp0aGUgYmFjayByb29tcwp0aW1lbGluZSBuZXh1cwphc2NlbmRpbmcgdW5pdmVyc2VzCmZsb2F0aW5nIGhlYWRzZXRzCmZlbWFsZSBmYWNlIHNrdWxsIHBob2VuaXggYmlyZApzdG9uZSBmYWNhZGUKZXBpYyBtdXNpYyBhbGJ1bSBjb3ZlcgpzdHJpa2luZyBtYW5nYSBhcnRzdHlsZQpibHVyIGZvY3VzCmhpZ2hseSBkZXRhaWxlZCBiZWtzaW5za2kgYXJ0CmV0aGVyZWFsIGJvaGVtaWFuIHdheHdpbmcgYmlyZApnZW9tZXRyaWNhbCBmb3JtcwpvZmZlcmluZyB0aGUgdmlld2VyIGEgcGlsbApteXRob3Mgb2YgaWQKb25lIHJlZCB0b21hdG8gc2xpY2UKaGFuZCBvZiBmZWFyCmRldGFpbGVkIG9pbCBwYWludGluZyBwb3J0cmFpdAptb25zdGVyIGhpZ2gKbG90cyBvZiB3aGl0ZSBjb3R0b24Kb3JnYW5pYyBmbG93aW5nIGJhY2tncm91bmQKc2hvZ2FrdWthbgpmdWppZmlsbSB4IC0gdCA0CmRjIGNvbWljCmRhcmsgZmFudGFzeSBlbnZpcm9ubWVudAp3YWxraW5nIG92ZXIgYSB0aW55IGNpdHkKc3BhZ2hldHRpIGluIHRoZSBub3N0cmlscwpodWdlIHN1cnByaXNlZCBleWVzCjk5JSBhcnRpc3RpYwppbmsgYW5kIHBlbmNpbAprYXp1byB1bWV6dSBhcnR3b3JrCmNvbG9yIGRpc3BlcnNpb24KY29udmV4CnRha2Ugb2ZmCnNldCBzYWlsCmNvenkgYXRtb3NwaGVyaWMKcGxhbnQgYXJtb3VyCm1hZ2ljIGNvbmR1aXRzCmZ1amkgcHJvdmlhIGZpbG0KbG93IC0gcmVsaWVmIHN0b25lIHNjdWxwdHVyZQpmYXZlbGEgc3BhY2VzaGlwIGNhdGhlZHJhbAppbiBkZXRhaWxlZCBkYXRhIGNlbnRlcgppbiByZWFsaXN0aWMgZGF0YSBjZW50ZXIKZmVtYWxlIGN5Ym9yZwpmZW1hbGUgZHJ1aWQKZHJlc3NlZCBpbiB3aGl0ZSBpbnRyaWNhdGUgbGFjZQpuZW8gbm9pcmUKdmVuZ2VmdWwKaW50cmlndWluZyBoZWxtZXQKcHlvbmd5YW5nCmFsaWVuIG1vdGhlcnNoaXAgaW4gdGhlIHNreQpiZWNraW5zYWxlCm1pa2UgcGxvb2cKZ3JhZGllbnQgeWVsbG93IHRvIHJlZApmb3J0bml0ZSBjaGFyYWN0ZXIKcmVkIG1lYXQgc2hyZWRzCnJlYWwgcG9yY2VsYWluIHRleHR1cmUgZWZmZWN0Cm1pbmltYWxpc3QgYW5kIGNsZWFuCmZlc3RpdmFscwphbmltYXRlZCBtb3ZpZSBzaG90CmZsb3dlciBidWRzCmhpc3BhbmljCnRvbnkgc2FuZG92YWwuIDggayByZWFsaXN0aWMKa2FyYXRlIGtpY2sKZ29sZCBkZXRhaWxlZCBjb2xsYXIhISEhIQpoeXBlciBzaGFycCBmb2N1cwpmYXNoaW9uIHNob3cgcnVud2F5CmZ1dHVyaXN0aWMgZmluZSB0ZXh0dXJlcwp3b3ZlbiB3aXRoIGVsZWN0cmljaXR5CndlYXJpbmcgYSBjdXRlIGhhdAppbnRlbnNlIGNvbnRyYXN0CjMgbGlnaHQgc291cmNlcwpmdWxsIG9mIHRyYXNoCmdsb3dpbmcgcGVhY2ggZmFjZQptYWplc3RpYyBsaWdodGluZwpzYXRvc2hpCndpbnRlciAxOTQxCmVhcmx5IDkwcyBjZwo4MHMgb3V0cnVuCmZ1dHVyZSBjb2Rlcgp0cmlhbmd1bGFyIGVsZW1lbnRzCmJsYWNrIHdoZWVsIHJpbXMKZm9ybSBleHBsb3JhdGlvbgpzdHJlYW1saW5lZCBzcGluZXMKcGluayBib2R5CnNsZWVrIG1ldGFsIGhlYWQKc21vb3RoIHBpbmsgc2tpbgpkaXNuZXkgYW5pbWF0aW9uIGNvbG9yIHBhbGV0dGUKamFwYW5lc2UgY3JhbmUgYmlyZCBpbiBjZW50ZXIKc21hbGwgYmx1ZSBleWVzCm9jdGFuZSByZW5kZXIgcGFpbnRpbmcKZ2lhbnQgc3R1bm5pbmcgZ29kZGVzcyBzaG90CmhlbGljb3B0ZXJzIGFuZCB0cmVtZW5kb3VzIGJpcmRzCmNpbmVsdXggYXNhIDEgMCAwCmdsb3dpbmcgZm9yZXN0CmhpZ2ggZGVmaW5pdGlvbiBhbmltZSBhcnQKc3R1ZGlvIG1hcHBhCmNvbWJhdCBnZWFyCnllbGxvdyBkZXRhaWxzCmZyYWN0YWwgdGV4dHVyZQoyIDAgMCBtbSBmb2N1cwpwb2xhcm9pZCA2IDAgMApnb2RkZXNzIHBvcnRyYWl0Cm9uIGNsb3Vkcwp2ZXJ5IGRldGFpbGVkIGJpcmRzCmZ1bGwgYm9keSBkcmF3aW5nCnVucmVhbCBlbmdpbmUgYXJ0IDUKaW52ZXJ0ZWQgcmFpbmJvdyBkcmlwIHBhaW50CmhhcHB5IGtpZApncmFpbnkgcGhvdG8gb2YgYW4gdWdseSB3b21hbgpzY2kgZmkgbmVja2xhY2UKdHdpdHRlciBwZnAKaGFoYWhhaGEKYmxhY2sgYmFuZ3MKaGFtYnVyZ2VyIG1peCBqZWxseWZpc2gKc3RpY2sgcG9rZQp0cmVlIHRvd24Kd2VhcmluZyB2aWJyYW50IGJveGluZyBnbG92ZXMKZ3JlZW4gZXllcyEhIQpsYXRlIGdvdGhpYyByZWxpZ2lvdXMgcGFpbnRpbmdzCmhhbnpvIGZyb20gb3ZlcndhdGNoCmhhcm1vbnkgb2YgbmVvbiBnbG93aW5nIGNvcmFsCndpbmQgbWFnaWMKcHJ1c3NpYW4gYmx1ZSBhbmQgcmF3IHNpZW5uYQpxdWVjaHVhISEKdG9uYWwKaGVyYmFyaXVtIHBhZ2UKaG9seSBtZWRpZXZhbCBjcnVzYWRlcgpzY2hlbWUKcmVhbCBsaWZlIHBob3RvZ3JhcGh5Cmh1Z2UgcGF1bGRyb25zCmdvbGQgbWFkaHViYW5pCmxlZSBtYWRnd2ljayAmIGxpYW0gd29uZwpwaW5rIHllbGxvdyBmbG93ZXJzCnBvbHlnb25hbCBhcnQKcGhvdG9jaHJvbSBwcmludAoyIDQgbW0gaXNvIDggMCAwCmJsdWUgbmlnaHQKbWFkZSBpbiB1bnJlYWwgZW5naW5lIDQKcmFpbmJvdyBncmFkaWVudCBibG9vbQpzY2VuaWMgZHlzdG9waWFuIGVudmlyb25tZW50CnZlcnkgcmVhbGlzdGljIGdlbXN0b25lcwp0d2VuIG1hZ2F6aW5lCnJlc2lkZW50IGV2aWwgaW5zcGlyZWQKc29mdCBhbWF6ZWQgc21pbGVzCjI2ODQzNTQ1NmsgZmlsbQptYXJpZ29sZAp0YWxsIGVudHJ5CmNsb3NlIGJvZHkgc2hvdApzY2llbmNlIGZpY3Rpb24gY29uY2VwdCBhcnQKaHVtYW5vaWQgd2l0aCBjcm9va2VkIHRlZXRoCmxvbmcgb3BlbiBibGFjayBtb3V0aApsYXJnZSBmdWxsIGxpcHMKbG9uZyBwZXRhbHMKaHVnZSBibG9zc29tcwptYXJraW5ncyBvbiBoZXIgZmFjZQpyZWFsaXN0aWMgYXBvY2FseXB0aWMgd2FyIHNjZW5lCndldCBtYXJrZXQgc3RyZWV0CmdlbXMgYW5kIGdvbGQKaGlsbWEgYWYga2xpbnQgY29sb3IgcGFsZXR0ZQpzcHJheWluZyBsaXF1aWQKdmVyeSBhY2N1cmF0ZSBjb2hlcmVudCBpbWFnZQpzcGluYWwgY29sdW1uCmludHJpY2F0ZSBjYXN0bGUgaW50ZXJpb3IKaHlwZXJkZXRhaWxlZCBzYW1zdW5nIHN0b3JlCmNoaWxkaG9vZCBtZW1vcnkKY29uZmlkZW50IGhlcm9pYyBwb3NlCmpld2VsIGNyb3duCmhlbnJ5IGRyZXlmdXNzCmltcHJvYmFiaWxpdHkKdHJhbnNwYXJlbnQgZ2hvc3Qgc2NyZWFtaW5nCmNhdXN0aWNzIHNoYWRvd3MKYnJpZ2h0IHN1biBncm91bmQKd2V0IGhpZ2h3YXkgY2hhc2UKZ2lhbnQgd2hhbGUgdGFuayB3aXRoIGxlZ3MKcmVmbGVjdGlvbiBwdWRkbGVzCnNvbGFjZQppbnNpZGUgdGhlIHRvbWIgb2YgamVzdXMKc21hbGwgc3RlcHMgbGVhZGluZyBkb3duCmJsdWUgY2hlY2tlcmJvYXJkIGJhY2tncm91bmQKb24gdGhlIHN1cmZhY2Ugb2YgYW4gYXN0ZXJvaWQKYmxvbmRlIHJlZGRpc2ggaGFpcgp0aGUgcmFwdHVyZQppc29tZXRyaWMgaG91c2UKamFwYW5lc2UgcnVyYWwgdG93bgpjb2xpbiBzZWFybGUKa2lja2luZyBhIGZsb3JpZGEgbWFuc2lvbgpzeW1tZXRyaWNhbCBjZW50ZXJlZCBwb3J0cmFpdAptYWdpYyBzd29yZApzbGl2ZXIgaWNlIGNvbG9yIHJlZmxlY3RlZCBhcm1vcgpvdXQgd29ybGRseSBjb2xvdXJzCmNoYXJnaW5nIHBsdWcgaW4gdGhlIGNoZXN0CmNvbG9uaXNhdGlvbgpkaXN0YW50IC0gbWlkIC0gc2hvdApsYXJnZSBvY3RvYmVyZmVzdCBpbnZpdGUgY2FyZAppbnRpbWF0ZSBkYXJrIG1vb2R5CmdpZ2FudGljIGxhbmRpbmcgcGFkCmhvcml6b24gb2YgYW4gZXJ1cHRpbmcgdm9sY2Fubwp1cmJhbiBqdW5nbGUgcGxhbnRzCm9wZW4gYm9va3MKKChuZW9uIGNvbG9ycykpCmRlZXBzcGFjZSBleHBsb3JhdGlvbiEhIQptYWdpY2FsIHRyZWUKY2xhc3NpY2FsIGdyZWVjZQpib29rIHBvcnRyYWl0CnNlcmVuZSBzbWlsZQp2aW9sZXQgdG9uZXMKdGhlIGVsZGVyIHNjcm9sbHMgdmkgaGFtbWVyZmVsbAptYXJibGVkIHZlaW5zCm11Y2hhIHwKYmlnIGhhemVsIG51dCBicm93biBleWVzCmJsYWNrIGJhY2tncm91bmRzCjMgZCBkYXogb2NjbHVzaW9uCm1hcmsgenVja2VyYmVyZyBhcyBhIHp1Y2NoaW5pCmNocm9tZSBvdXRmaXQKc3RhaW5lZCBnbGFzcyB0YXJvdCBzdHlsZQpiaXNtdXRoIGJlYXV0aWZ1bCB3ZWxsIGRlc2lnbmVkCmljZSBzcGVsbApibGFjayBkeW5hbWljIGhhaXIKbWF0dGUgcGFpbnRpbmcgc2NlbmVyeQpmcmllbmRzIDkgMCBzIHR2IHNob3cgc2NyZWVuc2hvdAphcnQgb2YgbW9lYml1cwptaXN0eSB3b29kcwptZWR1c2EgbWFkZSBvZiBzb2Z0IHdheApzdHViYmxlcwptaXN0eSBqYXBhbmVzZSBiYW1ib28gZm9yZXN0CmZvZyBkcmFtYXRpYwprb2RhY2hyb21lIDYgNCBjb2xvciBzbGlkZSBmaWxtCmFjdGlvbiAtIGFkdmVudHVyZQpjb25jZXB0YXJ0LiBjb20KZnJhbmNpc2NvIGRlIGdveWEKZXZpbCBmYWNlcwptb3ZpZSBzY2VuZSBwb3J0cmFpdCBjbG9zZXVwCnN1cnJlYWwgY2luZW1hCmhwIGxvdmVjcmFmdCBzdHlsZQpyb2NrIHBsYXRlYXUKbXVsdGlzdG9yeSBidWlsZGluZwpnbGFzcyBvcGVuaW5ncwp0aGljayBkZXRhaWxlZCBzbW9rZQpzb3BoaXN0aWNhdGVkIGhhbmRzIC8vIG5vaXIKb3ZlcmxhaWQgc2FjcmVkIGdlb21ldHJ5Cm1hcGxlIHRyZWVzIHdpdGggZmFsbCBmb2xpYWdlCm11ZGR5IGVtYmFua21lbnQKbmVvbiBmbHVvcmVzY2VudApyZWQgZXllcyBhbmQgYSBzbGltIGZhY2UKbmlnaHQgc2t5IHJlZmxlY3RlZCBpbiB0aGUgd2F0ZXIKa2lraSBzbWl0aApibGFjayBzYW5kCm1vdG9yYmlrZXIKb2lsIHBhaW50IGltcGFzdG8gcmVsaWVmcwpzZXJpbmUgaW50ZW5zZSBzdW5saWdodAptYWdpY2FsIGZvcmVzdCBiYWNrcm91bmQKY2xhc3NpY2FsIGxpZ2h0aW5nCmhvc3BpdGFsIGluIGJhY2tncm91bmQKZGlydCBhbmQgZ3Jhd2VsIGluIGFpcgpwaW5rIGNsb3VkIGJhY2tncm91bmQKYmlyZCBoZWFkCmdsb29teSBmb2dneSBhdG1vc3BoZXJlCmN1cmxlZCB1cCB1bmRlciB0aGUgY292ZXJzCnN0aWxsIGxpZmUgdmVnZXRhYmxlcwo4ayBvY3RhbmUgdW5yZWFsIHJlbmRlcgpvdXRkb29yIGRlc2lnbgpoaWdoIGRlZmluaXRpb24gYW5kIGRldGFpbGVkIDQgawppbiBjbG90aGVzISBoaWdobHkgZGV0YWlsZWQKaHVnZSBvbGQgcnVpbnMKdHJhdmVsZXIKZWxlZ2FudCBldmVuaW5nIGdvd25zIQpwcmV0dHkgY2xvdGhpbmchCnB1bmsgcm9jayBhbGJ1bSBjb3ZlciBhcnQgc3R5bGUKZm9nZ3kgcGhvdG8gOCBrCmluIHRoZSBkZXNlcnQgYmVzaWRlIHRoZSBndWxmCmFraWhpdG8gdHN1a3VzaGkKbG9jYXRpb24gWyBjaGljYWdvICggYWxsZXkgKSBdCnNob3Qgd2l0aCBzb255IGFscGhhCnBob3RvIG9mIGEgY2xhc3Nyb29tCmNhbmRsZWxpdCByZXN0YXVyYW50IHRhYmxlCjIgOCBtbSBtYWNybyBwaG90bwpncmFmbGV4IGNhbWVyYQpjaW5lbWF0aWNhbCBjb21wb3NpdGlvbgprb3JlYW4ga3BvcCBzdGFyCmdyaXR0eSEhIQpkYXlsaWdodCBtYWRlIGluIGJsZW5kZXIKbGl0dGxlIHNtaWxlCndvb2RsYW5kIGxvY2F0aW9uCmVtbWEhISB3YXRzb24hIQpubyBmYWNlcyB2aXNpYmxlCjE5NTggZmVycmFyaSAyNTAgZ3QKcm9hZHN0ZXIKZmxvd2VycyBncm93aW5nIG91dCBvZiBoaXMgYm9keQptdGcgZCAmIGQKamFwYW5lc2UgbGlnaHQgbm92ZWwgY292ZXIKdW5kZXIgd2F0ZXJmYWxsCnByZXR0eSBsb25nIGhhaXIKZ29sZGVuIHJhdGlvIGpld2VscnkgY2FuZHkKc2hhcnAgZ2VvbWV0cmljYWwgc3F1YXJlcwpub3ZpIHN0YXJzCmxpbWluYWwgZGlmZnVzaW9uCmxpbWluYWwgc3BhY2VzIGFuZCBlbnZpcm9ubWVudHMKYmxhY2sgYXJtb3JlZCB1bmlmb3JtCnBvcnRyYWl0IG9mIDEgNSAtIHllYXIgLSBvbGQgYm95Cm1lZGl1bSB5ZWxsb3cgYmxvbmQgaGFpcgpwb3J0cmFpdCBvZiBtZWdhcmEKaWR3IG10bXRlIHRmd2lraQpleHF1aXNpdGUgbWFzdGVycGllY2UKc2FuZHJvIGJvdHRlY2VsbGkKc2hhZGVzIG9mIHBpbmsgYW5kIGJsdWUKdW5yZWZpbmVkIGdvbGQgbnVnZ2V0CnNvZnRmb2N1cwpnaGlibGkuIG9jdGFuZSByZW5kZXIKYnJ1dGFsaXN0IGNpdHkgYXJjaGl0ZWN0dXJlCmNhdGhvbGljIHJlbGlnaW91cyBhcnQKcG9ydHJhaXQgb2YgYSBnb3RoIGNhdGdpcmwKd2l0aCBhIGJyb3duIGZyaW5nZQpob2x5IGxpZ2h0IHJheXMKcG9ydHJhaXQgb2YgYSBzbWFsbAp0aHVuZGVyIGNsb3VkcyBtb2Rlcm5pc20KZmxhdCB0cmlhbmdsZSAtIHNoYXBlZCBoZWFkCnRoaW4gYW50ZW5uYWUKbW9yZSBhbmQgbW9yZSBjb21wb3Npc2lvbgp0aHVuZGVyc3Rvcm0gYW5kIGZpcmUKY29sbGFyIGFuZCBsZWFzaApicmV0b24gY2FwCnBvcnRyYWl0IG9mIGRlbW9uIGdpcmwKbXVzY2xlIHRpc3N1ZQpwb3J0cmFpdCBvZiBmZW1hbGUKZGVjb2xsZXRlCnRvdXNsZWQgbWVkaXVtIGxlbmd0aCBoYWlyCnBvcnRyYWl0IG9mIG11c2N1bGFyCmZyZXVkaWFuCmJsdWUgdHVydGxlbmVjawpzcXVhcmlzaCBmYWNlIHNoYXBlCmJlZWluZyBoYXBweQpoaWdobHkgZGV0YWlsZWQgZmFjZSBhbmQgaGFuZApvcm5hdGUgZGFyayBncmVlbiBjbG90aGluZwpjeWJvcmcgbm9ibGUgd29tYW4KY29sb3NzYWwgbGlnaHRuaW5nCmNhbm5vbmJhbGxzCnJhdGVvCnRlZW5hZ2UgbXV0YW50IG5pbmphIHR1cnRsZQpnZW9tZXRyaWMgdGF0dG9vcwpzb2Z0IGJsdWUgdGV4dHVyZQp6ZWxkYSBzdHlsZSBhcnQKcHVsaXR6ZXIgYXdhcmQKc2Fsb21vbgptaW5pbWFsIHNsZWVrIGRlc2lnbiBhcm1vciBzdHlsZQpzaWx2ZXIgaGFpciBhbmQgYmVhcmQKcmVhbGlzdGljIHNwYWNlCnNtaWxleSBwcm9maWxlCnN0dWRpbyBnbGlibHkgbWFrb3RvIHNoaW5rYWkKaHVnZSBzdHlsaXplZCBwYXVsZHJvbnMKcmVuZGVyIG9mIGZ1dHVyaXN0aWMgc3VwZXJjYXIKYWRvbGYgd8O2bGZsaSBhbmQgZG9uYXRvIGdpYW5jb2xhCmFzeW1tZXRyeSEhCmZyYW5rIGhhbXBzb24gYW5kIG1jYmVzcwpvdmVyIGEgZGlzaCBhbmQgb3ZlciBhIHRhYmxlCnVoZCB1aGQgdWhkCnNjdWxwdHVyZSBtYWRlIG9mIHdhdGVyCnNlYW4gaGFycmlzIHdpemFyZApleWVzIGFyZSBjb2xvcmZ1bCBzcGlyYWxzCmFlc3RoZXRpYyBvY3RhbmUgcmVuZGVyIQp3aW5kIHdpemFyZApibGFua2V0cyBvZiBmb2cgcG9ja2V0cwpzaWx2ZXJnaWxsIGFkZXB0CmhpZ2hseSByZWFsaXN0aWMgYnVtcCBtYXAKd2l0aG91dCBiZWFyZCBhbmQgbXVzdGFjaGUKc29sYXJwdW5rIGhvdmVyY2FyCnZlcnkgc21va3kgcGFyaXMgYmFyCnNyaSBsYW5rYW4gbGFuZHNjYXBlCnN0YWxpbiBhcyBzdXBlcm1hbgpzdGFyIGJhc2UKc3RlYW1wdW5rIG1hbGUgcG9ydHJhaXQKc3RyZWV0IGZhc2hpb24gY2xvdGhpbmcKaW52YWRpbmcga2FzaHl5eWsKZ3RhIHZpY2UgY2l0eSByZW1hc3RlcmVkCmh5cGVybWluaW1hbGlzdApvY3RhbmUgcmVuZGVyIC0gdAp5b3VuZyBzZW5zdWFsIGdyYXZ1cmUgaWRvbApzdHVubmluZyBwaG90b3Nob3QKc3VpdCB2ZXN0CnJlaSBoaXJvZQpzdXBlciBkZXRhaWxlZCBjb2xvciBhcnQKbWFsYXlzaWEganVuZ2xlCmZlbWluaW5lIHNoYXBlcwpsb2Z0eSBoZWF2ZW5zCm9uZSBleWUgd2luawoxIDUgMCA0CmJlYXV0aWZ1bCBnb3JnZW91cyBkaWdpdGFsIGFydAp0aGUgY3JlYXR1cmUgc2l0cyBpbiBhIGNhcgpwaG90byBvZiB0aGUgeWVhciAyIDAgMiAyCmVuaGFuY2hlZApkaWdpdGFsIGFydCBlbW9qaSBjb2xsZWN0aW9uCm9ybmF0ZSBjb2xvcmVkIGdlbXMKdGludHlwZSBmdWxsIGJvZHkgdmlldwp0aW55IGNhdCByaWRpbmcgYSBsYWJyYWRvcgpyYWRpbyBlcXVpcG1lbnQKdHdvIGV4aGF1c3RlZAp0d28gZXllIGFydAp0d28gd29tZW4ga2lzc2luZyBhdCBhIGNhcm5pdmFsCmludHJpY2F0ZSBmcm9tIGJhbGR1cnMgZ2F0ZQpjb2xvdXJmdWwgc2xpbWUKZnVycnkgcGF3cwpkZXZpYW50LWFydApzY3VscHRlZCBkcmFjb25pYyBmZWF0dXJlcwpyaWNoIGdlb21ldHJ5CndhdGVyY29sb3IgYXJ0IG9uIHBhcGVyCmNoZW1pY2FsbHkgZGFtYWdlZAp3aGl0ZSBjeWJvcmcgZmFzaGlvbiBzaG90CnR3byBzbWFsbCBob3JuIG9uIHRoZSBoZWFkCnN0cmVldCB0b3Agdmlldwp6b2V5IGRlc2NoYW5uZWwKYmx1cnJ5IGFuZCBkcmVhbXkgaWxsdXN0cmF0aW9uCndoaXRlIHB1ZmZ5IG91dGZpdAptb3VudGFpbnMgaW4gZm9nIGJhY2tncm91bmQKaGVhcnRoc3RvbmUgY2FyZCBnYW1lIGFydHdvcmsuIOKAnQpsb3cgbm9pc2UK4oCcMjAxOSBibXcgbTUgd2Fnb24KZ3JhaW7igJ0KOGsgcmVzb2x1dGlvbuKAnQpvaWwgb24gY2FudmFz4oCdCmFuaW1lIHN0eWxl4oCdCnEKcmFkcwoxIDkgMiAwJ3Mgc3R5bGUgc3BlYWtlYXN5CmNsYXNoIHJveWFsZQpnb2xkIGFuZCB0ZWFsIGNvbG9yIHNjaGVtZQpyYWRpYW50IHZvbHVtZXRyaWMgbGlnaHRpbmcKMyBkIHdoaXRlIHNoaW55IHRoaWNrCnBob3RvcmVhbGlzdGljIGFuYW1vcnBoaWMgbGVucwpyYWlzZWQgaGFuZHMKbW9kZXJuIGxpZ2h0aW5nCmFsZXggZmxvcmVzCmRhcmsgYW5kIGRpbQpydgpibGFjayB2ZXN0CmxpZ2h0IG9mIHNvcnJvdwp3aXRoIGEgc3VidGxlIHNtaWxlCmFib3ZlIGNpdHkKYXNjZW5kZWQKcm9ib3Qgd2l6YXJkCmJpdHRlcgpmb2N1cyBtb2RlCmtpbmQgZmVhdHVyZXMKZmxhdHRlcmluZyBwaG90bwpkcnkgYnJ1c2gKbmVvbiBpbmsKZnJhY3RhbCBza2luCnNwZWFrIG5vIGV2aWwKcGFibG8gcGljYXNzbyBhbmQgbWFyayBicm9va3MKYW5nZWxpYyBmYWNlCnZpYnJhbnQgaHVlcwptYWdhCm5leHQgdG8gdGhlIHNlYQpidWdzCmRhcmsgcmVkIGJhY2tncm91bmQKbnkKaHlwZXJyZWFsaXN0aWMgYXJ0CmhvbGRpbmcgdHdvIHN3b3JkcwpoYWxhdGlvbgpsb29raW5nIHNpZGV3YXlzCndpdGggbm8gZmFjZQpzdGV2ZSBjYWxkd2VsbAp5b2ggeW9zaGlub3JpCjNkIGdlb21ldHJpYyBhYnN0cmFjdCBhcnQKamFndWFyIGUgLSB0eXBlCnBpY3R1cmUgYm9vawpibGFjayB3b29sIHN3ZWF0ZXIKdGVkZHkgYmVhcgpyb3VuZGVkIGJlYWsKYW1iaWVudCBvY2x1c2lvbgpwaWN0b3JpYWwKdHJpYmFsIHl1cnRhCmFicnVwdApwb3RhdG9lcwpjb25jcGV0IGFydApteSBwb3YKc3BhbmdsZWQKcGhvdG8tYmFzaAptZXNoCnNjaSAtIGZpIHBpbG90Cm9pbCBwYWludCBjb25jZXB0IGFydAphbGNoZW1pYwpicm9rZW4gYW50ZW5uYQpyZWN5Y2xlZApyZWQgYXVyYQpjb3VyYWdlIHRoZSBjb3dhcmRseSBkb2cKY29ja3JvYWNoCmRyYW1hdGljIGxpZ2h0aW5nIGZyb20gYWJvdmUKbmFuY3kgcGVsb3NpCnNraW5uZWQgYWxpdmUKdGlueSByb2JvdHMKdmVyeSB0ZXJyaWZ5aW5nCnBhcGVyY3JhZnQKYXNlcHJpdGUKcGluZXMgc3ltYm9sIGluIHRoZSBjb3JuZXJzCmRyZWFtbGlrZSBhdG1vc3BoZXJlCm9sZCBsaWJyYXJ5CmJsYWNrIHNob3J0cwoyIDAgMiAxIGFuaW1lCmJsYWNrIHJvb2YKZG91YmxlIGRlbmltCmRvb20gbWV0YWwKY2FydG9vbnMKc3RlbmNpbCBhcnQKb24gYSB2ZWx2ZXQgdGFibGUgY2xvdGgKbGljaGVuCmZsYXJlcyBhbmFtb3JwaGljCjEgOSA3IDMKcmFtcHMKZHJhbWF0aWMgY2FuZGxlbGlnaHQKeWVhcmJvb2sgcGhvdG8Kc3RpbGwgZnJvbSBoYXJyeSBwb3R0ZXIKY29uYW4KbmV3IHlvcmsgdGltZXMKZ3JhaW4gZ2VsaW9zIGxlbnMKZnVsbCBwYWdlIHNjYW4KdGVjaG5vbG9neSBzY2kgLSBmaQpleHBsb3JlcgpoeXBlciBwaG90b3JlYWxpc3RpYyA0awp1bmNsZWFyCnBpbGVzIG9mIGJvb2tzCjE5NzEKc3VwZXIgOG1tCnZpZGVvIGdhbWUgYm94IGFydAp1a2l5by1lIHByaW50CnB5cmUKOGsgaW4gdGhlIHN0eWxlCnNsb3RoCmRydW1raXQKY29va2UgdmFyb3RhbCAyMC0xMDAgdDMuMQpzaG93aW5nIG9mZiBiaWNlcHMKc3RlYW0gcHVuayBzdHlsZQpyYWRpb2hlYWQKaXNvbGF0ZWQgYmFja2dyb3VuZApicnV0YWxpc3QgYnVpbGRpbmdzCnNlcnZpbmcgYm9keQpzbGlkZXMKY2FycyBwYXJrZWQKbXVsdGlwbGF5ZXIgc2V0LXBpZWNlCjoxNCBmbGNsICsgYWtpcmEKdGlnZXJzCnNuaXBlcgoxOXRoIGNlbnR1cnkgcGFpbnRpbmcKbWFydGlhbiBsYW5kc2NhcGUKc2NpZW5jZSBmaWN0aW9uIGxhbmRzY2FwZQp2ZXJ5IGFjY3VyYXRlCmFyaXN0b2NyYXRpYwoyIDQgbW0gbGVpY2EgYW5hbW9ycGhpYyBsZW5zCjIgYgpoYXBweSByb2JvdApwZXRyb3MKd2l0Y2hlcwpiZXN0IHF1YWxpdHkKc2VhbWxlc3MgZ2FtZSB0ZXh0dXJlCmhhcmFqdWt1IHN0cmVldCBmYXNoaW9uCmNhbW91ZmxhZ2UKZGFyayBhdGhtb3NwaGVyZQp1bHRyYSBwaG90b3JlYWwKaW4gYSBwYXJrIGFuZCBuZXh0IHRvIGEgbGFrZQphZGFtIHNhbmRsZXIKdGhlIHN0eWxlIG9mIHdsb3AKaGVhdnkgY29sb3IgY29tcHJlc3Npb24gZmlsdGVyCnZlcnkgZGV0YWlsZWQgYmQgY292ZXIKYXJ0aWN1bGF0ZWQgam9pbnRzCm1ldGFsIGFybW9yCmdhbmcgY2xvdGhpbmcKZmFzaGlvbiBjbG90aGluZwpiaXJkIHdpbmdzCmlzbyA4IDAgMAphbGVjIHNvdGggOiA6IGxvdmUKc2hvcnQgaGVpZ2h0CmhlYXIgbm8gZXZpbAozIGQgY2xvc2UgLSB1cApjZWxlc3RpYWwgYm9kaWVzCnZpZGVvIGdhbWUgc3R5bGUKMyBkIGZpbG0KMyBkIGxpdHRsZXN0IHBldCBzaG9wIGNhdAp0dXRvcmlhbApzdXBlciBtYXJpbyBicm9zCmphcGFuZXNlIHRlbXBsZQpwb3JjZWxhaW4gc2tpbiB0b25lCm5vIGVhcnMKc3RhbmRpbmcgb24gMiBmZWV0CnF1YW50dW0gcGFyYWRveApkZWFkIGFuZCBhbGl2ZQphYnN0cmFjdCBuYXR1cmUKZ2xhY2llcgp5ZWxsb3cgcmF0IHBpZwphbnRocm9wb21vcnBoaWMgZm94CnlpaGFvIHJlbgpvY3RhbmUgOCBrIHJlbmRlcgp0aHJlZSAtIHBvaW50IGxpZ2h0aW5nCm5pa2UgbG9nbwpiYWNrZ3JvdW5kIGFydHdvcmsKaGlnaCBkZWZpbml0aW9uIG1vdmllCmZ1dHVyaXN0aWMgcHJvZHVjdGlvbgphZHZlbnR1cmUgbW92aWUKZHJhbWF0aWMgb2lsIHBhaW50aW5nCnJlc2lzdGFuY2UKaHVtYW4gYm9keSB3aXRoIGRyYWdvbiBmZWF0dXJlcwp2ZXJ5IG1hZ2ljYWwgYW5kIGRyZWFteQoxOTYyCndpZGUtcGVyc3BlY3RpdmUKZ3JhbmQtY29tcG9zaXRpb24KZmFudGFzeSBjeWJlcnB1bmsgaG9ycm9yCnNtb2tlIGFsbCBhcm91bmQKYW5nbGUgdmlldwpuaWNvdmlkZW8KaW5zZXQgeHJheSBjcm9zcy1zZWN0aW9uCmRlbHV4ZQpuZW9uIGV5ZWJhbGxzCnBvcHBpZXMKM2QgbGl0dGxlc3QgcGV0IHNob3AKZXhwb3N1cmUgdGltZTogMS8xNjAKc3VwZXIgZGV0YWlsZWQgYW5kIHJlYWxpc3RpYwpzdXJwcmlzZSBtZQpnbGFzcyBzcGhlcmUKM2QgZmluYWwgcmVuZGVyCmlnIHN0dWRpb3MgYW5pbWUgc3R5bGUKc3R1ZGlvbGlnaHQKZ2lhbnQgbWFyYmxlIGNoZXNzIHBpZWNlcwpkYWhsaWFzCndlYXJpbmcgZ29sZGVuIGFybW9yCmZpbGlncmFuIGludHJpY2F0ZSBkZXRhaWxzCnNvbWUgbWFyYmxlIHN0YXR1ZXMgY2FuIGJlIHNlZW4KaGVyb2VzIG9mIHRoZSBzdG9ybQpmdWxsIGRyZXNzIG9mIGxhdmEgc2hvd2Nhc2UKYmVhdXRpZnVsIGVudmlyb25tZW50CnNsaWdodGx5IG92ZXJ3ZWlnaHQKcGJyIG1hdGVyaWFsCnJvY29jbyBmYXNoaW9uCm10YSBzdWJ3YXkgZW50cmFuY2UKYnVzIHN0b3AKYmxhY2sgZmxhdCBiYWNrZ3JvdW5kCnNtb2tpbmcgYW5kIGJ1cm5pbmcKdHJlbmRpbmcgb24gZHJpYmJibGUKdGhpbm5pbmcgaGFpcgpyb3VuZCBjaGVla3MKZGl2ZXJzZSBmYWNlcwphcnN0YXRpb24gdHJlbmRpbmcKbHVzaCBncmVlbmVyeQpyZXRyby13YXZlIHZpYmVzCmNpbmVzdGlsbCA4MDB0IDE4bW0gaGVhdnkgZ3JhaW4Kc3ludGhlc2l6ZXJzCmRhdGEgbW9zaAo4IGsgdWhkIGNoYXJhY3RlciBkZXRhaWxzCndpdGggcmVkIGhhemUKYXJ0IHRveXMgY29sbGVjdGlibGUgZmlndXJpbmUKdGVjaG5vIG15c3RpYwpsb3cgbGlnaHRzCmZhc2hpb24gbWFnYXppbmUgY292ZXIKY2F0cyEgYXJlIGFyb3VuZApibGFjayBmZW1hbGUKaXJvbiBtYXNrIGFuZCBoZWxtZXQKb2xpdmUgdGhpZ2ggc2tpbgpzY2ktZmkgbW92aWUKaGlnaCBmYW50YXN5IGlsbHVzdHJhdGlvbgpibG9iCmNoYXJtYW5kZXIKZGVlcCBibHVlIHNreQpmaGQKZGFyayBncmVlbiBkcmVzcwooKGNoYWlucykpCmh5cGVycmVhbGlzdGljIDhrIHVoZApvY2VhbiB3YXZlcwp3aWRlIGFuZ2xlIGV4dGVyaW9yIDIwMjIKdWx0cmF2aW9sZXQKZG9jdW1lbnRhcnkgcGhvdG9ncmFwaAptZWRpdW0gYXJtb3IKamF3LWRyb3BwaW5nIGJlYXV0eQpkcmFtYXRpYyBleWVzCmNoZXJyeSBibG9zc29tIHRyZWVzCnRoZSBzYW11cmFpIGlzIHdyYXBwZWQgaW4gY2hhaW5zCjE5NjMKYWN0aW9uIG1vdmllIHN0aWxsCnN0cmVhbWVycwp0aGlzIGlzIGZpbmUKbW9kZXJuIHBhc3RlbCBjb2xvdXJzCm1hbmdvCmlzb21ldHJpYyBjYW1lcmEKYW5hbW9ycGhpYyBmbGFyZXMKbGF5ZXJlZCBmb2cKaXQgaXMgZW1pdHRpbmcgYSBicmlnaHQKYnVpbHQgb24gYSBzbWFsbApkZWxpY2F0ZSBmaWd1cmUKdmljdG9yCmVsZGVuIHJpbmcgc3R5bGUKcmVlZgp0cm9waWNhbCBmbG93ZXJzCnNwYWNlc2hpcHMgaW4gdGhlIHNreQp0aHVuZGVyc3Rvcm0gaW4gdGhlIHNreQpkYXJrIHNvdWwKbGlrZQpvdXRydW4gYXJ0IHN0eWxlCmdvZHMgcmF5CnVuY29tcHJlc3NlZApmdWxsIG9mIHNpbHZlciBsYXllcnMKYSBicm9hZCBzaG91bGRlcmVkCnJlZCBza2llcwpjaW5lbWF0aWMgbGV2ZWwgc2hvdApjdXN0b20gYnJ1c2gKc3BhY2UgY29sb3JzCnNhdGlzZmFjdG9yeSBzY3JlZW5zaG90CmNvbmNlcHQgYXJ0IGZvciBhIHZpZGVvIGdhbWUKc2hvcnQgcHVmZnkgcGFudHMKc3RpbGwgZnJvbSBhIHdlcyBhbmRlcnNvbiBmaWxtCmNlbCBpbGx1c3RyYXRpb24KZXhwb3NlZCBpbm5lciBnZWFycwpmcm9tIGJsYWRlIHJ1bm5lcigxOTgyKQpwZXJmZWN0IGxpbmVzCnBvcHVsYXIgb24gcGl4aXYKYm9keSBhbmQgaGVhZCBpbiB2aWV3CnN0dXBpZApkZXNvbGF0ZSA6OiBsb25nIHNob3QKZ2Vja28KZmxvd2VycyByYWluIGV2ZXJ5d2hlcmUKZi8xMQpkaXN0YW50IGJhY2tncm91bmQKaGlnaCBkZXRhaWxlZCBmYWNlcwpjaW5lbWF0aWMgZmVlbGluZwpzb2NjZXIgYmFsbCBhZ2FpbnN0IGhlciBmb290CjE5ODBzIGNvbXB1dGVyIGdyYXBoaWNzCnN1bGxlbgpwZXVnZW90IHByZXN0aWdlCmludHJpY2F0ZSBtZWNoYSBhcm1vcgpmcm9tIGZpbmFsIGZhbnRhc3kKZnJvbSBndWlsZCB3YXJzCmZyb20gbGluZWFnZSAyCmZyb20gd293Cmdlb21ldHJpYyBidXQgb3JnYW5pYwpkYXJrIHNjZW5lcnkKdmlld2VkIGZyb20gYWJvdmUKc29sYXIgZmxhcmUKZG9vbXkKYmFyYmFyaWFuIHdhcnJpb3IKdHdvLWRpbWVuc2lvbmFsCmN5YmVycHVuazIwNzcKeC1tZW4Kc3R5bGUgb2YgaWFuIGh1YmVydApmaXJlIGVsZW1lbnRhbAppbiB5ZWFyIDMwMDAKd2VhcmluZyBhIGhhdAppbiBhIGZvcmVzdCBjbGVhcmluZwpkaXN0YW50IGdsb3cKbXJpCnNjYW5kaW5hdmlhbiBkZXNpZ24KMTg4OQpiYXNpbGlzawp3aGl0ZSB0ZWV0aAppcmlkZXNjZW50IHNreQpiZWhhbmNlIDNkCnN0dWRpbyBwaG90b2dyYXBoeSBkc2xyCnBob3RvcmVhbCBlcGljIGNvbXBvc2l0aW9uCnBob3RvIGZyb20gc3BhY2UKbWVjaGFuaWNhbCBhbmdlbAptZWx0ZWQKY3JlYXRpdmUgaW50ZXJwcmV0YXRpb24KaGlnaCBxdWFsaXR5IGZvb2QgcGhvdG9ncmFwaHkKb25pb25zCnBpbmsgbGlnaHQKYW5kcmVhIHJvY2hhCm1pc3QgYW5kIGZvZwppbXBlbmRpbmcgZG9vbQoxMG1tIGxlbnMKZmxvYXRpbmcgaW4gdGhlIHNreQp0aGVhdGVyIG1hc2sKcmVuZGVyZWQgaW4gdW5yZWFsCmxvb2tpbmcgc3RyYWlnaHQgYWhlYWQKaGlnaCBkZXRhaWwgcG9ydHJhaXQKa2VudGFybwptYWdpY2FsIHBhcnRpY2xlcwpuYmEKdmVjdG9yaXNlZApjb25lY3B0IGFydAprYXJpbSByYXNoaWQKc3ViamVjdCBpcyBzbWlsaW5nCmltcHJlc3Npb25pc3QgYXJ0Cm11c2N1bGFyIGZpZ3VyZQphbmltYXRpb24gcHJpbnRlZCBwb3N0ZXIKYmFyYWthCnRvZGRsZXIKZGlnaXRhbCBtYXN0ZXJwaWVjZQp0ZWFsLW5lb24gdmlraW5nIHJ1bmVzCmhvbGRpbmcgYSByYXktZ3VuCmlhaW4gbWNjYWlnCnRha2VuIGluIHRoZSBsYXRlIDE5ODBzCnRha2VuIGluIHRoZSBsYXRlIDE5NzBzCnN0cm9uZyBmYWNpYWwgZmVhdHVyZXMKYnJ1bmV0dGUgaGFpcgpkJmQgbW9uc3RlciBtYW51YWwKbW91dGggY2xvc2VkCmxpdmUgYWN0aW9uIG1vdmllCnByb21vIHNob3QKdGFrZW4gd2l0aCBhIHBlbnRheCBrMTAwMAp0cmFzaCBiYXJyZWxzCmxpeiB0cnVzcwpzdHJ1Y3R1cmFsCmJyeWFuIGNyYW5zdG9uCnRha2VuIGluIHRoZSBlYXJseSAxOTkwcwp0YWtlbiBvbiBhIDE5OTBzIGNhbWVyYQpnbG9vbXkuIGJ5IG1ha290byBzaGlua2FpCmh5cGVyIHJlYWxpc3RpYyB0YXR0b28KaGVhdnkgc2hhZGluZwphIHBvcnRyYWl0IG9mIGp1bmtyYXQKc3RqZXBhbiBzZWppYwp3ZWFyaW5nIGEgZmxvd2VyIGhlYWRwaWVjZQpjbGVhciBwb3J0cmFpdApkYXJrIHNraW4gdG9uZQpmYW50YXN5IGQmZCBjaGFyYWN0ZXIKY2xvc2UtdXAgMzVtbSBtYWNybyBzaG90Cmdsb3Jpb3VzIGxpZ2h0Cmp1bmppIGl0byBhbmQgZ3JlZyBydXRrb3dza2kKYmVhdXRpZnVsIHBvcnRyYWl0IGxpZ2h0aW5nCnJlYWxpc3RpYyB0YXR0b28KZnVsbCBib2R5IHBsYXRlZCBhcm1vcgpiaWcgc2hhcnAgdGVldGgKdGVldGggZmlsbGVkIHdpdGggY2F2aXRpZXMKZ3Jvb20KdmFtcGlyZXMKZmlyZSBhbmQgYnJpbXN0b25lCmZhY2VzIGluIGZvY3VzCmZpbG0gcG9zdCBwcm9jZXNzCm5pcnZhbmEKY2VudGVyIGZyYW1lIG1lZGl1bSBzaG90CmhpZ2hseV9kZXRhaWxlZF9mYWNlISEhCm1hZ2ljIHNwZWxscwppbnNhbmVseSBjb21wbGV4IGRldGFpbHMKYSBzdGlsbCBsaWZlIG9mIGEgcnVzdHkgcm9ib3QKd2F0ZXJmYWxsIGJhY2tncm91bmQKcmFjaW5nCmRhcmsgaG9yc2UgY29taWNzCnBvbGFyIGJlYXIKZW5lcmd5IGZsb3dzIG9mIHdhdGVyIGFuZCBmaXJlCmhvbHkgbGlnaHRzCmZ1bGwgaGQgcmVuZGVyCmxvbmcgbGltYnMKYSB0ZWVuYWdlIGdpcmwgY2hlZXJsZWFkZXIKb2ZmaWNpYWwgcGhvdG8Kb2ZmaWNpYWwgcGhvdG8gcG9ydHJhaXQKd2F0ZXIgZm91bnRhaW4KdHJhbnNwb3J0YXRpb24gZGVzaWduCnNoYXJrIHRlZXRoCmhvdXNlcGxhbnRzCmhvdXNlIGludGVyaW9yCmNhbG0gY29sb3JzCmp1bmppIGl0byBzdHlsZQppbnRyaWNhdGUgZmFjaWFsIGZlYXR1cmVzCm5hbmN5IGdyb3NzbWFuCnNob3dpbmcgdGVldGgKZXllIHBhdGNoIG92ZXIgbGVmdCBleWUKY29taWMgcGludXAgc3R5bGUKZnV0dXJpc3RpYyBzcHkKMS8yMDBzCm5lb24gY3liZXJwdW5rIHZpYnJhbnQgY29sb3JzCmFkdmVudHVyZXIKYWlueiBvb2FsIGdvd24KZGVib3JhaApwc3gKZGV0YWlsZWQgcGhvdG9ncmFwaCBoaWdoIHF1YWxpdHkKamFwYW5lc2Ugc2hvdWpvIG1hbmdhCmFsaWNpYSB2aWthbmRlcgphbGllbiBhYmR1Y3Rpb24KcGxhbmV0cyBpbiB0aGUgc2t5CnNob3QgYXQgZ29sZGVuIGhvdXIKLSAxMnAKcHJlZ25hbnQKZ3JlZW4gbmVvbiBkZXRhaWxzCndlYXJpbmcgd2hpdGUgY2xvdGhlcwpzaGUgaXMgbGF1Z2hpbmcKYW1lcmljYQpjYW52YXMgcGFpbnRpbmcKZGVzaWduIG1pbGsKcnVzc2lhbiBhcmNoaXRlY3R1cmUKamFwYW5lc2Ugc3RyZWV0CnN0ZXRob3Njb3BlIQooZG9jdG9yKQooKHJvYm90KSkKZGV0YWlsZWQgZmFudGFzeSBhcnQKYW4gYWxpZW4gbGFuZHNjYXBlCnNjaS1maSB0aGVtZWQKcGludHJlc3QKYW4gZWxlZ2FudAppbiBhIGJlZHJvb20KZXhvdGljIGZsb3JhCmdyYW5kZmFpbHVyZQptb3JwaGluZwpzdGVhbXB1bmsgYmFja2dyb3VuZApkZWFkIGV5ZXMKMjAxMgpiYXVoYXVzZQpoaWdoIHJlc29sdXRpb24gY29uY2VwdCBhcnQKc21vb3RoIHJlbmRlcmluZwpkd2FydmVuIGFyY2hpdGVjdHVyZQpwdXJwbGUgY29sb3IKYW5jaWVudCBlZ3lwdGlhbiBhcnQKZ29vZ2xlIHN0cmVldCB2aWV3Cm9mZmljaWFsIGZhbmFydCBiZWhhbmNlIGhkCnNjaWZpIGNoYXJhY3Rlcgpkcmlua2luZyBjb2ZmZWUgYXQgY2VudHJhbCBwZXJrCmRldmlsbWFuCmN1dGUgYW5pbWUgZmFjZQpmYXZlbGFzCnNoYWRvd3ZlcnNlIGNoYXJhY3RlciBjb25jZXB0CnBlYWNlZnVsbApiaXJkJ3MtZXllIHZpZXcKNGsgYmx1cmF5CmxvbmcgdGhpY2sgc2hpbnkgYmxhY2sgYmVhawpkZWxpcmlvdXMKc3VubnkgY2xlYXIgc2t5Cm1vdmllIHN0aWxscwphcmFiIG1hbiBsaWdodCBiZWFyZAphcmFiaWMgY2FsbGlncmFwaHkKYXJhZ29ybgppbnRyaWNhdGUgb3JuYXRlIGFybW9yCndhciB0aGVtZQp0aGUgcGFzc2FnZSBvZiB0aW1lCmVsZHJpdGNoIGhvcnJvcnMKb2N0YW5lIDhrIHJlbmRlcgp3aWRlIGxlbnNlCnRyYW5jZQpjZW50ZXJwaWVjZQplbnZpcm9ubWVudCBhbmQgY29uY2VwdCBhcnQKbWFzdGVyCmFzaG9rYSB0YW5vCnN1cGVyIGRldGFpbGVkIHJlbmRlcgpnb3JvIGFuZCBrdW5rbGUKYmx1ZSBiYWNrbGlnaHQKc3BpcmFsIGdhbGF4eQpoeWJyaWQgaHVtYW4gLyBhbnRocm8KdmlzY2VyYSBzcGxhdHRlcmVkCmJhdHRsZSBhcm1vdXIKYXVzdHJhbGlhbiBiZWFjaAp1cmJhbiBleHBsb3JpbmcKYXphdGhvdGgKYXp0ZWMgd2FycmlvcgpndW5kYW0gd2luZyBzdHlsZSBhcm1vcgpndW5kYW0gYXJtb3IKaC5yLiBnaWdlciBhbmQgamVmZnJleSBzbWl0aAoxNDRwCjIwMjUKbW9uby15ZWxsb3cKY2hyaXN0b3BoZXIKb3JnYW5pYyBiaW9tYXNzCnJlZCBhcm1vcgpjb3ZlciBnYW1lIGFydAoxOTkwJ3MKOGsgaGlnaCBkZXRhaWxzCmJheW9uZXR0YQpqb2pvIGFuaW1lIHN0eWxlCmhhcHB5IHZpYmVzCmV4cGxvc2l2ZSBlbnRyYW5jZQpvcmFudGFsaXN0Cm9tZWdhCjE2ayBoZApiZWF1dGlmdWwgY2FtZXJhcGhvbmUgMjAwMHMKZmFudGFzeSBhcmNoaXRlY3R1cmUKZGFyayBibGFjayBoYWlyCnN0b3JlZnJvbnQKdGFrZW4gd2l0aCBhIHBlbnRheDEwMDAKYmVpamluZwo0ay84awoxLzEyNTBzIGF0IGYvMi44CnR5cG9ncmFwaGljCmxhenkKdW5pdmVyc2UgaW4gdGhlIHNreQplYXJ0aCBpbiBiYWNrZ3JvdW5kCmVwaWMgZGVzaWduCnJheQo2MG1tCnByb25vdW5jZWQgY2hlZWtib25lcwpkaWFtb25kIHNoYXBlZCBmYWNlCmNvcnBvcmF0ZSBwb3J0YWl0CnBhZ29kYQpjYW1lbG90CmxvdyBhbmdsZSBwZXJzcGVjdGl2ZQp0YXNzZWxzCmpheWxlbiBicm93bgpzaG9ndW4gZXJhCmFuZW1vbmVzCmJyaWdodCB2aXZpZCBjb2xvcnMKc2hvbmVuIGp1bXAKZmx5aW5nIHBhcnRpY2xlcwpzdHlsaXplZCBjaGFyYWN0ZXIKZ3RhIDUgY292ZXIgc3R5bGUKZnVycmVkCmNlbwpzb3VyY2UgZW5naW5lIGZvb3RhZ2UKc3BpcmFsaW5nCmNhbGljbyBjYXQKY2FtcGluZwppbnRlcm5ldCBtZW1lCmNhcmEgZGVsZXZpbmduZQphaXJwbGFuZXMKZmFjZXRlZApyb21hbiBtb3NhaWMKc3dhcm0KYXJjaGFlb2xvZ3kKd2l0aCBoYXQKZ3RhIHN0eWxlCmdyZWcgcnVrb3dza2kKMTkyNQp0YXR0b28gc2xlZXZlIG9uIGhlciByaWdodCBhcm0KcmVhbGlzdGljIHBob3RvIHNob290CmNyb25lbmJlcmcgYXV0b21hdGEKY2hyb25vIHRyaWdnZXIKcmI2cwpnb2QgcmF5cyEhIQpjbGF3CmFydCBub3V2ZWF1IG1hc3RlcnBpZWNlCm5pbmphcwpkaXJlIHdvbGYKcmVkIGxpcXVpZApmb2N1c2VkIG1hY3JvIHBob3RvZ3JhcGh5CmJyb3duIGhhaXIgYW5kIGEgcGVyZmVjdCBib2R5CmNsb3VkIHN0cmlmZQpjb2xpbiBmYXJyZWxsCmJhc3MKY29sbGVlbiBtb29yZSAyNSB5ZWFycyBvbGQK8J+UpSDwn5iOIPCflbnvuI8g8J+RgApibGFjayBhbmQgZ3JlZW4KY29ycG9yYXRlIG1lbXBoaXMKbmlnaHQgc2t5OyA4awpwYWludGVkIHdhcmhhbW1lciA0MGsgbWluaWF0dXJlCnZlY3RvciBhcnR3b3JrCnNvZnQgYnJ1c2gKcmdiIGxpZ2h0cwp3aGl0ZSBjb2F0Cm5pY29sYXMgY2FnZSBhcyBzdXBlcm1hbgptb3JlIHJlZmxlY3Rpb24KanVua28gZW5vc2hpbWEKaGllcm9ueW11cyBib2NoCmludHJpY2F0ZSBtYWNoaW5lcnkKd2Fpc3QgaGlnaApmYW50YXN5IGNsb3RoaW5nCnJhaWRlcnMgb2YgdGhlIGxvc3QgYXJrCmRhcnRoIG1hdWwKcG9wIGFydCBtYXN0ZXJwaWVjZQpiZWtzaW5rc2tpCmRhdmlkIGxpZ2FyZSBtYXN0ZXJwaWVjZQplYXRpbmcgYSBoYW1idXJnZXIKZCZkIGRhcmsgZmFudGFzeSBzdHlsZQpkZW1lbnRpYQpiZWVwbGUgYW5kIGFscGhvbnNlIG11Y2hhCnJvY2sgZm9ybWF0aW9ucwptaWxsZW5uaWEgYWdvCnN0cm9uZyBuZW9uIGxpZ2h0aW5nCm92ZXJmbG93aW5nIHdpdGggZGlhcGVycwphaXJzaGlwcyBpbiB0aGUgc2t5Cmluc3BpcmVkCm9taW5vdXMgZHJhbWF0aWMgd2lkZSBhbmdsZQpndW5icm9rZXIKZ3VuIGF1Y3Rpb24KbmF0dXJhbCBnZW9ncmFwaGljCmdsb3dpbmcgaW5zaWRlCmluIHRoZSBoYWxsIG9mIGFyZWEgNTUKZGlzbmV5IHByaW5jZXNzCmRpc25leSB3b3JsZApnbGl0Y2h3YXZlCmdydW1weSBjYXQKZXZlcnl3aGVyZQpncmVlbiBjb2xvcnMKdmludGFnZSA4MHMgcHJpbnQKcm95YWwgcGFpbnRpbmcKZG9vbSBndXkKb3ZlcndhdGNoIGdhbWUKbW91bnRhaW5zaWRlCmRyYWcgcXVlZW4KcnBnIGFydApmdW1lcwpwbGF0aW5nCmRyYXdpbmcgb24gcGVuY2lsCnN0cmVldCBsYW50ZXJucwoxNzkwCnJhcGhhZWxpdGUgYW5kIG11Y2hhCmxpZ2h0IHRyYWlsCmh5cGVyIHJlYWxpc3RpYyBvaWwgcGFpbnRpbmcKZWxldmVuIGZyb20gc3RyYW5nZXIgdGhpbmdzCmZpbG0gc3RpbGwgZnJvbSAnZG9jdG9yIHN0cmFuZ2UnCndhbmQKbXlzdGljYWwgZm9yZXN0Cm55bXBoCmJsYWNrIHNraXJ0CmVtbWEgd2F0c29uIGFzIGhhcmxleSBxdWlubgpsZW5zZmxhcmVzCnNob290aW5nIGFuZ2xlIGZyb20gYmVsb3cKZW1tYSB3YXRzb24gaW4gc3RhciB0cmVrCmxvb2tpbmcgYmFja3dhcmRzCnR2IHNlcmllcwpjYW5vbiBwb3J0cmFpdApzcXVhdHRpbmcKbW9vbiBiYWNrZ3JvdW5kCmV0IGluIGFyY2FkaWEgZWdvCnN0YW5kaW5nIGluIGEgZGFyawpkdXN0eSBhdG1vc3BoZXJlCmZhY2Ugb2YgYSBhbGllbiBkZWl0eQpmb3IgaGlyZSAzZCBhcnRpc3QKcGl4YXIgYW5kIGluZHVzdHJpYWwKbGlnaHQgYm9yd24gaGFpcgpnb3JnZW91cyBhbmQgYmVhdXRpZnVsCnN0YW5kaW5nIG9uIGEgcm9jawpmZW1hbGUgY2xlcmljCnJlZCBsZWF0aGVyIGFybW9yCmxvbmcgc2tpcnQKZmVtaW5pc20gaW4gdGhlIDI0dGggY2VudHVyeQplcGljIHBlcnNwZWN0aXZlCmhvbmV5IGFuZCBiZWUgaGl2ZQpkb29ycyBvZiBwZXJjZXB0aW9uCmZsb3dpbmcgbWFuZSBhbmQgdGFpbApwZWdhc3VzCmpldCBibGFjayB0dWZmbGUgY29hdAp0YW5lZCBza2luCnN1bnNldCBsaWdodGluZyA4awpkcmF3biBpbWFnZQpkaXNuZXkgMmQgYW5pbWF0aW9uIHN0aWxsCmZ1bGx5IGFybW9yCmRlZXAgYmx1ZSBleWVzCmZ1dHVyaXN0aWMgc3BhY2VzaGlwCmZ1dHVyaXN0aWMgdXRvcGlhbiBjaXR5CmJsdWUgdHJlZXMKZ2FyZ295bGUKc29mdCBtaXN0Cmdvb2QgZGF5Cm1vdXRocwpyb2JvdCBwYXJ0cwpsb3cgYW5nbGUgbG9va2luZyB1cApjdXRlIGFuaW1lCmVsZWdhbnQgZGlnaXRhbCBwYWludGluZwpnbm9sbApheG9sb3RsIGNyZWF0dXJlCmhvbGRpbmcgYSBib29rCmZhZGVkIHBpbmsKdHVycXVvaXNlIGpld2VscnkKZ29yZ2VvdXMganVuZ2xlIHJhbmdlcgp0aGljayBib3cKb3JuYW1lbnRhbCBhcnJvd3MKa2FuY29sbGUKbG9va3MgcmVhbGlzdGljCm1pY2hlbGluIHN0YXJyZWQgcmVzdGF1cmFudAppcnJkZXNjZW50IGdsb3cKc3BhY2UgZHVzdApjb2hlcmVudCBwb3J0cmFpdHMKaGFyZApzb3VuZCB3YXZlcwpoYXJtb255IG9mIG5hdHVyZQozMmsgdWhkCnRoZSBtaW5pb25zCnBob3RvcmVhbGlzdGljIGNvbG9ycwpoYXJyeSBwb3R0ZXIgZmlsbQptb3Rpb24gbGluZXMKYmFja2dyb3VuZDogYmF0dGxlIHNjZW5lCmhlLW1hbiB3aXRoIGEgZGFyayBtYW5uZXIKc3RhciB3YXJzIHVuaXZlcnNlCnJvdW5kIHB1cGlsCnZpa2luZyBjdWx0dXJlCmhlcmN1bGVzCmJsYWNrIHJ1YmJlciBzdWl0CnJvY2t5IGxhbmRzY2FwZQpyZXN0cmFpbmVkCnZpYnJhbnQgbHVzaCBuZW9uIGxpZ2h0aW5nCmNoZXNsZXkKMTkxNQpibGFjayBzbGltZQpodW1hbiBib2R5IGJyZWFraW5nIGF3YXkKb3JuYXRlbHkgZHJlc3NlZAp0YWJheGkKc2l0dGluZyBvbiBhIGxlYWYKbW9zdCBkb3BlCmNhc2ltaXIgYXJ0CnR3byBwZXJmZWN0IGV5ZXMKZmVlbGluZwprb3JlYW4gaWRvbAppY2VsYW5kIGxhbmRzY2FwZQppbmR1c3RyaWFsIGNvbXBsZXgKaW50ZXJpb3Igb2YgdGhlIGhhbGwgaW4gYXJlYSA1NQpmdWxsIG9mIGFsaWVuIG1pbGl0YXJ5IGVxdWlwbWVudApyZW5kZXIgdW5yZWFsIGVuZ2luZS1oIDcwNApwcmlzbWFjb2xvciBwZW5jaWxzCnByaXN0aW5lIHdhdGVyCnByb2Zlc3Npb25hbCBwaG90byBzaG9vdAppdCBpcyBuaWdodApleHRyYW9yZGluYXJ5CmphcGFuZXNlIG1hbmdhIHN0eWxlCnByb2R1Y3QgZGVzaWduIHJlbmRlcgpqYXBhbiBuYXR1cmUKZ291cm1ldCBhbmQgY3JhZnRzCmNvaGVyZW50IHN5bW1ldHJ5CmphciBqYXIgYmlua3MKYnJvbnplIGFybW9yCmd0YSB2IGNvdmVyCmplbm5hIGNvbGVtYW4gYXMgdGhlIGRvY3RvcgpqZXNzaWNhIHJhYmJpdAp0ZWVuYWdlIGdpcmwKMTk3MCdzCnphdW4KZGFyayBwaG90bwpnb2xkIGNoYWluCmluc2lwaXJpbmcKbGl2ZS1hY3Rpb24KaHlwZXIgZGV0YWxpZWQKbW90aXZhdGlvbmFsIHBvc3RlcgpqdWxpdXMgY2Flc2FyCnNwYWNlIGFybW9yCmNhbWVyYSBmb290YWdlCmNoaWxkcmVucyBpbGx1c3RyYXRpb24KaW4gc3R5bGUgb2YgbmFub3NwYWNlCmtlZXBpbmcgeW91IHNhbmUKYW5kIHlvdSBmYWRlIGF3YXkganVzdCBlbm91Z2gKa2VuZHJpY2sgbGFtYXIKdGhlIG11cHBldHMKc3R1ZGlvIGJvbmVzCnRpbWUgbWFnYXppbmUKcmV2b2x2ZXJzCmZsb3dlciBzaG9wIHNjZW5lCnR1bXVsdHVvdXMgc2VhCmNvdHRvbiBjYW5keSB0cmVlcwprdXJpc3UgbWFraXNlCml2YW4gbGFsaWFzaHZpbGkKbW90aXZhdGlvbgpwYWludCBkcm9wcwppbiBkYXJrbmVzcwpsaWwgdXppIHZlcnQKc2VwaWEgdG9uZWQKbGl0dGxlIHdpdGNoIGFjYWRlbWlhCmxvZmkgcG9ydHJhaXQKYnJvYWQgZGV0YWlsCm1pZGRsZSBlYXJ0aAp1bHRyYSBkZXRhaWxlZCBoYXVudGVkIGhvdXNlCmVzdGFibGlzaGluZyBhdG1vc3BoZXJpYyBzaG90CmxvdmVjcmFmdGlhbiBtb25zdGVyCmhpZ2ggZGV0YWlsIGludHJpY2F0ZQpteXN0ZXJpb3VzIGZvZwptNCBzb3Btb2QgaWkgZ2lybHMgZnJvbnRsaW5lCmNvZXJlbnQgZmFjZSBhbmQgYm9keQppdGFsaWFuIHJlbmFpc3NhbmNlCnN1cGVyIGRldGFpbGVkIGZhY2UgYW5kIGV5ZXMKcHV0dGkKcG9sYXJvaWQgY29sb3IgcGhvdG8KbWF0dGUgZ291YWNoZSBpbGx1c3RyYXRpb24KZm9yZWdyb3VuZCBmb2N1cwpwb3N0IGFwb2NhbHlwdGljIGxhbmRzY2FwZQpjYXN0aW5nIGEgcG93ZXJmdWwgc3BlbGwKZGV2aWFudApyaWRpbmcgYSB1bmljb3JuCnJhaW4gZHJvcHMgb24gZmFjZQpqYXBhbmVzZSBob3Jyb3IKZ2FtZSBzY3JlZW4KbWFydHkgbWNmbHkKbG9uZ2VyIGhhaXIKbWVuCmNpY2FkYSB3aW5ncwptZXRhbW9ycGhvc2lzCmhkIGZvb3RhZ2UKZGljdGF0b3IKc3RvbmVkIGV5ZXMKd29vZGJsb2NrCnN0b25lIGFuZCB3b29kCm1pcmFuZGEga2Vycgo0ayB0diBzdGlsbAptaXlhbW90byBtdXNhc2hpCmFnaXRhdGVkCnNjcmVlbiBsaWdodApwZWx0CmhlYWxlcgpmb3J0cmVzcyBnYXRld2F5Cm11bHRpLWRpbWVuc2lvbmFsIGxhdGVudCBzcGFjZQpob2t1c2FpIHN0eWxlCm5hcG9sZW9uCnJvY29jbyBjb2xvciBzY2hlbWUKdGVjaCBkZW1vCmZhaXJ5LXRhbGUgaWxsdXN0cmF0aW9uIHN0eWxlCm5pY29sZSBraWRtYW4Kbm90aGluZwpzYW5kcmEgcGVsc2VyCmluIHRoZSBraXRjaGVuCm9ubXlvamkgZGV0YWlsZWQgYXJ0CnJlYWxpc3RpYyBwYWludApvcm5hdGUgYm9yZGVyIGZyYW1lCmdpbGJlcnQgc3R1YXJ0IHN0eWxlCmFib3ZlIGEgZm9yZXN0CmZhcgpkb29kbGUgYXJ0CmRhcmsgYmx1ZSB0b25lcwpkYXJrIGJsdWUgc3BoZXJlcyBmbHkgYXJvdW5kCnppbGxvdyBpbnRlcmlvcgpjaW5lbWF0aWMgbW92aWUKc2hvdGd1bnMKcGhvZW5peCByaXNpbmcKcGhvdG8gdGFrZW4gd2l0aCBjYW5vbiA1ZApzZWEgb2YgdGhpZXZlcwphbmNpZW50IG1hZ2ljCmYvMi44bCBjYW5vbiBlZiBpcyBsZW5zCnBoeXNpY2FsIDogdGlueWVzdCBtaWRyaWZmIGV2ZXIKYmlvbmljIGV4cGxvZGVkIGRyYXdpbmcKamV0IGJsYWNrIHR1ZmZlIGNvYXQKZGFyayBibHVlIGplYW5zCmxpZ2h0IGJyb3duIHNraW4hCnBpZXJjZSBicm9zbmFuCmJlYXV0aWZ1bCB3b29kZW4gZnJhbWUKcGluayBmbG95ZCBhbGJ1bSBjb3Zlcgpwb29ybHkgZHJhd24Kd2VhcmluZyBnaWxkZWQgcm9iZXMKY3liZXJwdW5rIHZpYnJhbnQgY29sb3JzCnBvcnRyYWl0IG9mIGFsYmVydCBlaW5zdGVpbgpwb3J0cmFpdCBvZiBhcmlhbmEgZ3JhbmRlCnBvcnRyYWl0IG9mIGJpbGxpZSBlaWxpc2gKcG9ydHJhaXQgb2YgY3Jpc3RpYW5vIHJvbmFsZG8KcG9ydHJhaXQgb2YgZW1tYSBmcm9zdApwb3J0cmFpdCBvZiBtYXJpbmUgbGUgcGVuCmdlbnRsZSBmYWNlCnNvZnQgZmFjZQprYXRlIG9sZXNrYSBhbmQgamltIGtheQpwb3J0cmFpdCBvZiB3YWx0ZXIgd2hpdGUKYnJpZ2h0IGhhbG8KZWR3YXJkIGJ1YmEKZmVtYWxlIHdpdGggbG9uZyBibGFjayBoYWlyCmJhcmUgdGhpZ2hzISEhCnNpbW9uZXR0aQpwb3J0cmFpdCBvZiBhIG1hbGUgd2FycmlvcgpzaGFycCBzaGFkb3dzCmRyYW1hdGljIGNvbG9yZnVsIGxpZ2h0aW5nCnBvcnRyYWl0IG9mIGEgcHJpbmNlc3MKcG9ydHJhaXQgb2YgYSBzb3JjZXJlc3MKc21hbGwgbGlwcwpjb29sIGNvbG9yIHNjaGVtZQpwb3J0cmFpdCBvZiBhbiBhbGllbgpib255CnN0ZWFtcHVuYwpkYXogc3R1ZGlvIGdlbmVzaXMgaXJheSBmZW1hbGUKcmV2ZWFsaW5nIHN0eWxpc2ggZHJlc3MKcG93ZXIgcmFuZ2VyCnRodW5kZXJvdXMKY2h1cmNoIGJhY2tncm91bmQKcmF5dHJheWNlZApwcm9mZXNzaW9uYWwgZGVzaWduCmZsb3dlciBvZiBsaWZlCnBzeWNoZWRlbGljIHRyaXAKcHN5bG9ja2UKaW50cmljYXRlIGRldGFpbGVkIGJydXNoIHN0cm9rZXMKc3Ryb2JlIGxpZ2h0cwptYWdpY2FsIHNjaG9vbApsb3cgY3V0IGRyZXNzCnN0cmVzc2VkCnJpZGluZyBhIGJpa2UKcmloYW5uYQpyb2JlcnQgZG93bmV5IGpyCnJ1YmJlciBzdGFtcApyb3Jvbm9hIHpvcm8Kc3VuZG93biBtaXN0eSBmaXJlZmx5IHdpc3BzCnBpeGFyICgyMDE4KQpkZWVwIGNvbXBsaW1lbnRhcnkgY29sb3JzCnBob3RvIHJlYWxpc3RpYyBzdHlsZQp2YWxlbnRpbiBzZXJvdiBzdHlsZQphdG9taWMKc2Ftc3VuZyBzbWFydHRoaW5ncwpzaXIgam9zaHVhIHJleW5vbGRzCjE3NzUgb2lsIHBhaW50aW5nCnNhbXVyYWkgamFjawphbGV4IGhvcmxleSBhbmQgamltbXkgbmVsc29uIQpzaGFpLWh1bHVkCnNjYXJsZXQgam9oYW5zc29uCmxhbmRzY2FwZSA0awpsb3ZlY3JhZnRpYW4gYXRtb3NwaGVyZQpzZXZlcnVzIHNuYXBlIGRhbmNlcyBpbiBhIGJhcgpoeXBlcnByaXNtCnNoYXJrbmFkbwpza2lubnkgY2F1Y2FzaWFuIG1hbgp3aXRoIGEgbGFyZ2UgaGVhZCBhbmQgYmlnIGV5ZXMKYmx1ZSBhbmQgb3JhbmdlCndpdGggY29sb3JmdWxsIGplbGx5YmVhbnMgb3JnYW5zCnNub29wIGRvZwpzb24gZ29rdQpkZXRhaWxlZCBmdWxsIGJvZHkgY29uY2VwdCBhcnQKYnJvd24gY29sb3JzCmh1Z2UgZXhwbG9zaW9uCnBzeWNoZWRlbGljIHN0eWxlCm1lbGxvdwpwYXN0Cm9sZCB0cmVlCmZlbWFsZSBsb29raW5nCm1ldGFsIGZsb29yCnN1Ym1hcmluZQpzdWJ3YXkgc3RhdGlvbgpzdWNjZXNzCnN1Y2N1YnVzCmdyZWcgcnV0a293c2tpIGFuZCBqYW1lcyBndXJuZXkKY29sb3JmdWwgbXVzaHJvb21zCmZhaXJ5IG1hZ25pZmljZW50CmluIHRoZSBtdXNldW0KaW4gd2hpdGUgdHVydGxlbmVjayBzaGlydAp0YXJ6YW4KdmlldyBmcm9tIGEgZGlzdGFuY2UKYmVhdXRpZnVsIHJha2luZyBzdW5saWdodApiZWVwbGUgYW5kIHRpbSBoaWxkZWJyYW5kdApndW5icmVha2VyCmRhcHBsZWQgc2lsdmVyIGxpZ2h0aW5nCnBvc3RlciEhIQpvcm5hdGUgamV3ZWxlZCBjcm93bgpsb2JlbGlhCnRoZSB3ZWRuZXNkYXkgZnJvZwpmbG9hdGluZyBtZXRhbGxpYyBvYmplY3RzCmdsb3dpbmcgZ3JlZW4gY3J5c3RhbHMKYW5kcmVhcwpmZXJ0aWxpdHkKNGsgaGlnaCBkZWZpbml0aW9uCmVsZGVyCnRoZSBsYXN0IGRheSBvbiBlYXJ0aApzb3Jyb3dmdWwKdGhlIG1vb24gY3Jhc2hlcyBpbnRvIHRoZSBlYXJ0aAp0aGUgc3RhcnJ5IG5pZ2h0Cnl1bW15CnRoaXMgaXMgYSBtb25zdGVyCnRpbGwgbGluZGVtYW5uCnBpbmsgbGlnaHRpbmcKZmVycmFyaSBsb2dvIG9uIGl0J3MgY2hlc3QKdW50aXRsZWQKdGh1bmRlcnN0b3JtcwphbWFybwp0cmlzdGFuIGVhdG9uJ3Mgd2FsbHBhcGVyCmplZmZlcnkgc21pdGgKbXlzdGVyaW91cyBjcmVlcHkKY2xlYW4gZnJvbSBzY2VuZSBmcm9tIHR3aW4gcGVha3MKZ2xpdGNoIGFydCBhZXN0aGV0aWMKY3lib3JnIGV5ZXMKaHVnZSBvYnNpZGlhbiBzdHJ1Y3R1cmVzCmludHJpY2F0ZSBsaW5lIGFydAphbm5pZSBsZWJvdmV0egpmbHVtZQpnbG9vbXkgd2VhdGhlci4gaHlwZXJyZWFsaXN0aWMKbm8gZmFjZXMKaHlwZXIgcmVhbGlzdGljIGlsbHVzdHJhdGlvbgpzdHlsZSBvZiBhbHBob25zZSBtdWNoYQpmbGllcwp3aXRoIGRlcHRoIG9mIGZpZWxkCnZpa2luZyB3YXJyaW9yCnRoZSBsYXN0IHN0YW5kCnV0aWxpdGFyaWFuCnNjaSBmaSBjaXR5CndhbHRlciB3aGl0ZSBpbiBndGEgdgpkZWFkIGJvZGllcwp3YXJyaW9yIHByaW5jZXNzCmJhcnJ5IHdpbmRzb3Igc21pdGgKZnV0dXJpc3RpYyBzZXR0aW5nCmNvbG9yZWQgbGlnaHRpbmcKYXV0aG9yaXRhcmlhbgp3b21hbidzIHBvcnRyYWl0CnBhbnRpZXMKZGlydHkgbGVucwp4ZW5vYmxhZGUKeGkgamlucGluZyBhcyB3aW5uaWUgdGhlIHBvb2gKeWFuZGVyZQp5b3UKc3ltbWV0cmljYWwgYXJ0d29yay4gY2luZW1hdGljCmJhY2sgdmlldyEhCnNoYXJwIQpwcyA0IGluIC0gZ2FtZSBjaW5lbWF0aWMKZ29vZ2xlIHBhcnRpIHJlc29sdXRpb24Kc3VuYnVyc3QgYmVoaW5kIHdvbWFuCmNpbmRtYXRpYwphbmNpZW50IGVneXB0aWFuCnN0eWxlIG9mIGJsYWRlIHJ1bm5lciAyMDQ5CnZpcmdpbmllIHJvcGFycwp2ZXJ5IHNoYXJwIGRldGFpbHMKY2F0ZG9nCml2b3J5IGFuZCBjb3BwZXIKMjAxMApzbmsKd2l0aCBmbG93ZXIgZmllbGRzIGFzIGZvcmVncm91bmQKYmxhY2sgd2F2eSBoYWlyCmZ1dHVyaXN0aWMgc3RhciB3YXJzIHZpYmUKbGlnaHQgZXllcwpzcGFjZSBqdW5rCmZhbmN5IGxpZ2h0aW5nCmludHJpY2F0ZSBoaWdobHkgZGV0YWlsZWQKY2hlYXAKY2FtZXJhIHNoYWtpbmcKc29mdCBpbHVtaW5hdGlvbgptb29uIGNyYXRlcnMKaGFyZCBsaW5lcwpmYWNlIGFuZCBzaG91bGRlcnMKbmVvbiBsaWdodCBzaG93aW5nIGluanVyaWVzCmp1c3RpbiBnZXJhcmQgYW5kIGdyZWcgcnV0a293c2tpCnpodW94aW4geWUKbWF5YSByZW5kZXJlcgpnZWVuc3MgYXJjaGVudGkgZmxvcmVzCmV4dHJlbWUgY29sZAp2aW9sZXQgaGFpcgp0YW5nbGVkIHZpbmVzCmphcGFuZXNlIHByaW50IGFydApzdHJpcGV5IHBhbnRzCmJlYW1zCndsb3AgYW5kIGdyZWcgcnV0a293c2tpCmtvZGFrIHBvcnRyYSA0MDAgZmlsbQp2aW9sZW5jZSBpbiBoZXIgZXllcwpjbG90aGVkIG5vbiAtIG51ZGUgcG9ydHJhaXQKaW4gYmFja2dyb3VuZApiYXJvcXVlIGFyY2hpdGVjdHVyZQp0aGUgbWFzayBpcyBicm9rZW4KZmFjZSBtdXNjbGVzCnJlZCAtIGV5ZWQKc2tlbGV0b24gLSBsaWtlIGNyZWF0dXJlCmhkIHZpYnJhbnQKY29tcGxleCBzd2lybGluZyBhY2NlbnRzCmh5cGVyIGNvbG9yZnVsCnJpY2ggdml2aWQgY29sb3Igc2NoZW1lCmhhbnMKcHJlLXJhcGhhZWxpdGUuIGFydCBub3ZlYXUKY2luZW1hdGljIGJhY2tsaXQgbGlnaHRpbmcKYmVhdXR5IHJldG91Y2gKZGlzbWVtYmVyaW5nIHBlb3BsZQp3aGltc2ljYWwhISEKcGVvcGxlIHdhbGtpbmcgb24gc3RyZWV0CmJsdWUgcHVycGxlIGdyYWRpZW50Cm1vZHVsYXIgc3ludGgKbW92aWUgc3RpbGwgOCBrCmdvbGQgY2hhaW4gYmVsdApjcmVhbSBjb2xvcmVkIGJsb3VzZQptZXJlZGl0IGZyYW1wdG9uIHN0eWxlCmJsYWRlIHJ1bm5lciB0ZWNoCmRlZXAgY29sb3Igc2NoZW1lCmJyb20gZ2VyYWxkCmFmdGVyZWZmZWN0cwpqZW4geW9vbgpmaWxtIG5vaXJzIQpvaWwgb24gY2FudmFzIHNoYXJwCnVsdHJhZmluZSBkZXRhaWxlZApuZW8tY2xhc3NpY2FsCmNsZW1hdGlzIGluIHRoZSBkZWVwIHNlYQphbiBhbWVyaWNhbiBwcm9wYWdhbmRhCmFsY2hlbWlzdCBsYWIKbG9tb2dyYXBoeSBsYWR5IGdyZXkKYXVnbWVudGVkIHZpc2lvbgozIGQgbGFuZHNjYXBlCmFua2gKcmVkLWZhYnJpYwpsdW1pbmlzdCBhbmQgYmFyb3F1ZSBzdHlsZQpmbG9hdGluZyBkcm93bmVkCnRva3lvIGFraWhhYmFyYSBzdHJlZXQgY2l0eXNjYXBlCm1hY2hpbmUgZ3VuCndpdGggYSBzb2Z0CnRyZW5kaW5nIGluIGluc3RhZ3JhbQp1bHRyYSB3aWRlIGFuZ2xlIHNob3QKY2luZW1hdGljIGNvbXBvc2l0aW9uIDggawpyZWFsaXN0aWMgYW5kIGRlZmluZWQgZmFjZQptZXNzeSBoYWlyc3R5bGUKY3JlYW0gY29sb3JlZCBwZWFzYW50IHNoaXJ0CmRhcmsgZ3JlZW4gY2xvYWsKcm91bmQgaG9vZApkYXJrIGZvZ2d5IGJhY2tncm91bmQKbXlzdGVyaW91cyB3b21hbgpmYW50YXN5IHN0eWxlIGNsb3RoaW5nCnNhbHV0aW5nCmJyaWdodCBhbmQgaGFwcHkKb24gc3RpbHRzCnRvbSBiYWRzaGF3Cm5pZ2h0IHZpc2lvbiB2ZXJ5IGJsdXJyeQpwcm9kdWN0cGhvdG8KbWFzdGVycGllY2UgZmluZSBkZXRhaWxzCmxpcXVpZCBpbnRlcmZhY2UKaW50ZXJmYWNlCmxpbWJzCnN0YWluZWQgYW50aXF1ZSBjb3BwZXIgY2FyIHBhaW50CmVtZXJhbGQgZ29sZCBhbmQgYmVrc2luc2tpCmJsdWUgd2F0ZXJzCmRldmkgd2luZ3MKdmVuZGluZyBtYWNoaW5lcwp3YXRlcmNvbG91cnMKZmxhdCB3YXRlciBjb2xvciB0ZXh0dXJlCnB1bHAgc2NpZW5jZSBmaWN0aW9uCnNvdXRoZXJuIGdvdGhpYwpjb2JibGVzdG9uZSByb2FkCmhpZ2ggZ3JhZGllbnQKcm9zcyBnZWxsZXIgc2NyZWFtaW5nCm1pZG5pZ2h0IG1pc3QgbGlnaHRzCmhvbmRhIGNpdmljCm1vb3IKZ3VpZG8KbW9ob2x5IC0gbmFneQpzcGxhdG9vbiAzCmNsb3VkcyBiYWNrZ3JvdW5kCnN0eWxlIG9mIG1hc2FtaSBrdXJ1bWFkYQptYXlhIDMgZAp3YXJtIHN1bmxpZ2h0IHNoaW5pbmcgaW4KbG90cyBvZiBwbGFudHMgYW5kIGZsb3dlcnMKZGFyayBhZ2VzCm9lc29waGFndXMKdGFyb3QgY2FyZCB0aGUgY2hhcmlvdApleHRyYSB3aWRlIGFuZ2xlCnNhbHQgZHVuZXMKd2VhcmluZyBzaXRoIGhvb2QKcmVhY2hpbmcgb3V0IHRvIGVhY2ggb3RoZXIKdW5kZXIgYSBtaWNyb3Njb3BlCmNyeXN0YWxsaW5lISEKZnVsbCBib2R5IG1lY2gKdGVycmFjZWQKd2l0aG91dCBhbm9tYWxpZXMKZ2xpdGNoYXJ0Cm9uIHRoZSBncm91bmQKdyAxIDAgMiA0CmJsdWUgLSByYXkgc2NyZWVuc2hvdApmIDIgMgpqb3JkdSBzY2hlbGwKc29ueSBhbHBoYQpha2lyYSBtb3ZpZSBzdHlsZQpib25zYWkgdHJlZXMKZXllIHNoYWRvdwp3b3JsZCBvZiB3YXJjcmFmdCBzdHlsZQpsYXJnZSBidXN0CmluIHRoZSBzdHlsZXMgb2YgZ3JlZyBydXRrb3dza2kKYWtpcmkgdG9yaXlhbWEKY29uY3JldGUgcG9ldHJ5CnNwaXJpdCBmYW50YXN5IGNvbmNlcHQgYXJ0CnJpdmVyIHJ1bm5pbmcgdGhyb3VnaCBpdApjaXR5IGJ1aWxkaW5ncyBvbiB0b3Agb2YgdHJlZXMKeXVzdWtlIG11cmF0YSBhbmQganVuamkgaXRvCnNodXJpa2VucwpkaWFtb25kIGFuZCByb3NlIHF1YXJ0egpjb25uZWN0aW5nIGxpbmVzCndpbmRvd3MgdmlzdGEKZ3JhcGhpYyBub3ZlbCBjb3ZlciBhcnQKbGlvbiBtYW5lCnBpbGdyaW1hZ2UKZmlyZSBwaXQKdmlicmFudCBncmVlbgp0aGMKYW5pbWUgbW92aWUgYmFja2dyb3VuZApjaHVyY2ggaW50ZXJpb3IKZXh0cmVtZWx5IGxpZmUgbGlrZQp3aXRoIGEgdGhpbiB3YWlzdApyZWFsaXN0aWMgOCBrCmNyYWJjb3JlCm9ybmF0ZSBhbmQgZGV0YWlsZWQKbWljaGFlbCBrdXRzY2hlCnNtb290aCBhbmQgcmljaCBjb2xvciBzY2hlbWUKZmV6IHZpZGVvIGdhbWUKbWFkZSBvdXQgb2Ygc2hpbnkgd2hpdGUgbWV0YWwKdGV4dHVyZWQgcGFwZXIKd29ybXMgLSBleWUgLSB2aWV3CmNvenkgc2V0dGluZwpodWcKY29tcGxpbWVudGFyeSBjb250cmFzdAp3ZWF0aGVyIHJlcG9ydApuZW9uIGdyYWZmaXRpCmRyYW1hdGljIHNwYWNlIHNreQpkYXJrIGxhbmRzY2FwZQpwYWxlIC0gc2tpbm5lZAptYWduaWZpZWQKY2xlYXIgZmlndXJlcwpmaXZlIHN0YXIgc3RvcmllcwpqdW5nbGUgYXMgdGhlIGJhY2tncm91bmQKc2FsdCBhbmQgcGVwcGVyIGhhaXIKaGFsZiBhbmQgaGFsZiBoYWlyIGR5ZQpwcmlzb24gY2VsbApjaHVyY2h5YXJkCnJlYWxpc3RpYyBhbmQgZGV0YWlsZWQgZXllcwpjcmFja2xpbmcgZ3JlZW4gbGlnaHRuaW5nCmluIHRoZSBzdHlsZSBvZiB0b20gYmFnc2hhdwpzY290dCBmaXNjaGVyCnJvdW5kIGV5ZXMKdmlicmFudCBwYXN0ZWwgY29sb3JzCmhvc3BpdGFsIGJhY2tncm91bmQKYmFja3lhcmQKZ2xvd2luZyBibHVlCmFjZSBjYXJkCmNvdmVyZWQgaW4gcnVuZXMKc3Bhd24KeW91bmcgZmFjZQppbmsgYW5kIHBhcGVyCnBhcGVycwppc3RvY2sKaGFuZCAtIGRyYXduCmR5c3RvcGlhbiBsYW5kc2NhcGUKZ3JlZyBydXRrb3dza2kgYW5kIGpha3ViIHJlYmVsa2EKZHJ1bmtlbiBib3hpbmcKcnVhbiBqaWEgYW5kIGdyZWcgcnV0a293c2tpCnJpcHBsZSBlZmZlY3QKaGVyIGZhY2UgbXVkZHkgYW5kIHN3ZWF0CmZhcm1pbmcKZHJlc3NlZCBpbiBibGFjayBsZWF0aGVyCm1pbGl0YXJ5IHBpbG90IGNsb3RoaW5nCmRpc3RvcGljCm9yYW5nZSBjYW5kbGUgZmxhbWVzCjQgayBzbW9vdGgKb24gYmVhY2gKdHJvcGljcwpubyB3aW5ncwpjcmltaW5hbCBtdWdzaG90CndlYXJzIHNob3J0cwpibGFjayBoZWF2eSBhcm1vcgpibGFjayBmYWNlCmNyYXdsaW5nIGh1bWFub2lkIG1vbnN0ZXJzCm1lbWJyYW5lIHByZWduYW5jeSBzYWMKcmVzcGlyYXRvcnkgZmxhcApnbG93IHVwCmhhbmR3cml0dGVuCmNoaWxsZWQgb3V0IHNtaXJrIG9uIGZhY2UKZGlzdGFudCB0aG91Z2h0ZnVsIGxvb2sKZGlnaXRhbCBmYW50YXN5IGFydCApCnNvbWUgc3RhbGxzCndpZGUgYW5nZWwgc2hvdApiZWF1dGlmdWxseSBsaXQgYnVpbGRpbmdzCmNvbG9yIHZpYmUKZXVwaG9yaWMKcnBnIGdhbWUgc3R5bGUKZHJpbmtpbmcgYWxjb2hvbApleHRyZW1lIGFuZ2xlCmNvbGxhYm9yYXRpdmUgcGFpbnRpbmcKbGlnaHRyb29tIGh5cGVyZGV0YWlsZWQKb3NjYXIKY2hlc3MgcGllY2UKaG90ZWwKZ3JpdHR5IHdvcmxkCjggaApidXQgYXMgbWFjcm8hISEhISBwaG90b2dyYXBoeQpnb2RiZWFtcwpicmFzcyBzaGVldApzdGVlbCB3aXJlCmV4dHJlbWVseSBoaWdoIHJlc29sdXRpb24KaW4gYSBtZWRpdGVycmFuZWFuIGxhbnNjYXBlCnZpdGFsaWsgYnV0ZXJpbgpjaXR5IHBhcmsKc2F0dXJuIGluIHRoZSBiYWNrZ3JvdW5kCmNvbWljc3R5bGUKYmxvb21pbmcgZmxvd2VycwpibG9zc29tCmJsb29kIHJlZCBiYWNrZ3JvdW5kCnZvbGxleWJhbGwgbmV0CmxvdHMgb2YgcGFydGljbGVzCmNsb3VkcyBpbiBiYWNrZ3JvdW5kCndpdGggYSBibHVlIGJhY2tncm91bmQKdHdpZ3MKYnJvd24gbWVzc3kgaGFpcgpmZWF0dXJlZCBvbiBhcnRzdGF0aW9uaHEKY2F0IGhlYWQKNCBrIGhpZ2ggLSByZXNvbHV0aW9uIHBob3RvZ3JhcGgKZHVuZ2VvbnMgYW5kIGRyYWdvbnMgZmFudGFzeSBhcnQKcGlubyBkYWVuaQpidXJuaW5nIHZpbGxhZ2UKYSB0YWxsIHRyZWUKcmFpbmJvdyBuZW9uIHN0cmlwcwptb25va3Vibwp3ZWFyaW5nIGVsZWdhbnQgdHVkb3IgY2xvdGhlcwpyZWxpZ2lvdXMgc2N1bHB0dXJlCmJlYXV0aWZ1bCBoaWdobHkgc3ltbWV0cmljIGZhY2UKcXVhbGlhCjEgNyAwIDAgcwpsb25nIHN3ZXB0IGJhY2sgYmxvbmQgaGFpcgoxIDkgNyA5Cm1vb2QgbGlnaHQKYm9va3Mgb24gc2lkZSB0YWJsZQp1bHRyYSBoZCB3YWxscGFwZXIKcmV0cm8gZmxhdCBjb2xvcnMKbW91bnRhaW5vdXMgc2V0dGluZwp1bmNhbm55IHZhbGxleSEKMSA5IDggMCBzIHBob3RvCmJyaWdodCB3aGl0ZQphZHZlbnR1cmUgdGltZSBjb2xvdXIgcGFsZXR0ZQpicm93biBib290cwpoaWdoIGNvbmNlcHQKcXVhbnR1bQpjb25mdXNpb24Kc3ltbWV0cmljYWwgZXBpYyBmYW50YXN5IGFydAptb3ZpZSBwcmVtaWVyZSBwb3N0ZXIKY29sb3IgZ3JhZGllbnRzCmV5ZXMgcm9sbGVkIGJhY2sKY291cnQgYXJjaGl2ZSBpbWFnZXMKaHVtYW4gd2Fycmlvcgp2aWV3ZWQgZnJvbSBzcGFjZQpjbHVtcHMgb2YgaGFpcgpoYXJzaCBjb250cmFzdCBsaWdodGluZwpqb2FuIG1pcm8gYW5kIG1vZWJpdXMKZWxlY3RyaWMgY29sb3JzCmRyYW1hdGljIHNreSBhbmQgbGFuZHNjYXBlCm5vIG1hbidzIGxhbmQKcmlnaHQgc2lkZSBjb21wb3NpdGlvbgphbGllbiBmb3Jlc3QgaW4gYmFja2dyb3VuZApncmV5IGJhY2tkcm9wCmRyZWFtd29ya3MgYW5pbWF0aW9uCmhkIDggayBmaWxtIHBob3RvZ3JhcGh5CnBlbmNpbCBkb29kbGUKbW9ybmluZyBzdW5yaXNlCmludGVyaW9yIGRlc2lnbiBhcmNoaXRlY3R1cmUKZGV0YWlsZWQgY2xvdGgKcGFub3JhbWEgc2hvdAppbiBqYWlsCm1lZ2FsaXRpYwpyb2FyaW5nCmNoaW5lc2UgbXl0aG9sb2d5CmZsYW1lIGV2ZXJ5d2hlcmUKamFtZXMgZ2lsbGFyZAphY3Rpb24gZmlndXJlIG1lY2hhCmNyaW1zb24gc2luZ2xlIGZyZW5jaCBicmFpZCBidW4KcmVhbGlzdGljIG1hc3RlcnBpZWNlCjIgMiB5ZWFycyBvbGQKdGhlIG9yaWdpbmFsIGNvbnNjaW91cwpsZWF0aGVyIGJlbHQKd2VsbCBiYWxhbmNlZCBjb21wb3NpdGlvbgpzaXh0aWVzIHBpbnVwCmxldHRlcmJveGluZwpiaWcgYmVhcmQKMSA5IDUgNgpzcGlreSBlbGYgZWFycwpiYXJyZWwgY2hlc3RlZAp0cmFuc2x1Y2VudCBuZW9uCmRyZWFtIC0gbGlrZSBhdG1vc3BoZXJlCmNvbG9yZnVsIGFyY2hpdGVjdHVyYWwgZHJhd2luZwp6ZHppc8WCYXcKYXMgYWJvdmUgc28gYmVsb3cKbW91bnRhaW5zIG9uIHRoZSBiYWNrZ3JvdW5kCmNvcmFsIHJlZWZzCndpdGggZGFyayBjbG91ZHMgaW4gdGhlIHNreQpnZW9tZXRyaWMgZGVzaWduCnR3aXRjaGluZyBhbmQgd3JpdGhpbmcKd2VhcmluZyB0aWFyYQpwb3J0cmEgOCAwIDAKb3JuYXRlIHNwaXJhbCBzdGFpcnMKYmVhdXRpZnVsIGJlaW5nCmFwcGFyaXRpb24KYnJpZ2h0IGJyb3duIGV5ZXMKMyBkIG1vZGVsbGluZwotIHBob3RvcmVhbGlzdGljCmJlc3QgcGhvdG8gYXdhcmQKKCgoZnJhbmNpcyBiYWNvbikpKQpwb2NrZXQgbW9uc3RlciBjb21wYW5pb24KaGFuZG1hZGUgcG90dGVyeQpkZWNvcmF0ZWQgd2l0aCBydXNzaWFuIG1vdGlmcwpvdXRydW4gc3R5bGUgYW5kIGNvbG91cnMKbmFuYWUga2F3YWhhcmEKZGVjb2xsYWdlCmphY3F1ZWxpbmUgZQp3ZWFyaW5nIGEgbWFzawpkYXJrIGZhbnRhc3kgc2V0dGluZwplbGVnYW50bHkgZHJlc3NlZApzaGFsbGFuIGRhdmFyCmxvbmcgaGFpcmN1dApmcmVzY28gcGFpbnRpbmcKcGFsZSBncmVlbiBiYWNrZ3JvdW5kCmJhcm9xdWUgZ29sZCBoZWFkcGllY2UKcGVlbGluZyBmYWNlIHNraW4Kb3JuYXRlIG1ldGFsIGdvbGQgaGVhZHBpZWNlCnRoZSBiaW5kaW5nIG9mIGlzYWFjCnRlYWwgaGFpcgpoaSAtIHJlcyB0ZXh0dXJlcwp1bHRyYSBzaGFycG5lc3MKZW5lcmd5IGNvcmUKWyByZWQgZGVhZCBdCnRpbSBoaWxkZWJyYW50CmplcmVteQpsaXBraW4Kc2l6ZSAxIDAKYXJ0Z2VybSBhbmQgdG9tIGJhZ3NoYXcKcGxhdGVzCmFzc2VtYmx5IGluc3RydWN0aW9ucwpqdW1wIGtpY2sKdmludGFnZSBmaWxtIHN0b2NrCm1hbmlmZXN0YXRpb24Kb3BhbCBzdGF0dWVzIGFkb3JuZWQgaW4gamV3ZWxzCmZhc2hpb24gbW9kZWwgcG9ydHJhaXQKcnBnIGNoYXJhY3RlciBhcnQKd2hpdGUgd2l0aCBnb2xkIGFjY2VudHMKaW50cmljYXRlIG1lY2hhbmlzbXMKdGVuIGZsYXRzCmZ1dHVyaXN0aWMgZmFudGFzeQp3YXRlciBmYWxsCmNsZWFuIHdoaXRlIGxhYiBiYWNrZ3JvdW5kCndpdGggZnV0dXJpc3RpYyBnZWFyIGFuZCBoZWxtZXQKZmxvd2VyeSBkcmVzcwphbmRyZWkgdGFya292c2tpCm0gJiBtIGNhbmR5IGRpc3BlbnNlcgpmdXR1cmlzdGljIGNvbmNlcHQgYXJ0CmFiYW5kb25lZCBzdGVlbHdvcmtzCmdyaW1lIGFuZCBncnVuZ2UKZ3JlZWsgc3R5bGUKY29sb3JzOiB5ZWxsb3cKdGhpY2sgaW1wYXN0byBwYWludApvcmFuZ2Ugcm9ja3MKcmVsYXhlZCBwb3N0dXJlCnNwYWNlIGJhY2tkcm9wCmZsdWZmeSBlYXJzCnN0YXIgd2FycyB2aWJlCmVsZWN0cmljaXR5IGxpZ2h0bmluZwppcmlkZXNjZW50IHJlZmxlY3Rpb25zCmdvbGQgYW5kIHNpbHZlciBoaWdobGlnaHRzCmJlaGFuY2UgZmF2b3VyaXRlCmNoYXJhY3RlciBwYWludGluZwp1bnJlYWwgZW5naW5lIDUgZGV0YWlsCmxvdyBhcGVyYXR1cmUKdmlueWwgYWN0aW9uIGZpZ3VyZQpsaWdodHMgb24KdmVyeSBjbGVhcgpuYXRpb25hbCBnZW9ncmFwaGljIHF1YWxpdHkKb3Zlcmdyb3duIHdpdGggY29sb3JmdWwgY29yYWwKb3B0aWNhbCBmaWJlcgpqb3NlcGggYW5kIGpvc2VwaApmcmFuY2luZSB2YW4gaG92ZQpjb2xvciBuZWdhdGl2ZQpjb21wYXNzaW9uYXRlCmluIHN0eWxlIG9mIGpvaGFuIGdyZW5pZXIKbm9zZSBtYWRlIG9mIHdvb2QKdGFya292c2t5IHNjZW5lCm9jZWFuIGluIGRpc3RhbmNlCnBlcnNwaWNpb3VzIGRldGFpbApkc2xyIDggawpwaXRjaCBkYXJrbmVzcyBhcm91bmQgdGhlIHBvc3QKc3RhbmRpbmcgaW4gYSBkZXNlcnQKZGlnaXRhbCB3YXRlcmNvbG9yCm1hbnkgc2NyYXAgY2FycwpkaWdpdGFsIGZsYXQgMiBkCnBpcGUgb3JnYW4Kcm91Z2ggd2F2ZXMKYW5pbWF0aW9uIHBvcnRyYWl0IGNvbmNlcHQgYXJ0CnBhbGUgYmVhdXRpZnVsIHNraW4Kc2hvcnQgamVhbnMKbmljZSBjb2xvcnMKcGFsZSBibHVlIGZhY2VzCmRpZmZ1c2UgbGlnaHRuaW5nCmdvbGRlbiBqZXdlbGxlcnkKMSA4IDIgNApoaWdoIHRlY2ggcmVzZWFyY2gKdmluZQp3YXRlciBhcnQgcGhvdG9zaG9wCnByb21pbmVudCBiaWcgZXllcwptdWx0aXZlcnNlISEhISEhCmJsdXJyZWQgZmFjZQplbGVjdHJpYyBjb2xvdXJzCmdyaW0gYW5kIGdsb29teSBsaWdodGluZwpkZXRhaWxlZCBkcmVzcwp2aW50YWdlIG1hZ2F6aW5lIGlsbHVzdHJhdGlvbgpoaWdoIHF1YWxpdHkgb2lsIHBhaW50aW5nCjkgMCBzIGFuaW1lIHN0eWxlCmluIGEgd29ya3Nob3AKc2xlbmRlciBnaXJsCnRoZSB3aW5kb3dzIGFyZSBsaXQKamFtZXMgY2hhZGRlcnRvbgp1bnNldHRsaW5nIHBob3RvCmR1c3Rpbmcgb2Ygc25vdwpyYWRpb3NpdHkgcmVuZGVyaW5nCmltcGFzdG8gcGFpbnQKYWJzdHJhY3QgbGlxdWlkIGFjcnlsaWMgYXJ0CmFjY2lkZW50YWwgcmVuYWlzc2FuY2UKdG90ZW0gMgpzcGxhdHRlcnBhaW50CmNvbnRyYXN0IG9mIGxpZ2h0IGFuZCBzaGFkb3dzCmFybm9sZCBncHUgKyBvY3RhbmUgd29ya2Zsb3cKZGllZ28gZmVybmFuZGV6CmxvdyAtIHBvbHkgMyBkIG1vZGVsCmF3YXJkIHdpbm5pbmcgZHNsciBwaG90b2dyYXBoeQpuZW9jbGFzc2ljIG9pbCBwYWludGluZwpzdHJ1Y3R1cmFsIGdlb2xvZ3kKaXJpZGlzY2VudCBncmFkaWVudApkdWxsZWQgY29udHJhc3QKaW4gYSByb29tIGZ1bGwgb2YgY2FuZGxlcwplbmVyZ2l6ZWQKY2luZW1hdGljIGVmZmVjdHMgdmZ4CmdxIG1hZ2F6aW5lCnNjb3R0IGJ1cmRpY2sKZmxhdCBtYXR0ZSBwYWludGluZwpncmV5IGFuZCBzaWx2ZXIKY2FtY29yZGVyIGVmZmVjdApxdWFja2VyeQpmb2xrIG1lZGljaW5lCnNjYW1taW5nCnN1cGVyYiBkZXRhaWwgOCBrIG1hc3RlcnBpZWNlCnJldHVybiBvZiB0aGUgamVkaQp0aHVuZGVyIHNreQphenRlYyBnb2QKZGlydHkgY29sb3VycwpnaG9zdCBmYWNlcwphc3Rlcm9pZCBiZWx0Cm1hbmdvc3RlZW4KYWxpZW4gaW4gdGhlIGZvcm0gb2YgbWFudGlzCnRoZSB2aWRlbyBnYW1lCmVwaWMgbW91bnRhaW5zCmVwaWMgdGFsZSBvZiB0aGUgdHdpbiBzaXN0ZXJzCnRyYW5zaHVtYW5pc3QgZGFuY2luZwphbGllbiBzdXBlcmNpdHkKOCBrIHVsdHJhIGhkCnNtdWcgZ3JpbgpoZW5yaSBjYXJ0aWVyIC0gYnJlc3Nvbgp1cHNpZGUgZG93bgpyZWFsaXN0aWNhbGx5IGRldGFpbGVkIHNoYWRpbmcKYmVhdXRpZnVsIHNtb290aCBvdmFsIHNoYXBlIGZhY2UKcmFiYml0X2J1bm55CnBvcmNlbGFpbiBoaWdobGlnaHRlZCBza2luCnZpdmlkIGxpZ2h0CndpdGggYSBjcm93bgpjb2d3aGVlbApzY3ViYSBtYXNrCndpdGggbm8gZmFjaWFsIGZlYXR1cmVzCnNjdWxwdHVyZXMKZW50aXR5CjQgMCAwIGJjCmVuc2NhcGUgcmVuZGVyCmx1eGNvcmVyZW5kZXIKOSBwZWFjb2NrIHRhaWxzCnZocyBlZmZlY3RzCmZhdCBiZWxseQp3ZWFyaW5nIGEgbHV4dXJ5IGZ1ciBjb2F0CmFuaW1lISEhIQpmYXVuYQpjbG9zZSB1cCB3aWRlIGFuZ2xlIGxlbnMKYnJlYXRodGFraW5nIHdhdmUKc3VidGVycmFuZWFuIGdhbGF4eQpzaWx2ZXIgZWdnIGN1cApzdXJnaWNhbCBpbXBsZW1lbnRzCndpdGggZ2xvd2luZyB3aW5kb3dzCnN0dWRpb3VzIGNoaWFyb3NjdXJvCmFydGlzdCB3ZWFyaW5nIGRpcnR5CmRldGFpbGVkIGdyaWQgYXMgYmFja2dyb3VuZApkZXRhaWxlZCBmYWNlIG9mIGFuIGFuZHJvaWQKdGhlIHBob3RvIHdhcyB0YWtlbiBmcm9tIGEgYm9hdApib25lcyBhbmQgdmVpbnMKcmdiYSBjb2xvcnMKc3R5bGUgZ2FtZSBzcXVhcmUgZW5peApmaW9uYSBzdGFwbGVzIGFuZCBraW51IG5pc2hpbXVyYQpwbGV4dXMKYmx1ZSBob29kZWQgY2xvYWsKYmlnIHNtb2tlIGNsb3VkcyB2aXNpYmxlCnZpbnRhZ2Ugc2NpZW5jZSBmaWN0aW9uCm1heGltaXplZApvbGQgc2NyaXB0CmluaGFiaXRlZCBpbml0aWFscwpwb3N0IGFwb2NhbHlwdGljIGFuY2llbnQgcnVpbnMKZm9ybWFsIGdhcmRlbnMKZGVwaWN0ZWQgYXMgYSAzIGQgcmVuZGVyCmZhbnRhc3kgY3JlYXR1cmVzCmdyZWF0IHdhdmUKbm8gbGlnaHRpbmcKcG9ydHJhaXQgYyAxIDIuIDAKaHlwZXJ2aXZpZCBpbnRlbnNlIG1jYmVzcwpsb25nIHNob3QgcGhvdG9ncmFwaHkKYmxvbmQgYm9iIGhhaXJjdXQKdmludGFnZSBzY2kgZmkKdmVyeSBoaWdoIHJlc29sdXRpb24gaW1hZ2VzCmF3YXJkIHdpbmluZyBhcnQKdGVhbCB3aGl0ZSBnb2xkIGNvbG9yIHBhbGV0dGUKYW5nZWxhIHNhcmFmeWFuCnBhcmFsbGVsIGNvbnRlbnQKaG9hbmcgbG9uZyBseQpzdXphbm5lIGVuZ2VsYmVyZwpkYWxlIG9kZWxsCnByb21vdGlvbmFsIG1lZGlhCmR5bmFtaWMgYnJ1c2ggc3Ryb2tlcwpsaWdodCBkaWZmcmFjdGlvbgphbmltZSBjYXIgd3JhcApiZWF1dGlmdWwgYW1iaWFuY2UKZmxhdCBjaGVzdApiZXdpdGNoZWQKZHVzdHkgdm9sdW1ldHJpYyBsaWdodGluZwpmbHlpbmcgYmVldGxlcwpoaXBob3AgdXJiYW4gaW5zcGlyZWQKYmxhY2sgbWVzc3kgaGFpcgpuYXJ1bWkga2FraW5vdWNoaQpncmVlbiBjb2xvcmVkIGJvbWJlciBqYWNrZXQKZmxvd2VycyBleHBsb2RpbmcgYW5kIHNwcmF5aW5nCm1hcmF0aG9uIHJhY2UKZmxhdCBjZWwgc2hhZGVkCm1hZGhvdXNlIGFuaW1lIHN0dWRpb3MKbHVzaCBncmVlbgpicmVhdGggdGFraW5nIGJlYXV0aWZ1bApicm9uemUgYmlvbWVjaGFuaWNhbCBnYXJtZW50CnNsZWVrIHdhdGVycHJvb2YgZGVzaWduCmxvdHMgb2YgYnViYmxlcwpmYWNlIGljb24gc3R5bGl6ZWQgbWluaW1hbGlzdApsYXJnZSBob3Jucwp3ZWFyaW5nIHN1bmdsYXNzZXMgYW5kIGEgaGF0CmFudGhyb3BvbW9ycGhpYyBkb2cgY2xlYW5pbmcKZ3JhZW1lIGJhc2UKYmxvb2Qgc3BsYXR0ZXIKZHJvc2VyYSBjYXBlbnNpcwpoYWxmIG1hbiBoYWxmIGFzaWFuIGJsYWNrIGJlYXIKYmxhY2sgYmVhciBzYW11cmFpCjEgOCA1IDAKc3ltbWV0cnkhISBzb2xpZCBjdWJlIG9mIGxpZ2h0CnN0eWxpemVkIGFydApmaWd1cmF0aXZlIHBhaW50aW5nCjIgMCAxIDEKc2hlbHRlcmVkCmdyZW5hZGUgZXhwbG9zaW9uCnB5cmFtaWRzIGluIGJhY2tncm91bmQKc3ltbWV0cmljYWwgb3V0cG9zdApubyBkZWNheWluZyBsaW5lcwpyb3Rhcnkgc3ltbWV0cmljYWwKaW50cmljYXRlIGdvbGQgZWxlbWVudHMKc21vb3RoIGFyY2hpdGVjdHVyZQptZWRpdW0gY2xvc2UgdXAgcG9ydHJhaXQKdGhlb2RvcmUgY2hhc3NlcmlhdQpob2xsb3cgZWFydGgKbWluaW1hbGlzdCBjaW5lbWF0aWMgbGlnaHRpbmcKaW4gYSBkdW5nZW9uIGJhY2tncm91bmQKdmludGFnZSBzY2ktZmkgc29mdCBncmFpbnkKbG93IGRldGFpbGVkCmhlYXZ5IGJsdWUgbGVkIGxpZ2h0cwp3aXJlcyBjb25uZWN0ZWQKZ290aGljIGNpdHkgc3RyZWV0cyBiZWhpbmQgaGVyCmxhZHkgb2YgZWxjaGUKcXVlZW4gb2YgaGVhdmVuCmRlc2F0dXJhdGVkIGJsdWUKaW4gc2NlbmUgaW4gdHdpbiBwZWFrcwptZWdhCmNhc3Qgc2hhZG93cwpjYXN0aW5nIGZpcmViYWxsCm5lb3Rlbm91cwphc3NhdWx0IHJpZmxlCm9jdGFuZSByZW5kZXIgXQp1c2UgcnVsZSBvZiB0aGlyZHMKdG9uYWxpc3Qgc3R5bGUKY2luZW1hdGljIGhvbG9ncmFtCnF1YW50dW0gd2F2ZXMKaG93IHRvIGRyYXcKZXh0cmVtZWx5IGh1bWFuIGRldGFpbGVkCnBpbnRlcmVzdCByZW5kZXIKZnVsbCBib2R5IHBlcmZlY3QKY2hyb21lIHR1YmVzCnZlcnkgZGFyayBlbnZpcm9ubWVudAphdHRlbnRpb24gZmlsdGVyCndlYnNpdGUgYmFubmVyCmN1dGUgc2VkdWN0aXZlIHNtaWxlCmV4dHJlbWUgY2xvc2UgdXAgZmFjZSBzaG90CmVycm9sc29uIGh1Z2gKbHVzaCB2aXN0YQplbGVnYW50IG5vaXIKZmxvd2VycyBhbmQgZ29sZAptaWNybyBtYWNybyBhdXRvIGZvY3VzCnNtaWxvZG9uCm5vcm1hbCBjbG90aGVzCmdyYXBlIGh5YWNpbnRoCmJsdWUgZGVscGhpbml1bQpleHRyZW1lbHkgbW9vZHkgcHVycGxlIGxpZ2h0aW5nCnR3byAtIHRvbmUKcGhvdG9yZWFsaXN0aWMhISEKYmFjayBwb3J0cmFpdCBvZiBhIHJ1Z2dlZCByYW5nZXIKZGFyayBzdXBlcnZpbGxhaW4Kc2FtdXJhaSBtYW4gdmFnYWJvbmQKaGFsZiBib2R5IGNyb3BwaW5nCmNvdHRhZ2UKdHBvc2UKZnJlZXplIGZyYW1lCmhhbmQgdG8gaGFuZCBjb21iYXQgd2l0aCBtYWNoZXRlCmlzbGFtaWMgcmV2b2x1dGlvbgp2aW50YWdlIHBvbGFyb2lkCmJhcm9xdWUgaGliaXNjdXMgcXVlZW4KaGlnaCBkZWZpbml0aW9uIGNnc29jaWV0eQpzZW5zdW91cwp0cmVuZHNldHRlcgp2ZXJtaWxpb24Kb3V0ZG9vcnMgZXVyb3BlYW4gY2l0eXNjYXBlCmJyb2FkIGJydXNoCmhpZ2ggZGV0YWlsZWQgcGFpbnRpbmcKYmVhcmRlZCBjb3dib3kKc3R5bGUgb2Yga2FuYWdhd2EKc2hyb3VkZWQgZmFjZQpjaW5lbWF0aWMgbGlnaHRpbmcgaGlnaCBkZXRhaWxzCnJpZGluZyBob3JzZQpvZnQgcGFpbnRpbmcKbWFubHkgZmFjZQpsb25nIHdpbGQgc3Bpa3kgaGFpcgphcXVhdGljCmRhcmsgZm9yZXN0IHRoZW1lCmh5cG5vdGljIGRpbWVuc2lvbnMKaXZvcnkgdG93ZXJzCnN0ZWFtIGNsb3VkcwpiZWF1dGlmdWwgYnVycWEncyB3b21hbgpwb3J0cmFpdCBvZiBmYWNlCmJlYXV0aWZ1bCBzdW5yaXNlCmZ1amlmaWxtIHggLSBwcm8gMgp0ZXNzZ2FybWFuCjQgayBiZWF1dGlmdWwKaGlnaGx5IGRldGFpbGVkIHNuYWtlcwpiZWF1dGlmdWwgZmxvd2VycyBncm93aW5nCm1vdGlmCnRhdHRvb2VkIHNraW4KcHVyc2VkIGxpcHMKY3J5aW5nIG1ha2V1cApiZWF1dGlmdWwgZmFudGFzeSBhcnQgcG9ydHJhaXQKc3ltbWV0cmljIG9ybmFtZW50cwpwdXJwbGUgZmxvd2luZyBoYWlyCnN5bW1ldHJpY2FsIHJpbSBsaWdodApiZWF1dGlmdWwgZmVtYWxlIGN5Ym9yZwpwcmlzbSBsaWdodHMKYXR0cmFjdGl2ZSBmYWNpYWwgZmVhdHVyZXMKOCBrIDQgayBoZApkcm9wcyBhcm91bmQKc3RhbmRpbmcgc2lkZXdheXMKY29tcGxleCBkZXNpZ24gaGFpcgpiaWcgc25ha2VzIGhlYWRzIHdpdGggb3BlbiBtb3V0aApmaW5lIHN0cnVjdHVyZSB0ZXh0dXJlCnVmb3RhYmxlIGFydCBzdHlsZQpzcGFjZSBhbmQgdGltZQpibHVlIHBpZXJjaW5nIGV5ZXMKd2VhdGhlcmluZyB3aXRoIHlvdQpzbmFrZSB0b25ndWUKaHVnZSBtZWNoYW5pY2FsIGNsb2NrcwpiZWF1dGlmdWwgbW91c2UgLSBnaXJsCmh1Z2Ugd2VhcG9uCmVudGhlb2dlbgpsdXh1cmlvdXMgaW5kb29yIHNldHRpbmcKcmV0cm8gdGVjaAptb3VzZSBndWFyZApkZWVwIGVtb3Rpb25hbCBpbXBhY3QKc2l4IHBhY2sKY29uY2VudHJhdGVkIGxvb2sKcmVuYXRvIG11Y2NpbGxvCmdpcmwgd2l0aCBhIHBlYXJsIGVhcnJpbmcKcmV0cm8gc2NpIGZpIGZpbG0KMSA5IDIgNyBvaWwgb24gY2FudmFzCnJ1YW4gamlhIGFuZCBqb2FvIHJ1YXMKYW5uYSBkaXR0bWFubiBhbGJlcnRvIHZhcmdhcwpjb2JibGVzdG9uZSByb2FkcwpraXJzaSBzYWxvbmVuCnBvcmNlbGFpbiBob2xseSBoZXJuZG9uIHN0YXR1ZQpjbGFzc2ljIHNob3VqbwoxIDkgMiAwIOKAmSBzIGNvbG9yZWQgcGVuY2lsCnN0YW5kaW5nIG5lYXIgYSB3YXRlcmZhbGwKbW9vZHkgc3Vuc2V0IGJhY2tncm91bmQKcmF5cyBvZiBzdW5saWdodHMKeWFraXN1Z2kKYmVsbGEgdGhvcm5lCmhhbmRzIGluIHRoZSBhaXIKc3RhcmdhemVyCmJlbmVmaXQgb2YgYWxsCmlsbCBvZiBub25lCmJlbmphbWluIG5ldGFueWFodQpkYW1hZ2VkIGNpdHkKaHVtYW4gc3RydWN0dXJlIGJlZSBjb25jZXB0IGFydApzdGFpcndheXMKbG91ZApuYXR1cmUgZ3JvdGVzcXVlIGRhcmsKbW9oYXdrcwplbGVjdHJpY2FsIGFyY3MKdGYgMgpjb2xvcmVkIGZvZwpnbGFzcyBidWJibGUgaGVsbWV0CmJvIGZlbmcKbWVtb3J5IHRyYXBwZWQgaW4gZXRlcm5hbCB0aW1lCmZydWl0IGV5ZXMKZnJ1aXQgd29ybGQKYWJvdmUgbGlnaHRpbmcKY2Fzc2V0dGUgZnV0dXJpc3QKY3VkZGx5IGZ1cgptb3JoYmFjaGVyCjggayBoIDEgMCAyIDQKb3NjaWxsb3Njb3BlCiggKCAoIG1pY2tleSBtb3VzZSApICkgKQptb2lzdCBicm93biBjYXJwZXQKcGhvdG9ncmFwaHkgaHlwZXJyZWFsaXNtCm1lZGl1bSBsb25nIGhhaXIKZHlzb24gc3BoZXJlIHByb2dyYW0KcGFpbnRpbmcgc3R5bGUKZGJ6CnRoZXJlIGlzIHNwYWNlIGFyb3VuZCB0aGUgZmlndXJlCmhvbGRpbmcgZ2lmdApuaWdodCBjb3ZlcmVkIGluIHN0YXJzCmNsb3NldXAgcG9ydHJhaXQgc2hvdApib2FyZHdhbGsKaG9tZXMgYW5kIGdhcmRlbnMKcmVkIGJvZHkgc3VpdAp3YXRjaGVzCmJsdWUgbW9vbiByYXkgdHJhY2luZwptZWRpdGF0aW5nIGluIGxvdHVzIHBvc2l0aW9uCmF2YW50IHVuaWZvcm0Kc2t5bGluZSBpbiBiYWNrCmRhcmsgY2FzdGxlIHNldHRpbmcKYWR1bHQgZG9nCnZhcmlvdXMgYXJ0aXN0cwoxIDAgbW0gbGVucwpoZWF2eSBpbiBkZXRhaWwKaHVtYW4gZmlndXJlCmJyb2NrZW4gc3BlY3RyZQp3ZWFyaW5nIHB1cnBsZSByb21hbnRpYyB0dXR1Cm1hbmljdXJlZCBnYXJkZW4gb2YgZWRlbgpvcm5hdGUgc3RlZWwgYXJtb3VyCnByb2Zlc3Npb25hbCBzdHVkaW8gc2hvdAptYW5saW5lc3MKdmlkZW8gZ2FtZSBjb3ZlciBhcnQKbG9uZyBoYWlycwpkaWVnbyB2ZWxhenF1ZXoKYXJ0IGRpZ2l0YWwgYXJ0CmZpbmUgbWFuZGVsYnJvdCBmcmFjdGFsIGxhY2UKcHJpZXN0ZXNzIGluIGEgY29uaWNhbCBoYXQKZ2xhbXBpbmcKZmFsc2UgaHVtYW4gZmVhdHVyZXMKc3VtbWVyIGNhbXAKd2V0IGdyYXNzCm9wZW5nbApkZXRhaWxlZCBmYWNlISEKY2FyZGlzdHJ5CmNvbGxhZ2VzCndldCBhdG1vc3BoZXJlCnN0YWdlIGJhY2tncm91bmQKaGFsZiB0b25lCndpbmdzIGxhY2Ugd2VhcgozIDUgwrAKd2VhcmluZyB3b29sIGhhdApjYXQgdGhlbWUgbG9nbwpjYXQgdGhlbWUgYmFubmVyCmNhdCBkZXNpZ24Kc3R5bGUgb2YgZGF2ZSBtY2tlYW4KcHVycGxlIG9yYW5nZSBjb2xvcnMKZ3JpbWRhcmsgZHJhbWF0aWMgbGlnaHRpbmcKcm95YWwgaW5zaWduaWEgaW4gYmFja2dyb3VuZAptYWNoaW5lLiBkZWx1c2lvbnMKcmVhbG0KYmxlbmRpbmcKcmV5IHRyYWNpbmcKc2tpbnRpZ2h0IGRyZXNzCmhhaXIgaW4gYSBwb255dGFpbC4gc2hpcnQKbmFycm93IGV5ZXMKd2VhcmluZyBhdG9tcHVuayBqdW1wc3VpdApoZWFkIC0gb24gY2VudHJhbGl6ZWQKY2VudHJhbGl6ZWQgaGVhZCBhbmQgdXBwZXIgdG9yc28KZG9jIHNhdmFnZQpkcmFtYXRpYyBhbmQgZW1vdGlvbmFsCnJveWFsIHBvcnRyYWl0IHBhaW50aW5nCnNjcmF0Y2h5IGxpbmVzCmN5YmVydHJvbmlhbgphdmFudCBnYXJkZSBmYXNoaW9uIG1vZGVsCnNlcGhpcm90aApkYXJrIGJhY2tkcm9wCmxhcmdlIG1vdXRoCmNodXJjaCBwYWludGluZwp1bm5hdHVyYWwgbW92ZW1lbnQKaG9yc2UgaXMgdXAgb24gaXRzIGhpbmQgbGVncwp1bnNpbXVsYXRlZCByZWFsIGVtb3Rpb25zCmdyaXR0eSBwb3J0cmFpdApjaHJvbWUgbW90b3JjeWNsZSBwYXJ0cwptaXJhZ2UKaW4gYSBibHVlIHFpcGFvCmdsb3dpbmcgZGV0YWlscwp0aGUgbW9vbiByZWZsZWN0cyBpbiB0aGUgd2F0ZXIKcm9ib3QgY2F0IHBhd3MgZm9yIGZlZXQKc2xlZWsgb2xlZCBibHVlIHZpc29yIGZvciBleWVzCmRlZXAgZXllcwptaXJyb3JzIGVkZ2UgYXJ0IHN0eWxlCm92ZXJkZXRhaWxlZCBhcnQuIGRzbHIKc3RpbGwgZnJvbSB0aGUgbW92aWUgZXggbWFjaGluYQozIDUgbW0ga29kYWsgY29sb3IKd2FsbHMgb2YgbGFyZ2UgbW92aW5nIGltYWdlcwpkZXRlY3RpdmUgcGlrYWNodQpkeXN0b3BpYW4gYXRtb3NwaGVyZQpjaXJjdWl0IGJvYXJkIHByb2Nlc3NvciBibG9jawpjYWJsZXMgaGFuZ2luZyBmcm9tIGNlaWxpbmcKZXBpYyBmYW50YXN5IHNjaSBmaSBpbGx1c3RyYXRpb24Kc21pbGUgbGlrZSBhIHNwaGlueApzd2lybHkgZmxvd2VyIGRyZXNzCmVsZHJpdGNoIHNwYWNlCnBvbHlnb25hbCB3b29kZW4gd2FsbHMKY2xvYWtlZCBkYXJrIHdpbnRlciBuaWdodApiZWtza2luc2tpCmxpbHkgZnJhbmsKbWFjcm8gZm9jdXMKd2FiaSBzYWJpCmFuZHJlaSBtYXJraW4KbGlmZWxpa2UuIHNjaSAtIGZpCnRyb3BpY2FsIGF0bW9zcGhlcmUKd2VsbC1ncm9vbWVkIG1vZGVsCmFzdHJhbCBuZWJ1bGEKc292aWV0IGFydGlzdHMKc25vd3kgd2ludGVyIHNjZW5lCmxpbGFjCnVuZGVyZXhwb3NlZCBwaG90b2dyYXBoeQppcmlkZXNjZW50IHNoaW1tZXJpbmcgcG9vbHMKb2FzaXMgaW4gdGhlIGRlc2VydAp0aHJlZSAtIHBvaW50IHBlcnNwZWN0aXZlCmJsZWFrIGNpdHlzY2FwZSBiYWNrZ3JvdW5kCmluc2lkZSBhIGZyYW1lIG9uIGEgdGlsZWQgd2FsbApzdWJ0bGUgbWFrZXVwCm1lZ2FjaXR5IGJhY2tncm91bmQKc2hhZyBoYWlyCmNvbXBsZW1lbnRhcnkgY29udHJhc3QKZXBpYyBwZW5jaWwgaWxsdXN0cmF0aW9uCnJhdHoKMzVtbSBmOCBhcGVydHVyZQpjbG93biB3YXZpbmcgaGVsbG8Kc2VyZW5lIGlsbHVzdHJhdGlvbgpyaWNoIGJsdWUgY29sb3JzCmRyZXNzZWQgaW4gYSB3aGl0ZSB0IHNoaXJ0CnNvZnQgbGlnaHQgZnJvbSB0aGUgc2lkZQpjeWJlciBhcmNoaXRlY3R1cmUKYnJvd24gZmx1ZmZ5IGhhaXIKZmFrZWQgc2VydmljZSB0aWNrZXQKcGhvYm9zCmppbWkgaGVuZHJpeCBwbGF5aW5nIGd1aXRhcgpzbW9rZSBvbiB3YXRlcgpjb21iYXQgZHJvbmUgc3RyaWtlIHdhciBmb290YWdlCmhpZ2ggYW5nbGUgdmVydGljYWwKY3VybHkgYmxvbmRlIGhhaXIgfCBkICYgZApuYXR1cmFsIHNvZnQgcmltIGxpZ2h0Cm1lY2hhbmljYWwgdmVnZXRhbCBjeWJvcmcKb24gbG9hbiBmcm9tIGxvdXZyZQpsb3RzIG9mIGhhbmdpbmcgY2FibGVzIGFuZCB3aXJlcwpoaWdoZXIgcmVhbGlzdGljCm1hbnkgbWVjaCBmbG93ZXJzCm1hcm9vbiBhY2NlbnRzCmdlb3JnZSBodWxsCmluIGd1bm1ldGFsIGdyZXkKYmxhY2sgYW5kIHdoaXRlIGxvZ28KZGlnaW1vbgp1bmlxdWUgaGVhZHMKZXVyb3BlYW4gamFwYW5lc2UgYnVpbGRpbmdzCm1hbiB3aXRoIHNjeXRoZQphbG9uZSBpbiBhIG5lYnVsYQp0aHVuZGVyc3RvbQoxOTkzIGFuaW1lCnVyYmFuIGhvcnJvciBhZXN0aGV0aWMKbHlpbmcgcG9zZSBvbiBzdG9uZXMKY29yZ2kgZHJlc3NlZCBhcyBjYXB0YWluIGFtZXJpY2EKZGFycmVuIHNoYWRkaWNrCm1hc2hhIGtyYXNub3ZhCnNhcmFoIGNsaWZmCm1lcmVkaXRoIHNjaG9tYnVyZwpzaG90IG9uIHNvbnkgYSA3CmluZG9vciBsaW1pbmFsIHNwYWNlCnBpbmsgZG9vcgppbnRyaWNhdGUgaW5zYW5lbHkgZGV0YWlsZWQKY292aWQKaGlnaGx5IGFuZ2xlCmhhaWRhIGd3YWlpCmZvcm1saW5lCmZhcm1zCmV0aGVyZWFsIGhvbG9ncmFtIGNlbnRlcgpsb2lzaCBhbmQgd2xvcApjcmVhdHVyZSBidXN0CmNyb25vCmluc3BlY3QgaW4gaW52ZW50b3J5IGltYWdlCmV4dGVyaW9yIG9mIHNjaWZpIHRlbXBsZQpjdXJyZW5jeSBzeW1ib2xzIHByaW50ZWQKb2NlYW4gaW4gdGhlIGRpc3RhbmNlCnNob3J0IG1pbmlza2lydApzaG9ydCBtaW5pZHJlc3MKYmlnIG1vb24gYWJvdmUgdGhlIHdhdGVyCnNpbHZlciBtaXN0CnNoYWRvdyBhcm1vcgpiaWcgY2hlZWtzIQpvY2VhbiBzaW11bGF0aW9uCmN5YmVycHVuayBhbmltZSBnaXJsCmdvZCBvZiB0aGUgdW5kZXJ3b3JsZAo4IGsgY2hhcmFjdGVyIGRldGFpbHMKaGVhcnQgZWZmZWN0cwpjaW5lbWF0aWMgbmVvbiB1cGxpZ2h0aW5nCmN5YmVyIHNrZWxldG9uCmhvbHkgc3Bpcml0CmNvbmNlcHQgYXJ0IHwgcmhhZHMKY3liZXJuZXRpYyB3b25kZXJsYW5kCmFydHN0YXNpb24KZHluYW1pYyB3YXZ5IGhhaXIKd2VsZG9uIGNhc2V5Cm1ldGFsIHNraW4Kd2VpcmQgZmFzaGlvbgpjb250ZW1wb3JhcnkgZGFuY2UKYXN5bWV0cmljYWwgZGVzaWduCnN0dWRpbyBnaGlibGkgcGFpbnRlcmx5IHN0eWxlCmRpc2FwcGVhcmluZwpkYXJrIGNsb2FrZWQgbmVjcm9tYW5jZXIKc2l0dGluZyBvbiBvYnNpZGlhbiB0aHJvbmUKZnJhY3RhbCBmaXJlIGJhY2tncm91bmQKZGVtb25pYyBmYWNlCm1pY2hhbCBtcmF6CmRhcmsgdmFtcGlyZQpoaXZlIGNpdHkKa2lja2luZwplZHdhcmQgb2t1bgpldmlsIGRlYWQgZmFjZQpmbGF0dGVuZWQKYXNlbmNpbwpzaW1wbGUgY2xvdGhlcwpkZW1vbmljIHN5bWJvbHMKYWNjZXNzaWJsZSBmb3IgdGhlIGRpc2FibGVkCmdlb3JnZSBsb3BlegpkZXNpZ24gb25seQppbnRyaWd1aW5nIHZvbHVtZSBmbHV0dGVyCmNvc21vcG9saXRhbgphcnJvZ2FudCBsb29rCmRldGFpbGVkIGNpbmVtYXRpYyByZW5kZXIKbGlnaHRzYWJlciB3YWxscGFwZXIgNCBrCmxvb2tpbmcgZGlzdHJhY3RlZCBhbmQgYXdrd2FyZApyZWZsZWN0aW9ucyByYXkKdHJhY2luZ3N0YXIgdHJhaWxzCmRldGFpbGVkIGZ1bGwgYm9keSBjb25jZXB0CmRpZmZlcmVudCByZWFsbXMKc21hbGwgd2F0ZXJmYWxscwpoeXBlciByZWFsaXN0aWMgY2xvdWRzCnZhcmlvdXMgc2VkdWNpbmcgcG9zZQpraXRzY2ggZmFzaGlvbgpoYWxmd2F5IHRocm91Z2gKaGlnaCB0ZXh0dXJlIGRldGFpbApkZXRhaWxlZCBzaGFycCBmb2N1cwp3ZWFyaW5nIDE4NDBzIGVyYSBjbG90aGVzCmhvbGRpbmcgd2VhcG9uIGFuZCBzaGllbGQKcmVtYXJrYWJsZSBnZWlzaGEgbWFrZSB1cApzdW5zZXQgaW4gdGhlIGRlc2VydApkZWJyaXMgb24gdGhlIGZsb29yCmdpYW50IGVhcnJpbmdzCmdyaWQgb2Ygc3R5bGVzCmhhcHB5IHNtaWxpbmcgaHVtYW4gZXllcwpmdWxsIGJvZHkgcHVycGxlIGFuZCB3aGl0ZSBjbG9hawp1cmluZSBjb2xsZWN0aW9uIGJhZwppdiBwb2xlCmZsdWlkIGJhZwpuZWJ1bGl6ZXIgZXF1aXBtZW50CnN3ZWV0IGRyZWFtcwp2YWxpYW50CnNreSBvbiBmaXJlCmJsdWUgcmltIGxpZ2h0aW5nCm1hc2ggdXAKbXVzaHJvb21zIHN0eWxlIGFuZCBtYWNybyBzdHlsZQpkeW5hbWljIGxpZ2h0aW5nIHN0YXJzCmRyYWNvbmljIHN0YWZmCmRyYWdvbiBxdWVzdAptZW50YWwgaWxsbmVzcwpmdWxsIG9mIHJlZmxlY3Rpb25zCm5lYXQgbmFpbHMKcHJvdG90eXBlCm9wYWwgcGV0YWxzCm11c2hyb29tcyBvbiB0aGUgZ3JvdW5kCmNvaGVyZW50ISEhIGFydCBkaXJlY3RlZApmZWF0aGVyZWQgYXJyb3dzCnR1cnF1b2lzZSBwaW5rIGFuZCBncmVlbgpjb25uZWN0aW5nIGxpZmUKbG9vc2UgZ2VzdHVyYWwgcGFpbnRlcmx5CmZvcmVzdCBkcnlhZApmYXNoaW9uYWJsZSBycGcgY2xvdGhpbmcKcGVyZmVjdCBmYWNlIGRldGFpbHMKcG9ydHJhaXQgY2xvc2UgLSB1cAplbW1hIHdhdHNvbiBpbiBzdGFyY3JhZnQgaWkKc3dpbW1pbmcgdW5kZXJ3YXRlcgpibGFpciB3aXRjaApyb2NrIG4gcm9sbAp2b2lkIG9mIHNwYWNlCmVuZCBvZiBldmFuZ2VsaW9uCmlycmVndWxhcmx5IHNoYXBlZCBtb3NhaWMgdGlsZXMKaG9sZGluZyBhIHBvaXNvbm91cyBheGUKbWluZSBjYXJ0CmhpZ2ggZWxldmF0aW9uCnNreWJyaWRnZXMKMyBkIGJvbGQKZXBpYyBtYXR0ZSBwYWludGluZyBvZiBhbiBpc2xhbmQKaW4gZGVlcCBmb3Jlc3QgaHVuZ2xlCmhvcnJpZmljIHlldCBiZWF1dGlmdWwgdmliZQp2ZXJ5IHdvdwpkZXRlcm1pbmVkIGdhemUKbWFvcmkgYXJ0CmVzcG9ydHMKYnJvd24gdHVmZmxlIGNvYXQKZmxhc2tzIGluIGhhbmRzCnNob290aW5nIGljZQozIGQgZ2FtZSBhcnQKbWFkZSB3aXRoIGFuaW1lIHBhaW50ZXIgc3R1ZGlvCnNwZWVkc3RlcgpidWxscHVwCnBsYWluIHN0dWRpbyBiYWNrZ3JvdW5kCmhvbGRzIGEgc21hcnQgcGhvbmUgaW4gb25lIGhhbmQKcGhvbmUhISBoZWxkIHVwIHRvIHZpc29yCnJlZmxlY3Rpb24gb2YgcGhvbmUgaW4gdmlzb3IKc3RlcHBpbmcgb24gdGhlIGNpdHkKZmFicmljcyB0ZXh0aWxlcwpjb3VjaCBkZXNrCm1pZGRsZSBjbG9zZSB1cAp3aXRob3V0IGhhbmRzCnNpbXBsZSBjbGVhbiBsaW5lcwpkcmFtYXRpYyB0aGVhdGVyIGxpZ2h0aW5nCmxhcmdlIGdyZWVuIGRyYWdvbgp3YXIgc2NlbmUKY2hhcmlzbWF0aWMgYmVhdXRpZnVsCnRyb3BpY2FsIGNvYXN0YWwgY2l0eQpodWdlIHNob3VsZGVyIHBhdWxkcm9ucwphcnQgc3RhbmQKd2hpdGUgYmFzZWJhbGwgY2FwCmJvb2sgbGlicmFyeSBzdHVkeWluZwpsb3RyIG9mIHN0eWxlCmdyZWVuIHNlYQpsaXN0Cm1vZGVsaW5nIHN0dWRpbwpsb3cgZGV0YWlsZWQuIGRpZ2l0YWwgcGFpbnRpbmcKc25vd3kgYXJjdGljIGVudmlyb25tZW50CmZlbWFsZSByZXZlbmFudAp0aGVyb24KbGF3dGhlciBzaXQgYXQgdGFibGUgcGxheWluZyBkbmQKZGFyayBnbGFzc2VzCmJsdWUgdGludCBla3RhY2hyb21lIGZpbG0KbGFrZXNpZGUKa29kYWsgdmlzaW9uIDIgMCAwIHQKY3JhenkgaGFja2VyIGdpcmwKc2hhZGVzIG9mIGJsdWUKcm9hcmluZyAyMHMKbWVkaWNhbCBkcmF3aW5nIHdpdGggYW5ub3RhdGlvbnMKMzVtbSBjYW5vbiBlb3MgcjMKZm9nZ3kgbmVvbiBuaWdodApmcm9nIC0gZWxlcGhhbnQgY3JlYXR1cmUKZnJvZyBoZWFkCnNleHkgc3R5bGUKZnJvemVuIGFuZCBjb3ZlcmVkIGluIGljZQpzbWFsbCBkYXJrIGdyZXkgYmVhcmQKbGFzZXIgc2hhcnAKc2VnbWVudGVkIG9yZ2FuaWMgYXJtb3IKd2VhcmluZyBjaGFpbnMKYW5hdG9taWNhbCBhcnQKaGlwc3RlciBoYWlyIGZyaW5nZQpzb2Z0IGJ1dCBncnVtcHkKbW91bnRhaW4gdmFsbGV5IHRvIGZhY3RvcnkKY2FuZHkgcnVzaApiaWcgY2hlc3QKaG9vZnMKY2hhcmFjdGVycyBmcm9tIGF6dXIgbGFuZQpncmFpbnkgMTk4NSBjaW5lbWF0b2dyYXBoeQpjYW5vbiByZiA4IDAgMCBtbSBmIC8gNS4gNiBsCmFydCBkZWNvIGJ1aWxkaW5ncwpzdHlsZSBvZiBzaHV6byBvc2hpbWkKaGVucnkganVzdGljZQpkYXJrIGRpbWVuc2lvbgpzaGFycGVuZWQgZGVwdGggb2YgZmllbGQKYmx1ZSBkaWFtb25kcwpwcmluY2UgY3Jvd24gb2YgcmVkIGdlYXJzCnJ1c3NpYW4gY2l0eQptYXJvb24gbWV0YWxsaWMgYWNjZW50cwpmdXR1cmlzdGljIGhpbWJhIHlvdW5nIHdvbWFuCm1lY2hhbmljYWwgbGltYnMKcHlyYW1pZCBob29kdmlzb3IKbmVvbiBmbHVvcmVzY2VudCBjb2xvcnMKYXJjaGl0ZWN0dXJhbGx5IGFjY3VyYXRlCiggdWx0cmEgcmVhbGlzdGljICkKYmVlcGxlISEKb3JhbmdlIGJvZHkKc2xlZWsgdmlzb3IKc2hhcnAgYm9uZSBzdHJ1Y3R1cmUKc3RhbmRpbmcgaW4gYSBncm90dG8Kb3ZlcmNhc3QgYm9rZWgKZGV0YWlsZWQgc2lsdmVyIGFybW9yCmxhcmdlciB0aGFuIHRoZSBwbGFuZXQKZ2lhbnQgd2hpdGUgZGFpc3kgZmxvd2VyIGhlYWQKZ2lhbnQgd2hpdGUgZGFpc3kgZmxvd2VyIG9uIGhlYWQKdGlueSByYXRzCmRldGFpbGVkIHBsYWlkIG1pbmlza2lydApicm9rZW4gY29tcG9zaXRpb24KdGltYmVyZWQgaG91c2Ugd2l0aCBicmlja3MKc2NlbmljIHZpZXcgb2Ygcml2ZXIKNSAtIGNoYW5uZWwKKHdpbmtpbmcpCmxvbmcgc2hpcnQKYWVyb2R5bmFtaWMhISEhISEKZW5ncmF2ZWQgdGV4dHVyZQpzYWNyZWQgZ2VvbWV0cnkgcGF0dGVybgp3b29kIGFydApsb3cgZ2xvYmFsIGxpZ2h0CmVsYWJvcmF0ZSBsb25nIGJsYWNrIGhhaXJzdHlsZQpkZXRhaWxlZCBmYWNlIGZhY2UgZmFjZSBmYWNlCnN0dW5uaW5nIG5hdHVyZSBpbiBiYWNrZ3JvdW5kCnNpbHZlciBjdXJseSBoYWlyCmJheSB3aW5kb3cKaHVtYW4gb25pb24gaHlicmlkCmNsb3NlIC0gdXAgb2YgdGhlIGZhY2VzCnJ1c3NpYW4gbGFkYSBjYXIKdGFtcmllbApmb29kcGhvdG8KbWFueSBwbGFudHMgYW5kIGluZmluaXRlIHBvb2wKd2V0YSB3b3Jrc2hvcCBjb25jZXB0IGFydApoaWdoIHF1YWxpdHkgY29sb3JlZCBza2V0Y2gKc2V2ZXJhbCBsYXllcnMgb2YgZmFicmljCnhyYXkgYXJ0CmRldGFpbGVkIGNsb3NldXAgZmFjZQp3ZWFyaW5nIGEgdmVsdmV0IHJvYmUKc3RlZWwgYnVsbCBydW4KNiBjbGF3cwpyb2FkIGNhbGlmb3JuaWEgZGVzZXJ0CnBob3RvIHRha2VuIHdpdGggcHJvdmlhIDE5NjcKaGFybW9ueSBvZiBzd2lybHkgY2xvdWRzCmdyYW5kZmF0aGVybHkKMSA5IDEgMCBzIHBob3RvZ3JhcGh5Cml4aW9ucyB3aGVlbApoZXBoYWVzdHVzCmJpb2xvZ2ljYWwgcGhvdG8KbW9vZHkgZGFyawppbiBzY2kgLSBmaSBtdW1iYWkKZXhwZXJ0IGFydGlzdAptb29keSBza3kgYXQgdGhlIGJhY2sKd2VsbCBkcmF3biBmYWNlcwp6b2lkcyBhcnQKdmlicmFudCB1cGxpZnRpbmcgY29sb3Igc2NoZW1lCnNsZWVrIHN0cmVhbWxpbmVkIGRlc2lnbgpncmFkaWVudCBtYXJvb24Kc2lsdmVyIGFuZCB5ZWxsb3cgY29sb3Igc2NoZW1lCnNoYXJwIGRldGFpbGVkIHJvYm90IGRyYWdvbiBwYXdzCmVsZWdhbnQgc2hvdApqb2huIGhhcnJpcy4gY29uY2VwdCBhcnQKcm9sbGVyIGNvYXN0ZXIKdG9jY2hpbmkKZmlyZSB0ZXh0dXJlCnZvbGNhbm8gdGV4dHVyZQpoaWdobHkgZGV0YWlsZWQgc2NoZW1hdGljCjI1NjQzNTQ1NmsgZmlsbQo1MTM0MzU0NTZrIGZpbG0Kc3RpbGwgbGlmZSB3aXRoIGZsb3dlcnMKa2V3cGllIG1heW9ubmFpc2UKaGlsbHNpZGUgZGVzZXJ0IHBhdmlsaW9uCm11c2V1bSBjYXRhbG9nIHBob3RvZ3JhcGgKeW91bmcgdG9tIGhpZGRsZXN0b24KaGlzdG9yaWNhbCBiYXJvcXVlIGRyZXNzCmZsYW1lcyBvZiBmaXJlIGF0IGJhY2tncm91bmQKdmVjdG9yaXplZCBsb2dvIHN0eWxlCmh1bWFuIHBvcnRyYWl0CnNrdWxsaXNoCndhcmhhbW1lciA0IDAgayEhCm11eSBkb3RhZG8KYXRtb3NwaGVyaWMgYmVhdXRpZnVsIGRldGFpbHMKc3R1bmluZwpib2R5IGluIHdhdGVyCnNhdHVybm8gYnV0dG8uIG9jY3VsdCBhcnQKZGV0YWlsZWQgYW5kIHBlcmZlY3QgZmFjZQpnbGFzcyBiZWFkcwpjbGF5IGFtdWxldHMKYmlnZ2VyIGNoaW4KaG90IG5lb24gZ3JlZW4gb3JuYW1lbnRzCmx1aWdpJ3Mgbm9zZQpyZXBhaXJlZCB3aXRoIGtpbnRzdWdpCmF5a3V0IGF5ZG9nZHUgemVuZXIKZGltbWVkIHBhc3RlbCBjb2xvdXJzCnZlZ2V0YWJsZQpzdXBlciBhZXN0aGV0aWMKc3VwZXIgY29vbCEhIQpwdXJlIGIgJiB3CmJlYXV0aWZ1bCB0YWlzc2EgZmFybWlnYQp1bmRlcndhdGVyIG1hcmtldAp0YWtlIGNvdmVyCmdpYW50IG1vYWkgc3RhdHVlcwpzY2FmZm9sZGluZyBjb2xsYXBzaW5nCmJsYWNrIHJvYWQKaW5maW5pdHkgdGltZSBsb29wCmN1cmx5IGRhcmsgaGFpcgpjcm9uZW5iZXJnIGJvb2tzaG9wCmluc2FuZWx5IGZpbmUgZGV0YWlsCndhcmZyYW1lIGRlc3RpbnkgYXJ0CnJvYm90IHNrZWxldG9uCm92ZXJncm93biBlbnZpcm9ubWVudApiZWlnZSBjcmVhbSBuYXR1cmFsIG11dGVkIHRvbmVzCmpld2VsZWQgY3Jvd24KcGhvdG9yZWFsaXN0aWMgZmFuIGFydAplbmlnbWF0aWMgbGlnaHRpbmcKY2VudGVyZWQgZnVsbCBib2R5IHJlYXItc2hvdApqdWRnbWVudCBkYXkKanVua2VyIHF1ZWVuIGZyb20gb3ZlcndhdGNoCnNoYXF1aWxsZSBvJ25laWwgcHJlZ25hbnQKcHVkZGxlIG9mIHdhdGVyIG9uIHRoZSBmbG9vcgpzb2Z0IGlyaWRlc2NlbnQgbWVtYnJhbmVzCnBldGVyIG1hcmxvdyBwaG90b2dyYXBoeQp1Zm8gbGlnaHRpbmcKa2ltIGthcmRhc2hpYW4gYXMgYSBjb3AKcmVhci1zaG90CnNraW4gbWFkZSBvZiBsZWQgcG9pbnQgbGlnaHRzCnN5bW1ldHJpYyBsaWdodHMgYW5kIGZvZwp0cmFkaXRpb25hbCB0YWkgY29zdHVtZQo4IDAncyBzdHlsZSB0b21hc3ogYWxlbiBrb3BlcmEKZG5kIGZhbnRhc3kKc2hpbmluZyBsYW1wCmZ1bm55IHN1bmdsYXNzZXMKd2VhcmluZyBhIGxlbW9uCnNoYXR0ZXJlZCBza3kgY2luZW1hdGljCmxhY3Jvc3NlIHBsYXllcgpjYXJwb29sIGthcmFva2UKcGhvdG9ob290CmxhbWIgd2VhcmluZyBhIHN3ZWF0ZXIKdm9pZGxlc3Mgb2YgdGhlIGZlc3RpdmFsIQpmYXNjaW5hdGluZyB0ZXh0dXJlcwpsdW5hciB0aGVtZWQgYXR0aXJlCnNtb2dwdW5rCmxhcmdlIGJsdWUgZW5naW5lcwpsZWdlbmRhcnkgc3BhY2Ugc2hpcApzdGFuZGluZyBpbiBhbiBhcHBsZSBvcmNoYXJkCmxvZ28gY29uY2VwdCBkZXNpZ24KOSA5IGRlc2lnbnMKbG9va2luZyBjdXRlCnN0cmVhbWxpbmVkIG1hdHRlIGJsYWNrIGFybW9yCmx1bXB5IHNraW4KcGF0cmljayBuYWdsZSEhIQpsdXh1cmlvdXMgd29vZGVuIGNvdHRhZ2UKY2hhcmFjdGVyIGZyb20ga2luZyBvZiBmaWdodGVycwpmb2xkZWQKd2lkZSAtIGFuZ2xlIGZpbG0KZGlnaXRhbCBhcnR3b3JrIDQgawp3aGl0ZSBydXNzaWFuIGNsb3RoZXMKZHJlc3NlZCBpbiBwdW5rIGNsb3RoaW5nCnB1cnBsZSBzcGFya2xlcwpnb2xkIG9ic2lkaWFuIGFybW9yCmhvbGRpbmcgYSB1bWJyZWxsYQpyZWQgc2FuZCBiZWFjaAppbnRyaWNhdGUgbWVjaGFuaWNhbCBib2R5CmhhdW50aW5nIGJlYXV0aWZ1bCBicnVzaCBzdHJva2VzCnN0dW5uaW5nIG1hdHRlIHBhaW50aW5nCm1lZHVzYSBwb3J0cmFpdCBwYWludGluZwpmbGF0IGNvbG9yIGFuZCBsaW5lCmFwcGxlcGVuY2lsCm1pY2tleSBtb3VzZSBoZWFkCmluZG9vciBjYXNpbm8KZ2xvd2luZyBhcmNhbmUgZXllcwpkYXJrIHllbGxvd2lzaCB3YXRlcgp0aGUgbW92aWUgYWxpZW4KZGMgbWFydmVsIGZhc2hpb24KbW92aWUgc3RpbGwgb2YgYSB2aWxsYWluIGN5Ym9yZwppbnNwaXJlZCB2aWN0b3JpYW4gc2NpIC0gZmkKbXVzY3VsYXIgY2hlc3QKY3JlZXB5IHN1cnJlYWxpc20KaG91c2luZyBhcmNoaXRlY3R1cmUKY2hyaXN0b3BoZSB5b3VuZyBleXRhbiB6YW5hCmZhbnRhc3kgb3R0ZXIgbG92ZQppbmZpbml0ZSBmcmFjdGFsIHRlc3NlcmFjdAozNW1tIGRvdWJsZS1leHBvc3VyZSBwaG90bwpuYXRhbGkgcG9ydG1hbgpkYXJrIHBpdApwaW5rIGljb25pYyBjaGFyYWN0ZXIKamFwYW5lc2Ugcm9tYW50YWNpc20Kb2YgYSB5b3V0aGZ1bCBqYXBhbmVzZSBiZWF1dHkKcmVmbGVjdGlvbnMgaW4gY29wcGVyCmR1c3QgYW5kIHN0ZWFtCmNhdCBwb3J0cmFpdCBwYWludGluZwpkdXN0IHBhcnRpbGVzIGluIHRoZSBhaXIKYWxmcmVkIGdoaXNvbGFuZApwZXQgcmF0IG9uIHNob3VsZGVyCnRoaWNrIGhlYXZ5IGZvZwpnZW0gdG9uZXMKeW1tZXRyaWNhbAp0aGUgc29sYXJwdW5rIHBob2VuaXgKcmVkIGJpcmQKd2VhcmluZyByZWQgamFja2V0CnNtb2tlIGZvZyBhbmQgY3JlcHVzY3VsYXIgcmF5cwp3aXRoIGEgd2VpcmQgaGF0Cm93bCB2ZWN0b3IgcG9seWdvbiBnZW9tZXRyaWMKZGNzIHdvcmxkCmluc2FuZWx5IG5pY2UgaGFpciBzdHlsZQpidXJrYQpob2xkaW5nIGluIHRoZSBoYW5kcyBlYXN0ZXIgZWdncwpwYWludGluZyBvZiBjdXRlIGRvZwpsb2dpY2FsIGFuYXRvbXkKc3BhY2UgamFtbWVycwpwYWxlIGdvdGggYmVhdXR5Cm1lZGl1bSBbIGdyYWZmaXRpCndhbGwgXQpnYWxheHkgcmF5dHJhY2luZwp0aGVhdGVyIGN1cnRhaW5zIGFyZSByZWQKZXh0cmVtZSBib2tlaCBmb2xpYWdlCmZ1bGwgcGxhdGludW0gYmxvbmQKaW4gZ2lybHMgZ2VuZXJhdGlvbgpnb2xkIGxheWVycwpzdHlsZSBvZiBuZWtyb3hpaWkKcGFyayBvbiBhIGJyaWdodCBzdW5ueSBkYXkKcGhvdG8gc3RpbGwgb2YgYmVoaW5kIHZpZXcKc3VtbyBqYXBhbmVzZQpsb3dlciBxdWFsaXR5CmZvY2FsIGxlbmd0aAppbiBhIHRpbSBidXJ0b24gbW92aWUKaGVsbG11dCBuZXd0b24KY3JlYXRpdml0eSBpbiBmYXNoaW9uIGRlc2lnbgpwaG90b3JlYWxpc20gb2lsIHBhaW50aW5nCnBob3RvcmVhbGlzdGljIGRldGFpbGVkIHBpY3R1cmUKZ3JlZW4gbW9zcwpmbGF3bGVzcyBmZWF0dXJlcwppbnRlbnNlIGZsaXJ0aW5nCnNob3dpbmcgY3VydmVzCnZvZ3VlIGNvdmVyIDogOgpwaXp6YSBwaWUKY29tcHV0ZXIgcGFpbnRpbmcKcGluayBib2R5IGhhcm5lc3MKaGUgaXMgMyA1IHllYXJzIG9sZApwb3J0cmFpdCBhbmltZSBnaXJsCnBvcnRyYWl0IGFuaW1lIHNwYWNlIGNhZGV0IGdpcmwKY29sZCBncmV5IGV5ZXMKb3ZlcnNhdHVyYXRlZCBsZW5zIGZsYWlyCnBvcnRyYWl0IGppc29vIGJsYWNrcGluawp0aG91Z2h0ZnVsICkKZGFyayBiYWNna2dyb3VuZApub3JkaWMgY3Jvd24KcG9ydHJhaXQgb2YgY3lyYW5vIGRlIGJlcmdlcmFjCnBvcnRyYWl0IG9mIGdpZ2FjaGFkCnBvcnRyYWl0IG9mIGhvbWVyIHNpbXBzb24Kb3JuYW1lbnRhbCBhZXN0aGV0aWNzIGludHJpY2F0ZQpmYWNlLW9uCnZpYnJhbnQgZXhwcmVzc2l2ZSBjb2xvdXJzCmxhdWdoIGxpbmVzCnZpdmlkIGNvbG9yZnVsIGNvbWljcyBzdHlsZQpwb3J0cmFpdCBvZiBhIGdlaXNoYQppbnRlbnNlIGRlc2lyZQpibG9uZGUgc2hvcnQgaGFpcgpiZWVmeQpzcXVhcmUgZmFjaWFsIHN0cnVjdHVyZQptYXR0aGV3IGJlbmVkaWN0CmltcGVjY2FibGUgbWlsaXRhcnkgY29tcG9zdXJlCmhhcnNoIGdvb2QgbG9va2luZyBmYWNlCmltYXJpCnNob3J0IG11enpsZQpwb3J0cmFpdCBvZiBhIG1pZCAxIDkgdGggY2VudHVyeQpwb3J0cmFpdCBvZiBhIHJlZCBoYWlyZWQgZ2lybApvdXR3YXJkIHNsYW50ZWQgZXllcwpsb25nIGxvbmcgZmxvd2luZyBoYWlyCnRhdHRvb2VkIG1hbgpzdWx0cnkgYm9keSB3aXRoIHNleHkgYmVsbHkKMSA1IDAgMApvdmVyd2hlbG1pbmcgZW5lcmd5CmludHJpZ3VpbmcgZXllcwpicmlnaHQgd2hpdGUgaGFpcgpyZWQgY2FwCmJsYWNrIGZpcgp3aGl0ZSBleWVicm93cwp2YW5lc3NhIG1vcmdhbgp2ZW51cyBzcXVpZCBhc3Ryb25hdXQKenppc2xhdyBiZWtzaW5za2kKbWFzY3VsaW5lIGphd2xpbmUhCmxhcmdlIGZ1bGwgbW91dGgKZWxlZ3JhbnQKZ29sZCBhbmQgYmxhY2sgbWV0YWwKcG9ydHJhaXQgd2lsbG93IHNtaXRoCnNsaWdodGx5IHNtaXJraW5nCm9sZCBsYWR5IGN5Ym9yZyBtZXJjaGFudApwcm91ZCBzZXJpb3VzIGV4cHJlc3Npb24Kc25haWxzIHZzIGtuaWdodAp3YWx0IGRpc25leSB3b3JsZAp0aHJlZSBwb2ludCBsaWdodGluZyBiam9yawp0b21veXVraSB5YW1hc2FraQpydWdnZWQgYmxhY2sgY2xvdGhlcwpnbmFybHkgZGV0YWlscyBzb2Z0IGxpZ2h0Cm9sZCBleHBlcmltZW50YXRpb24gY2FiaW5ldApsb2cgaG91c2VzIGJ1aWx0IG9uIGhpbGxzCnB1bHAgc2NpZmkgaWxsdXN0cmF0aW9uCmhpZ2ggYmx1ZSBsaWdodHMKbG9uZyBibHVlIGNhcGUKZG9scGhpbnMgYW5kIHN3b3JkZmlzaApicmlnaHRseSBsaXQgYmx1ZSByb29tCnJpY2ggY29sZCBtb29keSBjb2xvdXJzCm5pY2sgc2lsdmEgYW5kIGlseWEga3V2c2hpbm92CmdyYWNlIGFuZCBibGVzc2luZwptaXN0eSBzcGFjZQpmcm9udCB2aWV3IDIgMCAwIDAKaGF1bnRlZCBleHByZXNzaW9uCnJlYWxpc3RpYyB3aWRlIGFuZ2xlIHBob3RvCnJlZCBoYWlyZWQgdGVlbiBib3kKaW5zaWRlIGFuIGVwaWMgZ290aGljIGNhc3RsZQpyZWluaGFyZHQgZnJvbSBvdmVyd2F0Y2gKbG9uZyBicmFpZGVkIHRlYWwgaGFpcgpzdW5ueSBza3kgbGlnaHQKYmxhY2sgY29sb3Igb24gd2hpdGUgYmFja2dyb3VuZApyZ2Igd2lyZXMKcmljaGFyZCBpdiB0aGUgcm9tYW4ga2luZyBwaG90bwpoYWxmIC0gYm9keSBjb21wb3NpdGlvbgpydWdnZWQgbWFuIHBvcnRyYWl0Cm1lZ2FsaXRoaWMKcnVucyBhd2F5IGZyb20gbWVuIG9uIHRoZSBmb3Jlc3QKc2FpbnQgaG9tbyBuZWFuZGVydGhhbGlzCnN1cnJlYWxpc20gb2lsIG9uIGNhbnZhcwp2YXBvcndhdmUgdGV4dHVyZXMKZ2xvd2luZyBncmVlbiBuZW9uIGV5ZXMKbGljaGVuIG1hY3JvCnVuY2hhcnRlZCA0CjY1bW0gZmlsbQpvbiBhIGFsaWVuIHBsYW5ldApzbmVha2VyCnBhbGUgZ3JlZW4gYmFja2xpdCBnbG93CnNpY2tseSBjb2xvcnMKY2hyb21hdGljIGNvbG91cnMKbWF5YSBhbGkgc29yY2VyZXIKd2VzdCB3b3JsZCBzaG93CmxvbmVseSBmYW1pbHkKc2lkZSB2aWV3IGZ1dHVyZSBjb2RlciBtYW4KZWFydGggYXR0dW5lZApicm93biByb2JlcwptZXRhbGxpYyBicmFzcyBhY2Nlc3NvcmllcwpzaG93aW5nIGtpbmdkb21zCndvbGYgc2t1bGxzCm11IHBhbgp0cm9waWNhbCBvY2Vhbgpzb3VnbyBva2l0YQpzb3VsIHJlYXZlcgpleGFnZ2VyYXRlZCBtdXNjbGVzCnJlZCBzb24Kc3RpY2tlciBvZiBhIHJvY2sgYmFuZApjZW50ZXJmcmFtZQo4IDAgbW0gZiAvIDIuIDggbApzaG9ydCBzcG91dApwYWxtcyBhbmQgbWlhbWkgYnVpbGRpbmdzCnBob3RvcmVhbGlzdGljIHNjcmVlbnNob3QKaW1heCBoZApzb3BoaXN0aWNhdGVkIGdyYXZ1cmUgaWRvbApmaXJlIHBvd2VycyBmaXJlIHN3aXJsaW5nCnZvbGNhbm8gc2V0dGluZwpzdHlsZSBvZiBtYWRob3VzZSBhbmltZQpwc2Qgc3ByaXRlc2hlZXQKaGFuZCAtIGRyYXduIDIgZCBhcnQKaHEgbGlnaHRpbmcKcm9sbGluZyBtb3VudGFpbgp0ZWxldHViYmllcyBpbiB0aGUgYmFja3Jvb21zCnRoZSBhbmF0b215IG9mIGEgaGVhZCBvZiBsZXR0dWNlCndpbmdzIG1hZGUgb3V0IG9mIGZsb3dlcnMKZmxvd2luZyBtYWdpY2FsIHJvYmUKbGVhdmVzIGluIHRoZSBhaXIKdGhlIGtpbmcgaW4gdGhlIGRlc2VydAp0aGUgbW9ndWwKcmVhbGlzdGljIHlvdW5nIGdyYXZ1cmUgaWRvbApzaXN0aW5lIGNoYXBlbCBjZWlsaW5nCnRoZSBzdHJhbmdlIGNyZWF0dXJlCnRoZSB0ZW1wbGUgb2YgdHJ1dGggaXMgd2hpdGUKd2hvbGUKaG9seSBhbmQgYmVhdXRpZnVsCnRoZSB1bHRpbWF0ZSBnaWdhY2hhZApoaWdobHkgZGV0YWlsZWQgdGVycmFpbgpjYXQgb24gdG9wIG9mIGRvZwp0b2RkIHNvbG9uZHoKcGl4YXIgaGlnaGx5IGRldGFpbGVkCmFic3RyYWN0IGNsYXltYXRpb24KdHdvIHlvdW5nIG1lbgpvbmUgbWFuIGh1bWFuCm9uZSBtYW4gdmFtcGlyZQooZGlhIGRlIGxvcyBtdWVydG9zKQp0cmlhZGljIGNvbG9yCnVsdHJhIGxvdyBwb2x5IG1vZGVsbGluZwp3YXJjcmFmdCAzCnBlYWNoIGFuZCBnb21hIHN0eWxlCm1pbGsgYW5kIG1vY2hhIHN0eWxlCmF0bW9zcGhlcmljIGNvb2wgY29sb3IgLSBncmFkZQpwaXhlbCBzdHJldGNoaW5nCjhrIGRlZmluaXRpb24KZ2lnYW50aWMgbW91bnRhaW5zCm5vYm9keSBoZXJlCndhdGVyZmFsbCBpbiBhc3Rlcm9pZCBmaWVsZApuZW9uIGxpZ2h0cyBsb3RzIG9mIHRyZWVzCndpbGxvdyBzbWl0aCB5b3VuZwp3aW5kb3cgd2l0aCBmbG93ZXIgYm94CndlYXJpbmcgbGF0ZXgKZHJhZ29uIGVnZ3MKeW91bmcgd29tYW4gaW4gaGVyIDIwcwp2ZXJ5IGRldGFpbGVkIMK7CnVucmVhbCBlbmdpbmUg4oCdCmNpbmVtYXRpYyBsaWdodGluZ+KAnQp5YW5qdW4gY2hlbmd0CmRyYW1hdGljIOKAnQpoeXBlcnJlYWxpc3RpYyDigJ0KYXdhcmQtd2lubmluZ+KAnQpnb2xkIGdyZWVuIGFuZCBwdXJwbGUgY29sb3Jz4oCdCmRhcmsgYmFja2dyb3VuZOKAnQrigJxkZXJlbGljdCBhcmNoaXRlY3R1cmUgYnVpbGRpbmdzCuKAnHdpZGUgc2hvdAoxCjIKd2lkZSAtIGFuZ2xlIHBvcnRyYWl0CnBsYXN0aWMgYm90dGxlcwpzYW5kIGFuZCBzZWEKZWVyaWUgbW9vZApjYXJvbGluZSBmb3N0ZXIKaW1tb3J0YWwKcmF6b3Igc2hhcnAgdGVldGgKYmFzaWwKcHVua3MKaG9wZWxlc3MgZW1vdGlvbnMKMSA5IDMgNQp3cml0aGluZwohIWhpZ2hseSBkZXRhaWxlZApmYXQgZmlndXJlCmJyYWNlbGV0cyBhbmQgbmVja2xhY2VzCmhhaXIgZGV0YWlsaW5nCmJhY2tncm91bmQgaXMgaGVhdmVubHkKd29uZGVybGFuZCBhdCBuaWdodAphY2NvcmRpbmcgdG8gZXVyb3BlYW4gYXJ0CmdvbGRlbiBzYWNyZWQgdHJlZQpnb2xkZW4gYXBwbGUKZGlzY29yZCB0YWtlbiBmcm9tIGxpZmUKbW9vZHkgYmx1ZSBsaWdodGluZwp5b3VuZyBiZWF1dGlmdWwgZmFjZQpyZXRybyBjb2xvcnMKYXQgdGhlIGVuZCBvZiB0aW1lCmRhcmsgc2tpbm5lZApnZW9yZ3kga3VyYXNvdgpibGFjayBiZXJldApmdW5nYWwgZ29kCmN5YmVyY29yZQpmdXR1cmlzdGljIGRlY29yYXRpb24Kc3Bpa2V5IGhhaXIKZGlnaXRhbCBmYW50YXN5IHBhaW50aW5nCnByb3Rlc3QKbG9uZyBoYWlyIHdpdGggYSBwb255dGFpbApmZW5yaXIKbWFuaGF0dGFuCicyZCBncmFwaGljIGRlc2lnbgpoaWdobHkgZGV0YWlsZGVkJwpnaWx0IHNpbGsgdG9ybiBmYWJyaWMKdGV4dGJvb2sgcGFnZQpoZWFkIGV4cGxvZGluZwpkZXNpZ25lcnMgcmVwdWJsaWMKaG9nd2FydHMgZ3JlYXQgaGFsbAppbiBzdHlsZSBvZiBoZWF2eSBtZXRhbCBjb21pYwpnYXplCnBvdGF0byBza2luCnBvdGF0bwooIGNvbG9yZnVsICkKcGFzc3BvcnQKcmVkIHRoZW1lCmFubmllIGxlaWJvd2l0CmZ1bGwgYm9keSBmZW1hbGUKY2luZW1hdGljIGxpZ2h0aW5nIDQgawptYW4gaW4gd2hpdGUgdCAtIHNoaXJ0CnNraW4gb24gdGhlIGdhbWluZyBwYwp0aGVtZSA6J2ljZXdpbmQgZGFsZSAnCjhrIGZpbmUgYXJ0IHBob3RvZ3JhcGh5CnJlZCBuZW9uIGxpZ2h0cwpmaXJzdCBldmVyIHBob3RvZ3JhcGgKcmljaGFyZCBzY2FycnkKc2luZ2xlIGxpZ2h0CnNvZnRseSBiYWNrbGl0Cm9yYW5nZSBtaW5lcmFscwpsdXNoIGdyZWVuIGZvcmVzdApnbG9vbXkgbGlicmFyeQpwcm9wb3J0aW9ucyBvbiBhIGNpcmNsZQpmZWFybGVzcwoxIDcgLSB5ZWFyIC0gb2xkIGFuaW1lIGdvdGggZ2lybAphbmltZSBoZApyYWlueSBhbmQgZm9nZ3kKZGlyZWN0b2lyZSBzdHlsZQp1bHRyYSAtIHJlYWxpc3RpYyBmYWNlcwpkb3QgYXJ0CmhvbGRpbmcgZWxlY3RyaWMgZ3VpdGFyCmJldHR5IGJvb3AKc2hvdWxkZXIgbGVuZ3RoIGhhaXIKbG90cyBvZiBmbG93ZXJzCmFudGlxdWVzCm5vbiAtIGV1Y2xpZGVhbgoxIDkgNyAwIHMgc3R5bGUKb3B1bGVuY2UKOCBrIHJlc29sdXRpb24hISEKYWR2ZXJ0aXNpbmcgdmlzdWFsaXphdGlvbgp3aWRlc2NyZWVuIDQgawpzdGFuZGluZyBpbiB0aGUgc3RyZWV0CmZveCBtY2Nsb3VkCm11dGVkIHJhaW5ib3cgdHViaW5nCnZocyBhcnRpZmFjdHMKMSA5IHRoIGNlbnR1cnkgbG9uZG9uCm3DtmJpdXMgYW5kIMOmb24gZmx1eApnYXJkZW4gd2l0aCBmcnVpdHMgb24gdHJlZXMKbWFydGluIGpvaG5zb24KMTkwMApkZXNpZ24gcmVmZXJlbmNlCmluIGRlZXAgZm9yZXN0IGp1bmdsZQpkdXNrIG9uIGp1cGl0ZXIKcGluayBzbGltZSBldmVyeXdoZXJlCmluIGEgc2lkZXdhbGsgY2FmZQpwb3J0cmFpdCBwaWN0dXJlCmhlYXZ5IGxpbmVzCnNtb2tlIGdyZW5hZGUKc2V0IGluc2lkZSBvZiBwYXJraW5nIGdhcmFnZQpjZWwtc2hhZGVkOjE3CnRveW90YSBzdXByYQpkZWZvcm1lZAp3ZXQgcHVkZGxlcyByZWZsZWN0aW5nCmluIHN0eWxlIG9mIGphbWVzIHBhaWNrCjIgMSBzYXZhZ2UKZGllIGFudHdvb3JkIG11c2ljIHZpZGVvCjIgOCB5ZWFyIG9sZCBtYXJ5IGxvdWlzZSBicm9va3MKc3BsYXNoIGF1cmEgaW4gbW90aW9uCmF1dG9jYWQKY29uZXB0IGFydApuZXcgZW5nbGFuZCBhcmNoaXRlY3R1cmUKb2lsIHNsaWNrCmJlbGdpdW0KOCBrLiBsaWZlbGlrZS4gbmlrb24gZCA4IDUgMApyZWFsaXN0aWMgZGV0YWlsZWQgYmFja2dyb3VuZAoyMDA4CmNoaWxkcmVuJ3MgYm9vayBjb3ZlcgpwbGVhc2luZwpoaWdoIHF1YWxpdHkgYW5pbWUKY29sb3JlZCBsaW5lYXJ0CnNpbHZlciB2ZXJ5IG9ybmF0ZSBqZXdlbHJ5CmVsYWJvcmF0ZSBqZXdlbHJ5CnZhbXBpcmUgb2YgY2xhbiBsYXNvbWJyYQpjb3ZlcmVkIGluIGR1c3QKZHJhbWF0aWMgY2luZW1hdG9ncmFwaHkgMyA1IG1tCmluZHVzdHJpYWwgZmlyZXMgYW5kIHNtb2cKMyA1IG1tIGNvbG9yIHBob3RvZ3JhcGh5CjEgOSA5IDIKZ3JhZGVkIHdpdGggZGF2aW5jaSByZXNvbHZlCmphbnVhcnkgYW5kIGZlYnJ1YXJ5CmxhemVycwphc3VrYQp6aWdvciBzYW1hbmllZ28KMyBkIGFydHdvcmsKaG90bGluZSBtaWFtaQpnb3RoY29yZQp3YXRlciByZWZyYWN0aW9ucyEhCnN0aW5ncmF5CnN1Z2FyCmZpc2hpbmcKc3BpZGVybWFuISEKZW1wdHkgYmFja2dyb3VuZApuZXJ2b3VzIHN5c3RlbQpyZW5kZXJlZCBsaWdodGluZwpjeWJlcnB1bmsgamFwYW5lc2UgdGVtcGxlCnN0dWZmZWQgYW5pbWFsCm1hcmllIC0gZ2FicmllbGxlIGNhcGV0IHN0eWxlCmFzc2FzaW4KcGhvdG9yZWFsc2l0aWMKZHJhbWF0aWMgcG9zaW5nCmJlYXV0aWZ1bCB2aWJyYW50IGNvbG9ycwpwaWN0dXJlIHRha2VuIGluIDEgOSAzIDAKcG9wcHkKbGFyZ2UgYW5kIHRhbGwKaGRyaSBsaWdodGluZwpmdWNoc2lhCmZ1ciB2aXNpYmxlCmRldGFpbCByZW5kZXIKd29vZGVuIHRhYmxlCnBvb2xzCnN0b2NrIGZvb3RhZ2UKc2hhZ2d5IGhhaXIKYXJ0aXN0YXRpb24gcmVuZGVyCnBpbmtzCndheHkKaHVtYW4gYm9kaWVzCnBpeGFyIGN1dGUgY2hhcmFjdGVyIGRlc2lnbgphbmNpZW50IHRyZWUKdW5yZWFsIGVuZ2luZTUKdHJlbmQgb24gYmVoYW5jZSBpbGx1c3RyYXRpb24KdmVyeSBsb25nIHNub3cgY29sb3JlZCBoYWlyCnBpc3RvbnMKaXNvbWV0cmljIHZveGVsCmxhdGV4IGZsZXNoIGFuZCBmYWNpYWwgbXVzY2xlcwpodW1hbm9pZCBzaGFwZQp0cmlweQpzYWlsaW5nIHNoaXAKM2QgbWFya2V0cGxhY2UKZnJlZXppbmcKdWx0cmFkZXRhaWxlZCA4awpmZWF0dXJlZCBpbiBvcGVuIGhvdXNlIG1hZ2F6aW5lCjQgMCB5ZWFycyBvbGQgbWFuCm51cmdsZQphc2hlcyBzZWVtIHRvIGJlIGFsaXZlCnN3aXJsaW5nIGFyb3VuZAphbmNpZW50IGludGVyaW9yIHRlbnQgYmFja2dyb3VuZApoaWdoIGxldmVsIGJvZHkgc3VpdAppbXBvc3NpYmxlIGRldGFpbAp2aXJ0dW9zaWMgbGV2ZWwgZGV0YWlsCmFuZ3VzIG1jYnJpZGUKbG9yZW56byB2aXR0dXJpCmFuaW1lIHNrZXRjaAptYXR0ZSBjb2xvciBwYWxldHRlCmVhY2ggZmFjZXMgcHJlY2lzZWx5IGRlZmluZQpwcm9mZXNzaW9uYWxseSBtYWRlCmR5bmFtaWMgcHJvcG9ydGlvbmFsCndldCBza2luIGFuZCB3aW5kYmxvd24gaGFpcgphZnJpY2FuIHBsYWlucwpoaXBlcnJlYWxpc20KZmxvYXRpbmcgY2l0eQpkcmFtYXRpYyBkYXJrIGxpZ2huaW5nCmNvbmNlcnQgcGhvdG8Ka2lyb2themUKaW50cmljYXRlIGZhY2VzCnN0YW5kaW5nIGluIHRoZSBzdHJlZXRzCnJvbgpzdGFubGV5IGt1YnJpY2tzCmJpa2luaS1hcm1vcgpodW1hbiB0b3JzbwpzbGVldmVsZXNzCnZocyBzY3JlZW5jYXAKZGFyayB1bmRlcmdyb3VuZCBjYXZlCmFudApyZWQgYW5kIHB1cnBsZSBwYWxldHRlCnJvbWFudGljIGdyZWVuZXJ5Cm1lZGljYWwgaW1hZ2luZwpwaG90b3JlbGlzbQpwb3J0cmFpdCBvZiBqZXJtYTk4NQo1MHMKdGVhcnMgaW4gdGhlIHJhaW4KdGFrZW4gd2l0aCBhIGxlaWNhIGNhbWVyYQp5b3NoaXRvbW8gbmFyYSBhbmQgYXlhIHRha2FubwpzaG9qbwp2ZXJ5IGRldGFpbGVkIGZlZWwKdmVyeSBoYXp5CmltbWVuc2UgY29zbWljIGF1cmEKY3VydmVkIGxpbmVzCmR5c3RvcGlhbiBjeWJlcnB1bmsKbXVsdGlzY29weQptZXRlb3JzIGFyZSBmYWxsaW5nIGZyb20gdGhlIHNreQphcXVhbWFyaW5lCmNvZmZlZSBhcnQKYWVuYW1pIGFsZW5hCm9saXZlCjhrIHVoZCBpbWFnZQpyb21hbnRpY2lzbSBzdHlsZQpmcm9tIGFyY2FuZQphbGVicmlqZXMgYWVzdGhldGljCnNob3QgZnJvbSB0aGUgYmFjawpkaWdpdGFsIDJkIGRyYXdpbmcKd2l0aCBqYWdnZWQgcm9ja3MgYW5kIGVlcmllCm1vbnN0cm91cyBjcmVhdHVyZXMKbWlzY2hpZXZvdXMgZ3Jpbgpib21iZXIgamFja2V0Cm9uIGEgbWFubmVxdWluLiBoaWdoIHF1YWxpdHkKdG9ybiBjbG90aGluZwpoeXBlciByZWFsaXN0aWMgZXllcwpiYWxkIGxpbmVzCndpbmdlZApsYXJnZSBub3NlCmdvb2QgZm9jdXMKY3J1bWJsaW5nIGJ1aWxkaW5ncwpkYXZpZCByaW9zIGZlcnJlaXJhCnN0eWxlIG9mIGxlYWd1ZSBvZiBsZWdlbmRzCmFxdWEKb3JhbmdlIGFuZCBibHVlIGNvbG9yIHNjaGVtZQpwaXhpdiAzZGNnCnNjZW5pYyBlbnZpcm9ubWVudAphdG9tcwo0ayBtYXN0ZXJwaWVjZQphIGJlYXV0aWZ1bCB2aWN0b3JpYW4gd29tYW4KaWxsdXN0cmF0ZWQgYW5pbWUKYnV0IGVlcmllCndpdGggbG90cyBvZiBkYXJrIGdyZXkgcm9ja3MKZmFjZSBjZW50ZXIgY2xvc2UtdXAKbWFza3MKdHdvIGhlYWRzCmJlYXV0aWZ1bCByZWZsZWN0aW9ucwpwb3N0ZXIgaWxsdXN0cmF0aW9uCnNob3JlbGluZQpzdHVubmluZyBiZWF1dHkKY2xvc2UtdXAgcGhvdG9ncmFwaHkKZmFudGFzeSBjcmVhdHVyZQpkaXJ0eSBjeWJlcnB1bmsgY2l0eQpjb2JibGVzdG9uZSBzdHJlZXQKc2VwaWEgY29sb3JzCmFuYWNocm9uaXN0aWMgZmFudGFzeQpjdXRlIGtpdHRlbgpzY29ycGlvbgpnb3VybWV0IGNvb2tpbmcKY29sb3VyIHBob3RvZ3JhcGh5CnNwYWNlIGVsZXZhdG9yCmZhbnRhc3kgaW5zcGlyZWQKc291bGxlc3MKd2hpdGUgd29sZgpiYWdzIHVuZGVyIGV5ZXMKc29kYQpkYXJrIGZ1dHVyZQpyaWRsZXkgc2NvdHQgZmlsbQpmdW5ueSBjYXJ0b29uaXNoCmhhbmRkcmF3bgpnbGFzc3kgZXllcwpleHRyZW1lbHkgY3V0ZSBhbmltZSBnaXJsIGZhY2UKcHJvc3RoZXRpYyBhcm0KY3liZXJwdW5rIGNpdHlzY2FwZQpzcGFjZSBoZWxtZXQKcGluaW5mYXJpbmEKcHVycGxlIGFuZCBibHVlIGNvbG9yZWQKMTcwMHMKZnJvbSBiZXJzZXJrCmZyb20gd2FyY3JhZnQKc3BhZ2hldHRpIHdlc3Rlcm4KZmlsbSBub2lyZQphIGRldGFpbGVkCmRhcmsgbGVhdGhlciBhcm1vcgptaWNyb3NvZnQKd2lsZCBwb3dlcgp0YWthdG8geWFtYW1vdG8gYWVzdGhldGljCmQmZCBhcnQgc3R5bGUKZGFyayBmZWVsaW5nCjkwJ3MgbW9kZXJuIGFydApleHRyYS1saWdodCBuYXR1cmFsIGJsb25kZSBoYWlyCmh5cGVycmVhbGlzdGljIHBpY3R1cmUKcm95YWx0bHkKa2VpcmEga25pZ2h0bGV5CmJsdWUgdHVuaWMKYXMgYW4gYXRsYW50ZWFuCmdvbGRlbiBkYXBwbGVkIGR5bmFtaWMgbGlnaHRpbmcKdW5pcXVlIG5vbiBjb252ZW50aW9uYWwgYmVhdXR5CmRhcmsgcGluLXVwIHN0eWxlIGhhaXIKb3Zlci10aGUtc2hvdWxkZXIgc2hvdAphcGUKcG90cyB3aXRoIHBsYW50cwphIGZsYW1pbmcgZm9yZXN0Cmh1Z2UgZmxhbWUgZmFudGFzeSBwbGFudApjb3ZlcmVkIGluIGZsYW1lIHBvcmNlbGFpbiB2aW5lCm1hcnRpbiBzYW5kaWVnbwpkYXJrIGNhdmVybgpzZXBhcmF0ZWQKYm9rZWggZGVwdGggb2YgZmllbGQKc2VyaW91cyBjb21wb3N1cmUKcHJpZGVmdWwgbG9vawp3aXphcmQgcm9iZXMKbG9uZyBzaG90IGZyb20gYmFjawpmdWxsIGhlaWdodCB2aWV3CmJsYWNrIGFuZCBncmV5IHRhdHRvbyBzdHlsZQpyZXRyby1mdXR1cmlzbQptaW5pbmcKZHJhZ29uIGJvZHkKcGhvdG8tc2hvcHBlZAp5ZWxsb3cgYW5kIHB1cnBsZSB0b25lcwpyYWlueSBhbmQgZ2xvb215IGF0bW9zcGhlcmUKaW4gc3R5bGUgb2YgcmVtYnJhbmR0CnJldHJvIHNjaWZpCmNsb3NlLXVwIHBob3RvZ3JhcGgKbXVkZHkgcm9hZApvbGQgY2VtZXRlcnkKY2FuZGxlIGxpZ2h0cwppbiB0aGUgb2NlYW4KcnVnZ2VkIGZhY2UKbG9zdCBjaXR5CnN0eWxlIGluIGdoaWJsaSBhbmltZSBzdHlsZQpzcG9yZXMKaHlwZXJyZWFsaXNpbQpibGFjayBncmFkaWVudCBiYWNrZ3JvdW5kCmxhZGRlcgpibGFjayBhbmQgcmVkZGlzCmZpcmV3b3JrCmVlcmllIGFydCBzdHlsZQpwb3N0IGFwb2NhbHlwdGljIHNjZW5lCnNob3Qgb24gaXBob25lIDYKY2FtZXJhcGhvbmUKM2QgbGFuZHNjYXBlCmdsb3dpbmcgbGFudGVybnMKYnVpbHQgYXJvdW5kIG9jZWFuCmZ1bGwgd2l0aCBwZW9wbGUKMTk4MCdzCmhvbGRpbmcgYSBmbGFtaW5nIHN3b3JkCmRlZm9ybWVkIGZhY2UKd2lkZSBsYW5kc2NhcGUKcmVkIGFjY2VudHMKaGVyIHdob2xlIGhlYWQgZml0cyBpbiB0aGUgZnJhbWUKZm91ciB5ZWFycyBvbGQKbGlnaHQgZ3JleS1ibHVlIGV5ZXMKYSBtaWQtY2VudHVyeSBtb2Rlcm4gY29sbGFnZQphcnQgZGlyZWN0b3IgYWxwaG9uc2UgbXVjaGEKZnV0dXJpc3RpYyB3aGl0ZS1zcGFjZS1iaWtpbmkKNjAncyBzY2ktZmkgcGludXAKc3RhcnNoaXAtdHJvb3BlcnMtcmlmbGUKMzAwbW0KbmF0dXJhbCBvdmVyY2FzdCBsaWdodGluZwpwZXRlciBpbHN0ZWQKdGh1bmRlcnN0b3JtIGF0IG5pZ2h0Cm9sZCBwb2xhcm9pZCBwaG90bwptaW5pbWFsIHNoYWRpbmcKZnJvbnRhbCBzaG90CmxhcmdlIGJydXNoCmhlcmN1bGVzIGJyYWJhem9uCigoKHVucmVhbCBlbmdpbmUpKSkKdmFuIGdvZ2ggYXJ0IHN0eWxlCmxlb25hcmRvIGRhIHZpbmNpKQpkZWVwIHB1cnBsZQpob3QgcGluawpjb2xvciBzcGxhc2gKbW92aWUgcHJvbW8KZG9pbmcgYSB0aHVtYiB1cApicmVha2luZwpkdXJpbmcgc3Vuc2V0CmFoZWdhbyBmYWNlCmNyYWNrIGhlYWQKbWF4IHF1YWxpdHkKZXBpYyAzNSBtbSBsZW5zIHNob3QKY2Fub24gZW9zIDkwZApoZWFkIGluIGhhbmRzCmhpZ2ggY2VpbGluZ3MKdGFrZW4gb24gYSAxOTcwcyBwb2xhcm9pZCBjYW1lcmEKbWVtZXMKZi80CnBzeWNoZWRlbGljIGJsYWNrIGxpZ2h0Cm1lY2ggY29uY2VwdCBhcnQKbWFydmVsIGFydApiYXR0bGUgd29ybgphIHBvcnRyYWl0IG9mIGEgcGx1bXAgd29tYW4KcnVsZSAzNApwdXJlIHdoaXRlCmhpa2FyaQpjYXBpdGFsIHNpbiBvZiBwcmlkZQprYXJhY2hpIHNreWxpbmUgYmFja2dyb3VuZAptZXJyeSBlbmdsYW5kCmJsYWNrIGFuZCB3aGl0ZSB0YXR0b28KcGVhY29jayBmZWF0aGVycwptaW5pbWFsIHBhaW50aW5nCnNlZW4gZnJvbSB0aGUgc2lkZQplbXB0eSByb2FkCmZ1bGwgbW9vbiBpbiBiYWNrZ3JvdW5kCmNhcmQgZ2FtZSBpbGx1c3RyYXRpb24KbGVmdCA0IGRlYWQKcmViZWNjYSBzdWdhcgpyb2JvdGljIG1hY2hpbmVyeQpvcm5hdGUgZGV0YWlsCmxvdHVzIGZsb3dlcnMKc2l0dGluZyBhbG9uZQptYWNoaW5lcyBhbmQgd2lyZXMgZXZlcnl3aGVyZQptaW5kLWJsb3dpbmcgZGV0YWlsCmJhY2tncm91bmQgZGVwdGgKcGluayBmdXIKY2luZXN0aWxsIDgwMCB0Cm1lcmNoYW50cwpidXMKdmVyeSBjbG9zZSBzaG90CmRhcmsgY29sb3IuIGV4cGxvc2lvbnMKZm9jdXMgaW4gdGhlIGZvcmVncm91bmQKc3ByaW5ncwo4ayBpbWF4CmhpZ2ggcXVhbGl0eSBjb25jZXB0IGFydApkcmFnb24gYXJtb3IKcGVyc2lhbiBjYXJwZXQKbHVzdHJvdXMgbWluZXJhbHMKemlnLXphZ3MuIG1vdW50YWlucwpsb29raW5nIGF0IHRoZSBzdGFycwp2aWV3IGZyb20gc2lkZQphIHdvb2Rlbgpza2luIHBvcmVzCnRyaWNvcm4gaGF0CnByb2Zlc3Npb25hbCBzdHVkaW8gcGhvdG8KcmFpbiBzdG9ybQpzdHlsZSBibGVuZCBvZiBidXJuaW5nIG1hbgpsZXR0ZXJzCnN0aWxsIGZyb20gbG9yZCBvZiB0aGUgcmluZ3MKc2FkIGZlZWxpbmcKYWJhbmRvbmVkIGJ1aWxkaW5nCmNvYmJsZWQgdG9nZXRoZXIgbmlzc2FuIHIzNCBndHIKZm9nIGZpbGxzIHRoZSBhcmVhCmJyaWdodCBzdW5ueSBkYXkgYmx1ZSBza3kKbWFuZGVsYnJvdCBzZXQKYWRvbGYgaGl0bGVyCnZyIGlyaWRpdW0gdmlzb3IKcGluayBjbG91ZHMgaW4gdGhlIHNreQphZ3JpZ2VudG8KYWthbGkKZnJhbmsgemFwcGEKa2luZG5lc3MKc2hhdmVkIGZhY2UKcGVuY2lsIGlsbHVzdHJhdGlvbgpzb2Z0IGJydXNoc3Ryb2tlcwphbGV4YW5kZXIgdGhlIGdyZWF0CmdyYWRpZW50IGNvbG9ycwpkaWFtb25kcyBibGF6ZQpob2xkaW5nIG5vdGVib29rCmNoYXJjb2FsIHBvcnRyYWl0CmRlZXAgYmx1ZSB3YXRlciBjb2xvcgphenVyZSB3YXRlcgpuYXJyb3cgYW5kIHdpbmRpbmcgY296eSBzdHJlZXRzCnRyb3BpYyBjbGltYXRlCnJpY2ggdmlicmFudCBkZXRhaWxlZCB0ZXh0dXJlcwp0aGUgb2x5bXBpY3MgZm9vdGFnZQpkZXRhaWxlZCBleWVzIHdpdGggcHVwaWxzCmNvbG9yIGdyYWluIDM1bW0KaG9ycm9yIGlsbHVzdHJhdGlvbgpjaGlzZWxlZCBqYXdsaW5lCmx1bmFyIGJhY2tkcm9wCmFuIGVsZgphcmNoaXRlY3R1cmFsIHZpc3VhbGlzYXRpb24KYW4gYXBwbGUKZ2FtaW5nIGNoYWlyCmFuIG9yYwphY3Rpb24gcGVyc3BlY3RpdmUgY29uY2VwdAp0cmFkaXRpb25hbCBqYXBhbmVzZQpmaXNoZXllIGNhbWVyYQpiZWF1dGlmdWwgYW5pbWUgYXJ0d29yawphbmRyZWkgcmlhYm92aXRjaGV2IHN5bW1ldHJpY2FsCjE4dGggY2VudHVyeSBwYWludGluZwpncmVlbiBsZWF2ZXMKdHJlbmRpbmcgb24gYXJ0c3RhdGlvbmgKY2luZW1hNGQgcmVuZGVyCm1hbGUgYXJ0CmluIGEgcm9vbQpwaG90b3JlYWxpc20uIHRyZW5kaW5nIG9uIGZsaWNrcgpoeXBub3MKbW92aWUgbGlnaHRuaW5nCmJ1enogY3V0IGdyYXkgaGFpcgp0aGUgYmVhc3Qgb2YganVkZ2VtZW50CmJleW9uZCB0aGUgcnVsZXMgb2YgcGh5c2ljcwphYm92ZSBtZWFuaW5nCmluY29tbWVuc3VyYXRlCmF2ZXJhZ2UKYmx1ZSBzZWEKYmFycmVscwpyYWdnZWQKYXJ0aXN0IGltcHJlc3Npb24KcGluayBodWVzCjRrIHVucmVhbCBlbmdpbmUgcmVuZGVycwpjb250ZXN0IHdpbm5pbmcgbWFzdGVycGllY2UKd2lsbG93IHRyZWVzCnN0cm9uZyBjb250cmFzdHMKYW5kcmV3IGdhcmZpZWxkCmdvbGQgbWlzdAp0ZWQgbmFzbXV0aApjb2hlcmVudCBzeW1tZXRyaWNhbCBhcnR3b3JrCnBob3RvZ3JhcGggcG9ydHJhaXQKbWFyb29uCmNpbmVtYXRpYyBwYW5hdmlzaW9uIDUzODQgZmlsbQpjbGF5bW9yZQp2aXN1YWwta2V5CmhvbG9saXZlCmJsdWUgb3V0Zml0CmFuaW1lIGZhbnRhc3kgYXJ0d29yawpvY3RhbmUgcmVuZGVyIHVoZCA0awpiZWF1dGlmdWwgdm9sdW1ldHJpYyBsaWdodApoYWxvIG92ZXIgaGVyIGhlYWQKcGFzdGVsIGNvbG9yaW5nCnNwZWNpbWVucyBpbiBnbGFzc2VzCnN0cm9uZyBjb2xvdXJzCmVlcmllIHBlcnNvbiBzaWxob3VldHRlCnR1cmJhbgphcmNhZGlhCndpZWxkaW5nIGEga2F0YW5hCnR2IGNvbW1lcmNpYWwKc2FtdXMKc3R5bGl6ZWQgZGlnaXRhbCBhcnQKZWxlY3RyaWNhbCBwbGFudCBsb2NhdGlvbgphcnlhIHN0YXJrCmFzaCB3aWxsaWFtcyBmcm9tIHRoZSBldmlsIGRlYWQKdGludGluCmRlcHJlc3Npb24gYW5kIGRlc3BhaXIKYXR0cmFjdGl2ZSB0aWVmbGluZyBkcnVpZApnbG93c3RpY2tzCmF1YnJleSBwbGF6YQpjYXIgY3Jhc2gKYnVybmluZyBjaXR5CnR3aXN0ZXIKcmVkIHNhbmQKdGl0YW5pYwpiYW5kYWkKdHJhbnNmb3JtZXJzIGFybWFkYSEhISEhCmZ1c2VsYWdlCmdlbmVyYXRpdmUgZGVzaWduCmJhbmdsZXMKdmhzIHRhcGUKYm9yZWQgYXBlIHlhY2h0IGNsdWIKc29saWQgY29sb3IgYmFja2dyb3VuZCBpbnRyaWNhdGUKcmFuZG9tbHkgc2VnbWVudGVkIHJvb21zCmJsYWNrIGxlYXRoZXIKaW50cmljYXRlIHRhdHRvb3MKbXVsYW4KZm5hZgp1cmJhbiBncmFmZml0aSBiYW5rc3kKYm9yZGFsbwp6ZGlzemxhdyBiZWtzaW5za2kKZmFudGFzeSBob3Jyb3IgYXJ0CmltYXggZmlsbSBxdWFsaXR5Cmh5cGVycmVhbGlzdGljIGZhY2VzCmNyaW1zb24gZ3JhZGllbnQKc3R5bGUgb2Ygam9qb2xpb24gY292ZXIgYXJ0CmNsb3VkcyBhbmQgd2F2ZXMKam9zZXBoaW5lIHdhbGwgYW5kIHBpbm8gZGFlbmkKbWFnaWMgcGFydGljbGVzOyBtYWdpYyBzd2lybHMKaW50cmljYXRlIGluawpiZWF1dGlmdWwgd29tZW4KaW5rIGJsb3QKbXlzdGljYWwgZm9yZXN0IGxhZ29vbgpnbG93aW5nIGdsaXR0ZXJ5IGR1c3QgaW4gdGhlIGFpcgpiZWF1dGlmdWwgY2l0eSBvZiB0aGUgZnV0dXJlCm4tIDQKdmFzdCBleHBhbnNlCmZhc2hpb24gc3R1ZGlvIGxpZ2h0aW5nCm1hZGUgaW4gZ29sZAphbmRyZWFzIHJvY2hhIGFuZCBqb2huIGhvd2UKZ3JlZyBydXRrb3Zza3kKaW50ZXJzZWN0aW9uCmthenVtYSBrYW5la28KYmVhdXRpZnVsIHZhbXBpcmUgcXVlZW4KbWFpZApiYXJvcXVlIGNsb3RoCmRlZXAgYnJvd24gZXllcwpmdWxsLWJvZHkgYXJtb3IKbmlnaHQgb3V0c2lkZQpnaWFudCBoZWFkIHN0YXR1ZSBydWlucwppbmNvbXBsZXRlCnZlcnkgZHJhbWF0aWMgZHluYW1pYyBsaWdodGluZwpiZW4gYXNrcmVuCndlYXJpbmcgYW4gb3JuYXRlIHN1aXQKem9vIHBob3RvZ3JhcGh5Cmdlb3JnZSBnb29kd2luIGtpbGJ1cm5lCm11dGFudHMgY3JlYXR1cmVzIHN3YXJtaW5nCnB2YwpkZXRhaWxlZCBoZApiaWcgb2F0bWVhbApmaW5lIGZlYXR1cmVzCnNvZnQgbmVvbiBhdG1vc3BoZXJlCmJpbGx5IGJ1dGNoZXIKc3R5bGUgb2Ygam9uYXRoYW4gc29sdGVyCmZvcmJpZGRpbmcKYmxhY2sgaG9sZSBzdW4KYmxhY2sgb3JiIG9mIGZpcmUKYmxhc3RvaXNlCndoaXRlIGZsb29yCnN0YXIgZHVzdApjaHJpcyBwcmF0dApib2phY2sgaG9yc2VtYW4KYm9iCm1hc3RlcmNyYWZ0CmJvbWIKbW92ZSBzdGlsbApjbGF3cyBhcmUgdXAKamF5c29uIHRhdHVtCnNwaGVyaWNhbCBsZW5zCm1pa2UKZmFtaWx5IGd1eQptYXJpa28gbW9yaQpicm9jayBob2ZlcgpicnV0YWxpc3Qgc2hpcm8KcHJvZmVzc2lvbmFsIHBhaW50IGpvYgpzdGFpbmVkIGFuZCBibGVlZGluZwozZCA4ayBoZCB0cmVuZGluZyBvbiBhcnQgc3RhdGlvbgpiZWF1dGlmdWwgZmFudGFzeSBhbmltZQpjIDEwLjAKd29vZGVuIGJyaWRnZQpoZWF0CnNrdWxsIGhlYWQKc3VwZXJjYXIKY3J5aW5nIGJsb29kCmRpZ2l0YWwgYXJ0IGhpZ2ggcXVhbGl0eQpjb2xvciB0cmlhZHMKbGlnaHQtYmx1ZQpvbmUgYXJtIG9mIHRoZSByb2JvdCBib2R5CmNoYXJsaSB4Y3gKZGl0aGVyaW5nCnBhYmxvIGRvbWluZ3VlegpjaGlha2kgbmFuYW1pCmRhbmdhbnJvbnBhCmNoaWJpIG5hcnV0byBiaXRpbmcgaW50byBhIHBpenphCndlYXJzIGdsYXNzZXMKZGV0YWlsZApzY3JlZW5zaG90IGZyb20gdGhlIGdhbWUKY2VsZXN0aWFsIGJhY2tncm91bmQKc2tpbXB5IGxlYXRoZXIgYXJtb3IKbW92aWUgZmlsbXN0aWxsCmNocmlzIGhlbXN3b3J0aAptYXJzZGVuCml0bwpjaHVjayBlLiBjaGVlc2UgaGVhZApjaHVjayBlLiBjaGVlc2UKaW4gZHVuZQp3aGl0ZSBicmFpZGVkIGhhaXIKdGlsdCBzaGlmdCBkZXNlcnQgYmFja2dyb3VuZApmb2N1cyBvbiBnaXJsIG1vZGVsCnRpbHQgc2hpZnQgbGlicmFyeSBiYWNrZ3JvdW5kCnRpbHQgc2hpZnQgZ2xhc3MgYmFja2dyb3VuZApwb25kIHNjZW5lCmF0dHJhY3RpdmUgcG9zZQpzdHJlZXR2aWV3CmludHJpY2F0ZSBvcm5hdGUgYW5pbWUgY2dpIHN0eWxlCnNlZHVjdGlvbgpqb3NodWEgbWlkZGxldG9uIGFydHdvcmsKaG9sZGluZyBhIG1hZ2ljIHN0YWZmCmNsZWFyIGNvbG9yCm1hcmlqdWFuYSB0aGVtZWQKbWFnaWNhbCBjcmVhdHVyZXMKaW5jcmVkaWJsZSBzaGFycCBkZXRhaWxzCmNvbXBsZXRlbHkgZmxvb2RlZAppbW1lbnNlIHNjYWxlCmRvY2tzCmZyZW5jaCBzcGVjaWFsIG9wcwpyb2d1aXNoCmhhbmQgZ3JlbmFkZXMKZmV1ZGFsIGVyYSBqYXBhbgppbnRlcmxhY2luZyBwYXRocwpkcmFnb24gYmFsbApjb29raWUgbW9uc3RlcgpleWUgb2YgaG9ydXMKc2hhd24gY29zcwpodWdlIGZlYXRoZXJ5IHdpbmdzCjkwcyBtdHYgaWxsdXN0cmF0aW9uCmFsY29ob2wKdmlzdWFsIGVmZmVjdHMKZXZhbm5hIGx5bmNoCnJlbmRlcmVkIGluIGx1bWlvbiBwcm8KbW9yb2NjYW4gbW9zcXVlCnNwbGFzaGVzCmN5YmVycHVuayBjYXQKY3liZXJwdW5rIGZvcmVzdAphY2N1cmF0ZSBwZXJzcGVjdGl2ZQo2MCdzIGZyZW5jaCBtb3ZpZSBwb3N0ZXIKcmlicwpjb21tdW5pc20Kc292aWV0IHVuaW9uCnRlbGV2aXNpb24gc3RpbGwKZGFuaWVsIHJhZGNsaWZmZQpwcmF5ZXIgaGFuZHMKNGsgdWx0cmEgcmVhbGlzdGljCm1heG9uIGNpbmVtYSA0ZApycGcgc2NlbmUKZGFyayBzb3VscyBrbmlnaHQKdG9yY2hsaXQKb3JuYXRlIGdhbGFjdGljIGdvbGQKZGFyayBtYXR0ZXIKZnVsbCBvZiBnb2xkZW4gbGF5ZXJzCnN0dWRpbyBnaGlibGkgY29uY2VwdCBhcnQKZGVzdHJveWVyIG9mIHdvcmxkcwpncmVlbiBsaWdodHNhYmVyCjE5NDQKMjJtbQpoaWxsYXJ5IGNsaW50b24Kc2NpZmkgbmlnaHRzY2FwZQpjb3dib3lzCmRlYXRoIHN0cmFuZGluZwptZWNoYW5pY2FsIGJ1dHRlcmZseQppbWF4IDM1IG1tIGZvb3RhZ2UKZXh0cmVtbHkgZGV0YWlsZWQgb2lsIHBhaW50aW5nCmRpcnR5IHdhdGVyCmRlc2VydCBjaXJjdXMKbGFyZ2UgdGVtcGxlcwpkZXNpZ25lciBmYXNoaW9uCmRldGFpbGVkIHBvcnRyYWl0IG9mIG1hZG9ubmEKd2VhcmluZyByZWFkaW5nIGdsYXNzZXMKZ2FtZXMKZmFybWVyCnllbGxvdyBhbmQgYmxhY2sKbW9vbmxpdCBzdGFycnkgc2t5IGVudmlyb25tZW50CmxvdmVjcmFmdCBzdHlsZQp0aGUgZ3JlZWsgZ29kIG9mIHdpbmUKdXp1bWFraQphY3J5bGljIHBhaW50IHBvdXIKNGsgc3R1ZGlvIHBob3RvCmNhcGl0b2wgaGlsbApvbiB0aGUgc3RyZWV0Cmhvc3BpdGFsIHJvb20KZnJhbWVkIGFydAptYW5nYSBwYWdlCm5hc2EgZm9vdGFnZQpsYXJnZSByb29tCnJpcCBhbmQgdGVhcgpkb29tZ3V5CnRhcm90IGNhcmRzIGNoYXJhY3RlcnMKc3Rvcm1zCmluZmluaXRlIHBvd2VyCmRyYWdvbmZseS1zaGFwZWQKYmxvb2QgdGVhcnMKZHJlYW15IHBzeWNoZWRlbGljIGFuaW1lCnN0eWxlIG9mIGZyYW5rIHdlc3RvbgpzYWQgYW1iaWVuY2UKZHlzdG9waWFuIHdhc3RlbGFuZApjYW5vbiAyNG1tCmh1Z2UgZXllcwpzaGFkb3dlZApuYXR1cmFsaXN0CmhlciBiYWNrIGlzIHRvIHVzCmluIHRoZSB3b3JsZCBvZiBhbmRyZXcgd3lldGgKZGlnaXRhbCBhcnQgaGlnaGx5IGRldGFpbGVkCmhvbGRpbmcga25pZmUKdml2aWQgbGlnaHRzIG5pZ2h0IHRpbWUKZW1tYSBzdG9uZSBwb3J0cmFpdAp0b3dlcmluZyBvdmVyIGEgY2l0eQo1MG1wCmluIGEgc3VuIGxvdW5nZXIKZGFyayBpbWFnZQpzdGFpcmNhc2UKc2FwCmdyYXZlc3RvbmVzCm9taW5vdXMgYW5kIGludGVuc2UKZ2xvd2luZyBjb2xvcnMKd2lkZXN0IHNob3QKdXBzZXQKMjAwNwptcyBwYWludApuZXdzIHNlZ21lbnQKZ29sZGVuIGZpbHRlcgp1bmRlciB3YXRlciB2aXN1YWwgZGlzdG9ydGlvbgpvZmYgY2VudGVyCmNsZWFuIHdoaXRlIGJhY2tncm91bmQKNGsgaGlnaCBkZXRhaWwKaG92ZXJpbmcKb3JuYXRlIGdvd24Kd2hlYXQgZmllbGRzCnNwYXJrcyBmbHlpbmcKYmxhY2sgbGVnZ2lucwpmZW1hbGUgbW9kZWwKd2l0aCByZWQgaGFpcgpnYWxsYW50Cm9yZ2FuaWMgbGlxdWlkIG1ldGFsCmZpZ2h0IGNsdWIKZmlyZSBpbiBoYW5kCmZwdgpiYWNrIGFuZCB3aGl0ZQp3aXRoIGFuIGFybW9yIGFuZCBhIGNyb3duCmZpbGwgbGlnaHQKZnJlZGR5IGtydWVnZXIKYmFuZGFuYQp3aGl0ZSBsZWdnaW5ncwpibGFjayBsZWFodGVyIGdsb3ZlcwpibGFjayBkZW5pbSBwYW50cwpleHRyZW1lbHkgcGFsZSB3aGl0ZSBza2luCnNjdWxwdHVyZWQgZmFjZQpkdWFsIG1hZ2ljcwpkaXJlY3QgbmF0dXJhbCBsaWdodGluZwplbWFuYXRpbmcgbWVuYWNpbmcgYXVyYQpzb2Z0IGdlb21ldHJ5CmxvbmcgYXJtcwpzY2FycyBvbiBmYWNlCmFuaW1lIHZpc3VhbCBzdHlsZQpiaWcgZXllcyB3aXRoIGV5ZWxhc2hlcwpwb2QgcmFjZXIKcGVvcGxlIG9uIHRoZSBzdHJlZXRzCmFkdmVydApnYW5kYWxmIHRoZSBncmV5Cm1hdHRoZXcgc3Rld2FydApnYW5kaGkKaW50cmljYXRlIGRldGFpbGVkIGFybW91cgpnYW1lIGR1bmdlb25zIGFuZCBkcmFnb25zCmdhcyBzdGF0aW9uCmZyb21tZSBzZWVsZQpnZW5vcwpibHVycnkgZm9vdGFnZQpnZW9yZ2UgaC53LiBidXNoIGRlc3Ryb3lzIGlyYXEKbG9zcwp2aXN1YWxseSBzdHJpa2luZwpnaWFudCBob3JucwpzdGFuZGluZyB0cml1bXBoYW50IGFuZCBwcm91ZApsZXZpYXRoYW4KZm91bmQgb2JqZWN0cwpnaXJsIGluIG1lY2hhIGN5YmVyIGFybW9yCnNtZWFyZWQgYWNyeWxpYyBwYWludApyZXByZXNlbnRhdGlvbiB3aXRoIGFic3RyYWN0aW9uCmdvZGRlc3Mgb2YgbGlnaHQKZ29rdSBwb3J0cmFpdApnb2xkZW4gZHJhZ29uCmZ1bGwtYm9keSB0YXR0b29zCmdvbGx1bQpnb25kb3IKcXVlZW4gZWxpemFiZXRoCmZveHkKaHVtYW4gaGVhcnQKZ3JlYXQgd2F2ZSBvZmYga2FuYWdhd2EKbW9kZXJuIHBob3RvZ3JhcGh5CmdyZWVrIGFtZWVyYSBhbCB0YXdlZWwKZ3JlZWsgdGVtcGxlCnBvcnR1Z2FsCmhkciByZW5kZXIKbG9vdCBvZiBib29rcwoyZCBzaWRlIHNjcm9sbGluZyBnYW1lCnJlYWxpc3RpYyB0ZXh0dXJlZApjaGFybWluZyBzbWlsZQpzdHJpa2luZyBhenVyZSBleWVzCmluIG1pbmVjcmFmdAp3YXZpbmcgcm9iZSBtb3ZlbWVudAphY291c3RpYyBpbmZvcm1hdGlvbgpidWlsZGluZyBwbGFucwpzY29yZXMKaGVhdmVubHkgbGFuZHNjYXBlCmRpbWx5IGxpdCByb29tCmhlbGxpc2ggbGFuZHNjYXBlCmhpcm9oaWtvIGFyYWtpIHN0eWxlCmhpZGV0YWthIG1peWF6YWtpCmRhcmsgYmx1ZSBzZWdtZW50ZWQgYXJtb3IKd2VhcmluZyBzY2hvb2wgdW5pZm9ybQpmYWJyaWMgdGV4dHVyZQpjaGlsbCBzdW1tZXIKaGl0bGVyCmNsb3NlIHVwIHBob3RvZ3JhcGh5CmxpZ2h0LWJyb3duIHNraW4KaG9tZWxhbmRlciBmcm9tIHRoZSBib3lzCmVwaXNvZGUgc3RpbGwKaGlnaCBkZXRhaWxlZCBvZmZpY2lhbCBhcnR3b3JrCmhvcml6b250YWwgdmlldwpibGFjayBhbmQgd2hpdGUgZmlsbQphbGV4IGZyb20gYSBjbG9ja3dvcmsgb3JhbmdlCmxpdHRsZSBicm90aGVyCnVlCnd3ZgpodW1hbiBoYW5kcwpodW1hbi1saWtlCm1pc3RpYyBhbWJpZW50CnNlbWktdHJhbnNwYXJlbnQKbWVsYW5jaG9saWMhIQp1bHRyYSA0awpwaXR0c2J1cmcKYmVhbXMgb2YgZ29sZGVuIGxpZ2h0CmZhZGluZwppZGVhcwpibHVlIGFuZCBwdXJwbGUgZ2xvd2luZyBoYWlyCm1vZGVsIHRyZWVzCnNhbmQgcGlsZWQgaW4gY29ybmVycwo4ayBmdWxsIGhkIHBob3RvCmFjdGlvbiBmaWxsZWQKY29ycmVjdCBleWUgcGxhY2VtZW50CmZ1dHVyaXN0aWMgaW50ZXJpb3IKZ2lybCB3aXRoIGZveCBlYXJzCnJlYWxseSBsb25nCm9uZSBpcyByZWQKZXh0cmVtZWx5IGRldGFpbGVkIGZhY2VzCnN3YXJtaW5nIHN3aXJsaW5nIGJhdHMKam91cm5hbGlzdGljIHBob3RvZ3JhcGh5Cmlzb21ldHJpYyBtYXAKc2l0dGluZyBpbiBoaXMgaGlnaGNoYWlyCm5lb24gY29sb3IgbWl4ZWQgbWVkaWEgcGFpbnRlcmx5CmphcGFuIHJ1cmFsIHRyYXZlbApqYXBhbiB0cmF2ZWwgYW5kIHRvdXJpc20KaGFyYWp1a3UKaGRyIG9uCnN0ZWFtcHVuayBmb3Jlc3QgYmFja2dyb3VuZApqYXIgamFyIGJpbmtzIGFzIGEgc2l0aCBsb3JkCmphc29uIHZvb3JoZWVzCndlYXJpbmcgYXJtb3VyCnRvcCBnZWFyCmZpc2ggbGVucwpzaW5pc3RlciBsb29raW5nCmxpZ2h0bmluZyBpbiB0aGUgc2t5CmJhbmQKYXJ0aXN0aWMgcmVuZGVyaW5nCnNlbmF0b3IgYXJtc3Ryb25nCnBhcmsgamltaW4KZ3JpdApwb3J0YWwgdG8gaGVsbApwb2tlbW9uIGNhcmQKc3VubnkgZGF5IGF0IGJlYWNoCnBsYXlmdWwgc21pcmsKa2FybCBtYXJ4IHBvbmRlcmluZyBoaXMgb3JiCnZsYWRpbWlyIGxlbmluCmZlYXR1cmVkIGluIGNpbmVtYXRpYwphY3J5bGljIHBhaW50IG9uIGNhbnZhcwprZXlsZXRoCmtpZCBhCmNsZWF2YWdlCmhhbGYgZmFjZSBpbiB0aGUgd2F0ZXIKbWV0YW1vcnBob3NpcyBjb21wbGV4IDNkIHJlbmRlcgpmb2N1cyBvbiBzbWlsZQpyb29mdG9wIHBhcnR5CmxhZGEgY2FyCmFyZ2VudGluZSBmbGFncyBiZWhpbmQKYXJnZW50aW5hIGZsYWcgYmVoaW5kCnJlZmxlY3RpdmUgZmxvb3IKbWljcm8gZGV0YWlsZWQKc3Rvcm1jbG9ha3MgdnMgaW1wZXJpYWxzCnNreXJpbSBjaXZpbCB3YXIKYXJ0aWZpY2VyCmxhcmdlIGxhbmRzY2FwZSB3aXRoIHZpbGxhZ2UKc3RhcmxpdCBza3kKbGV0dGVyIHMKbGlnaHQgeWFnYW1pCnN0dWNjbyB3YWxscwpsaW5rIGZyb20gemVsZGEKcHVycGxlIHJhaW5jb2F0CmJyYXdsCmFlcmlhbCBwZXJzcGVjdGl2ZQpsb25nIHJvYWQKbW9vZHkgZGV0YWlscwpsb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldApyYXBwaW5nCmRlYXRoIGFuZCByb2JvdHMKbHVjaWQgZHJlYW1pbmcKY2VudGVyZWQgZnVsbCBib2R5IHBvc2UKbWYgZG9vbQpwb3J0cmFpdCBlbiBidXN0ZQptZW4gYW5kIHdvbWVuCm1hZ25ldG8KYXp1cmUgY2FwZQptZQpwYWludCBkcmlwCnNtdWRnZWQgcGFpbnQKYnJ1dGFsaXNtIHN0eWxlCnN1cGVyLXJlc29sdXRpb24gbWljcm9zY29weQp0cmVudCBwYXJrZQptYXJnYXJldCB0aGF0Y2hlcgptYXJnb3Qgcm9iYmllIGFzIGhhcmxleSBxdWlubgpzbW9rZSBjbG91ZApnb2RkZXNzIG9mIGxvdmUKc3R5bGUgb2YgbWFyYyBzaW1vbmV0dGkKbG92ZSBhdCBmaXJzdCBzaWdodAp0ZWxsdGFsZSBzdHlsZQptZWRpZXZhbCB2aWxsYWdlCnNwZWxsIGNhc3RpbmcKb2NjdWx0IHN5bWJvbHMgcHJlc2VudAp0cmFuc2Zvcm1hdGlvbiBwb3J0cmFpdAptaWNoYWVsIGZhc3NiZW5kZXIKam9obiBidXNjZW1hCnNtb290aCBtYXR0ZQpibGFuayBleHByZXNzaW9uCm1pbGxhIGpvdm92aWNoCnllbGxvdyBsaWdodHMKaGVhdnkgbWlzdAptb2FpCmJpZyByZWQgZXllcwpqYW51c3oganVyZWsKdmlkZW8KbmF0dXJlIGxhbmRzY2FwZQpjYXJkYm9hcmQgY3V0b3V0Cm1hbiBzbW9rZXMgYSBjaWdhcgpsb29rcyBhdCB0aGUgbnVjbGVhciBleHBsb3Npb24KbXVzaHJvb20gaG91c2VzCmdyb3dsaW5nCm5hdGhhbiBmb3IgeW91Cm51ZGlicmFuY2gKeGJveCAzNjAgZ3JhcGhpY3MKbmljaG9sYXMgaWkgb2YgcnVzc2lhCm5pY2sgd2lsZGUKbmljb2xhcyBjYWdlIGFzIGRyYWN1bGEKY2F0IGV5ZXMKbGluZSBhcnQgaWxsdXN0cmF0aW9uCmNvbG91cmZ1bCBiYWNrZ3JvdW5kCmFsaWVuIGhvbWV3b3JsZApub3cgaSBhbSBiZWNvbWUgZGVhdGgKeW8KYW1hemluZyBiZWF1dHkKbGF2YSBpbiB0aGUgYmFja2dyb3VuZAppbmFmdW5lIGRlc2lnbgpibGFjayBjbG90aAp0aGUgbWVrYW5payBkb2xsCmVyb3MKb25lIG9iamVjdAp0d28Kb25pIG1hc2sKcGxheXN0YXRpb24gMgpjaW5lbWF0aWMgY291bnRlciBsaWdodAo3MHMgcGhvdG8Kb3dsYmVhcgpleHBsb3Npb24gb2YgZmxvd2VycwpkdXJpbmcgZ29sZGVuIGhvdXIKb3JhbmdlIHN1biBzZXQKYW50aHJvcG9tb3JwaGljIG9jdG9wdXMKaW50ZW5zZSBzbW9rZQpbW2Jsb29kXV0KaW5zaWRlIHRoZSBydWluZWQgZ290aGljIGNodXJjaApwaG90b3JlYWxpc3RpYyBza2luIHRvbmUKYmxlbmRlZCBjb2xvcnMhISEhIQpwb2lzb24KcGhpbCBub3RvIGNvbWljIGFydAozNW1tIGZvY2FsIGxlbmd0aApwaG90byBvZiB6dXJpY2gKMTk4MHMgdmVyc2FjZSBhZApzZWxmLWNvbmZpZGVuY2UKY2luZW1hdGljIHByb21vIG1hdGVyaWFsCm11ZGR5CnNob3J0IHBlcnNvbgpmaWxtIHN0aWxsIGZyb20gbW92aWUgZHVuZS0yMDIxCmJva2VoIGJsdXIKZGVzayBmYW4KZHJhZ29uLWluc3BpcmVkIGNsb3RoIHJvYmVzCmJhY2tncm91bmQgZGVwaWN0aW5nIGEgdGVtcGxlCndhbmRlcmluZyB0aGUgZGVzZXJ0IGxhbmRzY2FwZQpiYWdneSBleWVzCmFydCBkZWNvIGJhY2tncm91bmQKcGlsbGFyCnBpbmsgZmxveWQKY2xvdWR5IGRhcmsgc2t5CnRhbGtpbmcKMS8yIHBybyBtaXN0IGZpbHRlcgpkZXZpbCdzIGhvcm5zCmludHJpY2F0ZSBib2R5CndpdGggcmVkIGhhaXIgYW5kIGdyZWVuIGV5ZXMKYm9sZCBicnVzaHdvcmsKY29taWMgYm9vayB2aXN1YWwgc3R5bGUKcG9ydHJhaXQgb2YgamVhbiBncmV5CnBvcnRyYWl0IG9mIGtlcm1pdCB0aGUgZnJvZwpwb3J0cmFpdCBvZiBuYXRhbGllIHBvcnRtYW4KdGVhc2luZyBzbWlsZQp3aWRlIGZvcmVoZWFkCmRhcmstaGFpcgpiZWF1dGlmdWwgYWxsdXJpbmcgZmVtYWxlIGN5Ym9yZwpibGluZApuYW5vY2FyYm9uLXZlc3QKbm9pciBmaWxtIHN0aWxsCmphcGFuZXNlIHNjaG9vbCB1bmlmb3JtCnZlY25hCmJhY2tncm91bmQgbWVnYXN0cnVjdHVyZQpyYWluYm93IGF1cmEgY3J5c3RhbHMKZXh0cmVtZWx5IGxvbmcgaGFpcgpwc3ljaGVkZWxpYyBibGFjayBsaWdodCBzdHlsZQpoYWlyIGNvbG9yaW5nCmhpZmkKbGdidHEKcHl0aG9uCnF1ZW50aW4gdGFyYW50aW5vCnJhY2UKaG9sZGluZyB0aGUgbW9vbiB1cG9uIGEgc3RpY2sKcmFnbmFyb2sKcHJpc20gc2hhZG93cwpnb2xkIGFuZCBwdXJwbGUKc3VwZXJwb3dlcnMKbWV0YWwgc3BlY3VsYXJzCmJsdWUgZmxvd2VycwptYWdpYyB0aGUgZ2F0aGVpbmcKYWx0ZXJuYXRlIHVuaXZlcnNlCnNwaWt5CnNxdWFkCnJvYWRob2cgZnJvbSBvdmVyd2F0Y2gKc2hvd2Nhc2UKdmVyeSBjcmVlcHkKYmxhY2sgcmltcwpzZWF0dGxlCndpdGggZHJhbWF0aWMgbGlnaHRpbmcKeW9zaGkKc2F1bCBnb29kbWFuIGluIGd0YSB2CjE4OTYKbHVjaWVuIGzDqXZ5LWRodXJtZXIKc2FyYWggbWljaGVsbGUgZ2VsbGFyCm5lb24gYmFja2xpZ2h0aW5nCnRodW5kZXJiaXJkcwpiYWQgYm95Cmlua3NjYXBlCnNoYW5pbmEgc2hhaWsgYXMgbWVkdXNhCnBpZXJjaW5nIGdyZWVuIGV5ZXMKaGVyYmVydCBqYW1lcyBkcmFwZXIKcmVzdGluZyBvbiBoaXMgdGhyb25lCmdvbGQgY3Jvd24gYW5kIGZpbGFtZW50cwpzb3JhIGZyb20ga2luZ2RvbSBoZWFydHMKc3BhY2UgbGFuZHNjYXBlCmJsdWUgY29hdApzcG9uZ2UgYm9iCnBvbGFyb2lkIHBob3RvIHN0eWxlCmphcGFuZXNlIGRlc2lnbgptdXNldW0gcGhvdG9ncmFwaHkKZ29sZGVuIHRlY2ggcm9iZXMKc3RlcGhlbiBmcnkKM2QgcmVuZGVyZWQgaW4gb2N0YW5lCmJyYW5jdXNpCmhhcnVtaQpzdG9uZSBhZ2UgcmF2ZSBpbiBhIGNhdmUKbWFuaWEKd2l0aCBzdXJyZWFsIGFyY2hpdGVjdHVyZQpncmFjZSBqb25lcwp0ZWQgY3J1egp0ZXNsYSBjeWJlcnRydWNrCnRoZSBhaQp0aGUgYXBvY2FseXBzZQpkdWJhaQpqb3NlcGggbWFsbG9yZCB3aWxsaWFtIHR1cm5lcgp0aGUgY29sb3NzdXMgb2YgcmhvZGVzCmRldGFpbGVkIHJ1c3R5IGFybW9yCmJsdWUgYW5kIHllbGxvdyBjb2xvciB0aGVtZQpwYXVsIHdhbGtlcgp3ZWFwb24gY29uY2VwdCBhcnQKZG5kIGJvc3MKdGhlIGxpb24ga2luZwp0aGUgbWFkIGhhdHRlcgppbiB3b29kcwp2b2x1bWV0cmljIGdvZHJheXMKdml2aWQgYmVhdXRpZnVsCnNjaS1maSBmYW50YXN5IGRlc2t0b3Agd2FsbHBhcGVyCjhraGRyCndpdGggaGVyIGxvbmcKcGFzdGVsIHNreQphY2FkZW1pY2lzbQpmbG93ZXJzIGFuZCB0cmVlcwpnYXNwYXIgbm9lIGFuZCBjaHJpc3RvcGhlciBkb3lsZQp0ZWQgbmFzbWl0aCBhbmQgbWFyYyBzaW1vbmV0dGkKZW5kIG9mIGRheXMKdGhlIGxhc3Qgc2VsZmllIGV2ZXIgdGFrZW4KdGhlIGxpdHRsZSBwcmluY2UKaW50ZXJpb3Igcm9vbQpncmVlbiByYXRpbwpoeXBlcnJlYWxpc3RpYyBtYXR0ZSBwYWludGluZwpmbHVpZCBkeW5hbWljcwp0cmFuZGluZyBvbiBhcnQgc3RhdGlvbgppc28gMzAwCnRpZWZsaW5nIGJhcmQKbG9uZyBob3Jucwpjb25jZXB0IHBob3Rvcwptb25vY2hyb21hdGljIGNvbG91ciBwYWxldHRlCnRyZXggZnJvbSBnb2R6aWxsYSAoMjAxNCkKdG9ueSBzdGFyawpmbGFtaW5nIGhhaXIKd2F5bmUgYmFybG93ZSBkZXRhaWxlZAptZXRhbCBib2R5CmhhcmRzdXJmYWNlCnBvcnRyYWl0IG9mIGVkd2FyZCBhbmQgYmVsbGEKd29ya2VycwprbGF1cyBzY2h3YWIKcmV0cm8gY29sb3Igc2NoZW1lCm5hdXRpY2FsIG1hcHMKdmFwb3J3YXZlIHN1bnNldAoyZCBtaW5pbWFsaXNtCmhpZ2hseSByZWFsaXN0aWMgYW5kIGRldGFpbGVkCm5lb2NsYXNzaWNpc3QgcGFpbnRpbmcKZGFyayByb2Jlcwp2b2xkZW1vcnQKd3cyIGVyYSBwaG90b2dyYXBoCnBpeGFyIGFuZCBkaXNuZXkKcHN5Y2hlZGVsaWMgbGFuZHNjYXBlCndlc3Rlcm4gY29taWMgYXJ0CnBhc3RlbCBkcmF3aW5nCndhcmlvCndpbnRlciBmb3Jlc3QKcGFudHlob3NlIHRpZ2h0cwpueWxvbgpicmlzdGxpbmcKbWF4aW11bSBuYXR1cmFsIHRleHR1cmUKc2FsYWQKaGFpciBmbHV0dGVyaW5nIGluIHRoZSB3aW5kCndlYXJpbmcgYSBtaWxpdGFyeSB1bmlmb3JtCnplbnlhdHRhIGZyb20gb3ZlcndhdGNoCnJlbGlnaW91cyBpY29ub2dyYXBoeQpncmVlbiBjbG90aGVzCmludGVuc2Ugc2NpLWZpIGRldGFpbHMKbXkgaGVybyBhY2FkZW1pYQppbiBhIHNlcmVuZSBsYW5kc2NhcGUKd2lkZSAtIGFuZ2xlIHNob3QKc3RyYXRlZ3kgZ2FtZQpzY2FyeSBhcnQKd2FybSBuYXR1cmFsIGxpZ2h0aW5nCndhc3AKc2hvdCBvbiBzdXBlcmlhIDQwMCBmaWxtc3RvY2sKZ3JlZW4gdG9uYWxpdGllcwpwZXJmdW1lCnJlYWxpc2l0YyBwaG90bwphd2FyZC13aW5uaW5nLXBob3RvZ3JhcGgKd2luZG93czk4IGxvZ28KemJydXNoISEKWyA0IGsgZGlnaXRhbCBhcnQgXSEhCmNvbG9yZnVsIDggawp3aXRoIGEgd2hpdGUKY3J5c3RhbCBsaWdodHMKc3BsYXR0ZXJlZCB3aXRoIGJsb29kCmhvbGRpbmcgYSBwZW50YWdyYW0gc2hpZWxkCnZpc2lvbmFyeSBhcnQgc3R5bGUKZ29sZGVuIG1pbmlhdHVyZXMKaW5maW5pdGUgY29ycmlkb3IKZHJlYW1jb3JlIGxvb2tpbmcKc29mdCBhbWJpZW50IGlsdW1pbmF0aW9uCnNvYWtpbmcgd2V0CnNpbGsgYmVsdAp3YW5nIGxpYW5nCnNpbHZlciBhbmQgbXV0ZWQgY29sb3JzCnBzIDIgZ3JhcGhpY3MKdmVyeSBjb29sIHBvc2UKbGlnaHRzb21lIHNwYWNlCmluIHRoZSBzdHlsZSBkYW4gbXVtZm9yZCBhcnR3b3JrCmdlc3R1cmFsCmVsZWdhbnQgZnVybml0dXJlCmJlYXV0aWZ1bGx5IGRldGFpbGVkIHJlbmRlcgptaXN0aWMgYXRtb3NwaGVyZQp2aXNpb24gb2YgY2hhb3MKc3Bpcml0dWFsIGxpZ2h0CnVsdHJhIC0gcmVhbGlzdGljIHBhaW50aW5nCnB1bGxpbmcgd2VlZHMgb3V0IGZyYW50aWNhbGx5CnNvbWUgZ3JleSBoYWlyCmRyZXNzZWQgaW4gdmVsdmV0CnN1cGVyIGNsZWFyIGRldGFpbHMKYW5pbWUgc3R5bGUgZGlnaXRhbCBhcnQKYWlyeSB0aGVtZQpmbHVmZnkgY2hlc3QKc2VyZW5lIHBvc3QtbnVjbGVhciBiYWNrZ3JvdW5kCm9tbmlvdXMgc3R5bGUKc2hvcnQgcmVkIGJsYWNrIGZhZGUgaGFpcgpsb25nIGhhaXJzdHlsZQpzY2hpem9waHJlbmljIGhhbGx1Y2luYXRpb24KYmVpbmctaW4taXRzZWxmCmlzbWFpbCBpbmNlb2dsdSBhbmQgcnVhbiBqaWEKcGF1bCBwZXBlcmEgcGFibG8gcm9sZGFuCmNyeWluZyBlbmdpbmUKYmVhdXRpZnVsIGRldGFpbGVkIGZhbnRhc3kKYmVhdXRpZnVsIGRldGFpbGVkIGVsZWdhbnQKZmFpcnkgdGFsZXMKaHlydWxlCm11c2ljaWFucwpnb2xkZW4gYXJtb3VyCmNvbXBsZXggYW5kIGRlc2F0dXJhdGVkCnRvbmUgbWFwcGVkIHdpbGxpYW0tYWRvbHBoZQpkZW11cmUKaWx5YSBnb2xpdHN5bgptb2Rlcm4gbWluaW1hbCBkZXNpZ24KcmVkIGhvcm5zCmluIHRoZSBkZXNpZ24gb2YgZWxpb3Qga29oZWsKdW5pdmVyc2UgaW4gdGhlIGJhY2tncm91bmQKc3RyZWV0IG9mIGhvbmcga29uZwpmdXJpbyB0ZWRlc2NoaQppbnRyaWNhdGUgZGV0YWlsZWQgdGlhcmEKZmxvd3kKbmV3IGNvbnRlbXBvcmFyeSBhcnQKYmlnIG1vb24gcmFkaXVzCndhbGt0aHJvdWdoCmR1Y2tzCmF1dHVtbiBiYXJlIHRyZWVzCm5pZ2h0IHRpbWUgbW9vbmxpZ2h0CnNpZGUgdmlldyBwcm9maWxlIGNlbnRlcmVkCmphbWVzIGplYW4gYXJ0Cm1hZGUgaW4gMTgwMCdzCnphaGEgaGFkaQp3b29kbGFuZCBiYWNrcm91bmQKc3RhcnJ5LW5pZ2h0ISEhISEhISEhISEhISEhISEhISEKcGluayB2aWJlCmNsZW1hdGlzIHRoZW1lIGJhbm5lcgpjbGVtYXRpcyBkZXNpZ24KY2xlbWF0aXMgbGlrZSBzdGFycyBpbiB0aGUgc2t5CmRhbmllbCBkb2NpdQppbnRyaWNhdGUgd2lyaW5nCmV4cHJlc3Npb25pc3QgcGFpbnRpbmcKanJwZyBhenRlYyBzdHJlZXQgZmFzaGlvbgpyZWQtZXllcwpzYXRhbmlzbQpzdW5saWdodCBiZWFtcwpwb3J0cmFpdCBzdHVkeQppbGx1c3RyYXRpdmUgc3R5bGUKZHJlYW15IHNreQpoZWF2eSBnb2xkIGFybW91cgoxIDQgayBoZCBxdWFsaXR5CnN3aXJsaW5nIGZvZwptdXNpY2lhbnMgcGxheWluZyBpbnN0cnVtZW50cwptZW4gaW4gdHV4ZWRvcwpzaGFyZHMKY2FsbSB3YXRlcgppbWFnaW5pbmcgYSBibGlzc2Z1bCBmYXRlCmFyaXN0b2NyYXQgY2xvYWsKcGhvdG93ZWIKc3BsZW50bwphbWVyaWNhbm9pemUKbGVtb25saWdodApsdgotIGggNyA2IDgKZGV0YWlsZWQgb3JnYW5pYyB0ZXh0dXJlcwpmb3JuaXRlIGdhbWUuIG9jdGFuZSByZW5kZXIKcmF5IHN3YW5sYW5kCmZhY3Rvcmllcwp3ZWlyZCBjcmVhdHVyZXMKc3R5bGUgb2YgZG9uYXRvIGdpYW5jb2xhCmFuZW1vbmUKZ29sZGVuIGhvdXIgdGltZQpzdHlsZSBvZiBjYXJsb3Mgc2Nod2FiZQpvcmNoaWQgc3RlbXMKMSA5IDcgMCBzIHNjaSAtIGZpCm1lZGl1bSBsb25nIGJyb3duIGhhaXIKbWl4aW5nIHNvbGFycHVuawpuaWdodGZhbGwuIHF1aWV0CmJva2VoISEKZm9nIG9uIGdyb3VuZAp0YXIKaW50ZXJtZWRpYXRlIGFydAphdG1vc3BoZXJpYyBwb3J0cmFpdAp2YXJ5aW5nIGFydCBzdHlsZXMKem9vdG9waWEgMgpwcmVkYXRvciBleWVzCm1vZGVybiBzdXBlcm5hdHVyYWwgdXJiYW4gaG9ycm9yCndhdGVyY29sb3IgYW5kIHBlbgpzb21lIHRyZWVzIGluIHRoZSBiYWNrZ3JvdW5kCm1hcnRpbiBhbnNpbiBhcnR3b3JrIHBvcnRyYWl0CnZlcnkgc2FkCmdvbGQgZm9pbAphbnRob255IHBhZmZvcmQKZG9ybWFudAptYXBsZSBzeXJ1cCBmbHVpZApsb3cgLSBwb2x5CnNwYWNlIHdlc3Rlcm4KdHJhZGl0aW9uYWwgamFwYW5lc2UgcGFpbnRpbmcKdW5kZXIgY29uc3RydWN0aW9uCmdsb29teSBmb3Jlc3QKZnVycnkgZmFudGFzeSBhcnQKc3Rvb2Qgb3V0c2lkZSBhIGNvcm5lciBzaG9wCmJsdWUgYW5kIHB1cmxlIGxpZ2h0aW5nCmF1YnJleQpjcmVwYXgKY3V0ZSBmdXR1cmUgdmVoaWNsZXMKYWhtYWQgbWVyaGViCjIgOCBtbSBsZW5zCndlYXJpbmcgYSBiYXNlYmFsbCBoYXQKMSA5IDggMCBzIHN0eWxlCjMgNSBtbSBjYW1lcmEKdG9tIGNydWlzZSB0b3Jzbwpjb2xvcmZ1bCB0d2lybGluZyBzbW9rZSB0cmFpbHMKdHJhbnNsdXNjZW50CndlbGwgZHJhd24KYnVzeSBiYWNrZ3JvdW5kCmludHJpY2F0ZSBoaWdobHkgZGV0YWlsZWQgOCBrCjEgOSAxIDQKcG9ydGFsIDIKNCA1IG1tIGxlbnMKcmV0cm9mdXRpc3RpYwpyZXRybyAtIGZ1dHVyaXN0aWMKY29ycmlkb3IKZWxlZ2FudCBkZWNvbGxldGUKYm95IGdpcmwgdHJhZGl0aW9uYWwgcm9tYW5jZQpzdWJ0bGUganVuamkgaXRvCmFsY2hlbWlzdCBsaWJyYXJ5IGJhY2tncm91bmQKaW50YWN0IGh1bWFub2lkIHNlcnZvCm1lY2ggd2FycmlvcgptYXJ2ZWxvdXMgZXhwcmVzc2lvbgpzZXQgaW4gdGhlIGRpc3RhbnQgZnV0dXJlCnNjaS1maSBkaWdpdGFsIGFydApwcmVwYXJpbmcgZm9yIGJhdHRsZQpoaWdobHkgcmVmbGVjdGl2ZSBzdXJmYWNlCmNsZWFyIGJsdWUgZXllcwpyZXNjYWxhdGVkIDQgawpzaG90IHdpdGggY2Fub24gNSBkIG1hcmsgaWkKbmlnaHRjYWZlCmZ5bGluZyBzaWxrCnR3byBoYW5nCmdsb3dpbmcgamFyCmRyaW5raW5nIGEgbWFydGluaQppbiBhIGxha2UKY29sZCBlbnZpcm9ubWVudAphbmRyZXcga3JpdnVseWEKaGlnaGx5IGNvbG9yZnVsCm91dCBvZiBmb2N1cyBiYWNrZ3JvdW5kCmQgJiBkIGRlc2lnbgpleHBhbnNpdmUgZGV0YWlsZWQgbGF5ZXJlZCBjaXR5Cm1hZ2ljYWwgZHJlYW0tbGlrZSBhdG1vc3BoZXJlCnVsdHJhIHJlYWxpc3RpYyBkZXRhaWwKc2luIGNpdHkKZWVyaWUgYW5kIHVuc2V0dGxpbmcKYWxpZW4gbW91bnRhaW5zCm5lbyBub2lyIHN0eWxlCm5hdHVyZSBpbiBhbGwgaXRzIGJlYXV0eQpjb2xvcmVkIGZsb3dlcnMKc3RhcnMgc2hpbmluZwp3ZXN0ZXJuIGFydAptb2Rlcm4gaW5kb29ycwpzaWdtYSAxLjYKbmlnaHRjYXAKc2xpcHBlcnMKdm9sdW1ldHJpYyBvdXRkb29yIGxpZ2h0aW5nCnNwb29reSBoYWxsb3dlZW4gdGhlbWUKdG9wIGZsb29yIGJvc3Mgc2hpdApkZXN0cm95IGxvbmVseQpibGFjayBmbG9vcgp2b2x1bWV0cmljIGxpZ2h0IO+8jCBzdXJyZWFsCmJpb2x1bWluZXNjZW50IG9wYWwKbWFnbmlmaWNlbnQgbGlnaHRpbmcKZW5oYW5jZSBsaWdodGluZwpjb3BpYyBtYXJrZXIKaCA2NDAKbWluaQpuaWNrZWxvZGVvbgpmcmVja2xlcyEhIQpiaWcgZ2xvd2luZyBleWVzCmV4dHJlbWVseSBkZXRhaWxlZCA0awpwdXJlIGJhY2tncm91bmQgY29sb3IKbnVjbGVhciBwb3dlcmVkCmFuY2llbnQgY3liZXJwdW5rIDhrIHJlc29sdXRpb24KaG9zcGl0YWwgd2FyZAplZXJvIGFhcm5pbwpmbGFzaGluZyBleWVzCnR3aWxpZ2h0IHpvbmUKZHJpcHBpbmcgdGVjaG5pcXVlCnRlbXBsZXMgYmVoaW5kIGhlcgpnb2xkZW4gaG91ciBzdW5zZXQKd2hvbGUgcm9vbQozIGQgKyBkaWdpdGFsIGFydAphdmlhdG9ycwplcGljIHBvcnRyYWl0IGlsbHVzdHJhdGlvbgp0YWxsIGNlaWxpbmdzCnRleHQgYW5kIGEgcGFsZSB5b3VuZyB3b21hbgplbXB0aW5lc3MgYW5kIHBlYWNlCm1vb25pcSBwcmllbQp3ZWFrIGRlbW9uCndpdGggcG9wIHB1bmsgc3R5bGUKZGVwdGggbWFwCmJyZWF0aHRha2luZyBxdWFsaXR5CmNvYXN0IGFzIHRoZSBiYWNrZ3JvdW5kCmluIGEgYmFyb3F1ZSBzdHlsZQpzdXJyZWFsIHRlYSBwYXJ0eQp0cmVuZGluZyBvbiByIC8gbWFwcG9ybgpkeWUgaGFpcgptZWx0aW5nIHN1bgptZWx0aW5nIDRkIGN1YmVzCmhhbGx3YXkgbGFuZHNjYXBlCnRocm93biB0YWJsZXMKc2NhdHRlcmVkIGdvbGQgY29pbnMKZmxlZWluZyBtZXJjaGFudHMKd2VhcmluZyBpbnRyaWNhdGUKdWx0cmEgXyByZWFsaXN0aWMKcm9iIGdvbnNhdmxlcwp3aWRlIC0gc2hvdApjb25zdGVsbGF0aW9ucwpwZWFjZWZ1bCBtb29kCmxhdmEgcmVmbGVjdGlvbnMKdGhlIGhvYmJpdApuaWtrb3IKZWdvbiBzY2hpZWxlIGFuZCBtYXggZXJuc3QKZGVlcCBoYWxscwppbiB0aGUgbWlkZGxlIG9mIGEgZ3JhdmV5YXJkCnBpbmsgdm9sdW1ldHJpYyBzdHVkaW8gbGlnaHRpbmcKc2xpY2sgbGVhdGhlciBhcm1vcgpuZXV0cmFsIGV4cHJlc3Npb25zCnNvZnQgZGlnaXRhbCBwYWludGluZwpjcmFpZyBtdWxsaW5zIGFuZCBncmVnIHJ1dGtvd3NraQp2dWUgcmVuZGVyCmhpZ2hseSBkZXRhaWxlZCBoYW5kcwpzbW9rZXkgZXllCm93bCBmZWF0aGVycwp3aGl0ZSBmbG93ZXJzIG9uIHRoZSBmbG9vcgp2ZXJ5IGFlc3RoZXRpYyEhISEhISEhISEhISEhIQpldGhpb3BpYW4KZHJ1bmtlbiBmaXN0Cm1vbmsncyByb2JlCnRvcG9ncmFwaGljIHNjYW4KZmlnaHRlciBkcm9uZXMKZ29vZCBlZGdlIGNvbnRyb2wKbW91bnRhaW5vdXMgbGFuZHNjYXBlCnRoZSBza3kgaXMgcmVkCm1vdXRoIGFnYXBlCmNlbHRpYyBmYW50YXN5Cmh5cGVyLWRldGFpbGVkIG1hc3RlcnBpZWNlCmV4cGxvc2l2ZSBzdG9ybQphYnN0cmFjdCBjbG90aCBzaW11bGF0aW9uCnRhdHRlcmVkIGZhYnJpYwplbmhhbmNlZCBoYW5kcwpoaWdobHkgZGV0YWlsZWQgNCBrCm92ZXJjYXN0IHNraWVzCm9ybmF0ZSBtZXRhbGxpYyBoZWxtZXQKYmxlYWNoIG1hbmdhIHN0eWxlCndlYXJpbmcgYSByZWQgYmFja3dhcmRzIGNhcAppbnZpc2libGUKc3RlYW1wdW5rIGJsdWVwcmludApzdG9ybXRyb29wZXIKY3Jvc3NpbmcgdGhlIGxpbmUKc29tZSBmbG9hdGluZyBiaWxsYm9hcmRzCnBvbGlzaGVkIG1ldGFsCnN0cm9teSB3ZWF0aGVyCmhpZ2ggZGV0YWlsZWQgKyB0YXJvdCBjYXJkCnpvcmFuIGphbmpldG92Cmpvc2UgbGFkcm9ubgpzdGFybGVzcyBzcGFjZQpzb25pYyBnYW1lCmluc2lkZSBhIGNpcmN1cyB0ZW50Cmdvb3B5CnZlcnkgZGV0YWlsZWQgYW5kIGhpZ2ggcXVhbGl0eQp3aWxkIGFnb255CnRob21hcyB2ZXlyYXQgaW50cmljYXRlCnR3aXJsaW5nIHNtb2tlIHRyYWlscwplbGVjdHJpYyBtb3RvcnMKc3RpbGwgZnJvbSB0aGUgbW92aWUgdGhlIGFycml2YWwKd2l0aCBtb3VudGFpbnMgaW4gYmFja2dyb3VuZApkcmlwcGluZyBzYWxpdmEKbGF2ZW5kZXIgZmxvd2Vycwptb3VybmluZwptb3ZpZSBzdGlsbCBvZiBlbW1hIHdhdHNvbgpmdWxsIGJvZHkgZGV0YWlsZWQKa3Vub2ljaGkKZWxlZ2FudCBkcmF3aW5nCmJhY2tncm91bmQgY3liZXJwdW5rIHNwYWNlc2hpcAp2aXN0YQpndXN0YXYga2xpbXQgOGsKYmVhdXRpZnVsIGxha2UgYmFja2dyb3VuZAplbGVnYW50IGNvbmZpZGVudCBwb3NlCndhcmhhbW1lciA0MGshIQpoeXBlciBkZXRhaWxlZCBhbmQgcmVhbGlzdGljCmF0b21zIGZsb2F0aW5nCmVwaWMgY29tcG9zaXN0aW9uCmZhYnJpY3MKcmFpbnkgc2NlbmUKZm9nIG9uIHRoZSBncm91bmQKZ3JlYXQgc2Vuc2Ugb2YgZGVwdGgKMyAwIDAgbW0KdHJlZXMgc3dheWluZyB0byB0aGUgYmVhdApoeXBlci1yZWFsaXN0aWMgY3liZXJwdW5rIHN0eWxlCmxvbmcgYmxhY2sgaGFpciBpbiBhIHBvbnl0YWlsCm1lZGl0YXRpb24gcG9zZQpsIGNyaXRpY2FsIHJvbGUKZ2FtZSBpY29uCmFycmlmbGV4CnNtb2tpbmcgYSBjaWdhcnJldHRl8J+arApwbGFzdGljIHdyYXAKbWFnbnVtIGF3YXJkIHdpbm5pbmcgcGhvdG9ncmFwaApiaWdzdHVkaW92ZngKZnJhbWVzdG9yZXZmeApjZ3JlY29yZApmcmllZCBjaGlja2VuCnRlcnJlbmNlIG1hbGljawphbmdsZXMKYm91bnR5IGh1bnRlcgphdXR1bW4gbGVhdmVzIG9uIHRoZSBncm91bmQKY29uY2lzZSBsaW5lcwp1bHRyYWRldGFpbGVkIGVudmlyb25tZW50CmphbWV5IGpvbmVzCmhvdWRpbmkgZmx1aWQgc2ltdWxhdGlvbgprbGVlCmhvbGRzIGEgYmxhY2sgc3dvcmQKc3F1aWQgYXR0YWNrCmRyYW1hdGljIHdpZWxkaW5nIHN3b3JkIHBvc2UKa2V5IGlzIG9uIHRoZSBjZW50ZXIgb2YgaW1hZ2UKbHVtaW5vdXMgZ3Jhc3N5IGJhY2tncm91bmQKaGFwcHkgYnJhdmUgbWFnaWNhbCBjdXRlbmVzcwpyYXQgbWFuCnJlaW5jYXJuYXRpb24Kc3dpcmxpbmcgdm9ydGV4IG9mIGVuZXJneQphcmFraSBub2J1eW9zaGkKcnVyYWwgamFwYW4KaGlnaCBpbnRlbnNpdHkKYmVhdXRpZnVsIGdvd24KY2hpc2VsZWQgZ29vZCBsb29rcwpuYXR1cmFsIHN0b25lIHJvYWQKc2hpcHdyZWNrcwpyaWRpbmcgYSBob3JzZQp0b20KdGFkZW1hCmJlYXV0aWZ1bCBjYXQgZmVldApwYW50b25lCm1hbnkgc21vb3RoIGN1cnZlcwpsaWdodCBjb25lCmRpc2FwcG9pbnRlZApkb2xwaGluCm11bHRpcGxlIGxpbWJzCmV4dHJlbWVseSBsaWZlbGlrZQpjb21wbGltZW50YXJ5IGNvbG9yIHBhbGV0dGUKY2hpY2tlbiBmZWF0aGVycwpjb252ZXlvciBiZWx0cwpkaXN0YW50IGV4cGxvc2lvbnMKbGlnaHRzcGVlZApza2luIHdvdW5kcwptb2Rlcm4gY29uY2VwdCBhcnQKZWFydGggY29sb3JzCmRlc2tzCm1vbnRhZ2UKc3VtbWVyIHRpbWUKZ3JlZW4gc2xpbWUgZHJpcHBpbmcKcGx1dG8KYWdncmVzc2l2ZSBhbmd1bGFyIGRlc2lnbgpoZW5yaSBiZXJ0aGF1dApiYXJyZW4gbW9vbiBsYW5kc2NhcGUKYnJ1aXNlcwplcm9zaW9ucwppbmxldHMKcG93ZXJmdWwgc2NlbmUKYXMgYSBzdHJpY3Qgc2Nob29sIHRlYWNoZXIgKQo3IDAgbW0gZmlsbQpoeXBlcmRldGFpbGVzCnN1cnZlaWxsYW5jZQpncnVuZ2UgYWVzdGhldGljISEhCnNpbXBsZSBsb2dvCmZsaWNrZXJpbmcgYWlyCmhvdCBzdW4gZnJvbSBhYm92ZQp2ZWN0b3IgYXJ0IGlsbHVzdHJhdGlvbgphcmNoZWQgY2VpbGluZwpjbG90aCBiYW5uZXJzCmtvZGFrY2hyb21lIDogOiA4IGsKYWxpZW4gc2t5CmludGVyaW9yIG9mIHJvb20Kc2lkZXdhbGsKemFueQpjaGFubmVsaW5nIG1hbmEKYW1iaWVudCBsaWdodCBiYWNrZ3JvdW5kCmNoYXJhY3RlciByZWZlcmVuY2UKd29uZGVyZnVsIGRldGFpbHMKcXVlZW4gb2YgdGhlIGZvcmVzdAp2ZXJ5IGJpZyBleWVzCm1pbm5hIHN1bmRiZXJnCmdpYW50IHRyZWUKbHVtaW5hbApvdmVyZ2xhemUKYmVhdXRpZnVsIG1hbgphbmltZSBib3kKZmFjZSBpcyB0aGUgZm9jdXMKaHlwZXIgY29tcG9zZWQKbmVvIHJhdWNoIGFuZCBuYWRhdiBrYW5kZXIKc2lkZSBwcm9maWxlIGNlbnRlcmVkCnBob3RvZ3JhcGggMyA1IG1tCmluIGEgYm94aW5nIHJpbmcKdGVzbGEgY29pbHMKcHJpbnQgbWFnYXppbmUgcXVhbGl0eQp0c3V5b3NoaSBuYWdhbm8KYW50aGVtIGdhbWUKZGlhbW9uZCBjaGFpbgpqYW1lcyBqZWFuIGFuZCBqZW5ueSBzYXZpbGxlCm1pY3Jvc2NvcGljIHRhcmRpZ3JhZGUKYnJpbGxpYW50IHN5bW1ldHJ5CnJhZmZhZWxsZSBtb250aQplcGljIDcgMCBtbSBsZW5zIHNob3QKZGV0YWlsbGVkIHBvcnRyYWl0CmxpdCBmcm9tIGJlbG93IHdpdGggcmVkIGxpZ2h0aW5nCnNlcGlhIHBob3RvZ3JhcGh5CmZpbmUgd2hpdGUgc2hpcnQKbGVhdGhlciBzaG9lcwp2b3JvbmkgZGlhZ3JhbQp3bG9wIGFuZCBrcmVueiBjdXNoYXJ0Cm1pbmlhdHVyZSBwaG90b2dyYXBoeQptYXJ2ZWwgY29taWNzIHN0eWxlCmhpZ2ggY29udHJhc3QgYmxhY2sgYW5kIHdoaXRlCmJhdXRpZnVsCmZ1dHVyaXN0aWMgZ3VuCmxlYXBpbmcKc3RlcHMKYWRvcHRhYmxlCmdyaWZmaW4KdG9uZWQgY29sb3Vycwpsb3cgc3Vuc2V0CnRoZSBkZXZpbCB0YXJvdCBjYXJkCiMgc2NpIC0gZmkKIyBmdXR1dGlzdGljCjE5MjBzIHN0eWxlCmludGFyc2lhCmxvbmcgZmx1ZmZ5IGZ1cgp0cmVuZCBpbiBiZWhhbmNlIGhkCmFic3RyYWN0IHBhaW50IGNvbG9yIHNwbG90Y2hlcwpuYXR1cmUgbWVldHMgYXJjaGl0ZWN0dXJlCmNnc29jaWV0eSEKaHVtYW4gc2t1bGxzIG9uIGdyb3VuZApqYXBhbmVzZSBnb3RoaWMKZ2VzdHVyZQpwZW4gb24gcGFwZXIKc3RhbmRpbmcgb24gdGhlIG1vb24KcGFpbmZ1bApoZWF2eSBqcGVnIGFydGlmYWN0IGJsdXJyeQpleHRyZW1lbHkgcHJlY2lzZQpwdXJwbGUgYW5kIGJsdWUgbmVvbgphY3VyYXRlCmhpa2luZyBjbG90aGVzCjggNSBtbSBzaWdtYSBhcnQgbGVucwpsb3ZlIHNjZW5lCmJsYWNrIGFuZCB3aGl0ZSBncmFpbnkgZmlsbQppbnRyaWd1aW5nIGRldGFpbHMKaXNvbWV0cmljIHBhbGFjZQpndXJvIGFydApmbGF3bGVzcyBmYWNlCmdyZWcgcnV0d29za2kKdGFrZW4gZnJvbSBvcmJpdApsb25nIGN1cmx5IGxpZ2h0IGJsb25kIGhhaXIKYW50aSAtIGFsaWFzaW5nCmFlc3RoZXRpYyBzaG90CnRoZW1hdGljCmluZGlhbiBpbmsKd2lsZCBiZXJyaWVzCmRhbWllbiB0cmFuCmxvb2tpbmcgdXB3YXJkCmFydCBvZiB3bG9wIGFuZCBncmVnIHJ1dGtvd3NraQpicmlnaHQgbGlnaHQgbWFzdGVycGllY2UKcmF5IG9mIGxpZ2h0IHRocm91Z2ggd2hpdGUgaGFpcgpsb25nIGxlbmd0aCBzbGljayB3aGl0ZSBoYWlyCnBob3RvcmVhbGlzdGljIGhvcnJvcgpnZXJ0cnVkZQpob2xkaW5nIGEgc3RhY2sgb2YgYm9va3MKY3JhenkgaGFpcgoyNjU0NDY1Mjc5CjI1MDY5MjE0NzEKcmVuZGVyIGluIG9jdGFuZQpuZXJ2b3VzCmhlYWQgdGlsdGVkIGRvd24KYW50aHJvcG9tb3JwaGljIGZ1cnJ5IGFydAplZG8KZWlnaHRpZXMgbWlhbWkgdmljZQpzdWJqZWN0IDoga2FuZ2Fyb28KbHVzaCBzY2VuZXJ5Cm1hZ2ljYWwgYmFja2dyb3VuZAplZXJpZSBqdW5nbGUKbmF0dXJhbCBsaXBzCmhpZGRlbgpwcm9mZXNzaW9uYWwgYnJhbmRpbmcKc3VuIC0gZHJlbmNoZWQKb3V0IC0gb2YgLSBmb2N1cyBiYWNrZ3JvdW5kCndpbSBjcm91d2VsCmV2ZXJ5ZGF5IHBsYWluIG9iamVjdApsb29raW5nIGF0IGVhY2ggb3RoZXIgbWluZGxlc3NseQp0aGUgY3VyZQpiZWF1dGlmdWwgc3BhY2UKYWNjdXJhdGUgcG9ydHJheWFsCnNtb290aCBjb2xvcnMKZWx5c2lhbiBmaWVsZHMKbWVtZSB0ZW1wbGF0ZQpvY2VhbiBhbmQgcm9jayBsYW5kc2NhcGUKdmlkZW8gc3RpbGwKbWluaW1hbCBtb2Rlcm4KZ2FtZSBjYXNlCmh5cGVycmVhbGlzbSA4IGsKdmludGFnZSBzb2Z0IGdyYWlueQpmcm9tIG91dGVyIHNwYWNlCmhvbGRpbmcgYXJtcyBvbiBob2xzdGVycwpjbGluaWNhbApjcm9zc2VkIGxlZ3MKc3RhciBjaGFydHMKbG93IC0gYW5nbGUKY3V0ZSB0b3kKY3Jhc2hlZApncmFzc3kgaGlsbHMKdG9uYWxpc20hCnNpbXBsZSBjcmVhbSBkcmVzcwpzb3ZpZXQgZnV0dXJpc20KY29udHJhc3RlZCBsaWdodAppbiB0aGUgc3R5bGUgd2VzIGFuZGVyc29uCmFiZXJyYXRpb24KOCBrIHdoYXQKbWFueSBpbnRlcnN0ZWxsYXIgcGxhbnRzCmJ1ZGRoaXN0Cm11bHRpbGF5ZXJlZCBwYWludApzcGVjdGFjdWxhciBzcGxhdHRlciBleHBsb3Npb24Ka2luZyBhcnRodXIncyBjb3VydApjaHJpc3RpYW4gYXJ0Cmpld2VsbGVkCjMgLyA0IHdpZGUgc2hvdAptb25vY2hyb21lIGJ3CnN2ZyBzdGlja2VyIGFydApkYXJrIGdsaXR0ZXIKcnVzdCBhbmQgZHVzdCBhbmQgZmlyZSBhbmQgZGlydAp2ZXJ5IGFzcGhhbHQKaW4gc3R5bGUgb2YgcGFvbG8gcm92ZXJzaQppbnRlcmVzdGluZyBza2luIGNvbG9yaW5nCmV0aGVyZWFsIGFydCBkZWNvCmxpcXVpZCBnbG93aW5nIGF1cmEKcGxhbnRzIGluIGEgZ2xhc3MgdmFzZQpoaXAgaG9wIHN0eWxlCnRlbm5pcyBjb3VydApncmFkaWVudCBmcm9tIGdyZWVuIHRvIGJsYWNrCnNob3Qgb24gZXhwaXJlZCBrb2RhayBmaWxtCnRoZSBwaG90byB3YXMgdGFrZW4gZnJvbSBhZmFyCnN0cmF3YmVycnkKaW5jcmVkdWxvdXMKdGVudApwaWxsYXJzIGFuZCBhcmNoZXMKZ3JheSBkdWxsIGJhY2tncm91bmQKb3ZlcmV4cG9zdXJlCmNpbmVtYXRpYyB2b2x1bWUgbGlnaHRpbmcKd2hpdGUgbWlzdApwb3N0Y2FwaXRhbGlzbQpzb21lIGVkZ2VzIGxvc3QKcGFub3JhbWEgZGlzdGFudCB2aWV3CmphbWVzIGplYW4gYW5kIHBldGVyIG1vaHJiYWNoZXIKZ29sZGVuIGdyYXNzbGFuZHMKd2hpdGUgYnJhaWRzCndvcm0ncyAtIGV5ZSB2aWV3CmNyb3duIG9uIGhlYWQKc2V2ZW4gZGVhZGx5IHNpbnMKc2xpZ2h0bHkgb3V0IG9mIGZvY3VzCjMgZHNtYXgKdGhlIGN1bHR1cmUKZGVwcmVzc2l2ZSB2aWJlCmdvbGQgY2FibGVzCndpdGggc25vdyBvbiBpdHMgcGVhawphdCBzdW5yaXNlIGluIHNwcmluZ3RpbWUKZGlzcG9zYWJsZSBjb2xvcmVkIGNhbWVyYQpzb21lIHNtb290aApjb2xvcmZ1bCBzdW5zZXQhIQpzdGFuZG91dCBjb2xvdXJzCmluIGEgbGFzIHZlZ2FzIHN0cmVldApjdXRlIG1vbnN0ZXIKZ3JlZyBydXRoa293c2tpCnN0YW5kaW5nIGNsb3NlIHRvIHZvbGNhbm8KZGlnaXRhbCBvaWwgb24gY2FudmFzCjcgMCBzIHNjaWZpCmZhY2UgYW5kIHVwcGVyIGJvZHkgZm9jdXMKc3R5bGVkIGhhaXIKYmVhdXRpZnVsIHBsYW5zCndpZGUgYW5nbGUgc2hvdCBmcm9tIGFib3ZlCmV2aWwgd2l6YXJkCjE5MjAncyBsb25kb24gc3RyZWV0CmRpcnR5IGdyb3VuZAphYmFuZG9uZWQgcm9ja2V0IHNoaXAKZGFtYWdlZCBidWlsZGluZ3MKd2hpdGUgc2tldGNoYm9vayBzdHlsZQpwdXJwbGUgYW5kIHBpbmsKY3Jvd25zCmZsb3dpbmcgYnJ1c2ggc3Ryb2tlcwpjb2xvcmZ1bCBwYWxldHRlIGlsbHVzdHJhdGlvbgphYnN0cmFjdCB0ZXh0dXJlCndpbGxpYW0gb3hlcgp3ZWxjb21pbmcKY3liZXJwdW5rIG1vc3F1ZSBpbnRlcmlvcgpzbGlnaHRseSBhd2t3YXJkIHNtaWxlIQpndGEgdmljZSBjaXR5IGFydCBzdHlsZQpjYW5vbiBlb3MgciA1CmxvcmQgb2YgdGhlIHJpbmdzIGFlc3RoZXRpYwpvcm5hdGUgZmxvcmFsCnJhaW5ib3cgZXllcwpza3kgYmx1ZSBoaWdobGlnaHRzIGluIGhhaXIKcmVkIGZpZXJ5IHdhdGVyeSBleWVzCmhhbnMgYmVsbG1lciBhbmQgbmFkYXYga2FuZGVyCnByZXR0eSBwcmV0dHkgZmFjZQprcmVueiBjdXNoYXJ0IGFuZCB3ZW5qdW4gbGluCm1lY2hhbmljYWwgaW1wbGFudHMKc2VsZiAtIGF3YXJlCnVuZGVyIG91dGVyIHdvcmxkIGZvcnJlc3QKYWN0aW9uZmlndXJlCmZhY2UgZGV0YWlscyBzaGFycApiZWF0ZW4KdnRtCnNuYWtlIG9pbCBhbGJ1bQpvZiBiZWF1dGlmdWwgYW5nZWwKY29tcGxldGUgZGlzcmVnYXJkCnJvc3NkcmF3cyBhbmQgamF6emEKdmFybmlzaGVkCnNpbXBsZSBzdHlsaXplZApza3VsbCBsaWtlCndlYXJpbmcgYWNuZSBvdXRmaXQKbmVpbGwgYmxvbWthbXAKZmxlc2ggYW5kIG1ldGFsCnN0eWxlIG9mIGFuYXRvIGZpbm5zdGFyawphcnQgbm91dmVhdSBkZWNsb3RhZ2UKaGlnaHRseSBvcm5hdGUKdG9tIGJhZ3NoYXcgc3R5bGUKcm9vdHMgYW5kIGhheSBjb2F0Cm1vbnN0ZXIgdGVldGggY292ZXJlZCBpbiByZWQKYW5nZWwgcHJvdGVjdGluZyB3b21hbgphbmdlbCBwcm90ZWN0aW5nIG1hbgpjb29reQpidDIxCmF1dHVtbmFsIGNvbG91cnMKZmxhdCBzdXJyZWFsIHBzeWNoZWRlbGljIGNvbG9ycwpzdGVlbCBjaG9rZXIKaGlnaCAtIGVuZApyeWFuIGppYQpnYXRzb24gYnVzc2llcmUKa3V0c3V5YSB0ZXJhZGEKc3Vic3VyZmFjZSBkaWZmdXNpb24KaW5kaWdvIHJlbmRlcmVyCm1hcm1vc2V0IHJlbmRlcgpuaWdodCBza2llcwp3ZWFyaW5nIGEgY3V0ZSB0b3AKa2V5IGFuaW1lIGFydApuZXBoaWxpbQpzdG9uZSBicmljawpnbG93aW5nIGxpZ2h0cyBpbnRyaWNhdGUgZWxlZ2FudApzbW9rZXN0YWNrcwpkZXRhaWxlZCBhc3Ryb25hdXQKaG9sZGluZyBhIGNpZ2FyZXR0ZQpsZW1vbnMKdmVyeSBjbGVhciBpbWFnZQpoaWdobHkgcmVhbGlzdGljIHBob3RvZ3JhcGgKY29sb3VyZnVsIGxpZ2h0CndoaW1zeQpwaG90Z3JhcGgKc3RhbmRpbmcgc3RyYWlnaHQKbmVvIC0gdG9reW8KcG9vZnkgcmVkIHdpZwphbiBlc2NhbGF0aW5nIHZpb2xlbnQgZmlyZWZpZ2h0CnBvcnRyYWl0IDQgLyAzCm5vdGhpbmduZXNzCmFmdGVyIGxpZmUKd2VzdGVybiBiYWNrZ3JvdW5kCnVwbG9hZGVkCmJpb2xvZ2ljYWwgaWxsdXN0cmF0aW9ucwptZXJnZWQKaWRlYWwgcHJvcG9ydGlvbnMKam9yZGFuIGdyaW1tZXIgYW5kIGphbWVzIGplYW4KYW4gaXNsYW5kIG1hZGUgb2YgcmVkIGNhdmlhcgpzY2FyZWNyb3cKZm9nIGluIGJhY2tncm91bmQKY2FycmluZ3RvbgpleHRyZW1lbHkgZ2xvb215IGxpZ2h0aW5nCnNjYXJ5IHRodW5kZXJzdG9ybQpwcmFpc2UgdGhlIGJsb29kIG1vb24KYW4gdWx0cmEgcmVhbGlzdGljIHBob3RvCmRlcHJlc3NpbmcgYW5kIGhvcGVsZXNzIHZpYmUKYmxhY2sgYm9iIGhhaXJjdXQKZHVja2ZhY2UKYW5ha2luIHNreXdhbGtlcgpzZWVuIGZyb20gYWZhcgp5b3VuZyB3b21hbiBhcyBtZWR1c2EKcGhvdG8gb2YgYnJlZXplIGthemUKZ2xhZ29saXRpYyBnbHlwaApleWUgbGV2ZWwKcG9zaXRpdmlzbQpkYXJrIGdyZWVuIGxlYWYgaGFpcgpveWFtYSBrb2ppbWEKbGlnaHQgc3RyZWFrcyBpbiB0aGUgc2t5CmNoaW5lc2UgdGV4dAp2YXNjdWxhcml0eQpjb3BwZXIgZ29hdCBza3VsbHMKYW5jaWVudCBzeW1ib2xzCmZpciBmb3Jlc3QKZGFycmVuIGJhcnRsZXkKYW5kcm9tZWRhIGdhbGF4eQozIDUgbW0gY2xvc2UgdXAKcGFsZSBmYWlyIHNraW4hIQpzaWx2ZXIgc3dvcmQKYmxhY2sgYW5kIHdoaXRlIGluayBvbiBwYXBlcgpkaXZlcnNlIGN5YmVyc3VpdHMKdGhpZXJyeSByb3V6aWVyCmFuZ2xlIHByb2ZpbGUgcG9ydHJhaXQKYW5nbGVyIGZpc2gKY2xlYW5lc3QgcG9zc2UKbG93IHF1YWxpdHkgaW5zdGFudCBjYW1lcmEgcGhvdG8KaGlnaCAtIGRldGFpbGVkCnBvd2VyZnVsIGRldGFpbAp0aWxlYWJsZSB0ZXh0dXJlCmJhY2tncm91bmQgYmx1ciBib2tlaCEhCnJvbGxlcnNrYXRlcnMKd2VhdGhlcmVkIGRyYXdpbmcKZGFyayBzYXR1cmF0ZWQgY29sb3JzCmhpZ2hseSBkZXRhaWxlZCB1bnJlYWwgZW5naW5lCnNha2ltaQpnaXJsIHdpdGggZ2xhc3Nlcwpsb2ZpIGZlZWwKemVuZyBmYW56aGkKYW5pbWUgbGFuZHNjYXBlIHdhbGxwYXBlcgpkZXNlcnQhISEKYnJva2VuIHR2CmpvdXJuZXkKZnV0dXJpc3RpYyBzY2llbmNlIGZpY3Rpb24KYW5pbWUgcHJpbmNlc3MKcGFpbnRlZCBpbiBhbmltZSBwYWludGVyIHN0dWRpbwphdHRhY2sgb24gdGl0YW4gYW5pbWUgc3R5bGUKcHJlc2VudGF0aW9uCmFuaW1lIHN0eWxlIGlsbHVzdHJhdGlvbgpncnVuZ3kgd29tYW4gd2l0aCByYWluYm93IGhhaXIKY29sb3NzYWwgcm9ib3QKYm9vdGguIHBtCnVuaXR5IHVucmVhbCBlbmdpbmUKYW5pc2gga2Fwb29yIGJsYWNrCmhpZ2ggZGVmaW5pdGlvbiA0IGsgcGhvdG8KYmFsYW5jZSBwcm9wb3J0aW9uIGNvbnRlbnQKY2xvc2UgZnVsbCBib2R5IHNob3QKaGlnaCB0aW1lcwpzeW50aGV0aWMgZnVyCnNpdHRpbmcgaW4gdGhlIGdhcmRlbgphbnRocm9wb21vcnBoaWMgZG9nIGVhdGluZwpjaGlsZHJlbnMgaWxsdXN0cmF0ZWQgc3Rvcnlib29rCmFydGlzdGljIGRlc2lnbgptaW5pYXR1cmUgcGlnCmJhdHRsZWhhbW1lcgpvbnN0dWRpbyBnaGlibGkKaG9sZGluZyBhIHJvc2UgaW4gYSBoYW5kCmNyYWNrZWQgYW5kIGZhZGVkIHBob3RvIHBhcGVyCmFwYXJ0bWVudCB3aXRoIGJsYWNrIHdhbGxzCm1nbSBzdHVkaW9zCm5hdHVyYWwgc2hhZGVycwpqb3NlIG1pZ3VlbCByb21hbiBmcmFuY2VzCmVneXB0aWFuIGxhbmRzY2FwZQpnb2xkZW4gcmFpdG8KdHJhbnN5bHZhbmlhbiBmb2xrIGFydApib21iIGV4cGxvc2lvbgozIDIgbWVnYWJpdAp2aWJyYW50bHkgY29sb3JlZAp0YWxsIGJ1aWxkaW5nCmFyZXMKd2hpdGUgZ3JleSBibHVlIGNvbG9yIHBhbGV0dGUKZmFjZWJvb2sgcGhvdG8KcGVzdGlsZW5jZQpmb2dneSBkYXJrIGdyYXZleWFyZApyaXNpbmcgdXAgZnJvbSBvY2VhbgpzaXR0aW5nIG9uIGEgbWV0YWwgdGhyb25lCndlYXJpbmcgYW5jaWVudCBjaW1tZXJpYW4gYXJtb3IKcHVycGxlIHRyYW5zcGFyZW50IHNjaSAtIGZpIGhvb2QKZm91bmQgZG9vZGxlZCBpbiBhIHNrZXRjaGJvb2sKeWVsbG93IG1ha2V1cApwYXN0ZWwgcGluayBuZW9uCmFydCBkZWNvIHBvcnRyYWl0CmFydCBub3V2ZWF1IHRlbXBsZQpiaWcgb3BlbiBmbG9vcgpsZWZ0IGFsaWduCm1vb2R5IGRhcmsgY29sb3JzCmFydGlmaWNpYWwgY29uc2Npb3VzbmVzcwpiaWFuIGxpYW4Kc29tZSBncnVuZ3kgbWFya2luZ3MKY3J1dGNoZXMKbG91bmdlIGZ1cm5pdHVyZQpyYXphcmFzCnNjaWVudGlmaWMgc3R1ZHkKcGxhc3RpYyBhbmQgZmFicmljCndvdGplayBmdXMKdG90YWxseSBnb256bwpqcGVnIGFydGVmYWN0cyBvbiBjYW52YXMKaW4gZGVlcCBqdW5nbGUgZm9yZXN0CnN1bm55IGF0IG5vb24Kc3VwcmVtZWx5IGRpZ2l0YWwKZHJlYW1saWtlIGxpZ2h0aW5nCnJlZCBsZWRzCmNyYWlnIG11bGxpbnMgZGFyayBrZXkKdm9ndWUgcmVuZGVyCm93bCBjcm93bgp4cmF5IG1lbHRpbmcgY29sb3JzCmRpZXNlbApleHRyZW1lIHJlbmRlcgpjaGlsZHJlbnMgYm9vawpsaXNhIGtyaXN0aW5lCmNsb3VkIGJhY2tncm91bmQKd2VhcmluZyByb2JlCmF0dHJhY3RpdmUgbWFnaWNpYW4gbWFuCjkgMCBzIGFlc3RoZXRpYwpoeXBlcm1hc2N1bGluZQp2b24gZ29naAphdmFudC1nYXJkZSBhcnQKb25lIHBvaW50IGxpZ2h0aW5nCnNvbnkgcHJvZHVjZWQKZHJhcGVkIGluIHNoaW55IGdvbGRlbiBvaWwKc29ycm93IGludGVuc2UgbGlrZWx5CnNlbnNlIG9mIGRlY2F5IGdpdmVuCmluIGEgc2FuY3R1YXJ5CmJlYXV0aWZ1bCBleWVzIQpiYWNrcm9vbXMgYWJhbmRvbmVkIG1hbGwKbW9ub2xpdGhpYyB0ZW1wbGUKbW9uZ29saWFuIGludmFzaW9uIG9mIGlyYXEKY2xhc3NpY2lzbSBhcnRzdHlsZQpyZXZlbmFudApiYXJiYXRvcyBtb2JpbGUgc3VpdApzbWFsbGVyIG5vc2UKdHJpYmFscwpiYXJvcXVlIHZhcG9yd2F2ZSBzdGF0dWUKMyBkIGNoYXJhY3RlciBhcnQKYXJ0IGNvdmVyCnRva2lvCmJvZHljYW0KeWVnCmV5ZSAtIGxldmVsIG1lZGl1bSAtIGFuZ2xlIHNob3QKcGVyc2lhbiBmb2xrb3JlIGlsbHVzdHJhdGlvbgpjYWxsaWdyYXBoeSBib3JkZXIKc2FkIG1vdGlmCmdsb3dpbmcgbGlnaHQgYW5kIHNoYWRvd3MKd2F0ZXIgbWlzdApiZXVhdGlmdWwgZmFjZQpmdWxsIGJvZHkgZ3JlZW4gZHJlc3MKaHlicmlkIGZyb20gZHluYXN0eSB3YXJyaXJvcgptYWdpY2FsIGJ1aWxkaW5ncwpjeWJlcnB1bmsgb3V0Zml0CmhkciBmYWJyaWMgdGV4dHVyZXMKY29tcGxldGUgYm9keSB2aWV3CnJlbmRlcmVkIGluIHVuaXR5IDMgZApyZWQgc3F1YXJlCmxhcmdlIGludHJpY2F0ZSBkZXRhaWxzCmVudHdpbmVkIGluIHZpbmVzCmJyYW5jaGVzIGFuZCBpdnkKYmVhdXRpZnVsIGFzIHRoZSBtb29uCmtvZGFjaHJvbWUgKCAxIDkgNyA2ICkKemR6aXNsYXcgYmVrc2luc2tpIHN0eWxlCmRheXRpbWUgZXRoZXJlYWwgYW5pbWUKb2N0YW5lIGhpZ2hseSBkZXRhaWxlZCBjaW5lbWF0aWMKYmVhdXRpZnVsIGJsb25kZSBnaXJsCmNvbXBsZXggYW5kIGRldGFpbGVkCjUgZQptYW55IHNtYWxsIHN0b25lcwptb2Rlcm4gY29sb3IgcGFsZXR0ZQplbmVyZ2V0aWMgYXRtb3NwaGVyZQo0IGNvbG9ycyEhIQpzaG9ydCBza2lydAptYXNzIGVmZmVjdCBhcnRpZmFjdHMKZWxlbWVudGFsCmNvbG9yZnVsIHJlZnJhY3RpdmUgYWRvcm5tZW50cwp0b3JuIG5lYnVsYXMKcmFkaWFudCBuZWJ1bGEgY29sb3JzCnZpYnJhbmN5IGNvbG9yCmNyZWFtCmJpdGUgaGVyIGxpcAptZWRpZXZhbCBkcmVzcy4gd2l0Y2gKbWFrZXVwLiB1bnJlYWwgZW5naW5lCnNlZHVjdGl2ZSBzZWF0ZWQgcG9zZQpnbG93aW5nIHdhdGVyIHdpdGggY2F1c3RpY3MKZnVsbCBib2R5IGJsYWNrIGFuZCByZWQgbG9uZ2NvYXQKc2hvcnQgcG9ueXRhaWwKYmVhdXRpZnVsIGZlbWFsZSBtb2RlbApjb21wb3NpdGUKcHJpc20gZGV0YWlscwpyZWQgYW5kIGdyZWVuIHBhbGV0dGUKcGxhc3RpY2l6ZWQgc3BpcmFsIGZsYW1lcwpibHVlIGdsYXNzIGRyZWFkbG9ja3MKOGsgY2hhcmFjdGVyIGNvbmNlcHQgYXJ0CnVuZGVyIHRoZSBzdGFycwplbGVnYW50IGhhaXIKMyBkIGZyYWN0YWxzCnN0dWRpbyBzaG90IGluIHN0eWxlCnB1ZmZ5IGxpcHMKamVzc2ljYQpiZWF1dGlmdWwgaXJhbmlhbiB3b21hbgppZGVhbApmcnVpdCBiYXNrZXQKYmlvbWVjaGFuaWMKYmlyZCB0YXR0b28KOSAwIHMgYW5pbWUgYXJ0IHN0eWxlCmluIHJ1aW4gZ290aGljIGNhdGhlZHJhbApiZWF1dGlmdWwgbWFsZSBnb2Qgb2YgZGVhdGgKZ29sZCBtZXRhbHMKOCBrIHVsdHJhCmV4cG9zZWQgYm9uZXMKY2luZW1hdGljIHBvc3QgcHJvY2Vzcwp3b29kZW4gY290dGFnZQp0aGluIHJvdW5kIGVhcnJpbmdzCmdyZWVuIGxpZ2h0bmluZwpmYW50YXN5IGVsZW1lbnRzCnJhYmJpdHMKbG9zaW5nIGNvbnRyb2wKZ29kIHJheXMgb2YgbGlnaHQKY29tcGxldGVseSBibHVlIGV5ZXMKY2xhc3NpYyBkaXNuZXkgbW9vZAo4IDEgNQpwaXhpdiBkYWlseSByYW5raW5nCjE4IHllYXJzIG9sZAp1bml2ZXJzYWwgc2hhZG93aW5nCm5hcmNpc3Npc3QKcGVyZmVjdCBwaXhlbCBhcnQKZm9yZXN0IGluIHRoZSBkaXN0YW5jZQppZ2xhIG1vdmllIHNob3QKYmVhdXRpZnVsIHRoaWNrIGZlbWFsZQprYXRzdWhpcm8gb3RvbW8gYW5kIGp1bmppIGl0bwp3aGl0ZSBzYW5kIGJlYWNoCmJvaG8KbGFja2luZyBpbiB0aHJlZS1kaW1lbnNpb25hbGl0eQpvYmkgd2FuIGtlbm9iaQpicm93biBoYWlyIGluIGEgcG9ueXRhaWwKaGFuZHMgaW4gaGVyIGhhaXIKY29sb3JmdWwgaW50cmljYXRlIG1hc3RlcnBpZWNlCndpdGggYnJvd24gaGFpcgpibGFjayBjcm93cwpzeW1tZXRyaWNhbCBiZWF1dHkgZmFjZQooICggKCByYWluYm93ICkgKSApCmRldGFpbGVkIG1lY2hhbmljYWwgaGFuZHMKZmFkZWQgbHNkIGNvbG9ycwptYWtpbmcgb3V0CmJlbmV2b2xlbnQgYW5kcm9pZCBuZWNyb21hbmNlcgpiZXV0aWZ1bCB3aGl0ZSBnaXJsIGN5Ym9yZwppbnRyaWNhdGUgaGVhZHBpZWNlCm1jIGVzY2hlciBhbmQgcm9ubnkga2hhbGlsCndoaXRlIG1vbm9jaHJvbWUgY29sb3IhISEhIQpzcGFjZSBzdGF0aW9uIGxpZ2h0IHJlZmxlY3Rpb25zCnBvbGljZSBsaWdodHMKaW5oYWJpdGVkIG9uIG1hbnkgbGV2ZWxzCmJpa2luaSBhcm1vciBmZW1hbGUga25pZ2h0CmJlYXV0aWZ1bCBjaGVla2JvbmVzCmRoYWthIHRyYWZmaWMKdGFmeQpsb3ZlIGhhdGUgbG92ZQpibGFjayBhbmQgd2hpdGUgcG9sYXJvaWQKb21hciBvcnRpegpibGFjayBhbmQgd2hpdGUgcHJlc3MgcGhvdG9ncmFwaApzdGF0dWUgb2YganVsaXVzIGNhZXNhcgpzb2xvIGhpa2luZyBpbiBtb3VudGFpbnMgdHJlZXMKc3R5bGUgb2YgcmljayAmIG1vcnR5CmVtb3Rpb25hbCBjb25jZXB0IGFydApkZXRhaWxlZCBjaXR5IGJhY2tncm91bmQKbmVidWxhIGNsb3VkcwpibGFjayBtaWNyb24gcGVuIGlsbHVzdHJhdGlvbgpyZWFsbHkgY2xlYXIKbm9yd2F5IG1vdW50YWlucwpibGFkZSBydW5uZXIgY2l0eQp3ZWFyaW5nIGhlYWRtaXN0cmVzcyB1bmlmb3JtCnBhc3RyeQpibG9vZHkgcml2ZXIgaW4gaGVsbApmbG9hdGluZyBydW5lcwp0b28gbWFueSBoYW5kcyBpbiBhbGwgZGlyZWN0aW9ucwppbmRpYW4gZm9yZXN0CmJsdWUgd29vZGN1dCBwcmludApibXcgbSAxCnRvbSBiYWdzaGF3IHdldGEgc3R1ZGlvCmluc2lkZSBhIGJydXRhbGlzdCBzcGFjZSBzaGlwCmNvbG91cmVkIGxpbmVhcnQKYmVhY2hmcm9udAphb3NoaW1hIGNoaWhvCnNhaW50CmRlc2VydCBjb2xvcnMKY2VudHJhbGl6ZWQgdXJiYW4gZmFudGFzeQpzbGFudGVkIGNlaWxpbmcKdGlueSBzcGFjZQpzb2Z0IGRldmlsIHF1ZWVuIG1hZGlzb24gYmVlcgppbnRlbnNlIGtub3dsZWRnZQp3dzIgZXJhCmhkIHJlbmRlciA0awpicm93biBza2luIG1hbiB3aXRoIGEgZ2lhbnQgZ3JpbgoxNTUgY20gdGFsbApncmVlbiBiaWcgZXllcwpicnV0YWwgYmxhY2sgY2xvdGhlcwpsZSBjb3JidXNpZXIKcHJpc29uIGNvbXBsZXgKYnVja2V0IGhhdApndWFyZAptaWNoYWVsIGRhbnRlIGRpbWFydGlubwpoaWdoIHF1YWxpdHkgY29zdHVtZQp2aXZpZCBjb2xvcnMgc2NoZW1lCm9uIHRoZSBiZWFjaCBhdCBzdW5zZXQKJiBhIGRhcmsKc2FjcmFtZW50CnpoYW5nIHlpbW91CnBob3RvcmVhbGlzdGljIG9jdGFuZSByZW5kZXIgOCBrCm5vIGVzY2FwZQpicm9vZCBzcHJlYWRpbmcKdXJhbml1bQpmIC0gc3RvcApyZXB1bHNpb24KY2FycyBwb3J0cmFpdHMKdmludGFnZSBjbG9zZXVwIHBob3RvZ3JhcGgKcmVtYnJhbmR0IG9pbCBwYWludGluZwpjYXJhY2FsCnNtdWcgZmFjZQpzb2FwCmZ1bmtvCml2b3J5IHJvY29jbwpzaWx2ZXIgaHVlcwppbiB0aGUgYmVkcm9vbSBhdCBhIHNsZWVwb3ZlcgpjYXQgYW5kIGRvZyBsaWNraW5nIGVhY2ggb3RoZXIKY2F0IHNsZWVwaW5nCmp1YW4gZGlheiBjYW5hbGVzCm9jaHJlCmNjdHYgZm9vdGFnZSBvZiBhIG1vdmllIHNldApyYWluaW5nIHJhaW5ib3cKY2VsbCBzaGFkZWQgY2FydG9vbgptaWNyb29yZ2FuaXNtcwp0aGUgdGVybWluYXRvciAoIDEgOSA4IDQgKQpib2tlaCArIGRvZiArIDhrCmFiYW5kb25lZCByYWlscm9hZApjaW5lbWF0aWMgc3Vuc2V0Cm15c3RpY2FsIGNvc21pYyBsaWdodGluZwpzaW5ndWxhcml0eSBzY3VscHRlZCDvv73jg7wgZXRzeQp3ZWFyaW5nIGJyb3duIGxlYXRoZXIgamFja2V0CmNvdmVyZWQgaW4gcGxhbnRzCnN0ZWVsIGdyYXkgYm9keQprb25wZWtpIG5vIGthbnRhaQpnbG93aW5nIGF6dGVjIHRhdHRvb3MKMyBkIHJlbmRlcmluZyEKbm8gc2hhZGluZwpkYSB2aW5jaSBhbmQgZnJhbmNpcyBiYWNvbgpzb3JjZXJlciBtYWdpYyB3aXRjaApwdXJwbGUgY29sb3IgbGlnaHRpbmcKcGFsZSBibHVpc2ggc2tpbgpoeXBlciBhdHRyYWN0aXZlCnVuaXF1ZSBzaWxob3VldHRlcwp3aWRlIG9wZW4gY2l0eQpib29rcyBhbmQgZmxvd2VycwptYXJ5IHN0ZXZlbnNvbiBjYXNzYXR0CmNoZWRkYXIKZGVlcCBkaW1wbGVzCmhlYXJ0IGtpZG5leSBsdW5ncwpjaGluZXNlIHN1cmdlcnkgb3BlcmF0aW5nIHRhYmxlCnR5cGljYWwKY3liZXJwdW5rIGphY2tpZSB3ZWxsZXMKcmVkIHdoaXRlIGFuZCBibGFjayBjb2xvciBzY2hlbWUKZXBpYyBjYW1lcmEKY2luZW1hIDRkIGNpbmVtYXRpYyByZW5kZXIKZXBpYyBtb29keSBza3kKc2hhcnAgc2xlZWsgY3lib3JnIGRyYWdvbiBoZWFkCnRoaWNrIHdhcmZyYW1lIGxlZ3MKaGlnaCBxdWFsaXR5IGZpbG0gc3RpbGwKc2hhZHkgZHVsbCB3ZWF0aGVyCmNpbmVtYXRpYyBkZXRhaWxlZApkb25hbGQgdHJ1bXAgd2VhcmluZyBhIGNyb3duCnNsZWVrIGRyYWdvbiBoZWFkCmRldGFpbGVkIG1hdwpuZWF0IHdoaXRlIGJlYXJkIGFuZCBoYWlyCnNvdmlldCBhcGFydG1lbnQgYnVpbGRpbmdzCmZyaWdodGVuZWQgYW5kIGFuZ3J5CmZhaXJlZCBza2luCm1pbmltYWxpc3QgYXJ0IHN0eWxlCnN0aWxsIGZyb20gdGhlIG1vdmllIHRlcm1pbmF0b3IKc3ludGhldGljIG1hdwpjYW1lcmEgb24gdGhlIGdyb3VuZAp0aGljayBjYWJsZXMgb24gZ3JvdW5kCnNjaWZpIHJvYm90cwp2aXZpZCAtIGNvbG9ycwpzd2lybHkgZGFyayBoYWlyCm11c2V1bSBwaG90b3Nob3QKbW9vZHkgaGlnaCBleHBvc3VyZQpoYWxvIHdhcnRob2cKcmlwcGVkIGNsb3RoaW5nCmVtcHR5IHJvYWQgaW4gdGhlIG1pZGRsZQpibGFjayBsZWF0aGVyIGJyYQptaXJyb3IgZXllIGltcGxhbnRzCm1pc3QgZnJvbSB3YXRlcmZhbGwKbWFudGlzIGFuZCBzd29yZGZpc2hlcwpzdG9uZXIgZXllcwpsaWdodGluZyBleWVzCmluc2lkZSBvbGQgY2FiaW4KZWd5cHRpYW4gc3ltYm9saXNtCmV4cGxvZGluZyBuZWJ1bGEKcm9iaCBydXBwZWwKeXVuIGxpbmcKdmF1Z2hhbiBsaW5nCm5laWwgcm9zcwpwZXRlciBjaGFuCmhpc3RvcmljIHBob3RvZ3JhcGgKc21va2UgZnJvbSB0aGUgZmlyZQpmYWlyIGNvbXBsZXhpdHkKY3VzdG9tIGhlYWRsaWdodHMKZGllZCBoYWlyCm1ldGFsaWMgcGFydHMKbWFya2V0IHNxdWFyZQpjYW5vbiBhIDEKbWF0dCB3aXNuaWV3c2tpCmNvdXJ0IGplc3RlciBpbiByZW5haXNzYW5jZSBlcmEKc3R5bGlzaCBhcm1vcgp0aGljayBmYW5jeSBtYWtldXAKY29uY3JldGUgYnJpY2sgYmFja2dyb3VuZApydWdnZWQgdGV4dHVyZWQgZmFjZQpob3BlZnVsIGV4cHJlc3Npb24Kc3RhciByYWluCmdydW5neTsgb2lsIG9uIGNhbnZhcwptb29keSA6IDogd2VzIGFuZGVyc29uCmdsb3dpbmcgcG93ZGVyCndvb2QgdGFibGUKbWVuIGluIGJsYWNrCnBhY2sKYmxhbmNvIHkgbmVncm8KYXJjaHdheXMgbWFkZSBvZiBsdXNoIGdyZWVuZXJ5CmFsaWVuICggMSA5IDggNCApCm9uZSBhIGRlbW9uIC0gbGlrZSBjcmVhdHVyZQp0aGUgb3RoZXIgYSBza2VsZXRhbCBmaWd1cmUKc3BhY2UgbWFyaW5lcwpjbGVhciBzaGFycCB0b2RkIHNvbG9uZHogZmFjZQpyaWNoIHZpdmlkIHBhc3RlbCBjb2xvcnMKY29sb3JmdWwgc3RhcnMKY29sb3JpemVkIHBlbmNpbAptYWdpY2FsIHN0b3JteSByZWZsZWN0aW9ucwpjYXJvbGUgZmV1ZXJtYW4KZGFybGluZwpqb2tlCmZyYWN0YWwgdmVpbnMuIGN5Ym9yZwphbmF0b21pY2FsIGZyYWN0YWwKZ2xhc3MgZmFjaWFsIG11c2NsZXMKZWxlZ2FudCBpbnRyaWNhdGUgZGlhZ3JhbXMKc21va2Ugd2FyCmhpIC0gdGVjaApibGFjayBtaXJyb3Igc2VyaWVzCmhvbHkgaW5xdWlzaXRpb24KaW1wZXJpYWwgbWlsaXRhcnkKbWlzY2hpZWYgbWFuYWdlZApqb24gbWNjb3kKdW5pcXVlIHN0eWxlcwpudWNsZWFyIHdhc3RlCmFlcm9keW5hbWljIGRlc2lnbgpncmF2aXRhdGlvbmFsIHNpbmd1bGFyaXR5Cm1zcGFpbnQKdHJvbiBsZWdhY3kKbGlhbmEKdGhlIGluZmluaXRlCmNvbnRlbnRlZCBmZW1hbGUgYm9kaGlzYXR0dmEKYnJ1dGFsIGNvbmNyZXRlIGludGVyaW9ycwpwcmludCByZWFkeQpjb29sIHNtb290aCBzcGFjZSBjb2xvdXJzCmJpb2x1bWluZXNjZW50IHNraW4hCmV2aWwgcm9jayBjb25jZXJ0Cm5hc2EgcGljdHVyZQpzcGVjdGFjdWxhciBjb21wb3NpdGlvbgpmYW50YXN5IGFydGlzdAphcnRncmVtCmNyYXp5IGNsb3RoZXMKcWxlZAptYXJibGUgZmxvb3IKYmFjayByb29tcwpncnVuZ2Ugd2FsbApwb3N0YXBvCmR5c3RvcGlhIHN0eWxlCmZydWdnbGVzCm1lbWJyYW5lcwpzaGFycCBjb250b3VycwpnYXBpbmcgbW91dGgKcHJvZmVzc2lvbmFsIGRzbHIgcGhvdG8KZ3VpbGxlcm1vIGRlbCB0b3JvIDoKd29ya291dApob2xvIHN0aWNrZXIKc2hhZGVkIHBlcmZlY3QKd2F0ZXIgbGFuZHNjYXBlCnNxdWFyZSBibGFjayBwdXBpbCBjZW50ZXJlZApyaWJib24gY2hhcGVsCnRvbnkgdGhlIHRpZ2VyCmxpZ2h0IGNsb3RoaW5nCmZsb2F0aW5nIG9uIHNwYWNlCmN1dGUgYmVhZ2xlCmluc3RhZ3JhbSBoaWdobGlnaHRzCmFydCBkaXJlY3Rpb24KY3V0ZSBmdW1vIGNoaWJpIHBsdXNoIGltcApsZW5zIGZsYXJlIGdsb3cKYXZhbnQgZ2FyZGUgcG9wIGFydApvdXRsaW5lIGdsb3cgbGVucyBmbGFyZQpjaGFyYWN0ZXIgZGVzaWduIGNvbnRlc3Qgd2lubmVyCnNob3VsZGVycyBleWVzCmN1dGUgZ29vc2UKY3V0ZSBhbmQgY3VkZGx5CnN0eWxpemVkIHNoYWRpbmcKY3liZXJwdW5rIGFuaW1lIGdpcmwgaW4gaG9vZGllCmdlYXJzIGFuZCBsaWdodHMKZXh0cmVtZWx5IGRldGFpbGVkIGNvbmNlcHQgYXJ0CnRlcnJpZnlpbmcgbWFzdGVycGllY2UKY3liZXJwdW5rIG1lY2hhbm9pZApmdWxsIGJvZHkgcGhvdGdyYXBoCmZvb3RiYWxsIGFybW9yCmJ1bGxldHMgaW5zaWRlCmVkdWFyZCBwcm9uaW4KZGlhIGRlIG11ZXJ0b3MgZHJlc3MgYW5kIG1ha2UgdXAKYm9yaXMgdmFsbGVqbyBzdHlsZQphY3JhY2UgY2F0b29uCmNsZWFyIGhkIGltYWdlCnBob3RvcmVhbGlzdGljIGFydHN0eWxlCmhlYXZpbHkgc3R5bGl6ZWQKZGFuaWxhIHRrYWNoZW5rbwpraW5nIG9mIGZpZ2h0ZXJzIHN0eWxlCmFsaWVuIGZhY2VzCnBhc3RlbCByYWluYm93CnNoaW1tZXJpbmcgc3RhcnMKbmVvZXhwcmVzc2lvbmlzbQpoZWlnaHQgZGV0YWlsZWQgaGQgcmVhbGlzdGljIDggawpkYXJrIHBvcnRyYWl0CmZyZWlkYSBwaW50bwpkZWVwIGRhcmsgYmxhY2sKc3VtbWVyIHJhaW4KY29hc3RsaW5lCnN0cmlraW5nIGEgcG9zZQpkZW1vbiBzYW11cmFpIHdhcnJpb3IKaW50ZW5zZSBoZWF2eSBzdHJlZXQgYmF0dGxlCm5hbm8gaGV4IGFybW9yIGh1bGwKYWxpZW4gc3RhcnNoaXAKc2h5IGxvb2tpbmcgZG93bgpicnVzaGVkIHdoaXRlIGFuZCBibHVlIHBhaW50Cmxvb3NlIGNvYXQgY29sbGFyIHNhaWxvciB1bmlmb3JtCnNvbWUgaW5rIGRyaXBzCmNhbCBrZXN0aXMgbGlnaHRzYWJlciB3YWxscGFwZXIKY3liZXJwdW5rIGhlYWRwaWVjZQptaWNybyBkZXRhaWwgNGsKcmsgcG9zdApsYXNlciBzd29yZAp0cmFuc21ldHJvcG9saXRhbgpzdHJvbmcgY29uZmlkZW50IHBlcnNvbmFsaXR5CmZpcmUgJiBzbW9rZQpzY2llbmNlIG1hZ2F6aW5lIGNvdmVyCnByZXR0eSBmYWNlIHNoYXJwIGNoaW5lCndlYXJpbmcgYSBjcm93biBvZiB2aW5lcwpicmlnaHQgZ29sZCBsb25nIGhhaXIKaGFsZiBtb29uCmxvbmcgY3JpbXNvbiBoYWlyCmJsdWUgcmVmbGVjdGl2ZSBleWVzCnJlYWxpc3RpYyBwaWN0dXJlcwpwYXN0ZWwgY29sb3JlZCBzdW5yaXNlCmRpZ2l0YWwgYW5pbWUKYmh1dGFuCmpvaGFuIGxpZWJlcnQgbWl4ZWQgd2l0aCBkYW50ZQpvZmZpY2lhbCBvdmVyd2F0Y2ggZ2FtZSBhcnQKc3lkIG1lYWQgY29sb3Igc2NoZW1lCnNpdHRpbmcgcG9zZQpubyBicmlja3MKb2N0YW5lIHJlbmRlciBxdWFsaXR5Cm1hcmsgcnlkZW4gaW4gdGhlIHN0eWxlIG9mCmFteSBzb2wgaW4gdGhlIHN0eWxlIG9mCnN0aXBwbGUgYXJ0CnBhdHRlcm5lZCBiYWNrZ3JvdW5kCmNhcnZhZ2lvCmZhbnRhc3RpYyBhcnRzdHlsZQplYXJidWRzIGpld2VscnkKZGlzbmV5IG1vdmllIHBvc3RlcgpkbXQgdGVtcGxlCnRvcm4gcGFwZXIgZWRnZXMKd2hpdGUgc2hlZXRzCnB1bXBraW4Kc2VydmFudHMKcG9ydHJhaXQgcGhvdG9ncmFwaHkgNCBrCmluc2FuZWx5IGRldGFpbGVkIG1hdHRlIHBhaW50aW5nCnBpY3R1cmUgb2YgdGhlIHllYXIgYXdhcmQKZ3JleSB3YXJlaG91c2UgYmFja2dyb3VuZApkcmFnb24gd2l0aCBzY2FycwpmbG9hdGluZyBjaXR5IG9uIGNsb3VkcwprZXJiZXJvcwpicmlnaHQgZGFwcGxlZCBnb2xkZW4gc3VubGlnaHQKc3ltbWV0cmljYWwgZXllcyBhbmQgYm9keQppY2VsYW5kaWMgdmFsbGV5Cmh5ZHJhdGlvbgp0aGUgc2hhZG93CmluIHN0eWxlIG9mIHJvYmVydCBtYXBwbGV0aG9ycGUKZHJlYW15IHJvY2sgZ2lybAppbiBzdHlsZSBvZiBwaG90b2dyYW1tZXRyeSBjbG91ZApncmVlbiB0dW5pYwpkcnlhZCBpbiB0aGUgZm9yZXN0CnNvbWUgY2hvY29sYXRlIHNhdWNlCm9uIGEgd29vZGVuIHBsYXRlCjUgMiBtbSBmIDUuIDYKMSAyIDAgbW0gZiAxIDYKZHVicm92bmlrCmdyYWZmaXRpIGxldHRlcnMKaG9seSBjcm9zcwpwaXQgZHJvaWQKc3Ryb25nIHN0dWRpbyBsaWdodHMKd2FuZ2VjaGkgbXV0dQplYXJ0aCBpbiBzcGFjZQpkcmVhbXRpbWUKYmx1ZSBob2xvZ3JhcGhpYyBmYWNlCnZlY3RvciBiYWNrZ3JvdW5kCmVkaXRvcmlhbCBpbGx1c3RyYXRpb24gY29sb3JmdWwKZmlzaCBtYW4KZ3JlZWsgZmFudGFzeSBsYW5kc2NhcGUKY2FybWVuIGRlbGwg4oCZIG9yZWZpY2UKZmVtYWxlIGVsZgphbWF6aW5nIGVmZmVjdApncmFwaGljIG11c2ljYWxpdHkKdG93biBiYWNrZ3JvdW5kCmVsb2tpdHR5CmRlbGljYXRlIHBhdHRlcm5lZAp0YW5rIGNsYXNzCnRyYW5zcGFyZW50IGNsb3RoCmZ1bGwgYm9keSEgc2hvdApwb2tlbW9uIHN3b3JkIGFuZCBzaGVpbGQKZW5kIG9mIHRoZSBkYXkKYWJzb2x1dGUgcGVhY2UgYW5kIHF1aWV0IGdyb3VuZApyYWlsIHRyYWNrcyBsZWFkIGZyb20gdGhlIG1pbmUKc2hlZXIgY2xpZmZzIHN1cnJvdW5kIHRoZSBzY2VuZQppbiB0aGUgbW92aWUgdHJhbnNmb3JtZXJzCmxvbmcgZGFyayBoYWlycwpnYW1lIG92ZXJsYXkKc3Vuc2V0IHNvdXRoCnJlZCBhbmQgYmx1ZSBiYWNrIGxpZ2h0Cmp1bXAgcG9zZQpoeXBlciByZWFsaXN0aWMgMyBkIHJlbmRlcgpjbGVhbiBhbmQgb3JnYW5pemVkCjMgZCBzY3VscHR1cmUgb2YgY2FydmluZyBtYXJibGUKcmVhdmVyIGRyb25lCmdvZGRlc3Mgb2YgZmlyZQpnaWdhbnRpYyBnaXJsIGhlYWQKZm9yYmlkZGVuIHBsYW5ldApjaW5lbWF0aWMgbW92aWUgaW1hZ2UKZGlnaXRhbCBwYWludGluZyBoaWdobHkgZGV0YWlsZWQKZHJlc3MgbWFkZSBvZiBzdGVlbCBibGFkZXMKY3VsdHVyZWQKZnJlbmNoIGJyYWlkcwpyb24gY29iYi4gY2luZXN0aWxsCmxhenkgZXllcwpjYXNlbGVzcyBhbW11bml0aW9uCmdhdXNzIHJpZmxlCmNpdHkgYXBhcnRtZW50IGNvenkgY2FsbQp1a2l5b2Ugc3R5bGUKbWVkaWV2YWwgb2xkIGtpbmcKcGlsb3QgZ2lybApkcmFtYXRpYyBzaGFkb3dpbmcKZmFjZWxlc3MgaHVtYW4gZmlndXJlcwpjcm9zc3dhbGtzCjEgOSAxIDkKd2luZHNvciBrbm90IHRpZQpvbGQgYW5kIHdyaW5rbGVkCnJlc29sdXRlIGRlc2sKZ2VvbG9naWNhbCBzdHJhdGEKZmVhdGhlcmVkCjMgZCBoYW1tZXIgbW9kZWxpbmcKZmFudGFzeSBhcnQgc211ZyBzbWlsZSBtYW4KZmFuY3kgZmxhc2h5IGhhdApjb2xvcmZ1bCByaWNoIGZhbnRhc3kgY2xvdGhpbmcKc2hhcnAgZmFzaGlvbgpmYW50YXN5IGJvb2sgY292ZXIgcGFpbnRpbmcKYmFyZSBib2R5YnVpbGRlciBzaG91bGRlcnMuIGtvaGwKbGlwZ2xvc3MKbm9jdHVybmFsIHBhbGV0dGUKZnJhY3RhbHMgYmFja2dyb3VuZApoZSBob2xkcyBoZXIgd2hpbGUgc2hlIHNsZWVwcwpmYXIgZGlzdGFuY2UKZmF2ZWxhcyBpbiByaW8Kd2llbGRpbmcgYSBkZWNvcmF0ZWQgaGFsYmVyZApmZW1hbGUgY3lib3JnIGluIGRhdGEgY2VudGVyCmZ1bGx5IGNvbG9yZWQKbWVkaWV2YWwgY2FzdGxlIGJhY2tncm91bmQKaGFuZHMgaW4gaGVyIGhhaXIuIHNpZGUtdmlldwpsb3ZlbHkgZGVsaWNhdGUgZmFjZQpmaWxtIGNvbG9yIHBob3RvZ3JhcGh5CmluIHN0eWxlIG9mIGpvZWwgbWV5ZXJvd2l0egpyZW5kZXIgb2N0YW5lCmhvcnJvciBzY2kgZmkKc2F0YW5pYyByaXR1YWwKYWNyeWxpYyBsaXF1aWQgY29sb3JzCndsb3AgOiA6IDUKY2FydmVkIGJsYWNrIG1hcmJsZQplYm9ueSByb2NvY28Kd2luZ3MgYmxhY2sgbGFjZSB3ZWFyCm5vIGRpc3RvcnRpb24gb24gc3ViamVjdCBmYWNlcwpmaXJlIGxpb24KaW50cmljYXRlIHdpY2NhbiBzY2VuZSBkZXRhaWxpbmcKZ3JvdW5kIG1lYXQKZmxvcmFsIHBhdHRlcm4Kc3RpbGwgZnJvbSBhbmltYXRlZCBob3Jyb3IgbW92aWUKdGlsdCBzaGlmdCBlZmZlY3QKdGhpc3NldCBjb2xvdXJzCmJvcmVhbGlzCmZyYWN0YWwgYXV0b21hdGEKYXJ0aXN0IHJlZmVyZW5jZSBpbWFnZXMgcG9zZQpseWEgcGlsbmV2CnlpbiB6aGVuIGNodQptYWdkYWxlbmEgcmFkemllagpsYXJnZSBmaXN0cwp3ZWFyaW5nIGludHJpY2F0ZSBzdGVlbCBhcm1vcgpjbG90aGVzIGZ1bGx5IG9uCmh1bWFub2lkIGZvcm0Kc3BpZGVyd29tYW4hISEhIQphbmd1bGFyIGphd2xpbmUKYmx1ZSBza3kgd2l0aCBhIGZldyBjbG91ZHMKMSAvIDMgaGVhZHJvb20KZGFyayBjb2xvdXIgcGFsZXR0ZQpub3NlIG9mIGFuZ2VsaW5hIGpvbGllCmxpcHMgb2YgbWVnYW4gZm94CmphcGFuZXNlIG1vZGVsCnBpbmsgY2xvdGhlcwp3ZWxsIGxpc3QKc2FkYW4gdmFndWUKaGlnaCBmYXNoaW9uIHN1cGVycG93ZXJzCndlYXJpbmcgYSBjaG9ja2VyIGFuZCBjdXRlIGhhdApvY2VhbiB3YXZlCmtpY2tib3hlciBmaWdodGVyCnJhaW5pbmcgcG9ydHJhaXQKZXBpYyBjaW5lbWF0aWMgY29uY2VwdCBhcnQKZHlzdG9waWFuIGJydXRhbGlzdCBhdG1vc3BoZXJlCnNsaW15IGZsdWlkIGxpcXVpZAppbiB0aGUgYnVybmluZyBzb2lsIGRlc2VydApmdWxsIGNvbG9yIHN0aWxsCmJyaWdodCBzdW5ueSB0aW1lCmF1dGhlbnRpYyBjb3N0dW1lCmJsZXNzaW5nIHBhbG1zCmxlYWd1ZSBvZiBsZWdlbmRzIGNoYW1waW9uCnN0cm9uZyBpcmlkZXNjZW50IGxpZ2h0CmZyb20gaG90bGluZSBtaWFtaQpzdGVhbXB1bmsgZmFudGFzeSBzdHlsZQp3aGl0ZSBhbmQgdGVhbCBtZXRhbGxpYyBhY2NlbnRzCnBpbmsgYm9uc2FpIHRyZWUKY29zbWljIGxpZ2h0aW5nCmJ1ZmZhbG8gaHVudCBtb3ZpZQphbHBoYSBtb3ZpZQp0ZWNobmljYWwgdmVzdApzY2ktZmkgZmVtYWxlCmZ1bGxib2R5c3VpdApzbGVlayBwdXJwbGUgYXJtb3IKc2hhcnAgcHVycGxlIGV5ZXMKc2hhcnAgYmxhY2sgc2tpbgpzdG9ybS4gYmxvb20KZHVvdG9uZSBzY3JlZW4gcHJpbnQKZWxlY3RyaXhidW5ueQpjIGFub24gNSBkIDUgMCBtbSBsZW5zCnVyYmFuIHN0cmVldApnaG9zdCBvZiBhIHlvdW5nIGdpcmwKc3Bvb2t5IGZvZwpkcmFnb24gY2xhd3MKZXJuZXN0IGtoYWxpbW92IGJvZHkKZ2lnYW50aWMgY3RodWxodQpnaXJsIGZpZ3VyZQpmYW50YXN5IGNsYXNzaWMgZGlnaXRhbCBhcnQKYW5hbG9nIGNhbWVyYQptb2Rlcm5pc3QgY29tcG9zaXRpb24KcGl4aWUgaGFpcmN1dAp0aGUgbmlnaHQgc2t5IGlzIGEgc2VhCmJlYXV0aWZ1bCBoaWdoIGRldGFpbCBwaG90bwpnbG93aW5nIGZpbmdlcnMKc2NpZmkgaWxsdXN0cmF0aW9uCmhhaXJ5IGJvZGllcwplY3N0YXRpYyBleHByZXNzaW9uCmFydGF0aW9uCmdvbGQgZ2FsbGVvbiBzaGlwCmdvcG5payBpbiBhIGJsYWNrIGxlYXRoZXIgamFja2V0CnBvdXR5IGxpcHMKYmxhY2sgd2luZ3MgaW5zdGVhZCBvZiBhcm1zCmVtZXJhbGQgYXJ0aWZhY3RzCnJhaW5ib3cgZ291YWNoZQooKCgoKGhpZ2ggdGVjaApza2luIGNvbmNlcHQKaW5zcGlyaW5nIGFydApncm91cCBvZiBwZW9wbGUgaW4gYSBkYXJrIHJvb20KY3Vyc2VkIHBvbGFyb2lkCmd5bWFzaXVtCmRtaXRyeSBwcm96b3JvdiBzdHlsZQpiZWF0dWZpbCBwYWludGluZwpyZWRhaGFpciBhbmQgYXR0cmFjdGl2ZSBmZWF0dXJlcwpibGFjayBoYWlyZWQgeW9vbmdpCm1tb3JwZyBmYW50YXN5CmxpZ2h0bHkgZGlydHkgZmFjZQpoZSBoYXMgYSA1IG8nY2xvY2sgc2hhZG93CmhhbnMgemF0c2thCnNlYmFzdGllbiBjaGFiYWwKaHlwZXIgcmVhbGlzbSBhZXN0aGV0aWMKc3ltYXRyaWNhbApoZXN0aWEKZHJ5IHJpdmVyIGJlZAplbGlyYW4ga2FudG9yCmRyYW1hdGljIG1vcm5pbmcgbGlnaHQKaGFyZCBtb3JuaW5nIGxpZ2h0Cm1lY2hhbmljYWwgcGF3Cm1lbmFjaW5nIG9yYwpzbW9vdGhlZCBsaXAgbGluZQpuZW90cmFkCmRpc2hlYXJ0ZW5pbmcKd2VsbCBzaGFkZWQKaW4gZGlzbmV5CmZ1cnJ5IHNob3QKc2xlZWsgc3RyZWFtbGluZWQgd2hpdGUgYXJtb3IKZGV0YWlsZWQgcm9ib3QgZHJhZ29uIGZlZXQKc21vb3RoIGNvbXBvc2l0aW9uCnN1bmxpdCBza3kKYmVhbmllIGhhdAp2ZXJ5IGJpZyBleWVzIQphbm5vIDE2MDIKbW9tYSBtdXNldW0KY29uY2VwdCBmYW50YXN5CnBvc3RlciA7IHN1bW1lcgptb3RvcmJpa2VycyByYWNlIGluIGhlbGwKbHVtaW5vdXMgc2tpZXMKZWxlY3RyaWNhbCBzaWduYWxzCm5vIGhvb2RpZQpodW1hbiBzb3VsCmh1bWFub2lkIG1vbmtleSBmYW50YXN5IHJhY2UKd3Vrb25nCnRyYW5zZm9ybWVyIHJvYm90cyAoMjAwNSkKcHN5Y2hlZGVsaWMgYWVzdGhldGljCmNhcmwgemVpc3MKdGFtcm9uIHNvIDg1bW0KaHVsayBsaWtlIHBoeXNpcXVlCnBlcmZlY3QgYW5kIHByb3BvcnRpb25hbCBib2R5Cm1hcmlqdWFuYSApIHdldAp0aGUgc2hyaWtlCndlYXJpbmcgd2hpdGUgc2lsawpjbG9zZSAtIHVwIGZhY2UgcG9ydHJhaXQgZnJvbSB1cAphdXRvY2hyb21lIHBlYXJsIHBvcnRyYWl0CnVsdHJhIHJlYWxpc3RpYyBjaW5lbWF0aWMKZGFyayBncmVlbiB3YXRlcgptb3VudGFpbiBmdWppIG9uIHRoZSBiYWNrZ3JvdW5kCnRvdWNoaW5nIHRyZWUgaW4gYSBmb3Jlc3QKdGFyZ2V0IHJldGljbGVzCnlvcnViYSBib2R5IHBhaW50CmltbWFjdWxhdGUgY29tcGxleGlvbgpkYXJrIGNvbXBsZXhpb24Kdm9sdW1ldHJpYyBmb2cgbGlnaHQKZGFyayBvbWlub3VzIGxpZ2h0aW5nCmJsdWUgYW5kIHZpb2xldApmcm9udCBlbGV2YXRpb24KdHJhcHBlZCBpbiB0YWxsIGljZWQgdGVhIGdsYXNzCmljZSAtIHQgcG9ydHJhaXQKaGlnaCBjb250cmFzdCBsaWdodCBhbmQgc2hhZG93cwpjb2xkIGJ1dCBiZWF1dGlmdWwKYWJvdXQgMyA1IHllYXJzIG9sZAoyIGNvbG91cnMKc2hhZG93IG9mIHRoZSBjcm9zcwppbiBlbXB0eSEhISEgbGVnbmljYQpzYW1hcmEgd2VhdmluZwpiZWFkIG5lY2tsYWNlCmhhaXIgYmxvd2luZwpsYXNlciB3aXAKdG9vIGRldGFpbGVkIHNjdWxwdHVyZQppbnRyaWNhdGUgcmVuYWlzc2FuY2UgYXJtb3IKdGVhbCBhbmQgb3JhbmdlIGNvbG9ycwplbGVjdHJvbnMKaW5zaWRlIGEgdGFsbCB2ZXRpY2FsIHJvb20KbGF5ZXJzIG9mIGFyY2hpdGVjdHVyZQp0cmF2ZWxsaW5nIGFjcm9zcyB0aGUgc3RhcnMKaW50ZXJpb3Igb2YgYSBob2JiaXQgaG9sZQp0d28gcGxhc3RpYyBjaGFpciBiZWhpbmQgYSB0YWJsZQpzb2Z0IGxpZ2h0IGZyb20gdGhlIHdpbmRvdwp3ZWFyaW5nIGxhYnJhZG9yaXRlIGJvZHkgYXJtb3IKdnIgc3VuZ2xhc3NlcwpyZXRybyB2aW50YWdlIGFuZCByb21hbnRpY2lzbQo0bApicm93bnMgYW5kIHdoaXRlcwphb2UyCmJsaXp6YXJkIHdhcmNyYWZ0CjMgZCBhbmltYXRpb24gZGVtbyByZWVsCmphbmUgYXVzdGVuCm1hcnRoYSByb3NsZXIKcm9zc2JhY2gKcGhhcm1hY3kKc3dpcmxpbmcgc2Nob29scyBvZiBzaWx2ZXIgZmlzaApwdXRpbiBmYWNlCmdpYW50IGtpY2tpbmcgZm9vdAphcnQgc2Nob29sCmp1ZHkgZ2FybGFuZApyYWluYm93IGNsb3RoZXMKZHJhbWF0aWNhbGx5IGFydAp3ZWFyaW5nIHRhbmt0b3AKaW5zcGlyYXRpb25hbCBhbmQgcG93ZXJmdWwKa2lkcyBwbGF5aW5nIGF0IHRoZSBiZWFjaApsb25nIGV4cG9zdXJlIHRpbWUKYmx1ZWJlcnJ5IGFuZCBvcmFuZ2UgYW5kIHRlYWwKYW1iaWVudCBsaWdodG5pbmcKYW5pbWUgYXRtb3NwaGVyaWMKbGFkeSBnYWdhIGFuZCBqdWR5IGdhcmxhbmQKZGljaG90b215CnN0b2ljIGFuZCBjYWxtCmxhc3Qgc3VwcGVyCnZhbiBkeWNrCmNyb3dkcyBwYW5pYwpyYXl0cmFjZWQgYmxhZGUKZ29sZGVuIHBvbW1lbApob2d3YXJ0cyBzdHlsZQp3aGl0ZSBmcmFtZSBib3JkZXIKbGlnaHQgaXMgbWluZSB0byB0cmF2ZWwKc3R1ZHlpbmcgaW4gYSBicmlnaHRseSBsaXQgcm9vbQpicmFuZCBtYXJrCnJldHJvIHNjaSBmaQppbnRlcnR3aW5lZCBmdWxsIGJvZHkgdmlldwpwYWxlIHJlZApwYXRyaWNrIG5hZ2xlISEKbW92aWUgcG9zdGVyIDE5OTMgYW5pbWUKdW5kZXJzdGF0ZWQKbWluZXJhbCBncmFpbnMKbWFsZSBuZWNyb21hbmNlcgpibGFjayBjeWJlcm5ldGljIGVuaGFuY2VtZW50cwp3ZWFyaW5nIGEgZGFyayBhcm1vcgpyZWcgcnV0a293c2tpCmxpemFyZGxpa2UgdG9uZ3VlCm1hbiBob2xkaW5nIGEgYmFsbG9vbgptYW4gaW4gYmxhY2sKcmVhbGlzdGljIGJyb3duIGZ1cgptYW55IHRlcnJpYmxlIGV5ZXMgaW4gc3BhY2UKbXVzY3VsYXIgYnVsbCBoZWFkZWQgbWFuCm1hcnMgY29sb255Cm9ubHkgb25lIGhlYWQKbWMgZXNjaGVyIGFydAphaXJmb3JjZSBnZWFyCmxvbmcgd2hpdGUgaGFpciEhIQpzZXZpbGxlLiBieXphbnRpbmUgbW9zYWljcwptaWNoZWxhbmdlbG8gc2N1bHB0dXJlCm1pc2NoaWV2b3VzISEKbGlnaHRuaW5nIGhhbG8KZG10IHJpcHBsZXMKbW91bnRhaW5zIGFuZCBjb2xvcmZ1bCBzdW5zZXQhIQozIGQgdmVjdG9yCm1jIGVzY2hlciBzdHlsZSBhcmNoaXRlY3R1cmUKYnJpZ2h0IGxpdCBpbnRlcmlvcnMKbW9kZXJuIGhvdXNlIGluIHRoZSB3b29kCm1vbnN0ZXIgZW5lcmd5IGRyaW5rCnN0cmVldCBtb29uIGxhbmRzY2FwZQpzd2ltIHN1aXRlCmJydXRhbCBibG9vZHkgc2x1dHkgbWFrZSB1cAooICggdGhlYXRyaWNhbCApICkKZHJhbWF0aWMgc3Rvcm15IHNjZW5lCm1heGFyCnZlcnkgbG9uZyBzaGFkb3dzCmRyZXNzZWQgaW4gYmlrZXIgbGVhdGhlcgptdXNjdWxhciBzd2VhdCBsYXJhIGNyb2Z0CjIwIGNlbnR1cnkgcGhvdG9ncmFwaHkKdGhpY2sgd2hpdGUgZGV0YWlsZWQgc21va2UKbmF0dXJhbCBmcmFnaWxlIHBvc2UKbmVvc3ZyISEhCnRoZSBwcmljZSBvZiBuY3IKdmlydHVhbCByZWFsaXR5IG1ldGF2ZXJzZSBlbmdpbmUKY2hpbW5leXMgb24gYnVpbGRpbmdzCm5ldyB2ZWhpY2xlCndpbnRlciBibHVlIGRyYXBlcnkKc3BpbGxpbmcganVpY2UKcm9zc2RyYXdzIDIuIDAKb2YgYSByYW1sZXRoYWwgdmFsZW50aW5lCm9zdHJpY2ggZmVhdGhlcnMKZCZkIHByb3RhZ29uaXN0CnZpY3RvcmlhbiByb29tCm9mIGEgeW91dGhmdWwgamFwYW5lc2UgZ2lybApmaXNoZXJtYW4ncyBoYXQKb2lsIHBhaW50aW5nIG9mIHdoaXNrZXkgYm90dGxlCmRldm91cnMgYSBoYW1idXJnZXIKc2lsdmVyIG1ldGFsbGljIG1vbmNsZXIgamFja2V0Cm9sZCBtYWxlIGFyY2htYWdlCm9sZCBtYW4gcG9ydHJhaXQKdmludGFnZSBkcmVzcwpzdXBlciBoaWdoIHNwZWVkIHBob3RvZ3JhcGh5Cm9taW5vdXMgYXNzYXNzaW4KcmVkIGZsb3dlcnMgb2YgZGlmZmVyZW50IHR5cGVzCnJlZ2VuZXJhdGlvbgp6ZWxkYSBib3R3Cm90dG9tYW4gc3VsdGFuYXRlIHNwYWNlIG1hcmluZXMKd2VhcmluZyBmdXR1cmlzdGljIHNwYWNlIGdlYXIKdGhlIGV4dHJlbWVseSBob3QgYW5kIHNleHkKd2V0IGdyYXNzIGFuZCBibGFjayBzdG9uZXMKc2N1dGEKcGFpbnRpbmcgb2YgYSB3b21hbgpkdXN0IGNsb3VkcwpleHBsb2l0ZWQhIQpyYXRzISEKcGFwZXIgY3V0IG91dCBjb2xsYWdlIGFydHdvcmsKbWVkaWNhbCBjb21wbGV4Cm1pbGl0YXJ5IGluc2lnbmlhCnBhdHJvbiBzYWludCBvZiDwn5u48J+MiPCfkanwn4++CnJlYWwgbGlmZSBjaGFyYWN0ZXJzCnNjYXJ5IG1vb2QKYWthc3VraSBicmlnaHRtaW5kCnBob3RvIFsgZmFyIF0KYWR2YW5jZWQgY3liZXJuZXRpY3MKa29kYWsgdWx0cmEgZjkKd2VhcmluZyBhIHJlZCBnaWxldAozIDYgMCBwaWN0dXJlCjMgNSBtbSBzbGlkZQp6YWNoYXJ5IGNvcnppbmUKbGVhdGhlciBib2R5IHN1aXQKcGhvdG8gb2YgYSBoYW1zdGVyCm9jdGF2ZSByZW5kZXkKaW50cmljYXRlIHNrZWxldGFsIGRlY29yYXRpb25zCnBob3RvIG9mIHlvdW5nIHdvbWFuCmhlc3NpYW4gY2xvdGgKcGhvdG9ncmFwaCBvZiBlbmNoYW50ZWQgZ2FyZGVuCmJva2VoLiBydWxlIG9mIHRoaXJkcwplbGVjdHJpYyBhdXJhCmZpbmUgYmFja2dyb3VuZCBwcm9wb3J0aW9uYXRlCnNob3J0IGJsYWNrIHBpeGllIGxpa2UgaGFpcgpwaWN0dXJlIGdlbmVyYXRpb24KaHlwZXJkZXRhaWxlZCB0ZXh0dXJlCnBpeGFyIHBvcnRyYWl0CmNvbG9yIGZpbG0gZ3JhaW4Kc29mdCBvcGFsZXNjZW50IG1lbWJyYW5lcwpwbGF0ZSBvZiBib3JzY2h0CnBsYXlpbmcgY2FyZCBiYWNrCmRhZGEgY29sbGFnZQpjZXJ1bGVhbiBibHVlIGFuZCBidXJudCBzaWVubmEKd2hpdGUgLSBibG9uZCBoYWlyCmJhcm4gb3dsIG1hc2sKcG9ydHJhaXQgYXJtb3JlZCBhc3Ryb25hdXQgZ2lybAp0ZWFycyBkcmlwIGZyb20gdGhlIGV5ZXMKc2xlbmRlciBib3kgd2l0aCBhIHBhbGUKcG9pbnRlZCBmYWNlCmljZSBncmV5IGV5ZXMKcG9ydHJhaXQgb2YgYmFyYWNrIG9iYW1hCnBvcnRyYWl0IG9mIGxhcmEgY3JvZnQKbmVvYXJ0Y29yZSBhbmQgY2hhcmxpZSBib3dhdGVyCmRvbWluYW50IHNoYWRlcyBvZiBibGFjawpjb21wbGV4IG91dGZpdApuYXR1cmUgYWVzdGhldGljcwpwb3J0cmFpdCBvZiBhIGJlYXV0aWZ1bCBtb2RlbAp2YW50YWJsYWNrIGNsb3RoIHRlY2hub2xvZ3kKY2l0eSArIGdyYWZmaXRpIGJhY2tncm91bmQKcG9ydHJhaXQgb2YgYSBjeWJvcmcKYW50b24gZmFkZWV2IDggawpoYWlyd29ya3MKd2VhcmluZyBhIGZseWluZyBqYWNrZXQKaGUgaXMgYWJvdXQgNCAwIHllYXJzIG9sZAp0YWxsIGFuZCBtdXNjdWxhcgpyb3NzZHJhd3MgYW5kIGJvcmlzIHZhbGxlam8Kc3Vuc2V0IGdsb3cgYXJvdW5kIGhlYWQKcmVnYWwgY2xvdGhpbmcKZ29sZCBldGhlcmVhbCBsaWdodAphcmlzdG9jcmF0aWMgYXBwZWFyYW5jZQp5ZWxsb3cgbGF0ZXggZ2xvdmVzCmhhaXIgc3R5bGVzCnBvcnRyYWl0IG9mIGEgeW91bmcgZW1wcmVzcwpwb3J0cmFpdCBvZiBhIHlvdW5nIHBvY2Fob250YXMKZHJlc3NlZCBpbiBiZWx0cyBiaWtpbmkKZ2xvd2luZyB2ZWlucyBvZiB3aGl0ZQpkZWVwIGRhcmsgY29sb3IKY3VybHkgbWlkZGxlIHBhcnQgaGFpcmN1dAptb3JlIHRodW5kZXJzdG9ybQpzYW5kIGRlc2VydCBmYW50YXN5CmxpYW5nIHhpbmcKcmVkIGFuZCBibGFjayBjb3N0dW1lISEhCnBvcnRyYWl0IG9mIGN1dGUgbWFsbGFyZCBkdWNrCnBvcnRyYWl0IG9mIGN1dGUgc29sZGllciBnaXJsCnRyYW5zcGFyZW50IGJsYWNrIHdpbmRzaGllbGQKaXJvbiBoZWxtCnBvcnRyYWl0IG9mIGhpc29rYSBodW50ZXIgaHVudGVyCmJsYWNrIGhhaXIgYW5kIHdoaXRlIGJhbmdzCnBvcnRyYWl0IG9mIGtvYmUgYnJ5YW50CnNoYW1hbiB3aXRjaApwb3J0cmFpdCBvZiBtZWdhbiBmb3ggYXMgYSBxdWVlbgpwb3J0cmFpdCBvZiBtZiBkb29tCnNvdmlldCBlcmEKcGF1bCBnaWFtYXR0aQpwb3J0cmFpdCBvZiBwb3J0cmFpdApwb3J0cmFpdCBvZiB0ZWVuIGdpcmwKcG9ydHJhaXQgb2YgdGVlbmFnZSBhcGhyb2RpdGUKc3dpbW1pbmcgYWNyb3NzIHRoZSB1bml2ZXJzZQpwb3J0cmFpdCBzb2Z0IGxvdyBsaWdodApicm9uemUgZHdhcnZlbiBicmVhc3RwbGF0ZQpyZWdhbCBhbmQgcHJvdWQgcm9idXN0IHdvbWFuCndpZWxkaW5nCnBvc3QgLSBhcG9jYWx5cHRpYyB3YXJyaW9ycwp0aGUgbW9vbiBvcmJpdGluZyBvdGhlciBtb29ucwpjb3ZlcmVkIGluIGZ1bGwgbWV0YWwgYXJtb3IKcHJpbmNlIHZlZ2V0YQpjeWJlcnB1bmsgMiAwIDQgOApibGFkZSBydW5uZXIgMiAwIDkgOQpjYW5vbiA0MG1tIHZpZXcKZmluZSBhcnQgcGllY2UKcHJvZmVzc2lvbmFsIHBvcnRyYWl0IGRyYXdpbmcKaWx5YSBrdXZzaGlub3YhCm11dGVkIGRyYW10aWMgY29sb3IKbXVzaHJvb21zIG1pbGt5IHdheQpzb3ZpZXQgcGFpbnRpbmdzCnB1bmsgbGl0dGxlIGdpcmwKZGFyay4gbm8gdGV4dApsaW1pdGVkIHRpbWUgb2ZmZXIKaW4gbWFyaWp1YW5hcyBnYXJkZW5zCmJsdWUgcmVhbGlzdGljIDMgZCByZW5kZXIKYmx1ZSBwdXJwbGUgYXF1YSBjb2xvcnMKYmVsbHkgZnJlZQpicm93biBjbG90aGVzCnJlZWJvawphY3Rpb24gaG9ycm9yCnNzZW5zZQpuaWtvbiAxIDAgLSAyIDQgbW0KbW9lYml1cyBhbmQgZ2lnZXIKYXN0b25pc2hpbmcgc2NlbmVzCndpZGUgZ29sZGVuIGV5ZXMKZGVzaWduZWQgZm9yIGNvenkgYWVzdGhldGljcyEKcmhpem9tdXNlCnJvYm90IHBhaW50aW5nIGEgcm9ib3Qgb24gY2FudmFzCnpvcmRvbiBmcm9tIHBvd2VyIHJhbmdlcnMKdmludGFnZSBkb2xsCmRpZ2l0YWwgZ3JhcGhpYyBhcnQKc2FtdXMgYXJhbiBiaW9vcmdhbmljIHZhcmlhIHN1aXQKc3R1ZGVudApwb2xhcm9pZCBibGFjayBhbmQgd2hpdGUgcGljdHVyZQpzY2VuYXJ5CnNjZW5lIGZyb20gYSByYXZlCmJveSBzY291dCB0cm9vcApwcmUgLSByYXBoYWVsaXRlIGJyb3RoZXJob29kCnNjaSAtIGZpIHNjZW5lIGZ1dHVyZSBuZXcgeW9yawpwYWludGNoaXBzCnN1cHJlbWF0aXNtIGNvbXBvc2l0aW9uCmZpcnN0IHBlcnNvbiB3ZWFwb24Kb24gYSBwbGFuZXQgb2YgbWFlbHN0cm9tCmhyIGdlaWdlciBkZXNpZ24KZGFyayBmb2dneSB3YXRlcgpzcGlyaXR1YWwgc3R5bGUKc2VlbiB0aHJvdWdoIGEgd2luZG93CmFsbCBwYXJ0cwpsaWJyYQoxIDggNSAwIHMgY2xvdGhpbmcKb3V0c2lkZSB0aGUnc2Nob29sIG9mIG1hZ2ljICcKc2hvcnQgY2FydG9vbiBzdHJpcApmb3IgcHJpbnRpbmcKc2lkZSBwcm9maWxlIHdhaXN0IHVwIHBvcnRyYWl0CmhhdW50ZWQgZ3JlZW4gc3dpcmxpbmcgc291bHMKc2tpbm55IG1hbGUgZmFudGFzeSBhbGNoZW1pc3QKcHVmZnkgY2xvdWRzIGluIGJhY2tncm91bmQKYnJpZ2h0IGFtYmVyIGV5ZXMKc29jaWFsIGVuY291bnRlcnMKZW5naW5lcwpibGFjayBhdG1vc3BoZXJpYyBiYWNrZ3JvdW5kCnZlcnkgc21va3kgY3liZXJwdW5rIHBhcmlzIGJhcgpob2xkaW5nIGEgYnVybmluZyB3b29kIHBpZWNlCmRldGFpbGVkIGFuZCBzeW1ldHJpYyBmYWNlCndhcm0gc3VuZG93bgppbnZva2UgZmVhciBhbmQgZHJlYWQKc3BsYXNoIGFydCBicmF3bHN0YXJzCnN0YWNrZWQgaG91c2VzCndhcm0gc3RyZWV0IGxpZ2h0cyBzdG9yZSBmcm9udAphZXJpYWwgY29tYmF0CmFjdGl2ZSBiYXR0bGUgem9uZQpzaGFsbG93IHBlcnNwZWN0aXZlCjMgNSBtbSBmaWxtIGtvZGFrIDEgOSA4IDAgcwoyMDAzIGNpbmVtYXRvZ3JhcGh5CnN0cm9uZyB5b3VuZyBtYW4Kc3RhbmRpbmcgbWljcm9waG9uZXMKc3VtbWVyIHN3aW1taW5nIHBhcnR5CnJvYmIgY29iYgpibG9vZCBhbmQgZGFyayByZWQgaGlnaGxpZ2h0cwpyZWQgZGVzZXJ0IG1hcnMKODBzIHN0eWxlIHN5bnRod2F2ZQpmYWlyeXRhbGUgYW5pbWFscwpsYWNlIHdlYgpzeW1tZXRyYSBmcm9tIG92ZXJ3YXRjaApsZWRzIGhvcml6b24gemVybyBkYXduIG1hY2hpbmUKZ29sZCBzY2kgLSBmaSBhcm1vdXIKd2F0ZXJsaWx5IG1lY2hhIG55bXBoYWVhCmhlYXZ5IHJhaW55CnBvd2VyIGltcGxhbnRzCmZhbnRhc3kgbWVkaWV2YWwKdGF0c3VtYWtpCnRhdHRvbyBza2V0Y2ggb2YgYSBvY2Vhbgp0aGUgYW1lcmljYW4gZ290aGljIHBhaW50aW5nCmJhcnJlbiBkZXNlcnQgbGFuZHNjYXBlCnRoZSBjYXQgY29va3Mgc291cAptYXJzIGVuZXJneQp0aGUgZmVsbG93c2hpcCBvZiB0aGUgcmluZwp0aGUgZ29kIGhlcm1lcwp0aGUgZ29kIHBvc2VpZG9uCnRoZSBoYXJib3VyIGF0IHN0cm9tbmVzcyBvcmtuZXkKYWRvcmFibHkgY3V0ZQpiZWF1dGlmdWwgaXJpZGVzY2VudCBjb2xvcnMKKCAoICgga2F1YWkgKSApICkKY3J1c2hpbmcgZGVzcGFpcgp0aGUgcGhvdG9ncmFwaHkgYXJ0d29yawpzbmFwc2hvdHMKdGhlIHBvcGUgaXMgaW4gaGlzIGJlZApjaGFzdGUKdGhlIHRoaW5nICggMSA5IDggMiApCjEgOSAyIDAgcyBjbG90aGVzCnRvcCBhbmdsZSB2aWV3CnRveGljaXR5CmFuaW1lIGZpZ21hIGZpZ3VyZQp0cmFnZWR5IG9mIHRoZSBtaW5kIC0gZHJpdmVuCjggayBoIDUgNyA2CnN1bW1lciBjbG90aGVzCmluc2lkZSBhbiBnb3RoaWMgZHlzdG9waWFuCnNwaWtlcyBvbiB0aGUgYm9keQpvZiBhIGxpZ2h0c2FiZXIgaGlsdAp2b2x1bWV0cmljIHJhaW5ib3cgbGlnaHRpbmcKbmFydXRvIGFydHN0eWxlCnZvbHVtZXRyaWMgbGlnaHQgYW5kIHNoYWRvdwp2YXNlIHdvcmsKb2RhIG5vbgpmdXJyeSBwYXcKbGF5aW5nIG9uIGJlYWNoCnBhbGUgc2tpbiBhbmQgZGFyayBleWVzCmRhcmsgdmlzb3IgY292ZXJpbmcgZmFjZQphc3RvbmlzaGluZyBsaWdodGluZwpjdXRlIGxhcmdlIGV5ZXMKY2VudGVyIG9mIHBpY3R1cmUKYXRtb3NwaGVyaWMgd2FybSBjb2xvcmdyYWRlCnJhemllbCBpcmwKdmZ4IG1vdmllIGNsb3NldXAKc3RhdGljIGNvbG9yZnVsIG5vaXNlIGdsaXRjaAp2aWV0bmFtIHNvbGRpZXIgd2l0aCBza2F0ZWJvYXJkCjIgZCBnYW1lIGFydCBiYWNrZ3JvdW5kCnZpZXcgZnJvbSBiZWhpbmQgbWlycm9yCnZpa2luZyBzaGFtYW4KdmFwb3J3YXZlIHdhbGxwYXBlciBlbnZpcm9ubWVudApzb2xkaWVycyBhbmQgbWVjaCBmaWdodAp3aGF0ZXZlcgp3aGl0ZSBtYW4gd2l0aCBibGFjayBmYWJyaWMgbWFzawp3aG9hCndpdGggbWFsaWNlCndvbWFuIGluIGJsYWNrIGJ1c2luZXNzIHN1aXQKZWJheSBsaXN0aW5nIHRodW1ibmFpbApoaXAgYW5kIGxlZyBzaG90CnlvdW5nIGFyYWIgbW9uaWNhIGJlbGx1Y2NpCmJhdG1hbiB0IHNoaXJ0Cm11bHRpY29sb3JlZCBmYWNlcwppbGx1c3RyYXRpb24gwrsKYW50aHJvcG9sb2d5IHBob3RvZ3JhcGh5Cm5hdGlvbmFsIGdlb2dyYXBoaWMg4oCdCjRrIHVoZCBpbWFnZeKAnQpkZWVwIGNvbG91cnMuIOKAnQpmdWxsIGJvZHkgbWFzY290CmZ1bGwtYm9keSBjaGFyYWN0ZXIgcG9ydHJhaXQKYXdhcmQtd2lubmluZyBkZXRhaWxz4oCdCmRyYW1hdGlj4oCdCmhpZ2ggZGVmaW5pdGlvbuKAnQphdXN0cmFsaWFuIGJ1c2gKdXJiYW4gc2FtdXJhaQrigJxob2NrZXkgdGVhbSBsb2dvCmRpZ2l0YWwgcGhvdG9ncmFwaHnigJ0KOAojIG9jCndpdGggdG93ZXJzCmZ1bGwgLSBib2R5IGFuZCBoZWFkIHZpZXcKc3Ryb2tlcwppbXBvc3NpYmxlIHRvcnNpb24KbWFycyBsYW5kc2NhcGUKZnVsbCBjaGFyYWN0ZXIgY29uY2VwdCBhcnQKZXllcyBpbiBmb3JlaGVhZApzaGUgaXMgcmVkaGVhZApzY2llbmNlIGZpY3Rpb24gbWF0dGUgcGFpbnRpbmcKZGltIGJsdWUgbGlnaHQKOGsgb2N0YW5lIHJlbmRlcmVkCm5pZ2h0IGNsb3Vkcwptb25pdG9yCmJyaWdodCBibHVlIGZ1dHVyZQpiZWF1dGlmdWwgZ2lybHMKNGsgdmVyeSBkZXRhaWxlZApnaWFjb21ldHRpCnBpeGFyIHJlbmRlcm1hbgpjaGVtaXN0cnkKbmF0dXJlIG1hY3JvCjIwMTUKd2VhcmluZyBhIHdoaXRlIGJ1dHRvbiB1cCBzaGlydApsaW5lLWRyYXdpbmcKaHVnZSBzbWlsZQpjb2xvcmZ1bCBhY3J5bGljCm1ldGFsIGtpdGNoZW4gdXRlbnNpbHMKcGVyZmVjdCB3b21hbgpoYW5kc29tZSBkcm93CnN0dWRpbyBwaG90b3Nob290CiggKCAoICggKCBrbmlnaHQgcmlkZXIga2l0dAphcnRpc3RpYyByZWNvcmQgamFja2V0Cm5vIGh1bWFuCmRvb20gc2hvdGd1biBwb3YKbGlnaHQgY29taW5nIGZyb20gdGhlIHJpZ2h0IHNpZGUKc3RldmUgY2FyZWxsCmRhcmsgYW5kIGhvcnJvciBzdHlsZQp2bWsgbXl2bWsKb24gbXkgYmVkCmhleQpoZCBhZXJpYWwgcGhvdG9ncmFwaHkKKCAoIGFic3RyYWN0ICkgKQphbmF0b21pY2FsbHkgY29ycmVjdCBza2VsZXRvbgp2ZXJkYW50IHBsYW50cwpsaW5lYWdlIDIgcmV2b2x1dGlvbiBzdHlsZQphY2Nlc3NvcmllcwpmYWlyeSBkdXN0Cmh1bWFuIGZvcm0Kc3R5bGUgb2YgcG9rZW1vbgppYW4KZnVsbCBkeW5hbWljIGNvbG91cgpibGFkZSBydW5uZXIgYWVzdGhldGljCnRoZSB3b29kIGJldHdlZW4gdGhlIHdvcmxkcwp0cmFkaXRpb25hbCBwb3J0cmFpdApjb21pYyBjaGFyYWN0ZXIgZGVzaWduCmJvcmdpYQpjb2xvcmZ1bCBjbG90aGVzCnRhbGwgYXJjaGVkIHN0b25lIGRvb3J3YXlzCmJyb3duIGN1cmx5IGhhaXIKMSA4IHRoIGNlbnR1cnkgcGVyZnVtZSBib3R0bGVzCmhhdW50aW5nIGV5ZXMKb2xkIHdvb2QKd2l0Y2h5CmNoYW1wYWduZSBjb21tZXJjaWFsCjEgOSA0IDggZGVzb3RvIGNhcgpjaGVyZW5rb3YgcmFkaWF0aW9uCnN3aXNzIGRlc2lnbgpoaWdobGlnaHRlZApiZWtzaW5za3kKaGVhdnkgc21va2UKY29vbCBwdXJwbGUgZ3JleSBsaWdodGluZwoxIDkgOCAwIG1vdmllIHN0aWxsCmNhbWNvcmRlcgpjb25zdHJ1Y3RpdmUgc29saWQgZ2VvbWV0cnkKbGlmZSBtYWdhemluZQpmbHVvcmVzY2VudCBsaWdodAp2aHMgZmlsdGVyCjEgOSB0aCBjZW50dXJ5IHBhaW50aW5nCjEgOSA4IDAncyBtaW5pbWFsaXN0aWMKYmFja2dyb3VuZCBibHVyIGJva2VoCmN5YmVycHVuayEhIQp3aGl0ZSBjbG90aApldmVuaW5nIGZvcm1hbCByb2JlcwpsdWx1IGNoZW4KbWFueSBwbGFudHMKeWVsbG93ZWQKbWlsbApibGFjayBzcGFuZGV4CnRyYWRlbWFya3MgYW5kIHN5bWJvbHMKd2l0Y2ggYnVybmluZwpzdHJlZXQgc2lnbnMKaW4gdGhlIHN0eWxlIGJldiBkb2xpdHRsZQo0ayBzeW1tZXRyaWNhbCBwb3J0cmFpdApjZ25hdGlvbgp0aGFpbGFuZApmdWxsIGNvbG9yIGNhdGFsb2cgcHJpbnQKY3J5c3RhbC1jbGVhci1mb2N1cwpzaGFycC1sZW5zCmNsYXNzaWMgZ3JlZWsgbXl0aG9sb2d5CnRoZWF0ZXIgc3RhZ2UKbW91bnRhaW4gcGxhbnRzCndpZGUgc2hvdCBwaG90b2dyYXBoCmJvdWxkZXJzCmRpcnR5IHdhbGxzCmRlc3RydWN0aWJsZSBlbnZpb3JtZW50cwp3aWxkIHN0eWxlCm9wZW4gdmF1bHQKZ29sZGVuaG91cgoxOG1tCnNvdmlldCBmbGFncwplbGVnYW50IHByb2ZpbGUgcG9zZQoyIDAgNyA3CmhlYXZlbmx5IG1hcmJsZQpuaWNlIGFmdGVybm9vbiBsaWdodGluZwpzcmkgbGFua2EKMiAyIHllYXIgb2xkIG1hcnkgbG91aXNlIGJyb29rcwptYXNjdWxpbmUgZmFjZQp0dXJxdW9pc2UgZXllcwplYXRpbmcgc3VzaGkKd2luZCBpbiBoYWlyCmdvcmlsbGF6IHN0eWxlCmFuaXNvdHJvcHkKcmlkZXIgd2FpdGUgY2FyZAp1bmRlciB0aGUgbW9vbgphY3RpdmUKYm93CjIuIDUgZCBjZ2kgYW5pbWUgZmFudGFzeSBhcnR3b3JrCmNvbnRlbXBsYXRpb24Kc29mdCBsaWdodCBkdWxsIG1vb2QKc2hvcnQgYXF1YSBibHVlIGJsYWNrIGZhZGUgaGFpcgpob3Jyb3IgZ2FtZQpwcmluY2VzcyBtb25vbm9rZSBjb2xvciBzY2hlbWUKaW4gYSBtb2Rlcm4gY2l0eQpzYWQgbG9va2luZyBleWVzCnJpY2ggdm9sdW1ldHJpYyBsaWdodAozIDUgbW0gY29sb3VyCmV2aWwgcHJpbmNlc3MKc3R5bGUgb2YgZGF2aWQgY3JvbmVuYmVyZwpwaG90b3JlYWxpc20hIQpoaWdodCBjb250cmFzdAp0ZXh0dXJlZCBvaWwgb24gY2FudmFzCnJvZ2VyIG1hZ3JpbmkKYWlyIHNob3QKc3RldmUgYmVsbGVkaW4KZGlzdHVyYmlhCmRyb3BzIG9mIGNsZWFuIHdhdGVyCmplbGx5ZmlzaCBmcmFjdGFsCjMgZCBmbHVpZCBzaW11bGF0aW9uIHJlbmRlcgppbmZpbml0ZSBpbnRyaWNhY3kKb3JhbmdlIGRhd24KMyBkIG5lb24gYXJ0IG9mIGEgd29tZW5zIGJvZHkKOCBrIGh5cGVyIGRldGFpbGVkIGltYWdlCmFydCB0b3lzIG9uIGEgcGVkZXN0YWwKZXBpYyBzcGFjZSBiYXR0bGUKcGVhY2gKOCAwIGsKd2l0aCBmdWxsIGJhbmdzCnNtYWxsIHJvdW5kIGZhY2UKY296eSB1bmRlciBhIGJsYW5rZXQKcGVhbnV0cwpzdGFydHMKMyBkIHJlbmRlciBvZiBqZXJtYSA5IDggNQpzcGFjZSB0aGVtZWQKdGVhbCBza3kKa2F1YWkgc3ByaW5ndGltZQpiYXJsb3dlIHdheW5lCndhbGtpbmcgdG8gdGhlIHJpZ2h0CnRvdGVtCm9kZWl0aApmYW50YXN5IGFydHJlYWxpc3RpYyBwYWludGluZwphbmltZSBpbnNwaXJhdGlvbgpibGFjayBhbmQgd2hpdGUgdmVjdG9yIGFydAp3aGl0ZSBhbmQgcmVkIGRyZXNzZXMKYmVhdXRpZnVsIHF1ZWVuCnBhc3RlbCBmYWRlZCBlZmZlY3QKamFpbApzaG9wcGluZyBtYWxsCmh1bWFucyBlbnNsYXZlZAozNjAKbm8gZGV0YWlsCm5vIGRldGFpbHMKZHllIGNvbnRyYXN0IGxpZ2h0aW5nCmhhaXIgZmxvYXRpbmcgaW4gdGhlIHdpbmQKb2N0YW5lIGVuZ2luZSByZW5kZXIgOGsgaGRyCmNvbmdsb21lcmF0ZSEKc2x1c2ghIQphd2FyZC13aW5uaW5nIHBob3RvISEhIQpzbGlnaHQgc3R1YmJsZQpkcmFtYXRpY2xseSBkZWVwIGNvbXBvc2l0aW9uCmJlYXJicmljawpwb2xhcm9pZCBjYW1lcmEKb2lsIGNhbnZhcyBwYWludGluZwpmdWxsIGJvZHkgcmVuZGVyCmxvdHMgb2Ygc3BhY2UKaXJvbiBtYWlkZW4KY2l0eSBkZXB0aCBvZiBmaWVsZApyb3VuZCBoZWFkCm11c2ljIHBoZApjb2xvcmZ1bCB0cmVlcwo0IGsgaGlnaGx5IGRldGFpbGVkCmNsb3NlIC0gdXAgYm9rZWgKdW5zcGxhc2ggcGhvdG9ncmFwaHkKc3dpcmx5IHZpYnJhbnQgbGluZXMKYWtpcmEgYXJ0IHN0eWxlCm5pZ2h0IGZvcmVzdApubyBkZXB0aCBvZiBmaWVsZApsaW1pbmFsIGNyZWVweQpjYXIgdHJhZmZpYwppbnRyaWNhdGUgY2hyb21lIGhlYWRkcmVzcwo1IDAgeWVhcnMgb2xkIG1hbgptdXRlZCBjb2xvdXIgcGFsZXR0ZQpyZXRybyAtIHZpbnRhZ2UKbWl4ZWQgbWVkaWEgd2l0aCBjbGF5bW9ycGhpc20KcGVyZmVjdCBtb3ZpZSBzaG90CmNocmlzdG9waGVyIHNoeQplZHdhcmQgaG9vcGVyCnNsb3cgc2h1dHRlciBzcGVlZApkb2YgYW5kIGJva2VoCjggayBmaWxtIHN0aWxsCjggayB1aGQgZGV0YWlscwpib2R5IGNvdmVyZWQgaW4gZmxvcmFsIHRhdHRvb3MKYXByb24KODBzIG91dGRvb3IgcmV0cm8gYXJjYWRlCmNvY2FpbmUKY29ycHMgc2NhdHRlcmVkIG9uIHRoZSBncm91bmQKbWluZHNjYXBlCnBpbmsgZmxvd2VycwpkYXJrIGtpdGNoZW4KbmF0dXJhbCBzdGFybGlnaHQKYm9keWJ1aWxkZXIgcG9zaW5nCmZsb3dpbmcgZ2luZ2VyIGhhaXIKZHJhZ29uYmFsbCB6CjNkIGNvbmNlcHQgYXJ0CmZyZXNuZWwgZWZmZWN0CnRhdG9vCmEgMTk4MHMgZ290aCBuaWdodGNsdWIgaW4gc29obwphc3NldAp3aXRoIGNsb3VkcyBpbiB0aGUgc2t5CmV4dGVyaW9yIHBob3RvCmluIHN0eWxlIG9mIGRpZ2l0YWwgaWxsdXN0cmF0aW9uCmJha2VyeQpsaWdodCBncmV5IGhvb2RpZSBvcGVuZWQKaG91c2UgdGVsdmFubmkKYnJlYXRoIG9mIHRoZSB3aWxkZQpjcmFpZyBtdWxsaW5zIGRhcHBsZWQgbGlnaHRpbmcKdGlueSBwb2ludHMgb2YgbGlnaHQKaG9sZGluZyBhIHdvb2RlbiBzdGFmZgp0ZXhhcwpmaXJzdCB3b3JsZCB3YXIKYmVhdXRpZnVsIGdvbGQgc2FpbnQKbWFnbmlmaWNhdGlvbgpwaG90byB0YWtlbiB3aXRoIG5pa29uIGQ3NTAKZXNzZW5jZQpjaW5lc3RpbGwgY2luZW1hdG9ncmFwaHkKZ2FtZSBvZiB0aHJvbmVzIHN0eWxlCmJjCnN0YXJpbmcgaW50byB0aGUgY2FtZXJhCm9yYW5nZSBhbmQgYmxhY2sKbWV0CnBlcmZlY3Qgc3RydWN0dXJlCjE5NTEKc2l0dGluZyBvbiBhIHJvY2sKZGlydHkgY29uY3JldGUgd2FsbAp0cmFzaCA7IGJhc2VtZW50CjcwcyBzY2ktZmkKdmVjdG9yIGRlc2lnbgozNW1tIGYxLjgKZ29yZ2VvdXMgYnVpbGRpbmdzCnNvbWUgY29zbWljIGFuZ2VscwoyMG1tCmJsdWUgbW9oYXdrIGhhaXJzdHlsZQpsb29zZQp0YWtpbmcgYSBzZWxmaWUKYmFsbXkKaGFtYnVyZ2VycwpmdXR1cmlzdGljIHJvb20KaHlwZXJkZXRhaWxlZCB0d2lncyBhbmQgcGxhbnRzCmJpb2x1bWluaXNjZW50IGZpcmVmbGllcwpodWdnaW5nIGhlciBrbmVlcwpleHRlbXBvcmFuZW91cwpyZWQtZXllZApjb2xsYXBzaW5nCmFnZSBsaW5lcwpvcmRlcmVkCmdvcmdlb3VzIGFyaXN0b2NyYXQgcm9iZQppdGFsaWFuIHJlbmFpc3NhbmNlIHBhaW50aW5nCnB1cnBsZSBuZW9uCnNpZ25hdHVyZQpqdXN0IGV5ZXMKaHVuZHJlZHMgb2YgdGhlbQphIGJlYXV0aWZ1bCBsYW5kc2NhcGUKc2t1bGwgYm9uZXMKc21va2UgZnJvbSBjaGltbmV5cwpsb3VpcyB2dWl0dG9uCmFmcm9mdXR1cmlzbSBzdHlsZQpmbG9hdGluZyBhbW9uZyBzdGFycwpkcnkgYnJ1c2hpbmcKdGFsbCB0cmVlCmEgYmVhdXRpZnVsIHdvbWFuIHdpdGggbG9uZwp2ZXJ5IGRhcmsgY2F2ZQpzZWxmaWUgcGhvdG8Kb2N0YW5lIHJlbmRlciBhbmQgdW5yZWFsIGVuZ2luZQpzcGFyc2UgbW91bnRhaW5zIG9uIHRoZSBob3Jpem9uCmZ1bGwgcGhvdG8KYSBibG9uZGUgZW1lcmFsZCB3YXJyaW9yCmJlYXV0aWZ1bCBhbmQgcmVhbGlzdGljIGZhY2UKc2Nob2xhcgpjbGFkIGluIHJvYmVzCnBhaW50aW5ncwpibHVlIGxpZ2h0cyBhbmQgcHVycGxlIGxpZ2h0cwpnb29kIGFydApzdHJpa2luZyBmZWF0dXJlcwozZCA0awp3ZWFyeQptb25zdGVyYQpsYXVnaApkc2xyIGNhbWVyYSBwaG90bwpzdGFpbmVkIGdsYXNzIHN0eWxlCm1hcmdheQpiYWxkdXJzIGdhdGUKdmlicmFudCBiYWNrZ3JvdW5kCjIwbW0gbGVucwpzY2llbmNlIG1hZ2F6aW5lcwpwYXBlciBjdXRvdXRzIG9mIHBsYWluIGNvbG9ycwppbiBhIHN1bm55IGRheQp3YXJtIGxpdmluZyByb29tCnN1bmRheSBhZnRlcm5vb24KZGFudGUKc29sZW1uIGFuZCBtb29keQpzdHJldGNoaW5nIGhlciBsZWdzIG9uIHRoZSBncmFzcwpibHVlIHNoaW55IGxpZ2h0aW5nCmEgY3lib3JnIGNhdApiaW9uaWNsZQpyYWlueSB3aW5kb3cKcmlrIG9vc3RlbmJyb2VrCnRoaWNrIGltcGFzdG8gdGVjaG5pcXVlCm5hY3JlIGNvbG9ycwpoYWxmIGFuZCBoYWxmIGR5ZQpmbGFnIGluIGhhbmRzCm5lb24gYmx1ZSBhbmQgeWVsbG93IGxpZ2h0cwpjaGlsZGlzaApnYW1lcyBvZiB0aHJvbmVzCm5hdHVyZSBtYWdhemluZQpjaGlsbCBmZWVsaW5nCjE4NzBzCmJyaWdodCBnbG93aW5nIGV5ZXMgbGlrZSBsZWRzCnVsdHJhIGhpZ2ggZGV0YWlsIGRpZ2l0YWwgYXJ0CmhleSBidWRkeQplbGl6YWJldGggdGF5bG9yCmhvbGRpbmcgYSBoYW1tZXIKc2hhZ2d5IGJyb3duIGhhaXIKZGV2aWwgd2luZ3MKYWFyZG1hbiBhbmltYXRpb24KYmxhY2sgbWFzawo0ODAwawpzYWlsYm9hdHMKZW52aXJvbm1lbnQgZnJpZW5kbHkKY2FsYXRyYXZhCmZsYW1lIGZlcm5zCmZsYW1lIHNocnVicwpvY3RhbmUgbGlnaHRpbmcKanVsaWEgZnVlbnRlcwp3ZWFyaW5nIGhlYXZ5IGFybW9yCmF0IGR1c2sgYXQgZ29sZGVuIGhvdXIKaW5kdXN0cmlhbCBsaWdodCAmIG1hZ2ljCmFuZHJlaSByaWFib3ZpdGNoZXZ5CmNyb3NzZWQgYXJtcwpwb3J0YWJsZSBnZW5lcmF0b3IKZW1lcmdlbmN5IGNvdW50ZXJtZWFzdXJlcwphbmltZSBzZXJpZXMKZWVyaWUgdmliZXMKc2lkZSBzY3JvbGxlcgpibGFjayB2aWN0b3JpYW4gZHJlc3MKc29jaWFsIG1lZGlhCndlYXJpbmcgYSB3aGl0ZSBibG91c2UKYSBnb3JnZW91cyBibG9uZGUKbmVvbiBleWVzCndldCBmcm9tIHJhaW4KaW5jcmVkaWJsZSBjb2xvcnMKYXdhcmQtd2lubmluZyBmYW50YXN5IGFydApwb3AgY3VsdHVyZQpzbGlnaHQgc21pcmsKYSBoZWFkLW9uCm5hdHVyZSBsaWdodGluZwpkYXJrIGFydHMKdmlicmFudCB3YXRlcmNvbG9yIHBhaW50aW5nCnN0eWxlIG9mIGFsYW4gbGVlIGFuZCBqb2huIGhvd2UKaW50cmljYXRlIHBhdHRlcm5zIG9uIGZhY2UKdGhvbWFzIGtpbmFkZQp2aXZpZCByYWluYm93IG9mIGNvbG9ycwppcmlkZXNjZW50IGdsaXN0ZW5pbmcgc21va2UKcGF0aG9zCmV4Y2VsbGVudApqdW5qaSBpdG8gYXJ0d29yawppdG8ganVuamkgYXJ0CmFydGlzdCBub3JtYW4gcm9ja3dlbGwKZ29kIGxpZ2h0CmxhcmdlIHRyZWVzCjM1bW0gc3RvY2sKYXJjaHdheQphd2FyIHdpbm5pbmcKdWx0cmEgcmVhbGlzdGljIHBhaW50aW5nCmNoaXBwZWQgcGFpbnQKdHdvIGFsaWVucyBhcm91bmQKYSBtYWplc3RpYyBnb3RoaWMgZHJhZ29uCnVsdHJhIGhpZ2ggcmVzCmdlb21ldHJpY2FsbHkgcmVhbGlzdGljCmpvaG4ganVkZSBwYWxlbmNhcgpsaWdodG5pbmcgYmFja2dyb3VuZApraXRjaGVuIGJhY2tncm91bmQKYSBtZXNzeQpwcmVjaW91cwphIG1pZGRsZS1zaG90IGZyb20gZnJvbnQKbGVhZCBkZXNpZ25lciBncmVnIHJ1dGtvd3NraQoyMDMwCnN0aWxsIGZyb20gYWxpdGEKKGplYW4ganVsZXMgbGluZGVuKQp3YWxsIG11cmFsCmZ1bGwgc3ViamVjdApuZXZlcndpbnRlciBuaWdodHMKdWhkIHJlYWxpc3RpYyBmYWNlcwoocGVuKQp3ZWFyaW5nIGEgd2hpdGUgdHV4ZWRvCmxvdHMgb2Ygc21va2UKYSBwaG90byBvZiBhIGRpc2hldmVsZWQgbWFuCmNsZWFuIGJsb25kZSBoYWlyCnRoaWNrIGJlYXJkCmZyZW5jaCBmcmllcwpteXN0aWNhbCBmZWVsaW5nCmYtc3RvcCAyLjgKZ2VybWFuIGV4cGVyc3Npb25pc20KZnVsbC1ib2R5IHBob3RvZ3JhcGh5CmRpbW1lZCBsaWdodGluZwpzdWJ0bGUgc21pbGUKZmxvYXRpbmcgaW4gYSBtaXN0eSBkYXplCmJvdW5jZSBsaWdodGluZwoxOTc5CnZpZGVvZ2FtZSBhc3NldAphcml6b25hCmFzIHRoZSBqb2tlcgpkZWVwIGdyZWVuIGV5ZXMKZnVsbCBib2R5IHNob3QgNGsKZGV0YWlsZWQgZHJvcGxldHMKdnIgZ2xhc3NlcwpwZXRlciB4aWFvCmEgcG9ydHJhaXQgb2YgYW4gZWxmCmxvdy1rZXkgbmVvbiBsaWdodG5pbmcKdmlicmFudCBsaWdodCBsZWFrcwpkcmlua2luZyB3aW5lCmZpcmUgcGFydGljbGVzCmZseWluZyBzaGlwcyBpbiB0aGUgYmFja2dyb3VuZApjb3NtaWMgc2t5CnJlZCBub3NlCmJsYWNrYm9hcmQKMS40Cndhc2hlZCBvdXQgYmFja2dyb3VuZAp0cm9waWNhbCBiaXJkIGZlYXRoZXJzCmYzLjIKYSByb2FkIGxlYWRpbmcgdG8gdGhlIGxpZ2h0aG91c2UKbG9va2luZyBhdCB5b3UKYXdhcmQgd2lubmluZyBwcmVzcyBwaG90bwpmdXJyeSBjcmVhdHVyZXMKc2hpbnkgZ2xvc3Mgd2F0ZXIgcmVmbGVjdGlvbnMKYmxhY2sgYW5kIGFxdWEgY29sb3JzCmFzaCB0aG9ycCBraHl6eWwgc2FsZWVtCmEgc2hhbWFuIGhvbGRpbmcgdXAgdGhlIHVuaXZlcnNlCmhhaXJsZXNzCnNwYWNlIGluIGJhY2tncm91bmQKamV3ZWwKYSBzdGVhbXB1bmsgYmVhdXRpZnVsIGdvZGRlc3MKZ2FzcGFyIHBlZXRlcgptYXggY2FybGllcgpmMi44IDUwbW0KYXZlbmdlcnMgZW5kZ2FtZQpiZWF1dGlmdWwgd2hpdGUgbGlnaHRpbmcKc2VydmljZSByb2JvdHMKZ2FuZ3MKYSBzdHVubmluZyBwb3J0cmFpdCBvZiBhIGdvZGRlc3MKY3JlZXBlcgp0aGUgbW92aWUKc3R1bm5pbmcgYXJjaGl0ZWN0dXJlCmluIHRoZSBldmVuaW5nCmxlbnMgZmxhaXIKZGFyayBmYXJpeXRhbGUKdHJvbGxzCmNvdmVyaW5nIHRoZSBncm91bmQKcHJlLXJhcGhhZWxpdGUgc3R5bGUKZ2xvb215IHN0eWxlCmphcGFuZXNlIGFuaW1hdGlvbiBzdHlsZQphbmltYXRlZCBmaWxtIHN0aWxsCmhlaWx1bmcKc2hhcnAgaXJyZWd1bGFyIHNwaXJhbGluZyB3aW5ncwpyZWQgYW5kIGdyZWVuCm9ybmF0ZWQKMTg4MCBwaG90b2dyYXBoCndldCBwbGF0ZQptYWRtYXgKZXNzZW5jZSBvZiBzdHJlZXQgZm9ybXMKcmVhbGlzdGljIGV5ZXMgbG9va2luZyBhdCBjYW1lcmEKaW4gZnJvbnQgb2YgYSBydWluZWQgY2l0eQp0YWlsb3JlZCBjbG90aGluZwpyb2dlIGFudG9uaW8KZmFtb3VzIHBob3RvCnRpbHQtc2hpZnQgcGhvdG9ncmFwaHkKYWZ0ZXIgaG91cnMKeW9zaGl0YWthCmZpYm9uYWNjaSBwYXR0ZXJuCmphcGFuIGx1c2ggZm9yZXN0CnBsYXlib2kgY2FydGkgYW5kIGxpbCB1emkgdmVydApmYXNod2F2ZQpjaW5lbWF0aWMgZWZmZWN0CmFsZXggYW5kcmVldgpsb25nIHN0cmFpZ2h0IHJlZCBoYWlyCmNhbG0gZXhwcmVzc2lvbgphc2hsZXkgZ3JlZW5lCmFsaWNlIGluIHdvbmRlcmxhbmQgY3liZXJwdW5rCmh5cGVyIGRldGFpbGVkIGRpZ2l0YWwgYXJ0CnNoZSBsb29rcyBsaWtlIGEgbWl4IG9mIGdyaW1lcwpvZGRpdGllcwoxOTQ2CmVtYmFycmFzc2VkCnNpbHZlciBleWVzIGZ1bGwgYm9keQpmYWNlIGlzIHZpc2libGUKd2FsbHBhcGVycwpwcm9tbyBpbWFnZQpyYXBwZXIKdGFzdGVmdWwgY29sb3JzCnBhaW50aW5nIG9uIGEgY2FudmFzCmFib3JpZ2luYWwgYXJ0CndvbGYgYXJtb3IKc21va3kgYmFja2dyb3VuZApleGNlbGxlbnQgdXNlIG9mIG5lZ2F0aXZlIHNwYWNlCnRlbXBsZSBydWlucwo4ayBwb3N0IHByb2Nlc3NpbmcKc3VwZXIgYWRvcmFibGUKaGFwcHkgZ3JpbgpjYXJ0b29uIGV5ZXMKZmFjZSByZXRvdWNoZWQKYW4gYXN0cm9uYXV0IGZsb2F0aW5nIGluIHNwYWNlCmRhcmtuZXNzIGJlaGluZCBpdApidXJlYXUgb2YgZW5ncmF2aW5nIGFuZCBwcmludGluZwptYXR0ZSBwYWl0aW5nCmFrYSBkcmVhbQpnbG9yaW91cyBnYWxhY3RpYyBjb2xsaXNpb24KbG9uZyBzaGFnZ3kgaGFpcgpibHVlIGFuZCBpY2Ugc2lsdmVyIGNvbG9yIGFybW9yCmZpbmFsIGZhbnRhc3kgYXJ0d29yayBjb25jZXB0CmJsYWNrIG92ZXJjb2F0CnJpY2ggY29sb3VyZnVsCmFuIGVwaWMKcmljaCBjb2xvdXIKaW5maW5pdHkgbWlycm9yCmFlc3RoZXRpYyBmYWNlCndlYXJpbmcKY3V0ZSBwaG90b2dyYXBoCmFudHZpZXcKc2FudGEgbW9uaWNhIGJlYWNoCnZhY2F0aW9uCnJhaW4gd2F0ZXIgcmVmbGVjdGlvbnMgaW4gZ3JvdW5kCnVwdHVybmVkIG5vc2UKYW5kcmV3J3MgYmFzZQpqZXQgYmxhY2sgaGFpcgpuZWNrdGllCmJsdWUgYW5kIHdoaXRlIGNvbG9yIHBhbGV0dGUKay1vbiEKbmljaGlqb3UKaGlnaHQgZGV0YWlsCmludHJpY2F0ZSB3YXRlcgptdWx0aWNvbG9yIGdsaW50cwpwcmVjaW91cyB2YWx1YWJsZSBlbGVtZW50cwphcm0gdGF0dG9vCmtleWhvbGUKYW5uYXNvcGhpYSByb2JiIGFzIGxpbmsKc2hvY2tlZAphbnRocm8gcG9ydHJhaXQKZGV2YXN0YXRpbmcKYXJhYiBhbWVlcmEgYWwgdGF3ZWVsCmhvbHkgZ3JhaWwKYXJjaGFuZ2VsIG1pY2hhZWwKYmV0dHkgY29vcGVyCmNpdGFkZWwKdG9yaWkgZ2F0ZQppY2ViZXJncwptb3ZpZSBpbGx1c3RyYXRpb24KaGlnaCBjb250cmFzdCBoeXBlcnJlYWxpc20gOGsKYWZyb2NlbnRyaWMgbXlzdGljaXNtCnNwaXJhbCBleWVzCndhdGNoaW5nIHR2CmFzaWFuIGZlbWFsZSB3YXRlciBlbGVtZW50YWwKZGlzdGluY3QgZmlndXJlcwphc21vbmdvbGQKbWFydmVsb3VzIGRlc2lnbmVyIDNkIHJlbmRlcmVkCmFzdWthIGxhbmdsZXkgc29yeXUKZ29sZGVuIGhvdXIgaW4gbWFuaGF0dGFuCmNyZXB1c2N1bGUKdWx0cmEgcGhvbmsKc3RyZWV0IGxpZ2h0aW5nCmF4b2xvdGwKb2NjdWx0IHJpdHVhbApwcm9taW5lbnQga2VlbC1tb3VudGVkIHJhaWxndW4KZGV0YWlsZWQtd2hlZWxzCmJvbGQgcmF2ZSBvdXRmaXQKZXBpYyBkaWdpdGFsIGNvbmNlcHQgYXJ0Cm1hbmEgZmxvd2luZyBhcm91bmQgaXQKc3RldmUgbWNjdXJyeSBhbmQgaXJha2xpIG5hZGFyCmluIGdhbWUgY2FwdHVyZSAzZCByZW5kZXIKbGlnaHQgZ3JlZW4KbW9vZHkgYXRtb3NwaGVyaWMKYmF0dGxlbWVjaAp2aWRlb2dhbWUgYXJ0CnN0dWRpbyBtYWRob3VzZQpjdXRlIG5hdHVyYWwgYW5pbWUgZmFjZQpnZWFyd2hlZWxzCnRvdWhvdSBwcm9qZWN0IG9mZmljaWFsIGFydHdvcmsKYmVhdXRpZnVsIGFuZ2VsCndlZXBpbmcgd2lsbG93cwpiZW5vaXQgYgpiZWF1dGlmdWwgZmVtYWxlIHZhbXBpcmUKZmFudGFzeSBwaG90b3Nob290CnN5bW1ldHJpY2FsbHkKbGFrZSBpbiBmb3JlZ3JvdW5kCnBpbmsgZm9yZXN0CmxpZ2h0IGdyZWVuIG1pc3QKc2VhIHNwcmF5CnZlcnkgaGlnaCBxdWFsaXR5IHBob3RvZ3JhcGh5CmNsZWFuIHNoYXZlZApsYXJnZSBoZWFkCm1hbmh3YQppY2UgYmx1ZQpzcGVlZHRyZWUKd2l0aCBhIGJvYiBjdXQKcG9ydHJhIDE2MApuZW9uIGN5YmVycHVuawpiYXJjZWxvbmEKbWFzc2l2ZSB3aW5ncwp0aGUgZ29kIG9mIG9hdG1lYWwKcmVkIGFuZCBnb2xkZW4gY29sb3IgZGV0YWlscwpuYXRpb25hbCBwb3J0cmFpdCBnYWxsZXJ5CnNhc3F1YXRjaApvaWwgcG9ydHJhaXQKZ3JleSBydWJiZXIgdW5kZXJzdWl0CmJpb2x1bWluZXNjZW50IGplbGx5ZmlzaAppbiBhIGRyZXNzCmJqw7hybiBza2FsbGRyYXNzb24KaGFsZi1saWZlCjE5NTUKd2lkZS1hbmdsZSBzaG90CmFuZ2xlZCB2aWV3CnZlcnkgY29oZXJlbnQgc3ltbWV0cmljYWwgd29yawpibGFjayBwZWFybHMKbHVuYXIKbWFydmVsIHVuaXZlcnNlCnJlYWxpc3RpYyBjb3NwbGF5CmJyZXhpdApib3JpcyBqb2huc29uIGluIGd0YSB2CnZlcnkgZGV0YWlsZWQgdG9hZAptdXNldW0gcGhvdG9ncmFwaApicmF6aWxhbiBzdXBlcm1vZGVsCnpoYW5namlhamllIGluIGVhcmx5IG1vcm5pbmcKbG9nbyBhcnQKd2V0IGZhY2UKaG9sZGluZyBhIGNyb3diYXIKbGF2YSByb2NrCmJ1ZW5vcyBhaXJlcwpsZWQgZWZmZWN0cwpkaXN0cmVzc2VkIHBhaW50CmFsbCBpbiBmb2N1cwpyb21hbmNlIGJvb2sgY292ZXIgc3R5bGUKc21hbGxlc3Qgd2Fpc3QKY292ZXJlZCBpbiBzb2Z0IGZ1cgp0cm9waWNhbCBiaXJkcwpjbiB0b3dlcgptaWNybyBtYWNoaW5lcwp3b3JraW5nIGluIGFuIG9mZmljZQppbHNlIGdvcnQKY2Fwb2VpcmEKZi84LjAKaW50cmljYXRlIHN0b3J5Cm1vcm5pbmcgYXRtb3NwaGVyZQpmbHlpbmcgYWlyc2hpcHMKYmx1ZSBwcmludApjYXRzIHBsYXlpbmcgcG9rZXIKZGFyayBsaW5lcwpzY3JlZW5zaG90IGZyb20gbWluZWNyYWZ0CnBvcnRyYWl0IG9mIGEgZGVtb24KMTd0aC1jZW50dXJ5Cmhhc2Jybwpwcm9mZXNzaW9uYWwgcG9ydHJhaXQgcGhvdG9ncmFwaApkYXJlZGV2aWwKY2hlcnJ5IGJsb3Nzb20gZm9yZXN0CmNoZXJyeSBibG9zc29tIHRyZWUKb3ZlcmhlYWQKc3BhY2UgYmFzZQp0aHJlZSBraW5nZG9tcwpzdWJzdXJmYWNlIHNjYXR0ZXJpbmcgc2tpbgpuaWtvbiA1MG1tCmNocmlzIHByYXR0IGFzIG1hcmlvCmJhdGgKY2hyaXN0aW5hIHJpY2NpCnJpZGluZyBhIG1vdG9yY3ljbGUKaW5kb29yIGxhYiBzY2VuZQpjaXR5IG1hcApleHRyZW1lbHkgZGV0YWlsZWQgYXJ0CmxlZ29zCmNyYWlnIHd5bGllCnByb3N0aGV0aWNzCmludHJpY2F0ZSBwYXR0ZXJucyA0awp3dzIgaGlzdG9yaWNhbCBwaG90b2dyYXBoeQpjaXRpemVucwphdWdtZW50ZWQgY3lib3JncwpoYXJkb3BzCmhhbmQgd2l0aCBmaXZlIGZpbmdlcnMKd2VhcmluZyBhIHNoaXJ0IGFuZCBhIGplYW4KZHlzdG9waWFuIGNpdHkgc2t5bGluZSBhdCBuaWdodAppbiBzdHlsZSBvZiBtb2ViaXVzCmFuaW1hdGVkIG1vdmllIHN0aWxsCmNvZGV4IHNlcmFwaGluaWFudXMKYmFjayBsaWdodCBjb250cmFzdAptb2Rlcm4gcG9ydHJhaXQKY29sb3NzYWwgdGl0YW4KamVlcAplcm9sIG90dXMKc3VwZXIgbmludGVuZG8KY3lhbiBnb2xkIGJsYW5rIGxpZ2h0Cmd1c3RhdmUKZWR3YXJkCnVsdHJhIGdyYXBoaWMgc2V0dGluZ3MKc3R5bGUgb2YgaWx5YSBrdXZzaGlub3YKY29zdGEgYmxhbmNhCmV4aGliaXRpb24gY2F0YWxvZwpjb3VudGVyIHN0cmlrZQprb2RhayA1MjQ3IHN0b2NrCmNyYXNoIGJhbmRpY29vdApoaWdobHkgZGV0YWlsZWQgcGljdHVyZQpzb3ZpZXR3YXZlCmhvcnJvciBtYW5nYQpjcmltZSBzY2VuZQpwZW9wbGUgd2Fsa2luZyBpbnRvIHRoZSBob3Jpem9uCm9ydG9ncmFwaGljCmV4dHJlbWVseSBkZXRhaWxlZCBwb3J0cmFpdApiYXQKYnJhbmRpc2hpbmcgcG93ZXJmdWwgc3dvcmQKc3RhciB0cmVrIHNldHRpbmcKb24gaW50ZXJzdGVsbGFyIHNwYWNlCmN5YmVycHVuayBsYW5kc2NhcGUKY3lib3JnIHdvbWFuCm11bmvDoWNzaSBhbmQgaG9sbMOzc3kgc2ltb24Kc2F1cm9mb3JtIGh5YnJpZApndWFyZGlhbiBwcm9qZWN0Cm1vb25saXQgc2t5CmRhaXN1a2UgdHN1dHN1bWkKcm9iZXJ0IGtvbmRvCjQwawpjYW5vbiBlb3MgMTAwMGQKZGFubnkgZGUgdml0bwpzdGlsbCBmcm9tIGdhbWUgb2YgdGhyb25lcwpjb21wbGVtZW50YXJ5IGNvbG91ciBzY2hlbWUKZ3JlYXQgY29tcG9zaXRpb24gY2luZW1hdGljCmZpc2huZXRzIHN0b2NraW5ncwpmcmFuayBmcmFuenpldGEgYW5kIHNha2ltaWNoYW4KZGFyayBwYXJhZGlzZQphcmVuYQpkYXJrIHdpemFyZApzaW1vbgp2b2x1bWV0cmljIGZvZyBhbmQgbGlnaHQKZGF2aWQgYXR0ZW5ib3JvdWdoCmluc2lkZSBhIGxpYnJhcnkKZGVhdGggc3RhcgpteXRocHVuawpibGVhay4gYmlnIHN0b25lcwpuZW9uIHB1cnBsZQpiYWNrZ3JvdW5kOiBhc3NhbSB0ZWEgZ2FyZGVuCnNwYWNlIHRlbGVzY29wZQpmYW50YXN5IHRoZW1lCnN0eWxlIG9mIGRyYWdhbiBiaWJpbgpkZW1vbmVzcwpzbGFzaGVyCmhvcGVsZXNzIGdyZXkKYSBkYXViIG9mIGNvbGQgYmx1ZQppbnRyaWNhdGUgYW5kIGJlYXV0aWZ1bCBkZXRhaWxzCjMvNCBwcm9maWxlCmRyZWFteSBzb2Z0IG5lb24gbGlnaHRzCmV4dHJhdmFnYW50IGZlYXRoZXJlZCBjb2xsYXIKZmlyZWFybXMgcGhvdG9ncmFwaHkKb24gdGhlIGJhdHRsZWZpZWxkCm5lYXIgaGlzIGJhcnJlbCBob21lCjlrCnRyZWUgaG91c2UKbXlzdGljIGV5ZXMKYmVhdXRpZnVsIHBvbGFyb2lkIHBob3RvCmdyZWVrIHN0YXR1ZQpkb2cgYXMgYSBnb2QKZG9uYWxkIHRydW1wIGFzIHN1cGVybWFuCmZhbnRhc3kga3Vuc3QKYXJjaGl0ZWN0dXJlIG15c3RlcnkKd2FzaGluZ3RvbiBkYwpkb3JhbgpvbGQgdmlsbGFnZQpkcmVhbSB3b3JsZApkcmVhbWxhbmQKc2VjcmV0IGN5cGhlcgpzbG9wZWQgc2l0ZQpjb3NtaWMgaG9ycm9yISEhCmR1YSBsaXBhCmV4cGxvc2l2ZSBiYWNrZ3JvdW5kCmNvbW1vbmVyCnNoYWRvd3kgZmlndXJlcwpwZW9uaWVzCmluIHRoZSBncmFzcwp2aWJyYW50Li1oIDcwNAp0cnVlIGNvbG9yCmJpb2x1bWluZXNjZW50IGxpZ2h0aW5nCmVpZmZlbCB0b3dlciBwaG90b2dyYXBoeQpmb29kIHBob3RvZ3JhcGgKKGN5YmVycHVuayAyMDc3KQpnb2xkZW4gZmlyZSBwYWxldHRlCmJhY2sgdG8gdXMKODBzIGhhaXIKZ3JlZW4gc2NyZWVuIGJhY2tncm91bmQKZWxsZSBmYW5uaW5nIGFzIGFuIGFuZHJvaWQKZmlzaGV5ZSBlZmZlY3QKMTBtbSBjYW1lcmEKd2VhcmluZyBibGFjayByb2JlCmZ1bGwgc3VpdCBvZiBnaWxkZWQgcGxhdGUgYXJtb3IKbGlsaWFuYSB2ZXNzCmluc2lkZQplc2NoZXJpY2hpYSBjb2xpCmdlb3JnZQpibG9vZCB0aGlyc3R5CmV2aWwgYXVyYQpjbG91ZHkgc2tpZXMKcGx1bWUgbWFkZSBvZiBnZW9tZXRyeQpiYW5uZXIKc21va2VzCnJ1aW5lZCBjaXR5CnJhcHVuemVsCmNoYXJhY3RlciBzY3VscHQKYmx1ZSBjbG91ZHkgc2t5Cm1vcm5pbmcgZ2xvdwpkZXJyaWVyZQphcnQgZGVjbyBzdGFkaXVtCm9uIGEgcm9jawpnb2xkZW4td2hpdGUgcm9iZXMKd2VhcmluZyBhIHN0cmljdCBidXNpbmVzcyBzdWl0CnRpbHQgc2hpZnQgbGVucwpzdW5zZXQgd2FybSBzcHJpbmcKZmxvd2luZyBsZXR0ZXJpbmcKYmx1ZSBhbmQgd2hpdGUgY29sb3Igc2NoZW1lCm5vIHNoaXJ0CnZlbnRpbGF0aW9uIHNoYWZ0cwppbnNpZGUgYSBiYXIKY29zbWljIHRyZWUKZ3ltCmZvcmJpZGRlbiBjaXR5CnJvc3NldHRpCmNhcnRvb24gc3RpbGwKa2F3YWlpIGFlc3RoZXRpYwpjcmltc29uIGhhaXIKbWFrZS11cAphbmdlbCBpcyBzcGxpdCBpbiB0d28gd2l0aCBzbW9rZQp3YXRlciByaXBwbGVzCmhvbHkgYXJtb3IKbXlzdGljYWwgb2lsIG9uIGxpbmVuCmZlbWFsZSBzdXBlcmhlcm8gcHJvcG9ydGlvbnMKYW1vbmcgdGhlIGNsb3VkcwpsZWF0aGVyIHRoaWdoLWhpZ2ggYm9vdHMKZnV0dXJpc3RpYyBtYXJyYWtlY2gKbG93IHNob3QgY2FtZXJhIGFuZ2xlCjRrIGRldGFpbGVkIGFydApjZW50cmFsIGh1YgpwbGFuZXQgaW4gdGhlIHNreQpzbmVlcmluZyBhdCB0aGUgY2FtZXJhCnVuaXZlcnNhbAp3aGlybHBvb2wKaHNpYW8tcm9uCmdhcmZpZWxkIHRoZSBjYXQKZ2FyeSBidXNleQplbGVnYW50IHN1aXQKYmVhdXRpZnVsIG1ha2V1cApodWJibGUgcGhvdG8gYmFja2dyb3VuZApnZXJtYW4Kd2lkZSBhbmdsZSBsYW5kc2NhcGUgcGhvdG9ncmFwaHkKcHJvZHVjdCBwbGFjZW1lbnQKYW5jaWVudCBhcmNoaXRlY3R1cmUKOGsgaGlnaCBxdWFsaXR5Cm9yYW5nZSByZWQgYmxhY2sgd2hpdGUKdW5jcm9wCmJlYXV0aWZ1bGx5CjI0IG1tIHNob3QKZHJhZ29uIGZhbmdzCmhlcm9pYyBwb3J0cmFpdApvcmllbnRhbCB3YWxscGFwZXIKc3RhcnMgaW4gaGVyIGdhemluZyBleWVzCjkwcyBjYXJ0b29uCmJlaW5ncyBvZiBhc3RvbmlzaGluZyBzdHJ1Y3R1cmUKZ29sZGVuIGVhcnJpbmcKZWFybmVzdAp3YXJmYXJlCnNjYXJ5IGxvb2sKc2VhIGNyZWF0dXJlCnJvYm90IGRlc3RydWN0aW9uCmJ1bGx5aW5nCmdvcmdlIGluIHRoZSBtb3VudGFpbgpoaWdobHkgb3JuYXRlCnNob3RndW4KbmFycm93IGRlcHRoIG9mIGZpZWxkCmRlc2F0dXJhdGVkIQpoLnIuIGdpZ2VyIGRlc2lnbiBvZiBpcm9uIG1hbgpzaGF1biB0YW4gYW5kIHBldGVyIG1vaHJiYWNoZXIKaW4gc3R5bGUgb2YgZ2hpYmxpCnBsdXNoaWUKZmlyZSByZWFrIHJlYWwgbGlmZQptaWNyb3Bob25lcwpmbGV4aWJsZSBjaGFyYWN0ZXIgY29kZQpoZS1tYW4hISEhIQpleHBvc2VkIHRoaWdocwpub2lyZQpkZWZpbmVkIG11c2NsZXMKaGlnaCBzcGVlZCBjaGFzZQpoaWxsCmJlYXV0aWZ1bCBoYW5kc29tZSBib2R5Cm1hdGhlciBicm93bgptYXggZGV0YWlscwpjcm93ZGVkIGNpdHkKd2lkZSBmb3YKcGVyc29uYSA1IHN0eWxlCmZvZyBhdG1vc3BoZXJlCnNvZnQgYmx1ZSBsaWdodGluZwp0aGUgY2l0eSBpcyBvbiBmaXJlCmlsbHVtaW5hdGkgZXllCmRlYXRoIGluY2FybmF0ZQphY3JvYmF0aWMKdHYgc2NyZWVucwptaW50Cmlzc2V5IG1peWFrZQprb3JlYW4gYXJ0aXN0CnRob3RoCmljYXJ1cyBmYWxsaW5nIGZyb20gdGhlIHNreQphZ2FpbnN0IGEgZGVlcCBibGFjayBiYWNrZ3JvdW5kCmxvbmcgZmxvd3kgaGFpcgp3ZWFyaW5nIGEgdHVyYmFuCmluIGEgZm9nZ3kgb2ZmaWNlCmRpZmZ1c2lvbgppbmZlY3RlZCBtdXNocm9vbQpmYWNpYWwgY2xvc2V1cAppbnF1aXNpdGlvbgplbWVyZ2VuY3kKaWtlYSBtYW51YWwKZ2lsZGVkIGdvbGQKdm9pZCAxYQppbnRyaWNhdGUgd2hpdGUgZHJlc3MKaW5jCmxpZ2h0IGdyZWVucyBhbmQgd2hpdGVzCmJsYWNrIG1lc2EKaXRhY2hpIHVjaGloYQptb2Rlcm4gZGF5CmZpbmUgbGluZQpzY2VuZSBmcm9tIHRoZSBmaWxtCmFmcmljYW4gbWFuCmJsb29keSBmYWNlCnBhaW50IHNwbGF0dGVyCmZpbmUgZHVzdAphYnN0cmFjdCBkZXNpZ24KaHlwZXJkZXRhaWxlZCBtYXR0ZSBwYWludGluZwpqZXJlbXkgY2xhcmtzb24KamVyZW15IG1hbm4gYXJ0CnBzeWNobwpkYWlkbyBtb3JpeWFtYQp3aGl0ZSBub2lzZQpmdW1vCmppbnggZnJvbSBhcmNhbmUKdmlicmFudCBidXQgZHJlYXJ5CmpvZG9yb3dreSdzIGR1bmUgbW92aWUKam9lIGJpZGVuIGFzIGNhcHRhaW4gYW1lcmljYQpzbXVkZ2UKdGVhbCBzdWl0CmpvaG4gY2FydGVyIG9mIG1hcnMKam9obm55IGJyYXZvCnNuYWtlIG9pbAp0YWJsb2lkCnN0b3JteSBza2llcwpub3QgcnVpbnMKcnVpbmVkIGtpbmdkb20KcGFub3JhbWljIHNob3QKc2NyZWVuc2hvdCBmcm9tIGEgMjAxMnMgYW5pbWUKc3RhciBza3kKamFwYW5lc2UgYXJ0IHN0eWxlCmd0YSB2IGdhbWVwbGF5IHNjcmVlbnNob3QKam91cm5hbGlzbQphcCBwaG90bwpzdHlsZSBmaWxtCjUwbW0gZm9jYWwgbGVuZ3RoCmxlbnMKa2ltIHdleGxlcgpraXJpc2FtZSBtYXJpc2EKc3BhY2UgZmFudGFzeQpjb2xvciBsaWdodApkYW5jZSBzY2VuZQprdWJyaWNrIHN0YXJlCnN0YW5pc8WCYXcgc3p1a2Fsc2tpICsgbW9lYml1cwpreWxpZSBqZW5uZXIKYXJnZW50aW5hIHByZXNpZGVudGlhbCByYWxseQpzdHJhbmdlIGZsb3JhCmJsb29kIGRyaXBwaW5nCmRvbmF0bwpyb3NzIGFuZCBhaXZhem92c2t5CmhpZ2hseSBkZXRhaWxlZCA0awpmbGFzaHkKam9obgpsZWdvIGNoYXJhY3RlcgpsaWdodCBmcm9tIHJpZ2h0Cm1vcmUgZGFya25lc3Mgb24gdGhlIGJvdHRvbQptaW5lcwptYXJrZXIKd2llbGRpbmcgYSBkYWdnZXIKZG9vbSBldGVybmFsIGNvbmNlcHQgYXJ0Cm5ldGZsaXggc2VyaWVzCmF0IG5pZ2h0IHdpdGggbmVvbiBsaWdodHMKZXZpbCBmYWNlCnNvZnQgbGlnaHQgYXRtb3NwaGVyZQpuZW9uIHZvbHVtZXRyaWMgbGlnaHRzCmJ1c3R5CnNvbWUgdHJlZXMKZHZkIGNvdmVyCm1haSBzaGlyYW51aQpzaXR0aW5nIG9uIGNoYWlyCmFlc3RoZXRpYyEhISEhIQptYXJnb3Qgcm9iYmllIGFzIGEgZ3JlZWsgZ29kZGVzcwptYXJ0aW4gbHV0aGVyIGtpbmcKd2FybSBnbG93IGZyb20gdGhlIGxpZ2h0cwpzbXVnIGFwcGVhcmFuY2UKbWF4IHBheW5lCmlzZWthaQpmaXJlbGlnaHQKdGhpcyBpcyBpdAptaWNyb3NvZnQgcGFpbnQgYXJ0Cmxvb2tpbmcgdGlyZWQKbWlsbGVubml1bSBmYWxjb24KYnVpbGRpbmcgb24gZmlyZQpzY3JlZW5wcmludAp3ZWFyaW5nIGEgZ2FzIG1hc2sKbW9vbiBrbmlnaHQKbW9zZXMKbW91c2UgZ3VhcmQgc2l0cyBvbiBhIHN0dW1wCnN1cGVyIHNvcGhpc3RpY2F0ZWQgdGV4dHVyZQptb2d1bCBraGFuCm11c2hyb29tIGhvdXNlCmhhbG8gYXJrCm5hdHVyZSBnb2RkZXNzCnVsdHJhIGhkIHJlbmRlcgpuZW8gZnJvbSB0aGUgbWF0cml4CmN1YmEKc3R1bm5pbmcgbGluZXMKbnlhbiBjYXQKdWx0cmEgcmVhbGlzdGljIG1hc3RlcnBpZWNlCmVwaWMgbGlnaHRzCmFyY2hpZSBjb21pY3MKMTgwMAptaW5kLWJsb3dpbmcgZGV0YWlscwpzdXBlcmJpYQpkZWZpbmVkIHVwcGVyIGJvZHkKdml2aWQgYmx1ZSBleWVzCm9sZCB3b21hbgp0aW0gYm9vdGgKb24gYSBkZXNrCm9uY2UgdXBvbiBhIG1pZG5pZ2h0IGRyZWFyeQpvbmUgdGhvdXNhbmQgeWVhcnMgb2YgbG9uZ2luZwp0aHJlZQpzdGFpbmVkIGdsYXNzIHdpbmRvdyBnZW9tZXRyaWMKc3ltbWV0cmljYWwgZmFjZSBvcmVsc2FuCmV4dHJlbWUgaGlnaCBkZXRhaWwKbWVnYXN0cnVjdHVyZSBpbiB0aGUgYmFja2dyb3VuZApwYWRtZSBhbWlkYWxhCnN1cmVhbApyZWFsaXN0aWMgcGVvcGxlCmJhbmdsYWRlc2gKaHlwZXJyZWFsaXN0aWMgM2QgZGlnaXRhbCBhcnQKbXlzdGljYWwgbGlnaHRzCnBhcmFub2lkIGFuZHJvaWQKYWZybyBmdXR1cmlzbQpwZWludHVyZSDDoCBsJ2h1aWxlCnBlbnNpdmUgd2l6YXJkIGV4YW1pbmluZyBlZ2dzCjIwMTUgY2luZW1hdG9ncmFwaHkKZGlzZWFzZQpwZXRlIGRhdmlkc29uCmxhcmdlIGNoZXN0CnNwYXJ0aCBzdHlsZQpoYXJkdHVybQpncm9zc23DvG5zdGVyCmx1eHVyeSBsaWZlc3R5bGUKdGhhbm9zIGFzIGZyb2RvIGJhZ2dpbnMKdmFuY291dmVyCmJyb3duIHdvb2QgY2FiaW5ldHMKbHVtaW5vc2l0eQp0aGluIGx1c3Ryb3VzIGhhaXIKamFja2FsIHNrdWxsCnRhYmxlIGxpZ2h0CnBpY3R1cmUgb2YgZmVtYWxlIHBhbGFkaW4KbWV0YWxsaWMgcmVkCmJlY2F1dGlmdWwgZmFjZQphcnRnZXJtIGFuZCBnZW56b21hbgphcm1mb2xkIHBvc2UhCnBpY3R1cmUgb2YgYSBtYWxlIGNsZXJpYwpjaW5lbWEgcXVhbGl0eQpwaWx0b3ZlcgpwaXR0c2J1cmdoCnBpeGFyIG1vdmllIHN0aWxsCnBpeGl2IGZyb250cGFnZQpwbGFuZXQgb2YgdGhlIGFwZXMKNjVtbSAxLjV4IGFuYW1vcnBoaWMgbGVucwpyZW5kZXJpbmcgdW5yZWFsIGVuZ2luZSA1CnBlcmZlY3Qgc21pbGUgYW5kIHRvb3RoCnBvcnRyYWl0IG9mIGFuYSBkZSBhcm1hcwpuaW1idXMKcG9ydHJhaXQgb2YgY3RodWxodQpwb3J0cmFpdCBvZiBmbG9yZW5jZSBwdWdoCnBvcnRyYWl0IG9mIGdvcmRvbiByYW1zYXkKYSBnbG93aW5nIGhhbG8KcG9ydHJhaXQgb2YgbXIgYmVhbgpwb3J0cmFpdCBvZiBuaW5qYSBzbGF5ZXIKcG9ydHJhaXQgb2YgcG9jYWhvbnRhcwpwb3J0cmFpdCBvZiBzaHJlawpwb3J0cmFpdCBvZiB0cnVtcApzb3VsZnVsIGV5ZXMKZGF6M2QgZ2VuZXNpcyBpcmF5IHNoYWRlcnMKbHV4dXJpb3VzIG5lY2tsZXNzCmFkJmQKbGF0ZXggZHJlc3MKYW50aXF1ZSBzdHlsZQpwb3J0cmFpdCBvZiBhIG1hZ2UKc2hvcnQgYnJvd24gaGFpciB3aXRoIGJhbmdzCnN0cm9uZyBhbmQgdGFsbApjb25ub3IgaGliYnMKcmVkIGJyYQpwb3J0cmFpdCBvZiBhbiBvcmMgd2FycmlvcgpjbGFpcmUgd2VuZGxpbmcKcGFzdGVsIGJsdWUgZXllcwpwb3NlZCBpbiBwcm9maWxlCnByZWNpb3VzIGdlbXMKc3R1bm5pbmcgZGV0YWlscwpmdWxseSBjbG90aGVkIGluIGFybW9yCmdpZ2FudGljIGNyZWF0dXJlCm1pc2VyYWJsZQphcm1vcmVkIHVuaXRzCmNvbnRyYXN0IGNvbG9ycwpyYWZhZWwgYWxidXF1ZXJxdWUgYXJ0CmRhcmsgZm9yZXN0IGluIHRoZSBiYWNrZ3JvdW5kCm9uIGEgcGlyYXRlIHNoaXAKcmF0Y2hldCBhbmQgY2xhbmsKaW50ZXJuZXQKZGV2aWNlcyBhbmQgaW5zdHJ1bWVudHMKYnVubnkgZWFycwpyb2JlZCByZW5haXNzYW5jZSBzY2hvbGFyCnJlbmRlciBvZiBhcHJpbApwcm91ZCBzbWlsZQpzcXVhcmUgcmltbWVkIGdsYXNzZXMKY2F0c3VpdAptb3NoIHBpdApjaW5lbWF0aWMgbGlnaHRpbmcgaCA3MDQKYmx1ZSBtb29uIGxpZ2h0CmdveWEgcGFpbnRpbmcKZXBpYyBiYXR0bGUgc2NlbmUKdmFkZXIKZGFyayBoZWxtZXQKZnJvbSBkb29tCnJvbmFsZCByZWFnYW4Kcm9yc2NoYWNoCnJ1cGVydCBtdXJkb2NoIGFzIHRoZSBqb2tlcgpzdHVjayBpbiBtdWQKZmlyZSBpbiBiYWNrZ3JvdW5kCndpZWxkaW5nIGEgYm93CnQtcmV4CnNjaS1maSBjcm9jb2RpbGUgYWxpZW4Kc2NpLWZpIGhvcnJvciBhcnR3b3JrCmN5YW4gYXRtb3NwaGVyZQpzcG9vbiBzbGltIGZpZ3VyZQpqYXBhbmVzZSB3YXJyaW9yCnBvbnkgdGFpbApnYXNsaWdodApzaGliYSBpbnUgY29zbW9uYXV0IHBvcnRyYWl0CnNob3QgaW4gdGhlIGFpcgpzaWdvdXJuZXkgd2VhdmVyCmdob3VsCnRoZSBtb3VudGFpbiBpcyBzdGVlcAptZWxhbmNob2xpYyBtb29kCnNrZWxldG9uIGtpbmcKY3J5cHQgbHVya2VyISEKc29maWEgdmVyZ2FyYQpleHRyZW1lIHJlYWxpc3RpYwpzb21icmEgZnJvbSBvdmVyd2F0Y2gKcHJvZmZlc2lvbmFsCmJlZm9yZSBhbmQgYWZ0ZXIKc3BvY2sKI2NhbWVsZGVhdGgKc3RhbGtlcgpnZWFyIGhhbG8KbWV0YWxsaWMgYnJvbnplIHNraW4KY2xhc3NpZmllZApsaWx5CmluIHRoZSBtb3ZpZSBibGFkZSBydW5uZXIKeGVub2dlYXJzCmZpcmUgZXNjYXBlcwpyZWQgb24gYmxhY2sKc3R5bGlzaCBjb2F0IGZvciBhIHJhdmUKc3R1ZGlvIGdpYmxpCnN1bnJpc2Ugb3ZlciBzb2xhcnB1bmsgY2l0eQpnb2xkIGhhaXIKdmljdG9yaWFuIGxvbmRvbgppbiBzdHlsZSBvZiBjaGFybGllIGJvd2F0ZXIKd2VsY29tZSB0byB0aGUgbWF0cml4CmFsaWVuIGNpdHlzY2FwZQpob2xseXdvb2Qgc3RhbmRhcmQKaGFuZCBvbiBoaXAKZnJhbmsgaGFtcHNvbgpib2tlaC4gYnJpYW4gc3BpbG5lcgpmb3Jib2RpbmcKdGhlIGlyb24gdGhyb25lCmNvdmVyZWQgd2l0aCBzbm93CnRoZSBraW5nIG9mIHRoaWV2ZXMKY2VudGVyZWQgYW5kIHN5bW1ldHJpY2FsCnRoZSB0b3dlciB0YXJvdCBjYXJkCm9yYW5nZXMKdGhlIGFuZ2VsIG9mIGRlYXRoCnRoZSBiZWdpbm5pbmcgb2YgdGhlIHVuaXZlcnNlCmdhbGF4eSBpbiB0aGUgYmFja2dyb3VuZApyZWQgcGFsZXR0ZQpncmFmZml0aSBvbiB0aGUgd2FsbHMKd2VuZGlnbwpmYWxsaW5nIHN0YXIgb24gdGhlIGJhY2tncm91bmQKZ2xvd2luZyBleWVzIGV2ZXJ5d2hlcmUKY2xlYW4gc3R5bGUKYmVraW5za2kKcGFpbnRpbmcgYnkgam9obiBob3dlCnRpbWUgdHJhdmVsZXIKc21hbGwgbG9saSBnaXJsCnRpbmtlcmVyCmhlcmdlCmRpZ2l0YWwgY2hhcmFjdGVyIGFydAp0b3dlciBicmlkZ2UKZ2xhc3MgZmxhbWUKZm9hbXkgYnViYmxlcwpzYXRlbGxpdGUgcGhvdG8KdHVwYWMgc2hha3VyCjE5ODBzIHJvbWFuY2UgYm9vayBjb3Zlcgpmcm9tIHR3aW4gcGVha3MKdHdvIGFuaW1lIGhhbmRzb21lIG1lbgp0aGUgd29ybGQgb24gZmlyZQp0d28gZ2lybHMKdG9uYWxpc20gaWxsdXN0cmF0aW9uCndpdGggYSBjb29sIHBvc2UKaW50cmljYXRlIHZvb2RvbyBtYWtldXAKZnV0dXJpc3RpYyBzbmVha2VycwpkZW1vbiBob3JuCmluIGEgY3Jhc2hlZCBzcGFjZXNoaXAKdW5jbGUgYWxveXNpdXMKZ2xvb215IGxhbmRzY2FwZQpyZXBlYXRhYmxlCmRlbm9pc2VkIHBob3RvcmVhbGlzdGljIHJlbmRlcgp0cmVuZGluZyBwaG90bwp2ZXJ5IG5vaXN5CnZpY3RvcmlhIGp1c3RpY2UKdm9sY2FuaWMgZXJ1cHRpb24Kd2FrZSB1cApuaWdodCBsaWZlCm1hZ2ljYWwgZW52aXJvbm1lbnQKYmVhdGlmdWwKY2FuZHkgbGFuZAp3aGl0ZSBtYW4Kd2hpdGUgbXVnCm5vIG51ZGl0eQpibGFja2hvbGUKd2VhcmluZyBsZW90YXJkCmRhbmJvb3J1IGFuZCBhcnRzdGF0aW9uCmJsYWNrIGdsb3ZlcwppbiBsb3cgZm9nCnN1cHJlbWUKY2VsbCBzaGFkZXIgc2hhZGluZwpidXQgd2l0aCB0aGluCmJsdW50IGJhbmdzIGZhbGwgb24gaGVyIGZvcmVoZWFkCnNwbGl0IG5lYXIgdGhlIGxlZnQKaGFzIGhvcm5zOiBhIHNoYXJwCndoaXRlIGluIGNvbG9yCmV5ZXMgYXJlIGxhcmdlCmVuY29tcGFzcyB2aW9sZXQgaXJpc2VzCnRyaW1tZWQgd2l0aCBhIHdoaXRlIHN0cmlwZQppbmsgb24gY2FudmFzCnppbmUKWyA0IGsgc3ludGh3YXZlIGFydCBzdHlsZSBdISEKcmVhbGlzbSBhcnQgc3R5bGUKcGhvdG9ncmFwaHldCnRocmVlIHBvaW50IGxpZ2h0CnRvbGtpZW4gYW5kIG1pY2hhZWwga29tYXJjawpoaWdoIHF1YWxpdHkgYWN0aW9uIHBob3RvZ3JhcGh5CmRpZ2l0YWwgYXJ0IGlsbHVzdHJhdGlvbgpzdGFuZGluZyBvbiBhIGJlYWNoCmNpcmNhIDEgOSAyIDQKdmVyeSBkYXJrIHNoYWRvd3MKbmlnaHRtYXJlIHNjZW5lCmFydGh1ciBhbmQgZ3VzdGF2ZSBiYXVtYW5uCjIgNSB5bwpkYXJrIHBhaW50CndoaXRlIGJhY2tyb3VuZAppbnRyaWNhdGUgbXljZWxpYWwgbGFjZQp3ZWFycyBhIHNwYWNlc3VpdApwb3B1bGFyIG9uIHNrZXRjaGZhYgpwaXhlbHNxdWlkCmhlIGlzIGRhbmNpbmcKbG93IGR1dGNoIGFuZ2xlCmFtYXppbmcgZGl0aWFsIGFydAptYXJrIHJ5ZGVuIGFuZCBsaXNhIGZyYW5rCnJlZnJlc2hpbmcgY29sb3VyCnBpZ3RhaWwKZ29sZCBjbG90aGVzCnN0cmFpZ2h0IGJsYWNrIGhhaXIKc2lnbWEgODVtbSBmMS40IGRnIGRuCmFwZXJ0dXJlIGYvMTEKZXhwb3N1cmUgMS8yMDAKc25vb3AgZG9nZyB0ZW5uaXMgYmFsbCBtb25zdGVyCnZpZXdlZCBmcm9tIGJlbGxvdwpbIGdvbGRlbiByYXRpbyBdISEKc2NhciB1bmRlciBsZWZ0IGV5ZQp3ZWFyaW5nIGEgYm9uZSBnYXMgbWFzawpsZWdlbmRlcnkKamVsbHkgLSBsaWtlIHRleHR1cmUuIHBob3RvZ3JhcGgKZ2xhbW9yIHByb2ZpbGUgcG9zZQpteXN0aWNhbCBsaWdodGluZwp0aWdlciBzdHJpcGVzCmNzcAp0LXNoaXJ0CmJpb2hhY2tpbmcKcGhvdG8gYXJ0CnNoaW5rYWkKcGFuYXNvbmljCnBpbmsgYW5kIHllbGxvdwpqZWZmIGVhc2xleSBhbmQgcm9zcyB0cmFuCmJlZ2lubmVyIGFydApkYXJrIGxpZ2h0bmluZwptb2Rlcm4gY2xvdGgKbGlnaHQgc291cmNlIGZyb20gdGhlIGxlZnQKaGFwcHkgY29sb3JzLiByb2IgZ29uc2FsdmVzCnNvY2lldHkKaW4gYSB0cmVlCmxvbmcgaGFpciB3aW5keQpjZyByZW5kZXJpbmcKZm9yZ290dGVuIHZhbGxleQpsdSBqaQphY2FudGh1cwpzcG9yZXMgZmxvYXRpbmcgaW4gdGhlIGFpcgpzeW1tZXRyeSBjb21wb3NpdGlvbgpiYWNrZHJvcCBvZiBkYXduCnRhbm5lZCBib2R5CndoaXRlIGFuZCB5ZWxsb3cgc2NoZW1lCvCfjbjwn42LCmZ1dHVyZSBsb2NvbW90aXZlIHN0eWxlCnZpb2xlbmNlIGluIGhpcyBleWVzCnNvZnQgbGlnaHRpbmcgOCBrIHJlc29sdXRpb24KemVuIGdhcmRlbgpyZWFsaXN0aWMgcGh5c2ljYWwgcmVuZGVyaW5nCmxvb2tpbmcgYXQgaXQgcmV3YXJkcyB0aGUgc291bApleHBsb3Npb24gb2YgY29sb3JzCmVsZWN0cmljaXR5IGhpZ2hseSBkZXRhaWxlZApiZWF1dGlmdWwgZGV0YWlsZWQgaW50cmljYXRlCm1hcmMgc2ltb25ldHRpLiBpbnRyaWNhdGUKZHVyaW5nIGEgYmxvb2QgbW9vbgpiYXJvcXVlIGNvbG9yIHBhbGV0dGUKZGVhdGggdmFsbGV5CmRyYWdvbmZsaWVzCmNoZWVrcwpzb21lIHRyZWVzIGluIHRoZSBjb3JuZXIKcmVhbGlzdGljIHNoYWRlZCBsaWdodGluZyBwb3N0ZXIKYXJ0Z2VybSBhbmQgYXRleSBnaGFpbGFuCmJsdWUgYW5kIGJsYWNrIGNvbG9yIHNjaGVtZSkpCmRlZXBseSBvcm5hdGUgY29tcGxleGl0eQpjb21wbGV4IGZhbnRhc3kgY2hhcmFjdGVyCmNvbG9yIGxlYXZlcwp3YXluZSBiYXJsb3dlIGFuZCBqYW1lcyBnaWxsZWFyZAppc2xhbmQgYmFja2dyb3VuZAp3ZWFyaW5nIHdoaXRlIHN1aXQKdGltCmNvbWljIGxpbmVzCnJvc3MgdHJhbiBhbmQgYmF5YXJkIHd1CmFpcnkgbWlkbmlnaHQgdGhlbWUKb2lscyBvbiBjYW52YXMKc3VycmVhbCBkcmVhbXkgcG9ldGljCnNpZGUgcHJvZmlsZSB2aWV3CmFuaW1lIGFydCB3YWxscGFwZXIgNCBrCnRveGljIHNsaW1lCnRveGljIGFpcgpyb3VnaCBzZWEKbWFqZXN0aWMhISEgYmVhdXRpZnVsISEhCidpZiBhbGwgY2FuIGJlZ2luIGFnYWluCmVtaXNzaXZlCmZhaW50IHZvbHVtZXRyaWMgZ29kIHJheXMKZ3JpbSBjcnVzaGluZyBhdG1vc3BoZXJlCmxvdHMgb2Ygc2FrdXJhIGZsb3dlcnMKaGVhdmVubHkgZ2xvdwpsaWtlIGFsaWNlIGluIHdvbmRlcmxhbmQKcHJvdWQgbG9vawooICggdmlicmF0aW5nIGNvbG9ycyApICkKZXBpYyBzY2FsZSBmaXNoZXllIHZpZXcKZHpvCmF3ZXNvbWUgY29sb3IgcGFsZXR0ZQpiZWF1dGlmdWwgZmxvd2VyCm1lcm1haWQgaW4gZGlzdGFuY2UKMTk3MCcKYmlvbHVtaW5lc2NlbnQgcGxhbnRzCnRyYXZpcyBjaGFyZXN0IHN0eWxlCnJlYWxpc3RpYyBwaG90b2dyYXBoeSBwYWxlb2FydAptYWplc3RpYyBjbG91ZHMKZ2l2aW5nIHRoZSB0aHVtYnMgdXAKd2luZ2VkIHZpY3RvcnkKcmFpbHJvYWQKd2hpdGUgd2F0ZXIgcmFwaWRzCnN1bnNldCBnb2xkZW4gaG91ciBodWVzCnBvbGFyaXplZCBsZW5zCnRpbWVsYXBzZQooIGlseWEga3V2c2hpbm92ICkKc2luaXN0ZXIgZGFyayBmYW50YXN5Cm52aWRpYSBvcHRpeApibGFkZSBydW5uZXIgY2l0eSBiYWNrZ3JvdW5kCmV4dHJlbWVseSByZWFsaXN0aWMgZmFjZXMKcGhhbnRhc3kKYnJvd24gaGFpcmVkCmRhcmsgc29yY2VyZXNzCmRhcmsgZm9yZXN0LiBzdHJvbmcKbWFyayBicm9va3MgYW5kIGJyYWQga3Vua2xlCnlhbmcgcWkKbWpvbG5pciBhcm1vciBmcm9tIGhhbG8gaW5maW5pdGUKb3RveSBvY3RhbmUKZiAvIDQKZG9vbSBpbnNwaXJlZAphdCBub29uCmR5bmFtaWMgYWN0aW9uIHNob3QKbWFkZSBvZiBydWJiZXIKaGFubmEgYmFyYmVyYQpncmF2aXRhdGlvbmFsIGxlbnMKcmVhbGlzdGljIGZpcmUgc2hhcnAgZm9jdXMKYXJ0IHN0YXRpb24gbGFuZHNjYXBlCmxlZCBsaWdodCBzdHJpcHMKbWluaW1hbGlzdGljIGJhY2tncm91bmQKaW50cmljYXRlIHJvb3RzCmhhcHB5IHRyaXBweSBtb29kCndpdGggYSByb29mIHJhY2sKY2Fub24gOCAwIG1tCmF0aG1vc3BoZXJpYwpnbG9zc3kgcGxhc3RpYwpoeXBlciByZWFsaXN0aWMgZGlnaXRhbCBhcnQKYXdhcmQgd2lubmluZyBmb29kIHBob3RvCigoKHZvbHVtZXRyaWMgbGlnaHRpbmcpKSkKaGVhZHNwYWNlCnNtb290aCBkaWdpdGFsIGNvbmNlcHQgYXJ0CnN1YiAtIHN1cmZhY2Ugc2NhdHRlcmluZwplcGljIGNvdmVzIGNyYXNoaW5nIHdhdmVzIHBsYW50cwpsZWljYSBtIDYKaW4gdW5yZWFsIGVuZ2luZQptZXRhbCBhd2FyZCB3aW5uaW5nCmd0YSBjb3ZlcgppbiBmb2dneSBmb3Jlc3QKYml0Y29pbgpxdWlya3kgc2hvcHMKZGVlcCEhISEhCnNwYXJrbGluZyBkZXcKaW4gYSBzdHJlZXQKYmx1ZSBtYWdpYwppbnZpdGF0aW9uIGNhcmQKaGFuZHdyaXRpbmcgdGl0bGUgb24gdGhlIGxlZnQKcG9zdGVyIHRlbXBsYXRlIG9uIGNhbnZhCm1hZGUgb2YgbGVhZiBza2VsZXRvbgp2ZnggcmVuZGVyCmh5YnJpZCBjcmVhdHVyZQpiZWF1dGlmdWwgY2F0CmZ1bmN0aW9uYWwKc3VycmVhbCBwb3J0cmFpdCBwaG90b2dyYXBoeQpibHVlIHNreSBpbiB0aGUgYmFja2dyb3VuZApwZXRlIG1vaHJiYWNoZXIKc2hhZGVzIG9mIGdyZXkKbGlrZSBhbmR5IGxhdQp3aXRoIGEgZmV3IHZpbmVzIGFuZCBvdmVyZ3Jvd3RoCnNocmluZXMKd29vZGVuIGZyYW1lCmFuYWdseXBoIGxpZ2h0aW5nCmluIGEgc2VyZW5lIHZhc3QgZGVzZXJ0CmZpZWxkIG9uIGZpcmUKKCgoKGxpZ2h0bmluZykpKSkKZGVjZXB0aWNvbiBhcm1vciBwbGF0aW5nCmZvcmVzdCBncmVlbgpiZWF1dGlmdWwgY3VydmVzCnVudXN1YWwgY29tcG9zaXRpb24KYmVlcGxlIHN0eWxlCnJhaW5ib3cgZGlmZnJhY3Rpb24KY2FycyBvbiB0aGUgcm9hZAphd2FyZCB3aW5uaW5nIG5hdHVyZSBwaG90b2dyYXBoCmJyaWxsaWFudCBkZXRhaWwKaW4gcmVkIGFuZCBibGFjawpsZWdpYmxlIHRleHQKYXJtcyByYWlzZWQKd2l0aCBjb2J3ZWJzCmhvcnJvciBzZXR0aW5nCjJkIGRpZ2l0YWwgdmVjdG9yIGFydApydW5uaW5nIHRvd2FyZHMgdGhlIGNhbWVyYQpzbWlsaW5nIGV4cHJlc3Npb24KdGhlcmUgaXMgdGFsbCBncmFzcwpwaGVub21lbmFsIHBob3RvZ3JhcGh5CnNjcmVhbWluZyBhbmQgc2FkCmRyYW1hdGljIGJhY2tncm91bmcKd2hpdGUgc3RlZWwKZXBpYyBmYW50YXN5IGRpZ2l0YWwgYXJ0IHN0eWxlCmRpZ2l0YWwgYXJ0IHBpY3R1cmUKcG9zaXRpdmUgbW9vZAp2ZXJ5IGJhY2tsaXQKb3V0Zml0CnBhcGllciBjb2xsZQp3ZWFyaW5nIGEgZHJlc3Mgb2YgZ29zc2FtZXIgZ29sZApjYWJpbgp3YWxscGFwZXIgYXJ0CnNjaSAtIGZpIGFlc3RoZXRpY3MKbWFueSB0ZW50YWNsZXMKZHNsciAzIDUgbW0KYm93a25vdApqZXdlbCBlbWJlbGxpc2htZW50CmdsYXNzIG9yYnMKb2YgYSBmdXR1cmlzdGljIHNlbGsnbmFtCmRldGFpbGVkIDMgZCByZW5kZXIKYmFjayB0byBjYW1lcmEKaW5zZWN0aWxlIGZvcmVhcm1zIGZvbGRlZApzdGljawpiYWxscG9pbnQgcGVuCmNvbG9yZnVsIHdpbGRmbG93ZXJzCnNvbWUgaG91c2VzIGluIHRoZSBiYWNrZ3JvdW5kCnBob3RvY29weQphbWF6aW5nIGRldGFpbC4gY29sb3JlZApyb2NreSBkZXNlcnQKZHJpZnRpbmcgaW4gc3BhY2UKdmlldyBvZiB0aGUgb2NlYW4KYXdhcmQgLSB3aW5uaW5nIGRlc2lnbgpiZWFrIG9mIGFuIGVhZ2xlCmVlcmllIGhvcnJvcgpuYXRpb25hbCBnYWxsZXJ5CndpbGRsaWZlIHBob3RvZ3JhcGh5IGNhbm9uCmhpcyBoZWFkIGlzIGEgc2t1bGwKY29sZCBmcmVlemluZyBuaWdodHMKY3J5YmVybmV0aWMKYmVoYW5jZSBhd2FyZCB3aW5uZXIKaW5zcGlyYXRpb25hbCBhcmNoaXRlY3R1cmUKcmF5cyBvZiBnb2xkZW4gc3VubGlnaHQKZ3JlZyBydXRrb3dza2kgaGlnaGx5IGRldGFpbGVkCmNoaWhvCndpbnRlciBwYXJrIGJhY2tncm91bmQKd2VhcmluZyBmdXR1cmlzdGljCjMgZCBtb2RlbCByaXAKbW9vbmxpdCBiYWNrZHJvcAoxIDkgNSAwIHMgY29uY2VwdCBhcnQKcGl4ZWwgZ2FtZQprYXdhaWkgc2hpcnQgYW5kIGplYW5zCmJ1cnN0IG9mIGNvbG91cgprZXZsYXIKcmFua2VyCmZvdG9zY2FwZQpiZWFkcwp3YXJjb3JlCm1pY2hhZWwgd2hlbGFuIGFydAp3ZWF0aGVyIHJlcG9ydCBzdHlsZQppcmlkaXNjZW50CmRhcmsgYW5kIGJlYXV0aWZ1bApleHRyZW1lbHkgcGhvdG9yZWFsaXN0aWMKY2luZW1hdGljIGNvbG9yIHNjaGVtZQpzdHlsZSBvZiB6ZGlzbGF3IGJla3NpbnNraQptZXRhbGxpYyBicmlkZ2UKc3VycmVhbGNvcmUKdXJzIGZpc2NoZXIKZG1vbiB2cyBhbmdsZQpyZWQgZmx1aWQgb24gd2FsbHMgb2YgdGhlIGNodXJjaApicnVzaGVkIHJvc2UgZ29sZCBjYXIgcGFpbnQKdml2aWQgc2t5CmNpdHkgc2NhcGUKMzVtbSBjb2xvciBmaWxtCmRhcmsgc3RvbmUKYWN0aW9uIGFkdmVudHVyZSBzY2VuZQo4IGsgaW1hZ2UKaGVybWFubiBuaXRzY2gKYWVyaWFsIGlsbHVzdHJhdGlvbgpjb3ZlcmVkIHdpdGggb3JnYW5pYyBmbGVzaApkbmQgZW5jb3VudGVyCmRldGFpbGVkIDggNSBtbSBmIC8gMS4gNApwb3NpbmcgYXMgYSBxdWVlbgp3ZWFyaW5nIGEgZ3JlZW4gY2xvYWsKbWV0YWwgdGVldGgKanVuamkgaXRvIHVuZGVydG9uZXMKeWVhciAxIDkgMCAwCnN1bnJpc2UgYXRtb3NwaGVyaWMgcGhlbm9tZW5hCmN5YmVycHVuayBhcnRtCnNjaSAtIGZpIHdlYXBvbgp5b3VuZyBoYW5kc29tZSBwYWxlIHJvbWEKbWFnaWNhbCBmbG93ZXJzCmludHJpY2F0ZSBicnVzaCBzdHJva2VzCmRpbSBtb29keSBsaWdodGluZwpjaW5lbWF0aWMgc3R5bGUgcGhvdG9ncmFwaApncmFpbnkgZmlsbSBwaG90b2dyYXBoCnNtYWxsIHN0cmVhbQpuaWdodCBzdHJlZXQKd2l0aCBkYXJrIHRyZWVzIGluIGZvcmVncm91bmQKd2luZ3Mgb2YgZmlyZQphcnQgbm91dmVhdSBmcmFtaW5nCndpbGRsaWZlIGRyYXdpbmcKbG9vc2UgcGVuY2lsIHNrZXRjaApyYWxwaCBzdGVhZG1hbiBzdHlsZQprYW5nYXJvbwpmaXNoIC0gZXllIGxlbnMKcnVud2F5Cndhcm0gZnJpZW5kbHkgZmFjZQpyZXRyb2Z1dHVyaXN0Cm9ybmF0ZSBqZXdlbHMKdHJlbmRpbmcgb24gd2lraWFydApzaGUgaGFzIGxvbmcgb3JhbmdlIGJyb3duIGhhaXIKY29sb3JmdWwgcGFsZXR0ZQppbnNwaXJlZCBsb3JkIG9mIHRoZSByaW5ncwp3aXRoIHBhcGVyIGxhbnRlcm5zCm9uZSBwaWVjZSBzdHlsZQpjb2xvcmZ1bCBhbmQgcHN5Y2hlZGVsaWMKZ3J1bmd5IHN0ZWVsCnBpenphIGJveApkcnVua2VuIG1hc3RlcgpjYXN0aW5nIGEgZmlyZSBzcGVsbAp3ZWFyaW5nIHBsYWlkIHNoaXJ0CnRoaWNrIGFuZCB0aGluIGxpbmVzCndyaW5rbGVkIGZhY2UKYmlraW5pIGFybW9yCnJlc3RpbmcgYWZ0ZXIgYSBoYXJkIG1pc3Npb24Kd2F0ZXJjb2xvciB0ZXh0dXJlCmdhcG1vZSB5YW5kZXJlCmtvZGFrIHBvcnRyYSA4MDAKZHJhbWF0aWMgc3Vuc2V0IGxpZ2h0aW5nCmF0IGEgY3liZXJwdW5rIGNpdHkKZHJ5IGljZQpibGFjayBhcm1vciB3aXRoIHllbGxvdyBhY2NlbnRzCmZpc2hwZW9wbGUKd2l0aCB0cmltbWVkIGJlYXJkCm1hbiBwbGF5aW5nIGd1aXRhcgpmbG93IHZpc3VhbGl6YXRpb24KZWV5cmllCndlYXIgYW4gZWxlZ2FudCBtdXN0YWNoCndoaXRlIHNjYXJmCmNlbnRlcmVkISEhISEKc3R5bGUgb2Ygc2FsdmFkb3IgZGFsaQppcyBhdCBkYXduIGFuZCBibHVpc2gKdHJlZXMgaW4gZm9yZWdyb3VuZAp3aXRoIHBhbG0gdHJlZXMgYW5kIGNvbHVtbnMKbWljcm9zb2Z0IHdpbmRvd3MKcGFpbnRlZCBpbiB6YnJ1c2gKcmVuZGVyZWQgaW4gemJydXNoCm1ldGFsIGdlYXIgc29saWQgYXJ0IHN0eWxlCnVsdHJhIHJlbmRlcmVkCmNvc21pYyBjb2xvciBzY2hlbWUKa3JlbnogY3VzaGFydCBhbmQgYXJ0ZW0gZGVtdXJhCnByb2Zlc2lvbmFsIHBob3RvCmJpZyByZWQgbGlwcwpzbWlsZSBmYWNlCm1haW50ZW5hbmNlCnBob3RvIHByb2R1Y3QKb2YgYSBmdXR1cmlzdGljIHdvbWFuIHNlbGsnbmFtCnN0cmVldCBmaWdodGVyIGl2CmJpZyBoZXJvIDYKdWx0cmEgbWVnYSBkZXRhaWxlZApiZWF1dGlmdWwgcmVhbGlzdGljIHBob3RvCmN5YmVycHVuayBlbnZpcm9ubWVudAppbnRyaWNhdGUgd2lyZXMKZWxlZ2FudCBhcmNoaXRlY3R1cmUKZGlhbHMKYXBvY2FseXB0aWMgYXJjaGl0ZWN0dXJlCnNwZWN0YWNsZQphdWRpZW5jZSBzb3Jyb3VuZGluZwpjaW5lbWF0aWMgYXVyYSBsaWdodGluZwpjaW5lbWF0aWMgbGlnaHRpbmcgNGsKc2NpZW5jZSBmaWN0aW9uIGFydApzcG9va3kgaGFsbG93ZWVuIGZ1bgoxIDggeWVhciBsaW1pdAptaXN0eSBhbmQgZm9nZ3kKcGxheWZ1bCBhbmQgY2hlZXJmdWwKaW4gdGhlIHN0eWxlcyBvZiB0b20gY29sZXR0aQpjb252aW5jaW5nCmhpc3RvcmljYWwgYXJ0d29ya3MKYXF1YXJpdW0KY2FsbSBsaWdodGluZwpzbWlsZXkgZmFjZQoxOTk4IHBob3RvCjcgMCBzIHZpbnRhZ2UgYXJ0CnZlcnkgdmVyeSB2ZXJ5IGNyZWF0aXZlCnN1bmJlYW1zIGluIGJhY2tncm91bmQKYWR2ZXJ0aXNlbWVudCBwaG90b2dyYXBoeQptZWFkb3dzCmFwZXJ0dXJlIHNjaWVuY2UKZWFybHkgbW9ybmluZyBsaWdodGluZwpkYXJrIHN0YXJyeSBza3kKaGlnaCBidWRnZXQgc2hvdwoxOTcwcyBwaGlsaXBwaW5lcwp0d2ludGFpbHMKMSA5IDcgMCBzIHBob3RvCnNlcHR1bSBwaWVyY2luZwphbmltZSBzdHlsZSBoeXBlciBkZXRhaWxlZAp2aSBmcm9tIGFyY2FuZQpob3Qgd2VhdGhlcgpzdGFycyBvbiB0b3Agb2YgdGhlIGNyb3duCm1hbmEKZ2xvd2luZyBzd2lybGluZyBtaXN0CmRpdGlnYWwgcGFpbnRpbmcKc3VycmVhbCBmbGF0IGNvbG9ycwpmcm96ZW4gY29sZCBzdGFyZQptdXRlZCBjb2xvciB0b25lcwp2aXZpZCBkZXRhaWwKd2F2aW5nCnNuYWtlIGZhbmdzCndpdGggdmlvbGVuY2UgaW4gaGlzIGV5ZXMKcGxhaWQgc2hpcnQKcG9zaW5nISEKWyByaWdpZGx5IGRlZmluZWQgYWJzIF0hIQp0cmlhbmdsZSBzaGFwZSBmYWNlCm1lZGl1bSBsZW5ndGggd2hpdGUgaGFpcgp3YWxraW5nIHRocm91Z2ggYSBsdXNoIGp1bmdsZQp2aWN0b3JpYW4gc2V0dGluZwpjb2NvbnV0IHBhbG1zCnBpbmsgY29uY3JldGUKd2l0aCBhIHNxdWlkIHRhdHRvbwp3aGl0ZSB3aXRoIGNob2NvbGF0ZSBicm93biBzcG90cwpkcmFtYXRpYyBjb2xvcnMgc2NoZW1lCmludGVuc2UgbG9vayBpbiB0aGUgZXllcwpidXJuaW5nIGZvcmVzdApwYXJhbGxheCBwaG90b2dyYXBoeQp3aXRoIG9ybmF0ZSBqZXdlbGxlZApicm9rZW4gbWFjaGluZXJ5CnB1bHAgc2NpZmkgYm9vayBjb3ZlciBhcnQKY29iYWx0IGJsdWUgaGFpcgp3ZWFyaW5nIGNyb3duCnJpZ2lkIGJ1bGt5IGFybW9yCndpdGggYmxhY2sgc2NsZXJhIGV5ZXMKd2VhcmluZyBzdWl0IHZlc3QKYmlvbWVjaGFuaWNhbCBzY3VscHR1cmUKaW50cmljYXRlIG9ybmFtZW50CmpvaG4gY3VycmluCmxvbmcgY3Jvb2tlZCBub3NlCnNxdWFyZSBub3NlCm1vdG9yIHNwb3J0IHBob3RvZ3JhcGh5Cmxvbmcgd2luZGluZyBzdGFpcnMgZ29pbmcgZG93bgphbGxpZ2F0b3IKY2l2aWxpemVkCmxpbWJzIG1hZGUgZnJvbSB2aW5lcwpoYXVudGVkIGhvdXNlIHRoZW1lZApuZWlnaGJvcmhvb2QgdGhlbWVkCmhvcnNlIG9uIHRvcAozIGQgaG91ZGluaQpmYW50YXNpYSBwaG90bwpjaGFpcnMgYW5kIHRhYmxlcwpmbHlpbmcgYmlyZHMgaW4gZGlzdGFuY2UKcHJvZmVzc2lvbmFsIHNob290aW5nCmxvdyBhbmdlbAptb25vZ29uCm5pZ2h0bWFyZSBmdWVsISEhCm5vIHNraW4KbWlsayBjdWJlcwpzdHJhd2JlcnJ5IGdyYW51bGVzCmZhbWlseSBmcmllbmRseQpvcGVuIHdpbmRvd3MKbWluaW1hbGlzdCBsaW5lIGRyYXdpbmcKd2VhcmluZyBhIGJsdWUgcm9iZQpsb3VpcyB3aWxsaWFtIHdhaW4Kd29uZGVyZnVsIHNoYWRpbmcKYmx1ZSBiYWNrZ3JvdW5nCndlYXJpbmcgYSBsYWJjb2F0Cm1pbmVyIGtpbGJvdXJuZSBrZWxsb2dnCnJlZCBhbmQgYmxhY2sgY29sb3JzCnZpYnJhbnQgaXJpZGVzY2VudApuIC0gNApzY2FyeSBhbmQgZGFyawpjYW5vbiAyNG1tIGxlbnMKZmFudGFzeSBjb2xvcnMKcmV0cm8gc2NpIC0gZmkKYnV0IG5vdCBwcmV0dHkKYmF0dGxlZmllbGQgNAphdXRvY2hyb21lIHBob3RvZ3JhcGgKaG9ycmlmeWluZyBtb25zdGVyCnBlYXJscyBhbmQgc2hlbGxzCnRhbWFyYSBkZSBsZXBpa2EKbW90b3JiaWtlCjIgNCBtbSB3aWRlIGFuZ2xlIGFuYW1vcnBoaWMKZWJvbnkKOCBrIHJlYWxpc3RpYyBoeXBlciBkZXRhaWxlZApodW1pZCBhbGllbiBqdW5nbGUKY2hhcnJlZAptb3NzIGFuZCB2ZWdldGF0aW9uCmZsdWlkaXR5CnN3ZWF0IGZseWluZwpmbHlpbmcgd2hhbGUKYnJvd24gc2tpbiBsaWtlIHNvaWwKdW5icm9rZW4Kc2VjcmV0cwppbnRyaWNhdGUgZmluZSBsaW5lcwppbiBhIGZ1dHVyaXN0aWMgY2l0eQpmcmFjdGFsIGhhaXIKZ3JvdW5kIGNvdmVyZWQgd2l0aCBzbm93CnJlcHRvaWRzCmFyY2hvbnMKc2F1cmlhbnMKZHJhY29uaWFucwp0aGV5IGFyZSBjcm91Y2hpbmcKd2lsbCBtdXJhaQpyZWZsZWN0aW9ucyBvbiB3ZXQgc3RyZWV0cwpvbiB3b29kCmhvbGRpbmcgZ29sZGVuIGNoYWlucwpyYWJiaXQgZWFycwpkZXRhaWxlZCEhCndpdGggbmVvbiBuaWdodCBzcG90cwpoYXN1aSBrd2FzZQpxdWFudHVtIHdhdmV0cmFjZXIKbm8gZm9saWFnZQpoaWdoIGZhc2hpb24gcGhvdG9ncmFwaHkKc3Vic3VyZmFjZSBpbGx1bWluYXRpb24KamFjayBuaWNob2xzb24KYXR0YWNrIHZlY3RvcgplcGljIHNjaSAtIGZpIGNoYXJhY3RlciBhcnQKcG9wY29ybiBtYWNoaW5lCnNhbmd5ZW9iIHBhcmsKY2hhcnJlZCBkZXNlcnQKc3VwZXJmbGF0IGFydApvbiB0aGUgc3VyZmFjZSBvZiB0aGUgbW9vbgpubyBsaWZlCmhpIHJlc29sdXRpb24KYW5ndWxhciBleWVicm93cwptYWdpY2FsIGNsZWFyaW5nCm1vc3N5IGdyb3VuZApzdGFycnkgZXllcwp0aW1lbGVzcyBtYXN0ZXJwaWVjZQp3aGl0ZSBzbGVldmVzCmRhdmUgbWNrZWFuIGFuZCBzdGluYSBwZXJzc29uCmV4dHJlbWVseSBtb29keQpoaWdoIHNwZWNzCnNlcmVuZSBleHByZXNzaW9uCnNlYXRlZCBhdCBhIHRhYmxlCnByZXR0eSBzeW1tZXRyaWNhbCBmYWNlCnJlZCBmbGFnCi4gZHJhbWF0aWMgYW5nbGUKd2VsbCBmZWQKbmF0dXJhbCBjb2xvdXJzCndpbnRlciBzdW4KKCgoKGxpYnJhcnkgaW50ZXJpb3IpKSkpCm9ybmF0ZSBhbmQgaW50cmljYXRlIGpld2VscnkKeW9zaGl0YWthIGFtYW5vIHN0eWxlCmZ1dHVyaXN0aWMgdGVjaG5vbG9neQphd2FyZCB3aW5uaW5nIGFkCnNlZHVjaW5nCjEgOAp1bmRlcndhdGVyIHdvcmxkCnBoaWxvc29waHkKaHlwZXIgY29sb3IgZGlnaXRhbCBhcnQKM3JkIGV5ZQpiZWF1dGlmdWwgc3dvcmQKcHJlZmVjdHVyZSBzdHJlZXRzCmNhcnMgY3Jhc2hlZApmbHlpbmcgaW4gdGhlIGNsb3Vkcwpyb2NvY28gb3JuYW1lbnQKd2ludGVyIHdvbmRlcmxhbmQKcGFsbSBwYXR0ZXJuIHZpc2libGUKZ3Jhc3MgZmllbGQKbmV4dCB0byBhIHdpbmRvdwpsb3ZlbHkga2lzcwpraXNzIG1vdXRoIHRvIG1vdXRoCnRvcGxlc3MKbW9ub2Nocm9tZSBoZHIKZXJuc3QgaGFlY2tlbCBhbmQgZXJuc3QgZnVjaHMKaG90IGNvY29hIGRyaW5rCmZsYXNoIGxpZ2h0aW5nCmhpZ2ggYW5nZWwgZGlzdGFudCBzaG90CmFtZXJpY2FuIHNob3QKa29kYWsga29kYWNocm9tZSBmaWxtCmNlcmVtb25pYWwKZnVuZXJhbApnbG9zc3kgeWVsbG93CmRyaXBwaW5nIGhvbmV5CmdpbGRlZCByZWxpZWYKZGFyayBibHVlIHBsYW5ldApzeWRuZXkKbm8gbGFuZApzYXVzYWdlCmNvcm4KaGlnaCBxdWFsaXR5IHByb2R1Y3QgcGhvdG8KZmxhc2ggcGhvdG9ncmFwaApwZXJmZWN0IGZhY2Ugc2hhcGUKYW5pbWF0aW9uIGNlbCBmb3IgYW5pbWUgbW92aWUKcGFzdGVsIGJhY2tncm91bmQKc2NyZWVuIHByaW50IHBvc3RlcgpkdWFuZSBoYW5zb24KcG9pbnRpbmcgYSBwaXN0b2wKYmlnIG1vdGhzCmV5ZSBiYWdzCnNvZnQgY2hpbgpzcG9ydHMgc2V0dGluZwpjdXJ2ZWQgaG9ybnMhCnNwaXJhbCBob3JucyEKaW4gZGVlcCBzcGFjZQphbG9uZSBkcmFtYXRpYwp5b3VuZyBpZG9sCnRhdHRlcmVkIHJvYmVzCmZsb3dlcnMgYmFja2dyb3VuZAoyMjYzNTM5NTQ2XQpiaXNsZXkKbWlkaXVtIHNob3QKcmVsaXN0aWMKc3VuIC0gcmF5cwpmcmFjdGFsIHdhdmVzCmN5YmVybmV0aWMgc2hyaW5lCnVucmVhbCA1LiBycGcgcG9ydHJhaXQKcG9pc29uIHRlZXRoCjUwIG1tIHNpZ21hIGFydAprb2JvbGQKZ2FybWFzaAphaW1pbmcKbHlpbmcgb24gdGhlIGdyYXNzCm1lc3N5IG1heGltYWxpc3QgaW50ZXJpb3IKaHVtYW5zIHN1ZGRlbmx5IGRpc3NhcGVhcmVkCmR1c3QgYW5kIHJhdHMKc2lkaW91cwpsdW1pbm91cyBjb2NrcGl0CnJ1bm5pbmcgbGlnaHRzCnNodXR0ZXJzaG9jawpoaW50cyBvZiBzaWx2ZXIgamV3ZWxyeQppbiBhIHN3aW1taW5nIHBvb2wKdWx0cmFyZWFsaXN0aWMgaWxsdXN0cmF0aW9uCjQgayAtIG4gOQp3YXRlcmxpbHkgcG9uZAphcm15IG9mIGJpZyByb2JvdHMKdGhlIG1vb24gY2FzdCBvbiB0aGUgbWFuCnRoZSBtYW4gbG9va2VkIHVwCnJlIGVuZ2luZQpibGFjayBhbmQgeWVsbG93IHNjaGVtZQphY3RvciBsaWFtIGhlbXN3b3J0aApubyBqZXJzZXkKYmVlciBpbiBoYW5kCmZsb2F0aW5nIG9uIHRoZSBvY2Vhbgp2ZXJ5IGZhbmN5IHdoaXNrZXkgYm90dGxlCmJpZyBoYW5kcwpjcm93biBvZiB0aG9ybnMKb3JhbmdlIG5lb24gYmFja2xpZ2h0aW5nCnBvc2luZyBmb3IgYSBmaWdodAphZG9sZiB3b2xmbGkgYW5kIGRvbmF0byBnaWFuY29sYQpncmV5IGNsb3RoCnN1bnNoaW5lIHJheXMKc2hhaSBodWx1ZApjb29sIGhhaXJzdHlsZQpncmVlbiBhbmQgYmx1ZSB0b25lcwpkYXJrIGN5YmVycHVuayBtZXRyb3BvbGlzCndhdGVyIG1hbmlwdWxhdGlvbiBwaG90b3Nob3AKZnJhY3RhbCBmbG93ZXJzIG9uIHRoZSBza2luCmdyYWZmaXRpIG9uIGEgd2FsbApyZXBlYXRpbmcgMyA1IG1tIHBob3RvZ3JhcGh5CmV0aGVyZWFsIGJlYXV0eQplcGljIHZpZGVvIGdhbWUgYXJ0CmR1c2sgb24gYSBjaXR5IHN0cmVldApwZXJmZWN0IHByb3BvcnRpb25zIGRlZmluZWQgZmFjZQpjbG9zZSBtZWRpdW0gc2hvdApueWNob3MgYW5kIGFyY2ltYm9sZG8KbGVvbmFyZG8KaGlsZGVicmFuZHQKbGlnaHQgY29sb3IKbm8gaGFyZCBzaGFkb3cKbWFya2V0aW5nIHBob3RvCmNoaWFyb3NjdXJvISEKYmF0dGxlIG9mIGdvb2QgdmVyc3VzIGV2aWwKbGFyZ2Ugcm9ja3kgbW91bnRhaW4KaG9sZGluZyBhIHN3b3JkIG9uIGhlciBzaG91bGRlcgpibHVlIG5lb24gbGlnaHRzCndvb2QgdGV4dHVyZQpzZXJ2YW50IHNxdWlycmVscwpmdWppY29sb3IgcGhvdG8Kb2NhdG5lIHJlbmRlcgpyZWQgYmlvbWVjaGFuaWNhbAozIC8gNCBleHRyYSAtIHdpZGUgc2hvdAp3aWxsaWFtIGhpZ2dpbnNvbgp3ZWFyaW5nIGEgdG9nYQpwZWFjZWZ1bCBhbmQgZ3JhY2VmdWwKb3J0aG9ncmFwaGljIHBlcnNwZWN0aXZlCmdyZWcgcnV0a3dvd3NraQpnbG9vbXkgY2luZW1hdGljIGxpZ2h0aW5nCmxhdGUgYWZ0ZXJub29uIGxpZ2h0aW5nCnJvYiByb3NzCjcgMCBtbSBlbnRyYW5jZSBwdXBpbCBkaWFtZXRlcgpyYWluIGFuZCBzbW9rZSBhbmQgbGlnaHRuaW5nCmh5cGVyIC0gbWF4aW1hbGlzdApvYWsgdHJlZSBlbnQKaXNsYW1pYyBjYWxsaWdyYXBoeQp2aWJyYW5jeQpwZW9wbGUncyBzaWxob3VldHRlcyBjbG9zZSB1cApqYXBhbiBhbmltYXRpb24Kc2lua2luZyBpbnRvIG1hZG5lc3MKdmlicmFudCBuZW9uIGlua3MgcGFpbnRpbmcKZ3JpbWRhcmsgcmVhbGlzbQp3aXRoIGludHJpY2F0ZSBkZXRhaWwKcmVubmVzIC0gbGUgLSBjaGF0ZWF1CmdyZWcgcnV0Z293c2tpCmpvZG9yd29za2kncyBkdW5lCmdpYW50IHN1cGVyIG1vb24KY2F1c3RpYyBsaWdodGluZwp0ZWxlcG9ydGF0aW9uCmxvdyBhbmdsZSBmaXNoZXllIHZpZXcKdm9sdW1ldHJpYyBsaWdodGluZyBtYXR0ZQpwaWxlZCBhcm91bmQKcHN5Y2hlZGVsaWMgZHVzdAozIGQgY2xheSByZW5kZXIKMSA4IDYgMgpjbGVhciBzaGFycCBpbWFnZQpiaWcgYW5kIHNtYWxsCm1hbmdhIHN0eWxlIG9mIGtlbnRhcm8gbWl1cmEKNyA1IG1tCnVudXN1YWwgcGxhY2UKcmVmbGVjdGl2ZSB3aW5kb3dzCmxvdyBzaG90IGFuZ2xlCnRvdGFsIHJlY2FsbCBzdHlsZQpyZWN1cnNpdmUhISEhCmNvaGVyZW50IHBob3RvCm1vdGlvbiBzdGlsbApoYXJyb3dpbmcgYXBvY2FseXB0aWMgYXRtb3NwaGVyZQpmb3J3YXJkIGZhY2luZyBwb3NlCmluc2lkZSBhIGRhcmsgcm9vbQpzdGFuZGluZyBpbiBmaXJlCmlsbHVzaW9uaXNtCmluZGlhbiBmbGFnCm1hbnkgc3RhcnMKd2hpdGUhIGRyZXNzCmdyb292eSBoYWlyYmFuZApwYW4gYW5kIHBsYXRlcwpleHRyZW1lbHkgZGV0YWlsZWQgcm9ja3kgY3JhZwpuYXR1cmUgdGFraW5nIG92ZXIKc3R5bGUgb2YgcmFscGggbWNxdWFycmllCmFiYW5kb25lZCBwaG90b2dyYXBoCmxhcmdlIGVudmlyb25tZW50CmR1c3R5IGdyb3VuZApsaWdodGhvdXNlIGluIHRoZSBkZXNlcnQKZ2lhbnQgY2VudGlwZWRlCmFib3ZlIHRoZSBjbG91ZHMKYnJ1dGFsIHNoYXBlcyBzdG9ybXkgc2t5CnBhaW50aW5nIGZvciBhIHdhbGwKYWJzdHJhY3QhIQpnZXN0dXJhbCBsaW5lcwphYnN0cmFjdCBleHByZXNzaW9uaXN0IHBhaW50aW5nCnJldHJvd2F2ZSBub2lyCnBlYXJzCmFic3RyYWN0IHBhaW50aW5nIGluIGJsYWNrCmFyaWFsIHNob3QKc2hlZXQgcGFwZXIKcm91Z2ggc2tldGNoCmludHJpY2F0ZSBnb2xkIGxpbmV3b3JrCmJvdWxldmFyZAplcGljIGJhdHRsZXNjZW5lCm1hZ25vbGlhIHN0ZW1zCmV4cGxvZGVkIHBhcnRzIGFzc2VtYmx5CmNsZWFuIGJlYXV0aWZ1bCBzeW1tZXRyaWNhbCBmYWNlCmZyb20gbmF0dXJlIGpvdXJuYWwKdGFjdGljYWwgd2FyZmFyZQpsb29raW5nIGF0IGNhbWVyYSEhIQpzdHlsZSBvZiBqYW1lcyBndXJuZXkKdmVyeSBwcmV0dHkgbW9kZWwKY2hpbmVzZSBkcmVzcwphZHZhbmNlZCBhbmltZSBkaWdpdGFsIGFydApkZXRhaWxlZCBzY2kgLSBmaSBiYWNrZ3JvdW5kcwpvdmVyaGVhZCBzdW4KY291bnRhY2gKcmFpbHMKYmlvbWltZXRpYwp1cmJhbiBwbGFubmluZwpkaXN0YW50IG1vdW50YWluIHJhbmdlCjggayB2ZXJ5IGhpZ2h0IGRldGFpbApnZW9yZ2UgYW5kcmllcyByb3RoCjggMCdzIGZhbnRhc3kgYXJ0CnNpbXBsZSBhcnQKd2VhcmluZyBhIGRhcmsgYmx1ZSBwb2xvIHNoaXJ0Cm5pZ2h0IC0gdGltZQpleHF1aXNpdGUgZmluZSBhcnQKcGl4YXIgc3BsYXNoIGFydAphaSAtIGdlbmVyYXRlZCBhcnQKZGVzaWduIHlvdXIgb3duIGF2YXRhcgpjb25uZWN0ZWRuZXNzCjE5OTBzIDE5OTIKYWlycGxhbmUKM2QgcmVuZGVyIHNlbmlvciBhcnRpc3QKY29ubmVjdGVkIHdpdGggZ2xvd2luZyB0dWJlcyA4IGsKYWxjaGVtaXN0CnN0YXIgd2FycyBmaWxtIGxvb2sKa2F3YWkKZGFyayBnbG9vbXkgY2h1cmNoCnppZyB6YWcKc2V0IG9uIGguIHIuIGdpZ2VyIGFlc3RoZXRpYwp0b3Agc2VjcmV0IHN0eWxlIHBob3RvCmFsaWVuIG5hdHVyZQpydXN0eSBtZXRhbCB0b3dlcnMKZHJvbmUgc3BlZWR3YXlzCnByb3Rvc3MhISEhCnN0cmFuZ2VyIHRoaW5ncyBkZW1vZ29yZ29uCnBvcnRyYWl0IHJlYWxpc3RpYyBwaG90b2dyYXBoCmFsbCB3aGl0ZQoyIDAgMiAzCmFscGhhCmRlYXRoIGdvZApjaGlyaWNvIGFuZCByZW5lIG1hZ3JpdHRlCnZhbXByZSB0aGUgbWFzcXVlcmFkZQpzaG90IG9uIGNhbm9uIGVvcyByIDUKZWx2aXNoCnBhdCBtY2dyYXRoCndhbGwgd29vZCBmb3J0cmVzcwpoYW5kIC0gdGludGVkCmxvbmcgd2F2eSB3aGl0ZSBoYWlyCm1vZGVybiB0aW1lcwpyZXRybyBwdW5rCnJlZmlrIGFuYWRvbApmaWxtZWQgaW4gdGhlIGRhcmsgd29vZHMKcm91Z2ggb2lsIHBhaW50CnNoYXJwIGJhY2tncm91bmQKZnJhbmsga296aWsKYmVhdXRpZnVsIGxpZ2h0aW5nIGVmZmVjdHMKaHlwZXJkZXRhaWxlZCEhIQo4IGsgaGQgd2FsbHBhcGVyCnllbGxvdyBsYW50ZXJucwptZXNzeSBibGFjayBoYWlyCmRyZWFkbG9jayBicmVlZCBoYWlyCmRvbiEhISEgYmx1dGghISEhCmFuIGFudGhyb3BvbW9ycGhpYyB3b2xmCmFuIGFyYWIgc3RhbmRpbmcgd2F0Y2hpbmcgb3Zlcgpva3VkYQpuIDYgNApmb3VuZCBzY3JpYmJsZWQgaW4gYSBub3RlYm9vawpwYWludGVycwpvY2QKZWxlZ2FudCBmZWV0CnBhaW50ZWQgd2l0aCBhIHRoaW4gYnJ1c2gKcGFyYXBldHMKYW5jaWVudCBjaXZpbGlzYXRpb24KcGhvdG8gc3R5bGUKbmVvbiBqYWN1enppCnRyYW5zaHVtYW5pc3QgaHlkcmF0aW9uCmJ1c2luZXNzIGxvZ28Kc2hpbm55IGRlZXAgYmx1ZSBoaWdoIGhlZWxzCnNtb290aCBzb2xpZCBjb25jcmV0ZQpzbW9vdGggY29uY3JldGUKZHJhbWF0aWMgYWN0aW9uCmJhY2tncm91bmQgZGFyawpzY2lmaSBtYWNoaW5lCmJlZXBsZSBhbmQgamVhbiBnaXJhdWQKZ2lhbnQgdGVudGFjbGVzCm1haXNvbiBsYWZmaXRlCmNoYXRlYXUgZGUgdmVyc2FpbGxlcwpjaXJjdWxhciBzaGFwZQpjcm9zc2VkIGV5ZXMKcGVyZmVjdGx5IHN5bW1ldHJpY2FsIGFsaWVuIGZhY2UKaGFyZG1lc2gKaGlsbHMgaW4gdGhlIGJhY2tncm91bmQKbGlnaHQgY2xvdWRzCnZpYnJhbnQgY29sb3JzIHNtb290aCBncmFkaWVudHMKMyBkIGdyYXBoaWNzCnN0ZXBwZSBiYWNrZ3JvdW5kCnJnYiBsZWQKbGlzYSBwYXJrZXIKc2hwb25nbGUKc2F0IGluIGFuIG9mZmljZQpjaGluZXNlIHdhdGVyIGNvbG9yCnNuYWtlcyBpbiBwbGFjZSBvZiBoYWlyCmFuYXRvbWljYWxseSBjb3JyZWN0IGJvZHkKZGlydHkgbWlycm9yCmJhcmJhcmVsbGEKbG9va2luZyBhdCBwb3J0aG9sZSB3aW5kb3cKdWx0cmFkZXRhaWxlZCBwaG90b3JlYWxpc3RpYwpjcm93ZCBvZiBhbmRyb2lkcwphbmltZSBtb3ZpZQpnb2xkZW4gYWdlIGlsbHVzdHJhdG9yCmZhZGluZyBvZmYgaW50byB0aGUgZGlzdGFuY2UKaW5rYmxvdHMgb2YgY29sb3IKd2lkZXNjcmVlbiA4IGsKaW50ZW5zZSBsaWdodCBiZWFtcwphbmNpZW50IG92ZXJncm93biBydWlucwpldGhlcmVhbCBkZXRhaWxzCmJsYWNrIGZhY2VtYXNrCmF1cm9yYSBzcGFjZXNoaXAgZW52aXJvbm1lbnQKaHlwZXJyZWFsaXN0aWMgY29udGVudApoaWdoIGRlZmluaXRpb24gY29udGVudAphaWRhIG11bHVuZWgKd2VhcmluZyByb2JlcyBvZiBzaWx2ZXIKb3JuYXRlIGNpdHkgcnVpbnMKaGlnaCBoZWVsIGJvb3RzCmJ1c2h5IGJlYXJkCmdyaW1kYXJrIGhvcnJvcgp0dXJidWxlbmNlCmFuaW1lIGJhcmJpZSBkb2xsCmRyZWFtIGxpZ2h0CmpzcmYKc3R1bm5pbmcgZmFjZQphbmltZSBjZWwKZmlzaGV5ZSBwZXJzcGVjdGl2ZQphZHZhbmNlZCBkaWdpdGFsIGN5YmVycHVuayBhcnQKbW92aWUgbGlnaHRpbmcKc21vb3RoIGdyYWRhdGlvbgpzZXdlciBwaXBlIGVudHJhbmNlCmJsYWNrIGNpcmNsZQpibGFjayBibGFjayBibGFjayB3b21hbgphbmltZSBpbiBmYW50YXN5IHN0eWxlCmhhbmRzb21lIGFuaW1lIGV5ZXMKOCAwIHMgc3BvcnQgY2xvdGhpbmcKcGFub3JhbWljIHZpZXcgb2YgZ2lybApzaWRlIHBvcnRyYWl0IG9mIGEgZ2lybAprZW1vbm9taW1pCnNlY29uZGxpZmUKaW12dQpib29rIGNvdmVyIGRlc2lnbgpkaWZmdXNlIG5hdHVyYWwgc3VuIGxpZ2h0cwp5ZWFyIDI0NDcKYXR0YWNrIG9uIHRpdGFuIHNjZW5lcnkKc3RlZWwgYXJtb3IKKCBjYXN0bGUgaW4gdGhlIGJhY2tncm91bmQgKQpicnVzaCBwZW4Kc3BydWNlIHRyZWVzCmFudGhyb3BvbW9ycGhpYyByb2JvdCBbIHRoaW5nIF0KaGVhZHNob3QgcHJvZmlsZSBwaWN0dXJlCm1vcmJpZGx5IG9iZXNlCnNoYW1hbmljIHBvc3RlCnN0cmV0Y2gKMjU2IGNvbG9ycwppbmRpIGNyZWF0ZXMKbG9va2luZyBzZXJpb3VzCmRlcHRoIGRldGFpbGVkCm1vbnVtZW50YWwgYWNoaWV2ZW1lbnQKcm91bmQgYnVpbGRpbmdzIGluIGJhY2tncm91bmQKbWFkZSBvZiBsaXF1aWQKZWxkZXIgc2Nyb2xscyBvbmxpbmUKYXJtb3JlZCBjYXQKbG90ciBzdHlsZQpyZWQgYW5kIGJsYWNrIGZsYWdzCmZvcm1hbCBwb3J0cmFpdApoZWxsZmlyZSBiYWNrZ3JvdW5kCnRyaWJhbCBkYW5jZQpidXN5IGNpdHlzY2FwZQpoaWdoIGNvbnRyYXN0IDhrCmJlaW5nIGEgZ3JlYXQKbG92ZWFibGUgZ3V5CndpdGggamFnZ2VkIHJvY2tzICYgZWVyaWUKbWF0ZXVzIDkgNQpodW1hbiBmaWd1cmVzCmNlbGwgcGhvbmUgcGhvdG8KYXJ0aXN0aWMgc3dhbXAgd2l0aCBteXN0aWMgZm9nCmJyb3duIGNhbnlvbiBiYWNrZ3JvdW5kCm1ldGFsbGljIHNraW4KdGVuZGVybmVzcwpzbm93IG1vbmtleXMgYXQgdGhlIG1vdW50YWluIHNwYQpzdGFyZmxlZXQgdW5pZm9ybXMKaG9ydG9yaXVtCmpheSBuYXlsb3IKc2hvcnQgYmxhY2sgcGl4aWUgdW5kZXJjdXQgaGFpcgpmYXRoZXIgdGltZQphc2hlIGZyb20gb3ZlcndhdGNoCmxhY3F1ZXJlZCBhcm1vcgpjdXRlIGJ1dCBkZXRlcm1pbmVkCmFzaWFuIGdpcmwgd2l0aCBsb25nIGhhaXIKYXNzZXQgc2hlZXQKbm8gZHVwbGljYXRlCnVsdHJhIHJlYWxpc3RpYyBob3Jyb3IKdG9uYWxpc3QgcG9ydHJhaXQKaGV4YWdvbmFsCm1kYWUgZnJvbSBtYXRjaHN0aWNrcyBzaGl2YQptZWRpZXZhbCBhcnQgc3R5bGUKd3JvdGUgcmVuYWlzc2FuY2UgbWljaGVsYW5nZWxvCndvbWFuIGlzIGluIGEgdHJlbmNoY29hdAptaW5kIC0gYmVuZGluZyByZWFsaXR5CmtuZWVsaW5nIGFuZCBsb29raW5nIHVwCnRpZ2h0IGZ1bGwgYm9keSBzdWl0CmNvb2wgYW5kIGJyaWdodCB0aW50CnBlcmZlY3Qgc2lsa3kgc3RyYWlnaHQgaGFpcgpzbW9vdGggdGFuIHNraW4KZGFyayBjaXJjbGVzIHVuZGVyIGJlbXVzZWQgZXllcwphdHRyYWN0aXZlIG1hbGUgZGVpdHkKY3ViZXJwdW5rCnNsZWV2ZWxlc3MgcmVkIGRyZXNzCnRveGljIGRyaXBzCmZhaW50IHN1bnJpc2UKc292aWV0IGFyY2hpdGVjdHVyZQpkaXNuZXkuIG1vZGVsIHNoZWV0IGRldGFpbGVkCmhxIHRleHR1cmVzCmJvdW50aWZ1bCBjcmFmdHMKY3J5aW5nIGFuZCBzbWlsaW5nIGZyYW50aWNseQppbmRpYSB0aWthIHRoaXJkIGV5ZQpiZWF1dGlmdWxseSBpbmZlY3RlZApwZXJmZWN0IGNvbXBvc2l0aW9uIGFuZCBsaWdodGluZwp3ZWFyaW5nIGFuZ2VsCnllYXIgMiAzIDAgMApvcHRpbWlzdGljIG1hdHRlIHBhaW50aW5nCmJhY2sgb2YgZW1tYSBzdG9uZSBpbiBiZWlnZSBjb2F0CnBsYW5ldCBhcnJha2lzCnNoYXJwIHJhaW4KbHVkd2lnIGhvaGx3ZWluCmVsZWdhbnQgZ2xhbW9yIHBvc2UKb21pbm91cyBuZW9uIGxpZ2h0aW5nCnNraW50aWdodCBsZWF0aGVyIGNsb3RoZXMKc2hvcnQgY29hdApkaXNoCnZlcnkgZGlzdHVyYmluZwphaXJicnVzaCBkaWdpdGFsIGFydApibHVlIHJheXMKYmFsbGV0IGRhbmNlcgpjaG9jb2xhdGUgYXJ0Cmthd2FpaSBjb2xvcnMKaW50cmljYXRlIHNraW4gcGF0dGVybiB0ZXh0dXJlCm1hc2N1bGluaXR5CmJsYWRlZCB3aW5ncyBsYWNlIHdlYXIKYmFza2V0YmFsbCBzbmVha2VyIGNvbmNlcHQgYXJ0CnNob3J0IGxlZ3MKZXZpbCByb2JvdAppbmZpbml0eSBnYXVudGxldAp0aW1vdGh5IGRhbHRvbgp3YXJmb3JnZWQKc2hpcGZsZWV0IG9uIHRoZSBob3Jpem9uCmJlIHJlYWwKc3R5bGUgb2Ygam9obiBiYXVlcgp1bml0eSAyIGQKcHJvZmVzc2lvbmFsIGRpZ2l0YWwgcGhvdG8KdGVhbCBleWVzCmhvcnJvciB0ZXJyaWZ5aW5nCm1hcmdvdCByb2JiaWUgZmFjZQpmdWxsIHBhbGxldCBpbWFnZQozIGQgbWVzaApoaW1iYSBoYWlyc3R5bGUKZ2xvd2luZyBzcGFjZXN1aXQKbGVkIGRldGFpbHMKaW4gZm9yYmlkZGVuIGNpdHkKZmxvd2VycyBzZWEgcmFpbm5pbmcgZXZlcnl3aGVyZQpkb2luZyBhbiBlbGVnYW50IHBvc2Ugb3ZlciB5b3UKY2xlYXIgYmx1ZSBza2llcwp3ZWFyaW5nIG9ybmF0ZSBoZWxtZXQKYmVhdXRpZnVsIGFzaWFuIHdvbWFuCmRhcmsgYmx1ZSBza2luCmZhcnNjYXBlCndoaXRlIGJhY2tncm91bmQgd2FsbApiZWF1dGlmdWwgbW9vbmxpZ2h0IG5pZ2h0CmFydCBzdGF0aW9uIDMgZApibGFkZXJ1bm5lciAyIDAgNCA3CmZsdXNoZWQgY2hlZWtzCmhlbnJpIC0gZWRtb25kCnNwYWNlY3JhZnRzCmJlYXV0aWZ1bCBjeWJvcmcgZ2lybApiZWF1dGlmdWwgZGFyayBmb3Jlc3QgbGFuZHNjYXBlCmJlYXV0aWZ1bCBmbG93ZXJzIGFuZCBjcnlzdGFscwp3ZWFyaW5nIGEgYmx1ZSBxaXBhbyBkcmVzcwpyb2NrIGFuZCBzYW5kIGFyb3VuZApiZWF1dGlmdWwgbWF0dXJlIGNvbG9yIHBhbGV0dGUKbGlnaHRzIGluIHRoZSBuaWdodAphbmdlbCBzaXR0aW5nIG9uIGEgcm9jawpoYW51bWFuISEgaGVhZCBidWlsZGluZwpiZWF1dGlmdWwgZWxlZ2FudCBkcnlhZAptZXNzeSBidW4KZGFyayBhYmFuZG9uZWQgY3liZXJwdW5rIGZhY3RvcnkKZmxvcm8gZGV0YWlscwpiZWF1dGlmdWwgYWNyeWxpYyBmbHVpZCBwb3J0cmFpdAphcm1vciBwbGF0aW5nCmJlYXV0aWZ1bCBmZW1hbGUgZHJ1aWQKbGVhdmVzIGFuZCBzaW1wbGUgY2xvdGgKZmlzdGluZwpleWUgZmlzaCBsZW5zCnNvZnQgZm9jdXMgb2lsIGNhbnZhcyBwYWludGluZwpyb2JvdGljIHByb3N0aGV0aWMgYXJtCmJlYXV0aWZ1bCBnZW1pbmkgdHdpbnMgcG9ydHJhaXQKbG9va2luZyB1cHdhcmRzCmRhcmsgaGFpciBhbmQgbWFrZXVwCmhpZ2ggY29udHJhc3Qgd29vZCBlbmdyYXZpbmcKcm9zc2llcgp0cmVlcyBpbiB0aGUgZ3Jhc3N5IGhpbGxzCmZsYXQgdG9uZQpqZWhhbiBnZW9yZ2VzIHZpYmVydApzbW9vdGggaGQKYmVhdXRpZnVsIG1hbGUgZHJvdwpyYXkgdHJhY2luZyA4IGsKOCAwJ3MgYWlyYnJ1c2ggYWVzdGhldGljCndvb2QgaGVhZHBob25lcwphbmF0b21pY2FsbHkgYWNjdXJhdGUgZmFjZQpncm91bmRicmVha2luZyBhcnQKbWFyb29uIG1pc3QKOGsgb2N0YW5lIDNkIHJlbmRlcgpza2V3ZWQgcGVyc3BlY3RpdmUKc2hhbGxvdyBmb2N1cyBiYWNrZ3JvdW5kCnBhcGVyIGNvbGxhZ2UgYXJ0CnZlcnQgY29oZXJlbnQKbW91bnRhaW5vdXMKdmFyaWF0aW9ucyBvZiB0aG9tIHlvcmtlCmhpZ2ggcXVhbGl0eSBwaG90b2dyYXBocwpyZWQgYnJhaWRlZCBoYWlyCnZpYnJhbnQgY29tcG9zaXRpb24gYW5kIGNvbG9yCnVsdHJhIGFtYmllbnQgb2NjbHVzaW9uCmFzc2FtIHRlYSB2aWxsYWdlIGJhY2tncm91bmQKd29ybSBob2xlCmJlYXV0aWZ1bCBzdGFpbmVkIGdsYXNzIHdpbmRvdwpyYWZlYWwgYWxidXF1ZXJxdWUKYmlyZCdzIGV5ZSBvdmVyaGVhZCBzaG90CmJlYXV0aWZ1bCBzdW5mbG93ZXIgYW5pbWUgZ2lybApzdGFyIHdhcnMgYSBuZXcgaG9wZSAxOTc3CnNjYXR0ZXJlZCBsaWdodAphbGV4YW5kcmEgZm9taW5hCnlhbm4gYmxvbXF1aXN0CmVwaWMgOCBrIGhkIGFuaW1lIHNob3QKYmVhdXR5IGJsYWRlIHJ1bm5lciB3b21hbgpiZWF1dHkgYXJ0IG5vdXZlYXUgd29tYW4KYmVhdXRpZnVsIG5lb24gY2F0cwpzdG9wIG1vdGlvbiB2aW55bCBmaWd1cmUKYmVyZWFsCmNsb3NldXAgZGV0YWlsZWQKZCAmIGQgbW9uc3RlcgpvY2VhbiBvbiBhbGllbiBwbGFuZXQgdGl0YW4KdGF0b29zCmhpLXRlY2ggZGV0YWlscwpsYXllcmVkIGltcGFzdG8Kc2hvdCBvbiBnb3BybzkKcm9iZXJ0IHJpY2hhcmRzb24KaG95dGUgdmFuIGhveXRlbWEKcm9nZXIgZGVhbmtpbnMKZWFydGhib3VuZAp0b3Agb2YgcGludGVyZXN0Cndvcm4gZGVjYXkgdGV4dHVyZQpicnV0YWxpc3QgcGFpbnRpbmcKY3B1CnByZXNzIHBob3RvcwphbHNwaG9uc2UgbXVjaGEKbmFub21hdGVyaWFscwpoYXJzaCBmbGFzaCBwaG90byBhdCBuaWdodApwYW50aW5nCmVlcmllIQptaW51dGUgZGV0YWlscwpkdXN0eSBiYWNrZ3JvdW5kCmN1dGUgZmx1ZmZ5IGNhcmFjYWwKbG9uZ2VyIGJsb25kIGhhaXIKc3RpbGwgZnJvbSB0aGUgbW92aWUgcHJlZGF0b3IKcGhvdG8gYmx1cnJpbmcKaGFuZ2luZyBzY3JvbGwgb24gd2FsbApwb3J0cmFpdCBvZiBhIGZlbWFsZSBhcnQgc3R1ZGVudApwYWxlIHllbGxvdyB3YWxscGFwZXIKc2NlbmUgZnJvbSBsaXZlIGFjdGlvbiBtb3ZpZQpibGFjayBtZXRhbCBsb2dvcwpwaGFyYW9oIGNsb3RoZXMKcm9wZSBib25kYWdlCnN0cmVldCBsYW1wcyB3aXRoIG9yYW5nZSBsaWdodApzZWF2aWV3CmJsb3R0ZXIgYXJ0CmRyYWNvbmljCnJvc2UgcGluayBsaWdodGluZwpzdGFyIHNoaXBzCmJsdWUgcGhvZW5peCBiaXJkCmxvdyAtIGFuZ2xlIHNob3QgZnJvbSBiZWhpbmQKY2h1bmdraW5nIGV4cHJlc3MgY29sb3IgcGFsZXR0ZQphbmF0byBmaW5uc3RhcmsgYW5kIGFsZW5hIGFlbmFtaQp3aXRoIGhhbmRzIGluIHBvY2tldHMKZ2lhbnQgYWZybyEKZyBsaXVsaWFuIGFydCBzdHlsZQpoaWdoIHF1YWxpdHkgZmFudGFzeSBzdG9jayBwaG90bwp1bnNwbGFzaCB0cmFuc3BhcmVudApmb3Jlc3QgYW5kIG1vb24KY2xvdGhlcyB0b3JuIGFwYXJ0CnNsYXNoZXIgbW92aWUKdmVyeSBjb2hlcmVudCBjb21wb3NpdGlvbgpkaXJlY3QgZ2xhemUKZm9jdXNlZCBzaG90CmFuaW1lIGNvbnZlbnRpb24Kc2NhcnkgYXJ0IGluIGNvbG9yCmNvbG9ycyBvcmFuZ2UKd2hpdGUhIQpyYWRpb3MKdWx0cmFzaGFycCBkZXRhaWxzCmFlc3RoZXRpYyBmaWxtIGdyYWluCmJsdWUgcmF5cyBmcm9tIHR2CmJveSB0aGluIGZhY2UKcGluayBhbmQgcHVycGxlCmZsb3JhbCBhcnQgbm91dmVhdSBkcmVzcwppbnRyaWNhdGUgZ3JhZmZpdGkKYmFsbHBvaW50CmJyZW5kYW4gZnJhc2VyCmxvb2tpbmcgZG93biBhIGNsaWZmCmJhbGxzIG9mIGxpZ2h0IGZvciBleWVzCnJpY2ggY29tcG9zaXRpb24KZ3JlZW4gc2tpbiEKYmVkYXp6bGVkIGZydWl0IGNvc3R1bWVzCmhlbG1ldCBvZmYKZ2xvb20gaGF2ZW4KY29tcGxleGl0eSBvZiB0aGUgcGljdHVyZQpjbGFzcyBodW50ZXIKcmVkdWNlIGR1cGxpY2F0aW9uCmZ1dHVyaXN0aWMga2l0YmFzaApzbGVlcHkgZXllcwpjaW5lbWF0aWMgY29tcG9zaXRpb24gaGRyCmxpbmUgYXJ0IGNvbG91cmluZyBwYWdlCnN0YW5kaW5nIGluIGFuIGFsbGV5d2F5CmZ1bGwgYm9keSBzYXJjYXN0aWMgcG9zZQo3MHMgcG9zdGVyCndvcmxkIHNlZW4gb25seSB0aHJvdWdoIGEgcG9ydGFsCmZlZWxpbmcgb2YgZ3JpbWRhcmsgaG9ycm9yCmJ3IGNsb3NlIC0gdXAgcHJvZmlsZSBmYWNlCm5haWwgcG9saXNoCnJlZCt5ZWxsb3cgY29sb3VycwomIHRoZXkgYWxsIGxvb2sgdGVycmlmaWVkCmRhbmdlcm91cyAmIHBvd2VyZnVsIGNyZWF0dXJlCm5hcGxlcwpvbWlub3VzIGRlcHRocwpmbHlpbmcgbWFjaGluZXJ5CmFzeWEgeW9yYW5vdmEgYW5kIGFsYW4gbGVlCmZyYW5jaXMgYmFjb24gYXJ0d29yawpvbWluaW91cwpmdXR1cmlzdGljIGN5YmVycHVuayB0b2t5byBuaWdodApjYW5keSBjYW5lcwpjb2xvcmVkIHBlbmNpbCBpbGx1c3RyYXRpb24Kc3BsYXNoIG9mIHBhaW50IGRvd24gY2VudGVyCmhlYXJ0aHN0b25lIGNhcmQKc29ueSAzIDUgbW0gbGVucwphcmNoaWxsZSBzdXBlcmJpCmNhcm9sYSBydWJpbwpkYXJrIHZpbnRhZ2UgcGFwZXJiYWNrIGNvdmVyCm1peCB3aXRoIHJpdmVuZGVsbCBhcmNoaXRlY3R1cmUKdmVyeSBiZWF1dGlmdWwgZnVyCmRvZyBzbGVlcGluZwpoaWdobHkgYWJzdHJhY3QKbWFueSBsZWdzCnNjcmF0Y2hpbmcgcG9zdAppbiBzdHlsZSBvZiBqYW1lcyBnaWxsZWFyZApuaWdodHNob3QKcG9saXNoZWQgd2hpdGUgbWFyYmxlCmFydGlzdCBtYWVuYQpzYXR5cgpoeXBlciAtIGRldGFpbGVkIGNvbG9yIHBob3RvCnVyYmFuIGFydCBzdHlsZQpzaW5pc3RlciBiYWNrZ3JvdW5kCmh5cGVyZGV0YWlsZWQgZXllcwpjZXJhbWljIGN5Ym9yZwptaXhpbmcKaW4gYW4gYXJ0IGdhbGxlcnkKaGVhdnkgbWV0YWwgYXJ0d29yawo0IGsgcmVzb2x1dGlvbiBjb25jZXB0IGFydApkZW1vbiB0YWlsCmhlYXZ5LWR1dHkgYm9vdHMKd2VhcmluZyBkYXJrIHZpY3RvcmlhbiBnb2dnbGVzCmJsYWNrIGJlYW5pZQpvbiBzcGFjZSBzdGF0aW9uCmN1dGUgZmluZSBmYWNlCmV5ZWxpZHMgaGFsZiBjbG9zZWQKdG9reW8gZmFzaGlvbgpjaGFyYWN0ZXIgZGVzaWduIHBvcnRyYWl0CmR1c3R5IHJvd24gYm9tYmVyIGxlYXRoZXIgamFja2V0CmNsaWZmanVtcGVyCndlYXJpbmcgYW4gb2xkIHR1bmljCmdlbnNoaW4gaW1wYWN0IHN0eWxlCmV2aWwgd29tYW4KaW50cm92ZXJ0CmNoYXJsZXMgYnVyY2hmaWVsZCBhcnQgcGFpbnRpbmcKMzNtbSBwaG90bwpwb2x5Y2hyb21hdGljIC0gY29sb3JzCmNoZXNzIHNldApoaWdoIHF1YWxpdHkgaGVhZApqZXJlbXkgY293YXJ0CnBzIDMKY2Fub24gMSAtIGR4CmUuIGguIGJlYXRyaWNlIGJsdWUKY2hsb2UgZ3JhY2UgbW9yZXR6CnRyYW0KZ3JlZyBydXRrdXdza3kKc2hvcnQgc2l6ZQpjaW5lbWF0aWMgYm9keSBzaG90CnNsaWNrIHBpbmsgYXJtb3IKY3V0ZSBlbGVnYW50IHBvc2UKcmV0cm8gLSBmdXR1cmlzbQpoYW5kcyB0b3VjaGluZyBsaWdodCBkcm9wcwo0MDBtbSBsZW5zCnNoYXJwIGN5Ym9yZyBkcmFnb24gaGVhZApwYXJhbm9pYSBldmVyeXdoZXJlCm91dHJhbQp0YXAgb3V0CnN1cGVyY29tcHV0ZXJzIHRleHQgdG8gaW1hZ2VzCnVuaXR5IGRlbW8gdmlkZW8KY2luZW1hdGljIHN0aWxsIGluIGFkYW0gfCB1bml0eQpodW1hbm9pZCBtZWNoCmJsdWVyYXkKY2luZW1hdGljIHN0aWxsIG9mIHdlc3R3b3JsZApzdXBlciBjb25kdWN0ZXJzCmNpbmVtYXRpYyB3aWRlIGFuZ2xlCnN0YW5kaW5nIGluIGEgZGFyayBmb3Jlc3QKYm9yZWFsIGZvcmVzdApnbGFzcyBvbGVkIG1lY2hhIHZpc29yCm9uIGEgZ3JlZW4gaGlsbAptYXR0IGNvbG91cnMKc2t5Y3JhcGVycwpjbGFzc2ljIGRhbmNlciBzdHJpa2luZyBhIHBvc2UKYmxhY2sgc29ra2VsCmluc2lkZSBhIGNsdXR0ZXJlZCBhcnQgc3R1ZGlvCjMgZCBwaG90b3JlYWxpc3RpYyByZW5kZXIKdWx0cmEgZGV0YWlsZWQgd2lyZSBkZWNvcmF0aW9uCm1hZ2ljIGFydApvbGQga2l0Y2hlbiBiYWNrZHJvcApoZWF2eSBwYWludAp0cmFkaXRpb25hbCBtb29uCmxlYWRpbmcgdG8gdGhlIHNreQpkcmFtYXRpYyBjbG91ZHkgc2t5CnVuaWZvcm0gb2ZmIC0gd2hpdGUgc2t5CjggMCAtIHMgZmFzaGlvbgptb2lzdCBtb3NzeSB3aGl0ZSBzdG9uZXMKZWxldmF0b3IKZ3VhcmRzIGludHJpY2F0ZQppbml0aWFsIGQgYW5pbWUKd2VhcmluZyBhIG5hdnkgYmx1ZSB1dGlsaXR5IGNhcApyb2NreSBtb3VudGFpbnMgaW4gYmFja2dyb3VuZAoxIDkgOSA4J3MgYW5pbWUKZ2xvd2luZyBjeWJlciAtIGV5ZXMKcG9sYWVpemVkIGxpZ2h0CndlZWQgYmFja2dyb3VuZApuZWF0IGhhaXIKc2hpbnkgd2V0IHNraW4hIQpmbHlpbmcgYWNyb3NzIHRoZSB1bml2ZXJzZQpnb2Qgb2YgbmF0dXJlCnBob3RvcmVsaXN0aWMKbWluaW1hbCBjb21wb3NpdGlvbgptYXJ2ZWxsb3VzIHJlZmxlY3Rpb24gb2YgdGhlIHNreQpib3Nzb25zIHZpbnRhZ2UgY2hhbGt3YXJlCmxpZ2h0IGJ1bGJzCmVlcmllIHNreQoxIDAgbW0gbmlrb24KYmFyaXMgeWVzaWxiYXMKLSBoIDggMCA0CmRvd253YXJkIHNvbWJlciBleHByZXNzaW9uCmZ1bGwgY2xvdGhpbmcKbWlrbwpjb2F0IGZvciBhIHJhdmUgd2l0aCBmdXIKc2VjdXJpdHlndWFyZAplbXB0eSBmbG9vcgpwZW9wbGUgcmVzdGluZyBvbiB0aGUgZ3Jhc3MKc3VtbWVyIHdlYXRoZXIKd2VhcmluZyBpbiBhIHN1bW1lciBkcmVzcwpjb2xvciB2aWRlbyBmb290YWdlCmZpc2hib25lcwpjb2xsYWdlIG9mIHN0eWxlcwpibGFuY2EgYWx2YXJlegpkb2xwaCBsdW5kZ3JlbgppcgpibGFjayBpbmsgb3V0bGluZXMKZ29sZCBhbmQgYmxhY2sKOCBrIHVoZCBwb3N0IC0gcHJvZHVjdGlvbgp3aGl0ZSBtZXRhbCBhcm1vcgoyMDAgbW0gbGVucwpva3RhbmUgcmVuZGVyCmN5YmVycHVuayBhcnQgbm91dmVhdQpkZXRhaWxlZCBiZWF1dGlmdWwgYW5pbWFscwpkZXRhaWxlZCBiZWF1dGlmdWwgcGxhbnRzCjMgZCBwbGF0b25pYyBzb2xpZHMKc29tZSB5ZWxsb3cgZ3JlZW4gYW5kIGJsdWUKc29mdCBncmVlbiBuYXR1cmFsIGxpZ2h0CnJlZGRpc2ggbGlnaHRpbmcKdW5jYW5ueSBhdG1vc3BoZXJlCmNsYXVzdHJvcGhvYmljIGFuZCBmdXR1cmlzdGljCmZ1dHVyaXN0aWMgc29sZGllcgpwb3J0cmFpaXQKdmlvbGV0IGNvbG9ycwp6ZXJvIGRhd24KdHdvIGxlZ3MgdHdvIGFybXMgb25lIGhlYWQKaGVyb2ljIHByb3BvcnRpb25zIGZpZ3VyZQpvdXRkb29yIGZhaXJncm91bmRzCmxpZ2h0IGJsdWUgYW5kIHdoaXRlIHRvbmVzCmluIGEgZGVlcCBmb3Jlc3QKYnkgcnVhbiBqaWEgYW5kIHN0YW5sZXkgYXJ0Z2VybQp2ZXJ5IGxhcmdlIHNjYWxlcwpiYXR0bGVmaWVsZCBzY2VuZQptaW5pbWFsaXN0aWMgYXJjaGl0ZWN0dXJlCnRoZSBuYXR1cmUgb2YgZXhpc3RlbmNlCmNhcmFtZWwuIHJ1Z2dlZApnYW1lcnMgbWFnYXppbmUgY292ZXIKZm9vdHByaW50cyBpbiB0aGUgc2FuZAooICggZnJhY3RhbCB3YXZlcyApICkKY29zbWljIGdpcmwKZmlzaG5ldApvdmVyZ3Jvd24gZm9yZXN0CmNvdW50cnkKdGhpZXZlcnkgZXF1aXBtZW50CmdyZWcgcnV0a293c2tpIGNvbmNlcHQgYXJ0CmhpcyBleWVzIGxvb2sgd2lzZQpxdWFpbnQKY3JhenkgZmFzaGlvbiBjYXR3YWxrCmNsZWFyIGxpbmUKd2luZG93IHRvIG5pZ2h0IHRpbWUKd2FybSBsaWdodGluZyBpbnNpZGUKcHVkZW5kYQptYW4gZmFjZQpibHVlIHdhZmZsZSBjb25lCmJyaWdodCBwaW5rIHB1cnBsZSBsaWdodHMKbXV0YXRlZAp0cmFuc3BhcmVudCBsYWJzCnRoaXJkIHBlcnNvbiB2aWV3CmVhZ2xlIGZlYXRoZXIKbWluaWF0dXJlIGZyb2cKcGFyYXNvbHMKY3V0ZSBjYXJhY2FsIGluIGJhdGh0dWIKOCBrIGRldGFpbGVkIHBob3RvZ3JhcGgKaGQgcnR4CmhlYXJ0IGV5ZXMKd2l0Y2ggZ2lybApzb290aHNheWVyCmRyYW1hdGljIHRocmVlIHBvaW50IGxpZ2h0aW5nCnJpdmVyIHN0eXgKcmliYm9ucyBhbmQgZmxvd2VycwpydWZmbGVkIHdpbmdzCmZlYXRoZXJzIHJhaW5pbmcKa2FybCBzcGl0endlZy4gc2hhcnAgZm9jdXMKd2l0aCBhbiBlbGVnYW50IHNtaWxlCmluIGEga2ltb25vCmhvbGRzIGEgc3dvcmQKY3V0ZSBraXR0ZW5zCmdlc3R1cmVzCm1ldGFsIGFuZCBnbG93aW5nIGV5ZXMKZ2VlZW4gc2tpbgpoZXJyaW5nYm9uZSBmbG9vcgppbiBjeWJlcnB1bmsgYWVzdGhldGljCmludHJpY2F0CnZpZXcgb3ZlciBjaXR5CmZyb3plbiB0ZWFyCmV2ZXJncmVlbiBicmFuY2hlcwpjeWJlcnB1bmsgYmVkcm9vbSBhdCBuaWdodApwb3dlcmxpbmVzCmF3ZXNvbWUgY29tcG9zaXRpb24KdmlicmFudCBvcmFuZ2UKdGVjaG5vdXZlYXUKY2hyb21hIGdyZWVuIGJhY2tncm91bmQKY3liZXJwdW5rIHdpbGQgd2VzdAppbmNhbmRlc2NlbnQgbGlnaHRpbmcKc2NpZW5jZSBmaWNpdG9uCmN5Ym9yZyByb2JvdApqdW1waW5nIHNwaWRlcgpmb3ggZWFycyBpbGx1c3RyYXRpb24KZHJhZwpleHRyYXZhZ2FudCBkcmVzcwpkYW4gbXVtZm9yZCB0b20gYmFnc2hhdwp2ZWN0b3JhcnQKaWxsdW1pbmF0aSBzeW1ib2wKZGFyayBhbGxleQpleHBvc2luZyBzY3JldwpzYW5kd2ljaApjdXJscyBoYWlyCnN0ZXBoZW4gZ2FtZWxsCm1ha290byBzaGlua2FpIGFydCBzdHlsZQo4IDAgbW0gZmlsbQpkYXJrIHdhbGxwYXBlcgp3YXJjcmFmdCBibGl6emFyZCB3ZWFwb24gYXJ0CnVsdHJhIGRldGFpbGVkIHBob3RvCndpbGxlbSBjbGFlc3ouIGhlZGEKaG9sZGluZyBsaWdodHNhYmVyIDQgawpraWQgYW5kIG1hZCBzY2llbnRpc3Qgd2Fsa2luZwpzaGFycCBwb2xhcm9pZCBwaG90bwp0aGljayBwYWludCBicnVzaCBzdHJva2VzCmNpbmUgY29sb3JzCmludHJpY2F0ZSBkZXRhaWwgZHJhd2luZwpzYWx1c3RpYW5vIGdhcmNpYSBjcnV6CmxpdGEgY2FiZWxsdXQKZGVtaSByb3NlCnN0dWRpbyB0cmlnZ2VyIGFuaW1lCmdpYW50IHRlZXRoCnRyYWtvdnNreSBncmVhdGVzdCBzY2VuZQpyb21hbiBzdHlsZQpsYXJnZSBsZWQgbGlnaHRzCm1pY2hhZWwga29ycwptZWF0IHZlaW5zCndlYXJlZCBpbiBsZWF0aGVyIGFybW9yCmhvcnJvciBkcmFtYXRpYyBtb21lbnQKaGlnaHkgZGV0YWlsZWQgZmFjZQpjb3Zlci4gcGhvdG8gOiBkYXZpZCByb2VtZXIKc21hbGwgc3BhY2VjcmFmdCBpbiBiYWNrZ3JvdW5kCmZhY2UgYW5kIGJvZHkgZmVhdHVyZXMKc3R5bGUgb2Ygam9obiBoYXJyaXMKc2lsayBzY3JlZW4Kc29mdCBldmVuaW5nIGxpZ2h0aW5nCmF0bW9zcGhlcmljIGVzdGFibGlzaGluZyBzaG90Cm1hZ2FsaSB2aWxsZW5ldXZlIGFuZCBtb25ldApkZXRhaWxlZCBwYWludGluZyBvZiBkdW5lIG1vdmllCnZhcmlvdXMgc2VkdWNpbmcgcG9zZXMKZ2xvd2luZyBmZWF0aGVycwpzb3VsIGZyZXF1ZW5jeQpmdXR1cmlzdGljIGxhYm9yYXRvcnkKZnJhY3RhbCBiYXJvcXVlCndlbGwgZGVmaW5lZCBtZWNoYW5pY2FsIGZlYXR1cmVzCnN1bm55IGFtYmVyIG1vcm5pbmcgbGlnaHQKc2xpbXkgYW5kIGhvdApmZW1hbGUgYWxpZW4KbGljaGVucwpzbW9vdGggaW4gOGsKZGlhZGVtcwpmaWVyeSByZWQKbG90cyBvZiBkaWNlcyBldmVyeXdlcmUKY2VudGVyIHBhcnRlZCBiYW5ncwpmdXJyeSBzdHlsZQp3aGl0ZSBsb25nIHN0cmFpZ2h0IGhhaXIKcGVyZmVjdCBsaWtlbmVzcwpnbG93aW5nIHBhcnRpY3VsYXRlCmRldGFpbGVkIGZlbWluaW5lIGZhY2UKcmVuZGVyZWQgd2l0aCBzdWJzdGFuY2UgZGVzaWduZXIKcm9iZXJ0IGNhcGEKbWVhZG93IGZsb3dlcnMKbW9ub2tpbmkKZmxvcmFsIGJsaW5nCmRlcmVhbGl6YXRpb24KZGlzY29ubmVjdGlvbgpzdW4gcHVkZGxlCmJsYWNrIGZ1bGwgcGxhdGUgYXJtb3IKZmVtYWxlIHZhbXBpcmUgd2FycmlvcgpleHBvc2VkIHRvZXMKYmFnIC0gdmFsdmUgbWFzawpiYW5uZXJzIHdpdGggbGVuaW4KZG9nIC0gZmFjZWQgbXVzY3VsYXIgZ29ibGluCmZvcm1lciBnYXNvbWV0ZXIgaW4gcm9tZQp0b25pIGluZmFudGUKaGVhZCBmb2N1cwpzcGl0ZmlyZQpvcHRpYyByaXBwbGUKYmxvb21lZCBsaWdodGluZwptaW5pbWFsIHN0cnVjdHVyZQp5YXlvaSBrYXN1bWEKbmF0aXZlIGFtZXJpY2FuIGFydApwYWxlIHBpbmsgYW5kIGdvbGQga2ltb25vCmV4YWdnZXJhdGVkIGFjY2VudHMKM2QgZGlnaXRhbCBhcnQgNGsKZmFudGFzeSB0dHJwZwp1bHRyYSBjbGVhciBkZXRhaWwKc2lsa3kgc21vb3RoCnBoYWxhbnggb2YgYXNoaWdhcnUgbWljZQptYXJpanVhbmEhCndvcm1ob2xlcwpjZW50ZXJlZCBoZWFkZHJlc3MKZHVuZSAxOTgyIG1vdmllCm9ybmF0ZSBnaWxkZWQgY29zbWljIG1hY2hpbmUKZWRnZSBvZiBpbnRlcnN0ZWxsYXIgc3BhY2UKbmF0aW9uYWwgZ2VvZ3JhcGhpY2FsCm5lYXIgYSB3aW5kb3cgd2luZG93CmNhbm9uIGVvcyA2ZAozIGNvbG91cnMKc3RhbmxleSBrdWJyaWNrIG1vdmllIGZyYW1lCmJsYWNrIHR1cnRsZW5lY2sgbGFjZSBkcmVzcwpmaWJlcm9wdGljIGhhaXIKYW5vbW9ycGhpYyBsZW5zIGZsYXJlCmxpZ2h0bmluZyBlbGVjdHJpY2l0eSBjb2lsCmhvbG9ncmFwaGljIHJ1bmVzCmFwb2NhbHlwdGljIGF0bW9zcGhlcmUKZWxlZ2FudCBnaXJsIGluIHVyYmFuIG91dGZpdAptb29keSBzdW5zZXQKaHVnZSBmbG93ZXJzCmVsZW1lbnRhbCBndWFyZGlhbiBvZiBsaWZlCjIgZCBzcGVsbCB2ZngKZWx2ZW4gYW5nZWwgbWVkaXRhdGluZyBpbiBzcGFjZQpkaXNjb2dzCnBsYW5ldCBob3RoCm1vb25zY2FwZQppbnRyaWNhdGUgbGVhdGhlciBhcm1vcgpiaWcgY3Jvd24gYWRvcm5lZCB3aXRoIGVtZXJhbGQKY3VydmFjZW91cy4gZGV0YWlsZWQgZXhwcmVzc2lvbgpsb29raW5nIGluIHRoZSBtaXJyb3IKbnVyc2Ugc2NydWJzCndpdGggaGVpZ2h0CndpZHRoCnNub3cgZHVuZXMKbGlvbmVzcwp3aWRlIGxlbnMgcGhvdG9ncmFwaHkKamltIHdhcnJlbiBhbmQgcm9iIGdvbnNhbHZlcwplcGljIDMgZCBhYnN0cmFjdCBlbW8gZ2lybAp0aGljayBsb29waW5nIHdpcmVzCmZsb2F0aW5nIG1vbml0b3JzCnNvbGFyIHBvd2VyZWQKc3R1bm5pbmcgY2hhcmFjdGVyIGFydAplcGljIGF3YXJkIHdpbm5pbmcKc292aWV0IG5vc3RhbGdpYQphdG1vc3BoZXJpYyByZWQgZWZmZWN0cwp3YXRlcmRlZXAKaHAgbXAgc3RhbWluYSBiYXJzCm5lb2JydXRhbGlzdGljCmhheQpjb25zaXN0ZW5jeQplbGlzaGEgY3V0aGJlcnQgYXMgYSBkJmQgcGFsYWRpbgpzYW0gbGVhY2gKYXluZSBoYWFnCnF1YW50dW0gdGVjaG5vbG9neQp2aWxsYQpvZiBhIDEgNyB0aCBjZW50dXJ5CmVzY2hlciBwYWludGluZyBvZiBhIGxha2UKc2hpcnRsZXNzIGJpZGVuIHdpdGggdGF0b29zCm1heW8KZXZpbCB2aWxsYWluCmRldGFpbGVkIG1ldGFsIHRleHR1cmVzCmV2b2NhdGlvbgpld2FuIG1jZ3JlZ29yCjAgMCAwCmNhcHRpdmF0aW5nIGV5ZXMKMSA4IDggNApzb2xlbW4gZmFjZQpjb21wZXRpdGlvbiBoaWdobGlnaHRzCmV4dHJlbWVseSBiZWF1dGlmdWwgbGlnaHRpbmcKd2Fsa2luZyB0b3dhcmQgeW91Cndvb2QgYWNjZW50cwpyZWZsZWN0aXZlIG9iamVjdHMKYm9vayBzaGVsZiBzbWFsbCBsaWJyYXJ5CjEvNHRoIHNodXR0ZXJzcGVlZApmYWNlIG1lbHRpbmcgaW50byB0aGUgdW5pdmVyc2UKaGlnaCBxdWxpdHkKZ3JlZW4gY29sb3IgcGFsZXR0ZQp2aXNpb25zCmlyaWRlc2NlbnQgYWVzdGhldGljCmJvdW5jaW5nCnZpZ25ldHRlIG9mIHdpbmRvd3NpbGwKY2l0eSB3YWxsCmdyZWVuIHN0ZWFtcHVuayBsYXNlcnMKZWxsb3JhCmRhcmsgZm9yZXN0IGluIGJhY2tncm91bmQKYmxhY2sgYW5kIHJlZCBkcmVzcwpyZW5haXNzYW5jZSBjb2xvcmZ1bCBkcmVzcwpoZWF2eSBsZW5zIGZsYXJlCmZhbnRhc3kgdG93bgpsYXJnZSBjdXRlIGFuaW1lIGV5ZXMKMjA5OSBuZW8tdG9reW8KZnV0dXJpc3RpYyBzdW5nbGFzc2VzCnNpZ21hIDggNSBtbSBmIDEgNgpwZWFrcwpmZWx1Y2lhIGxhbmRzY2FwZQpsb25nIGRhcmsgY3VybHkgaGFpcgpmYXN0IG1vdmVtZW50CmxpZ2h0IGJyb3duIG5lYXQgaGFpcgphcnQgbm91dmVhdSBwYWludGluZwpzdHlsaXplZCBjaGFyYWN0ZXIgZGVzaWduCnNpbmlzdGVyIGFuZCBzdHlsaXNoCmxvYXZlcwpubyBib3JkZXIKdGhlIHN1biBpcyBzaGluaW5nLiBwaG90b2dyYXBoaWMKaHlwZXJyZWFsaXN0aWMgZHJhbWF0aWMgbGlnaHRpbmcKbWluaW1hbCBib2R5Y29uIGZlbWluaW5lIGNvc3R1bWUKaHVnZSBsYWR5YnVnIG1vdGhlcnNoaXAKbWlkZ2FyCndlYXJpbmcgYSBwbGFzdGljIGdhcmJhZ2UgYmFnCmVib255IGFydCBkZWNvCnB1cnBsZSBza2luIGNvbG9yCnB1dCBvbiAxIDAgMCBwb3VuZHMgb2YgbXVzY2xlCmhnaApjb21mb3J0aW5nIGFuZCBmYW1pbGlhcgpvbmx5IHZpc2l0ZWQgZHVyaW5nIGRyZWFtcwpiYXJvcXVlIHN0eWxlIHBhaW50aW5nIGJhY2tkcm9wCmhlYWQgdG9yc28gbGVncyBmZWV0CmZpbG1hdGljCmJyaWdodCBjb25zdHJ1Y3Rpb24gbWF0ZXJpYWxzCmFkdmFuY2VkIGhpZ2h3YXkKZmxvcmVuY2UgcHVnaAplcGljIHZpc3VhbHMKZmxvd2VycyBpbnNpZGUgb2YgYSBtYXJibGUKcG9ydHJhaXQgb2YgYSBvbGQgd29tYW4KZ2FtZWRldgpmbHlpbmcgY2xvdWQgY2FzdGxlCnN0b3JtdHJvb3BlcnMKdmVzcGVydGluZQpiZXN0IGNoZWYKc2VyZ2VhbnQKZm9yZXN0IHBhdGgKYW4gaW50ZXJlc3RpbmcgY29sb3Igc2NoZW1lCmF2YXRhciBmb3Igd2Vic2l0ZQpmcHMgc2hvb3RlciBnYW1lCjkwJ3MgYWVzdGhldGljCm5vaXNlIGZpbG0KZGV0YWlsZWQgdmlzaWJsZSBicnVzaG1hcmtzCm1hcnZlbCBjb21pY3MgZHNsciBoZHIKc3R5bGUgaW4gZ2hpYmxpIGFuaW1lCmluIHRoZSBzdHJlZXQKaGFzc2VsYmxhdHQKYmlnIG9wZW4gZ3JlZW4gZXllcwpmdWxsIC0gYm9kaWVkIHBvcnRyYWl0CnJlZCBoaWdoIGhlZWxzCmZhc2hpb24gY29sb3Igc3R1ZGlvIGxpZ2h0aW5nCmluIHRzaGlydAprYXdhaWkgcGxheWZ1bCBwb3NlIG9mIGEgZGFuY2VyCnN1bWkgLSBlIGFydApzdWlib2t1IC0gZ2EgaW5rCnBlbiBhbmQgaW5rIG1vbm9jaHJvbWUKdmVyeSBleGNpdGVkCmhlYWQgb2YgYSBiZWFyCmV4dHJlbWUgZmFjaWFsIGRldGFpbApjeWJlciBhcm1vdXIKZmlyZWJyZWF0aGluZwp3YWthbmRhCmtvYmUgYnJ5YW50CmxpZ2h0c2FiZXIga2F0YW5hCmhvbGRpbmcgbWFnaWNhbCBmaWVyeSBiYXR0bGUtYXhlCnJlZCB2ZXN0CnRoaWNrIHNtb2tlIGFyb3VuZCBoaW0KYW50aHJvcG9tb3JwaGljIGNveW90ZSBtYWxlCmVsZWdhbnQgZ2xlYW1pbmcgamV3ZWxyeQpnb2dvIDogOgpmZW1hbGUgY293Z2lybAptayBuaW5qYQpoYW5kZ3VucwpmdWxsIGZhY2UgdGF0dG9vIGVwaWMgcG9ydHJhaXQKZ2VsYXRpbiBzaWx2ZXIgcHJvY2VzcyBwaG90bwpsaW1pbmFsICggZGlmZnVzaW9uCnNwYWNlcwpjb3JydXB0ZWQgYXJtb3IKamMgcGFyawprZXpyZWsKdmluY2VudCBtYXLDqWNoYWwKaW50ZXJjcm9zc2VkCmNyb3duIG9mICgoKHdoaXRlIGxhc2VycykpKQpjb2xvcmluZyBib29rIHN0eWxlCmZhbnBvcApiYXJlZCB0ZWV0aApyZWQgaGVhZGJhbmQKc2t5YnJpZGdlIHRvd2VycwptYWxlIHJvYm90aWMgYW50aHJvIGRyYWdvbgpibHVlIGxpZ2h0IGFjY2VudHMKc3RhciB0cmFpbHMgYWJvdmUKY3lib3JncHVuawphdG9taWMgYWdlIG1heGltYWxpc3QKdHJhaW4gd2l0aCBtYXJvb24KdGhhbWVzIHJpdmVyCmdhcmJhZ2Ugb24gdGhlIGdyb3VuZC4gcmFpbi4gZm9nCmphbWVzIGplYW4gYW5kIHJvbGYgYXJtc3Ryb25nCmV5ZWNhbmR5CmFsbGV5cwpoaWdobHkgZGV0YWlsZWQgZ29sZCBmaWxpZ3JlZQpjb25jcmV0ZSBzdGVlbCBnbGFzcwpnb3VmIG1vYmlsZSBzdWl0CmhlIGlzIGluIHNob2NrCnBhc3RlbCBvcmFuZ2Ugc3Vuc2V0CndhdGVybGluZSByZWZyYWN0aW9ucwp0d2lzdCBvZiB0aW1lCmRldGFpbGVkIHBhaW50aW5ncwpnYW1pbmcgcm9vbQpjbGVhciBlZGdlcwphbGVrc2FuZHJhIHdhbGlzemV3c2thCjIgZXllcwpnZW1pbmkgc3RhciBmb3JtYXRpb24KZGlnaXRhbCA0ayBwYWludGluZwphaSBhc3Npc3RlZCBkaWdpdGFsIHBhaW50aW5nCnB1YmxpY2l0eSBwaG90bwpwb21wYWRvdXIKcGVudGFnb24KZmFjZSByZWFsaXN0aWMKZ2hldHRvIGJsYXN0ZXIKY29sb3VyZWQgY29taWMKcG9saWNlIHRhcGUKZ2lhbnQgZHJhZ29uIHdpbmdzCmVwaWMgZmFudGFzeSBpbGx1c3RyYXRpb24KNzAncyBzY2ktZmkKcmVhbGlzdGljIHNrZXRjaApnaW5nZXJicmVhZCBjYW5keSB2aWxsYWdlCm1vZGVybiBjb21wb3NpdGlvbgpsb25nIG5haWxzCm11bHRpY2FtIHVuaWZvcm0KZ2lybCBzY3JlYW1pbiB5b2xvIC0gYWVzdGhldGljCmdpcmwgc2l0dGluZyBvbiBhIHJvb2Z0b3AKbWFnaWMgZXllcwpyb24gaGlja3MKbmF0dXJhbCBzdHVkeQpzY2VuZSBzZXQgaW4gYSBjaHVyY2gKdGhlIHN0YXJzIGFyZSBmaXNoIGluIHRoZSBkZXB0aHMKZ2xvZGVuIGFybW9yCmNsYXNzaWZpZWQgZ292ZXJubWVudCBhcmNoaXZlCjQgayBjbG9zZSB1cAptYWxlIGNoYXJhY3RlciBkZXNpZ24KZ29kIHNoaXZhIHRoZSBkZXN0cm95ZXIKZ29sZCBhbmQgc3RlZWwgaW50cmljYXRlCmdvZGRlc3Mgc2hvdAp3ZXQgaGFpcnkgYm9kaWVzCndldCBmZWV0IGluIHdhdGVyCndldCBleWUgaW4gZm9yZWhlYWQKYXJ0Z2VybSBtb29keSBwaG90b2dyYXBoeQpzZW50aWVudCBiaXJkCmhpZGVvIG1pbmFiYQpkYXJrIGZvcmVzdCBhbmQgdHJlZXMKaG9ycm9yIG1vdmllIHNsYXNoZXIKZmxvd2VyIGluIGhlciBoYWlyCndlYXJpbmcgYmxhY2sgc2hvcnRzCmhvbGRpbmcgYSB0YXR0ZXJlZCBtYWdpY2FsIGJvb2sKZ290aCB0cmFuc2Zvcm1lcnMKbWFueSBmbG9vcnMKZnJlZWRvbSBmaWdodGVyCmJydXRhbGlzdCBlbnZpcm9ubWVudAoxIDggdGggY2VudHVyeS4gb2lsIG9uIGNhbnZhcwp0aGluIGJvZHkKZ3JvdHR5CnRlcnJpZnlpbmcgYXJjaGl0ZWN0dXJlCmJpY3ljbGVzCmdyb3VwIHBvcnRyYWl0cwpkaXNzb2x2ZSBlZmZlY3RzCmhkciA4IGsgZG9wIGRvZgptYXJzIHZhY2F0aW9uIHBob3RvCmhhYml0YXQgNiA3Cm1lc3N5IGJhbmdzCnJlZCBjb250YWN0IGxlbnNlcwpibGFjayBjeWJlcmxveAppbiBzdHlsZSBvZiBkaWdpdGFsIHBhaW50aW5nCm5vYWggYnJhZGxleS4gc2hhcnAgZm9jdXMKdHVubmVscyBsZWFkIHRvIGRpZmZlcmVudCB3b3JsZHMKdGhlIHdvcmxkCnRpbnkgcmFpbmJvdyB0cmlhbmdsZXMKaGFycnkgcG90dGVyIGF0IGEgdGFyZGlzIGNvbnNvbGUKc2NhcnJlZCBsaXAKZnJhY3RhbCB0YXJvdCBjYXJkIHN0eWxlCnNjYXJpZXN0IGxvb2tpbmcgbWFuIGFsaXZlCmxvbmRvbiBnYW5nIG1lbWJlcgpjYWxsaWdyYXBoaWMgcG9ldHJ5CmZyYWdtZW50ZWQgdHlwb2dyYXBoeQpjcmF5b24gbGluZXMKaW5rIGZsb3VyaXNoZXMKYmVzaW5za2kgc3R5bGUKbGVhdGhlciBhcHJvbgpob2x5IGNydXNhZGVyIG1lZGlldmFsIGtuaWdodApyZWFsaXN0aWMgc2hhcnAgZGV0YWlscwpoZWxlbiBtY3JvcnkKbXV0ZWQgY29sb3JzLiB1ZSA1CmFuY2llbnQgZ3JlZWsgdGVtcGxlIHJ1aW5zCnB1bHAgbWFnYXppbmVzIGNvdmVyIGFydApoaWdoIGRyYW1hCmhlcm9pYyBmYW50YXN5IGNoYXJhY3RlciBjb25jZXB0CmNvbG9yIGFlcmlhbCBwaG90byBkcm9uZQpuZW9uIHB1cnBsZSBsaWdodApjeWJlcnB1bmsgbW9ub2NsZSEKbmVvbiBtYWRodWJhbmkKIWFudGhyb3BvbW9ycGhpYyEKb24gYSBsYXJnZSBtYXJibGUgd2FsbApkcmFnb25saWtlCmNoaWNrZW4gZmFjZSBtb3JwaGVkIGZpc2ggaGVhZAp3aGl0ZSBuZW9uIGxpZ2h0cwpoaWdoIHRlY2ggY29uY3JldGUgYmVuY2ggY3ViZQpuZCA0CjMgNSBtbSBmaWxtIHBob3RvCndoaXRlIGJsb25kZSBoYWlyCnBlbmNpbCBkcmF3CmNoYXJnaW5nIHRocm91Z2ggY2l0eQp0YXJ0YW4gaG9vZGllCnRhcnRhbiBnYXJtZW50CmNhbWVyYSBjbG9zZSB0byB0aGUgbGVncwpidXQgYXMgYSBkcmFnb24KdHdvIGxlZ2dlZCB3aXRoIGNsYXdlZCBmZWV0CnN0YW5kaW5nIGVsZWdhbnQgcG9zZQpkYW5jaW5nIGVsZWdhbnRseSBvdmVyIHlvdQpkeXN0b3BpYW4gZ3J1bmdlCmZhbnRhc3kgdmljdG9yaWFuIGFydAptYXN0ZXJwaWVjZSBkZXRhaWxzCnJldHJvd2F2ZSBjb2xvdXIgc2NoZW1lCmZpbmUgcGF0dGVybnMgYW5kIGRldGFpbApuaWdodGNsdWIgZGFuY2luZyBpbnNwaXJlZApicm93biBhbmQgcGluayBjb2xvciBzY2hlbWUKaW4gYmF0bWFuIGNvbWljIGJvb2sKb2xkIGFiYmV5IGluIHRoZSBiYWNrZ3JvdW5kCnJvb20gbW9ubyB3aW5kb3cKY2xvYWsgZmxpdHRlcmluZyBpbiB0aGUgd2luZApoaWdobHkgZGV0YWlsZWQgdmZ4IGVzcHJlc3NvCmhpZ2hseSBkZXRhaWxlZCB2ZnggcG9ydHJhaXQgb2YKNDA5NmsgZmlsbQpsb25nIHN0cmFpZ2h0IGJhbmdzCmltYWdlIGluIGNlbnRlcgpzbGlkaW5nIGdsYXNzIHdpbmRvd3MKZ3JhZGllbnQgYXBlcnR1cmUKYWNjbGFpbWVkIG1hc3RlcnBpZWNlCnNzciBjYXJkCmhvcnNlIHJhY2luZwpoaWdoIGRldGFpbCBiYXJvcXVlIG9pbCBwYWludGluZwp3ZWFyaW5nIGNsb2FrCmh1bWFub2lkIHJvYm90cwp2YXN0IGxpYnJhcnkKd2lubmVyIG9mIHRoZSB5ZWFyJ3MgYmVzdCBwaG90bwpzY2FsZXMgd2l0aCBtYWdpYyBwb3dkZXIKc2lzeXBodXMgY29tcG9zdGl0aW9uCnN1YnN0YW5jZSBkZXNpZ25lciBtZXRhbAphbmRyZXcgZ29uemFsZXoKODUgbW0gZjEuNAp3ZWFyaW5nIHdvb2wgc3VpdAppdm9yeSBtYWtlIHVwCndlYXJpbmcgZGFyayBzaWxrIHJvYmUKc2lsdmVyIHBhbGV0dGUKb3JhbmdlIGJsb29taW5nIGZsb3dlcnMgZ2FyZGVuCnBlcmZlY3QgbWFuCndhbmRlcmVycyB0cmF2ZWxpbmcgZnJvbSBhZmFyCmN5YmVycHVuayBzaWducwphbmF0byBmaW5uc3RhcmshIQpjeWJlcnB1bmsgc3VuZ2xhc3Nlcwp3YXIgYXJtb3IgYmF0dGxlCmljZSBxdWVlbgpwaGlsaXBwZSBzdGFyY2sKaWNvbiBwYXR0ZXJuCnByb2Zlc3Npb25hbCBvbmxpbmUgYnJhbmRpbmcKZ2xvd2luZyBsYXNlcnMKZm9nZ3kgdm9sdW1ldHJpYyBsaWdodGluZwpmbGFzaCBleHBsb3Npb25zCmJ5IHRvbSBwdXJ2aXMKc3R5bGl6ZWQgbGluZXdvcmsKZnVubnkgbWVtZSBwaG90bwplbGFib3JhdGUgYnJhaWRlZCBoYWlyCmhhc2h0YWdzCnNwbGFzaGVzIG9mIGNvbG9ycwppbiBhIGR1c3R5IHJlZCBkZXNlcnQKYXJndWluZwpleWVzIHJlYWxpc3RpYwpjb2xvcmZ1bCBjcm93ZAppbnRyaWNhdGUgZmlsYWdyZWUKY29vbCBvZmZzZXQgY29sb3JzCmJlYXV0aWZ1bCBzbWFsbCB0b3duCmRldGFpbGVkIHJlYWxpc2l0YyBleWVzCnByZXR0eSBhbmltZSBmYWNlCmJyb2tlbiBicmlkZ2VzCmh5cGVycmVhbGlzdGljIGludHJpY2F0ZSBkZXRhaWxzCmhhcmR3b29kIGZsb29yIGJvYXJkcwphY2FkZW1pc20KaW50ZXJpb3Igd2hpdGUgd2FsbAppcmlkZXNjZW50ICMgaW1hZ2luYXRpdmVyZWFsaXNtCnNsaW1lcgphbGV4YW5kcmUgZmVycmEgbWVjaGEKdmVyeSB0aWdodCBzbWFsbCBwdXNoIHVwIGJyYQpzbW90aCAzIGQgaWxsdXN0cmF0aW9uCndhbGwgZGFya25lc3MKY2FzdCBpcm9uIG1hdGVyaWFsCm9mZnNldCBwaG90b2dyYXBoeQpqYXBhbmVzZSBkb3dudG93bgpyaWRlIG9uIHRpbWUKZ2xlbm4gZmFicnkgYW5kIGZyYW5rIGZyYXpldHRhCmRldGFpbGVkIHVwcGVyIGJvZHkKam9keSBoaWdocm9sbGVyCnR1bWJsciB0cmVuZGluZwpqb2UgYmlkZW4gZmx5aW5nIHdpdGggamV0IHBhY2sKZmlsbSBhcnRpZmFjdHMKZGVheWFtaSBrb2ppbWEKaXJpZGVzY2VudCBtZW1icmFuZXMKZ2VsYXRpbm91cyB3aXRoIHRlZXRoCnRob3IgMiBtYXJ2ZWwgZmlsbQpwZXJzaWFuIGZvbGt0YWxlIGFydCBzdHlsZQprbmlnaHQgaGVsbWV0CnBvc2luZyBsaWtlIGEga25pZ2h0CjEgOSAyIDAgcyBjbG90aCBzdHlsZQp3b29kIHRleHR1cmUgb24gdG9wCmRyYWtlIHRoZSByYXBwZXIncyBmYWNlCmJ1cm5lZCBjYXJzCmdlaXNoYSB0YXR0b28Kd2VhcmluZyB2ZXJzYWNlIHN1bmdsYXNzZXMKZmVhdHVyZWQgb24gdm9ndWUKbGFkeWJ1Z3MKd3JlY2tlZCB0ZWNobm9sb2d5Cm1vZGVybiBjaXR5IHNjYXBlCmFtYXppbmcgd2VhdGhlcgpzbW9vdGggZHJhdyB3aXRoIG9pbCBwYWludGluZwpmYXJvZQpjb2xvciBsaW1pdApnaXJsIGZsb2F0aW5nIGluIGEgZmxvd2VyIGZpZWxkCnN0cm9uZyBlZXJpZSBiYWNrIGxpZ2h0CmVlcmllIGJhY2sgbGlnaHQKbGFycnkgZGF2aWQgcGxheWluZyBwb2tlcgpyaWNoIGVzdGF0ZQpwdXlhbGx1cCBiZXJ0ZXJvbmlhbgpoaW1hbGF5YW4gcG9wcHkgZmxvd2VycwpyaWNoIGlyaWRlc2NlbnQgc3BlY3VsYXIgY29sb3JzCm9wZW5pbmcgYSBzaGluaW5nIHBvcnRhbAp4IC0gd2luZ3MKc3RhciByb29mCmtvcmVhbiB0cmFkaXRpb25hbCBwYWxhY2UKZmFsbGluZyB3YXRlcgpuZXZlcmVuZGluZyAtIHN0b3J5CmxpdHRsZSBib3kgd2VhcmluZyBudW4gb3V0Zml0CjggNSBtbSBmIC8gMi4gNAptYyBlc2NoZXIgdGVzc2VsbGF0aW9uCnZlcnkgaHVtb3JvdXMgaWxsdXN0cmF0aW9uCm15c3RlcmlvdXMgY3JlYXR1cmUKc2FyZ2VudCBhbmQgcmFmZmFlbG8gbW9udGkKbG92ZSBpbiBtb3Rpb24KcmVhbGlzdGljIHRleHR1cmVkIG1hZ25ldG9zcGhlcmUKc3Bhc21zCnZvaWQgb2YgZGFya25lc3MKY29iYWx0IGJsdWUgYW5kIHB5cnJvbCByZWQKZWR2YXJkIG11bmNoIGpvaG4gYmVya2V5CmhpZ2gtdGVjaCBkZXZpY2VzCnJlZCByaWJib24KYW4gZXhwcmVzc2l2ZSBkaWdpdGFsIHBhaW50aW5nCmlnbmVvdXMgcm9jawptYWdpYyBsaXN0Cm1hZ2ljIHJ1bmUKYmVhdXRpZnVsIGZhaXJpZQppcnJlZGVjZW50CndhdGVyIHBvd2VycyB3YXRlciBzd2lybGluZwpoaWdoIGRldGFpbCBhbGV4IGNvbHZpbGxlCm1hcG8gdG9mdQpiYXJrIGZvciBza2luCnN1YnRsZSBwYXR0ZXJucwpkYXJrIHRlbmVicm91cyBibHVlIGJhY2tncm91bmQKYXVyYSBlZmZlY3QKcmVjbGluaW5nIG9uIGJlZApwbHVzaCBsZWF0aGVyIHBhZHMKcmFhbApjaW5lbWF0aWMgc3BlY3VsYXIgbGlnaHRpbmcKc2t5IHdpdGggc3dpcmxpbmcgY2xvdWRzCnNoaW5pbmcgY3Jlc2NlbnQgbW9vbgpkYXJrIGFuZCBldGhlcmVhbAptYXR0ZSBwYWludGluZyBwb3J0cmFpdCBzaG90CnN0ZWFtcHVuayBkZXNpZ24KZHJhd24gcHJvamVjdHMgb24gcGFwZXIKaW5zdHJ1Y3Rpb25zIHRvIGJ1aWxkIGl0CnZpa2luZ3MKMzU4MDc4MDU4NgpyZWQgYW5kIGdyZXkgb25seQptZWRpdW0gcG9ydHJhaXQgdG9wIGxpZ2h0CmVsbGllIGJhbWJlciBmYWlyeQpjb2NreSBleHByZXNzaW9uCmdlb21ldHJpY2FsIHNoYXBlcyBhbmQgbGluZXMKb2lsIHBhbnRpbmcgb24gY2FudmFzCm1leGljYW4gdmFxdWVybwp0cnVtcCBoYWlyCmZ1bGwgY2hlZWtzCnZlcnkgYWJzdHJhY3QKc2N1bHB0dXJlIG9mIGEgd29tYW4KcG9ydHJhaXQgb2YgZGFlbW9ucwp3aGl0ZSBnYWxsZXJ5CmluIGEgY290dGFnZWNvcmUgZmxvd2VyIGdhcmRlbgpjeWJlcnB1bmsgdmFwb3J3YXZlCnN1cGVyIGRldGFpbGVkIGludHJpY2F0ZQpsYXJnZSB0ZXh0CnZmeCBwb3dlcnMgYXQgbmlnaHQgaW4gdGhlIGNpdHkKbWFzb25pYyBhcnQKc3RhbmRpbmcgb24gYm91bGRlcgpmYXN0IGVuZXJneQpwYWxtIHNraW4KZ3JleSBtYXR0ZXIgYW5kIG5ldXJvbnMKZHJhbWF0aWMgcHJvZmVzc2lvbmFsIGxpZ2h0aW5nCm5hemd1bCBmcm9tIGxvcmQgb2YgdGhlIHJpbmdzCnNuYWtlIGhlYWRzCm5lcmR5IGJsYWNrIGdpcmwgc3VwZXIgaGVybwpuZXVyb21vcnBoaWMgY2hpcAp2aWMgamFtZXMKZWxlY3RyaWMgbWFydGluYQpoZWF0aCBjbGlmZm9yZApraW1pIHZlcmEKd2V0IG1vdXRoCm5pZ2h0bWFyZSB2aXNpb24Kd2VhcmluZyB0cmFuc2x1Y2VudCBzaGVldApuaWdodHRpbWUgaW4gZ290aGFtIGNpdHkKbmlrb2xhaSB0ZXNsYSBpbiBoaXMgbGFiCmZ1bGwgYm9keSB3b3JuIG91dCBkYW1hZ2VkIGNhcGUKbm8gbWFuIHNreSBjb25jZXB0IGFydApydWcKd2hpdGUgcm9ja3MgbWFkZSBvZiBib25lCnNvZnQgdmlicmFudCBjb2xvcnMKYmVhdXRpZnVsIGl0YWxpYW4gYmVhY2ggc2NlbmUKaG9sZGluZyBzYWJyZQpob2xkaW5nIHNjaS1maSByaWZsZQpyZWFsaXN0aWMgZmxvd2VycyBvaWwgcGFpbnRpbmcKZHVzdHkgc3RyZWV0CmhpZ2hseSBkZXRhaWxlZCBicnVzaHN0cm9rZXMKZnJlbmV0aWMgb2lsIHBhaW50aW5nCm9pbCBwYWludGluZyBvZiBkcmFnb24gZm9yZXN0Cm9pbCBwYWludGluZyB3aXRoIGJydXNoc3Ryb2tlcwpwdW5rIHJvY2sgd2l0aCBtb2hhd2tzCm5lb2RhZGEKaW5kaWdvIGJsb29taW5nIGZsb3dlcnMgZ2FyZGVuCmxhdGUgODAncwpvbGQgbWFuIGRvaW5nIGhhcmQgd29yawpyZWFsIHRleHR1cmUgZWZmZWN0CnNjYXJ5IHF1ZWVuIG9mIGRlYXRoCm9uIG9jZWFuCm9uZSBmYW1vdXMgcGVyc29uCnJvZG5leSBtYXR0aGV3CnBvcnRyYWl0IHNpemUKY2xvdGhlZCBob2x5IGJvZHkKZ29sZGVuIGdsb3ZlcwpzdWJ0bGUgZWFydGh5IHRvbmVzCnNwYWNlc2hpcCBodWxsIHRleHR1cmUKbWF0ZXJpYWwgcGFjawo0IGsgdGV4dHVyZSBwYWNrCmFsZXhlaSBzYXZyYXNvdgpoYWlyIGlzIGZsb2F0aW5nCm9taW5vdXMgc2tpZXMKd2l0aCBhIGxhcHRvcCBvbiBoaXMgbGFwCnBhaW50aW5nIG9mIGEgbWFuCnBhaW50aW5nIG9mIGEgc2FuZCBsYW5kc2NhcGUKbWFnaWMgOiB0aGUgZ2F0aGVyaW5nIGFydApwdW5rcyBub3QgZGVhZCEKYmlvLWluc3BpcmVkCnJhcCBzY2VuZQpwYXRjaCBsb2dvIGRlc2lnbgpwaG90b2dyYXBoaWMgaHlwZXJyZWFsaXNtCmJyb3duIGNvYmJsZSBzdG9uZXMKYmxhaXIgYXJtaXRhZ2UKY2luZW1hdGljIHwgfCB2ZXJ5IGFuaW1lISEhCnR1cm5lZCBiYWNrIHRvIGNhbWVyYQpjYXJwZXQgYXQgdGhlIGZsb29yCnBoZWFzYW50IGd1YXJkIHNpdHMgb24gYSBzdHVtcApsb3cgZGFyayBsaWdodApjb3NtaWMgd2luZApwaG90byBvZiBhIGNhbXAgZmlyZSB1bmRlcndhdGVyCjEgNiBtbSBmIDEuIDQgbGVucwpyZWVmcwpzb2Z0IGZvY3VzIGhkciA4IGsKZ2xvd2luZyB5ZWxsb3cgZmFjZQpjbG90aGVkIGluIHNpbGsKcGhvdG8gb2Ygc2xpbSBnaXJsIG1vZGVsCmxpdHRsZSBzaHkgc21pbGUKOCBrIDggNSBtbSBmIDEgNgpjb2xkIGNvbG91ciB0ZW1wZXJhdHVyZQpraWNraW5nIHVwIGRpcnQKYm9rZWguIGRlYmFkZ2VkCmluIGFuIGNvbG9yZnVsIGFsaWVuIHBsYW5ldAphcmNoaXRlY3R1cmUgYXdhcmQgd2lubmluZwpkZXJlZ291ZQpwaG90b3JlYWxpc3RpYyBtdXNpYyBhbGJ1bSBjb3ZlcgppbiB0aGUgbWFnaWNhbCBmb3Jlc3QKdHJhbnNsdWNlbnQgc3RvbmUgd2hpdGUgc2tpbgpzdXJyZWFsIGNpdHlzY2FwZSBiYWNrZ3JvdW5kCnR5ZnR0CndlYXJpbmcgYSBsZWF0aGVyIGZsaWdodCBqYWNrZXQKZHJlYWRsb2NrIGJsYWNrIGhhaXIKZmFsbGluZyBmcm9tIHNreQppbnN1cm1vdW50YWJsZQpwaW5rIGZveApwaW5reSBwaWUgbXkgbGl0dGxlIHBvbnkKcGxhbmV0IGluIHNwYWNlCmJhcm4gb3dsIHN5bWJvbCBpbiBjaGVzdApibGFjayBzdGV0c29uIGFuZCBjb2F0CmF0IHNub3d5IGZ1amkgbW91bnRhaW4gc3VucmlzZQpwb3J0cmFpdCBvZiAoKGNoYXJsaXplIHRoZXJvbikpCnBvcnRyYWl0IG9mIGFyeWEgc3RhcmsKaGlnaCByZXMgOGsKcG9ydHJhaXQgb2Ygc2FpdGFtYQonb2JleScKdG9laQpwYWxlIGl2b3J5IHNraW4KZG93bnR1cm5lZCBoYXplbCBleWVzCndldCBkcmlwcGluZyBsb25nIGhhaXIKZ29sZCBzaWx2ZXIKcmFuZ2VyCm5ldyB5b3JrIGJhY2tkcm9wCm5hdHVyZSBhbmQgZmxvcmFsIGFlc3RoZXRpY3MKc3RhciB3YXJzIGV4cGFuZGVkCmV4cGVyaW1lbnRhbCBhbmFsb2cgcGhvdG9ncmFwaHkKZGVjYXkgdGVldGgKd2hpdGUgcmVhZGluZyBnbGFzc2VzCmVzYW8gYW5kcmV3cyBhbmQgZGF2ZSBtY2tlYW4KYW5hbG9ndWUgaW50ZXJmZXJlbmNlcwpzYXZhZ2Ugd2FycmlvcgpodW1hbm9pZCBjaGFyYWN0ZXIKZmFjZSBsaWtlIGVzdGVyIGV4cG9zaXRvCmd1aWx0eSBnZWFyIHN0cml2ZSBncmFwaGljcwpzdHJpcGVkIHBhbnR5aG9zZQooKChncmVlaykpKSByb21hbmlhbgpjaW5lbWF0aWMgaWx1bWluYXRpb24KdmVyeSB2ZXJ5IHZlcnkgdmVyeSBlbGVjdHJvbmljCnN0ZWFtcHVuayBhaXJzaGlwISEhISEhIQpzYW1vYW4gZmVhdHVyZXMKdGhvcm4gYmFja2dyb3VuZC4gZCZkCjIgY29sb3VyIHByaW50CnBvcnRyYWl0IG9mIGEgc2NpIC0gZmkgd29tYW4Kb24gYWlyY3JhZnQgY2FycmllcgpyZWQgcm9uYWxkIG1jZG9uYWxkIGhhaXIKYmxvbmQgYnJvd24gbG9uZyBoYWlyCnNob3J0IGZhY2UKc29mdCBmcm9udGFsIGxpZ2h0CmRyaW5raW5nIGEgZ2xhc3Mgb2Ygd2hpc2tleQpibGFjayBvbiBibGFjay4gaW50cmljYXRlCnBvcnRyYWl0IG9mIGFicmFoYW0gbGluY29sbgpmYWNlIGFuZCBza2luIGlzIGRhcmsgcmVkCnBvcnRyYWl0IG9mIGFwZXggbGVnZW5kcwpzb21lIGdyZWVuCnJlYWRoZWFkCnRoZSBmdXR1cmUgYWdlcwpzb21lIHJlZCB3YXRlcgoxIHBldGFwaXhlbCBpbWFnZQpuYXNhIHF1YWxpdHkKbm8gbG9nbyEhIQpmYW5hdGVjIHBlcmlwaGVyYWxzCnNtb2t5IHNreSBiYWNrZ3JvdW5kCm1hbiB3ZWFyaW5nIGEgY2xvc2VkIGNvd2wKcGluayBoYWlyIGJvdwppbiBnYW1lIGdyYXBoaWMKcG9ydHJhaXQgb2YgZW1wZXJvciBvZiBtYW5raW5kCnBvcnRyYWl0IG9mIGZpZ3RoZXIgamV0IGV2YWRpbmcKZmlnaHRpbmcgZm9yIGhpcyBsaWZlCnBvcnRyYWl0IG9mIGhpZ2ggc2Nob29sIGdpcmwKcHJvdWQgbG9va2luZyBhd2F5CmZyYW50aWMgZGFuY2luZyBwb3NlCnBvcnRyYWl0IG9mIG1vZGVybiBkYXJuYQpwb3J0cmFpdCBvZiBtb3JhbmEKbmVhciBhIGdhbGF4eQplc2FvIGFuZHJld3MgYW5kIHlvc2hpdGFrYSBhbWFubwpwb3J0cmFpdCBvZiB3aWxsb3cgc21pdGgKc2lsdmVyIHBvbnl0YWlsIGhhaXIKYmxhY2sgcHVsY2luZWxsYSBtYXNrCm1hc3F1ZXJhZGUgbWFzawpzeW1tZXRyaWMgYnJpZ2h0IGV5ZXMKMzAgeWVhciBvbGQgbWFuCnphYyBlZnJvbgpibGFjayB0b3AgaGF0CnNuYWlscyB2cyB3b3Jtcwpwb3N0IC0gYXBvY2FseXB0aWMgY2l0eSBzdHJlZXRzCnBvc3QgLSBhcG9jYWx5cHRpYyBzY2F2ZW5nZXIKbGFyZ2UgaGFwcHkgZXllcwpkaiBzdXJhCnByaW5jZXNzIG9mIGRhcmtuZXNzCmJhbGFuY2VkIGNvbG9ycwp0b3lzIGZpZ3VyZXMKbWlzdCB2YXBvcgpwcm9maWxlIG9mIGFuaW1lIGdpcmwKeW91bmcgaGFycHktZ2lybAp1bmRlcndhdGVyIGluayBlbnYKd2lzcHkgZ2lnYW50aWMgd2luZ3MKdmVyeSBsb25nIHdoaXRlIGhhaXIKMTk4MCBzdHlsZQpkYXJrIGRlZXAgYmx1ZQpxdWVlbiBvZiBmbG93ZXJzCnZlcnkgcmVkIGNvbG9ycwpyYWJiaXQgcm9ib3QKamFtZXMgbyBiYXJyCm9iamVjdCBmZWF0dXJlcwpyZWFsIHZpbnRhZ2UgcGhvdG8Kc29mdCB3aGl0ZSBydWJiZXIKZGVuaXMgdmlsbGVuZXV2ZSBjaW5lbWF0b2dyYXBoeQpwbGF5aW5nIGNhcmQgc3VpdCBoZWFydHMKcmVhbGlzdGljIGRldGFpbGVkIGZhY2UgcG9ydHJhaXQKd2F0ZXIgd2F0ZXIKaW4gc3R5bGUgb2YgYWRkeSBjYW1wYmVsbAp2aHMgY29sb3VyIHBob3RvZ3JhcGh5Cm5lbyAtIG5vaXIgc2V0dGluZwpyZWltdSBoYWt1cmVpCnJlbGF4ZWQgZHdhcmYgd2l0aCB3aGl0ZSBoYWlyCnJlbmF0YSBnbGFzYwpibHVlIGV5ZSBhbmQgZ3JlZW4gZXllCnJldHJvIGZ1dHVyaXN0aWMgYXBhcnRtZW50CmRldGFpbGVkIHdvb2QKY3ViZXMgb2YgaWNlIGFyb3VuZApwZW9wbGUgY3J5aW5nCnJvYm90IGR1Y2sgY29uY2VwdCBwb3J0cmFpdAp0cnVlIGV2aWwKbWFzc2l2ZSBib290cwpzYW5jdGlvbnMgaW4gcnVzc2lhCnNjYW5keSBhbmQgYXJlbmRlcgpjb29raW5nIGl0IHVwCmhvdCBob3QgaG90CmFoaGhoaGhoCnJvb21pZXMKYm9oZW1pYW4gZGlnaXRhbHMKcXVhbGl0eSBhc3RyYWwgcHJvamVjdGlvbiByZW5kZXIKb24gdGhlIHZhc3Qgd2hlYXQgZmllbGRzCnphaGEgaGFkaWQgc3R5bGUgYXJjaGl0ZWN0dXJlCjggMCdzIGhvcnJvciBhbmltZQpjb2xvciBrb2RhayBzdG9jawpzY3VscHR1cmUgbWFkZSBvZiB3b29kCnNwaXJpdHVhbCBmZWVsaW5nCnNlbWkgcmVhbGlzdGljIGdvdWFjaGUgcGFpbnRpbmcKd2hpdGUgY2FuZGxlcyBkcmlwcGluZyB3YXgKc2VyYXBoaW5lCmhhbmQgb24gaGlwcwpzZXh5IGdpcmwgd2l0aCBkYXJrIGJyb3duIGhhaXIKb2xkIGFuZCB5b3VuZwpzaGFycCBocSByZW5kZXJpbmcKZnJvbSBhIDIgMCAxIDkgc2NpIGZpIDggayBtb3ZpZQpsaWZlIHBob3RvZ3JhcGh5Cm9jY3VsdCByb2Jlcwp2YXN0IHNlYXMKZ2lnZXIncyBiaW9tZWNoYW5pY2FsIHhlbm9tb3JwaAp1bnJlYWwgZW5naW5lIHNjcmVlbnNob3QKYWN0aW9uIGdhbWUKcnVzc2lhbiBvcHBvc2l0aW9uIHJhbGx5CnJ1c3NpYW4gZmxhZ3MKY29sZCBhcyBpY2UhIPCfp4oKY29ycHNlIGJyaWRlZ3Jvb20gb2YgdGhlIHNwcmluZwpzbG90aCBhcyB0aGUga2luZyBvZiBjdXBzCmNhcnNvbiBlbGxpcwpibG9ja3kgbGlrZSBtaW5lY3JhZnQKY29uY2VwdCBhcnQgZm9yIG1vdmllCnNuYWtlLWZhY2UgbGFkeQpzb2xkaWVyIDcgNiBmcm9tIG92ZXJ3YXRjaApncm91bmQgZXhwbG9zaW9uCmdpcmxzIGZyb250bGluZSBjZwpsYXJnZSBtZXRhbCBqYXcKc292aWV0IHBvc3RlciBvZiB2aWt0b3Igb3JiYW4Kc3ByaW5nIGZsb3dlcnMKbGFuZCBtaW5lcwpzdGFybWFrZXIKc3RyYW5nZSBjcmVhdHVyZXMgd2Fsa2luZyBhcm91bmQKc3RlYW1wdW5rIGJ1dHRlcmZseQppbnNpZGUgYSBtYXJibGUKc3RpbGwgZnJhbWUgZnJvbSBwcm9tZXRoZXVzCjE2bW0gc29mdCBsaWdodAozIDUgbW0gZmlsbSBrb2RhawpzdXJyZWFsIGdsYXNzIGdvYmxldHMKdmVyeSBjb2hlc2l2ZSBhbmQgdmlicmFudApzdHJhbmdlIHN1cnJlYWxpc3QKc29saWQgZ3JheQpiam9yayBzbWlsaW5nCndpbmdlZCBoZWFkCnNpZ21hIDEgMCAtIDIgMCBtbQp3YXRlciBwYXJ0aWN1bGF0ZQpzcGVjdHJlcwpzdXJyZWFsIGdsaW1wc2UKdGVycmlmeWluZyBidXQgZmFzY2luYXRpbmcKc3dpbW1pbmcgdGhyb3VnaCB0aW1lCmxpbmUgc2tldGNoISEKbW9vZHkgbGlnaHRzISEgaW50cmljYXRlCnNsaWNlIC0gb2YgLSBsaWZlCmxpZ2h0bmluZyBoZWxtZXQKcmVwZWF0aW5nIHBhdHRlcm4uIHNlYW1sZXNzCm1hZ2ljIGJlbHQKc3R1ZGlvIHF1YWxpdHkgc21vb3RoIHJlbmRlcgpzbWFsbCBwb3J0cmFpdHMKc2lsdmVyIGFuZ2VsIHdpbmdzCnRhbmcgbW8Kc2hydWdnaW5nCnRhcGVzdHJpZXMgb2YgZHJlYW1zCm1hb3JpIG9ybmFtZW50CnBvbGluZXNpYW4gc3R5bGUKdGhleSBsb29rIG1lIGluIHRoZSBleWUKd3J4IGdvbGYKZXhxdWlzaXRlbHkgZGVzaWduZWQgdGhyb25lIHJvb20KdGhlIGZsb3dlciBwcmluY2UKd2lsZCBleWVicm93cwpzdHVkaW8gZ2hpYmxpLiBpbnRyaWNhdGUKc3VwZXIgbWVyZ2UKc3F1YXNoZWQKbG9uZyBzcGlrZXMKdGhlIHBhbGFjZSBvZiBhaQpoYW5uYSBtb29uCnRoZSBzZWEgb2Ygc2FkbmVzcwp0aGUgdGVudGFjbGUgY3Jvd24Kd2VhcmluZyB0aHVuZGVyIGFybW9yCnZpbnRhZ2UgbXV0ZWQgY29sb3JzCnRha2VuIGluIHRoZSBuaWdodAp0byBmYXRob20gaGVsbCBvciBzb2FyIGFuZ2VsaWMKLSBzaWduYXR1cmUKdG93ZXIgb2YgZ29kCmFuaW1lIGZpZ3VyZQp0cmFwcGVkIGluIG15IGNvbnNjaW91cwpmbG9hdGluZyBjaGluZXNlIGxhbXBvb25zCm9sZCByZXRybyBwdWxwIG5vaXIgY29taWMgY292ZXIKdHdpc3RlZCB0dXJuIG9mIGZhdGUgYWJzdHJhY3Rpb24KZmlzaG5ldCBjb3JzZXQgd2l0aCBjaG9rZXIKc2tpbiBzcGlrZXMKbGl0IHVwIGluIGEgZGFyayByb29tCnJlbmRlcmVkIGluIDggayB1bnJlYWwgZW5naW5lCnRoaW4gbHVzdHJvdXMgbG9uZyBhdWJ1cm4gaGFpcgpzcGFjZSBzaGlwIGluIHRoZSBkaXN0YW5jZQpiYW5hbmEgcGxhbnRzIGRyYXdpbmcKdWx0cmEgd2lkZSBnYW1lcGxheSBzY3JlZW5zaG90CmJlYXV0aWZ1bCBsaWdodCBiaWcgZXllcwpmZXcgZXllYmFsbHMKZGFyayBvY2VhbiB3YXRlcgp1bnJlYWwgZW5naW5lIHJlbmRlciArIGEgZ29kZGVzcwpyaWdodCBlbGV2YXRpb24KbWV0YSBkZXNpZ24Kd29sZmYgb2xpbnMgfAp2ZXJ5IGJlYXV0aWZ1bCBjdXRlIGNhdGdpcmwKZnVycnkgcGF3cyBmdXJyeQpvcGVuIHN0cmVldCBtYXBzCmNpbmVzdGlsbCA4MDB0IDE4bW0gNGsKenVtaQpheHNlbnMKbWVkaWNhbCBtdXNjbGUgYW5hdG9teQptYWtpbmcgZXllIGNvbnRhY3QKaGlnaCB0ZWNoIHNwYWNlIHNoaXAgaW50ZXJpb3IKYWxpZW4gc2VkaW1lbnRhcnkgc2NoZW1hdGljCm9pbHB1bmsKYmVuIHdhdHRzCnJ1aW5zIG9uIHRoZSBiYWNrZ3JvdW5kCnN5bW1ldHJpY2FsIGZhY2UgcG9ydHJhaXQKZmluYWwgZmFudGFzeSB0YWN0aWNzIGNoYXJhY3Rlcgp3aGVuIGl0J3Mgb3ZlcgpjcmVlcHkgYW5kIGVlcmllIGF0aG1vc3BoZXJlCndoaXRlIGxhYnJhZG9yIHJldHJpZXZlciBmYWNlCmxpZ2h0IGJsb29tIHN1bmxpZ2h0Cm5hdHVyZSBvdXRzaWRlCndpbGxpZSBuZWxzb24gb24gc3RhZ2UKd2luZSBjZWxsYXIgZnVsbCBvZiBmb29kCndpemFyZCBleGFtaW5pbmcgZWdncwp3b21hbiBpbiBidXNpbmVzcyBzdWl0CmluIGEgYmVkcm9vbSEhISEhISEhISEhISEhISEhISEhCndvcnNoaXAgb2YgdGhlIHBvcGUKbG9uZyBibG9uZGUgaGFpciBhbmQgYmx1ZSBleWVzCnZpbnRhZ2UgY29sb3VycyAxIDkgNSAwIHMKc2tldGNoZmFiIMK7CnBhcmFsbGF4IMK7CtCwIGZhbnRhc3kgcHJvdG8tc2xhdmljIG15dGhvbG9neQpyb21hbnRpY2lzdCBvaWwgcGFpbnRpbmcg4oCdCjEgOSAwIDAg4oCZIHMgcGhvdG8g4oCdCmNvbmNlcHQgYXJ0IOKAnQpzdXJnaWNhbCBpdiBkcmlwCmZsYXgKZmxhbm5lbCBmbG93ZXIKYm90dGxlYnJ1c2gKb24gZGlzcGxheSDigJ0KcGxhbnRzIGluIHNjaWVudGlmaWMgZ2xhc3N3YXJlCmN5YmVycHVuayDigJ0KY2VudGVyIHZpZXcKc3RvY2sgY29sb3IKZHJlYW1jb3JlIGFlc3RoZXRpYwo4NW1tIGxlbnPigJ0KYmxhY2sgYW5kIHdoaXRl4oCdCmFuaW1lIGtleSB2aXN1YWzigJ0K4oCcemVuZGF5YQphcnR3b3Jr4oCdCmF0bW9zcGhlcmlj4oCdCmNlbnRyYWwgcG9yawp3aG8gaXMgYSByb2JvdApzdHlsZSBvZiBjb25zdHJ1Y3RpdmlzbQpzb21lIHBlb3BsZSBhcm91bmQg4oCdCuS4rSDlhYMg6IqCCvCfjLLwn4yMCm1hZGUgb2YgZHJpbmsKc3dvcmQgZmlnaHQKISBkcmVhbQp3aXNweSBjbG91ZHMKYW5nZWxzIGFuZCBkZW1vbnMKZ3Jhc3BpbmcKc3R1ZGlvIHF1YWxpdApyYXl0cmFjaW5nIHJlZmxlY3Rpb25zCmNvbG91cmZ1bGwKYmx1ZSBncmFkaWVudAp1bmJlbGlldmFibGUKaW4gdGhlIHBhcmsKcGhvdG9ncmFwaCBjYXB0dXJlZCBpbiB0aGUgd29vZHMKbmV3IHplYWxhbmQKdGhpcmQgZXllcyBtaWRkbGUgb2YgZm9yZWhlYWRzCnZlcnkgd2lkZSB3aWRlIHNob3QKZGV0YWlsZWQgcGhvdG9ncmFwaHMKb2YgYSBmb3ggd2VhcmluZyBhIHNhbnRhIGhhdApvbGQgY29sb3IgcGhvdG8KaGlyb2hpa28gYXJha2kgYXJ0d29yawpibGFjayBjb2xvciBiYWNrZ3JvdW5kCmludGVuc2UgYmF0dGxlCmxhcmdlIHNjYWxlIGJhdHRsZQpqdWJpbGFudCBibGlzc2Z1bCBhdG1vc3BoZXJlCmFuIGlsbHVzdHJhdGlvbgpnaWdhbnRpYyBwaW5rIHJpbmdsZXRzCmh1Z2UgY3VybHkgcGluayBoYWlyCmdvcmdlb3VzIGNvbG9ycwpjb21pYyBib29rIGNoYXJhY3RlcgptZW1iZXIgb2YgdGhlIGVuZGxlc3MKc21va2UgZWZmZWN0cwphcnQgb2YgZCZkCnN0cmVldCBtYXJrZXQKaW50ZXJkaW1lbnNpb25hbAp2aWt0b3IgYW50b25vdgphcnQgZ2VtCmFraWthenUgbWl6dW5vCmpyciB0b2xraWVuCmhpZ2ggLSB0ZWNoIHNwYWNlIGN1bHQKc29mdCBzaGFkb3dpbmcKZHJlYW15IGFydAoobmlnaHQpCm11c2N1bG91cwpyYWluZm9yZXN0IGJhY2tncm91bmQKY2VkcmljIHBleXJhbmF2ZXJuYXkKcGV0ZXIgbW9ocmJhY2hlcicnCjQgbGVncwpyb21hbnRpYyBlcmEgcGFpbnRpbmcKc21hdWcKd2hpbXNpY2FsIGFydApvcm5hdGUgZ290aGljIGFybW9yCnJlYWxpc3RpYyBoYW5kCjEgOSA2IDAgcyBjYWZlIHJhY2VyCnBlcmZlY3QgZHJvdwpwaG90b2dyYXBoeSBwb3J0cmFpdApjaGFyYWN0ZXIgbW9kZWwKY2luZW1hdGljIG1vZGUKb3B0aWNhbCBmbGFyZQpnbG9iYWwgaWx1bWluYXRpb24KKCAoIG1pc2EgYW1hbmUgIyApICkKdmlzY291cyBzbW9rZQpibGFkZXJ1bm5lciAyIDAgNCA5ICkKKCBkb2cgKSBsb29rcyBsaWtlIGVsZXBoYW50CmluIGEgcGFyawpqb3NoIGJyb2xpbgpzcG9uZ3kKdHJvcGljYWwgY29sb3Igc2NoZW1lCmphbWVzIHlhbmcKc3R1ZGlvIG1pcgooYW5pbWUgZ2lybCkKcHJlc2VudHMKcmVkcykKc2hhcnAgZm9jdXMgNGsKY2l0eSBvZiBtdW5pY2ghISEKYWJhbmRvbmVkIHdhcmVob3VzZQpmYWNlIHdpdGggYmVhcmQKd2hlcmUgaXMgd2FsZG8KcGxhc21hIGdsb2JlCnB1bGl0dHplciB3aW5uZXIKZWxhYm9yYXRlIGxpZ2h0cy4gbWFzayBvbiBmYWNlCm9sZCB0b3duCnNlcGlhIHN1bgpnb3JnZW91cyA0IGsKZmFjZXMgb25seQpkaXJ0eSBmbG9vcgoxIDggOCAwIHMgYmlnIGdlcm1hbiBmYXJtaG91c2UKMSA4IDggMCBzIHBob3RvZ3JhcGgKbWV0cm9wb2xpdGFuIG11c2V1bSBvZiBhcnQKbmV3IHdhdmUgb2YgYnJpdGlzaCBoZWF2eSBtZXRhbAoxIDkgMiAzCnBob3RvcmVhbGlzdGljISEhIQpyZWQgYmxhY2sgYW5kIHdoaXRlCjEgMyBjZW50dXJ5IHN0eWxlCmZhY2UgbWFzawpncmVlbiBhbGxleQpwYWludGluZyB2bGFkaW1pciB2b2xlZ292CmNhbXB5IGNvbG9yIHNjaGVtZQpmaW5lIHNoYXJwIGhpZ2ggZGV0YWlsCmN1dGUgYXJ0CmhlbnJpayBmaXNrZXIKYnJ1Y2Uga2Fpc2VyCmRtaXRyeSBtYXp1cmtldmljaApkb3J1ayBlcmRlbQpqb24gc2liYWwuIHZvbHVtZXRyaWMgbGlnaHQKaW4gdGhlIGNvdmVyIG9mIG5ldyB5b3JrIHRpbWVzCnR1cnF1b2lzZSBncmFkaWVudAoyIDAgMCA4CmV0aWVubmUgLSBsb3VpcyBib3VsbGVlIHN0eWxlCnBlbnRhZ3JhbXMKcGFybGlhbWVudAp1bnNwbGFzaCBjb250ZXN0IHdpbm5pbmcgcGhvdG8KY2hyaXN0aWFuIGRpb3Igc3R5bGUKbWVkaXRlcnJhbmVhbiBiZWFjaCBiYWNrZ3JvdW5kCmVzY2FsYXRvcnMKZmxvYXRpbmcgc3BoZXJlcyBhbmQgc2hhcGVzCmZydWl0Y29yZQpjYW5kaWQgcG9ydHJhaXQgcGhvdG9ncmFwaApwaWN0dXJlZCBmcm9tIHRoZSBzaG91bGRlcnMgdXAKbG91aXNpYW5hCmNvbXB1dGVyIG11c2ljCmltcGFjdCBmb250CmYvMS44IGNpbmVtYXRpYyBsZW5zCmxlYXZlcyBmYWxsaW5nCm9sZCB3ZWF0aGVyZWQgcGFwZXIKdHJhbnNjZW5kZW5jZQppbiBzdWl0Y2FzZQpwcm90by1tZXRhbCBjb25jZXJ0CmNocm9tZSBidWlsZGluZ3MKZnV0dXJpc3RpYyBiYXNlCnNvbHN0aWNlIGZpcmUKdWx1cnUKbmlnaHRoYXdrcwptb29zZQptb3VudCBvbHltcHVzCm15c3RlcmlvdXMgZXh0ZXJpb3IKMTk2OCBzY2llbmNlIGZpY3Rpb24gdGFyb3QgY2FyZApzcHJpbmcgb24gc2F0dXJuCmdyZXkgc3RyaXBlZCB3YWxscwoxNm1tIGZpbG0gbGl2ZSBzb2Z0IGNvbG9yCnB1bmsgcm9ja2VyCmNhbXB5CndpdGggaW50ZXJpb3IgcG90dGVkIHBhbG0gdHJlZXMKZGVlcCBibHVlIGF0bW9zcGhlcmUKbWV0YWwgZ2VhciBzb2xpZCBhbmltZSBjeWJlcnB1bmsKMTk5NCB2aWRlbyBnYW1lIHNjcmVlbnNob3QKdGhlIGZhc3QgYW5kIHRoZSBmdXJpb3VzCm1hc2FtaSBrdXJ1bWFkYQoxIC8gNiBrYXRzdXlhIHRlcmFkYQppbiBmcm9udCBvZiBhIHRlbXBsZQpzZWR1Y3RpdmUgY2FtaXNvbGUKZ2xhbW91ciBmYXNoaW9uIHBvc2UKZ2xhc3Mgc3R1ZGlvCmNoZXJyeSBibG9zc29tIGZhbGxpbmcKc2VlIHRocm91Z2ggZHJlc3MKdWx0cmEgcmVhbGlzdGljIDRrCmZsb29yIHBsYW4gdmlldwoyIGQgZ291YWNoZSBpbGx1c3RyYXRpb24KdmlueWwgbWF0ZXJpYWwKd2hpdGUgZWFnbGUgaWNvbgpzcGlkZXJ2ZXJzZQp0ZWEgcGFydHkKbGFicmFkb3JpdGUKZmFudGFzeSBwb3N0ZXIKY29sb3VyZnVsIDNkIGNyeXN0YWxzIGFuZCBnZW1zCmluIHdoaXRlIGxldHRlcmluZwpleG90aWMgZXllcwp3aWxkIHNwaWt5IGJsYWNrIGhhaXIKOGsgaGRyIHNob3djYXNlCnBlcmZlY3QgZXhwcmVzc2lvbgp0ZXRyYWRpYyBjb2xvciBzY2hlbWUKZGV0YWlsZWQgYmVhdXRpZnVsIGZhY2UKbm9idXlvc2hpIGFyYWtpCmV0aGVybmV0IGNhYmxlcwp3YXZ5IGxpbmdlcmllcwpmaXRuZXNzCmZhbGxpbmcgYWNpZCByYWluCmpvZWwgLSBwZXRlciB3aXRraW4KcmF5cyBvZiBtb29ubGlnaHQKZnVycnkgY2hlc3QKMyA1IG1tIHBvcnRyYWl0CjcgMCBzIGhpIGZpIHN5c3RlbQpvY3RvYmVyCjMgd2ludGVyIGRlaXRpZXMKcGluayBjbG91ZHkgYmFja2dyb3VuZAp1bHRyYSBjbGVhciBtYXRlcmlhbAp2b2xjYW5pYyBlbWJlcnMKYmxhY2sgY29sb3IKd2hpdGUgY29sb3JzCndoaXRlIGNhcnZlZCBhYnN0cmFjdCBzY3VscHR1cmUKMyBkIGZyYWN0YWwKZm94ZXMKcGVuZ3VpbnMKb2t1ZGEgc2FtIG1pZ3VlbApuZWFsIGFkYW1zIHwgZGFyawozIGQgcG9pbnQgcGVyc3BlY3RpdmUKcHN5Y2hlZGVsaWMgZGlnaXRhbCBhcnQKd2FybSBwaW5rIGxpdmluZyByb29tCnZpdmlkIHNhdHVyYXRpb24KbGl2aWQgY29sb3JzCjIgZCBpbWFnZQpsaWdodCB5ZWxsb3cKaG9sZGluZyBhIHJlZCBvcmNoaWQKd2VhcmluZyBhIHBpbmsgdHV4Cm1ld3R3bwotIG4gOApmZW1hbGUgYW50aHJvcG9tb3JwaGljIHdvbGYKYmxvY2tidXN0ZXIgbW92aWUKZGlzY28gYmFsbHMKaW1heCA3IDAgbW0uIGJsYWRlcnVubmVyCjMgZCBzb2Z0d2FyZQpoeXBlciByZWFsaXN0aWMgOCBrCm1vb24gcnlhcwpkZWVwIGJsdWUgbW9vZApyYXZlbiBiaXJkCmJsdWUgZmFjZXMKcmljaCBhcXVhcmVsCmhhYmwgdGVsZXNjb3BlCnJlYWxpc3RpYyBtYXlhCnByZSAtIHJhcGhhZWxpdGVzCmFybW9yIHN0eWxlIG9mIGdpZ2VyCndvbGYgZWFycwpjYXQgZmFjZQptb3VzZSBub3NlCnZ0dWJlcgpwYXRlbnQgZHJhd2luZwpwb2xpY2Ugc3RhdGlvbgozNW1tIG9mIGEgdmVyeSBjdXRlCmNvbG9yZWQgc3BvdGxpZ2h0cwpyYXl0cmFjZSBjb25jZXB0IGFydApzdGFuZGluZyBvdmVyIGEgdG9tYiBzdG9uZQpicmlnaHQgZ3JlZW4gc3dpcmxzIGNvbWluZyB1cCBpdApnbG93aW5nIGF1cmEgYXJvdW5kIGhlcgppbnNhbmUgc3BlY2lhbCBlZmZlY3RzCmJvbmVzIGx5aW5nIG9uIHRoZSBncm91bmQKbG9uZyBvcmFuZ2UgaGFpcgpzdGFuZGluZyBpbiBjbGFzcwpub3QgYmx1cnJ5Cnl1a2lpIG1vcml0YQp0aGUgKHZvaWQKb24gYSBhZHZhbmNlZCBsYWIKYm9zcwpiaWcgY2xlYXIgZXllcwp3aXRoIHNob3J0IGJvYmJlZCB3aGl0ZSBoYWlyCndoaXRlIHdvbWFuCm9yZ2FuaXplZCBjb21wb3NpdGlvbiEKaW5zZWN0IHdpbmdzCjNkIHJlbmRlciBvY3RhbmUKY2VudGVyIG9mIGZyYW1lCmluZnJhcmVkIGNhbWVyYQpmb3JtZXIKZXJpYyBiYW5hCmdsYXNzIHJhaWxpbmcKb3V0ZG9vciBzdGFpcmNhc2UKcm9vZiBnYXJkZW4KaGFyZCBsaWdodGluZyEKM2QgZWZmZWN0CjNkIG1hdHRlIHJlbmRlcgpkaiByYXZlIHBhcnR5CjNkIG1vZGVsIHJpZ2dlZAozZHNtYXgKYXdhcmQgd2luaW5nIHBob3RvCmNpbmVtYXRpYyBhY3Rpb24gc2hvdApwaWd0YWlsIGJyYWlkcwpibGFjayBib3JkZXI6IDAuNzUKaGFpciB0aWVkIGFuZCBicmFpZGVkIGxvb3NlbHkKcG9vbCB0dWJlcwo4MHMgcGhvdG8KaGVsbCBiYWNrZ3JvdW5kCjQgY2hhbiBwZXBlCmhpZ2ggY29udHJhc3QgcGludGVyZXN0IHBsYXN0aWMKY29iYmxlc3RvbmUKcGhvdG9yZWFsaXN0aWMgcGhvdG8Kd2luZG93IGxpZ2h0CmdyZWVuIGZpZWxkCnB1YmxpYyBidXMKdG9kYXkncyBmZWF0dXJlZCBwaG90b2dyYXBoIDRrCjR0aCBvZiBqdWx5CjUgMCBtbSBwaG90b2dyYXBoCnBlbnRheCBrIDEgMCAwIDAKbmVvIHNvdWwKY3JldyBjdXQKYnVzeSBjaXR5CjZrCmZ1dHVyaXN0aWMgcm9ib3Qgb3JnYW5pc21zCmh5cGVyZWFsaXN0aWMgcGhvdG8Kc2NhcmluZwo3MHMgaW50ZXJpb3Igd2l0aCBhcmNoZWQgd2luZG93cwpsYXNlciByaWZsZQpjb21tb2RvcmUgNiA0CjggMCBzIGFydCBkZWNvCmN1dGUgY2hhcmFjdGVyCjggayBhcnQgcGhvdG9ncmFwaHkKcGF1bCByb2JlcnRzb24KYnJ1dGFsaXN0IGJ1aWxkaW5ncyB0b3dlciBvdmVyCnJlZCBsb25nIHdhdnkgaGFpcgpwcmluY2VzcyBpbnRlcmdhbGFjdGljYQpwZW9wbGUgd2Fsa2luZyBhcm91bmQKamVhbgpnb2xkZW4gYmFja2dyb3VuZAphYmRvbWVuCmRhbWFnZWQgZmlsbQpnb2xkIGFuZCBpbmRpZ28KZGVpdHkgb2YgaHlkcmFuZ2Vhcwp3aXRoIG1hZ2ljYWwgY3JlYXR1cmVzCmNpbmVzdGlsbCA4IDAgMCB0IGZpbG0KYW5pbWUgbWFuZ2EKOSAwJ3MKdG9ybWVudApjdXRlIGFuaW1lIHN0eWxlCmZvcmVzdGVkCmltYWdlIGFydGlmYWN0cwonZnJpZW5kcycgdHYgc2hvdyBlcGlzb2RlCmJyaWdodCBoYWlyCjsgd2Vla2x5IHNob25lbiBqdW1wIGlzc3VlIDEgNApzYXJjYXN0aWMgc21pbGluZwp2aWxsaWFuCmluIGFuIGFjdGlvbiBwb3NlCnNtb290aCBsaWdodApjeXJpbCByb2xhbmRvIGFuZCBtLncga2FsdXRhCjI1bW0gZi8xLjgKc21hbGwgc3F1YXJlIGdsYXNzZXMKc2ltb24gbGVlCmJsYWNrIGFuZCBibHVlIGNvbG9yIHNjaGVtZQpkcmVzc2VkIGNhc3VhbGx5CnNob3Qgb24gMTZtbSBmaWxtCnJ1YmJlciBkdWNreQpwZW9wbGUgc2NyZWFtaW5nCmNhciBwYWludApkdXN0IGFuZCBibG9vZCBpbiB0aGUgYWlyCnNhaW50IHNlaXlhCmZpbGxlZCB3aXRoIGJvb2tzCm1hZ2ljIGFydGlmYWNzIGFuZCBtYWdpYyB3ZWFwb25zCmVsZWN0cm9uIG1pY3Jvc2NvcGUKaGlnaCBnbG9zcwptZXJ0IGFuZCBtYXJjdXMKcG9zdCBwcm9jZXNzaW5nIGVmZmVjdHMKMTkzNQpob2xkaW5nIGFuIHVtYnJlbGxhCnJ1bGUgb2YgdGhyZWVzCmxlbnMgZ2xhcmUKaW5zYW5lbHkgZGV0YWlsZWQgb2N0YW5lIHJlbmRlcgpkb2Y6LTEKbmF2eQpha2F0c3VraSBha2lyYQptaWxpdGFyeSBib290cwphIHN0dW5uaW5nIG1hc3RlcnBpZWNlCnBlcmZlY3QgZmFjaWFsIHByb3BvcnRpb25zCnByb2Zlc3Npb25hbCBncmFkZQpidXMgc3RhdGlvbgpzdWNoIGFzIGFybXMgYW5kIGxlZ3MKc2tlbGV0b24tbGlrZSBjcmVhdHVyZQpkZW5pbSBqYWNrZXQKZGFyaW5nCnR3byBwb2ludGVkIGVhcnMKdWhkIHVwc2NhbGUKNGsgcmVzb2x1dGlvbiBwb3N0LXByb2Nlc3NpbmcKam9obiBiYWVyCnNhdGlzZnlpbmcgY2FibGUgbWFuYWdlbWVudApnbGl0dGVyaW5nIGljZQp0aGljayBhdG1vc3BoZXJlCmNyeXN0YWxsaXplZAp2ZXJ5IGRldGFpbGVkIGJlYXV0aWZ1bCBmYWNlCmFyY2hpdGVjdHVyZSBwaG90bwphcnRncmFtCmd1aXRhciBzaGFwZSBidWlsZApoZXIgd2FyZHJvYmUgaXMgYXR0cmFjdGl2ZQpza3VsbCBib25lcyBmbG93ZXJzCnJvdHRpbmcgYmxhY2sgY2xheSBza2luCm92ZXJncm93biBnYXJkZW4KYnJpZ2h0IG1vb25saWdodApha2lyYSBzdHlsZSBpbGx1c3RyYXRpb24KYnJpZ2h0IHN0eWxlCmZvdW50YWlucyBhbmQgYXJjaGVzCnJlYWxpc20gdGF0dG9vIGRyYXdpbmcKOGsgaGQgd2FsbHBhcGVyIGRpZ2l0YWwgYXJ0CnJleXlhbgptb3VybmZ1bApmZWF0dXJlZCBvbiBjb25jZXB0YXJ0d29ybGQKc2N1bWJsaW5nCmJlYXV0aWZ1bCBmYWNpYWwgZmVhdHVyZXMKZmxvd3kgaGFpciBzdGFuZGluZyBvbiBhIHJvY2sKc2lnbWEgMjQgbW0gZi84Cm9mZnNldCBsaXRob2dyYXBoeSBwcmludApjb2xvbmlhbApjaGFyYWN0ZXIgbW9kZWwgc2hlZXQgdHVybmFyb3VuZAp0dXJidWxlbnQKamFtZXMKM2QgbG93IHBvbHkgcmVuZGVyCmdyZWVuIG1lYWRvdwptZXhpY28gY2l0eQptYW5kZWxidWxiIDNkIGZyYWN0YWwKOTBzIGFuaW1lCmdob3N0IG9mIHRzdXNoaW1hCmNsaWZmc2lkZQpjaGFybGVzIHNoZWVsZXIKdi1yYXkgOGsgdWhkCmluIGEgZ29sZCBvbmUgcGllY2Ugc3dpbXN1aXQKdHJhZGluZyBpbGxlZ2FsIGdvb2RzCmJsdWUgaXJpcwphcnJpZmxleCAzNSBibCBjYW1lcmEKcmlkaW5nIGEgbW90b3JiaWtlCnBsYW5ldCBlYXJ0aCBpbiB0aGUgYmFja2dyb3VuZApvbGQgam9obiBsZW5ub24KZXh0cmFvZGluYXJ5IG1hc3RlcnBpZWNlISEhISEhCnNhbmQgY2F0CmJlZSBodW1taW5nYmlyZApweWdteSBoaXBwb3BvdGFtdXMKbGVhZnkgc2VhIGRyYWdvbgplbGVwaGFudCBzaHJldwprbGlwc3ByaW5nZXIKdGF3bnkgZnJvZ21vdXRoCmZ1bGwgYm9keSB4aWFueGlhCnNjaWZpIGZpbG0gY29sb3IgcGFsZXR0ZQozZCBkZXNpZ24KYmxlbmRlciA4ayB1aGQKbW92aWVzCnNub3d5IHBlYWtzCmEgY296eQpsaXZpbmcgdGhlIGdvb2QgbGlmZQphdCBwZWFjZQpicmFtIHNlbHMKbGF5aW5nIG9uIGhlciBiYWNrCnNjaWVuY2UgZmljdGlvbiBmYW50YXN5CmhpZ2ggY29udHJhc3QgY29sb3Vycwpob2xkaW5nIGEgYmx1ZSBsaWdodHNhYmVyCmEgZGVsaWNhdGUKdmFudGFibGFjayBjaGlhcm9zY3VybwpleHRyYSBjaGVlc2UKcGVwcGVyb25pCmJ1dHRlcgpiaWJsaWNhbGx5IGFjY3VyYXRlCmludHJpY2F0ZSBsaW5lYXJ0CmhhcmJvdXIKbWFjayBzenRhYmEKZHJhbWF0aWMgdmlldwp0aGUgbGFzdCBqZWRpCmhpZ2hseSBkZXRhaWxlZCBkZXNpZ24KZ3JhZml0dGkgYXJ0CnNlbGZpZSBwaG90b2dyYXBoeQp3aWRlIGFuZ2xlICsgbWFzdGVycGllY2UKYWxiZXJ0IGJpZXJzdGFkdCBncmVnIHJ1dGtvd3NraQp2aWtpbmcgYXJtb3IKemVlIGRheQpkZWVwbHkgZGV0YWlsZWQKZ3JlZ29yeQpjb3NtaWMgaG9ycm9yIGNvbmNlcHQgYXJ0Cm1ldGVvcgpzcGFya3kKbWFjcm8gbGVucyBwcm9kdWN0IHBob3RvCmRldGFpbGVkIGNhcnZlZCBvcm5hbWVudHMKa3Jpc3RlbiBiZWxsCmEgZmFudGFzeSBjb21pYyBib29rIHN0eWxlCmFudWJpcyByZXB0aWxpYW4KYWNjb21wYW55IGh5YnJpZAptYXR0ZSBkaWdpdGFsIHBhaW50aW5nCnJlZCBzdWl0CnRob3VzYW5kcyBvZiBjcm93cwpiYXJyZXQgZnJ5bWlyZQpsb3cgY2FtZXJhCmZpc2hpbmcgYm9hdHMKc28gbWFueSBwbGFudHMKZmxhbWUgc3RvbmVzIGFyZSBzY2F0dGVyZWQKYnVzaW5lc3MgbWVldGluZwpjYXJsIGZyaWVkcmljaCBkZWlrZXIKd2hpdGUgd2VhcmluZwpmdXIgYXJtb3IKY2F2ZXJuIGNlaWxpbmcgdmlzaWJsZQpkZWxpY2F0ZSBmb2cKdW5zZXR0bGluZyBhdG1vc3BoZXJlCmdyZWVuIGZpZWxkIHdpdGggdmlsbGFnZSBydWlucwp1bHRyYSBjcmlzcAphd2FyZCB3aW5uaW5nIGRyYXdpbmcKaGF5YW8gbWl5YXpha2kgc3R5bGUKbWFyYmxlIGJhY2tncm91bmQKZWF0aW5nIGljZSBjcmVhbQpsb25nIGZvY2FsIGxlbmd0aApmYW50YXN5IHNrdWxsCmJ1Y2sgc3R1ZGlvcyBhcnR3b3JrCmxhcmdlIGZvcm1hdCBwaG90b2dyYXBoCmh1bWFuLWFuaW1hbCBoeWJyaWQKbm9jdHVybmFsCnVuaWdpbmUgcmVuZGVyCmF0IHR3aWxpZ2h0CmltYXggcmVuZGVyCnRoaWNrIGR1c3QgYW5kIHJlZCB0b25lcwphdXR1bW4gZm9yZXN0CmludHJpY2F0ZSBmdXR1cmlzbQpiZXJuZCBhbmQgaGlsbGEgYmVjaGVyCmRhcmsgc3RyZWV0CmRhbmRlbGlvbgp0cmFuc2x1Y2VudCBnbGFzcyBzaGluZQpiaWcgZXllCnZpdmQgZGV0YWlscwp2aXZkIGNvbG91cgpoeXBlci1maWRlbGl0eQpiYWxsb29uCnNsaW1lIG1vbGQKc3l0aHdhdmUKZWFydGggaW4gdGhlIGRpc3RhbmNlCmJhY2tsaWdodCBzdW5zZXQgc2t5CmNvdXJhZ2UKY29sb3NzdXMgb2YgcmhvZGVzCmRpc25leSBpbnNwaXJlZApzdGFyaW5nISEhISEgaW50byB0aGUgY2FtZXJhCmhlbnJ5IGNhcnRpZXIgYnJlc3NvbgpiYXNlYmFsbApzcG90bGlnaHRpbmcKbWlycm9yIHNlbGZpZQphIG1hbgp0cmFpbnMgaW4gdGhlIGJhY2tncm91bmQKYW5pbWUgc3R5bGVkIDNkCmFkaSBncmFub3YKNTBtbSBzaWdtYSBsZW5zCnRob3VnaHRzCmNsb3VkbGVzcyBza3kKeWVsbG93IGFuZCBibHVlCmVsZXZhdGlvbgpyYXl0cmFjZWQgcmVmbGVjdGlvbnMKdW5kZXJ3YXRlciBwaG90bwptb3VudGFpbm91cyB0ZXJyYWluCmNhbm5vbnMKbGFwdG9wcwpiZXppZXIgY3VydmUKc2hvcnQgaGFpciBvbiB0b3Agb2YgaGlzIGhlYWQKY3VybHkgYW5kIHNob3J0IHRvcCBoYWlyCndpdGggYnJvd24gc2tpbgpnZW9tZXRyaWMgc2hhcGUKZ3JhcGhpYyBhcnRpc3QgYXJ0Z2VybQpkZXRhaWxlZCBqYXcgYW5kIGV5ZXMKY2xlYW4gYXJjaGl0ZWN0dXJlCnNvbWUgcGxhbnRzCmNhbnZhcyB0ZXh0dXJlCmZyYWN0YWwgbGlnaHRpbmcKZHJvbmUgcGhvdG9ncmFwaApydWluCmF0dGl0dWRlCnJhaW55IHN0cmVldApibHVlIHVuaWZvcm0KY2FuaW5lcyBzcG9ydHMgcGhvdG8KZmx5CigoKCh1bnJlYWwgZW5naW5lKSkpKQptZXRhbGxpYyBmbGVja3MKZ2xpdHRlcmluZyBtZXRhbCBwYWludApnbG9zc3kgZmxlY2tzIG9mIGlyaWRlc2NlbmNlCmlyaWRlc2NlbnQgdGV4dHVyZQpkaWdpdGFsIGFydCA0ayB1bnNldHRsaW5nCm1hdXZlIGFuZCBjeWFuCihhYnN0cmFjdCkKcHN5Y2hlZGVsaWMgc2t5CnRlYWwgb3JhbmdlIGNvbG9yIHBhbGV0dGUKbWFzb24KaGUgaXMgYW5ncnkKMTk2NAo0MCBtbQpkYXJrIGFuZCBtb29keSBhdG1vc3BoZXJlCnN1bXB0dW91cwpzdGFuZGluZyBvbiBhIGhpbGwKc2hvdCBmcm9tIGEgZGlzdGFuY2UKY2FwdHVyZQphcHBldGl6aW5nCnBvcnNjaGUgOTExCmh5ZHJhdWxpY3MKYXNzZXQgcGFjawptYWdpYyBwb3J0YWwKcm9tYW4gbm9zZQpiYWNrbGl0IGZ1cgpqdWR5IGhvcHBzCmdvbGQgYmFja2dyb3VuZApoYXplbCBhbWJlciBleWVzCmRldGFpbGVkIGludHJpY2F0ZSBoYWlyIHN0cmFuZHMKYnJpZ2h0IG5lb24gbGlnaHRzCm1vZWJpb3VzCnJlYWxpc3RpYyBmZWF0dXJlcwp3YWxscGFwZXIgaGQKbGlnaHQgc2tpbiB0b25lCmNoYXJsaWUgYm93YXRlciBhcnQgc3R5bGUKYSBwb3J0cmFpdCBvZiB0aGUgY2hhcmFjdGVyCndlYXJpbmcgYSB3aGl0ZSByb2JlCmEgcG90cmFpdCBvZiBhIGJlYXV0aWZ1bAp1bml2ZXJzaXR5CnJ1bGVyIG9mIGluZmVybm8Kbm91dmVhdSBwYWludGluZyBtYXN0ZXJwaWVjZQpoeXBlciByZWFsaXNtIDhrCmluIHBhaW4KYSByYWRpYW50CmxpZ2h0IGFjYWRlbWlhIGFlc3RoZXRpYwpwaXhpdnMgYW5kIGp1bmppIGl0bwpkZWFkIHNraW4KbXVjaGFpbgoyMDUwCmEgc2NyZWVuc2hvdCBvZiBhIHJ1c3R5CmJtdyBhbmQgbWVyY2VkZXMgY29uY2VwdCBjYXJzCnN1cGVyIG1hcmlvIHRoZW1lCmdhbGF4aWVzIGFuZCBzdGFycwpmbG9hdGhpbmcgdW5kZXJ3YXRlciBpbiBhIGxha2UKZnJvbnQgcGhvdG8Kc3VwZXIgY2xlYW4KcGhvdG9yZWFpc3RpYwptYWRlIG9mIGNlbWVudApib2xkIGNvbG91cgp2ZXJ5IGNvaGVyZW50LiBoaWdoIGRldGFpbApoZWFydHN0b25lIG9yaWdpbmFsIGFydCBzdHlsZQpweXJvY2xhc3RpYyBmbG93CmhpZ2ggcXVhbGl0eSBzY3JlZW5zaG90CmluIHRoZSBtaWRkbGUgb2YgdGhlIGRheQp0aHVncwpoZXIgYm9keSBtYWRlIG9mIGZsYW1lcwphIHN0dW5uaW5nIHlvdW5nIGV0aGVyZWFsIGZpZ3VyZQphYmFuZG9uZWQgZ2FzIHN0YXRpb24Kc2l6ZXMgYW5kIGNvbG9ycwpwZWVsaW5nIHBhaW50CmEgdGFsbAp0b3JjaCBzaGFkb3dzCmhvbGRpbmcgYSBiZWVyISEKY2FzdGxlIGluIHRoZSBza3kgc3R5bGUKYW4gZWxlcGhhbnQKaGlzdG9yaWNhbCBhcnRpc3RpYyBkZXBpY3Rpb24Kdm9ndWUgam91cm5hbCBjb3ZlcgpwaG90byB0YWtlbiBhdCBuaWdodApncmVlbiB3YXZ5IGhhaXIKaGlnaC1kZXRhaWxlZApkYXJrIHBsYWNlCnJlZCBhdG1vc3BoZXJlCmh1YmJsZSBwaG90b2dyYXBoCmNnd29ybGQKcGFydGljbGUgcGh5c2ljcwpzdHVubmluZyBwaG90b2dyYXBoCm1hZ2ljYWwgZm9yZXN0IGJhY2tncm91bmQKdGlnaHRzOyBvbiB0aGUgc3RyZWV0CnNoZSBpcyBmbG9hdGluZyBpbiB0aGUgYWlyCnN1cGVyIHNtYXNoIGJyb3MKMjAwOQpuZXcgamVyc2V5CmZhbGxpbmcgc2FuZCBpbnNpZGUKc2hhcnAgaXJyZWd1bGFyIHNoYXBlcwpjb2xsYXBzZWQgY2VpbGluZwpwdXJwbGUgY3J5c3RhbHMKc3RhbmRpbmcgaW4gcnVpbnMKZW1hbmF0aW5nIHdoaXRlIHNtb2tlCmRhcmsgZ3JheSBiYWNrZ3JvdW5kCmxvbmcgc3RyYWlnaHQgZ3JlZW4gYmxhY2sgaGFpcgphcGVydHVyZSBwcmlvcml0eQphZGFtCmdsb2NrcwppbiBqb2pvJ3MgYml6YXJyZSBhZHZlbnR1cmUKdmVyeSB2ZXJ5IHdlbGwgZGV0YWlsZWQgaW1hZ2UKaW50cmljYXRlIGJyb2tlbiBzcGFjZSBoZWxtZXQKYXJyaSBhbGV4YSBtaW5pIGxmCm1hcml0aW1lIHBpbmUKc3Bpa2VkCmRhcmsgcGFzdGVsIGNvbG9yIHNjaGVtZQpzd29yZCBhcnQgb25saW5lCnRyaWJhbCBtYXNrCm1vZGVybiBwaG90bwpndWFueWluCnNoYWt0aQpzZXNoYXQKdGVhciBnYXMKdm9sdW1lcmljIGxpZ2h0aW5nCmVhbGlzdGljCmNvdXJ0cm9vbSBzY2VuZQpncmFpbnkgbW9ub2Nocm9tZSBwaG90bwpmcm9udCBzaWRlIHZpZXcKbmVvbiBmYWNlIHRhdHRvbwpzaG9ydCBibGFjayBwaXhpZSBjdXQgaGFpcgpwcmUtcmFwaGFlbGl0ZSBwYWludGluZ3MKaGFsbHVjaW5hdG9yeQo4ayBhbmltZQpyZWQgc2hpZnQgcmVuZGVyCmdhcmRlbnMgYW5kIGZvdW50YWlucwpzdHJhbmdlIGZhdW5hCmFsaWVuIHNwYWNlc2hpcApibHVlIGh1ZXMKc3RhbmRpbmcgaW4gYSBzdGFkaXVtCmJhdHRsZSBkYW1hZ2VkCnRyYWRpdGlvbmFsIGphcGFuZXNlIGNvbmNlcHQgYXJ0Cm1hZ2ljIGhlYXJ0CmFsbHVyaW5nIGVsZiBwcmluY2VzcyBrbmlnaHQKd2hpdGUgbmVvbiBkZXRhaWxzCm1pbmltYWxpc3QgaWxsdXN0cmF0aW9uCm5vY3RpbHV4IDUwbW0KbGlnaHQgZ2xvdwppY2Ugc2N1bHB0dXJlCnJvYm90IQpiYXR0bGUgbWFnZQpzdHVubmluZyBxdWFsaXR5CnN0YXJpbmcgYXQgY2FtZXJhCmFuIGF3YXJkIHdpbm5pbmcKd2l0aCB0aGUgbW9vbiBvdXQKY292ZXIgb2YgdGltZSBtYWdhemluZQpvdXRsYXN0CmFuIGVtcHR5IGxpbWluYWwgc3BhY2UKaGVhdnkgcmFpbm5pbmcgYXQgdG9reW8gbmlnaHQKbmVvbiBsaWdodHMgYWxsIGFyb3VuZApzdGFuZGluZyB0YWxsIGludmluY2libGUKZ3JhbmQgYW5nZWwgd2luZ3MKd2VhcmluZyBhIHNpbGx5IGhhdApsb3ZlY3JhZnRpYW4gaW5zcGlyYXRpb24KaW4gdGhlIGNlbnRlciBvZiB0aGUgaW1hZ2UKc2l0dGluZyBvbiB0aGUgYmVkCnpvb21vcnBoaWMKZGV0YWlsZWQgYW5pbWUKZm9vZCBibG9nCmFuIGV4dHJlbWUgbG9uZyBzaG90IHdpZGUgc2hvdApsdW1lbnMKc3Vuc2V0IGF0bW9zcGhlcmUKMmRjZwpyZWFsaXN0aWMgZGlnaXRhbCBhcnQgNGsKdHdpbmtsaW5nIHN0YXJzCmhpZ2hseSBkZXRhaWxlZCBjbG9zZXVwIHBvcnRyYWl0CmRyYWdvbiBzY2FsZSBhcm1vcgp0cmltbWVkIGJlYXJkCmxvdHMgb2Ygc3RhcnMKc3Rvcm0gYmFja2dyb3VuZApncmFwaGljIG5vdmVsIHN0eWxlCmFuIG9yYyBzbWlsaW5nIGludG8gdGhlIGNhbWVyYQpjZXJ1bGVhbgplZHVjYXRpb25hbApzdGlsbCBwaG90b2dyYXBoeQpvbiBhIG1vdW50YWluCm1hY2h1IHBpY2NodQpiZWhvbGQKdHJpZ2dlcgphbmRyb2lkIDE4CnggbG9nbwpnaWYKaG9ycm9yIGFlc3RoZXRpYwpzd2VhdCBhbmQgbGFib3VyCmV5ZSByZWZsZWN0aW9ucwprYW5hbWVtbwpoYW5heWFtYXRhCnNoaXJvYmFrbwp5dXl1c2hpa2kKYS1jaGFubmVsCnVtYXJ1LWNoYW4KbnlhcnVrby1zYW4Ka2lzZWlqdXUKZ3JlZW4gc3dpbXN1aXQKcm91Z2ggZHJhZnQKY29sb3JlZCBtYW5nYSBwYW5lbAp0YWthc2hpIG11cmFrYW1pIGFydHdvcmsKd2VhcmluZyBibGFjayBkcmVzcwpsb2NrCmFuaW1lIHNob3QKc3R5bGUgb2YgYXJ0aHVyIHJhY2toYW0KYW5vbnltb3VzCnN0cm9uZyBmYXQgYmFjY2hhbmFsaWFuIGJvZHkKd2F0Y2hlZApmYXZlZApyZWFkCmluIGdlYXJzIG9mIHdhciBjb3ZlciBhcnQKbW9uaWNhIGJlbGx1Y2NpCmFwcGxlIGxvZ28Kd2hpdGUgdHJhbnNwYXJlbnQgdmVpbApsaWdodCBibHVlIGRyZXNzIHBvcnRyYWl0CmZhbnRhc3kgcmVhbG0KcGFsZXR0ZXMKYW5pbWF0aW9uIGNvbmNlcHQgYXJ0CnN1c3RhaW5hYmxlCmZpZXJ5IGJhdHRsZSBjb2xvcmluZwpiZWF1dGlmdWwgc3ltbWV0cmljYWwgZXllcwpyZWQgbGlnaHRzYWJlcgp2b2NhbG9pZApob21lbGVzcwp3cmV0Y2hlZCBhbmQgY29ycnVwdGVkIGtuaWdodHMKZGlzdG9waWFuCmplZmZyZXkgam9uZXMKaHVnaCBrcmV0c2NobWVyCm1pY2hhZWwgc293YQpyaXNvcHJpbnQKZ2VvcmdpYSBhbm5lIG11bGRyb3cKY29tcHVsc2lvbgozZCByZW5kZXIgdHJlbmRpbmcgb24gYXJ0c3RhdGlvbgpwYW11a2thbGUKd2hpdGUgdHJhdmVydGluZSB0ZXJyYWNlcwpjbGFzc2ljYWwgc3R5bGUKd2F0ZXJ5IGJsYWNrIGV5ZXMKZXBpYyBwb3NlcwpsYWNlZApjbGVhciB2aWV3CmNydXN0YWNlYW4KYXN0cm9uYXV0IGZsb2F0aW5nIGluIHNwYWNlCmJyZWFraW5nIG5ld3MKYXN1a2EgbGFuZ2xleQpmaWxtIHByb21vdGlvbmFsIHN0aWxsCmFjaWQgcmFpbnMKb3VjaApsb3ZlIGRlYXRoIGFuZCByb2JvdHMKYWN0aW9uIHNlcXVlbmNlCmZlYXR1cmVkIGluIGFydHN0YXRpb24KZGFyayBncmV5CmJlc3Qgb2YKYWJzdHJhY3Qgc3R5bGUKd2F0ZXIgZmxvd2luZyB0aHJvdWdoIHRoZSBzZXdlcgp0dW5pbmcKZWxhYm9yYXRlIGhhaXIgd29ybiB1cAplbGFib3JhdGUgb2xlZCBqZXdlbHJ5CmdsYXNzIGFuZCBzdGVlbAp1bnNhdHVyYXRlZCBjb2xvcnMKZGVhdGggaGltc2VsZgpnYW1lIGNvdmVyCndlZWIKYmF0dGxlc2hpcApzbHkgc21pbGUKcmVuZGVyZWQgaW4gcnR4CjcyMHAKaXQncyByYWluaW5nCmltYXggY2luZW1hdG9ncmFwaHkKbWFuaWFjCjhrIHNjYW4gaHEKZHJlYW15IGFuZCByb21hbnRpYwpsZWdzIHNwcmVhZApsb25nIGJsb25kZSBmbGFtaW5nIGhhaXIKb3ZlcnNpemVkIGVtZXJhbGQgZXllcwpiZWF1dGlmdWwgeW91bmcgZmVtYWxlIHNoYW1hbgptZXRhbCBnYXJtZW50cwpncmVlbiBzdXBlcm5hdHVyYWwgZXllcwpnbGFzcyB0ZXh0dXJlCmNpdHkgc3RyZWV0IGxpZ2h0cwphYmFuZG9uZWQgY2FycwpoaWxseSByb2FkCmF1c3NpZQpjbGVhbiBzb2Z0IGxpZ2h0aW5nCnJhZmFlbGxlIG1vbnRpIGFuZCBiZWtzaW5za2kKbWFya2V0aW5nIGlsbHVzdHJhdGlvbgp3b3JsZCBtYWNoaW5lCmJlYXV0aWZ1bCB5b3VuZyBrb3JlYW4gd29tYW4Kc2hhbGx0ZWFyIGJsb29kZmFsbGVuCm1pa2UganVkZ2UKZ2lhbnQgZ29sZCBoZWFkIHN0YXR1ZSBydWlucwoxOTU2CnZlcnkgYmVuc2luc2tpCmJlbmRlciBmcm9tIGZ1dHVyYW1hCmRldmlhbmFydCBhbmQgY2dzb2NpZXR5CmJlcnNlcmtlcgptaW5kIGJlbmRpbmcKaW52ZXJ0ZWQgdHJpYW5nbGUgYm9keSB0eXBlCmdvZGRlc3Mgb2YgbWlzY2hpZWYKaW5kb25lc2lhCmdyYXBocwptYXJ2ZWwgY2hhcmFjdGVyCndlaXJkIGFydApibGFjayB3b2xmCm1vdmllIHNjcmVlbmNhcApjaW5lbWF0aWMgZHJhbWF0aWMKcm9jb2Njbwp3aGl0ZSBpbmsKaG9ycm9yIGltYWdlCnNtYWxsIGNvdHRhZ2UgaW4gdGhlIGZvcmVncm91bmQKaXRhbGlhbiBtYXN0ZXJwaWVjZXMKYmxhY2sgZ2VtcwpldXJvcGVhbiBkcmFnb24KZW1iZWxsaXNoZWQgc2VxdWluZWQKbnVsbAp2aWJyYW50IGNvbG9yIHNjaGVtZSA4awppbnNwaXJpbmcgZGlnaXRhbCBhcnQKZXZlbmluZyBhdG1vc3BoZXJlCmphenp5CmNocmlzIHBpbmUKZnJhY3RhbCBza3kKaW4gdHJhdmlzIGNoYXJlc3Qgc3R5bGUKbGl2ZSBjb25jZXJ0IHBob3RvZ3JhcGh5Cm1hZGUgb2YgZHJpZWQgZmxvd2Vycwpicm93biBqZWRpIHJvYmUKdG9ueSBzYXJ0IGhpZ2hseSBkZXRhaWxlZApicnVjZSB3aWxsaXMKYnJ1dGFsaXN0IGFyY2hpdGVjdHVyZSBidWlsZGluZwpicnV0YWxpc3QgYXJjaGl0ZWN0dXJlIGJ1aWxkaW5ncwpnb2QgYmxlc3MgYW1lcmljYQptb3RoCmJ1Z2F0dGkgdmV5cm9uCmJ5IGppbSBidXNoIGFuZCBlZCByZXBrYQpieSB0b20gYmFnc2hhdyBhbmQgYm9yaXMgdmFsbGVqbwpwaG90b3JlYWxpc3RpYyBleWVzIHJlbmRlcgpiZWF1dGlmdWwgYW1iaWVuY2UKY2l0eSBpbiB0aGUgc2t5CmV5ZSB3aGl0ZSkuIGZ1bGwgYm9keSByZWFsaXN0aWMKY2FuYWRpYW4gZ29vc2Ugd2l0aCBhIGZ1bm55IGhhdAptaWxpdGFyeSBwb2xpY2UKYW5hbG9ndWUKcmVkIGdvbGQgYW5kIGJsYWNrIG91dGZpdApnYW1lIHRleHR1cmUKcmVzdG9yYXRpb24KcmFwIGFsYnVtIGNvdmVyCmNlbHRpYyBkcnVpZApjaGFyIGF6bmFibGUgYWxidW0gYXJ0Cnpha3UKdG9wIGhhdHMKcG9saWNlIG1hbiEhCmJvd3RpZQpjaGV3YmFjY2EKOGsgNGsKY2hpbGUKY2hpcCAnbiBkYWxlCmRpZmZlcmVudCBmdWxsIGJvZHkgdmlldwpkZWxpY2F0ZSBmaW5nZXJzCm1vbmFzdGVyeQpjaHJpc3RpYW4gYmFsZQpzaG9ydCBmb2N1cwpjaHVjayBub3JyaXMKY2l0eSBvbiBmaXJlCndldC1wbGF0ZSBwaG90b2dyYXBoeQpkYXJrIHdvb2RzIGluIHRoZSBiYWNrZ3JvdW5kCmN5Y2xlcyByZW5kZXIgNGsKaGllcm9nbHlwaApzdHVkaW8gZ2hpYmx5IHN0eWxlCnJhaW5ib3cgc2hlZW4Kc2xlZXAKcHJlZ25hbnQgYmVsbHkKZGFya2VyIGNvbG9ycwpldGhlcmVhbCBnaG9zdGx5IGF0bW9zcGhlcmUKY2xvc2UtdXAgb2YgdGhpbiBzb2Z0IGhhbmQKYmx1ZSBhbmQgb3JhbmdlIGNvbG9yIHNjaGVtZQp3ZXQgY29uY3JldGUKbmVwdHVuZQpwbGFudHMgYW5kIHRyZWVzCmRyYW1hdGljIGRhcmsgYXRtb3NwaGVyZQpwczEgZ2FtZQptYXJ2ZWwgY29taWMgc3R5bGUKZ2FtaW4KY2luZW1hdGljIHZvbHVtZXRyaWMKYmxvY2tjaGFpbiB2YXVsdApoZWxpY29wdGVyIGRyb25lcwpzYW5kd29ybQpwaG90b3JlYWxscnN0aWMKaGdyZW5hZGVzCndpZWxkaW5nIGt1bmFpCnNldCBpbiAxOXh4Cm5vbi1ldWNsaWRlYW4KY296eSB0cmVlaG91c2UgYmVkcm9vbQpyZXBlYXRpbmcKYXN0b25pc2hpbmcgZGV0YWlscwpoeXBlciBkZXRhaWwgcG9ydHJhaXQKbGVvbmFyZG8gZGEgdmluY2kgcGFpbnRpbmcKanV4dGFwb3ogbWFnYXppbmUKcGljdHVyZSB0YWtlbiBpbiB6b28Kc3F1aXNoeQpjdWx0IG9mIHRoZSBsYW1iCnBvcm91cyBza2luCmdyZWVuaXNoIHNraW4KcG93ZXJmdWwgYWdncmVzc2l2ZSBzd29yZCBzdGFuY2UKbmVvbiBkYXJrIGxpZ2h0aW5nCm92ZXJncm93biBncmVlbmVyeQpjeWJlcnB1bmsgcm9ib3QKY3liZXJwdW5rIGtuaWdodApwcm9mZXNzaW9uYWxseSBkZXRhaWxlZApuZW9uIGFydCBzdHlsZQpjeWJvcmcgZHJhZ29uIHBvcnRyYWl0CjRraGQKcG9zdGh1bWFuCmQmZCBtb25zdGVyCmRyYW1hdGljIGJlYXV0aWZ1bCBsaWdodGluZwo4ayBwaG90Z3JhcGh5CnB1a2UKc29mdCBmaWx0ZXIKaW4gYW4gYW5jaWVudCB0b21iCnBpdGNoYnVybiBkZXZpbHMhCmRhaXN5Cndvb2RlbiBob3VzZQpkYW5pZWwgcmFkY2xpZmZlIGFzIGhhcnJ5IHBvdHRlcgpjaW5lbWF0aWMgc2hhZGluZwpkYW5ueSBkZXZpdG8gYXMgYmF0bWFuCmN1dC1zY2VuZQpwczQKb2xpdmlhIHBvcGUKZGFyayBmYW50YXN5IHBvcnRyYWl0CmRhcnRoIGJpZGVuCnZpdmlkIHJlYWxpc3RpYyBjb2xvcnMKc3dpcmxlcwpkYXJrLXRvbmVkIHByb2R1Y3QgcGhvdG9zCmZvcmNlCmdyZWVrIHNjdWxwdHVyZQpwaG90b3JlYWxpc3RjCnBvcnRhbCB0byBvdXRlciBzcGFjZQpkYXZpZCBib3dpZSBhcyB0aGUgam9rZXIKb3JpCnJlZCBmb2cgb24gdGhlIGdyb3VuZAoyOG1tIGRyYW1hdGljIHBob3RvCmFydCB3b3JrCnZhbnRhYmxhY2sgY2xvYWsKc3VibWVyZ2VkIHRlbXBsZSBzY2VuZQpoYWxmIHN1Ym1lcmdlZCBpbiBoZWF2eSBzYW5kCmluIHN0eWxlIG9mIGJla3NpbnNraQpkZXJwaWJvb3J1CnRoZSBnbG93aW5nIHRocm9uZQpzbGlnaHQgZ3JhaW4KYm90YW5pY2FsIGFuYXRvbXkKd2FyIHRvcm4KZGVzaWduIGNvbmNlcHQKZGV4dGVyIG1vcmdhbgptaW5pIGZpZ3VyZQpzaWx2ZXIgaW5zaWduaWEKb24gMTZrCmZyb20gdGhlIGF2ZW5nZXJzICgyMDEyKQpibGFjayBhbmQgcmVkIHRvbmVzCnB1cnBsZSBhY2NlbnRzCjE0NHgxNDQgY2FudmFzCmRvbmFsZCB0cnVtcCBhcyBqYWJiYSB0aGUgaHV0dApkb25hbGQgdHJ1bXAgaW4gZ3RhIHYKd2FyaGFtbWVyIGFydApmYWNlcGFsbQpob3VzZSBpbGx1c3RyYXRpb24KY29tcGxleCBkZXRhaWxzCmRvcmFlbW9uCmNyYXp5IGV5ZXMKcnBnIHBvcnRyYWl0IGZ1bGwgYm9keQplZ3lwdGlhbiBzdHlsZQpjZ3NvY2lldHkgOQpkdW1ibGVkb3JlCmR1cmluZyB0aGUgbmlnaHQKcnBnIHJlZmVyZW5jZSBzaGVldAphbmFsb2cgcGhvdG8KdGF5bG9yIHN3aWZ0IGZhY2UKbmFzYSBpbWFnZQpkZXRhaWxlZCBjb2xvcnMKdHJlbmRpbmcgb24gaW1hZ2VzdGF0aW9uCmdsYW0gaGFpcgppbnRyaWNhdGUgbWVkaWV2YWwgYXJtb3VyCmVsaXphYmV0aApyZWxpZ2lvdXMgbWFzdGVycGllY2UgcG9ydHJhaXQKbmV4dCB0byBhIHBvb2wKdGllCmNsb3NldXAgb2YgaGFuZApmb2N1cyBkZXRhaWxlZAplbHZlbiBtYWxlCmluLWdhbWUgY2ltZW1hdGljCmZ1cnJ5IGJyb3duIGJvZHkKdGFsbCBhbmQgbGFua3kgc2tpbm55CmZpbGxpbmcgdGhlIGZyYW1lCmVtbWEgd2F0c29uIGFzIGtyYXRvcwoxODUwCnBvcC1hcnQKdW5rbm93biBhcnRpc3QKZHVzdCBwYXJ0aWNsZXMgaW4gdGhlIGFpcgpzeW1tZXRyaWNhbCBkZXNpZ24KZXJpYyBjYXJ0bWFuCnNpbXBsZSBkZXRhaWxzCmhpcGVyIHJlYWxpc3RpYwpvcmVnb24KY2hhbGsgd2hpdGUgc2tpbgpldmEgZ3JlZW4gYXMgbWV0YW1vcnBobwphbGwgYXQgb25jZQpldmlsIGRlYWQKZXh0cmVtZWx5IHRleHR1cmVkCmRpbWx5IGxpdCBpbnRlcmlvciByb29tCnBvcnRyYWl0IHdpbm5pbmcgcGhvdG9ncmFwaApvcHRpbWlzbQpwaG90b2dyYXBoZXIKc3R5bGlzdGljIGxpZ2h0aW5nCmxhcmdlIG9wZW4gd2luZG93cwpmaW5hbCBib3NzCnBvd2VyIGxpbmVzCmRhcmsgdG9uZXMgY29sb3JzCnByZXR0eSBzbWlsZQpmYWNlYm9vayBwcm9maWxlIHBpY3R1cmUKdmVyeSByZWFsaXN0aWMgcGhvdG9ncmFwaAp0cmVuZGluZyBvbiBpbnN0YWdyYW0hCmtpbmdkb20gaGVhcnRzIHN0eWxlZCBnYW1lcGxheQpzb24KbWF5YSB0YWthbXVyYQpmZW1hbGUgbWFnZQpyb3lhbCBjb3VydAprbGluZ29uCnJvc3MgdHJhbiBhbmQgaWx5YSBrdXZzaGlub3YKbGlnaHQgcGluayB0b25hbGl0aWVzCm9ybmF0ZSBzZWEgYmFja2dyb3VuZApoaWdoIHF1YWxpdHkgNGsKYWxpZW4gYmlvd2VhcG9uCmdvb2QgbmV3cyBvbiBzdW5kYXkKZnJvbSB0aGUgbWFuZGFsb3JpYW4gKDIwMTkpCmZsb29yIGdyaWxscwpmaW5hbCBmYW50YXN5IDcKZ2xvd2luZyBnb2xkZW4gZXllcwpnYXRlcyBvZiBoZWF2ZW4KZmlyZSBkcmFnb24KZHJlYW1jYXRjaGVycwpjcmFja2luZyBnbGFzcyB0aHJvdWdoIHJlYWxpdHkKbmlnaHQgdGltZSBzY2VuZQoxOXRoLWNlbnR1cnkKZmlzaCBtYXJrZXQKbWFjcm9zcyBkZWx0YQp0aWxpbmcKZm9vdGJhbGwgcGxheWVyCmZhc3QgYWN0aW9uCmJlYXV0aWZ1bCBkYXJrIGNoYW9zCmNoaWxsaW5nCmRyYW1hdGljIHN0b3JteSBza3kKZnJvbnQgcG9ydHJhaXQKZnJvc3QgZ2lhbnQKdG90YWwgZWNsaXBzZQpodW1hbiBjYXQgaHlicmlkCmludHJpbmNhdGUgY2xvdGhpbmcKZXhwb3NlZCB0b3JzbwpibGFjay13aGl0ZSBza2ludGlnaHQgcm9iZXMhCnByb2Zlc3Npb25hbCBzdHVkaW8gbGlnaHRlbmluZwpleGFnZXJhdGVkIGFjY3VyYXRlIGRldGFpbHMKaGFsZiBob3JzZQpnZW56b21hbiBhbmQgZnJhbmsgZnJhbnp6ZXRhCmRlYXRoIGlzIHNwbGl0IGluIHR3byB3aXRoIHNtb2tlCmFuZ2VsIHRoZW1lZAp5ZWxsb3cgcm9iZXMKcHJvZmVzc2lvbmFsIHBob3Rvc2hvcCBhcnR3b3JrCmFudGhyb3BvbW9ycGhpYyB3b2xmCmNvbmNlcCBhcnQKcmVzZWFyY2ggY29tcGxleApyZWQgYnVsbApyZWZsZXhlcwpzaGluIG1lZ2FtaSB0ZW5zZWkKZXRoZXJlYWwgZ2xvdwpkcmFtYXRpYyBhY3Rpb24gc2hvdApmaWVyeSBjb2xvcmluZwpzbWFsbCB3YXRlcmZhbGwKZmFudGFzeSBsZWF0aGVyIGNsb3RoaW5nCmdlcm1hbiBzaGVwaGVyZAp1cHBlciBib2R5IGNsb3NlIHVwCnN0eWxlIGFuaW1lCmhlYXZ5IHdoaXRlIGFuZCBnb2xkZW4gYXJtb3IKcmVzaWRlbnQgZXZpbCB2aXJ1cyBjb25jZXB0IGFydApnaWdhY2hhZCBqZXN1cwphcnRnZXJtIGFuZCBpbHlhIGt1dnNoaW5vdgpvZmZpY2lhbCBjaGFyYWN0ZXIgaWxsdXN0cmF0aW9uCnBob3RvIGZvciBtYWdhemluZQpkZW1vbmljIGVuZXJneQpoZWF2eSBkZXB0aCBvZiBmaWVsZApzdG9ybXkgYW5kIGdyYW5kIHdhciBzY2VuZQptYXJsZW5lIGR1bWFzCmdvZGRlc3Mgb2YgdGhlIGZvcmVzdAp3YXRlcmNvbG9yIGVmZmVjdApzaGluaW5nIGxpZ2h0cwpnb25nIGxpCmdvb2QgbmlnaHQKbGF0aW5hIHNraW4KaW4gYSByYWlueSBlbnZpcm9ubWVudApyYWlueSBhbmQgd2V0IGF0bW9zcGhlcmUKZGFyayBhbmQgZ3JpbSBsaWdodGluZwpyb21hbnRpY2lzbSBwYWludGluZwp1bWFtdXN1bWUKbWFkZSBvZiBjaGVlc2UKcGFsZW9hcnQKc3BhY2VzaGlwIGhhbGx3YXkKbWVjaGEgYXJ0Cmd5cm9zY29wZQpyaWFib3ZpdGNoZXYKaGlnaCBkZXRhaWwgaWNvbmljIGNoYXJhY3RlcgpvbGQgd29ybGQKeWVsbG93IGZsYXNoCmNsb3Vkcy4gZmFudGFzeQpzcG90dGVkIHVsdHJhIHJlYWxpc3RpYwpoYW5kc29tZSBmcmFua2Vuc3RlaW4Kc3dhbXAgbGFuZHNjYXBlCmNpbmVtYXRpYyBlcGljIHNob3QKbW9kZXN0IHRvbmUKaW50cmljYXRlIGdyb3VuZCBzdG9uZQpibGFjayBleWUgc2hhZG93CmV5ZWJhbGxzIGJ1bGdpbmcKdGhlIGF1dHVtbiBwbGFndWUgZ2FyZGVuZXIKaGVucnkgY2F2aWxsIGFzIGphbWVzIGJvbmQKaGVucnkgY2F2aWxsIGFzIGEgd2FycmlvcgpyYXZlbiB3aW5ncwp2aW5lcyBoYW5naW5nIGRvd24KYXJ0c3RhdGlvbiA0awpmaXNoIHRhaWwKY2Fub24gdHMtZSAxN21tCmJvbGQgbGlnaHRpbmcKd2VsbC1saXQKYWxmcmVkIGVsbW9yZQpoaXRtYW4KaG9nd2FydHMgY2FzdGxlCmhvbGxvdyBrbmlnaHQgc2NyZWVuc2hvdApsb3cgYnJvdwpsb25nIGJsYWNrIGJlYXJkCmhvbWVyIHNpbXBzb24gaW4gcmVhbCBsaWZlCmZsYXQgYnJ1c2ggc3Ryb2tlcwpwYXJhbm9ybWFsIGFjdGl2aXR5Cmh1Z2ggamFja21hbiBwb3J0cmFpdAp3aWVsZGluZyBhIGNyb3diYXIKZnV0dXJpc3RpYyBzY2ktZmkKY2hyb21lIG1hc2sKZXllbGVzcwpoaWdoIHZvbHRhZ2UKb3Zlcmdyb3duIHJ1aW5zCmJheWV1eCB0YXBlc3RyeQpoeWVuYQpwdXJwbGUgaGF6ZQpiYXR0bGUgZmllbGQKZmVlbGluZyBvZiBkaXNndXN0CnNpdHRpbmcgaW4gaGlzIHRocm9uZSB1bmRlcndhdGVyCnN1cnJlYWxpc3QgYXJ0d29yawppIHdhbGsgNDcgbWlsZXMgb2YgYmFyYmVkIHdpcmUKY29mZmVlIG1hY2hpbmUKdGlnaHQgZm9jdXMKd2FzaGluZ3RvbiBtYWluIHN0cmVldAphbGwgYnVpbGRpbmdzIG9uIGJyaWRnZQpyZW5kZXIgaW4gYmxlbmRlcgppbmNyZWRpYmxlIGh1bGsKd2F0ZXIgZmxvd2luZwpyZWQgaWxsdW1pbmF0aW5nIGZvZwpleWVzIG9mIGNvcnBvcmFwdG9yIGhvbWluaXMKcmVuZ2VuCmV4dGVybWluYXR1cwpsYXJnZSBqYXJzIG9uIHNoZWx2ZXMKcmV0cm8gZnV0dXJpc3RpYyBjb21pY3MKYm9sZCB3YXJtIGFuZCBjb29sIGNvbG91cnMKZGV0YWlsZWQgdmVpbnMKY29oZXJlbmNlCm1ldGFsIHNjdWxwdHVyZQp0cmVuZGluZyBvbiBmbGlja2VyCmhvbGRpbmcgYSBjaGFpbnNhdwppc2xhbQppbnRlci1kaW1lbnNpb25hbCBtaXJyb3JzCnNwaXJhbGxpbmcgZnJhY3RhbHMKYW1hemluZyBwaG90bwp3ZWFyaW5nIG1hc2sKamFjayB0aGUgcmlwcGVyCnN0eWxlIG9mIHJlbWJyYW5kdApoZWFydGhzdG9uZSBhcnQKODBzIHJldHJvCmlzb2xhdGVkIG9uIHdoaXRlcwpmb29kLiBjcmFmdCBhbmQgYWR2ZW50dXJlCm5lb24gY29sb3IgZGV0YWlscwpqYXBhbmVzZSBjYWxsaWdyYXBoeQpqYXBhbmVzZSBsaWdodG5pbmcgZ29kZGVzcwppbmdhbWUKZmxvd2luZyBwaW5rLWNvbG9yZWQgc2lsawp1bmRlYWQgbGljaApob2xkaW5nIGEgc3dvcmQgYW5kIHNoaWVsZApwaXhhciBzdHVkaW8KbG9va3MgcGhvdG9yZWFsaXN0aWMKbG9yZCBvZiB0aGUganVuZ2xlCm1hbmR5IGp1cmdlbnMgYXJ0Cm1lZGlldmFsIGlsbHVzdHJhdGlvbgpvdmVybG9yZCBzZWFzb24gNApqaS1taW4KYmFydGVuZGluZwpqaW0gbW9ycmlzb24KZHJhZ29uIHNjYWxlcyBhY3Jvc3MgaGFpcmxpbmUKYmx1ZSB0aWUKZGV0YWlsZWQgNGsgcGhvdG9ncmFwaApqb2UgYmlkZW4gaW4gZm9ydG5pdGUKd2Fsa2luZyBpbiB0aGUgZGVzZXJ0Cm5ld3NwYXBlciBjb21pYyBzdHJpcApyaWNoIHJlZAptYXNjdWxpbmUgYXBwZWFsIGhpZ2ggZmFzaGlvbgp3YXJoYW1tZXIgY2hhb3MKdGhpY2sgYmxhY2sgc21va2UKMTk5NSBtb3ZpZQpwb3J0cmFpdCBmdWxsIGJvZHkKZGFyayBhbGxleXdheQooKGF0IHRoZSBraWQgY2hvaWNlIGF3YXJkcykpCmthdG5pc3MgZXZlcmRlZW4Ka2VldG9uZ3UgYmlvbmljbGUKc2xhYW5lc2gKd3JhdGgKbWVuYWNpbmcgbG9vawpraWxseSBmcm9tIGJsYW1lIQpqb2tlciBzbWlsZQpraXdpCmNpbmVtYXRpYyBwYXN0ZWwgbGlnaHRpbmcKbWVkaXVtIGZvcm1hdC4gc29mdCBsaWdodApidXN0IHdpdGggYSBsb25nIGJlYXV0aWZ1bCBuZWNrCnVuZGVyd2F0ZXIgc29mdCBjb2xvdXJzCnJ5YW4gbWNnaW5sZXkKc3RhcmZpc2ggcG9zZQpsYWJyYWRvcgp3YXZpbmcgaGFuZHMKY29sb3JlZCBoYWlyCmxhbWlhCm1hcmthcnRoCnRoZSByZWFjaAp3aGl0ZXJ1biBjaXR5IGJ1cm5pbmcKcGhvdG9ncmFwaGljIHJlYWxpc20KaGVybyBzaG90CmNyb3Nzb3ZlcgpzaGFkb3cgb2YgdGhlIHRvbWIgcmFpZGVyCmF0IHNhbGFyIGRlIHV5dW5pCmV5ZXMgZ2xvd2luZwp0cmFuc3lsdmFuaWFuIGNhc3RsZQp0b2t5byBnaG91bAptYWdpYyBpdGVtCm15c2VyaW91cyBtYW4KKGF0dGFjayBvbiB0aXRhbnMgYW5pbWUpCnRlY2huaWNhbCBza2V0Y2gKaGlnaGx5IGRldGFpbGVkIHJvdW5kZWQgZm9ybXMKaW5zaWRlIG91dCBhbmQgb3V0c2lkZSBpbgpsaWZlIGFuZCBkZWF0aAppbnRyaWNhdGUgZGlnaXRhbCBhcnR3b3JrCmJsdWUgYW5kIHllbGxvdyBjb2xvciBzY2hlbWUKcHJvamVjdGlvbiBtYXBwaW5nCnN0cmluZyBhcnQKdGFwZXN0cnkKY2xlYXIgcGhvdG8KY2luZW1hdGljIGNvbG9yIHBhbGV0dGUKbGlnaHRpbmcgYW5kIHRodW5kZXIKaiBtIHcgdHVybmVyCmx1Y2t5IGx1a2UKciAvYXJ0CnVsdHJhLWh1aGQtM2QtbWFjcm8tcmVuZGVyZWQKbWMgcmlkZQptZXRhdmVyc2VzCm9uIGEgbGFrZQpsaWZlIGRyYXdpbmcKbWFnaWMgc3RvbmUgcG9ydGFsIGluIHRoZSBmb3Jlc3QKdmlvbGV0IGZsb3dlcnMKcGluayBkcmVzcwpob3Jpem9uIGZvcmJpZGVlbiB3ZXN0CmNoYXNpbmcgYWN0aW9uIHNjZW5lCmdvZG5lc3MKbWFqZXN0eQpyZWZsZWN0aXZlIGxpZ2h0Cm11ZGR5IGdyb3VuZAptYW4gd2l0aCBiZWFyZApwdXJwbGUgYWV0aGV0aWMKZGVzZXJ0IGR1bmVzCm9jY3VsdCBkcmVhbQpyb2xsZXIgc2thdGluZwptYXJpbyBhbmQgbHVpZ2kKbWFyaW8gYnJvcwpuaW50ZW5kbyA2NApwdXJwbGUgZm9saWFnZQpuaW50ZW5kbyBkcwpzeW50aGV0aWMgbGlnaHQKZmxhcHBlcgpwYXN0ZWx3YXZlCmh1YmJsZSBkZWVwIGZpZWxkIGJhY2tncm91bmQKcmFpc2VkIGV5ZWJyb3cKZnJpZW5kcyBzaXRjb20gc2NyZWVuc2hvdAptYXJrIHNjaHVsdHoKbWVnYW1hbiBhcyBwaWthY2h1CmN5YmVybmV0aWMgYm9keSBwYXJ0cwptZWd1bWluIGZyb20ga29ub3N1YmEKbWVuIGxvb2sgdXAgYXQgdGhlIHNreQpzYW50YSBjbGF1cwptaWEga2hhbGlmYQptaWNoYWVsIHNjb3R0CndpZGUgc21pbGUKaW4gaG9nd2FydHMKbWluYXMgdGlyaXRoCmdyZWVuIGNvbG91cnMKbWlubmllIG1vdXNlCnZvbHVtZXRyaWMgYW5kIHBlcmZlY3QgbGlnaHRpbmcKY2FydG9vbiBkaWdpdGFsIGFydApuZXN0aW5nIGdsYXNzIGRvb3JzCmluc2FuZGVseSBkZXRhaWxlZApjb21wbGV4IGFuZCBpbnRyaWNhdGUKc3BvbmdlCmlwaG9uZSBzZWxmaWUKdHlyYW5ub3NhdXJ1cyByZXgKbW9uc3RlciB0cnVjayByYWxseQpjb21pY2Jvb2sKbW9ycmlnYW4gYWVuc2xhbmQKZW50aHVzaWFzdGljIGNyb3dkCjE5NzBzIHN0eWxlCmVtYW5hdGluZyBtYWdpYyBmcm9tIGhlciBwYWxtcwpncmFpbnkgcXVhbGl0eQptdXNjdWxhciBqb2UgYmlkZW4KbXVzdGFuZwpuaW50ZW5kbyBkcyB2aWRlbyBnYW1lCmFwcGVhbGluZyBsb25nIGhhaXIKY29tcGxleCBiYWNrZ3JvdW5kCnN1bm55IGVudmlyb25tZW50CnZpZGVvIGdhbWUgY29uc29sZXMKbG9uZyBhdWJ1cm4gaGFpcgpncmFwaGljcyBjYXJkCmh1bWFuaXR5J3MgY29zbWljIGZ1dHVyZQp0ZW50YWNsZQpoZSBpcyBhIHdoaXRlIG1hbGUgZnJvbSB2ZXJtb250CmxpZ2h0IHJheXMgZnJvbSB0aGUgc3VyZmFjZQpvbGQgdHYKc2hhZG93cyBvZiB0aGUgcGFzdAp3aGlsZSBpIHBvbmRlcmVkCndlYWsgYW5kIHdlYXJ5CndlYXJpbmcgYSBnb2xkZW4gY3Jvd24KaGQgcmVtYXN0ZXIKdHdpc3RlZCBtZXRhbApyZWZyYWN0aXZlIGFuZCByZWZsZWN0aXZlCmNvbXBsZXggZW1vdGlvbgpvcm5hdGUgZmxvd2luZyBzaWx2ZXJlZCByb2JlcwppbXByZXNzaW9uaXNtIHBhaW50aW5nCnBhbGFjZSBvZiB0aGUgY2hhbGljZQpob3Qgc3VtbWVyIGRheQpkYXJrIHJlZCBibG9vZHkgZm9nCnBhdHJpY2sgc3Rld2FydApwZWFjZWZ1bCB3b29kZW4gbWFuc2lvbgp0csOocyBkw6l0YWlsbMOpCndpa2ltZWRpYQp3ZXRjb3JlCmJhdGhob3VzZQpwZXRlciBjYXBhbGRpCnBld2RpZXBpZQpwaG9lYmUgdG9ua2luCnBob2VuaXggd3JpZ2h0CmV4cHJlc3NpdmUgcG9zZXMKMzVtbSBmLzEuNApwcmV0dHkgbWFrZSB1cApncmlldmluZwpob3Jyb3IgcGhvdG8KZmx5aW5nIGRlYnJpcwp1bHRyYSBkZXRhaWxlZCBjbG9zZSB1cAp3aWRlIHJhbmdlIG9mIGNvbG9ycwpsaWdodCBjb250cmFzdApob2xkaW5nIGhhbmQKc2VhbiBjb25uZXJ5CnJhZGlvIHRlbGVzY29wZQpwaW5raWUgcGllCnB1bHNhdGluZwp0aHJlZXMKc2VjcmV0cyBpbnNpZGUgdGhlIHZhdGljYW4KY3lib3JnIGRjCnBvcnRyYWl0IG9pbCBwYWludGluZwpwb3J0cmFpdCBzYXJhaCBtaWNoZWxsZSBnZWxsYXIKYmlvYXJ0CnBvcnRyYWl0IG9mIGFuaW1lIGdpcmwKcG9ydHJhaXQgb2YgYW51YmlzCnBvcnRyYWl0IG9mIGFzdWthIGxhbmdsZXkgc29yeXUKdHJlbmRpbmcgZGlnaXRhbCBhcnQKd2llbGRpbmcgYW4gYXhlCnBvcnRyYWl0IG9mIGRhbm55IHRyZWpvCnBvcnRyYWl0IG9mIGRhdmlkIGJvd2llCnBvcnRyYWl0IG9mIGV2YSBncmVlbgpwb3J0cmFpdCBvZiBmZW1hbGUgcGFsYWRpbgpyZWQgaGF0CmxhcmdlIGJsdWUgZXllcwpndWVyaWxsYSBoZXJvaWNvCnBvcnRyYWl0IG9mIG1hcmlvCnBvcnRyYWl0IG9mIG11bGFuCnB1cml0eQpwaG90b3JlYWxpc3RpYyBoZApzbmFrZSBvaWwgc2FsZXNtYW4KcG9ydHJhaXQgb2YgemVsZGEKcG9ydHJhaXQgb2YgemV1cwp3ZWFyaW5nIGJsYWNrIGFuZCBwdXJwbGUgcm9iZXMKbWFnaWMgd29vZGVuIHN0YWZmCmZ1bGx5IGNvdmVyZWQKdGFjayBzaGFycApwZW9ueSBmbG93ZXJzCmNvbmZpZGVudCBzbWlsZQpwb3J0cmFpdCBvZiBhIGtpbmcKZnJhY3RhbHB1bmsKcG9ydHJhaXQgb2YgYSB6ZW50YXVyCmZsdW9yZXNjZW50IHBpbmsgZmFjZSBwYWludAptZXRhbGxpYyBjeWFuIGJvZHlzdWl0CnBvcnRyYWl0IG9mIGEgZHJ5YWQKbG9va2luZyBhd2F5IGZyb20gY2FtZXJhCndoaXRlIHBvbHlnb25hbCBkcmVzcwpwYWxlIHdoaXRlIGZhY2UKbWVkaXVtIGRldGFpbApsYXJnZSBncmV5IGV5ZXMKYmx1ZSBleWVzISEhIQpleHBvc2VkIHRoaWdocyEhIQpzdW5zZXQhISEKc2xhdmljIGZlYXR1cmVzCmVkd2FyZCBob3BwZXIgYW5kIGlseWEga3VzaGlub3YKZnJlZGVyaWNrIGJhY29uCnRvbSBhbmRlcnMgem9ybgp2bGFkaW1pciBhYmF0LWNoZXJrYXNvdgpzYXNzeQpwb3J0cmFpdCBvZiBtYWdpY2FsIGdpcmwKc2hlIGhhcyBiZWF1dGlmdWwgYm9uZSBzdHJ1Y3R1cmUKZmllbGQgb2YgZ3Jhc3MKW2V4cGxvc2lvbnMgYW5kIGZpcmVdCm5lby10b2t5bwpnb2xkZW4gZGV0YWlscyEKY2h1cmNoIGJhY2tncm91bmQhCmNlbGVzdGlhbCByZWd1bGF0b3IKdmVyeSBkZXRhaWxlZCA0awpjb25zdHJ1Y3RpdmlzbSBzdHlsZQpydHggNDA5MCB0aQpuYXRpb25hbCBnZW9ncmFwaHkKcHJldHR5IHdoaXRlIGRyZXNzCmZ1bGwgYm9keTo6IHNub3cgb3V0c2lkZTo6CmdyYWRpbmcKdGVlbiB0aXRhbnMKaW1zb3JyeWpvbgp4LXdpbmcKaW9zIGVtb2ppCmlyaWRlc2NlbnQgc2NpLWZpIGtpbW9ubwpnb3JnZW91cyBkaWdpdGFsIHBhaW50aW5nCnJlaXNlbiB1ZG9uZ2VpbiBpbmFiYQp2ZXJ5IHZlcnkgaGlnaGx5IGRldGFpbGVkCmNpYQp3YXRlcmZhbGxzIGFuZCBsYWtlcwphbmRyb2lkcwpub3J0aGVybiByZW5haXNzYW5jZQpyb3NzIHRyYW4gc3R5bGUKd2Fsa2luZyBvbiB3YXRlcgpzYWx2YWRvciBkYWxpIHBhaW50aW5nCnBvc3QgZ3J1bmdlIHBvcnRyYWl0Cm1hZ251bSBwaG90b3MgNGsKbWFjcm8gMjBtbQppbiBhIGZseWluZyBjaXR5CjE5NTgKc2FkaWUgc2luawpwZXQgYW5pbWFsCnNha3VyYSBoYXJ1bm8Ka3lvdG8gamFwYW4gc2V0dGluZwp1cmJhbiBmYW50YXN5IHJvbWFuY2UgYm9vayBjb3ZlcgpoaWxsYmlsbHkKZmlnaHRpbmcgYSBkcmFnb24Kc2FvaXJzZSByb25hbgpzaXR0aW5nIG9uIGEgdHJlZQp0cm9waWNhbCBwb29sCi0gbiA1CjF4CnBpbmhvbGUgY2FtZXJhCm1pY2hhZWwgb2t1ZGEKbWV0YWxsaWMgcmVmbGVjdGl2ZQpzcGFjZXNoaXAgaW4gdGhlIHNreQptYWdpYyBwYXJ0aWNsZXMKcHJlcmVuZGVyZWQgaXNvbWV0cmljIGdyYXBoaWNzCnNlaW5mZWxkCmFwIG5ld3MKc2hpYmEgaW51IGNvc21vbmF1dApzaGloIHR6dQpmdWxsIGNvbG9yIHBob3RvZ3JhcGgKYmx1ZSBhbmQgcHVycGxlIGxpZ2h0aW5nCnNpbmdlciBiZXlvbmPDqSBhcyBzaGUtaHVsawp0aGUgc3RvbmUgaXMgcm9sbGluZyB1cApza2F2ZW4KdmVyeSBwaG90b3JlYWxpc3RpYwpzbGVlcGluZyBiZWF1dHkKc21pbGluZyBjYXQKZ2xvd2luZyBtb3V0aApsb3JkIG9mIHRoZSByaW5nCnNub3cgZ2xvYmUKZGF3biBvZiBhIG5ldyB3b3JsZApibHVlIGZ1cgpjdXJseSByZWQgaGFpcgpzcGVlZCByYWNlcgp3ZWJjYW0Kb3JiaXRpbmcgc3BhY2Ugc2hpcHMKc21hbGwgYnJ1c2ggc3Ryb2tlcwpjeWJlcnB1bmsgMjA0OQpzdGF0ZWx5CnN0ZWFtcHVuayBpcm9uIG1hbgpzdGVhbXB1bmsgcGluLXVwIGdpcmwKaGlnaGx5IGRldGFpbGVkIG1vZGVsCmhhY2tpbmcKZ3JlZW4gYW1iaWVudCBsaWdodApjb2xvcmVkIGdlbCBsaWdodGluZwpzdG9yeSBib29rIGlsbHVzdHJhdGlvbgp3YXZpbmcgYXQgdGhlIGNhbWVyYQptZWRpY2FsIGRpYWdyYW0Kc3VkZGVubHkKZGV0YWlsZWQgd2F0ZXIKc3VwZXJoZXJvZXMKZ2FtZSByZW5kZXIKYnRzCmZvcmVhcm0gdGF0dG9vCm1lZGljCnRlZW1vCnRlZW1vIGZyb20gbGVhZ3VlIG9mIGxlZ2VuZHMKcm9iZXJ0IGF5dG9uCmpvaG4gYmVycnkKcm9iZXJ0IGx1bWxleQp3aWxsaWFtIG11cnJheQpiLmguIHJvYmluc29uCmdlcmFsZCB3aGl0Y29tYgpoYXJyeSB3aW5nZmllbGQKZXJpYyB3aW50ZXIKc2VwLiBlLiBzY290dAp0ZW1wbGUgbWFkZSBvZiBmbGVzaApleHRyZW1lbHkgY29udHJhc3QKcHVycGxlIHdhdGVyCnRoZSBib3lzCmplZmYgYnJpZGdlcwp0aGUgZ2FyZGVuIG9mIGVkZW4KdGhlIGdsYXNzIGJlYWQgZ2FtZQp2YXVsdGVkIGNlaWxpbmcKYWVzdGhldGljISEhIQpzcGlyYWwgY2xvY2sKZHJlYW13b3JrcyBhbmltYXRpb24gc3R5bGUKdGhlIGhvbHkgZ3JhaWwKdGhlIGxpYnJhcmlhbgo3MG1tIHBob3RvZ3JhcGh5CnRoZSByYWluaW5nIGNpdHkgb2YgbGlzYm9uCjMgcG0KdGhlIHRoaW5rZXIKdGhlIGFjdG9yCnRoZSBkYXJrIGtuaWdodApieSBkYXZpZCBseW5jaAp0aGUgZWRnZSBvZiB0aGUgdW5pdmVyc2UKbWlzdHkgc3dhbXAKdGhlIGV2aWwgZGVhZApyZWRzCnJvY29jbyBkZWNvcmF0aW9ucwpyb2JvdCBoZWFkCmZ1bGwgZmlndXJlIHBvcnRyYWl0CnRoZSBvcmFjbGUgb2YgdHJlZXMKaGlnaCBkZXRhaWxlZCBkaWdpdGFsIGFydAphcm15IGJvb3RzCmRlZXAgc3BhY2UgaHViYmxlIHBob3RvZ3JhcGgKbG93LWtleQpzeW1waG9ueQpzcGVsbCBib29rCmZhbWUKc2luZ2VyIHNvbmd3cml0ZXIKYmlyZHMgb3ZlcmhlYWQKdGllIGZpZ2h0ZXJzCnRpZmEgbG9ja2hhcnQgcG9ydHJhaXQKd29ybGQgd2FyIG9uZQpkZXcgZHJvcHMKdGxpbmdpdCBoYWlkYSBsaXRob2dyYXBoaWMKdG8gZmF0aG9tIGhlbGwgb3IgZ28gYW5nZWxpYwpzdGFuZGluZyBvbiB0aGUgZWRnZSBvZiBhIGNsaWZmCmludHJpY2F0ZSBnb2xkZW4gYXJtb3IKdG93ZXIgb2YgYmFiZWwKY2l0eSBzdW5zZXQgbmlnaHQKam91cm5hbGlzbSBwaG90bwpnbG93aW5nIGdvbGQgZW1iZXJzCmdsYXNzIG9mIG1pbGsKdHJ1dGgKcmVuZGVyaW5nIG9mIHRoZSB3aW5kaWdvCmNvbm5lY3RlZCB0byBoZWFydCBtYWNoaW5lcwp2YWd1ZQp3ZWFyaW5nIGFjY3VyYXRlIGNsb3duIG1ha2V1cApncmVhdCB3aW5ncwpjcmFja2VkIHBpY3R1cmUgd2luZG93CnBpcmF0ZSB3b21hbgppbmR1c3RyaWFsIHJvYm90CmJpcnRoCm9ybmF0ZSBnZW1zCnNvZnQgbXV0ZWQgY29sb3JzCnVuZGVyZ3JvdW5kIGxhYgp1dHJlY2h0Cm1lbW9yeQp2ZWt0cm9pZApzdW5idXJzdAp2ZXJnaWwgZnJvbSBkZXZpbCBtYXkgY3J5CmZ1bGwgdmlldyB3aXRoIGZvY3VzIG9uIHN1YmplY3QKd2FsbGFjZSBhbmQgZ3JvbWl0CmJsYWNrIGFuZCB3aGl0ZSB0ZWxldmlzaW9uIHN0aWxsCnBvc3Rlcml6YXRpb24Kd2FsdGVyIHdoaXRlIGFzIGNhcHRhaW4gYW1lcmljYQp3YWx0ZXIgd2hpdGUgYXMgdGhlIGpva2VyCndhbHRlciB3aGl0ZSBpbiB0ZWFtIGZvcnRyZXNzIDIKd2FuZGVyZXIgYWJvdmUgdGhlIHNlYSBvZiBmb2cKdmlldG5hbQp3aGF0IGRyZWFtcyBtYXkgY29tZQp3aWxsIGFybmV0dCBhcyBiZWV0bGVqdWljZQplcGljIGZhbnRhc3kgZ2FtZSBhcnQKY3V0b3V0CndpdGggYSByZWQgaGFsbyBvdmVyIGhlciBoZWFkCndvb2R0dXJuaW5nCmxhdGhlCmF5YW1pIGtvamltYSBhbmQgbHlkZSBjYWxkd2VsbAplbGJvdyBnbG92ZXMKZnJpbGxzCnNoaXJvdyBtYXNhbXVuZQp3b3JsZCBwZWFjZQp3b3JsZCB0cmVlCnlvdW5nIG5pY29sZSBraWRtYW4KdGVtcGVyYQp6ZWxkYSBhbmQgbGluawplcGljIG9pbCBwYWludGluZwpyZWFsIGh1bWFuCnJhaW55IG91dHNpZGUKemJydXNoIDMgZCByZW5kZXIKdW5yZWFsIGVuZ2luZSAzIGQgcmVuZGVyCmFsdGVyCnJpY2ggaG91c2UKbWluaW1hbCBwaW5rIHBhbGV0dGUKaW50ZXJlc3RpbmcgYmFja2dyb3VuZApyYXZlbiBibGFjayBoYWlyCmVtcHR5IGxpbWluYWwgc3BhY2UKYnJva2VuIGZsdW9yZXNjZW50IGxpZ2h0aW5nCnR3ZWx2ZSBhcm1zCnJvdW5kIHdpbmRvd3MKd2VhcmluZyBhIHBpbnN0cmlwZSBzdWl0CmhhaXIgaW4gc2xpY2sgbG93IHBvbnl0YWlsCnN0YXIgc3BhcmtsZQp3aGl0ZSBjZWlsaW5nCnR3byB3b29kZW4gd2FyZHJvYmVzCmhvbGRpbmcgYSBzaGluaW5nIG9yYiBvZiBkYXRhCnB1cnBsZSBleWVzIGFuZCB3aGl0ZSBkcmVzcwpha2lyYSB0b3JpeWFtYSBzdHVkaW8gZ2hpYmxpCm1hbnkgZmxvYXRpbmcgc3BoZXJlcwpjeWJlcnRlY2ggd2VhcgpzaWxpY29uIGFuZCBjYXJib24KcGxhY2VkIGluIGEgbGFyZ2UgbGl2aW5nIHJvb20KYnJpbGxpYW50IHJlZmxlY3Rpb25zCnBvc2luZyBmb3IgYSBwaWN0dXJlCmJlYXV0aWZ1bCBkYXlsaWdodApkZWNlbnQKcmF5cyBvZiBzdW5zaGluZQozLXBpZWNlLXN1aXQKZ29sZGVuIGdhdGUKaGFyZCBzdXJmYWNlIG1vZGVsbGluZwpzaG9ydCBkZXB0aCBvZiBmaWVsZApqYW1lcyBqZWFuIGNvbG9yIHBhbGV0dGUKb3ZlcmxvcmRzCmFwb2NhbGlwdGljCmJhY2tncm91bmQgd2hpdGUKaW50cmljYXRlIGZ1dHVyaXN0aWMgamV3ZWxyeQpkeXN0b3BpYW4gc2NpZmkgYXBvY2FseXBzZQpteXN0ZXJpb3VzIO+8jCBzdHJlYW0Kd2VhcmluZyBtaWxpdGFyeSBvdXRmaXQKd2lkZSBzaG90IDsgZHluYW1pYyBjb250cmFzdApzdHVubmluZyBwYWludGluZwpsaXR0bGUKY291cnRyb29tCm5hdHVyYWwgbGlnaHQgY2Fub24gZW9zIGMgMyAwIDAKc2xvcHB5CmJhY2tyb29tcyBsaW1pbmFsIHNwYWNlCm9uIGRlZXAgZm9yZXN0IHBlYWsKZnJvbnR2aWV3CmNvbG9yIHZpbnRhZ2UKY2FyaWNhdHVyZSEhIQp3aGljaCBzaG93cyBhIGJlYWNoIGF0IHN1bnNldAp1bm5lcnZpbmcgYW54aWV0eQptYWdpYyB0aGUgZ2F0aGVyaW5nIHN0eWxlCmRpc25leSBjaGFyYWN0ZXIKbWlkYWZ0ZXJub29uCmJpZyBkZXRhaWxzCmJlYWNoIGJhcgpvdGwgYXJjaGVyCjEgOSA2IDMKYW5vcmxkIHJlbmRlcgpiZWF1dGlmdWwgYW5kIHNtb290aCBzb2Z0IGxpZ2h0Cm1vZGVybiBidWlsZGluZ3MKY292ZXJlZCBicmlkZ2UKdGhlIGRvZyBpcyBkb2luZyBhIGJhbGxldCBkYW5jZQpnb3JnZW91cyBwYWludGluZwpjb3BwZXIgb3hpZGUgbWF0ZXJpYWwKaWxsdXN0cmF0aW9uOi40Cm1pc3R5IG5lb24gbGlnaHRzCnN0dWRpbyBnaGliaQpibGFjayB3aW5ncyBzbGlnaHRseSBidXJudApicmlsbGlhbnQgbGlnaHRzCmJyaWdodCBjb2xvdXJlZCBzdHJlYWtzIG9mIGhhaXIKcm90YXRlZApzaW1vbiBzdMOkbGVuaGFnCnN0cm9uZyByaW1saWdodApzY2FudGlseSBjbGFkCihhcnQgbm91dmVhdSkKamFtZXMgZ2lsbGVhcmQgYW5kIGphbWVzIGplYW4Ka2l0dGVucwpiZWF1dGlmdWwgYW5kIHN5bW1ldHJpY2FsIGZhY2UKcGlldGVyIGJydWVnaGVsCmZpbmUgZGlnaXRhbCBhcnQKb3JhbmdlIGNsb3VkcwpmdWxsIGJvZHkgbGVuZ3RoCmJlYXV0aWZ1bCBhcm1vcgptaW5uZWFwb2xpcyBhcyBiYWNrZ3JvdW5kCmJyb2tlbiBtaXJyb3IKZ3JheSBhbmQgb3JhbmdlIGNvbG91cnMKZGFyayBuZWdhdGl2ZSBzcGFjZQoxLjIgYXBlcnR1cmUKdm9sY2FubyBpbiBiYWNrZ3JvdW5kCmJsYWNrIGxlYXRoZXIgc2hpbnkgamVhbnMKdG9ybiBlZGdlcwpmaW5lIGJ1YmJsZXMKa3JlbnogY3VzaGFydCBhbmQgYXJ0Z2VybQp3YWxscGFwZXIgZGVzaWduCmJlcnJpZXMgZGVjb3JhdGlvbiBvbiB0aGUgZHJlc3MKZGFuaWVsIG1lcnJpYW0gOi4xCmRhcmsgcHVycGxlIGNvbG9yIHNjaGVtZQpwZXJmZWN0IGZlbWFsZSBib2R5CnRlbnRpb24Kcnlva2FucyBhbmQgZWRvIGVyYSBob3VzZXMKbWFyb29uIGhhdApwaXBlbGluZXMKc3R1ZGlvIGxpZ2h0aW5nIDsgcGhvdG9yZWFsaXN0aWMKZXBpYyBjbG91ZHMgYW5kIGdvZGxpa2UgbGlnaHRpbmcKb24gYSBtYXJibGUgcGVkZXN0YWwKc2NpZmkgc2V0dGluZwpkaWEgZGUgbG9zIG11ZXJ0b3MgbWFrZXVwCnN5bWV0cmljYWwgc2NlbmUKc3ltZXRyaWMgY2hhcmFjdGVyCnRyZW5kaW5nIG9uIGFydApjb21pYyBib29rIHN0eWxlISEKKCAoIGJydXNoIHN0cm9rZSApICkKZGVubmlzIHZlbGxlbmV1dmUKZGFyayBicm93bgoIbW9lYml1cwpkb2luZyBhIHByYXllcgpvbmx5IG9uZSBmYWNlCmRhdmlkIG5vcm1hbAp3cmFwcGVkIGluIGJsYWNrIHRlbnRhY2xlcwpoYXBweSBhbmQgc21pbGluZwpvbiBhIGhvdCBhdXN0cmFsaWFuIGRheQp3YXRlciBiYWNrZ3JvdW5kCmhhaXIgdGllZCBpbiBhIGN1dGUgd2F5CmNyeXN0YWwtZW1iZWxsaXNoZWQKbGVpY2EgNSAwIG1tIGYgMS4gOCBsZW5zCmdyZWcgcnV0a293c2tpIGFuZCBpbHlhIHJlcGluCmxhdXJpZSBsaXB0b24gYW5kIG1pY2hhZWwgd2hlbGFuCm1hZ2ljYWwgbGFuZHNjYXBlCndyYXBwZWQKaGlnaHQgZGVjb3JhdGVkCmFydCBub3V2ZWF1IQpsaWdodCBibHVlIGNsZWFyIHNreQp3ZWFyaW5nIGdyZWVuCmZpcmVmaWdodGVyCmRhenpsaW5nIGVuZXJneQpmcmFjdGFsIG1hZ2ljCndpdGggbWFueSBtaXJyb3JzCnNoaW55IHBsYXN0aWMgYXJtb3IKaW50cmVjYXRlIGRldGFpbHMKZHNsciAxIDUgbW0KdHJlbmRpbmcg77yMCmFydGdlcgpzZXZlcmUgb3V0IG9mIGZvY3VzCmludHJpY2F0ZSA4IGsgZGV0YWlsCnpvb21lZCBvdXQgdG8gc2hvdyBlbnRpcmUgaW1hZ2UKdGhlIGJhY2tncm91bmQgaXMgb24gZmlyZQpzd2FtcCBsYW5kCmZsaXAgZmxvcHMKYmVhdXRpZnVsIHRlcnJhY2UKY29sb3JmdWwgY2xvdGhpbmcKamVmZiBlYXNsZXkgYW5kIHNjb3R0IG0gZmlzY2hlcgpkYXJrIGluc2lkZQp3ZWFyaW5nIGEgYm90YW5pY2FsIGdhcyBtYXNrCnJpY2ggZGl2ZXJzZSBsdXNoIGFsaWVuIHdvcmxkCjIgMCAxIDkKZmx5aW5nIHRvd2FyZHMgdGhlIGNhbWVyYQpmcm9udCBzaWRlIHZpZXdzIGZ1bGwKbW9lYml1cyBpbGx1c3RyYXRpb24gYXJ0CnNjaWZpIHNjZW5lCmhvbGRpbmcgYSBjYW1lcmEKcm91bmQgaGVhZGxpZ2h0cwpoaWdobHkgc3ltbWV0cmljIGJvZHkgcGFydHMKZGFyayBiYXJvcXVlIHBhaW50aW5nCmJyaWdodCBuZW9uIGNvbG91cnMKcmVuZGVyaW5nIG9uIHVucmVhbCBlbmdpbmUKY2xhc3NpY2FsIGxhbmRzY2FwZSBwYWludGluZwpjbG91ZHkgZXllcwpyZW5lIG1hZ3JpdHRlLiBoeXBlcmRldGFpbGVkCnRpbnRvcmV0dG8uIGRldGFpbGVkCi1oIDUxMgp0YWt1bWkgZnVqaXdhcmEKdW5yZWFsIGVuZ2luZSAzIGQgcmVuZGVyaW5nCnJvYmVydCBnYWxicmFpdGgKdG9tIGJ1cmtlCnNreXJpbSBwYyBzY3JlZW5zaG90CmR5bmFtaWNhbGx5IHNob3QKbnVnIHBpYwood2ViY29taWMpCmZsYXQgZ3JhcGhpYyBzdHlsZQpzdGVwaGFuZSBtYXJ0aW5pZXJlCjI0bW0gaGFzc2VsYmxvdCBwaG90b2dyYXBoeQp0cmVuZGluZyBvbiBjb25jZXB0YXJ0d29ybGQKdml2aWQgdmlicmFudCBjb2xvcnMKY29vbCBzYXR1cmF0ZWQgY29sb3VycwpzbGlteSBmbHVpZCBsaXF1aWQgYmxvYnMKMyA1IG1tIGtvZGFrIGZpbG0Kd2VhcmluZyB0YWxsIGNvbWJhdCBib290cwpibHVlIGJsb29kCmdyZWF0IGNoYXJhY3RlciBkZXNpZ24Kc3RyZWV0IGxpZmUKZGFyayBhbmQgZWVyaWUKYWxhc2thCmNsZWFuIGJhY2tncm91bmQgdHJlbmRpbmcKbGVmdGxpZ2h0CmRhcmsgdGhlbWVkCnRoZWF0ZXIKdHJpcHB5IGNvbG9ycwpwb2V0aWNhbAphbHRlcm5hdGl2ZSB3b3JsZAppbiBmcm9udCBvZiBhIGZ1bGwgbW9vbgoxIDggdGggY2VudHVyeSBzdHlsZQpqYWtvYiBlaXJpY2gKaHEgcmVuZGVyCmluZHVzdHJpYWwgYmFja2dyb3VuZApkYXJrIHNtb2tlIGluIHRoZSBiYWNrZ3JvdW5kCmR1c3QgYW5kIHNjcmF0Y2hlcwpzbWlsaW5nIGludG8gdGhlIGNhbWVyYQozIGQgbW9kZWxzCnJlZCBsYWtlCmZ1bGwgZm9jdXMKd2VhcmluZyBhIHZlc3QKYmlnIHNwaWRlcgplcGljIHNjaWZpIGZhbnRhc3kgYXJ0Cihtb25zdGVyKQoob2N0YW5lIHJlbmRlcgpvbG1zdGVkCm1leGljYW4gbXVzdGFjaGUKbG9va2luZyBpbiB0aGUgd2luZG93CnNjaS1maSBkaWdpdGFsIGFydCBpbGx1c3RyYXRpb24Kc3RyZWV0IC0gbGV2ZWwKdmVyeSBkZXRhaWxlZCBhbmQgaW50cmljYXRlCmF3YXJkIHdpbm5pbmcgc2N1bHB0dXJlCmNoaWxkcmVuJ3MgdG95IGFkdmVydGlzZW1lbnQKaXNvIDEgMiAwIDAKbWVhdCBtYWNoaW5lCmludHJpY2F0ZSBxdWFsaXR5CmZ1bGwgZmFjZSBwb3J0cmFpdCBjb21wb3NpdGlvbgpyYW5raW4Kc3RlZWwgam9pbnQKbGVlIG1jY2FsbApwYXRpcGhhbiBzb3R0aXdpbGFpCnBob25nIHlpbnRpb24gaiAtIGppYW5nIGdlcGluZwpwZXRlIG1jIG5hbGx5CnBhdWwgYmFyc29uCm1vdW50YWluIHNjYXBlLiBmaWxtIHN0aWxsCmluIGEgZm9nZ3kgcG9uZAppbiBhbiBhYmFuZG9uZWQgdGhlbWUgcGFyawppbiBhIG5lYnVsYQpjaXR5IGVudmlyb25tZW50CmJlYXV0aWZ1bGx5IGxpdCBsYW5kc2NhcGUKaW4gdGhlIGFydCBzdHlsZSBvZiBkYW4gbXVtZm9yZApicmV0dCBhbW9yeQp3aW5nc3BhbiBzdHlsZQphZnNoYXIKY29sb3Igc3BsYXNoZXMKdHJlZXMgd2l0aCBsb3RzIG9mIGxlYXZlcwpjb21wdXRlciBnZW5lcmF0ZWQKZGFyayBncmF5IGhhaXIKY29sb3VyZWQgbGl0aG9ncmFwaCBlbmdyYXZpbmcKcmFkZW4gc2FsZWgKb2lsIHNwaWxscwpwaG90b3JlYWxpc3RpYyA0IGsKaW4gYSBncmFzcyBmaWVsZAppcmlkZXNjZW50IGNvbG9yCmNvc21pYyBhbWJpZW50CnByZXNzZWQgcGVubnkgYXJ0CmhpZ2ggZmFzaGlvbiBtYWdhemluZSBjb3Zlcgpjb21wYXNzaW9uCnBhaW50aW5nIGluIHRoZSBzdHlsZSBvZiByZW5vaXIKY29sb3VyIGZpbG0gc3RyZWV0IHBob3RvZ3JhcGh5CmluIGd0YSBzYW4gYW5kcmVhcwpleHRyZW1lIGNsdXR0ZXIKY3JlZXB5IGNhcnZlZCBleHByZXNzaW9uCmFwZXJ0dXJlIGYgMi4gOApza2luIHRleHR1cmUgbGlrZSBhIGJyYWluCnNsaW15IHRvbmd1ZQpyaWNoIGNvbG91ciBzY2hlbWUKMiAyIG1tIGxlbnMKKCBncmVnIHJ1dGtvd3NraSApCmNyZWFteSBza2luCmZsb3dpbmcgcmVkIGhhaXIKbGFyZ2UgY29tcHV0ZXIgbW9uaXRvcgphIGNhbm5vbiBtb3VudGVkIG9uIGhpcyBiYWNrCmxpemFyZCBwb3NlCmJhdHRsZSBzdGFuZGluZwpsb29taXMKdmVyeSBodW1vcm91cyBvaWwgcGFpbnRpbmcKZ2FyYWdlIGtpdAo2IDQgMApzaGFycCBmb2N1cyBwaG90byBjZW50ZXJlZAp0aG9tYXMga2lua2FkZS4gY3V0ZSBjb3p5IHJvb20KMyBkIGh5cGVyIHJlYWxpc3RpYyByZW5kZXIKcmVkIGdyZWVuIHllbGxvdyBjb2xvciBzY2hlbWUKbWV0YWwgdGFpbApib2tlaCBvbiBiYWNrZ3JvdW5kCmJyaWdodCBoaWdoIHRlY2ggbGlnaHRzCmYgLyAxLiA5IDYuIDggMSBtbSBpc28gNCAwCnBlb3BsZSB3aXRoIHVtYnJlbGxhcwpjaW5lbWEtNGQKbWFjaGluMwpvbiBhbiBvcGVyYXRpbmcgdGFibGUKZGV0YWlsZWQgaWxsdXN0cmF0aW9uIHBvcnRyYWl0CmRhcmsgY3liZXJwdW5rIGlsbHVzdHJhdGlvbgpyZXN0aW5nIGFmdGVyIGEgaGFyZCBmaWdodApkcmF3biB3aXRoIGRvdHMKdW5jb21wcmVzc2VkIHBuZwpwZXJmb3JtYW5jZQozIGQgY2FydG9vbgpnbG93aW5nIGNyeXN0YWxzCmphcGFuZXNlIGFuaW1lCmppbiBzaGFuCmlsbHN0cmF0aW9uCmhlbnJ5IGFzY2Vuc2lvCnNuYWtlIG1hY2hpbmUKc3RydWN0dXJlcwpmYWxsb3V0IGVudmlyb25tZW50CnkgMiBrIHN0eWxlCmVsZWdhbnQgY2xlYW4gZGVzaWduCm5vcnRoZXJuIGxpZ2h0cyBiYWNrZ3JvdW5kCmxldCdzIGdldCBkYW5nZXJvdXMKdGhlIGFydGlzdCBpcyBjaGFybGVzIGJ1cm5zCmNteWsgY29sb3Igc2NoZW1lCnR3byB0b25lIGhhaXIgZHllCmxvbmcgdHdpcmxpbmcgbW91c3RhY2hlCmNhcmRib2FyZApiZWF1dGlmdWwgc3VucmlzZSBsaWdodGluZwpzdHlsaXNlZCBmbGF0IGNvbG9ycwpyZWFsaXN0aWMgYXJjaGl0ZWN0dXJlCmJvcmRlcmxhbmRzIDMKbW91dGggb3BlbiBpbiBhIHRlcnJpZnlpbmcgcm9hcgpjcmFja2xpbmcgYmx1ZSBsaWdodG5pbmcKYnkgd2VzIHdpbHNvbgpqaW0gd29vZHJpbmcKZHJhbWF0aWMgbGlnaHRpbmcuIHN0eWxpemVkCmRldGFpbGVkIGJ1aWxkaW5ncwpoZWF2eSBzaGFkb3dzCm1lZGl1bSBzYXR1cmF0aW9uCmRyZWFyeSBhdG1vc3BoZXJlCmNhdmUgcmVmbGVjdGluZyBpbiB0aGUgbGF2YSBsYWtlCmdyZWVuIGFuZCByZWQgdG9uZXMKbWVkaWV2YWwgY2l0eSBiYWNrZ3JvdW5kCjggayBtYXR0ZSBwYWludGluZwpvcmkgdG9vcgphcnQgc3RhdGlvbiB0cmVuZApkbmQgY2FyZCBhcnQKZmFudGFzeSBjb21pY3MKc3RvbmUgZmFjZQpob3Jyb3IgZmFjZQpzeW1tZXRyaWNhbCB3aW5ncwpzcGFjZSBhZ2UgcG9wCnBhcnR5IGF0bW9zcGhlcmUKZGVlcCBzcGVjdHJ1bSBjb2xvcgpkZWVwIGNvbG91cidzCnNoaWJ1eWEgY3Jvc3NpbmcKaGlwcG9wb3RhbXVzCnNtYWxsZXN0IHdhaXN0bGluZSBldmVyCm5lb24hIHJldHJvd2F2ZQpzY2kgLSBmaSB0aGVtZQp3aWRvdyBtYWtlcgpzdHJhaWdodCBza3kgYmx1ZSBoYWlyCnN0ZXBwaW5nIHN0b25lcwpuYW5vZ2lybApzdGV2ZW4ganVuZwp3ZWFyaW5nIGFuIGV5ZXBhdGNoCnJvbWFudGljIHBlcmlvZApkaWdpdGFsIG1hbmdhIGFydAptYW5lCmJpdHMgb2YgYnJva2VuIGxpZ2h0CmxvcyBhbmdlbG9zCmZhbnRhc3kgZHVuZ2Vvbgp0ZWNobmljb2xvciBjb2xvcgpwaG90b3JlYWxpc3RpYyBhbmQgaW50cmljYXRlCjE2ayAzZAp2aWV3IGZyb20gZ3JvdW5kIGxldmVsCmZpcnN0IHBlcnNvbiBwb2ludCBvZiB2aWV3CmNhdGFsb2d1ZSBwaG90bwpzdGFyaW5nIGV5ZXMKc3VycmVhbCBzY2kgZmkgYXJjaGl0ZWN0dXJlCmNoYW5uZWxpbmcgc3dpcmxpbmcgZW5lcmd5CmZ1c2VkIGFpcmNyYWZ0IHBhcnRzCmxldHRlcmluZwptYWdpY2FsIGVsZW1lbnRzCnRvcCAtIGRvd24Kd2luZ2VkIGJveQpoYXZpbmcgYSBwaWNuaWMKb2ZmaWNpYWwgcHJvZHVjdCBwaG90bwpmcm9tIHNlbmdva3UgcGVyaW9kCiYgamVlaHl1bmcgbGVlICYgd2xvcApjbG92ZXJmaWVsZCBtb3ZpZQpyZWZyYWN0aXZlIGxpZ2h0CnByb2R1Y3QgdmlldwpkeW5hbWljISEKY29zbWljIGFydGlmYWN0cwpvYmplY3Qgb3JpZW50ZWQgb250b2xvZ3kKYmxhY2tzbWl0aCdzIG91dGZpdApzcG9ydCBwYW50cwpzY2kgLSBmaSBlcXVpcG1lbnQKY2luZW1hdGljIGxpZ2h0LiBtZWRpdW0gc2hvdApyZWFsIHN0ZWVsICggMiAwIDEgMSApCmZsYXQgZ3JleSBjb2xvcgpsYWtlIHZpZXcKZW52aXJvbm1lbnQgZm9nCmNodW5reQphbGxpZ2F0b3JzCmdyZWF0IGNvbXBvc3Rpb24KbGlnaHRpbmcgY2hpYXJvc2N1cm8KaW5zYW5lbHkgaGlnaGx5IGRldGFpbGVkIGFydHdvcmsKMyBkIGdhbWUKZHJhbWF0aWMgc29mdCBsaWdodAppbgpzdHVkaW8gbGEgY2FjaGV0dGUKbGlnaHRuaW5nIGFyb3VuZAp0dXJidWxlbnQgc3Rvcm0gY2xvdWRzCmluIG5ldyB5b3JrCmJlYWNoIHNjZW5lCmhpZ2hseSBkZXRhaWxlZCBsYW5kc2NhcGUKd2lzcHkgbWFnaWNhbCBzbW9rZQpjZWlsaW5nCmNvaGVyZW50IGltYWdlCmd1c3Rhdm8gZG9yZQpuYXR1cmUgdGFraW5nIGJhY2sKY29sb3JpbmcgYm9vayBwYWdlCnRlbnRhY2xlcyByaXNpbmcgZnJvbSB0aGUgc2VhCmphbWVzIHdlYiB0ZWxlc2NvcGUKY29tcHV0ZXIgd2FsbHBhcGVyCmhlYXJ0cyBzeW1ib2wKY29zbWljIHNraWVzCnZyYXkgcmVuZGVyIDQgawp3aGVyZSB0aGUgd2lsZCB0aGluZ3MgYXJlCmFydCBoaXN0b3J5CnRoZSB3aW5kb3cgaXMgb3BlbgpkZXRhaWxlZCBzaG90Cm1hcmF0aG9uCmZpYm9uYWNjaSB2b2x1bWV0cmljIGxpZ2h0aW5nCmdyZWVuIGFuZCBvcmFuZ2UgdGhlbWUKc3VuIHJheQpnZW9tZXRyaWMgbGlnaHQgcmF5cwpjb21tdW5pc3QgcHJvcGFnYW5kYSBwb3N0ZXIKZnJvbnRzaG90CnRyYW5zY2VuZGluZyB0byBhIGhpZ2hlciBwbGFuZQppbiB0aGUgbXVsdGl2ZXJzZQptZWRpdW0gc3ltbWV0cnkKaW50cmljYXRlIGRldGFpbHMgaWxsdXN0cmF0aW9uCm9mZmljaWFsIG1vZGVybiBhbmltYXRpb24Kc3RyZWV0IGFydCBzdHlsZQpwaW5rIGFuZCBvcmFuZ2UKcml2ZXIgY29uZmx1ZW5jZQpyb3VuZCBmb3JtYXQKYWZ0ZXJub29uIHN1bgphbGllbiB3b3JsZHMKYmVhdXRpZnVsIGthd2FpaSBsaWdodGluZwpncmFtbXkgYXdhcmQgd2lubmluZwpjaW5lbWF0b2dyYXBoeSBsaWdodGluZwozIGQgcmVuZGVyIDggawpob3dhcmQKcm91Z2ggbGluZXMKZHJhbWF0aWMgcHJvZHVjdCBwaG90b2dyYXBoeQpzbWlsaW5nIHlvdW5nIHdvbWFuCndlYXJpbmcgYSBnb2xkIGNoYWluCmluIGdhcmRlbgptYW55IGdvYXRzCm1vZGVybiBjdWJpc20KaW50ZW5zbHkgZW1vdGlvbmFsCmFzdG9uIG1hcnRpbgpjZ2l2ZngKd2V0YXN0dWRpb2Z4Cm9jdGFuZXJlbmRlciAzIGQKdWx0aW1hdGUgY29sbGFiCmluIGZ1bGwgbWV0YWwgYWxjaGVtaXN0CnN1bmtlbiBzaGlwCmZ1bGwgZ2xvc3N5IGxpcHMKd2l0aCBhIGhhcHB5IGV4cHJlc3Npb24Kc3ltbWV0cmljYWwgYW5kIGNlbnRlcmVkCm1lbHRpbmcgcGFpbnQKZGV0YWlsZWQgd29tYW4Kd2VhcmluZyBhIG11c2NsZSB0ZWUgc2hpcnQKZHJhbWF0aWMgc21pcmsgcG9zZQpoZXJvaWNhbGx5IGJhdHRsZSBwb3NpbmcKcm9jb2NvIGN5YmVyIG5lb24gbGlnaHRpbmcKbWVkaXVtIGRldGFpbHMKZmFsbCBjb2xvcnMKaG9sZGluZyBhIHRpbiBjYW4KaG9ycm9yIHNjaS1maQpoaWdoIGRldGFpbCBjbG90aGluZwpyZWQgaGFpcmVkIHlvdW5nIHdvbWFuCmRlYWQgc291bHMKb3JnYW5pYyBmcmFjdGFsIHN0cnVjdHVyZXMKYW50aSAtIGdyYXZpdHkKYmFjayBsaXQgbGlnaHRpbmcKY2VudGltZXRlcnMgYXdheSBmcm9tIG15IGZhY2UKd2l0aCBtYXNzaXZlCmV2ZW5pbmcgc3VubGlnaHQKY2Fub24gbGVucwpzdXJyZWFsISEhCnF1aXhlbCB0ZXh0dXJlcwpzb2Z0IGNvbG9yZQpoeXBlciAtIHJlYWxpc3QKZ2lhbnQgY3Jvd2QKZHVzayBsaWdodAphY2hlbmJhY2gKaHlwZXJyZWFsaXN0aWMgc2hhZGVkCmludGVuc2UgZW1vdGlvbmFsIHBvd2VyCmJ1YmJsaW5nIHNraW4KcGFub3JhbWljIHBob3RvZ3JhcGh5CmRhbWFzY3VzCm1vcnBoCmNyeXN0YWwgbWF0ZXJpYWwKbHVtaW5vdXMgc2t5IGhlYXZlbiBiYWNrZ3JvdW5kCmtyZW56IGN1c2hhcnQgYW5kIGFzaGVyIGR1cmFuCmZsZXNoIC0gdG9uZSBjb2xvciBwYWxldHRlCmZpbmVseSBkZXRhaWxlZCBhbmdlbGljIGZhY2UKYnJvbnplIHNraW5uZWQKcXVhdGVybmFyeQpkYXJrIHN0b3JtIGNsb3VkcwpsYXRlIGFmdGVybm9vbiBzdW4Kc21vb3RoIHNoYXBlcyBhbmQgbGluZXMKZGVzY3JpcHRpb25zCnNldmVyZSBzbm93CmFyY2hpdGVjdHVyYWwgY29uY2VwdAptYW5nYSEKc2lkZWJ1cm5zCmludGVyaW9yIHBob3RvCnJlYWxpc3RpYyBwZXJmZWN0IGZhY2UKZmxhdGxheQpqYXIgb24gYSBzaGVsZgpmcmVzaCBtb2Rlcm4gc3R5bGUKc3RhcnQgb2YgdGhlIG1hdGNoCmZ1bGwgdGVhbQoyIDAgMCBtbSB0ZWxlcGhvdG8KZmlsbSBjb25jZXB0IGFydApoZCBpbGx1c3RyYXRpb24KZnVsbCBtb3JuaW5nIHN1bgpjdXRlOjIKZnV0dXJpc3RpYy4gZ2FtZSBjZwphcmNoaXRlY3R1cmFsIDMgZCByZW5kZXIKdmVzc2Vscwp3aXRoIGRldGFpbGVkCnVuZGVybGl0CmV4cXVpc2l0ZSBhcmNoaXRlY3R1cmUKcmVkIGFuZCBicm93biBjb2xvciBzY2hlbWUKdW5zYXR1cmF0ZWQKMyAvIDQgcG9zZQptYWRlIG9mIHRhcgppbiB0aGUgd29vZApjZW50ZXIgb2YgdGhlIHVuaXZlcnNlCmxhdHRpY2UKY2FzdGxlIHdhbGwKbW91bnRhaW5lb3VzIGJhY2tncm91bmQKYW5keSBwYXJrCnN0YWlyY2FzZXMKc3VuIGdsYXJlCnNjaSAtIGZpIGZpbG0gc3RpbGwKb2ZmaWNpYWwgdm9ndWUgZWRpdG9yaWFsCmludGVyaW9yISBkZXNpZ24KYnJhbmNoZXMgZ3Jvd2luZyBhcyBoYWlyCmF1dHVtbiBzdW5zZXQKZGV0YWlsZWQgZGV0YWlsZWQKd2F0ZXIgc3ByaXRlcwphc3ltbWV0cmljYWwgYXJ0d29yawpwaXhhciBhbmQgZGlzbmV5IHN0eWxlCiggYWxleGFuZGVyIGFyY2hpcGVua28gKQp0ZWFyIGRyb3AKZGlzbmV5IDEgOSA5IDAKcGVvcGxlIHdhbGtpbmcgaW4gdGhlIGRpc3RhbmNlCmNvbG9yZnVsIHJldHJvZnV0dXIKdmlldyBmcm9tIHRoZSBkaXN0YW5jZQpodWx0b24gYXJjaGl2ZXMKaGF6eSBsaWdodCByYXlzCmd1bnMgYmxhemluZwpvdGhlcndvcmxkbHkgdmlzdWFscwptYXJ0aGUgam9ua2VycwpkaXN0cmVzc2luZwpnZWlnZXIKIWZhY2UKdmVyZGlncmlzCnhpc2lvbiB3dQp2ZXJ5IGRldGFpZWQKbGlmZWxpa2UgcmVwcm9kdWN0aW9uIGluIDhrCiFkcmFtYXRpYyAhZmFjZQpzdWJzdXJmYWNlIGNyYWNrcwpsZWdlbmRhcnkgZ29kIGhvbGRpbmcgc3BlYXIKd2F0ZXIgcmVmbGVjdGlvbiBvbiB0aGUgZmxvb3IKZ2xvd2luZyBpbiB0aGUgZGFyawpyaGFkcyB3YXRlcmNvbG9yCmZhY2lhbCBwaWVyY2luZ3MKaXJyZXNpc3RpYmxlCnR1ZG9yCmVlZyBub2RlcyBvbiBzY2FscAooICggKCBncmFudCB3b29kICkgKSApCm9yYW5nZSBleHRyZW1lbHkgY29oZXJlbnQKZ29sZCBwbGF0ZWQKb3BlbmluZyB0aGlyZCBleWUKZWR3YXJkIGhvcHBlciBhbmQgbWlsbyBtYW5hcmEKZm91bnRhaW5zCm1pbWljCmhvbGRpbmcgYSBjYW5kbGUgaG9sZGVyCm9uIGEgc3VtcHR1b3VzIHRhYmxlY2xvdGgKb24gYSBzdW1wdHVvdXMgdmVsdmV0IHRhYmxlY2xvdGgKc2HDomRhbmUgYWZpZgpmb3RvcmVhbGlzdGljCmR5bmFtaWMgcmVmbGVjdGlvbnMKZ2xvd2luZyBmdW5ndXMKaG9sZGluZyBhIGZ1dHVyaXN0aWMgZ3VuCmRldGFpbGVkIG1lY2hhbmljYWwgcGFydHMKc21hbGwgYXN0cm9uYXV0IGxvb2tpbmcgdXAKMmQgc29saWQgc2hhcGUgbG9nbwptYXN0ZXJwaWVjZXVuZGVyd2F0ZXIgc2NlbmUKcHVycGxlIHZlc3QKYnVybmluZyBmbGFtZXMKc29mdCBwYWxlIHRvbmUKYWlyYnJ1c2ggZGFyayBkcmVzcwpib25lcyBvbiB0aGUgZ3JvdW5kCmdyYXkgaGFpciBhbmQgYmVhcmQKbG9zdCBjaXR5IG9mIGF0bGFudGlzCmFsdGVybmF0aXZlIHJlYWxpdHkgbWlycm9ycwpjb29saW5nCmNoZWNraW5nIGhlciBjZWxsIHBob25lCmluIHN0eWxlIG9mIGVkd2FyZCBob3BwZXIKc21vb3RoLWNoaW5uZWQKZnVsbHkgYm9keSBzaG90CnJlZCB3aW5ncwpmb2cgb2JzY3VyZXMgdGhlIGJhY2tncm91bmQKdGhlIHNreSBpcyBmdWxsIG9mIHN0YXJzCmdlb21ldHJpYyB0ZXNzZXJhY3QKYnJ1c2ggbWFya3MKc3RyaWtpbmcgY29sb3JzCnVuaW1hZ2luYWJsZSBjb21wb3NpdGlvbgpkaWdpdGFsIGFydCAtIG4gOQpwc3ljaGVkZWxpYyBmcmFjdGFsIGFydApoeXBlciByZWFsaXN0aWMgY29udGVudApvcmtuZXkgaXNsYW5kcwpleHRyYSB3aWRlCmZsb3JhbCBjcm93bgp0d28gY2F0cwppbiBhIGhvb2RpZQpzaGFycCBmb2N1cyBjaW5lbWF0aWMgbGlnaHRpbmcKY29sb3JlZCBwZW5jaWwgc2tldGNoCm9sZWcgYnVsYWtoCnRha2VuIHdpdGgga29kYWsgcG9ydHJhCmNyZWVweSB2aWJlCnJhaW4gYW5kIGhhemUKcHN5Y2hlZGVsaWMgdmlicmFudCBjb2xvcnMKcml2ZXIgZ29kCndpbGJ1ciBzbWl0aAp0cnVtcCB0b3dlcgpzb2Z0IGFuIGRpZmZ1c2UgbGlnaHRzCml0IGlzIG5pZ2h0IHRpbWUKZGVzb2xhdGVkCmhvbGRpbmcgYSBkcmluawpvcmdhbmljIGhlYWRwaWVjZQpzYWl5YW4gYXJtb3IKc2xpbXkgYW5kIHJlZmxlY3RpdmUKY2xvdWQgaW4gdGhlIHNoYXBlIG9mIGEgZHJhZ29uCmluIC0gZnJhbWUuIHBob3RvcmVhbGlzdGljCm1vdXRod2F0ZXJpbmcKZGV0YWlsZWQgc3BhY2Ugc3VpdApib3Vkb2lyCnN1cmZhY2UgaW1wZXJmZWN0aW9ucwpncm9vbWVkIGV5ZWJyb3dzCnRhcGVyZWQgaGFpcmxpbmUKZW1pdHRpbmcgcHN5Y2hpYyBwb3dlcnMKc2lnbWEgODVtbSAxLjQKcm9ja3dlbGwKaW5ub2NlbnQgZmFjZQpjbG90aGVkIGluIGV0aGVyZWFsIGFybW9yCnJlZCBuYXJyb3cgbGF2YSByaXZlcnMKY2Fub24gc2hvdApwc3ljaG9wYXRoCnZpbnRhZ2UgbW92aWUgcG9zdGVyCm1hdGkga2xhcndlaW4gYW5kIG1vZWJpdXMKY2luZW1hdGljcwpzY2llbnRpZmljIGluc3RydW1lbnRzCmJsYWNrIGZsb3dlcnMKbWFzdGVycGllY2UgLSBoIDc2OApzaWJlcmlhCmhlYWQgYW5kIHVwcGVyIGJvZHkKZnVsbGZhY2UKYXQgYSBkZXNlcnRlZCBjaXR5CmxpZ2h0IHNtaWxpbmcKdGhlcmUncyBmbG93ZXJzIGV2ZXJ5d2hlcmUKZGVjb3JhdGVkIHdpdGggc292aWV0IG1vdGlmcwpoaWdobHkgZGV0YWlsZWQgcGFuZWwgY3V0cwpjYXVzdGljcyBhbmQgcmVmcmFjdGlvbgpkZXRhaWxlZCBib29rIGlsbHVzdHJhdGlvbgppdiBkcmlwCmNhbW91ZmxhZ2UgdW5pZm9ybQpsb25nc3dvcmQKaHVtYW5pemF0aW9uCmh1bWFuaXplZApldGhlcmVhbCBzb2Z0IGFuZCBmdXp6eSBnbG93CnN5bWV0cmljYWwgZmFjaWFsCm5vc2VsZXNzCmdyZWVuIGF1cmEKYm9iIGN1dApzaG91bGRlcnMgY2FuIGJlIHNlZW4KbXV0ZWQgYmFja2dyb3VuZAoxOTMwODk3NDA3Cjg3MjYzNzc0NApjaW5lbWF0aWMgYW5kIGRyYW1hdGljIHJlZCBsaWdodAp0aGVuZWVkbGVkcm9wCmFydGlzdGljIDQgawp0YXR0b29lZCBwaW51cApyZXNwb25zaXZlCmVsZWN0cmljIGd1aXRhcnMKaG9seSBnZW9tZXRyeQpkaXJrIGR6aW1pcnNreQpyb2JvdCByZWxpZ2lvbgpjb21tYW5kaW5nCnNwYWNlc2hpcCBpbiBzcGFjZQptaWNrZXkgbW91c2UgZWFycwpwYXVsIG1jY2FydG5leQpvbmUgbGluZSBhcnQKd2FyaGFtbWVyIHN0eWxlCmNsb3RoZWQgaW4gYW5jaWVudAp3YXZ5IHNob3VsZGVyLWxlbmd0aCBoYWlyCnN0YXIgdHJlayB0bmcKZGFsZSBrZW93biBhbmQgdmFuIHNjaXZlcgpyaXNvZ3JhcGh5IHByaW50CmRyaXBwaW5nIGNvbG9ycwp3ZSBzZWUgdGhlbSBmcm9tIGhlYWQgdG8gdG9lCmVtb3Rpb25hbCBmYWNlCmJyb2tlbiBzaWducwppbnNhbmUgZmFjZQpibHVlIGFuZCBibGFjayBzY2hlbWUKaW4gYSBsYWIKd2l0aCBhIHR3aW4KZWR3YXJkIGJ1cm5lIGpvbmVzCnN3YW5sYW5kCmNoYXNlIHNjZW5lCmJhbG9vbnMKbWFuYXJhCmhpZ2ggcmVzb2x1dGlvbiBtYWNybyBwaG90bwpmYWludCBzbWlsZSBkYXJrIGxpcHN0aWNrCmhpZ2ggc2hhZG93Cndvb2RlbiBmdXJ0bml0dXJlCnR1cmYgcm9vZgpob2xkaW5nIGEgc3lyaW5nZSEhCmNyaW1wZWQgaGFpciBpbiB3YXJoYW1tZXIKd2hpdGUgbWFyYmxlIHRleHR1cmUKY3liZXJwdW5rIHBob3RvCnNvZnRnbG93CmFmdGVyIHRoZSBzdG9ybQpzaXR0aW5nIG9uIGEgcGFyayBiZW5jaApzY2VuZSBmcm9tIGthZ2VtdXNoYQpwb3N0bWFuIHBhdApnb2xkZW4gc3dvcmQKbWlkIG1vcm5pbmcgbGlnaHRpbmcKc3R5bGUgb2Ygc3RhcmZpbmRlcgpodWdlIGJ1bGwgZW1lcmdpbmcgZnJvbSB0aGUgc2FuZAozIDIgLSBiaXQKZXh0cmVtZWx5IGhhcHB5CmVkb3VhcmQgY2FwbGFpbgpoeXBlciBkZXRhaWxlZCB2aXNpb25hcnkgYXJ0CmZhbmdzIGFuZCBzbGltZQp3YXJtIGNvbG9yIHRvbmUKZnVycnkgcGVsdApzdHJhaWdodCBmYWNlCmhvbGRpbmcgYSBib21iCm1lZGl1bSBwb2x5CjMgZCBwaG90b3JlYWxpc3RpYwpmYWRlcyB0byB0aGUgaG9yaXpvbgpsZWlzdXJlIGFjdGl2aXRpZXMKbSAmIG0gcGx1c2gKcmFpc2luZyBiZXR3ZWVuIHRoZSBidWlsZGluZ3MKdmVsdmlhIGZpbG0KbWVhbgpmb3IgYSBjYXRhbG9ndWUKaGFsZiBhbmQgaGFsZgo4IDAncyBzdHlsZQpoYW5nYXIKZmVhciBvZiBzcGlkZXJzCnNlbGsgwrQgbmFtIGdvZCBvZiB0aGUgc3VuCmJlYXRzCmdlb21ldHJpYyBwYXR0ZXJuCmplc3VzIG9uIGNyb3NzCmNsZWFyIHNraWVzIGluIHRoZSBkaXN0YW5jZQpmbGFtaW5nIHRvcmNoZXMgYW5kIHBpdGNoZm9ya3MKZGFyayBkZW1vbmljIGRhbmNlcgptYWNoZXRlCmJlYXV0aWZ1bCBicm93biBleWVzCnN0b25lIHNjdWxwdHVyZQppbnRyb3NwZWN0aXZlIG1lYW5kZXJpbmcKZXhwcmVzc2l2ZSBleWVzLiBzeW1tZXRyeQpuaW5ldGllcyBub3N0YWxnaWEKbnVjbGVhciBmYWxsb3V0CmxlYXRoZXIgYW5kIHN1ZWRlCmFmcmljYW4gaWNvbm9ncmFwaHkKc3VwZXIgc21vb3RoCmNhdGNobGlnaHQgb24gdGhlIGV5ZXMhCmFydGdlcm0gYW5kIGdyZWsgcnV0a293c2tpCmN1cmF0ZWQgY29sbGVjdGlvbgpoaWdoIHBvbHkgdnJheQpibHVlIGFuZCBwdXJwbGUgdmFwb3IKZ2xvd2luZyBlbmVyZ3kgZWZmZWN0cwpzcGFyc2UgdmVnZXRhdGlvbgpkaXN0YW50IGNpdHlzY2FwZQpkaXN0YW50IG9jZWFuCmNvbnRyZWpvdXIgbGlnaHRpbmcKZmFjZSBvZiBlbW1hIHdhdHNvbgpjaW5lbWF0aWMgYXRtb3NwaGVyaWMgbGlnaHRpbmcKbG9uZyByZWQgY2FwZQpvcGVuIHdhbGwgYXJjaGl0ZWN0dXJlCndpdGggYXJ0ZXJpZXMgYXMgcm9vdHMKY2xvc2UgLSB1cCBwaG90b2dyYXBoCmp1bmdsZSB2aW5lcwpsYXBpcyBsYXp1bGkgZ3JhZGllbnRzCnRleHR1cmUgZm9yIDMgZAp2ZXJ5IGF3YXJkIC0gd2lubmluZwpwcm9mZXNzaW9uYWwgd2VkZGluZyBwaG90b2dyYXBoeQpwb3AgYXJ0IHBhaW50aW5nCnN0b25lIHBpbGxhcnMKZGFyayBwYXN0ZWwgY29sb3JzCmNlbnRyYWwgc3ltbWV0cmljYWwgY29tcG9zaXRpb24KcmVhZHkgdG8gZWF0CmNvbGxhZ2UgYXJ0d29yawpyZWZyYWN0ZWQgY29sb3Igc3BhcmtsZXMKZG91Z2hlcnR5IHBhdHJpY2sKY2hhcmxpZSBib3dhdGVyIGFuZCBhcnRnZWVtCmNocm9tZSBwbGF0ZWQKb21uaWRpbWVuc2lvbmFsCjEgNiAtIGJpdAphbWV0aHlzdCBjaXRyaW5lIG9wYWwKZmxvb3IgdGlsZXMKbW9jbwp1bnJlYWwgZW5naW5lIDUgNGsgcmVuZGVyCmxvbmcgYnJhaWRlZCBjdXJseSBicm93biBoYWlyCndpdGggYmxvb20gZXRoZXJlYWwgZWZmZWN0cwpydWRvbGYgYmVsYXJza2kKdmVyeSBhZXN0aGV0aWMgbGVhdGhlciBqYWNrZXQKdGF0dG9vIG9uIHNob3VsZGVyCm5pa29sYWkga2FyZWxpbgpob3UgY2hpbmEKcmV0b3BvbG9neQpsZW5zY3VsdHVyZSBwb3J0cmFpdCBhd2FyZHMKY29sb3JlZCBzY3JlZW50b25lCmtpdGJhc2ggMyBkIHRleHR1cmUgdmlicmFudApldGhlcmVhbCBsYW5kc2NhcGUKbmllYSA3CnRleGhub2x5emUKc2luY2UKdGltIGJyYWRzdHJlZXQKcG9zaW5nIGZvciBhIGZpZ2h0IGludHJpY2F0ZQpzb21lIHNwaGVyaWNhbApmaW5lIGRyYXdpbmcKa2VtZXRpYwp2ZXJ5IG1pbmltYWxpc3RpYwpwZXJmZWN0IGNpcmNsZQp3aXNlIGZvcmVoZWFkCnNlZHVjdGl2ZSBhbmQgcG93ZXJmdWwKbGlnaHQgYmVhbQp3aXphcmQgdG93ZXIKZGV0YWlsZWQgc3RyZWV0CnRyaWFkaWMgY2hyb21lIHNoYWRpbmcKZG9taW5pcXVlIGluZ3Jlcwp2aW5jZW56byByaWNjYXJkaQpydXBlcnQgZXZlcnRvbgpiaXJkcyBhbmQgYnV0dGVyZmxpZXMKYW4gb3BlbiBleWUgaW4gaXRzIGNlbnRlcgpjcm93biBvZiBtZWNoYW5pY2FsIHBlYWNoIHJvc2VzCnBhbGFjZSBkYW5jZQpsYXJnZSByb2NrcyB3aXRoIHRoaWNrIG1vc3MKa2FsYWRpbiBzdG9ybWJsZXNzZWQKZ3Jvb3Z5IGxpZ2h0aW5nCmRyZWFteSBncmVlbiBleWVzCm5vIG1vdXRoCiMgbWFjcm8KMiBkIGhkCmRlYWQgZmxvd2VycwphYmFuZG9uZWQgcm9ja2V0c2hpcAptYW55IHRoaWNrIGRhcmsga25vdHRlZCBicmFuY2hlcwpyb3VuZCBjbG91ZHMKaW50ZXJuYWwgY29udG91cnMKd29tYW4gc2lsaG91ZXR0ZQpmcmVlCmF5YWhhdXNjYQphZGFtIHZhcmdhCmFjaWQgcmFpbiBlZmZlY3QKbWluaW1hbGlzdGljIHN0eWxlCnNpZ21hIDEgMCA1IG1tIGYgMi4gOApzY2kgZmkgYWxpZW4gd29ybGQKZ29vZCBsb29raW5nIGZhY2UKYWRpbSBrYXNoaW4Kc3RhbmRpbmcgdG9nZXRoZXIKb3BlcmF0aW9uIGhpZ2hqdW1wCmxpZ2h0IGdyZWVuIGRyZXNzCnN3ZWF0eSBhYnMKYW5jaWVudCB0b21icyBpbiB0aGUgYmFja2dyb3VuZApjYXJyeWluZyBhIHRyYXkKdmludGFnZSBhcnQgZGVjbwpqdW5nbGUgaW4gYmFja2dyb3VuZAp2ZXJ0aWNhbCB2ZWdldGFibGUgZ2FyZGVucwp3aWxkIGZvcmVzdCEhISB2ZWdldGF0aW9uISEhCmZhbHNlIGNvbG9yCnBhc3RlbCBzaW1wbGUgYXJ0CmplYW4gZGVsdmlsbGUgYW5kIG1hcmsgYnJvb2tzCmhhdW50aW5nbHkgYmVhdXRpZnVsIHpvbWJpZQp2ZXJ5IGNvaGVyZW50IHN0eWxpemVkIGFydHdvcmsKcHJlbWl1bSBxdWFsaXR5CmhxIHByaW50CmhhbmRzIGluIGFpcgpob3QgcGluayBhbmQgZ29sZCBjb2xvciBzY2hlbWUKZnJhbmNvaXMgYm91Y2hlciBzdHlsZQpweXJvbWFsbGlzCmlyaXMgY29tcGlldApjcmVhdHVyZSBnb2QKYnJlYXRoIG9mIHRoZSB3aWxkIHNjcmVlbnNob3QKZGV0YWlsZWQgZmFjaWFsIHByb3BvcnRpb25zCnN0eWxlIGJsZW5kIG9mIGhpZGVvIGtvamltYQp1bHRyYSBmaW5lIGlua2xpbmVzCmRldGFpbGVkIHdoaXRlIGZ1cgpwaSAtIHNsaWNlcwphbGNoZW1pY2FsIHN5bWJvbHMKbWlycm9ycyBldmVyeXdoZXJlCmNyb3NzIC0gaGF0Y2hpbmcKbGlsbGllcwpsaWdodCBoYWxmIG9wZW5lZCBkcmVzcwpmcmVkZXJpYyBkYW91c3QKam9lIGJvdGFyZG8KaC4gci4gZ2lnZXIgYW5kIGJla3NpbnNraQpzdXJyZWFsIG1hdGVyaWFsCm1lbHR5CnNub3d5IGNhbnlvbiBhdCBkYXduCnByb3Rvc3MhIQphdWRvYm9uIGFuZCBiZWtzaW5za2kKcHJhZ3VlIGluIHRoZSBiYWNrZ3JvdW5kCmRldGFpbGVkIGlubmFyZHMKY29taWNib29rIGNvdmVyCmludHJpY2F0ZSBleWUgZGV0YWlsIGZvY3VzCnN0cmFuZ2UgZm9yZWlnbiBvYmplY3RzCmRhcmsgYnJpZ2h0IGVmZmVjdApmdXIgYW5kIGxlYXRoZXIgYXJtb3IKaGVpZ2h0IGRldGFpbGVkIGJvZHkgZWxlbWVudHMKc3R1ZGlvIGxpZ2h0IHBob3RvIHJlYWxpc20Kb2lsIHBhaW50aW5nLiBoZApyYWJidF9jaGFyYWN0ZXIKZWFybHkgbmlnaHQKYW1hbml0YQphbW9uZyB0aGUgc3RhcnMKZmxvd2VyIHNlcGFscyBmb3JtaW5nIGhlbG1ldApzdXBlciByb2JvdAphbXkgeWFzYmVjawpzeWQgbWVhZCBzdHlsZQphbiBhYnN1cmRseSBiZWF1dGlmdWwKYmxvb21pbmcgdHJvcGljYWwgZmxvd2Vycwp3YWxudXQgd29vZApvbGQgdGVzdGFtZW50CmpvaG4gc2lnbmVyIHNhcmdlbnQKYWxpZW4gd2F0ZXJmYWxsCmhhcHB5IHRvbmVzCnNrZXQgLSBvbmUgeCBpYW1yZXRybwpndWdnaW1vbgpweXJhbWlkcyBzdHlsZQpzaGUgaXMgaG9sZGluZyBhIHN3b3JkCndheW5lIGJhcmxvd2UncyBpbmZlcm5vCnBpeGVsYXRlCmluIGEgc3Vid2F5CnNpbXBsZSBkZXRhaWwuIGdyZWVuaXNoIGxpZ2h0aW5nCmNyYWNrZWQgd2FsbHMKb3B1cyBmcmFuY2lnZW51bQphbiBhcm1vcmVkIGNvcmUgdiBvbiB0aGUgZ3JvdW5kCnRleHR1cmUgcnVzdAp2ZXJ5IGxhcmdlCnN1cnJlYWxpc3RpYyBzdHlsZQpjZW50ZXJlZCEhIQoxNmsgaHlwZXIgcmVhbGlzdGljIHBob3RvZ3JhcGgKa29kYWsgcG9ydGEKYmx1cnJ5IGJhY2tyb3VuZApob2x5d29vZCBxdWFsaXR5CmhlYWQgaXMgYW4gZWdnCm5pY29sYXMgY2FnZSdzIGZhY2Ugb24gYW4gZWdnCm9rdGFuZQphZnRlcm5vb24gdGltZQpibGFjayBzaWxob3VldHRlCml0IGdvZXMgaW4gZm9yZXZlcgplZXJpZXdhdmUKc2FtdXJhaSBkdWVsCmRpcmVjdGlvbmFsIGxpZ2h0CnRoZSB1cHNpZGUgZG93bgppbiBhIGZvcmVzdCBtYWRlIG9mIG5pZ2h0bWFyZXMKaW50ZWxsaWdlbnQgZmFjZQpoeXBlciByZWFsaXN0aWMgb2N0YW5lIHJlbmRlciA0awpyZWQgd2lnCmFuIGV2aWwgYWxpZW4gYXN0cm9uYXV0CmRyYWIKc2VsZiBkZXByZWNhdGluZwp2b3luaWNoIG1hbnVzY3JpcHQKYW4gZXllCmZvYW0KbmV3IHlvcmsgYmFja2dyb3VuZAp3ZWFyaW5nIHBpbmsgZmxvcmFsIGNoaXRvbgoxIDkgdGgKaW50ZW5zZSBjbG91ZHMKaW5zaWRlIGEgZ29yZ2UKYW4gaW1wb3NzaWJseSBodWdlIHBpcmF0ZSBzaGlwCnZlcnkgdmVyeSB2ZXJ5IHZlcnkgdGFsbApmYW5jeSBsaWJyYXJ5CmNoYXJ0cwpibHVlIGFuZCBncmVlbiBjb2xvdXJzCmFydGlzdCB3ZWFyaW5nIG92ZXJhbGxzCm1vdGlvbiBibHVycmVkIGJhY2tncm91bmQKbW91bnRhaW4gcmFuZ2VzCmF1cm9yYSBib3JlYWxpcyBpbiB0aGUgc2t5CmZvZyEKdmFuaXR5Cm1hc3RlcnBpZWNlIDggawpmdWxsIGNvbG9ycwphbiBvcmNoaWQgZmxvd2VyCnRoaWNrIC0gcmltbWVkIGdsYXNzZXMKYmx1ZSBzbW9rZQpzb2Z0IGJsdXIgb3V0ZG9vciBsaWdodGluZwphbmltYWxzIHJ1bm5pbmcgYWxvbmcKc3dlZXBpbmcgdmlzdGEKbGlnaHQgc25vd2ZhbGwKcG9sYXJvaWQgb2N0YW5lIHJlbmRlcgpwcmFpc2UgdGhlIHN1bgpyaWNobHkgY29sb3JlZApodWdnaW5nIGhpcyBrbmVlcwp0YXJvdCBjYXJkIHRoZSBmb29sCnVzIGNvdXJ0CnN0YXJzIGFuZCBwbGFuZXRzIHZpc2libGUKbGF0ZXggZG9tbWUKbGFiZWxlZCBkaWFncmFtCmRhdmluY2kgc3R5bGUKbGFiZWxsZWQKY29zbWljIGhvcnJvciBlbnRpdHkKYW5hdG9teSBvZiB0aGUgdGVybWluYXRvcgp3ZWFyaW5nIHRvcm4gd2hpdGUgY2FwZQpibGl6emFyZCBzdHVkaW8KYW1yIGVsc2hhbXkKYnJpYW4gbWlsbGVyCmZseWluZyBzb3VscwpvdmVyIHRoZSBvY2VhbgpldGNoZWQgaW5zY3JpcHRpb25zCmFuY2llbnQgZ3JlZWsgc3RhdHVlCnByaW5jZSBvZiBlZ3lwdApsZW5zIGZsYXJlLiBvY2N1bHQgcGhvdG9yZWFsaXNtCmFuY2llbnQgb3Zlcmdyb3duISBydWlucwpvdXRlciBzcGFjZSBlbnZpcm9ubWVudAooICggKCBzeW50aHdhdmUgKSApICkKZnJvbSBpbnNpZGUgYSB0ZW1wbGUKdXRlIG9zdGVyd2FsZGVyCnZvbGNhbmljIGJhY2tncm91bmQKd2VhcmluZyBqZWFucyBhbmQgYSBibGFjayBob29kaWUKbWFkaG91c2Ugc3R1ZGlvcwpmcm9tIDE5ODYKMSAvIDgga2F0c3V5YSB0ZXJhZGEKYW5nZWwgb2YgdmVyZHVuCndoaXRlIGdvbGQgY29sb3IgcGFsZXR0ZQpibGFjayBqZXdlbHJ5CmdvdWYKYW5nZWxzIHByb3RlY3RpbmcgYSBwcmF5aW5nIG1hbgpzdHlsaXplZCBsYXllcmVkIHNoYXBlcwpzdHlsaXplZCBsYXllcmVkIHRleHR1cmVzCnR5cnVzIHdvbmcKZ29sZCBsaW5lbnMKZnJ1c3RyYXRlZCBleHByZXNzaW9uCmVwaWMgbGVnZW5kcyBnYW1lIGljb24KYW5uYSBmb3JzdGVybGluZwpyb21hbiBjYXRob2xpYyBpY29uCmRpZ2l0YWwgYXJ0IGlseWEga3V2c2hpbm92CnN0YW5kaW5nIGluIHRoZSBncmFzcyBhdCBzdW5zZXQKc3RhbmRpbmcgcG9zdHVyZQpwcm9rbwphbmltZSBjeWJlcnB1bmsgYXJ0CmJyaWdodCBuZW9uIGxpZ2h0aW5nCnNwaWN5CmFuaW1lIGdpcmwgd2VhcmluZyBhIGJsYWNrIGRyZXNzCnVuZGVyZ3JvdW5kIHR1bm5lbAoyLWJpdAp2aW9sZXQgY29sb3VyIHBhbGV0dGUKd2xvcCBsb2lzaCBhbmQgY2xhbXAgc3R5bGUKYW5pbWUgbW9uc3RlciBnaXJsCmNvbGxhcHNlCnJ1cm91bmkga2Vuc2hpbgpkZXJvbwp5b3VuZyBibGFjayB3b21hbgp5ZWxsb3cgc3BvcnQgZ2xhc3Nlcwpmcm9tIG92ZXJ3YXRjaAp2YXBvcndhdmUgY2l0eQphbmltZSB0cmliYWwgYm95IHdpdGggbG9uZyBoYWlyCmhpZ2ggcXVhbGl0eSBkZXRhaWxlZCBhbmltZQpjb2xkIHN0dWRpbyBsaWdodGluZwpzZXZlbiBkZWFkbHkgc2lucyBhbmltZQpzdHlsZSBvZiBmaW5hbCArIGZhbnRhc3kgKyAxIDUKY3Jvc3N3YWxrCm11c2V1bSBzY3VscHR1cmUKYW5pc3Rvbgp3ZWFyaW5nIGEgc2V4eSBjcm9wcGVkIHRvcApzdXNwZW5kZWQgaW4gemVybyBncmF2aXR5CmdvbGRlbiBhbmQgYmxhY2sgZHJlc3MKYWJvdXQgdG8gc3RlcCBvbiB5b3UKYWNyeWxpYyBkcmF3aW5nCmRpbSBkaW5neSBneW0KZmFsdmllCnBlcmZlY3RseSBsaXQuIG1vdmllIHN0aWxsCnBpbmsgcmVmbGVjdGlvbnMKbGVvbmFyZCBkYSB2aW5jaSBzdHlsZQpob2xkaW5nIGEgZ3VpdGFyCmZhbnRhc3kgbW92aWUKZ2VuZXJpYyBmdXJyeSBzdHlsZQpkaXN0YW50IHZpYnJhbnQgbWFnaWNhbCBsaWdodHMKYW50aHJvcG9tb3JwaGljIHJhdmVuIGtuaWdodAppcm9uIGFybW9yCjMgZCB2cmF5IHJlbmRlcgpzbWlsZWluZyBucmlnaHQKbW9vbiBidWxsIHNhbXVyYWkKbW9vbiBiZWFyIHNhbXVyYWkKY2FjdHVzIGFuZCBwZWFybHMgb3ZlciB0aGUgaGVhZApicmVhdGhpbmcgYmx1ZSBmaXJlCnNwbG9jaApyZWFsaXN0aWMuIDggawpwaG90byBvbiBpcGhvbmUKY2xlYXIgZXllZAphcmNhbmUgY29uY2VwdCBhcnQKbWFnaWMgZXhwZXJpbWVudApiaW9yZW1lZGlhdGlvbgp2b2x1bWV0cmljIGxpZ2h0aW5nIGFuZCBmb2cKZmVhdHVyaW5nIHdpcmVzCm1lZGl1bSBoZWlnaHQKYXJjaGl0ZWN0dXJhbCBzaG90CmluIHN0eWxlIG9mIHphaGEgaGFkaWQgYXJjaGl0ZWN0CmluIHN0eWxlIG9mIHVsdHJhIHJlYWxpc3RpYwpodXQKb2N0YW5lIHJlbmRlciA6IDogMwpyZXRybyBmdXR1cmlzdGljIGZhc2hpb24KZG9uYWxkIHRydW1wIGZhY2UKZmxvYXRpbmcgaW4gYWlyCmZ1dHVyaXN0aWMgYWx0ZXJuYXRlIHRpbWVsaW5lCmFxdWFtYXJpbmUgY29sb3IgcGFsZXR0ZQpibGFjayAzIGQgY3Vib2lkIGRldmljZQpsZWZ0IGV5ZSByZWQgc3RyaXBlCnNoYXVuIHRhbi4gaHlwZXJyZWFsaXNtCjEgOSA4IDUgcGhvdG9ncmFwaApjaW5lbWF0b2dyYXBoaWMgbGlnaHQKZWxlZ2FudCBob3Jyb3IgYXJ0d29yawpzdGF0dWUgb2YgY2FydmluZyBtYXJibGUKYXJ0IGRlY28gbW90aWZzCnNjYXJsZXQgZmVhdGhlciBib2EKaW50cmljYXRlIHNjcm9sbHdvcmsKY2xlYXIgY29sb3JzCm9seW1waWNzIGV2ZW50IDE5MzAncwpmdWxsIG9mIGxpZ2h0CmFydCBub3V2ZWF1IGZyYW1lCnN5bW1ldHJ5IHN5bW1ldHJpY2FsCnNoeSBhbmQgZGVtdXJlCndvbWFuIHBvc2luZwoxIDkgNCAwIHMgaGFpcmN1dAphcnRnZW0gYW5kIGJlZXBsZSBtYXN0ZXJwaWVjZQpzaGFkb3dydW4gc3BsYXNoIGFydApsZWFndWUgb2YgbGVnZW5kcyBhcnQKc2VydmVyIGluIHRoZSBtaWRkbGUKd29uZGVyZnVsbCB0ZWNobm8gcGFydHkKZm9yZXN0IGNpdHkgc3RyZWV0cyBiZWhpbmQgaGVyCmhpZ2hseSBkZXRhaWxlZCBhbmQgaHlwbm90aWMKbW9uc3RlciBlbmVyZ3kKc3R5bGUga2ltIGp1bmcgZ2kKd2VzIGFuZGVyc29uIGFuZCB3ZXMgYW5kZXJzb24KYWJzZW50IGZyaWVuZHMKbG9zaW5nIGNvbnRyb2wgb3ZlciBvbmUncyBsaWZlCmZ1cnJ5IGFydGlzdAp3b2xmeSBuYWlsCmJlcmtleSBqb2huCmJvd2F0ZXIgY2hhcmxpZQphc2hlCmRhcmsgaW5rCnBpeGFyIGFydAp3aGl0ZSBnb3duCmNhdWdodCBpbiA0IGsKZGF2aWQga2xlaW4KYmFyb3F1ZSBlbnZpcm9ubWVudApjYW5vbiBuaWtvbgpiYWNrZ3JvdW5kIHNvZnQgYmx1ZQp2aXJpZGlhbgpmaW5kaW5nIG5lbW8KYWJleWFuY2UKYXJ0IGd0YSA1IGNvbWljcwpibGFjayBhbmQgcmVkIGJhY2tncm91bmQKZm9nZ3kgYW5kIGF0bW9zcGhlcmljCmxpZ2h0IGJsZWVkCmNpbmVtYXRpYyBuaWdodCBsaWdodGluZwppbiBhIGNvc21pYyBuZWJ1bGEgYmFja2dyb3VuZAphdG1vc3BoZXJpYyBibHVlcwpibGVzc2luZyB0aGUgc29pbCBhdCBuaWdodAp0d28gYWJvcmlnaW5hbCBlbGRlcnMKYWNjdXJhdGUgYm9kaWVzCmNpcmN1aXQgYm9hcmQgYXJ0aWZhY3RzCmF0dHJhY3RpdmUgYW5pbWUgZ2lybApzaG9ydCBwdXJwbGUgaGFpcgp2ZXJ5IGRldGFpbGVkIGRpZ2l0YWwgcGFpbnRpbmcKaW4gdGhlIHB1YgphdHRyYWN0aXZlIG1hbiBkcmlua2luZyBjb2ZmZWUKY2Fycm90eSBoYWlyCmZ1dHVyaXN0aWMgY3liZXIgY2xvdGhpbmcKYW5kcm9pZCBqb25lcyBhbmQgcmhhZHMKYnJvYWQgc3Ryb2tlcwpjb25jZXB0IGFydGkKZmxvd2VyIGV4cGxvc2lvbgp2ZXJ5IGxvbmcKd2l0Y2hsaWdodCBjYXJuaXZhbApuYXR1cmFsIGxhbmRzY2FwZSBiZWF1dHkKbmVvLWNsYXNzaWNhbCBwYWludGluZwpmbG93ZXJzIGdyb3dpbmcgb3V0IG9mIGl0cyBoZWFkCnNhZCBhbmQgaGFwcHkKbWFtbW90aApzdHlsaXNoIHBvc2UKdGFuay10b3AKc2hpbnkgc2lsdmVyIHdpdGggZ29sZCB0cmltCmdlbXN0b25lIGZvcmVoZWFkCmxvbmdzcGVhcgpiaW9sdW1pbmlzY2VuY2UKc2xhdmljIGZvbGsgZmFpcnl0YWxlCmtlbm55IHNjaGFyZgppbnRyaWNhdGUgYnJhaWRlZCBoYWlyCmJsb29kIHJpdmVycwpoaWdoIGRldGFpbGVkIGFydApiYWNrdmVpdyBwaWN0dXJlIG9mIGVsZiByb2d1ZQpvZGQgZXllCm1vZGVsbGVkIGluIHpicnVzaApteXN0aWNhbCBsYWtlCnR1ZnRlZCBzb2Z0bHkKcmVhbGlzdGljIG1vdmllIHN0aWxsCmZ1bGx5IGNob2NvbGF0ZQppbnZhZGluZyBhcm15IGJhY2tncm91bmQKMyBkIGNsYXkgZmlndXJlCmlubGFpZCB3aXRoIGdvbGQgcm9jb2NvCmJhcmJyYSBzdHJlaXNhbmQgbm8gbWFrZXVwCnJ1bmljIGluc2NyaXB0aW9uCmJhcm9uZyBmYW1pbHkKZ3JpbWRhcmsgc3RlYW1wdW5rIGZhbnRhc3kKZnVsbCBmYWNlIHBvcnRyYWl0CmhhbmQgLSBkcmF3biBhbmltYXRpb24KZnVsbCAtIHZpZXcKY2x5ZGUgd2FsZHdlbGwKZGFuaWVsIHIgaG9ybmUKYmF0dGxlIGJldHdlZW4gZ29vZCBhbmQgZXZpbApiYXR0bGUgdG9hc3QKcmFnaW5nIHNlYSBmb2dneQpiZSBydW5uaW5nIHVwIHRoYXQgaGlsbApibGFkZSBydW5uZXIgMiAwIDQgOSBjb25jZXB0IGFydApibHVlIGFuZCB5ZWxsb3cgbGlnaHRpbmcKY29sb3JmdWwgcGljdHVyZQptdXNsaW0KYmVhcmRlZCBtYW4KaGFpciBqZXdlbGxlcnkKZ29uem8KZm9jdXMgb24gaXJpcwpwaG90b2dyYXBoeSBwaG90b2pvdXJuYWxpc20Kc3VycmVhbCByZWFsaXN0aWMKbGVvbmFyZG8gZmlvcmF2YW50aQppbiBhIGdhbGxlcnkgc2V0dGluZwp8IHwgdmVyeSB2ZXJ5IGFuaW1lISEhCnRyaWFkaWMKZGFuIGVkZXIKYmVhdXRpZnVsIGFuaW1lIGNhdGdpcmwKcmVkIGdsb3dpbmcgaGFpcgprYXdhaWkgYW5pbWUgbWFuZ2Egc3R5bGUKd2l0aCBraXRzdW5lIG1hc2sKcmVhbGx5IGNvb2wgcG9zZQpjaW5lbWF0aWMgY29tcG9zaXRvbgpjeWJlcnN1aXRzCnN3ZWV0IHNhcmNhc3RpYyBzbWlsZQp0YWtheXVraSB0YWtleWEKcmFtIGhvcm5zCmNsZWFuIHN5bW1ldHJpY2FsIGZhY2UKYXp0ZWMgYmF0aGluZyBzdWl0CmNlbnRlciBvZiBpbnRlcmVzdApib3VndWVyZWF1IHN0eWxlIHBvc2UKc2V4eSBwdWRpY2EgcG9zZSBnZXN0dXJlCmNsYXNzaWNhbCBvcm5hbWVudGFsIGRlc2lnbgprYW50YWkgY29sbGVjdGlvbiBzdHlsZQp1bmRlcndhdGVyIGNyeXN0YWwgY2F2ZXJucwpvbiBzaWRld2FsawpiZWF1dGlmdWwgZGFyayBiZWFjaCBsYW5kc2NhcGUKamF3cwpuZXcgY29udGVtcG9yYXJ5CmFwb2NhbHlwc2UgYXJ0ISEhIQphcG9jYWx5cHNlIGxhbmRzY2FwZSEhISEhCmNhcm1lbG8gYmxhbmRpbm8Kd2Fpc3QgdXAgcG9ydHJhaXQKc3Bvb2t5IGhhbGxvd2VlbiBuaWdodApmYW50YXN5IGR1ZWwKZmxhbWluZ29lcwooICggZGlhIGRlIGxvcyBtdWVydG9zICkgKQpkYXJrIGZlYXRoZXJlZCB3aW5ncwpwaWdtZW50CnN0ZWFtcHVuayBhZXN0aGV0aWMKZmVtbWUgZmV0YWwKZ2xhc3MgY2VpbGluZ3MKZXRzeSBzdGlja2Vycwpjb3JyZWN0ZWQgaGFuZApzaWx2ZXIgYmFja2dyb3VuZApiZWF1dGlmdWwgZnVsbCBib2R5IHNob3QKYmx1ZSBtb2hhd2sKY2luZW1hdGljIG1vcm5pbmcgbGlnaHQKZGFpbnR5CnN5bW1ldHJpY2FsIHBvcnRyYWl0IHN5bW1ldHJpY2FsCmhpZ2hseSBkZXRhaWxlZCBjZ3NvY2lldHkKaG9sZGluZyBlbGVjdHJpY2l0eSBhbmQgYmlyZHMKYmVybmllCm1hZ2ljIHN0b3JtCmJsYXppbmcgaW5mZXJvCjQgayBoZCBmYWNlISEhCnZvbHVtZXRyaWMgbmVvbiBsaWdodGluZwpsb25nIGxpZ2h0IGJyb256ZSBicm93biBoYWlyCnN0dW5uaW5nIHdhdmVzCmNvb2wgd2FybSBsaWdodGluZwpjcmFuYmVycnkgaGVsbWV0CmJlYXV0aWZ1bCBsYWR5CmhlYXJ0YnJva2VuCndlbGwgY29udG91cmVkIHNtb290aCBmYWlyIHdhbGxzCjMgLSBkIDggawpiZWF1dGlmdWwgbmVjcm9tYW5jZXIgZ2lybAp0aHJlZSAtIGRpbWVuc2lvbmFsIHJlbmRlcmluZwpzdGVlbCBwbGF0aW5nCmJlYXV0aWZ1bCBvY3RvcHVzIHdvbWFuCnN0YW5kaW5nIGluIGdyYXNzeSBmaWVsZApzbm93IG9uIHRyZWVzIGFuZCBncm91bmQKaG9seSBwYWxhZGluCmludHJpY2F0ZSBnZWlzaGEga2ltb25vCnNwZWVkbwpiZWF1dGlmdWwgcGluZSB0cmVlIGxhbmRzY2FwZQpncmVnIHJ1dGtvd3NraSBjYXJuZV9ncmlmZml0aHMKc2lsaWNvbmUgc2tpbgpjaW5lbWF0cm9ncmFwaGljCnNtb2tpbmcgYSBjaWdhcmV0dGUgaW4gdGhlIHJhaW4KYmF0dGxlIGFjdGlvbiBwb3NlCnNlbGYgY2VudGVyZWQKc2hlIGlzIGluIHB1cmUgYmxpc3MKbWFqZXN0aWMgc25vd3kgbW91bnRhaW5zCnBhdGhzCm9ybmF0ZSBkZXRhaWxlZCBiYWNrZ3JvdW5kCnNjcmVlbiBwcmludCB0ZXh0dXJlCnNleHVlbGwKdml2aWQgdmlicmFudCBkZWVwIGNvbG9ycwp3ZWFyaW5nIHRvcm4gY2xvdGhlcwpiaW9uaWMgY3lib3JnIGltcGxhbnRzCnZlbmV0aWFuIG1hc2sKcmVuYWlzc2FuY2UgbXVyYWwKZGlnaXRhbCBhcnQgb2YgYW4gZWxlZ2FudApiZWF1dGlmdWwgY3liZXJwdW5rIHdvbWFuIG1vZGVsCmN1dGUgZmFjZS4gZGFyayBmYW50YXN5CnRlcm1pbmF0b3IgdGVjaApzZWFzb25hbApwaG90b2dyYXBoeSBvZiB0b2RkIGhpZG8KcHJvdG9zcwpoZWxwZnVsCmVsZWdhbnQgYW5kIHByb3VkCnVud2luZCEKYmV1dGlmdWwgZ2lybCBjeWJvcmcKZGlzY28gcGFydHkKZXBpYyBwcm9wYWdhbmRhIHBvc3RlcgppbnRyaWNhdGUgZGV0YWlsZWQgZGlnaXRhbCBhcnQKc3R5bGUgamVhbiBnaXJhdWQKY2xlYW4gYW5kIHByaXN0aW5lIGRlc2lnbgpmbHV4LiBmYW50YXN5CmxhbnRlcm5zIG9uIHRoZSBwb3JjaAp0d28gc3dhbnMgc3dpbW1pbmcgb24gdGhlIGxha2UKaGlnaCBxdWFsaXR5IGRldGFpbGVkCmNocm9tYXRpYyBjb2xvcgpmaWxsZWQgd2l0aCB3YXRlcgpmb2N1cyBvbiBtYXAKYm9rZWggbGlnaHQgZnJvbSB0b3AKc2NpZW5jZSBmaWN0aW9uIGVsZW1lbnRzCmxhbXBwb3N0cwpiaWcgd2F2ZSBhbmQgZm9hbQpiaWcgd2VpcmQgc3BhY2VzaGlwCmFudmlsCmJpby1mdXR1cmlzbQpleHRyZW1lIGxpZ2h0CjMgZCBjaGFyYWN0ZXIgY29uY2VwdApvcmdhbmljIHN0ZWVsCmVzY2FwaW5nIGFpciBidWJibGVzCmZ1enp5IG9yYW5nZSBwdXBwZXQKZGVwdGhzCmJpcnRoZGF5IGNha2UKYmxhY2sgc3BsYXNoZXMKb3JpZW50YWxpc21lCmFydGlmaWNpYWwgc3BpZGVyIHdlYgpjcmVhdGl2ZSBjb2RpbmcKbG9va3MgZGlyZWN0bHkgYXQgY2FtZXJhCmxpZ2h0IHN0dWJibGUgYmVhcmQKYnJhc3MgaW5zdHJ1bWVudHMKMSA5IDcgMCBzIHBvc3Rlcgp3aXJlcyBlYXJ0aCBiYWNrZ3JvdW5kCnRoYWkKYmxhY2sgYW5pbWUgbWFuZ2EgZ2lybApwaW5ob2xlIGVmZmVjdAphbmFsb2d1ZSBwaG90byBsb3cgcXVhbGl0eQpiYWNrIGFyY2hlZApmYWxsIGZvbGlhZ2UKc3dlZXQgYWxtb3N0IG9pbAphbG1vbmQgYmxvc3NvbQpsaWdodCBibHVyCmJsYWNrIGhvbGUgcmlzaW5nIGFib3ZlIGNpdHkKZGVtb25pYyBzaHJpbmUKYmxhY2sgbWV0YWwgY29uY2VydCBmbHllcgozIGJhbmQgbGluZXVwCnJlZCBnbG93IGluIHNreQplcmlrIGpvaGFuc3NvbiBzdHlsZQpyZWN0aWxpbmVhciB2YXBvcndhdmUKc3VwZXJyZWFsaXNtIDhrIHJlc29sdXRpb24Kd2VhcmluZyBkYXJrIGdyZWVuIGJvbWJlciBqYWNrZXQKbmVvbiBjb2xvcnMgdmlicmFudCBjb2xvcnMKYmxhY2twaW5rIGplbm5pZQphbnZpbGwKc3lkIG1lYWQgY29uY2VwdCBhcnQKYmxpc3NmdWwgam91cm5leQpibG9uZGUgZ2lybApodWdoIHdhcmQKaHViYmFyZCBzdW5kYmxvbQpsZWdlbmRhcnkgYXJtb3IKbG93IGxpZ2h0IGNpbmVtYXRpYwpyaHl0aG0Kc2NpIGZpIGRpZ2l0YWwgcGFpbnRpbmcKbG9uZyBzaGFycCB0ZWV0aAp6ZWxkYSBicmVhdGggb2YgdGhlIHdpbGQKaXQncyBmbHlpbmcgYmV0d2VlbiBhIHN0b3JtCnVuZGVyd2F0ZXIgYmFja2dyb3VuZAplbnZlbG9wZWQgaW4gZ2hvc3RzCmJsdWUgd29vZGN1dCBwcmludCBjYXJ0b29uCmJsdWUnc25hcHB5IGdpZnRzJ3BsdXNoIGRvbGwKYXJ0cG9wCnN0eWxpc2VkIHBhaW50aW5nCnBvcnNjaGUgOSAxIDEKZ2FtZSBjb25jZXB0CmhvbGRpbmcgYSBwYWludGJydXNoCmJlYXV0aWZ1bCBoZWFkCm5pY2UgbGVncwpib2lsZXIgcm9vbQpkaWdpdGFsIHJlc3RvcmF0aW9uCmJvcmVkIGFwZSBuZnQKaG91cmdsYXNzIGludHJpY2F0ZSBkZXRhaWwKc2VsZmllISEhISEKc3Bvb2t5IGZpbHRlcgprYXp1ZSBrYXRvCmhvbGRpbmcgc3BlYXIKc29mdCBhbmQgZGV0YWlsZWQKc29mdCBibHVlIHRvbmVzCnBhc3RlbCBmbG93ZXIgcGV0YWxzIGZseWluZwpydWFuIGppYSBhbmQgYnJvbQp1Z2x5IGFydApmdWxsIGxlbmd0aCBwb3J0YWl0CmJyaWdodCBub3JkaWMgZm9yZXN0CnVwZnJvbnQKZGlmZnVzZSBvdmVyaGVhZCBsaWdodGluZwpkcmluayBtb3JlIGNvZmZlZQp3ZSBjYW4gZG8gaXQKaGVhdnkgY29uZHVpdHMKaW1wb3NpbmcgYW5kIGRvbWluYXRpbmcKdGFubnkgc2tpbgpmbGlwcGVkIG91dCBoYWlyCmNhcmdvIHNwYWNlc2hpcHMKd2VhcmluZyBhIHN0cmF3IGhhdCBhbmQgb3ZlcmFsbHMKc2N1bHB0dXJlIGdhcmRlbnMKdGFpZ2EgbGFuZHNjYXBlCmJ1Y2tsZWJ1cnkgZmVycnkKcmVhbGlzbSBzdHlsZQpidWlsZGluZ3Mgb24gZmlyZQpnaWxsZWFyZAphbHBob25zZSBtdWNoYSBjZ3NvY2lldHkKYnVyZGlzaW8KZGV0YWlsZWQgaW50cmljYXRlIHNrZXRjaAp1bHRpbWF0ZSBkZXRhaWwKY2VsbHBob25lCmZhbGxpbmcgb3V0IG9mIHRoZSBmYWNlCnRlbXBvcmFyeSB0YXR0b28KY2luZW1hdGljIG91dGRvb3IgbGlnaHRpbmcKc2NpIGZpIGZ1dHVyaXN0aWMgY29zdHVtZQpzZXJlbml0eSAmIGNhbG0Kd2l0aCBhIHRvdWNoIG9mIG1hZ2ljCmNyZWF0aW5nIGFuIG9wdGljYWwgaWxsdXNpb24Kc3VjaCBhcyBhcm1zICYgbGVncwpzdGVlbCBiYWxsIHJ1bgpwYXNzaW9uIGZsb3dlcgpyb21hCmNhZmUgaW50ZXJpb3IKY2FoYWJhIHJpdmVyIGFsYWJhbWEKY2FrZSBzY3VscHR1cmUKaGl2ZQpkcmFpbnBpcGVzCmRvIGhvYW5nIHR1b25nIGFydHdvcmsKY3J5cHRvcHVuawp1bmV4cGxhaW5lZCBwaGVub21lbmEKY2FuZHkgYXBwbGUKYmxvb2Qgc3BsYXR0ZXIgb24gdGhlIHNpZGVzCnd3IDEKYXBwbGllZCB0aGljawpkaXNndXN0CmFubm95YW5jZQplbGlhcyBjaGF0em91ZGlzCmRyeSB0cmVlcwpkZXRhaWxlZCB3aGVlbHMKZnVsbCBib2R5IGluIHNob3QKY2FybCBzYWdhbgptZWRhbGxpb24KY2xlYW4gYmx1ZSBza3kKc2hhcnBpZQpjaW5lbWF0aWMgYmx1ZSBhbmQgZ29sZAp3aGlybHkKdHdpcmx5CnB1cnBsZSBhcm1vcgpmbG9hdGluZyBsYW1wb29ucwpwZXJmZWN0IGFuaW1hbApjYXQgYXR0YWNraW5nIHRva3lvCmNhdCBkZXRhaWxlZAp3YXRlciBjb2xvcnMKaW5kaWFuIHN0eWxlCmNhdCB0aGUgYXNzYXNzaW4KY2F0YXN0cm9waGUgYmFsbGV0CnN1cGVyaGVybyBib2R5CmhpZ2ggYW5nbGUgc2VjdXJpdHkgY2FtZXJhIGZlZWQKY3liZXJwdW5rIGNpdHkgc3RyZWV0IGJhY2tncm91bmQKc3RlZmFuIG1vcnJlbGwKYmFyb3F1ZSBkZXRhaWxlZApjbGVhciBibHVlIHNreSB2aW50YWdlIHN0eWxlCm1hZCBvbGQgYmFsZCB6b21iaWUKYmVhY2ggdHJlZXMgaW4gdGhlIGJhY2tncm91bmQKcm9ib3RpYyBmYWNlCnN1bnNldCArIGhkcmkKZGFyayBwaG90b2dyYXBoCmJpZyBiZWUKZmx5aW5nIGNvdwpkZXRhaWxlZCBhbm5vdGF0ZWQgcGFpbnRpbmcKZHJhbWF0aWMgY29udHJhc3QgbGlnaHRpbmcK8J+YsSBjaGFvcyDCtyBuaWdodG1hcmUgcmVzaW4KaGlnaGx5IGRldGFpbGVkIGZ1bGwtYm9keSBhcnQKd29ya2luZyBpbnNpZGUgcmVhY3RvciByb29tCmJsYWNrIGJvbWJlciBqYWNrZXQKZGluYWggZHJha2UKbWVkaXVtIHNob3QuIGRldGFpbGVkCmphY2tldApqYXBhbmVzZSBzdHJlZXR3ZWFyCnNob3VqbyBtYW5nYSBjaGFyYWN0ZXIgZGVzaWduCm5lbyBnb3RoCmdyZWVuIHJvYmVzCm9wZW4gdiBjaGVzdCBjbG90aGVzCmFuY2llbnQgd2hpdGUgZHJlc3MKc2VsZiAtIHNhdGlzZmllZCBzbWlyawpoZSBoYXMgYSBwaXN0b2wKcnVraXMuIGNvbWljIGJvb2sgc3R5bGUKcmVsYXhpbmcgbW9vZApyZWFsaXN0aWNhbGx5IHJlbmRlcmVkIGV5ZXMKd2llbGRpbmcgZmlyZQp0cmFuc2Zvcm1lcnMgd2FyIGZvciBjeWJlcnRyb24KbWlsZXMgbW9yYWxlcyEhIQpweXJvbWFsbGlzIHJlbmUgbWFyaXR0ZQpyZWxpZ2lvdXMgcm9iZXMKbGF1Z2hpbmcgbWFuCmRldGFpbGVkIHJlZCBsaWdodGluZwphbGVqYW5kcm8gbWlyYWJhbApleHBsb2l0YWJsZSBpbWFnZQptYW8KY2hpY2tlbiBvbiB0b3Agb2YgYSBjYXIKZmlzc3VyZXMKc3R5bGlzaCBkZWl0eQpvcmdhbiBoYXJ2ZXN0aW5nCmluIHRhcmtvdgpibGFjayBvaWwgYmF0aApjb250b3VyIGRyYXdpbmcKcGlubyBkYWVuaSBhbmQgZGFuIG11bWZvcmQKY2h1Y2sgcm9hc3Qgbm9ycmlzCm5pZXIgYXV0b2FtYXRhCmphcGFuZXNlIHBvcHN1cnJlYWxpc20Kb2xkIGNvbXB1dGVyIG1vbml0b3IKZHJhbWF0aWMgbGVucyBmbGFyZXMKcXVhbGl0eSBkaWdpdGFsIGFydAp0b3JuIG1hZ2F6aW5lIHN0eWxlCnJvYm90aWMgcGFydHMKc2Fzc3kgcG9zZQpkb2luZyBhIHNhc3N5IHBvc2UKc2xlZWsgcHVycGxlIGV5ZXMKZmxvYXRpbmcgZ3JhcGhpY3MKZGVzZXJ0IHZhbGxleSBvZiBib25lcwpzbGVlayBkcmFnb24gbGVncwpwYXcgc2hvdApjaW5lbWF0aWMgZ29kZGVzcyBib2R5IHNob3QKc21va2luZyB3aXRoIHNxdWF0IGRvd24gcG9zZQphbiBhbmNpZW50IGxhbmQKa29kYWNocm9tYXRpYwppbiBhbiBldmVuaW5nIGF1dHVtbiBmb3Jlc3QKaGFkcm9uIGFudGltYXR0ZXIgdmFjdXVtIHJlYWN0b3IKc3Vuc2V0IGV2ZW5pbmcgbGlnaHRpbmcKZGFpc3kgZHVrZXMKZmxhcmluZyBnaWxscyBhbmQgYmFsZWVuCnN0eWxpc2VkIG1pbGl0YXJ5IGNsb3RoZXMKb3BlbiBzeW50aGV0aWMgbWF3CmJlYXV0aWZ1bCBnbG93aW5nIGJhY2tsaXQKZ2FydGVycwpmdXR1cmlzdGljIHByZWNpb3VzIG1ldGFscwpodWdlIGNvbXB1dGVyIHNjcmVlbnMKYXJyYWtlZW4KZnJvbSBmcmFuayBoZXJiZXJ0IG5vdmVscwprYXRzdWhpcm8gLSBvdG9tbwpzYXRvc2hpIC0ga29uCnJhaW5kcm9wCmJyaWdodCB3aGl0ZSByZWFsaXN0aWMKbW9kZXJuIG1pbmltYWxpc3QgZiAyIDAKcGhvdG9zaG9wIHNwZWVkcGFpbnQKZ2VtIC0gdG9uZXMKY2xlYXIgcG9ydHJhaXQgb2YgZGVtaSByb3NlCnByaW50bWFraW5nCnN0eWxlIG9mIHNlYiBtY2tpbm5vbgpjb2xvdXJmdWwgZmxvd2VycyBib3VxdWV0CmV5ZSBsZXZlbCB2aWV3CmVubGlnaHRlbmluZwphbWJpYW5jZQptb2ViaXVzLiByaWNoIGNvbG9ycwprb3VzdWtlIG9vbm8KaGlnaCBtZWdhcGl4ZWwgcGljdHVyZQpoYWlyIGJsdWUgdHdvIGxvbmcgYnJhaWRzCmxpZ2h0IGZyb20gdG9wIHJpZ2h0CmxheWluZyBvbiBhIGJlYWNoCnBvbGFyaXplZCBzcG9ydHMgc3VuZ2xhc3Nlcwp0dXJxb3Vpc2UKcmVkIGFuZCBibGFjayBjb2xvciBzY2hlbWUKdmVyeSBkYXJrIGJsdWUgZXllcwpleHRyZW1lIHJlc29sdXRpb24KcGhvdG8gMyBkCmNsb3NlIHVwIHBvcnRyYWl0IG9mIGEgYmVhdXRpZnVsCmZhY2UgaW4gZm9jdXMgMSA4IDkgMCdzIGxpbWluYWwKaW4ganVuZ2xlIGZvcmVzdCBwZWFrCmRlc2lnbmVyIHByb2R1Y3QKbG9va2luZyBhdCB0aGUgY2l0eQphcnRpc3RpYyB0cmliYWwgcGF0dGVybnMKaDNoMwpjbG9zZS11cCBwb3J0cmFpdCBnb2RkZXNzIHNrdWxsCnNjYXJ5IGNyZWF0dXJlcyBpbiBiYWNrZ3JvdW5kCnN1bnNldCBrYW5hZ2F3YSBwcmVmZWN0dXJlCmF0dHJhY3RpdmUgc3ltbWV0cmljYWwgZmFjZQpjaW5lbWF0aWMgZmlsdGVyCmNhcm5pdmFsIG1hc2sKc2NpLWZpIHZlbmRpbmcgbWFjaGluZQpzdGFyIGZsYXJlcwpzeW50aHdhdmUgaW1hZ2UKb24gYSBjbGVhcmluZwpzd2lybGluZyBwYWludApnbG93aW5nIGlyaXMKKCAoIGV4dHJlbWUgZGV0YWlsICkgKQpuZW9uIHJlZmxlY3Rpb25zIGluIHRoZSBwdWRkbGVzCnN0dWRpbyBnaGlibGkgY29tcG9zaXRpb24KZmVhdGhlciBzdWl0CndpdGggYmxhY2sgYmVhbmllIG9uIGhlYWQKbW9kZXN0IQpmaWx0aHkgaGFpcgo4IGsgYmxlbmRlciByZW5kZXIKZ2FwcyBhbmQgcGF1c2VzCmNvbGxvZGlvbiBwaG90b2dyYXBoeQpmb2lsCmNsb3VkIGZvcmVzdApnbG93aW5nIGNsb3VkcwpkZW1vbiBzb3VsIGNvbmNlcHQgYXJ0CmNvY2thdG9vIGhvbGRpbmcgYSB0cnVtcGV0Cmh5cGVycmVhbGlzdGljIGFuYXRvbXkgcG9zc2UKcm91bmQgYmxhY2sgZXllIHB1cGlscwpnbG93aW5nIGZpcmVmbGllcwpicmFpZGVkIGJyb3duIGhhaXIKdmlvbGVuY2lhCmplc3NpY2EgYWxiYSB3b21hbgp0ZXNsYSBjb2lsCjEgOSA1IDUKamVyZW15IGxpcGtpbmcgZnVsbCBsZW5ndGggc2hvdApwYW4gZnV0dXJpc20KcGFpbnRlZCB0b2RkIGxvY2t3b29kCmRpc2VscHVuawphbGljZSB4LiB6aGFuZwpicm9rZW4gbGFwdG9wIHNjcmVlbgpwcmluY2VzcyBpbiBmb3JlZ3JvdW5kCm9jdGFlIHJlbmRlcgpzeW1tZXRyaWNhbCBmYWNlISEhIQpjb21pY3MgaWxsdXN0cmF0aW9uCmluIG1lZXRpbmcgdG9nZXRoZXIKdmVyeSBkZXRhaWxlZCB0b3JzbwpibHVlIGdvbGQgYW5kIGJsYWNrCmlyaWRlc2NlbnQgZ2xhc3MKcnVzdHkgYmlvbWVjaGFuaWNhbCBjeWJvcmcKc2lsdmVyIHdoaXRlIGdvbGQgcmVkIGRldGFpbHMKYXJ0IGF0YXRpb24Kc3RyYWlnaHQgZGFyayBvdXRsaW5lCnNvbWUgcmVkIGFuZCB5ZWxsb3cKcm9tYW5lc2NvIGJyb2Njb2xpCnJvb20gZnVsbCBvZiBjb21wdXRlcnMKaW4gYSBjbGF1c3Ryb3Bob2JpYwpmbHVvcmVzY2VudCBzcG90cwpwYW5hb3JtaWMKYm9yZGVybGFuZHMgMyBzdHlsZQpnb3JnZW91cyBzb2Z0IGxpZ2h0aW5nCnNoYXJwIGFuZCBoaWdobHkgZGV0YWlsZWQKYmxhY2sgc21va2Ugc3Vycm91bmRzIHRoZSBhcmVhCmx1bWluZXNjZW50IHBsYW50cwp2ZXJ5IHZlcnkgYmVhdXRpZnVsIGFydApibGFkZSBkZXNpZ24KZmFudGFzeSBibGFkZQpzd29yZCBkZXNpZ24KYW5jaWVudCBidWlsZGluZ3MKY29uY2VwdCBhcnQgb2YgdG9ueSBzdGFyawo4IGsgcmVzb2x1dGlvbiBhcnR3b3JrCmdvcmdlb3VzIGhhaXIKc3BhdGlhbCBwaGVub21lbmEKaGFsbyBtYXN0ZXIgY2hpZWYKc3RyaWN0CnJlZCB0dXJxdW9pc2UgYWNjZW50cwpzdHlsaXplZCBzaWxob3VldHRlCndhciBzY2VuZXMKY3liZXIgaW5zdGFsbGF0aW9uCjM1bW0gZ3JhaW55IGZpbG0gcGhvdG9ncmFwaHkKZnJvbSB0aGUgb2ZmaWNlICggMiAwIDAgNSApCmN5Ym9yZyBiaW9tZWNoYW5pY3MKZXZpbCBwb3NlZAp0ZW1wbGF0ZSBsYXlvdXQKbGluZSBhcnQgcG9ydHJhaXQKcHVsbGVkIGludG8gdGhlIHNwaXJhbCB2b3J0ZXgKaW50cmljYXRlIG9pbCBwYWludGluZyBhcnR3b3JrCmdlYXIgbWVjaGEKbXl0aG9sb2d5IGFydHdvcmsKYWdlbnQgcGVra2EKamFyb3NsYXcgamFzbmlrb3dza2kKc2lsa3kgdGV4dHVyZQptYWxheXNpYW4KaGVsaW9zIDQ0LTIKY291bnRlcmZlaXQgbWlja2V5IG1vdXNlIGhlYWQKc2xhdWdodGVyaG91c2UKc3VuYnVybgpmbG9hdGluZyBvYmplY3RzCjIgcG9pbnQgbGlnaHRzCmF2YXRhciAoIDIgMCAwIDkgKQpzb2Z0IGVsZWdhbnQgZ293bgpvbmUgbW9kZWwKY3JlYXRpdmUgYXJ0Cm1hc2tlZCBwZXJzb24gaW4gY29ybmVyCmhvcGVsZXNzbmVzcwpvbWlub3VzIGRhcmsgYmFja2dyb3VuZApjcmVhdGl2ZSBjb21wb3NpdGlvbgpjcm9zcyBzZWN0aW9uIG9mIG1hbm5lcXVpbiBoZWFkCmhpZ2hseSBvcm5hdGUgaW50cmljYXRlIGRldGFpbApwaG90byBib290aApjcnlpbmchIGFuZHJvaWQhIHdvbWFuCndhdGVyeSBjYXZlcm5zCmNyeXN0YWwgZGVzZXJ0Cmxhc2hlcwp5ZWFyIDIgMCA0IDAKb2ZmZXJpbmcgYSBwbGF0ZSBvZiBmb29kCmdob3N0bHkgZGFya25lc3MKaW52aXRpbmcgcG9zdHVyZQpib3JpcyB2YWxsZWpvIGFuZCBpbHlhIGt1dnNoaW5vdgpyYW5kb20gYXJ0aXN0cwpjdXRlIGFuaW1lIGdpcmwgcG9ydHJhaXRzCmxpbWl0ZWQgY29sb3JzCnZlcnkgY2FsbSBhbmQgd2hvbGVzb21lCmZsYXNoIHNoZWV0CmN1cmxlZCBwZXJzcGVjdGl2ZQpnb2xkZW4gbWlzdApibGFjayBhbmQgd2hpdGUgd2l0aCBoZWFydHMKcmVmcmFjdGl2ZSBvcHRpY3MKY2hhcmFjdGVyIHNpbGhvdWV0dGUKYnViYmxlZ3VtIHBvcApzaWx2ZXIgYW5kIGJsdWUgY29sb3JzCmhkIHRleHR1cmVzCmN1dGUgaHVtYW5vaWQgcm9ib3QKY3V0ZSBraXRjaGVuCmxvb2tpbmcgYXQgdGhlIHNreQpmYW50YXN0aWMgd29ybGQKZmFjZSBwcm9maWxlCmN1dGUgb3R0ZXIKaGFyZCBzdXJmYWNlIDMgZApibGFjayBwdXJwbGUgc3R1ZGlvIGJhY2tncm91bmQKMyBkIGlsbHV0cmF0aW9uCndsb3AgfAptZXRhbCBjaHJvbWUKdmVsdmV0eQpjeWJlcnB1bmsgYWxsZXkKaGlnaCB0ZWNoIHNwYWNlc2hpcHMKMyAtIHBpZWNlCmRpdmVyc2Ugb3V0Zml0cwpjb2xvdXJmdWwgNCBrIGhkCnVsdHJhIGRldGFpbGVkIGhpZ2ggcmVzb2x1dGlvbgp3aXRoIHRlY2h3YXJlCmJvaG8gY2hpYyB8IHwgdmVyeSBhbmltZSEhIQp3ZXRhIHN0dWRpbyBhbmQgamFtZXMgamVhbgplcmluCnJhZmFlbCBncmFzc2V0dGkKaHVtYW4gbGlrZSBhIGN5Ym9yZwpob25leWNvbWIgc3RydWN0dXJlCmd1bHBlciBlZWwKY3lib3JnIC0gcGl0YnVsbApob2xkaW5nIGEgc3F1aWQKZGFyayBhYmFuZG9uZWQgY2l0eSBzdHJlZXRzCnNoYWRvd3MgcmVhbGlzbQpzaG9ydCBwYW50cwp3ZXQgY29sbG9kaW9uCmdpcmwgd2Fsa2luZyBpbiBmbG93ZXIgZmllbGQKbWFnaWNhbCBjb2xvcnMgYW5kIGF0bW9zcGhlcmUKZGFuIGRlY2FybG8gYXJ0IHN0eWxlCnN0eWxlIG9mIGxvcmQgb2YgdGhlIHJpbmdzCnN0eWxlIG9mIG5vc2ZlcmF0dQpzdHlsZSBvZiBzdHJhbmdlciB0aGluZ3MKZ3VpZG8gY3JlcGF4CnBpbGVzIG9mIHRyYXNoIGFuZCBqdW5rCnNsdWRneQp5dWtreQpmdWxsYm9keSB2aWV3CnNrZXRjaGVkIDRrCmRhcmsgZm9yZXN0IHNocm91ZGVkIGluIG1pc3QKZm9yYmVhcmluZwpkYXJrIGdhbGF4eQpkYXJrIGRyYW1hdGljIHNraWVzCm5vIHNreQpkYXJrIHBvcnRyYWl0IG9mIG1lZHVzYQpzaWxob3V0dGUKYmx1aXNoIGZhY2UKZGFyayBzY2hpem9waHJlbmlhIHBvcnRyYWl0CnBhYmxvIHBpY2Fzc28uIGdyYWZmaXRpIGFydApkaXNuZXkgdmlsbGFpbgp3YXNoIG9mZiBpbiB0aGUgcmFpbgpyZWQgc3Bpa2UgYXVyYSBpbiBtb3Rpb24Kc2V4eSBsaXBzCnN0aWxsIGZyb20gbmF0dXJlIGRvY3VtZW50YXJ5CmV4b3RpYyBzaG9ydGhhaXIgY2F0CmlyYXkgc2hhZGVycwpjaW5lbWF0aWMgcmVhbGlzdGljIHBvcnRyYWl0CnNxdWFzaGVkIGJlcnJ5IHN0YWlucwplYXRpbmcgcm90dGluZyBmcnVpdApkcmlwcGluZyBibGFjayBhbmQgZ3JleSBwYWludApvcmdhbmljIG1lY2hhbmljYWwgc2hhcGVzCndhdGVyIG1pc3RzCmNsZWFyIGJlYXV0aWZ1bCBza3kKZGVlcGVyIGludG8gdGhlIG1ldGF2ZXJzZSB3ZSBnbwphbGZpbyBwcmVzb3R0bwpzdHVkaW8gdHJpZ2dlciBzdHlsZQpjaGltZXJpY2FsCm5hdGlvbmFsIC0gZ2VvZ3JhcGhpYwpsdW5hciBjb2xvciBwYWxldHRlCm5pZ2h0bWFyZSBpbmR1Y2luZwphdXJvcmEgYm9yZWFsaXMgb24gYmFja2dyb3VuZApmbG91cmVzY2VudCBzcG90IGxpZ2h0cwpsb3cgLSBrZXkgbGlnaHQKYnJva2VuIGxpZ2h0cwpwaXp6YSBpcyBldmVyeXdoZXJlCnRhbmFrYSBzdWd1cnUKdGhlIGxhc3QgdiA4IGludGVyY2VwdG9yCmRlc2t0b3Agc2NyZWVuc2hvdAp2aWJyYW50IGRhcmtuZXNzCnBvcCAtIHN1cnJlYWxpc20Kc2hvdCBhdCBkYXJrIHdpdGggc3R1ZGlvIGxpZ2h0cwpwbGF5aW5nIHRlY2hubyBob3VzZSBtdXNpYwpvZmZzZXQKKCB0aGUgYmxvb2QgbWVyaWRpYW4KcmljaCBwYWxldHRlCmhhcHB5IGNvdXBsZQpyZWFsaXN0aWMuIGNoZW5nIHlpCmVtbWEgdWJlcgptZXNzeSBwb255dGFpbApzZWF0ZWQgaW4gcm95YWwgZWFzZQpmaW5lIHBlbiB3b3JrCmRlbW9uaWMgdW5kZXJ0b25lcwp3aXRoIGxhcmdlIHN3b3JkCmRvZiA4IGsKdGFrZW4gd2l0aCBteSBuaWtvbiBkIDMKY2F0aGVkcmFsIGJhY2tncm91bmQKcHVyZSBhdXJhCndldCBzaGlueSBza2luCnNvbmcgaHllIC0ga3lvCmJsdWUgY3lib3JnCmRldGFpbGVkIHN0dWRpbyBwaG90b2dyYXBoCnVoZCByZXNvbHV0aW9uCnVsdHJhIGNsZWFyIGFuZCBzaGFycCBmb2N1cwpmb3Jlc3QgZGV0YWlscwpmaXJlIGxpbmVzCml0YWxpYW4gZmxhZwpmIC8gMgpkaWNlcyBmcm9tIGNvbG9yIGdsYXNzIGJvdW5jZXMKY3ViZXMgb24gdGFibGUKZGV0YWlsZWQgdGV4dHVyZXMgYW5kIGxpZ2h0aW5nCmNyaW1zb24gY29sb3IgYmxvb2QgdGVhcnMKbWFzdGVycGllY2UgYXdhcmQgd2lubmluZwp3b3cgaXQgaXMgYmVhdXRpZnVsCm1hc3RlcnBpY2UKKChpbiBhIHN1cGVyIG1hcmtldCBjb3N0Y28pKQpjb2xvcmVkIGZlYXRoZXJzCnBpbmsgYW5kIGdyZXkgY2xvdWRzCmludHJpY2F0ZSBzY2VuZXJ5CmRpbSBsaXQKdHdpc3RpbmcgdHJlZXMKc3Bpa2UgLSBsaWtlIGJyYW5jaGVzCmJlc3QgbGVuc2UKYnJhbGV0dGUKZXh0cmVtZSB3ZWF0aGVyCmRpc3RhbnQgZnVsbCBib2R5IHNob3QKZG90IHB1cGlscwp2YW4gZ29naCBhbmQgbS4gYy4gZXNjaGVyCmRuZCBkd2FyZgppbiBzdHlsZSBvZiAzZCByZW5kZXIKaHlwZXIgZmVtaW5pbmUKdmhzIGNvdmVyCmxhbmUgYnJvd24KYWRyaWVuIGhlbnJpIHRhbm91eApnaXVsaW8gcm9zYXRpCmRvb20gY2xhc3NpYwpidWxsZXQgaGVsbApkb3VibGUgZXhwb3N1cmUgb2YgZGFsbHkgbGlmZQpsb3ZlIGlzIGJlZ2luIG9mIGFsbApsb3ZlIG9zIGJlZ2luIG9mIGFsbApnb2xkZW4gLSByYXRpbwpkb3VibGUgZXhwb3N1cmUgcG9ydHJhaXQKbmF6YXJlIChwb3J0dWdhbCkKaGlnaCBxdWFsaXR5ISEhISEKbWFkZSBvZiBub3RhdGlvbgpjaW5lbWF0aWMgdmlldyEhIQpmdWxsIHNsaW0gYm9keQpob2JiaXQgaG9sZQpzbGlnaHRseSBnb2xkZW4Kc21vb3RoIHRleHR1cmVkIHNraW4KZHJlYW1pbmcgZmFjZQpiYWNrZ3JvdW5kIGluIGJsdXJyZWQKdmlicmFudCBmb2xpYWdlCm1lZGl1bSBzaG9vdApkaXZpbmUgcmVuZGVyCmRyb25lIHZpZXcgb2YgYSBjaXR5CmNvbXByZWhlbnNpdmUgMiBkIHJlbmRlcgp0cmFwCmNoaWxkcmVuIHBhaW50aW5nCm1hY3VhaHVpdGwKb25lIG1hbgpkdXRjaCB3aW5kbWlsbCBndW5kYW0KdHdvZGRsZQpsb29rcyBhdCB0aGUgY2FtZXJhCmRpc25leSBjaGFyYWN0ZXIgc3R5bGUKc3ltZXRyaWNhbCBwb3J0cmFpdAp0dXJ0bGVzIGFsbCB0aGUgd2F5IGRvd24KcmVkIG9yYW5nZSBibHVlIGJlaWdlCmJpbGwgaGVuc29uCmFsYW5pcyBndWlsbGVuCndlYXJpbmcgc3RvY2tpbmdzCnNwZWxsYnJlYWsKbG9uZyBlYXJzCmFudGhyb3BvbW9ycGhpYyBjaGFyYWN0ZXIKZmV0aWQgYXRtb3NwaGVyZQphcyBhIG1lZGlldmFsIGZhbnRhc3kgY2hhcmFjdGVyCmhvbGRpbmcgYSBsb25nc3dvcmQKc3RhbmRpbmcgYXRvcCBhIHBpbGUgb2YgcnViYmxlCm1pZ2h0eQpjdXJseSBibGFjayBiZWFyZAphdCBoaWdoIG5vb24KZW5kIG9mIGV2YW5nZWxpb24gcG9zdGVyCmxpZ2h0cGFpbnRpbmcKeGVub21vcnBoIGFsaWVuCmluZHN1dHJpYWwgc3RlYW1wdW5rCmluIHN0eWxlIG9mIHBpeGFyCmVuZ2luZWVycyBidWlsZGluZyBhIGdpYW50IG1lY2hhCnN1YnRpdGxlcwppZmEgZGVpdHkKamFtZXMgZ3VpbGxlYXJkCmVwaWMgZGlwdHljaAp3aW50ZXIgcHJpbmNlc3MKcmVkIGxlYXRoZXIgY29yc2V0CmNhc3RsZSBvbiB0aGUgbW91bnRhaW4KbWV0ZW9ycyBmYWxsaW5nCnN1biByYXlzIHRocm91Z2ggc25vdwpzaW5jZXJlIGZhY2UKbWFzdGVycGllY2UgdyAxMDI0CmFtYmllbnQgdGVhbCBsaWdodApodW1hbm9pZCBjYXIgaGVhZAp1bmRlcndhdGVyIGxpZmUKcG90aW9uIGJlbHQKZ3VuIHNjcmFwcwpwaHlzaWNhbCBtZW50YWwgcGVyZmVjdGlvbgplc3ByZXNzbyBtYWNoaW5lCmZhbnRhc3kgbW92aWUgc3RpbGwKaG9yc2UgaXMgcnVubmluZwp3aWxsaWFtIG1vcnJpcyBzdHlsZQpldSBmbGFnCm9wZW4gcm9vbQp2aXZpZCBpbWFnZQpleG9waGlsaWEKYm90dG9tIHZpZXYKMyBkIG9jdGFuZSByZW1kZXIKZXhwbG9zaXZlIGJ1YmJsZXMKb2JmdXNjYXRlIGxpZ2h0Cm9mIGEgYmVhdXRpZnVsIHNhcnluIHdhcmZyYW1lCmNyaW1zb24gLSBibGFjayBiZWUgYXJteSBiZWhpbmQKdGhpY2sgc3dpcmxpbmcgc21va2UgZXZlcnl3aGVyZQpicmlnaHQgaGVhZGxpZ2h0cwptb3N0IHBlcmZlY3QgZGVzZXJ0IG9uIHRoZSB3b3JsZApnbG93aW5nIGNyaW1zb24gaGVhZApjcmltc29uIGZpcmUgaGVhZAozIGQgY2luZW1hdGljIHZvbHVtZXRyaWMgbGlnaHQKZnVjaHNpYSBza2luIGJlbG93IHRoZSBhcm1vcgptZXNzeSBicm93biBoYWlyCndpdGggdHViZXMgYW5kIHdpcmluZwppbnRyaWNhdGUgaGFpcnN0eWxlCmp1bGlhbiBvcGUKc3dpc3MgbW9kZXJuaXptCmZlYXRoZXJ5IGZsdWZmCmNvbG91cmZ1bCBkcmF3aW5nCndlYXJpbmcgYmxhY2sgY2hva2VyCmVkd2FyZCByb2JlcnQKZmFpcnkga2luZ2RvbSBmb3Jlc3QKd2l0aCBob3JzZSBkcml2ZW4KY2FycmlhZ2UgbWFkZSBvZiBwdW1wa2lucwppbmRvb3Igc2V0dGluZwpwZW9wbGUgaW4gdGhlIHN0cmVldHMKY29tbWVyY2lhbCBzaG90CmJsYWNrIGFuZ2VsIHdpbmdzCmJyaWdodCBjaW5lbWF0aWMga2V5IGxpZ2h0aW5nCmluZG9yZQpmb3J0cmVzcyBtZWdhIHN0cnVjdHVyZSBjaXR5CmNsb3VkeSBncmV5IGhhaXIKemVlbiBjaGluIGFuZCB0ZXJhZGEga2F0c3V5YQpzbGlnaHQgcnVpbmF0aW9uCmJlYXV0aWZ1bCBsZWcKcHVycGxlIG5lb24gbGlnaHQKbWlzaGEgZ29yZGluCmJlYXV0aWZ1bCBmZW1pbmluZSBmYWNlCmJydXRhbGlzdCB3YXRlcmZhbGwgZW52aXJvbm1lbnQKcGVhY2Ugc2lnbgphd2Vzb21lIGNvbXBvc2l0aW9uIHJ1bGVzCmludHJpY2F0ZSBldGNoZWQgYXJtb3IKc3RhbmRpbmcgYXN0cmlkZSBhIGdhdGUKZmVtYWxlIGxpZ2h0bmluZyBnZW5hc2kKZmVtYWxlIG1hcnR5IG1jZmx5CmRhcmsgY2xvdGhlcwpmZW1hbGUgb2NjdWx0aXN0CmZyb20gdGhlIGdyYW5kIGJ1ZGFwZXN0IGhvdGVsCmluIHRoZSBtaWRkbGUgb2YgdGhlIGJhdHRsZWZpZWxkCmFkb2JlIGVwcwpyb2JvdCBhbmltYWwKc3RldwppbiBsaW5lCmZleSBxdWVlbiBvZiB0aGUgc3VtbWVyIGZvcmVzdApzaWx2ZXIgc2hpbW1lcmluZyBoYWlyCmZ1dHVyaXN0aWMgdGFuayBpcyBvbiBmaXJlCnBoeXNpY2FsIGNvcnJlY3QgbGlnaHQgc2hhZG93cwp0aGUgcmluZyBtb3ZpZQpzdHlsZSBvZiB5b3NoaWkgY2hpZQpmaWxtIGF0bW9zcGhlcmUKbGFjayBvZiBzdW5saWdodAptY3F1YXJyaWUKY2luZW1hdGljIHJ1bGUgb2YgdGhpcmRzCndpbGxpYW0gcGVubiBzdGF0ZSBmb3Jlc3QKZHJpcHBpbmcgYmxvb2QKY3JheW9ucy4gaGlnaCBkZXRhaWxzCmV2ZXJtb3Rpb24KbG9va3MgZGlmZmVyZW50CmJsYWNrIGhhYml0CmZpc3RmaWdodApmaXQgZ2lybApmam9yZAplbmRvciBmb3Jlc3QKMTkyMHMgZ2F1ZHkgY29sb3IKdmVzcGVyIGx5bmQKZmxhdCAyIGQKc3VycmVhbCBhcmNoaXRlY3R1cmUKZ2xvdyB3YXZlCmZsb3dlciBxdWVlbgp0cmVlcyBhcm91bmQKdW51c2VkIHN0aWNrZXIgc2hlZXQKcGxheXJpeApuZXh0ZXJzCmZhY2luZyB0aGUgd29vZHMKZm9yZXN0IHdpdGggZmxvd2VycyBibHVlCmRlbG9yZWFuIGJhY2tncm91bmQKZm9ybXVsYSBvbmUgY2FyCmRldGFpbGVkIGNpbmVtYXRpYyBsaWdodGluZwpwcm9kdWN0aW9uIGkgZwpmb3ggd2VhcmluZyBhIHRpYXJhCnF1b3RldgplbnZpcm9ubWVudCBsaWdodGluZwoxIC8gNiBzaWdtYQpzY2lmaSBmYXJtCndlbGNvbWluZyBzbWlsZQppbnRyaWNhdGUgZGV0YWlscy4gZnJvbnQgb24Kc3R5bGUgb2YgbWlycm9yJ3MgZWRnZQpsb2xsaXBvcApwdXJlIGdyZXkgZnVyCigoaW50cmljYXRlKSkKc3RlZXAKY2FyY2FzcyBjYXJyaW9uIGNvdmVyZWQgaW4gZmxpZXMKZnVsbCAtIGJvZHkgYXJ0d29yawpoaWdobHkgZGV0YWlsZWQgY2xvdGhpbmcKc2xpZ2h0bHkgZmF0CmxlYXRoZXIgY3VmZnMgYXJvdW5kIHdyaXN0cwpzdHlsaXplZCB0aGluIGxpbmVzCnByb3ZvY2F0aXZlIGluZGlhbgpiaWcgc3ltbWV0cmljYWwgZXllcyBvZiBiam9yawp1bHRyYSBoaWdoIHRleHR1cmVzCnMnbW9yZXMKY29tcGxleCBhcm1vdXIKd2lsZCBnaW5nZXIgaGFpcgpib25lIGpld2VscnkKY3liZXJuZXRpYyBiaW9uaWMgYW5jaWVudCBjeWJvcmcKbm9ybWFuIHJvY2t3ZWxsIHJvc3MgdHJhbgpiYXR0bGUgd2FycmlvcgppbiBzaG9ydHMKYmVhdXRpZnVsIGFkdWx0IGZhaXJ5CnNoYXJwIGdsYXNzIHNoYXJkcwpoaXMgaGVhZCBjb3ZlcmVkIGluIHJvb3RzCmNhbWVyYSBwdWxsZWQgYmFjayBmYXIKKCAoICggKCAoIHZlcm1lZXIgKSApICkgKSApCmRyZXNzZWQgaW4gZXhwZW5zaXZlIGNsb3RoZXMKaHVuZ2VyCndlbHNoIGZsYWcKZnVsbCB2aWV3IG9mIGEgc3BvcnQgY2FyCmJlYXV0aWZ1bCBiaWcgc3ltbWV0cmljIGV5ZXMKZnVsbGJvZHkgb2Ygc3RhbmRpbmcgdG9tIHNlbGxlY2sKcmVkZ29sZCBoYWlyCmZ1dHVyaXN0aWMgdHJhY3RvcnMKaHVtYW4gYm9keSBwYXJ0cwpmdXJyeSBmbHVmZnkgaXJpZGVzY2VudCBkcmFnb24KYmxhZGVydW5uZXIgc2NlbmUKaW4gc3R5bGUgb2YgZmVuZ2h1YSB6aG9uZwpmdXR1cmlzdGljIGJhdHRsZWZpZWxkCmNyb3dkZWQgc3F1YXJlCmpyIHNjIG1hZ2xldgpkdWxsIHBhc3RlbCBjb2xvcnMKc3RvbmUgYW5kIGdsYXNzCmN5YmVycHVuayBmZW1tZSBmYXRhbGUKdHJvcGljYWwgY2xpbWF0ZQpjb3BwZXIgZGV0YWlscwp3YXJtIGNvbG9yIGhpZ2hsaWdodHMKKCAoIHJvYm90IGN5Ym9yZ3MgKSApCmF0IGR1c2sgbGlnaHRpbmcKc2hvdyByb29tIHNjZW5lCnNtb290aCByZWQgc2tpbgpwdXJwbGUgbWV0YWwgZWFycwpnYWxheHkgaW5zaWRlCnZpamF5IGpheWFudCBwcm9wcwpibG9uZCBicm93biBzdHViYmxlIHRoaW4gYmVhcmQKZXhwbG9zaW9uIGluIGJhY2tncm91bmQKYWxpZW4gKCAxIDkgNyA5ICkKZ2FzIHN0YXRpb24gaW4gc3BhY2UKZ2Vja28gc2l0dGluZyBpbnNpZGUgYSB0ZXJyYXJpdW0KZ2Vpc2hhIHByaW1hIGJhbGxlcmluYQp0dXR1CmdmZCBsb2dvCmNhcmQgYmFjayB0ZW1wbGF0ZQplbnR3aW5lZCBoZWFydHMgYW5kIHNwYWRlcwp3YWxsIHdpdGggY29sb3JmdWwgZ3JhZmZpdGkKZ2hvc3Qgc3BoZXJlCnJlc2N1ZSBmcm9tIHRoZSB1bmRlcndvcmxkCmdpYW50IGFsaWNlIGluIHdvbmRlcmxhbmQKc3VwZXIgbW9vbgpzb2xhcnB1bmsgYXJjaGl0ZWN0dXJlCmluIHRoZSBmb3JlZ3JvdW5kIGEgc21hbGwgdG93bgpyZWQgZG90CjMgZCBjaXR5CmdpYW50IG1lY2hhbmljYWwgcm9zZQpoZWRnZWhvZyBiYWJpZXMKcGxhbmV0IGVhcnRoIGluIGZvcmVncm91bmQKbWFzYW11bmUgc2hpcm8KZ2lnYSBjaGFkIGNhcGF5YmFyYQphZG9ybmVkIHBpbGxhcnMKZ2lnYW50aWMgbWFuIGhlYWQKemJydXNoIHJlbmRlcgp1bmljb3JuIGZseWluZyBpbiB0aGUgc2t5CmFnZ3Jlc3NpdmUgcG9zZQp1bmRlcndhdGVyIHBsYW50cwpyaGFkcyBhbmQgbG9pcyB2YW4gYmFhcmxlCnNoYWRvd3MgZnJvbSB0cmVlcwpmcm9udGFsIGNsb3NlIHVwCnN0YXJzIGFuZCBuZWJ1bGEKd2l0aCBhbmNob3IgbWFuIGFuZCB3b21hbgpnaXJsIHdlYXJpbmcgcm9ib3RpYyBzdWl0CmZ1bGwgZmFjZSB2aWV3Cm11bHRpY2FtIGNhbW8Kc2lsdmVyIGhhaXIgcG9ueXRhaWwKZ2xhZGlhdG9yIHdlYXJpbmcgc3BhY2Ugc3VpdAptZWRpdW0gLSBzaG90IDEgNiBtbSBmaWxtCmRpYW1vbmQgdHJlZXMKZ2xhc3Mgb2JlbGlzayBvZiB0aGUgdm9pZApkYXRhbW9zaGVkCnBpY3R1cmUgcG9ydHJhaXQKZ2xpdGNoZWQgZmFudGFzeSBwYWludGluZwpkaXN0YW50IG5lYnVsYSBhcmUgZ2xvd2luZyBhbGdhZQphcm1vciBhbmdsZSB3aXRoIHdpbmcKZWxlY3RyaWNpdHkgc3VwZXJwb3dlcnMKZmFjaWFsIGJlYXV0eQphbnQncyBleWUgdmlldwpnb2Qgb2YgdGhlIGRlYWQKZ29kZGVzcyBjaGVja2luZyBoZXIgcGhvbmUKaGFsZiAtIGxlbmd0aCBoZWFkIHBvcnRyYWl0CmdvZGRlc3Mgb2YgdGhlIHVuZGVyd29ybGQKaHlwZXJyZWFsaXNtIHZydWJlbApnb29wCmRhcmsgdGhlbWUgbmlnaHQgdGltZQp5b3VuZyBhdWRyZXkgaGVwYnVybgpnb3JnZW91cyByb21hbnRpYyBzdW5zZXQKaG9sZGluZyBhIGxvbmcgc3dvcmQgfCBkaXZpbmUKc2t1bGxzIGF0IGhlciBoaXBzCnZ4ZiBtb3ZpZQo4IDAncyBob3Jyb3IgbW92aWUgZmlsbSBzdGlsbApjeWJvcmcgY3JpbWluYWwKZ3JhbmRtYQpncmFudCB1cyBleWVzCnRhY28gYmVsbAptZWFuIGV5ZXMKZWd5cHRpYW4gbWFrZXVwCmdyaWQgbW9udGFnZSBvZiBleWVzCndldCByZWZsZWN0aW9ucyBpbiBleWVzCnNoYXJwIGZhbmdzIGFuZCB0dXNrcwpiaWcgZmVldApncnVtcHkgY2F0IHNtaWxpbmcgZWFyIHRvIGVhcgppbiBhIGNpbmVtYXRpYyB3YWxscGFwZXIKY3JlZXB5IHRoZW1lZAp0YXJhbnRpbm8KbGl2ZSAtIGFjdGlvbgp5YW15Cm5vaXNlIGZpbG0gcGhvdG8KZHJhbWF0aWMuIGZhbnRhc3kKY29uZnVzZWQgZXhwcmVzc2lvbgpkaXZpYW50YXJ0CnRpcmVkIGFuZCBoYXVudGVkIGV4cHJlc3Npb24KcGxhbmUKaGFuYSBhbGlzYSBvbWVyCmhhbmQgaG9sZGluZyBtZWRpZXZhbCBzd29yZApnbGFzcyByZWZyYWN0aW9uCmdyZWVuIGFuZCByZWQgcmFkaW9hY3RpdmUgc3dhbXAKY3liZXIgc3VpdApkYXJrIHBzeWNoZWRlbGlhIHN0eWxlCmRyYW1hdGljIHdhcm0gbW9ybmluZyBsaWdodApyYWluYm93IGlyaWRlc2NlbnQgYWNjZW50cwprYXRzdWhpcm8gYW5kIGluaW8gYXNhbm8KbWFnaWNhbCBkcmVzcwppcGhvbmUgZGV0YWlsZWQgcGhvdG8KZ2xvd2luZyBodWUgb2YgdGVhbApoYWxmIC0gZmluaXNoZWQgcm9ib3QKdGhyZWUgcXVhcnRlciBwcm9maWxlCm1hZ2ljYWwgc3ltYm9scwptb3V0aCBvZiBoZWxsCmhvbGRpbmcgZW5vcm1vdXMgbWFjZQpmaWdodGluZyBwb3N0dXJlCmVhcnRoIHZpc2libGUgYmVsb3cKYnVybGFwCnN1cnJlYWwgY29sb3JzCmxvLWZpIGFydApjaHJvbWUgZGFuY2UgcG9sZQp3aGlwcwpmbG9nZ2Vycwpjb2xsZWN0aXZlIGNpdmlsaXphdGlvbiB0cmVlCmJlc2lkZSB0aGUgc2VhCnZhcG9yd2F2ZSBsaWdodGluZwpwdWxwIG1hZ2F6aW5lcwpzYW5kIGFuZCBkZXNlcnQgZW52aXJvbm1lbnQKaW5jb21wZXRlbnQKbWlkZGxlIGNsb3NlIHVwIHNob3QKc2hvcnQgd2hpdGUgYmVhcmQKcG9ydHJhaXQgb2YgYnJhZCBwaXR0CnZlcnkgZHJhbWF0aWMgdm9sdW1ldHJpYyBsaWdodApncm93biB0b2dldGhlcgoyIDQgbW0gaXNvIDggMCAwIGNvbG9yCmhpZ2ggc2Nob29sCm5hdHVyYWwgd29vZCB0b3AKcGFsZSBza2luIGFuZCBwdXJwbGUgZXllcwpoaWdoIGZhbnRhc3kgYXJ0IG1vdmllIHBvc3Rlcgpnb2RkZXNzIG9mIHRoZSBodW50IGFuZCB0aGUgbW9vbgptb3RobWFuCjEgMCAvIDEgMAplbGVnYW50IGNpbmVtYXRpYyBwb3NlCnNpdHRpbmcgb24gdG9wIG9mIGEgY3J5b3BvZApyb2JvdCBkcmFnb24gaGVhZApkZXRhaWxlZCBsZWdzIHRvd2VyaW5nIG92ZXIgeW91CnVua25vd2luZ2x5IHdhbGtpbmcgb3ZlciB5b3UKaGlnaGx5IGRldGFpbGVkIGdlbmVyYXRpdmUgYXJ0CnNoYXJwIHJvYm90IGRyYWdvbiBjbGF3cwp2aWJyYW50IHZpYnJhdGlvbnMKbWVjaGFuaXNtCmdvbGQgYW5kIHNpbHZlciBpbmsKYmlvcG9kcwpibHVlIGFuZCB3aGl0ZSBjb2xvdXIgc2NoZW1lCmRpZ2l0YWwgaWxsdXN0cmF0aW9uIC0Kc3BhY2UgaGlnaCBzY2hvb2wKcGhvbmUKbGlicmFyeSBpbiB0aGUgc3R5bGUgb2YgYmFyb3F1ZQpicm93biBhbmQgY3lhbiBibHVlIGNvbG9yIHNjaGVtZQpkcmFrZW5ndWFyZCBpbnNwaXJlZApmaW5lciBkZXRhaWxzCmJyb3duIGFuZCBtYWdlbnRhIGNvbG9yIHNjaGVtZQphYmJleSB3YXJoYW1tZXIgYmF0dGxlCndvcmtpbmcgaW4gaGVyIHNjaWVuY2UgbGFiCmxvbmcgYnViYmxlZ3VtIGhhaXIKd29vZCBzY3VscHR1cmUKcGl4YXIgZmlsbQpsdW1pbmVzY2VudCBvaWwgcGFpbnRpbmcKaG9iYml0b24gYXQgbmlnaHQKaG9nd2FydHMgZ3J5ZmZpbmRvciBjb21tb24gcm9vbQpob2xnYSBoYXNzZWxibGFkCmJyaWdodCBpbnRlcm5hbCBsaWdodApob2x5IGN5Ym9yZyBuZWNyb21hbmNlciBnaXJsCmhvbHkgZGljZSBpbiB0aGUgY2xvdWRzCmhvbWUgb2ZmaWNlIGludGVyaW9yCm9uIGEgcGFya2luZyBsb3QKdWx0cmEgcmVhbGlzdGljIHJlbmRlcmluZwptdWRkeSB2aWxsYWdlIHNxdWFyZQppbiBtdWRkeSBtZWRpZXZhbCB2aWxsYWdlIHNxdWFyZQp1bm9wZW5lZApsaWtlIGluIG11c2V1bQpwYXJ0aWNsZSB3YXZlcwpiYXNlZCBvbiBnZW9ncmFwaGljYWwgbWFwCmguIGdpZ2VyCm1hZCBqb2huIG1hcnRpbgpjaW5lbWF0aWMgcmVhbGlzdGljIHBob3RvCndldCBleWUgcmVsZWN0aW9ucwpzY2llbmNlIGZhbnRhc3kgcGFpbnRpbmcKaHVtYW5vaWQgcm9ib3QgZnJvbSBleCBtYWNoaW5hCnZpb2xldCBwbGFuZXQKbGVhZiBoYWlyCmphY2tpZSB0c2FpIHN0eWxlCmdyZWcgcnV0a293c2tpIDQgawpyaHlzIGxlZQpuZW8gZXhwcmVzc2lvbmlzbSBhcnQKY2hyb21lIGRpbm8KZ29vZCBjb2xvcnMKb21pbm91cyBnb3RoaWMgYWVzdGhldGljCmJsYWNrIGhhdXRlIGNvdXR1cmUKanVnZW5kc3RpbGwKb3JuYXRlIG1hc2sKYXJ0IHN0eWxlIG9mIGp1bmppIGl0bwpjYXJpY2F0dXJpc3QKciAyIGQgMgpjYW5ub24gbW91bnRlZCBvbiBiYWNrCm9kaWxvbgpjZXJlYmVsbGFyIHBlZHVuY2xlCnJlYWxseSBzaG9ydCBoYWlyCmhkIGRldGFpbGVkIHRleHR1cmUKd2VhcmluZyB0aWdodCBzdWl0CnR1cnF1b2lzZSBwYWxldHRlCnBvcnRyYWl0IGZhc2hpb24gbW9kZWwKc3ltZXRyaWNhbCBqYXBhbmVzZSBwZWFybAp0aG91c2FuZHMgb2YgdGVldGgKdHJhZGl0aW9uYWwgYmVhdXR5CnN1cGVyIGhpZ2hseSBkZXRhaWwKYWJzdHJhY3QgYmxvY2tzCmJ1c3kgY2l0eSBvbiBiYWNrZ3JvdW5kCmlwaG9uZSAxNSBiYWNrZ3JvdW5kCmJva2VoIGlyaWRlc2NlbnQgYWNjZW50cwptYW5iZWFycGlnCmVlcmllIHNwaXJpdHVhbCBncmFpbnkKaW4gNCBkCmRhdGFzdHJlYW0gb3Igcml2ZXIKc2VjdXJpdHkgYWdlbnQKc3Ryb25nIGNoZXN0CmlsbHVzdHJhdGlvbiBvZiBhbiBhbmdsZXIgZmlzaApmYWRpbmcgaW50byB0aGUgZGlzdGFuY2UKbWVkaXRlcnJhbmVhbiBsYW5kc2NhcGUKY2lucSB0ZXJyZQpqdW5raSBpdG8KbGF3cmVuY2Ugb2YgYXJhYmlhCmNsb3NlIHVwIHNob3QgYSBydWdnZWQKb24gYSByZW1vdGUgZGVzZXJ0IHBsYW5ldAp2aWxsZW5ldXZlCnBlb3BsZSBmaWdodGluZwpzYW1hcmEgd2VhdmluZyB2YW1waXJlCnNoYXJwIHRlZXRoIGdyaW4KaG91c2VzIGFuZCBidWlsZGluZ3MKYnVybmluZyBpbmZlcm5vCmZvZ2d5IGhlYXZ5IHJhaW4KY3JhenkgbG9va2luZyByb2NrcwpkZWVwIGNoYXNtCmluY3JlZGlibGUgbWl5YXpha2kKd2hpbGUgdHJpcHBpbmcgb24gZG10CnNtYXNoZWQgd2FsbApidXJuaW5nIGJ1cyBjcmFzaCBpbmZlcm5vCmluY3JlZGlibHkgZGV0YWlsZWQgYXRsYW50aWMgY29kCmluZHVzdHJpYWwgZnV0dXJpc3RpYyBpY2UgbWluZQp3aXRoIHNwYWNlc2hpcHMgaW4gdGhlIHNreQplbmRsZXNzIGJvb2tzCmRyZWFtIG1hZ2ljYWwKZHJlYW0gc2NlbmVyeSBhcnQKZHJlYW0gbGlnaHRpbmcKaW5mbGF0YWJsZSBsYW5kc2NhcGUgd2l0aCBmb3Jlc3QKc2t5cmltIG1vZApwZW9wbGUgYW5kIGNyZWF0dXJlcyB3YWxraW5nCmNvenkgY29udGVtcG9yYXJ5IGxpdmluZyByb29tCmNoYW5kZWxpZXJzCmFjaWQgcG9vbGluZyBpbnNpZGUKaW5zaWRlIGEgZmFybSBiYXJuCmNvbnZvbHV0ZWQgaGFsbHMKaW5zaWRlIGNvdmVucyBkZW4Kc3BpcmFsIHNoZWx2ZXMgZnVsbCBvZiBib29rcwpwaW5lIHdvb2QKZ2VuZXJhdGl2ZSBhcnQgbmVidWxhCnZlcmRhbnQgcGxhbnQgd2FsbAphcnQgamFjZWsgbWFsY3pld3NraQpsb3NzIGNvbWljCmhvbGRzIHBsYXlpbmcgY2FyZHMKY29sb3JmdWwgdmluZXMKaW50cmljYXRlISBvcmdhbmljCm5vcmRpYyB3ZWRkaW5nIHJpbmcKZnV0dXJlIGJhcm9xdWUKbW9zcyBhbmQgbXVkCm1vc3Mgb24gdGhlIHdhbGxzCmNva2UgYW5kIGNoaXBzIG9uIHRhYmxlCnNlZ21lbnRlZCBicm9rZW4gZ2xhc3Mgc2hhcmRzCmFsdW1pbnVtIHNoZWVuCmdyZWVuIGFuZCBibHVlIHBhbGV0dGUKZnVsbCBib2R5IGFjdGlvbiBjb25jZXB0IGFydAptYXlhbiB0ZW1wbGUgaW4gdGhlIGp1bmdsZQpzaG9saW0KZGV0YWlsZWQgZmxhd2xlc3MgZmFjZQpqZXdlbHJ5IGVuZ3JhdmVkIGluIHNjYXJhYgpvcGFsIGRpYW1vbmQKd2l0aCBzbWFsbCBvYmplY3QgZGV0YWlscwpqb2UgYmlkZW4gc2hhcmttYW4KaHVnZSBzbWFzaGVkIG1hbnNpb24Kam9lIHRhc2xpbQpqb25haCBoaWxsCmthbWVuIHJpZGVyIGNoYXJhY3RlcgprZXJtaXQgZHJpdmluZyBhIGNhcgpkeW5hbWljIHBlcnNwZWN0aXZlIGFuZCBhbmdsZQphbm1pCnBvdiBmcm9tIGJlaGluZApsb29raW5nIHRvIHN0YXJzCmdpcmFmZmVzCmtuaWdodHMgb2Ygem9kaWFjIGdpcmwKcmF2ZSBiYWNrZ3JvdW5kCndpdGggd2F0ZXJmYWxscyBhbmQgcml2ZXIKcGVsemVidWcKMSA5IDIgMCBjbG90aCBzdHlsZQprb3JlYW4gYXVkcmV5IGhlcGJ1cm4gYXV0b21hdGEKa29yZWFuIHdvbWVuJ3MgZmFzaGlvbiBtb2RlbAp0YWtpbmcgYSBzbW9rZSBicmVhawpyZWQgZmFjaWFsIHN0cmlwZQpzcGFydGFuIHJhZ2UKbWlsaXRhcnkgdmVoaWNsZXMKZGVzdHJveWVkIG5hdHVyZQptYWdpY2FsIHJlYWxpc20gcGFpbnRpbmcKbmVhcmVzdCBuZWlnaGJvcgpzb2Z0IG1vb2R5Cm1hbnkgbGFyZ2Ugd2luZG93cwpoaWdoIHJlc29sdXRpb24gYXJ0IHNjYW4KY292ZXJlZCBpbiBtb3NzIGFuZCBiaXJkcwpkaWFncmFtbQpkaXJ0eSBmdXIKd2VhcmluZyByZWQgY29udmVyc2Ugc2hvZXMKd2V0IGFzbHBoYWx0IHJvYWQgYWZ0ZXIgcmFpbgpsaWNoIHZlY25hIChkJmQpCmRpZmZ1c2UgbGlnaHRwYWludGluZwpsaW5vY3V0IHByaW50IG9mIGZhbnRhc3kgZm9yZXN0Cmxpb24gaWNvbgpsb3ctcG9seSBlbGVtZW50cyEhIQpsaXNhIGFubgpjeWNsYWRpYyBzY3VscHR1cmFsIHN0eWxlCnB1cnBsZSB0dW5pYwpsaXR0bGUgZWxmIGdpcmwKcG9zaW5nIGZvciBwb3N0ZXIgcGhvdG9ncmFwaHkKOCBraGQgcG9zdCAtIHByb2Nlc3NpbmcKem9tYmllIGNoYXNpbmcgY29mZmVlCnJldHJvIHBpbmsgc3ludGh3YXZlIHN0eWxlCmNhbGxlZCBlbHlzaW9uCmxva2FoIHNhbWFzdGFoIHN1a2hpbm8gYmhhdmFudHUKc3R5bGUgb2YgZXNhbyBhbmRyZXdzCmFycmFuZ2VkIGluIHRoZSBnb2xkZW4gcmF0aW8KZW5kbGVzcyBmbG93aW5nIGV0aGVyZWFsIGRyYXBlcnkKZ2lhbnQgc3dvcmQKY2xlbWVudGUKY3liZXJuZXRpYyBjaXZpbGlzYXRpb25zCm1lbHRpbmcgcGFpbnQgZHJpcHMKbG93IGFuZ2xlIHdpZGUgc2hvdAp3ZWFyaW5nIHJhZ2dlZCBjbG90aGluZwppbiBmb3Jlc3QganVuZ2xlCnNlYSBib3R0b20KbHlkaWEKdmVyeSBjbG9zZSB0byByZWFsIG5hdHVyZQpvdmVybG9va2luZyBzZiBmcm9tIHR3aW4gcGVha3MKd2hpdGUgcm95YWwgZHJlc3MKYnVpbHQKbWFnaWMgc3BlbGwgaWNvbgp2aWRlbyBnYW1lIHNraWxsIGFiaWxpdHkKdmVyLmthIG1lY2hhIG1hY2hpbmFyaXVtCm1hZ2ljYWwgZmFpcnkgZmxvYXRpbmcgaW4gc3BhY2UKc3R5bGUgYXJ0IG5vdXZlYXUKaW4gbWFnbmlmaWNlbnQgc2hvcHBpbmcgbWFsbApjbG9pc29ubmUKcHJvc3RoZXRpYyBsZWcKYWtpaGlrbyB5b3NoaWRhLiB1bnJlYWwgZW5naW5lCnNjaWVuY2UgZmljdGlvbiBzcGFjZSBzdWl0Cm1hbWEgaSBuZWVkIHdpZmUKdmludGFnZSB0ZWNobmljb2xvciBmaWxtIHBob3RvCm1hbiByZWFkaW5nIG5ld3NwYXBlciBpbiBhIGJhcgpmdWxsIG1vb24gYmFja2dyb3VuZApteXN0ZXJpb3VzIHgKZ29sZGVuIHJheXMgb2Ygc3VubGlnaHQKYmlnIGhhbW1lcgpnYXV0aGllciBsZWJsYW5jCnNlY29uZCBsaWZlIGF2YXRhcgppbiBhIGNpdHkgc3F1YXJlCndlYXJpbmcgYWR2ZW50dXJpbmcgZ2Vhcgpzb21lIGNoYW90aWMgc3BhcmtsZXMKYmxpenphcmQgZ2FtZSBjb25jZXB0IGFydApmdWxseSBhcm1vdXJlZAplbGlzaGEgY3V0aGJlcnQgYXMgYSBycGcgd2FycmlvcgpiaXNtdXRoIG1ldGFsCmhpZ2ggZmlkZWxpdHkgZmFjZQpjcnlzdGFsbGluZSB0cmFuc2x1Y2VudCBoYWlyCnNwaXJhbCBoZWF2ZW5zCm1hdXJpdHMgY29ybmVsaXMgZXNjaGVyCmhpbGwgd2l0aCB0cmVlcwptYWRlIG9mIHdvb2RzCm1lY2hhbml6ZWQgd2l0Y2ggZ2lybApkaXZlcnNlIG1lZGljYWwgY3liZXJzdWl0cwo2NTg5MjM4MDMKd29vZGVuIGRlc2tzIHdpdGggYm9va3MKZmxvd2VycyBhbmQgdmluZXMKbmV3c3R5bGUKb24gYSBwb3N0c3RhbXAKd2F4ZWQKcGVyc2lhbiBmb2xrbG9yZSBpbGx1c3RyYXRpb24KY29uY3JldGUgYnVpbGRpbmcKYmxhY2sgY2FwCmJ1dHRlcmZsaWVzIGFuZCB3b3JtcwpjaXJjYSAxIDkgMyA5CmVmZmljaWVudApkZXNpZ25lciBwZW5jaWwgc2tldGNoCmhpIC0gcmV6Cm92ZXJsb29raW5nIGEgdmFsbGV5IHdpdGggdHJlZXMKc2hhZyBoYWlyY3V0Cm9yYW5nZSBjb2xvcgpsb25nIHllbGxvdyBoYWlyCndlYXJpbmcgcHN5Y2hlZGVsaWMgd2ljY2EKZnVsbCBib2R5IHByb2ZpbGUgcG9zZQptb3VudGFpbiBsYWtlcwpkcmV3IHN0cnV6YW4gaW5zcGlyYXRpb24KZ3JhdmV5YXJkIHRvbWJzdG9uZXMKem9tYmllJ3MKcGFyYWRlIGZsb2F0cwptb3ZpZSBzdGlsbCBvZiBhIGFsaWVuIGN5Ym9yZwptb3ZpZSBzdGlsbCBvZiB0aGUgYWxpZW4gZ2lybApoZSBoYXMgZGFyayBncmV5IGhhaXJzCmpvc2VwaCBtYXJpYSBvbGJyaWNoCmV4aGF1c3RlZCBmYWNlIGNsb3NlIHVwCmJyaWFuIGluZ3JhbQptdXNldW0gY3VyYXRvcgpvZGRseSBzaGltbWVyaW5nCmNsb3RoIGplcmtpbgozIGQgcmF5IHRyYWNpbmcKcGhvdG9ncmFwaHkgYWxleGV5IGt1cnlsZXYKa2llcmEga25pZ2h0bHkKZmVydGlsZQppbmdyZXMKY29sbGFib3JhdGl2ZQp3b3JrCm5lc3MgZnJvbSBlYXJ0aGJvdW5kCm5ldXJvZ3JhcGgKd2lkZSBib2R5Cm5ldyB6ZWFsYW5kIGxhbmRzY2FwZQpuaWNob2xhcyBjYWdlIGFzIHN1cGVybWFuCm5pZ2h0IGNpdHlzY2FwZQpub2lyIGRldGVjdGl2ZSBhbmQgYSBmZWRvcmEKc29sZGllcnMgY2hhcmdpbmcgaW4KZmVtYWxlIHZpa2luZwpsaWdodHdlaWdodCBhcm1vcgptYXN0ZXJwaWVjZS4gaW50cmljYXRlIGFydHdvcmsKcGhvdG9yYWxpc3RpYyByZW5kZXJpbmcKdGhlIGFsbGZhdGhlcgpvZiBhIGdhbmcgb2YgY2lyY3VzIGNsb3ducwpyb3VuZCB0ZWV0aCBhbmQgZ29vZnkgZmFjZQphcHBlYXJpbmcgZnJvbSB0aGUgYmFja2dyb3VuZApjbG9zZSB1cCBmYWNlIHBvcnRyYWl0CuOBkeOCguOBrgptYW55IHN0YXJzIGluIHRoZSBuaWdodCBza3kKZXh0cmVtZWx5IGJpemFycmUgZGlzdHVyYmluZwpqdW5nbGUgbmF0dXJlCndlYXJpbmcgYSBsaWdodCBncmV5IGNyb3duCndpdGggYW4gYXNodHJheSBvbiB0b3AKb3BlbmluZyBzaG90CmRyYW1hdGljIGxpZ2h0aW5nIHNjaSBmaQpvbGQgc2NpZW50aWZpYyBkb2N1bWVudApvcmFuZ2UgaGFsbwp0cm9uIGxlZ2FjeSBzZXR0aW5nCm15c3RlcmlvdXMgZmVlbGluZwpsb3ZlbHkgYm9oZW1pYW4gcHJpbmNlc3MKbmF0dXJhbCBkdWxsIGNvbG91cnMKMSAyIDkgNwppa3V0byB5YW1hc2hpdGEKb3JnYW5pYyBtdXNocm9vbSBsaWNoZW4gbW9zcwoyIDAgNSA2Cm92ZXIgdGhlIGhpbGxzCmhpZ2gta2V5IGxpZ2h0bmluZwo4IGsgaGkgLSByZXMKcmVhbCBhaXJjcmFmdHMgcmVmZXJlbmNlcwpnZXJpdCBkb3UKamVhbiAtIGhvbm9yZSBmcmFnb25hcmQKc3Vuc2V0IHNpbnJpc2UKbm9yd2F5IGZqb3JkcwphbWVyaWNhbiByZWFsaXN0IHN0eWxlCndpdGggbG90cyBvZiBzY3VtYmxpbmcKc2N1bWJsZWQgdGhpY2sgb2lsIHBhaW50Cm9pbHkgaGlnaCByZWxpZWYKaW4gYSByb29mdG9wCmFuaW1hbCBwYWludGluZwpiZWF1dGlmdWwgY29tcG9zaXRpb24gMyAtIGQgNCBrCnBhaW50aW5nIG9mIGEgcm9vbQpjYW5kbGVzIQpwYWludGluZyBvZiBvbmUgaGVhbHRoIHBvdGlvbgpvcGhhbmltIGhhcyBiaXJkIHdpbmdzCnZvbHVtZXRyaWMgZGlmZnVzZSBzaGFkaW5nCmN1c3RvbSBzY29vdGVyCmdvZCBzYXZlIHRoZSBxdWVlbiEhIQpubyBmdXR1cmUhISEhCjQgNSBtbS4gcGhvdG9yZWFsaXN0aWMKZnJvbSBmYWxjb24gYm1zCndpbGxvdyB0cmVlCnN0aXBwbGVkCnN5bW1ldHJpY2FsIGJvZHkgZmVhdHVyZXMKaW4gZ3JhZmZpdGkgc3R5bGUKcGVyc2lhbiB3YXJyaW9yCndpbmRvdyBhdCB0aGUgY2VudGVyCmZ1cm5pc2hlZCByb29tCnBob3RvcmVhbGlzdGljIGRldGFpbHMgY29udGVudAp0aWxlc2V0IGFzc2V0IHN0b3JlCmFydCBzZXQKcGhvdG8gb2YgYSBiZWF1dGlmdWwgd2luZG93Cmlyb24gZnJhbWUKZmFrZSBncmFzcwpmYWtlIHNreQp2aXNpYmxlIGxheWVycwpyb2IgbWNuYXVnaHRvbgpwaG90byBvZiBhIGhhbXN0ZXJzIG9uIGEgZGF0ZQp3aWRlIGFuZ2xlIHNob3QgNCBrIGhkcgpkZWZvY3VzZWQgYmFycyBpbiB0aGUgZm9yZWdyb3VuZApob2xkaW5nIG1lc2ggYmFnIHdpdGggYmFnZWxzCmxvbmcgZXhwb3N1cmUgOCBrCnBob3RvIG9mIGdyZWVuIHJpdmVyCnd5b21pbmcKZW5pZ21hdGljIG5hdHVyYWwgYmVhdXR5CnBob3RvIHN0aWxsIG9mIHBvc3RlcmlvciB2aWV3CnRocmVlIGhhaXJ5IG5lYW5kZXJ0aGFsIHBlb3BsZQptYXR0ZSBwYWludGluZyBvZiBodW1hbiBtaW5kCmdvdGggZ2lybCBhZXN0aGV0aWMKbHVzY2lvdXMgcmVkIGxpcHMKZ3JlZW4gamV3ZWxyeQpyZWQgamV3ZWxyeQplbGVjdHJpY2FsIHdpcmluZyEKcmFpbmluZyBhd2FyZCB3aW5uaW5nIHBob3RvCnNreSBmb3Jlc3QgYmFja2dyb3VuZApjcmVhdGl2ZSBjb2xvcmZ1bGwgLSBtYWtldXAKZ29yZ2VvdXMgaGlnaGx5IGRldGFpbGVkIGZhY2UKbm8gd2F0ZXJtYXJrIHNpZ25hdHVyZQpiZSBjb25jZXB0IGFydApjaW5lbWF0aWMgYmVlcgpwcmltZQphbmNpZW50IHJ1aW5zIGJlaGluZCBoZXIKYmVhdXRpZnVsIGJvcmRlcgpsb3cgYW5nbGUgZGltZXRyaWMgY29tcG9zaXRpb24Ka2Fma2EKbSAxIHRhbmsgZnVyeSByb2FkCjEgMCAwIDAgeCAxIDAgMCAwIHBpeGVsIGFydApndXNoeSBnaWxscyBhbmQgYmx1c2gKYmFja2VkIG9uIGtpY2tzdGFydGVyCnBvbGFyb2lkIG9mIGEgZHJlYW0KZmFzaGlvbiBuZW9uIGxpZ2h0CnNtb2tlIGFuZCBjbG91ZHMKcG9sb3ZzdGlhbiBkYW5jZXMgYW5kIGNob3J1cwp2ZXJ5IG5pY2UgcGFzdGVsIGNvbG9ycwpnbG93aW5nIGhvdCBzdW4KamFwYW5lc2Ugc2hpYmFyaSB3aXRoIGZsb3dlcnMKZnVsbCBjb3ZlcmVkIGRyZXNzCnBvcmNlbGFpbiBjeWJvcmcgYXJtb3IKcG9ydGFsIGluIHNwYWNlCndpdGggc2xlbmRlcgpoYW5kIHdyYXBzCndoaXRlIGNsb3RoIGluIHdpbmQgc2hpbmluZwpwb3J0cmFpdCBhcnQgb2YgcmljayBzYW5jaGV6CndlYXJpbmcgaW1wZXJpYWwgZ2VhcgpyZWQgYW5kIGdvbGQgY2xvdGgKZnJhbmsgdGVubmV5IGpvaG5zb24KZG5kIGZhbnRhc3kgbWFnaWMKYWJ1bmRhbnRseSBkZXRhaWxlZAplbmxpZ2h0ZW5tZW50IHRyaXBwaW5nIG9uIGRtdApwaG90byAyIDAgMSAwCm1vc3N5IHRydW5rCm1pc3QgZmlsdGVycwppcnJpdGF0ZWQgZXhwcmVzc2lvbgpib2hlbWlhbiBmYXNoaW9uCmluIGdyZWVuIGZvcmVzdApwb3J0cmFpdCBvZiBnZW9yZ2Ugd2FzaGluZ3Rvbgpwb3J0cmFpdCBvZiBoYXJsZXkgcXVpbm4KcG9ydHJhaXQgb2YgaGF0c3VuZSBtaWt1CmRpZ2l0YWxseSBkcmF3IG9uIHdhY29tIHRhYmxldApwb3J0cmFpdCBvZiB2bGFkaW1pciBwdXRpbgpiZXRhIHdlYWsgbWFsZQpjb21wbGV0ZSBsaWdodCBvY2NsdXNpb24KcG9ydHJhaXQgb2YgYSA0MCB5ZWFycyBvbGQgd29tZW4Kb2YgYSBvbGQgMTN0aCBjZW50dXJ5CmJpb3B1bmsgc3VpdApwb3J0cmFpdCBvZiBhIGJhbGxlcmluYQo1MCBtbSBsZW5zIHBob3RvZ3JhcGh5CmdyYWRpZW50IHdoaXRlIHRvIHJlZAptb2Rlcm4gbm9jdHVybmFsIGJhY2tncm91bmQKbGlnaHQgc3R1YmJsZSB3aXRoIHJlZCBzaGlydApzbGlnaHQgbmVyZHkgYXdrd2FyZCBzbWlsZQpibGFjayBhbmQgd2hpdGUgZ2FpbnkgZmlsbQphenRlYyBoYWlyCmhvdXNlcGxhbnQKZGFyayBvbWlub3VzIG1vb2QKMyBkIHNoYWRlZApwb3J0cmFpdCBvZiBhIGdvZGRlc3MKcGhvdG9ncmFwaGVkIG9uIGRhbWFnZWQgZmlsbQp3YXJmcmFtZSBjb25jZXB0IGFydApuZXVyYWwgbWFjaGluZQp3ZWFyaW5nIGEgcGFzdGVsIHBpbmsgaG9vZGllCm9sZCBqZWRpIG1hc3RlcgppbnRyaWNhdGUgd3JpbmtsZXMKaW4gYSBoaWdoIHJlbmFpc3NhbmNlIHN0eWxlCnRoaW4gc2NhciBvbiBoaXMgZm9yZWhlYWQKd2F0ZXJjb2xvciBleHByZXNzaW9uaXNtCnBvcnRyYWl0IG9mIGEgc3RhcnZpbmcgYWkgYXJ0aXN0CnBvcnRyYWl0IG9mIGEgdGVlbiByb2JvdApzbWlsaW5nIG1hbGUKMSA0IDggMCBzCnRvcGtub3QKcnVnZ2VkbHkgaGFuZHNvbWUgcmFuZ2VyCnVsdHJhIHZpb2xldCBoaWdobGlnaHRzCmRheSAtIGdsb3cgZmFjZSBwYWludApkYXJrIGJsYWNrIHBvcmNlbGFpbiBza2luCmRheSAtIGdsb3cgZmFjZXBhaW50CmlyaWRlc2NlbnQgZnJhY3RhbCBoZWFkZHJlc3MKcG9ydHJhaXQgb2YgYW4gYWJzdXJkbHkgdWdseQptYWdpYyB1bmlmb3JtCnBvcnRyYWl0IG9mIGFuIGluc2VjdG9pZApwb3J0cmFpdCBvZiBhbiBvcmMKaGF1bnRpbmchCnNrZWtzaXMKdGhvcm4gZXZlcnl3aGVyZQptYWdpY2FsIGxpYnJhcnkgYm9rZWgKcG9ydHJhaXQgb2YgY3V0ZSBnb3RoIGdpcmwKc3VuIGluIHRoZSB6ZW5pdGgKcG9ydHJhaXQgb2YgaGFwcHkgYSB5b3VuZyB3b21hbgp3ZWFyaW5nIGluIGNhcmRpZ2FuCm5lYnVsYSBhdXJhIHN1cnJvdW5kaW5nIHN1YmplY3QKYW5pbWUgaGlnaGx5IGRldGFpbGVkCnBvcnRyYWl0IG9mIGltbWVuc2UKcHJvdWQgbG9va2luZwpnb2xkIGxlYWYgdGV4dHVyZQpwb3J0cmFpdCBvZiBrcG9wIGlkb2wKZGFuIG11bWZvcmQuIDggayBvY3RhbmUgcmVuZGVyCnBvcnRyYWl0IG9mIG1hbGUgaHVtYW5vaWQKbWljaGVsIG9jZWxvdAooKCh0aG9tYXMga2lua2FkZSkpKQptYXJ6YW5uYQpwb3J0cmFpdCBvZiBtb3VybmZ1bApwb3J0cmFpdCBvZiBxdWVlbiBvZiBkcmVhbXMKcm9uYWxkbyBsdWlzIG5hemFyaW8gZGUgbGltYQpwb3J0cmFpdCBvZiBydWdnZWQgemV1cwp3aXRoIGZydWl0IHRyZWVzCm5ld3Nib3kgY2FwCnBvcnRyYWl0IG9mIHRoZSBuZWNyb21hbmNlcgp0aG9ybiByb3NlIGNyb3duCm9ybmF0ZSB3aXRoIHdoaXRlIGRpYW1vbmRzCmltbW9ydGFsIGJvbmUKbmFkYXIKc2xpZ2h0bHkgcm91bmQgY2hpbgpsYXJnZSBnYXBpbmcgbW91dGgKbWVuYWNpbmcgYXBwZWFyYW5jZQptZWxhbmNob25pYyByb3NlIHNvZnQgbGlnaHQKaW5kb29yIHNvZnQgbGlnaHRpbmcKY2VsZWJyYXRpb24gY29zdHVtZQpwb3J0cmFpdCBydWdnZWQgZ2lybApuZW9uIGNvbG9yIGJpb2x1bWluZXNjZW5jZQpzaW1wbGUgZGVzaWduIGNvbmNlcHRzCmNpcmNhIDE2MTUKd2VhcmluZyBhbG9uZyB3aGl0ZSBkcmVzcwpib2xkIHNlcmlvdXMgZXhwcmVzc2lvbgpzdGFyZXMgYXQgdGhlIGNhbWVyYQptYW55IGhlYXJ0cwpvY2VhbmljIG5hdmFsIGJhdHRsZXMKbW9zY293IG1ldHJvCnBvc3QgLSBhcG9jYWx5cHRpYyBtYWdpYyBraW5nZG9tCnBvc3QgLSBwdW5rIGFsYnVtIGNvdmVyCnBvc3QgYXBvY2FseXB0aWMgY2l0eSBidWlsZGluZwpwb3N0IGFwb2NhbHlwdGljIHNhbiBmcmFuY2lzY28KYmx1cnJlZCBkZXRhaWwKcHJlc2lkZW50IG9mIGJlbG9ydXNzaWEKcHJpbmNlcyBqYXNtaW4KYmVoYW5jZSBsZW1hbm9vc2gKa2l0dGVuIHB1cHB5IHRlZGR5IG1peApuaWtvbiBjYW1lcmEgOCBrCmRyYW1hdGljIGxpZ2h0aW5nLiBjb25jZXB0IGFydApjaW5lbWF0aWMgfCB8IHZlcnkgYW5pbWUKZmluZSBkZXRhaWxzLiBnaXJscyBmcm9udGxpbmUKZGlzbmV5IGRpc25leQp3aGlza2VycyBocQpwb3J0cmFpdCBjZW50cmljIGNvbXBvc2l0aW9uCmhlYWx0aGNhcmUKaG9uZXkgd2luZApkZWVwIHB5cm8gY29sb3JzCnB1cnBsZSBsYXNlciBsaWdodGluZwphZG9iZSBzdG9jayBwb3B1bGFyCmF0aGVuZQpjaHVua3khISEKdGV4dHVyZWQgcGxhc3RpYwpoZXhhZ29uIG1lc2gKbmVvbiBnbG93aW5nIGxpbmVzCndlYXJpbmcgd2hpdGUgY2FtaXNvbGUKc3Rvcnlib29rIGRlc2lnbgpyaWNoIG1vb2R5IGNvbGQgY29sb3VycwoxMDMyMTA2NzUxCjIwNjMzMDAyMjMKMzEyNzMxODc4MwoyODA2OTI3NjE1CnJpY2ggZGVlcCBjb2xvcnMuIGEgbWFzdGVycGllY2UKY3liZXIgcGF0dGVybnMKcmljaCBldGhlcmVhbCBjb2xvdXJzCmdyZXlzY2FsZSAxIDkgOSAwCnBvbGlzaGVkIGFuZCBmYW5jeQpzaWx2ZXIgb3JuYW1lbnRzCnJlYXIgc2lkZSBwb3J0cmFpdCBvZiBhIG11c2N1bGFyCmhvbGRpbmcgYSBsYXNlciBndW4KbGFyZ2UgY3Jvd24Kc3VwZXJpb3IKbWFkZSBpbiBicm9uemUKdGVhcnMgZHJpcHBpbmcgZnJvbSB0aGUgZXllcwptZWRpdW0gd2lkZSBmcm9udCBzaG90CnJldHJvIHZpbnRhZ2Ugc2NpIC0gZmkKbWludCBsZWF2ZXMKYWJhbmRvbmVkIGZseWluZyBmdXR1cmUgY2l0eQphYnN1cmQgcmVzCnJpdmVyIG9mIGJsdWUgZmlyZQpyb2FkIHdhcnJpb3IKcm9iaW4gd2lsbGlhbXMgaXMgZ29kCmZlbWFsZSBoZWFkCmZpc2ggbGVuc2UKcm9uYWxkbyBsdWlzIG5hemFyaW8gZGEgbGltYQptYW55IHN3b3JkcwpzYW1veWVkIGRvZwpyb29zdGVyISEhIQp3ZWFyaW5nIGxvbmcgc2lsdmVyIHJvYmVzCmNvbXB1dGVycyBhbmQgZGlnaXRhbCBtb25pdG9ycwpjdXQgbGluZXMKbWN1IGVmZmVjdHMKZ29vZCBncmFwaGljCnJ0eCBlbmdpbmUKaW4gYSBzY2lmaSBtb3ZpZQp3aGl0ZSBjYW5kbGVzCndlYXJpbmcgZHJlc3NlcwpzZW5zdWFsIHBhaW50aW5nCndlYXJpbmcga25lZXNvY2tzCnNoYWNrbGVkIGluIHRoZSB2b2lkCjM1bW0gZi8xLjRsIGxlbnMKc2hlcmlseW4gZmVubiAyIDYgeWVhcnMgb2xkCnNob2d1biBhdWRpbwpzaG9ydCBjdXJseSBibG9uZGUgaGFpcmVkIGdpcmwKZG90YSEgbWF0dGUgcGFpbnRpbmcgY29uY2VwdCBhcnQKZmFudGFzeSByb2JlCm1hbGUgZWxmIHJhbmdlcgpzaGFycCBlZGdlcy4gcG9zdGVyCjggay4gZWxlZ2FudApzaWRlIHByb2ZpbGUgcGFpbnRlZCBwb3J0cmFpdApkYXJrbmVzcydzIGJhY2tncm91bmQKcmFkaWFudCBjdXQKb3BlbiBwbGFpbnMKYmxlYWsgYXBvY2FseXB0aWMgZW52aXJvbm1lbnQKY2FtZXJhcyBsZW5zZXMKYnJhY3RzCnZpbnRhZ2UgZm9vdGFnZSBvbiB0b2t5byBzdHJlZXRzCmJ1bXAgbWFwcGVkCnNrZWxldG9uIGRydW1tZXIKd2luZG93cyA5IDUKdmlicmFudCBjb2xvciEKc2NhbGVzIG9uIGhlciBjaGVzdApzb2FyaW5nIHRvd2VycyBhbmQgYnJpZGdlcwpwb3N0bW9kZXJuIHBhaW50aW5nCmFic3RyYWN0ZWQKYWZyaWNhbiBjYW5hZGlhbgpzb2xhcnB1bmsgaHVtYW4Kc3dpcmxleSBjbG91ZHMKbW91cm5pbmcgZmFtaWx5Cm9pbCBwYWludGluZyBodWUKc3BvcnRzIHRlYW0gbWFzY290CmZvb3RiYWxsIG1hc2NvdApoYXBweSBhbmQgYmVhdXRpZnVsCmJvbWJlciBwbGFuZXMKdG9uYWwgc2VwYXJhdGlvbgpzdGVhbSBuZWNyb3BvbGlzCnN0ZWFtcHVuayBvd2wgaW5zaWRlIGEgZ2xhc3MgamFyCnN0ZWFtcHVuayB6ZXBwZWxpbgpwdXJlIHdoaXRlIGhhenkgb3ZlcmNhc3Qgc2t5CmNvb2tlIHByaW1lIDI1bW0KZHJhbWF0aWMgZmlsbSBzdGlsbAp3aGl0ZSBvY3RvcHVzCmdpYW50IGV5ZWJhbGwKYW5hdG9teSBib29rCnN0cmFpZ2h0IG5lY2sKZmx1aWQgYWNyeWxpYwpzdHJlZXRzIG9mIG11bWJhaQptb3NzeSBidWlsZGluZ3MKY3VydmFjZW91cy4gZGV0YWlsZWQKc3R1ZGlvIHBob3RvIG9mIGEgY2VyYW1pYyBmaWd1cmUKc2hhbWFucyBhbmQgc3RyYW5nZSBjcmVhdHVyZXMKc3R5bGUgb2Ygcm9tYW50aWNpc20KcGVyZmVjdCByZW1icmFuZHQgbGlnaHRpbmcKc3R1bm5pbmdseSBvbWlub3VzCnNreSBhbmQgb2NlYW4gYmFja2dyb3VuZAp3aGl0ZSBnb2xkIHNraW4KMiA1IDYgeCAyIDUgNiBwaXhlbHMKeW91bmcgYXNpYW4gZ2lybAp0aGUgYXJ0IG9mIGF0aGFzIGFuZCBkYXJrIHN1bgpzcXVhcmUgZW5peCBjaW5lbWF0aWMgYXJ0Cm5pbnRlbmRvIG9mZmljaWFsIG1lZGlhCnN1cGVybWFuIGVtZXJnaW5nIGZyb20gdGhlIHN1bgpvcmFuZ2UgeWVsbG93IGV0aGVyZWFsCnN0aXBwbGluZyBkb3RzCnBvd2VyZnVsIHJhZGlhbnQgY29uZmlkZW50IHZpYmUKcm91bmQtY3JvcHBlZAp3aGl0ZS1zcGFjZS1zdXJyb3VuZGluZwpjbGVhbiBzaGF2ZW4hISEhCndoaXRlIHJvYmUgd2l0aCBnb2xkIGFjY2VudHMKYW50YWdvbmlzdAptaXRob2xvZ3kKdGFlaHl1bmcgZWF0aW5nIGd1Y2NpIGZyaWVzCnRhaSB3YXJsb3JkCnRhbGwgY2FzdGxlIGVuY2xvc2VkIHBhbGlzYWRlZApiZWF1dGlmdWwgd2l0Y2ggd2l0aCBsb25nIGhhaXIKaW5hcmkgc2hyaW5lCnRlZW4gZWxmCmxhbXAgKCAoICggYXJtY2hhaXIgKSApICkgKQp0aGUgYW5jaWVudCB3b3JsZApsb3ZlIGRlYXRoIHJvYm90CnRoZSBjbG91ZHkgbW9vbmxpdCBza3kKdWhkIDggayBjcnllbmdpbmUKdGhlIGZhbGwgb2Ygcm9tZQp0cmVuZGluZyBvbiB2ZWhpY2xlIGRlc2lnbgpzcGFjZXNoaXAgZXhwbG9kaW5nCnRoZSBob3Jyb3IgaW4gdGhlIHdvb2RzCnRoZSBpbmNyZWRpYmxlIGh1bGsKcm91bmQgYm90dGxlCnRoZSBtb25zdGVyIHVuZGVyIHRoZSBiZWQKZ29kIGxpZ2h0IHNoYWZ0cwp0aGUgbW9zdCBiZWF1dGlmdWwgc2NlbmUKdGhlIG11bHRpdmVyc2UKamFkZWQKdGhlIHBvcnRyYWl0CnRoZSBwcmVzaWRlbnQKdGhlIHNoaW5uaW5nIGhvdGVsIGhhbGx3YXkKYXJ0IG5vdXZlYXUgY3VydmVzIGFuZCBzd2lybHMKdGhlIHdha2Ugb2YgdGhlIHVuc2VlbiBvYmplY3QKdHVja2VkIG91dCBvZiB2aWV3IG1hZ2ljIGhhcHBlbnMKdGhpcmQgZXllIG1pZGRsZSBvZiBmb3JlaGVhZAp0aWdlciBoZWFkCnRvcCBkb3duIGxpZ2h0aW5nCmFuYXJjaG8gLSBjb21tdW5pc3QgaGVhdmVuCnJlZnJhY3RlZCBzdW5zZXQgbGlnaHRpbmcKdGZ3aWtpLiBuZXQgcGhvdG9ncmFwaHkKb3J0aG9ncmFwaGljIDNkIHJlbmRlcmluZwppbnNpZGUgaGVyIHN1cnJlYWwgdnIgY2FzdGxlCnNreSBmYWxsaW5nCmxvb2sgbWUgaW5zaWRlIG9mIG15IGV5ZXMKZmxlc2h5IGZpZ3VyZXMKdW5ldmVuIGRlbnNlIGZvZwpydWluZWQgc3ViZGl2aXNpb24gaG91c2VzCmphbWVzIGplYW4gc29mdCBsaWdodCA0awp0eXBpY2FsIGNyeXB0b2N1cnJlbmN5IG5lcmQKc2hpbGxpbmcKdWx0cmEgZGV0YWlsZWQgZmVtYWxlIGFuZHJvaWQKYW5kcmV3IHRob21hcyBodWFuZwpsb3N0IGluIGEgZHJlYW15IGZhaXJ5IGxhbmRzY2FwZQphcnRzdHlsZSB6ZHppc8WCYXcgYmVrc2luc2tpCnRoaW4gbG9uZyBhdWJ1cm4gaGFpcgp1bmRlciBibHVlCmJlYXV0aWZ1bCBwcmVjaXNlIGZhY2UgYW5kIGJvZHkKY2luZXN0aWxsIQpzaGUgaGFzIGJsb25kIGhhaXIKZG5kIGZhbnRhc3kgY2hhcmFjdGVyIGFydApsb3ZhYmxlIGFuZCBmdXJyeQp1bmRlcndhdGVyIGluawpmYWNpbmcgd29ybGRzIG1hcApwb3Bjb3JuIGFzIG1vcnBoZXVzCnZlY3RvciBhcnQgcGFuZWwgZm9yIGNuYyBwbGFzbWEKdmVjdG9yIHBhdGNoIGxvZ28gb2YgbWVybWFpZApvbWluYSB0YWNoaWJhbmEKdmVyeSBiZWF1dGlmdWwgZmVtYWxlIGJhcmJhcmlhbgpmdXJyeSBwYXcgYXJ0CmF2b2lkIHN5bW1ldHJ5CmJyb2tlbiBnb29nbGUgbWFwcwptYWxlIHJvYm90aWMgYW50aHJvIGRvbHBoaW4KcHJpY2Ugb2YgcGVyc2lhIG1vdmllCm1pc3NpbmcgamF3CmR1YWwgd2llbGRpbmcgbGFyZ2UgcmV2b2x2ZXJzCnZpYnJhbnQgJiBjb2xvcmZ1bCBiYWNrZ3JvdW5kCnZpZXRuYW1lc2UgdGVtcGxlIHNjZW5lCmZsb3cgZXZlcnl3aGVyZQpob3VzZXMgd2l0aCBmYWNlcwpsb25lIHN1cnZpdm9yCmZsb2F0aW5nIGFjcm9zcyB0aGUgY29zbWljIG9jZWFuCmF6dXJlIGFuZCByZWQgdG9uZXMKYmVhdXRpZnVsIGFsbHVyaW5nIHdvbWVuCndoaXRlIGVsZWdhbnQgYmFyb3F1ZSBkZXNpZ24Kd2hpdGUgZ2hvc3RodWxrCnZlcnkgbG9uZyB3aGl0ZSBiZWFyZCBhbmQgaGFpcgplY2NoaSBzdHlsZQp3aGl0ZSBob3JucyBxdWVlbiBkZW1vbgp3aGl0ZSBsYXZhCmNpdHkgc3RyZWV0IHZpZXcgYmFja2dyb3VuZAp3aXBlb3V0IDIgMCA0IDgKMTUgbW0gb2N0YW5lIHJlbmRlcgp3aWRlYW5nbGUgcG9ydHJhaXQKd2lsbCBncmFoYW0Kd2hpdGUgYW5kIHRlYWwgZ2FybWVudAp3aW5zdG9uIGZyb20gb3ZlcndhdGNoCndvbWFuIG9uIHRoZSBiZWFjaApsb3ZlY3JhZnRpYW4gaGVsbHNjYXBlCnJlZCBzaG9ydCBkcmVzcwp3b29kIHN1cmZhY2UKcm9ja3kgbW91bnRhaW5zIGFuZCBhIHJpdmVyCnZpY3RvcmlhIHNpZW1lcgp5b3VuZyBtYWxlIHdpdGggd2Fsa2luZyBzdGljawp5b3VuZyBzaGFkb3cgbWFnZSBtYWxlCm1pbmltYWxpc20K0YFhc3RsZSBvbiB0aGUgcm9jawp2b2x1bWV0cmljIGxpZ2h0aW5nCmNpbmVtYXRpYwpxdWVlciB3b21hbgpsb2dvCmZsb2F0aW5nIGFsb25lCnRyZW5kaW5nIG9uIGFydCBzdGF0aW9uCmNnc29jaWV0eSA4awpkZXRhaWxlZCBzdHVkaW8gbGlnaHRpbmcKYW5kcmVpIHRhcmtvdnNreSBhbmQgaHIgZ2lnZXIKZCZkIHNjaS1maQpsb25nIGJsdWUtY2FwZQp0cmVuZGluZyBvbiBhcnQgc3RhdGlvbgpwYWludGluZwpjb25jZXB0IGFydApjaW5lbWEgNGQKZXBpYwpiYXNlYmFsbCBwbGF5ZXIgbWlrZSB0cm91dAppbiBhIGphcGFuZXNlIGFwYXJ0bWVudApjYWxpZ3JhZml0dXJpc20gc3R5bGUKbXVsdGktbGF5ZXJlZCBhcnR3b3JrcwpuaXRybyBwYWludAppbXBlY2NhYmx5IGRyZXNzZWQK4oCcdGhlIHVsdGltYXRlIGdpZ2FjaGFkCm5ldyBtZXhpY2FuIGRlc2VydCBiYWNrZ3JvdW5kCmRlc2VydCBwaG90b2dyYXBoeQptb2ViaXVzICsgYXJ0Z2VybQrwn5O3IG11bmdvamVycmllIGFuZCBydW1wbGV0ZWF6ZXIKcGFsYWNlIO+8jCBhIGdpcmwgaW4gaGFuZnUKZWxlY3Ryb25pYyBiaWtpbmkKaHlwZXIgLSBnb3RoCmhvcnJvciAtIGNvcmUKYWxhcm0gY2xvY2sKdGVjaG5pY29sb3IgNCBrCmd1c3RhdmUgZG9yZSBhbmQganVuamkgaXRvCmNodXJjaGVzCmNnc29jaWV0eSAjIGNvbmNlcHRhcnQgY2cKY29vbCBzdHlsZQpqb2VsIHRvcnJlcwpoZW1wCnByaWRlIGZsYWcgaW4gYmFja2dyb3VuZApleHBpcmVkIGJsYWNrIGFuZCB3aGl0ZSBmaWxtCmNpbmVtYXRvZ3JhcGh5IGNvbXBvc2l0aW9uCnRvcG9sb2d5CiggZmVycmlzIHdoZWVsICkKISEhIGNhdCEhIQpyYWdkb2xsIGNhdApncmFwaGljIGRlc2lnbiBiYWNrZ3JvdW5kCiEhISFtaWxhIGt1bmlzCmxvb2tpbmcgc2NhcmVkCmJlYXV0aWZ1bCBzdHVkaW8gZmFjZQpwdWxpdHplciBwcml6ZQpjcmFpZyBydXNzZWxsCmZvZ2d5IHJvb20KYm90aCBoYXZlIHJlZCBsaXBzCmd1c3RhdiBrbGltdCBzdHlsZQp2aWJyYW50IGZhbnRhc3kgc3R5bGUKb24gcGludGVyZXN0Cm9ubHkgYmxhY2sgYW5kIHdoaXRlCmV4cGlyZWQgY29sb3IgZmlsbQpzaGFycCBhbmQgc21vb3RoCmp1bmdsZSBiYWNrZ3JvdW5kIHdpdGggcnVpbnMKZm9yZXNob3J0ZW5pbmcgcGhvdG9ncmFwaHkKc2lua2luZyBhcyBpZiBkcm93aW5nCmFubmF0byBmaW5uc3RhcmsKc21pbGluZyBtYW5pYWNhbGx5CmF3YXJkLXdpbm5pbmcgY29uY2VwdCBhcnQKaWx5YSBrdXlzaGlub3YKZmlsbSBzdGlsbCBmcm9tIHRoZSBtb3ZpZQpsaW5vY3V0IHByaW50CnNwbGF0dGVyZWQgdmlicmFudCBwYWludAphY3Rpb24gdGhyaWxsZXIKKG1vb24gaW4gdGhlIGJhY2tncm91bmQpCmhpZ2gtYm9keSBkZXRhaWwKdGF0b29pbmUKbGl2ZQo4IGsgdWx0cmEgcmVzb2x1dGlvbgpjaW5lbWF0aWMgaW1hZ2UKd2hpdGUgaW5rIHNrZXRjaCBvbiBibGFjayBwYXBlcgpnb2RtYWNoaW5lCmJ1enplZCBzaG9ydCBkYXJrIGhhaXIKaW5kaWUgZ2FtZXMKY2FmZSByYWNlcgpzY2hlbWF0aWMgaW4gYSBub3RlYm9vawp0cmlwcHkhISEgc3ltYm9saWMKdG9reW8gYXQgbmlnaHQKKCAoIHJpc29ncmFwaCApICkKcG9wdWxhciBvbiBiZWhhbmNlCnRoZSBmYXNoaW9uIG9mIHRoZSB0aW1lCnJpc29ncmFwaCBncmFkaWVudAphbWF6aW5nIGxpZ2h0bmluZwpyZWZsZWN0aW9uIG9mIGxlZCBsaWdodHMKY2xvdWRzIGFuZCBmaWVsZHMgaW4gYmFja2dyb3VuZApmaWxtIHN0aWxsIGZyb20nZG9jdG9yIHN0cmFuZ2UnCiggYXJ0IGRlY28gKQp2YXBvdXIKYW4gYWZmYWJsZSBkZXZpbCBhbW9uZyBkZW1vbnMKZGV0YWlsZWQgcGFpbnRpbmfigJwKMTYtYml0IHJnYgooYmVhdXRpZnVsKSBnaXJsCmpld2VscnkgcGhvdG9ncmFwaHkKbXV0ZWQgY29sb3IgKGJsdWVzCmphbiBtYXRlamtvIGFuZCBqLiBkaWNrZW5zb24KcHJvZmVzc2lvbmFsIG1vZGVsIHBob3RvZ3JhcGh5CnNub3cgc2NlbmUKbWFuIHZzIHdpbGQKYWlycGxhbmUgY29ja3BpdApzcHJpZ2dlcgpmaWxtZWQgaW4gNyAwIG1tCmZ1dHVyaXN0aWMgcGFpbnRpbmcKd29ybGRzIGNvbGxpZGUKc3RlYW1wdW5rIGNhdApjeWJlcnB1bmsgZHlzdG9waWEKZ2VudGxlIHNtb2tlIGVmZmVjdApzbGl0LXNjYW4gcGhvdG9ncmFwaHkKMSAwIDAKMiAwCjEgMyBtbSBmaWxtCnJvdW5kIC0gZmFjZQphbm5vdGF0aW9ucyBoYW5kd3JpdHRlbgp0aWdodCBzaG90IG9mIHN1YmplY3QKc2Vuc2Ugb2Ygc3BhY2UKYmx1ZSBhbmQgZ3JheSBjb2xvcnMKbWFnaWMgY2FyZApkaXJlY3Rpb25zIGFuZCBtb29kcy4gZmFjZXMgb25seQpiZWhpbmQgaGVyIGEgZ290aGljIGNhdGhlZHJhbApoZWF2eSByb2NrIGNvbmNlcnQKc2hhZHkgYWxsZXlzClsgY2xvc2V1cCBdISEKcGFsbSB0cmVlcyBpbiB0aGUgYmFja2dyb3VuZApqb3ljZSBiYWxsYW50eW5lCm9yZ2FuaWMgaW5rCnN0eWxlIG9mIHRha2F0byB5YW1hbW90bwp1bnJlYWxlbmdpbmUgb2N0YW5lIHJlbmRlcgpkZXRhaWxlZCBoYWlyIGZvZ2d5CnN0cmFuZ2VseSB0ZXJyaWZ5aW5nCndvb2QgcGFuZWwgd2FsbHMKYm9keSAtIGhvcnJvcgpoaWdoIGJyaWRnZXMKc3RhbmRpbmcgb24gYSBtYXJ0aWFuIGxhbmRzY2FwZQpwZXJmZWN0IHN5bW1ldHJpYyBjb2hlcmVudCBmYWNlCmhlYXZ5IG1vdGlvbiBibHVyCm1hcnkgZWxpemFiZXRoIHdpbnN0ZWFkCmV4dGVyaW9yIHBob3RvZ3JhcGh5CndhcmhhbW1lciA0IDAgMCAwCmdyZXkgc2tpZXMgcmFpbgphbmRyb21lZGEKc2l0dGluZyBpbiBydXJhbCBsaXZpbmcgcm9vbQp2aWduZXR0ZSBpbGx1c3RyYXRpb24KbmVjayB3cmlua2xlcwpsb3cgY29sb3VyCnRoZSBub24tYmluYXJ5IGRlaXR5IG9mIHNwcmluZwpvcmF6aW8gZ2VudGlsZXNjaGkgc3R5bGUKMTBrCmZ1dHVyaXN0aWMgY3liZXJwdW5rCnN0dXJtIHVuZCBkcmFuZwpjb21tdW5pc3QgY2l0eQpjb25jZXJ0IGxpZ2h0aW5nCjE5MjBzIG5lbyByb2NvY28gZXhwcmVzc2lvbmlzdAoxOTIwcyBvcmllbnRhbGlzbQp3b3VuZGVkCmp1bGVzIHZlcm5lCmFsZm9ucyBtYXJpYSBtdWNoYQpicm9jaHVyZQpwdW5rIGNvbmNlcnQKaG9sZ2EKYnJlYWsgb2YgZGF3biBvbiB2ZW51cwpub3V2ZWxsZSB2YWd1ZQpuZW9uIGF6dGVjCndvb2RlbiB3YWxscyB3aXRoIGZyYW1lZCBhcnQKZXhwaXJlZCBmaWxtIHN0b2NrCmZhc2hpb24gd2VlawpsaXZlLWFjdGlvbiBhcmNoaXZhbCBmb290YWdlCmxpdmUgYWN0aW9uIGNoaWxkcmVuJ3MgdHYgc2hvdwp0cm9waWNhbCBzZWEgY3JlYXR1cmVzCm1hcmlqdWFuYSBhc3ltbWV0cmljYWwKaW4gc2Nob29sIGhhbGx3YXkKZ3Jhbml0ZQpib2F0IGRvY2sKcGxhbnQgc2FwCjE5ODBzIHBob3RvCmFydGlmaWNpYWwgbGlnaHQKOjYgc21va2UgZ3JlbmFkZXMKcG9saWNlIHNob290b3V0CmFrNDcKY2xvc2UgdXAgdG8gdGhlIHNjcmVlbgphcmFiaWFuIG5pZ2h0cwphcmFiaWEKMiAwIDAgMQpmbG9yYWwgZGVzaWduCjIgMCAwIDQgcGhvdG9ncmFwaAphdnJpbCBsYXZpZ25lCmJyZWF0aGluZwpkZWFkIGJvZGllcyBldmVyeXdoZXJlCnNwYXJrcyBhbmQgc21va2UKc292aWV0IHlhcmQKYWtpdGlwZSBzdHVkaW9zCjIgNCAtIHllYXIgLSBvbGQgbWFuCjIgNCB5ZWFyIG9sZCBmZW1hbGUgbW9kZWwKMiBiIGZyb20gbmllciBhdXRvbWF0YQpibGFjayBibGluZGZvbGQKMiBkIGdlbmVyYXRpdmUgYXJ0CmdyYWluZWQgcmlzb2dyYXBoCmZlZWxpbmdzCjIgZCBsb3cgcG9seWdvbiBhcnQKc3ltbWV0cmljIGFydApncmltZXMKc3dhcm92c2tpIGNyeXN0YWxzCmNoYW1lbGVvbgpwaWNrbGVzCjEgZmVtYWxlCjEgbWFsZQpzdXNwZW5kZWQgdW5kZXJ3YXRlcgp0aW1lIHNxdWFyZQpsZW5zZSBmbGFyZQpnb2F0IGhvcm5zCm1hZ2ljYWwgcmVhbGlzbSBzdHlsZQoyMDIwIHZpZGVvIGdhbWUgc2NyZWVuc2hvdApidW1weSBub3NlCmFsZXJ0IGJyb3duIGV5ZXMKZ3RhIHYgY2hhcmFjdGVyCmhvbWVzIGFuZCBnYXJkZW4gbWFnYXppbmUKaG9sZGluZyBhIGxhcmdlIGdsYXNzIG9mIGJlZXIKb2J2aW91c2x5IGRydW5rCmNhbWVyYSBhbmdsZSBsb29raW5nIHVwIGF0IGhlcgphdHRyYWN0aXZlIHdvbWFuCmRpYWdyYW0gcmVwcmVzZW50YXRpb24KbmVyZHkgYXBwZWFyYW5jZQo4IGsgLSBuIDkKZ29sZCBjaG9rZXIKZ3JvdW5kIC0gbGV2ZWwgbWVkaXVtIHNob3QKY2VsbCBzaGFkZWQgYW5pbWUgaW50cmljYXRlCjMgMiAtIHllYXIgLSBvbGQgbWFuCmZhbGxpbmcgcmFpbgplbW1hCnBhbGUgY29tcGxleGlvbgpub3ZlbWJlcgptYXJxdWVlCmpvaG4ga3JpY2ZhbHVzaQp3ZW5qcgpjbG91ZCBtYWdlIHJvYmVzCmhlYWRzY3VscHQKc3RhcnJ5IHNraWVzCndhdGVyIGV2ZXJ5d2hlcmUKYW1ldGh5c3QgbWluZXJhbCBxdWFydHoKc3dpcmx5IGN1cmxzCmFic3RyYWN0IHdoaXRlIGZsdWlkCnJlYWxpc3RpY2FsbHkgcmVuZGVyZWQgY2xvdGhpbmcKcGFybG9yCnNoYWRvd2luZwpuZWFsIGFkYW1zIHwgcG9ydHJhaXQKc2V0IGluIG9ic2VydmF0b3J5IGF0IG5pZ2h0Cm9ydGhvZG94IGN5YmVycHVuawp0cmVuZGluZyBvbiBjZ3NvY2lldHkgYXJ0Cm9yZ2FuaWMgY2VyYW1pYyB3aGl0ZQpwYXN0ZWwgYmx1ZQptdWx0aXBsZSBzdG9yaWVzCndpdGggdmVnZXRhdGlvbgp3aGl0ZSBleWVzIGFuZCBleWVsYXNoZXMKMSA1IDAgbWwgbGVucwpmcmFjdGFsIGdsYXNzCndlYXJpbmcgY2FzdWFsIHN3ZWF0ZXIKd2VhcmluZyBnb2xkZW4gY3Jvd24KYmVhdXRpZnVsISBjb2hlcmVudCEKc25pbmluZyBzdGFycwptYXhpbWFsaXN0IGZhc2hpb24Kb2NhdGFuZSByZW5kZXIKYmVlIG1vdmllCm1vbm9saXRoCnJlZHNpbnNraQpsb3dwb2x5IGxhbmRzY2FwZQpibG9uZCBmdXJyCnRoZSBvcmIgb2YgdHJ1dGgKb2NhdGFuZQpjYXN0bGUgcnVpbnMKY29tYmF0IHN1aXQKc2ltcGxlIHNoYXBlCmggOSA2IDAKc2NyZWFtaW5nIGZhc2hpb24gbW9kZWwgZmFjZQpvbiBhIHBlZGVzdGFsCm9saXZlIGdyZWVuCnN1cGVyZmluZSBpbmsgZGV0YWlsCmdoaWJsaSB2aWJlCnBvcnRyYWl0IG1vZGUKdGNnCmNpZ2Fycwpmb2N1cyBvbiB0aGUgbXVzaWNpYW5zCm11dGVkIGRhcmsgY29sb3JzCnN1cGVyZmluZSBpbmtsaW5lcwpkcmFtYXRpYyBsb3cta2V5IG5lb24gbGlnaHRpbmcKZGFyayB0aGljayBleWVicm93cwptYXVpCnBzeWNoZGVsaWMgbGlnaHRzCmluc2lkZSBhIGNyeXB0CnNrZWxldG9ucyByaXNpbmcgZnJvbSB0aGUgZGVhZApkeW5hbWljIGRyYW1hdGljIHNob3QKdWx0cmEtcGhvdG9yZWFsaXN0aWMKcHJpemV3aW5uaW5nCnVsdHJhIHJlYWxpc3RpYyA4awpibHVlIHJpbSBsaWdodApzaGlueSB0ZXh0dXJlZCBwbGFzdGljIHNoZWxsCnBpbm5lZCBqb2ludHMKNGshCmNhbm9uIGVvcyBkaWdpdGFsIHJlYmVsIHh0aQoxMDAtMzAwbW0gY2Fub24gZi81LjYKcGluayBqZWxseWZpc2ggZXZlcnl3aGVyZQpmZW5kaQpoYWlyIHN0cmFuZHMKbGl0dGxlIGJvIHBlZXAKKCgobG93IGxpZ2h0KSkpCmxvdyBsaWdodG5pbmcKM2QgdW5yZWFsIGVuZ2luZQp2aXN1YWwgZGVwdGgKZnJvbnQgYW5kIGJhY2sgdmlldwp0LXBvc2Ugb2YgbWFsZSBtYWdpYyB3aXphcmQKbmF0aW9uYWwgZ2VvZ3JhcGhpYyBmb290YWdlCnNpbHZlciBoaWdobGlnaHRzCmludHJpY2F0ZSBnZWFycyBkZXRhaWxzCnBpeGFyIGNnaQpsb3cgZGVuc2l0eQpob2xvZ3JhcGhpYyBwcm9qZWN0aW9uCmZlbWFsZSBwcm90YWdvbmlzdAp2ZXJ5IG5lcmR5CmF3YXJkLXdpbm5pbmcgcGljdHVyZQp3YXRlcmZhbGwgaW4gdGhlIGJhY2tncm91bmQKdG9kYXkncyBmZWF0dXJlZCBwaG90b2dyYXBoIDQgawpicm93biBzbWlsaW5nIGV5ZXMKc2NpZW5jZS1maWN0aW9uIGFydCB3YWxscGFwZXIKZmx5aW5nIHRocm91Z2ggdGhlIHNreQpqYXBhbmVzZSBzaHJpbmUKcGluayBnbGl0dGVyIG1lcm1haWQgZ293bgp3aGl0ZSBzYXRpbiBnbG92ZXMKbnNmdwpzeW1iaW90ZQo0eDUgc3R5bGVkIHN0cmVldCBwaG90b2dyYXBoeQpsaWdodHJvb20gcHJlc2V0CndpdGggZ3JlZW4gZXllcwpzeW1wYXRoZXRpYwpzdGVmYW4ga29zdGljCm5pZ2h0bGlnaHQgc3R1ZHkKZXh0cmVtZWx5IGRldGFpbGVkIHBob3RvCnJvdW5kIHJvdW5kIHJvdW5kIG5vc2UKZWx2aXMKbG93IHF1YWxpdHkgdmlkZW8Kd2l0aGVyZWQKcml0dWFscwpjcnlpbmcgb25lIHNpbmdsZSB0ZWFyCmhlcmRzIGZpZ2h0aW5nCm1hbnRpcyBoZWFkIGdvZCB0ZW1wbGUKaW4gdGhlIHBhaW50aW5nIHN0eWxlIG9mIHJlbm9pcgoxODYwCmJyb29rbHluIGF0IG5pZ2h0IG5lb24gYm9hcmRzCnRvb2wgYmFuZAphbmFtb3JwaGljIDUgMCBtbSBsZW5zCmFycmkgMyA1IG1tIGNpbmVtYQpuZWFuZGVydGhhbCBwZW9wbGUKZGVjYWRlbnQgdGhyb25lIHJvb20KdmVyeSBzbWFsbCBsaXBzCm11Z2xlcgpvcmdhbmljIGJ1aWxkaW5ncwpjb250ZW1wb3JhcnkgYXJ0IGdhbGxlcnkKdWhkIGNoYXJhY3RlciBkZXRhaWxzCnNld2VyCmxhZHkgZ2FnYSBhcnRwb3AgYWN0IGlpCmNsb3RoZWQgaW4gYXJtb3IKZm9vdAp3aGl0ZSBhcHJvbgpsb25nIHdoaXRlIGNhcGUKc2Nob29sIGJhZwpjbG90aGVkIGluIHN0ZWFsdGggYXJtb3IKd2hpdGUgc2hpcnRzCndoaXRlIHN0b2NraW5ncwppY2Ugc2hhcmRzCmJyaXQgbWFybGluZyBzdHlsZSAzLzQKd2lyZXMgaGFuZ2luZwpjYXVzdGljIGxpZ2h0CmJsYWNrIHNtb2tlIHBhcnRpY2xlcwo4ayBvY3RhbmUgcmVuZGVyIHBob3RvcmVhbGlzdGljCmluIGEgc3R1ZGlvCnN1bm55IGRheSB3aXRoIGNsZWFyIHNreQphZSA4IDYKZWlpY2hpcm8gb2RhIHN0eWxlCmVuY3J1c3RlZCB3aXRoIGpld2Vscwo7d2Vla2x5IHNob25lbiBqdW1wIGlzc3VlIDE0CnJlYWdlbnRzCmhlYWQtdG8tdG9lCm9yYW5nZSBnbG93aW5nIGhhaXIKYXBwbGUgdHJlZXMKY3V0aWUKbG9uZyBkaXN0YW5jZSBzaG90CmNvbWljIGRyYXdpbmcKcmVtZWRpb3MgdmFybyB5IHNhbHZhZG9yIGRhbGkKbGlzdGVuaW5nIHRvIG11c2ljCjIwMTBzCmJlZXIgYm90dGxlCnNvdXRoIGVhc3QgYXNpYW4gd2l0aCBsb25nCmNoYXJjb2FsIGFydApkaXZheXRoIGZ5cgpzdHJpZGUKZ2xvd2luZyBhbWJlcgpkcmFtYXRpYyBjb25jZXB0IGFydAppbnN0YWxsYXRpb24gYXJ0CmRhcmsgcm9tYW5jZQpuOQo1ZApibGFjayBpcm9uIHN3b3JkCnBpbnRlcmVzdCBhbmQgc2h1dHRlcnN0b2NrCmdvbGQgY2xvdGgKYmx1ZSB0b25lZApqZWZmcmV5IHNtaXRoIGFuZCB5dmVzIGtsZWluCnVsdHJhIHNldHRpbmdzCmZpcnN0IHBlcnNvbiBndW4KZ3JlZyBydXRrb3dza2kgYW5kIHJvc3MgdHJhbgpyZWZsZWN0aW9uIGx1bWVuIG1hcHBpbmcKcHJvbW90aW9uYWwgcmVuZGVyCm9ncmUKZGV0YWlsZWQgM2QgcmVuZGVyCnZlcnkgaW1wcmVzc2l2ZQp3ZWFyaW5nIGEgbW9ub2NsZQp0aGlzdGxlCmp1bWJsZWQgdG9nZXRoZXIKY2hhcmFjdGVyIG1vZGVsIHNoZWV0CnNub3QKd2luZ3Mgc3ByZWFkCndlYXJpbmcga2luZ3MgY3Jvd24KbmdlIGRhcmsgZmFudGFzeQp2aW50YWdlIDE5NjBzIHByaW50CmFuYXRvbWljCmltYWdlcwptYWdpYyBsZWF0aGVyIGFybW9yCmRlZXAgbG92ZQpmdW5lcmVhbApyaWdvcm91cwpjb21wb3NlZApyb2IgcmV5IGFuZCBrZW50YXLDtSBtaXVyYQpkcmFtYXRpYyBzb2Z0IGxpZ2h0aW5nCmZveGVzIGFuZCBkZWVyCnNraW5kZW50YXRpb24Kc3VidHJhY3RpdmUgbGlnaHRpbmcKZ3JlZW4gcmFpbgprYXkgbmVpbHNlbgpjb21wbGV4IHJlZGhlYWQgYnJhaWRlZCBoYWlyCndhcm0gc2F0dXJhdHVyZWQgY29sb3JzCmNvdmVyZWQgaW4ga2V0Y2h1cAp2b2xjYW5vcwp2aXZpZCBsYW5kc2NhcGUKdGVycmFjZQpzbm93aW5nIG91dHNpZGUKbXlzdGVyaW91cyBhbmQgbHVjaWQKdHVtdWx0dW91cwpzaGFycCBkZXRhaWxlZCBmb2N1cwpmb3JtYWxpc20KYXMgdGhlIHN1biBzZXRzIG9uIHRoZSBob3Jpem9uCm1vcm5pbmcgc2hvdApoaWdobHkgZGV0YWlsZWQgYXJtb3IKc2xpZ2h0IGZyZWNrbGVzCmxhbmRzY2FwZXMKc3RldmUgd296bmlhawpuYXJyb3cgd2luZ3MgYmVoaW5kCmZyb250IGFuZCBjZW50ZXIKaW4gYSBjYXZlLiB1bmRlcmV4cG9zZWQKaHViYmxlIGltYWdlCmJvbGQgd2FybSBjb2xvdXJzCnllbGxvdyBhdXJhCjRrIHdpZGUgbGVuc2VzIHBob3RvZ3JhcGgKeW91bmcgbm9ibGUKcmF5IHRyYWNlIDRrCndvbmRlcm91cwphIGJyaWdodAp2ZXJ5IGRhcmsgd2l0aCBncmVlbiBsaWdodHMKdHJlbmRpbmcgb24gci90ZWNod2VhcmNsb3RoaW5nCm1vYmlsZSBzdGlsbCBmcmFtZS4gNGsgdWhkCmEgYnVzdGxpbmcgbWFnaWNhbCB0b3duCm1hY3JvIGxlbnNlCmRpZ2l0YWwgYXJ0IG9pbCBwYWludGluZwpyaXNpbmcgc21va2UKNTAgbW0gbGVucyBwaG90byBwb3J0cmFpdAp0cmlwcHkgYXJ0CmxhcmdlIGNsb3VkcyB2aXNpYmxlCndhdGVyY29sb3Igb24gY2FudmFzCmVwaWMgc2NpZW5jZSBmaWN0aW9uIGhvcnJvcgouaGlnaGx5IHJlYWxpc3RpYwo0ayBtb3ZpZSBzdGlsbApwcm9mZXNzaW9uYWwgY29ycG9yYXRlIHBvcnRyYWl0CmF3YXJkLXdpbm5pbmcgcG9ydHJhaXQKc2lnbWEgNTAwbW0gZi81CnNhdmluZyBwcml2YXRlIHJ5YW4Kb3Zlcmdyb3duIGZvbGlhZ2UKbGl0IHVwCm9uIGFsbCBmb3VycwplbWJhcnJhc3NpbmcKbWFsZXZvbGVudCBleHByZXNzaW9uCm1hc3RlcmZ1bCBwcmludC4gNGsKd2VhcmluZyBzbWFsbCByb3VuZCBnbGFzc2VzCnRhcnNpZXIKYXJ0c3RhdGlvbmhxCmhpZ2ggcGljdHVyZSBxdWFsaXR5CmhvcnJvciBwYWludGluZwpzbW9vdGggZGlnaXRhbCBhcnQKYWxleCByaWVzCnUgdHJlbmRpbmcgb24gYXJ0IHN0YXRpb24Kc3R1ZGlvIGdoaWJpbGkKbmVhciBhIGphcGFuZXNlIHNocmluZQpkb2luZyBzcGxpdHMgYW5kIHN0cmV0Y2hpbmcKaW4gYSBkYXJrIGZpZWxkCmRpZ2l0YWwgc2NyZWVuc2hvdApob2xkaW5nIGEgc2lsdmVyIGVsZWN0cmljIGd1aXRhcgpzaG9ydCBoYWlyIGN1dAp0aW55IHRoaW4gbXVzdGFjaGUKYnJva2VuIG5lb24gc2lnbnMKd2FzaGluZyBtYWNoaW5lCjE5OTBzIGJlZHJvb20KdmlldyBmcm9tIHRoZSBzdHJlZXQKY2luZW3DoXRpY2EKcmVsaXNoCmNsb3NlIHVwIGZvb2QgcGhvdG9ncmFwaHkKc2t5Ym94CjI0MHAKZm91ciBoYW5kcwpoYWxmIGJsdWUKaGFsZiAmIGhhbGYgaGFpcgpzdHJlZXR3ZWFyIGZhc2hpb24Kd2l0aCBzdGFycwpkaW0gbW9vbmxpZ2h0CnNpbXBsZSBsaW5lIGFydAptYXJrIHJ5ZGVuIGhpZ2hseSBkZXRhaWxlZApzaW5pc3RlciBhbWJpZW5jZQpkZWVwbHkgaHlwZXJkZXRhaWxlZApyZWFsaXN0aWMgbWVjaGFuaWNhbCBkZXRhaWxzCnBlbiBhbmQgaW5rIGRyYXdpbmcKc21va2luZyBjaWdhcnMKYmx1ZSBhbmQgb3JhbmdlIHBhbGV0dGUKb24gYSB3b29kZW4gdHJheQppbnRlbnNlIHNvdWwgcGVuZXRyYXRpbmcgZXllcwpzb3VsIHBlbmV0cmF0aW5nIGludmFzaXZlIGV5ZXMKbGl2IHR5bGVyCmFsZXNzYW5kcmEgYW1icm9zaW8KbWlsZXkgY3lydXMKYWNjb21wYW55IGNvcnkgY2hhc2UKaG9sZGluZyBib3cgYW5kIGFycm93CnRoZSBkZWNpc2l2ZSBtb21lbnQKcmV0cm8gc2NpLWZpCmRhcmsgZ29sZGVuIGxpZ2h0IG5pZ2h0CnVuaG9seSBjZXJlbW9ueQpsb2ZpIGFlc3RoZXRpYwppbiBhIHN1aXQKdmV4aWxsb2xvZ3kKbmllbHMgb3R0byBtw7hsbGVyCnZlcm5lciBwYW50b24KaW5mcmFyZWQgcGhvdG9ncmFwaHkKZGEgdmluY2kgc3R5bGUKYmx1ZSBhdXJvcmEKc2hlIGhhbGYgaHVtYW4gYW5kIGhhbGYgcm9ib3QKc3RhcmZpbmRlciBjaGFyYWN0ZXIKYXV0b21hdGVkIGRlZmVuY2UgcGxhdGZvcm0KaGVhdmVubHkgcmFwdHVyZQpldmVuaW5nIHN1bnNldAphd2VzdHJpa2luZwppbXBvc3NpYmx5IGRldGFpbGVkCmNnIGFydGlzdAp3aWxsCmluZmVybmFsIG55bXBoCmNvb2wgZHluYW1pYyBsaWdodGluZwprYXJlbCB0aG9sZQphIGdpZ2FudGljCndhcnBpbmcgdGltZSBhbmQgc3BhY2UKanVtcGluZyBmb3Igam95Cmxvbmcgb3JhbmdlIGhhaXIgZmxvYXRpbmcgb24gYWlyCnNtb290aCB2aXN1YWwgbGluZXMKY2d0cmFkZXIKaW4gdGhlbWUgb2YgYmxhZGVydW5uZXIgbW92aWUKbWFqb3IgYXJjYW5hIGNsb3RoZXMKcGF1bCBkZWxhcm9jaGUKaGlnaGx5IGRldGFpbGVkIGZhbnRhc3kgYXJ0CnBhcmFsbGVsIHVuaXZlcnNlCm1pZCBjZW50dXJ5CmNpbmVtYXRpYyBzaG90cwpwaG90byBzdGlsbApwb3ZlcnR5CnZpY3RvcmlhbiBlbmdsYW5kCmtpbmQgZXllcwphIGhhbmRzb21lCmJpc2hvdW5lbgppdCdzIG5pZ2h0CmRyZWFkbm91Z2h0CmdsYXplZApkeWVkIGhhaXIKZGFyayBhbmQgc3RhcnMgaW4gdGhlIGJhY2tncm91bmQKcGxhbnRzIGFsbG92ZXIKbml0aWQgaG9yaXpvbgpkcmFtYXRpYyBkZXB0aCBvZiBmaWVsZApkcmllZCBwYWxtdHJlZXMKZXBpYyBjb25jZXB0IGFydC4gd2FyaGFtbWVyIDQwawptYXggaGVhZHJvb20KdG9tIGJhZ3NoYXcuIG9pbCBwYWludGluZwphcmNoaXRlY3R1cmFsIHJlbmRlcmluZwpwcmV0dHkgY29sb3JzCmhhcnZlc3QKYSBodWdlIHJhZGFyCmEgaHVtYW5vaWQgbW9zcXVpdG8KaGlnaC1jb250cmFzdAppbnNpZGUgb2YgYSBkYXJrIGNhdmUKbmV3IHZlZ2FzIHN0eWxlCm1vZGVyYXRlIHNhdHVyYXRpb24KYSBsYWtlIGJldHdlZW4gbW91bnRhaW5zCnJ1YmJpc2gKbGFuZHNjYXBlIHBlcnNwZWN0aXZlCmVyaW4gaHVudGVyCmFuZ2VsaWMgcHJldHR5Cmx1c2ggdmFsbGV5CmRyYW1hdGljIGNvbnRyYXN0aW5nIGxpZ2h0CndpdGggd2lkZSBhbmdsZSBsZW5zCjE1IG1tCndhdGVyZmFsbCBmYWxsaW5nIGRvd24KZWRvdWFyZCBtYW5ldApwbGFuZXRhcnkgbGFuZHNjYXBlCnVuaGFwcHkKYSBtYW4gd2VhcmluZyBhIGJhY2twYWNrCmxvb2tpbmcgdGhyb3VnaCBhIHBvcnRhbApiYXNzIG11c2ljCmhhaXIgbGlrZSBmaXJlCmhpZ2ggcm9ja3MKZmFjZWJvb2sgcG9zdCAyMDEyCmFubmllIHN0ZWdnIGdlcmFyZApoZWFydC1zaGFwZWQgZmFjZQpzdWdhciBnbGlkZXIKY2FydG9vbiBpbWFnZQpyb21lIGJhY2tkcm9wCmhpcHMKc3RyZWFrcwphIG1vbnVtZW50YWwKMjBtbSBjYW1lcmEKYSBtdWx0aWRpbWVuc2lvbmFsIGNvenkgdGF2ZXJuCmRlcHRoIG9mIGZpZWxkIDhrCmhpaGdseSBkZXRhaWxlZAptZWRpZXZhbCBncmFwaGljCmJhc2hmdWwgZXhwcmVzc2lvbgpiYXNoZnVsCm1ldGFsbGljIHBhaW50CmNoYXJ0cmV1c2UgYW5kIG9yYW5nZSBhbmQgY3lhbgpjdWJpc20gc3R5bGUKc29mdC4gaGlnaCBxdWFsaXR5CmVwaWMgcG9zdGVyIGFydAphIHBlcnNvbiBzdGFuZGluZyBpbiBmcm9udCBvZiBhCm5lY2sgdmlzaWJsZQphIHBlcnNvbiB3aXRoIGEgcmFjY29vbiBoZWFkCm1ldGFsbGljIHNjYWxlcwppbiBhIGJhcgptZXRoIGhlYWQKbWMgZG9uYWxkcwpidXNoZXMgaW4gdGhlIGZvcmVncm91bmQKdmFyaWVkIHRyZWVzIGluIHRoZSBiYWNrCmEgcGhvdG8gb2YgYSBsYWtlIG9uIGEgc3VubnkgZGF5CmNvdmVyZWQgd2l0aCBwaW5rIG1hcnppcGFuCnRocmVlIG1pY2hlbGluIHN0YXJzCjhrIHJlbmRlcmluZwooKG1pc3QpKQpuYWlsIGFydAoxODQwcwpicmljawpmb2NhbCBsZW5ndGg6IDg1LjAgbW0Kb2YgYSBiZWF1dGlmdWwgZ29kZGVzcwpjb25jZXJuZWQgZXhwcmVzc2lvbgpmdW5ndXMgYW5kIHBsYW50cwpzZWN1cml0eSBjYW1lcmEgcGhvdG8KYmFja2dyb3VuZCBvZiBkaWdpdGFsIGdyZWVibGVzCmEgcG9ydHJhaXQgb2YgYSBicml0aXNoIG1hbgphIHBvcnRyYWl0IG9mIGEgbWFsZSBlbGYKbm9pc2UgdG8gdm9sdW1lCmNoYXJsZXMgc2lsbGVtIGxpZGRlcmRhbGUKYSBwb3J0cmFpdCBvZiBhIHdvbWFuCnBhbGUgZ3JleSBza2luCnZpY3RvcmlhbiBnb3RoaWMgbG9saXRhIGZhc2hpb24Kc2l0dGluZyBvbiBoaXMgdGhyb25lCmV0aGVyZWFsIHJhaW5ib3dzCmRyZXNzZWQgaW4gbGlnaHQgYXJtb3IKbmFycm93IHdhaXN0CmNpbmVtYXRvZ3LDoWZpYwpmcmFuayBmcmF6emV0YQp3ZWFyaW5nIHNhbXVyYWkgYXJtb3IKbmVvbiBtdXNocm9vbXMKbGF2YSByaXZlcnMKNTAgbW0gYm9rZWgKaHlwZXIgcmVhbGlzdGljIGRpZ2l0YWwgcGFpbnRpbmcKYXJtZWQgd2l0aCBlZGdlZCB3ZWFwb25zCnNvbmljIGxvb2tzIGxpa2UgaGUgaXMgc2hvY2tlZAppbnRlcmVzdGluZyBjYW1lcmEgYW5nbGUKaXJpZGVzY2VudCBjb2xvdXJzCjMwbW0gbGVucwpnb2xkIGJsYWNrIGFuZCBhcXVhIGNvbG9ycwphIHNlYW5jZQp3aXRoIGEgZmlndXJlIGluIHRoZSBiYWNrZ3JvdW5kCmZhY2luYXRpbmcgYW5kIGltcG9zaW5nCnBsYXlzdGF0aW9uIDEKZmVhdHVyZWQgb24gaWxsdXN0cmF0aW9ueAphIHNtYWxsCmludGVyc3RlbGxhciBzcGFjZSBzZXR0aW5nCmNvbWljcyBhY2N1cmF0ZSBkZXNpZ24Ka290byBubyBoYSBubyBuaXdhCm1hdG9rbyBzaGlua2FpCmFic3VyZGlzdCBhcnQKdGVhbCB0dW5pYwpoaWdobHkgbWljcm9kZXRhaWxlZApzdXBlciBoaWdoIGRlZmluaXRpb24KcGhvdG9ucwppbXBsb3Npb24KamFwYW5lc2Uga2FuamkKb24gYSBwbGF0ZQppbnRlcmRpbWVuc2lvbmFsIGxpZ2h0bmluZwpzaG91bGRlcgpzaWdpbApwZW5ueXdpc2UKY2F0YWxvZyBleGhpYml0aW9uCmJyaWdodCBzdW1tZXIgZGF5CmdyZWcgcnV0a293c2tpIGFuZCBtb2ViaXVzCmluc2lkZSBvZiBhIGNhcgptLmMgZXNjaGVyCjE4OTUKY2FyZXRha2VyCnRyZW5kaW5nIG9uIGFydHN0YXRpb246MwpiZXNwb2tlCnZpdmlhbiB3ZXN0d29vZAphbWF6aW5nIGNyYWZ0c21hbnNoaXAKZ3JleSBjb2xvciBzY2hlbWUKY29sb3JmdWwgY2l0eQpjb2xvcmZ1bCBleWVzCnRoZSBuZXRoZXJsYW5kcwpmaWxtIHN0aWxsIGZyb20gaGFycnkgcG90dGVyCmEgd29tYW4gaG9sZGluZyBhbiBvcmIKYSB3b21hbiB3YWxraW5nCmJlaGluZApwcm9wIGRlc2lnbgppbnRlcmlvciBvZiBidWNraW5naGFtIHBhbGFjZQpuYXRpb25hbCBnZW9ncmFwaGljIHBob3RvIGF3YXJkCmEyNCBmaWxtIGNpbmVtYXRvZ3JhcGh5CmVwaWMgY2hhcmFjdGVyIHBvcnRyYWl0CmJydXNoIHRleHR1cmUKcmVkIGxhc2VyCndpdGhvdXQgYmVhcmQKYnVybmluZyBoYW5kcwptYXR0ZSBzaGFycCBmb2N1cwphZGFtIHdlc3QgYXMgYmF0bWFuIDIwMjIKaGlwcHkKZWFydGh5IHRvbmVzCnNlcmlvdXMgbGlnaHRpbmcKZHJhbWF0aWMgYW10b3NwaGVyZQpjYW5vbiBlb3MgcjUKYm9jYWdlcwp0d2lzdGVkIHNoYXBlcwpkcmFwZWQgd2l0aCBob3Jyb3JzIGFuZCBzcGluZXMKaGVucmkgbW9vcmUgZ2lhbnQKanVnZW5kc3RpbCBiYWNrZ3JvdW5kCmFocmkgZnJvbSBsZWFndWUgb2YgbGVnZW5kcwpzdHVubmluZyBlbGVnYW50Cm1heWVyIHJlLWwKY3V0ZSBzaW5nbGUgYW5pbWFsCnNwb29reSBmb3Jlc3QKdmVjdG9yIHN0aWNrZXIKcG9zdC1hcG9jYWx5cHNlCnNwb3J0cyBjYXIKZnJvbSBhbGljZSBpbiB3b25kZXJsYW5kCnJveSB0aG9tYXMKd2hpdGUgcmFiYml0CmxhbmEgZGVsIHJleSBhbmQgem/DqyBrcmF2aXR6CmdpZ2VyIGluc3BpcmVkCnByb21ldGhldXMgKDIwMTIpCm1hbnkgYmVpbmdzIHdhbGtpbmcgYWJvdXQKbGFuZHNjYXBlIHBob3RvZ3JhcGh5IDRrCmFsaWVuIHBsYW50IGZyb20gYWxwaGEgY2VudGF1cmkKZnJvbSBob3Jpem9uOiB6ZXJvIGRvd24KY2FyZHN0b2NrCmFsdWNhcmQKZGV0YWlsZWQgZmFjZSB3aXRoIG1vdXN0YWNoZQpmNAphbWJlciBoZWFyZApmYWtlCmd1c3Rhdm8gZnJpbmcKZGVlcCBzZWEgZGl2ZXIKYW1vdXJhbnRoIGFzIGEgc3VwZXIgdmlsbGFpbgpsb29raW5nIG9mZiB0byB0aGUgc2lkZQptb2JpbGUgc3VpdApoaWdseSBpbnRyaWNhdGUKZHJpbmtpbmcgYSBjdXAgb2YgY29mZmVlCm1leGljYW4gZm9sa2xvcmUKY2N0diBjYW1lcmEgZm9vdGFnZQppbiB0aGUgYXVzdHJhbGlhbiBvdXRiYWNrCmhlYXZlbmx5IGNvbG9ycwpvcm5hdGUgZ29sZGVuIGJhY2tncm91bmQKc21hbGwgY2hlc3QKc2hvcnQgbGlnaHQgZ3JleSB3aGlza2VycwplbWJvc3NlZAphbiBhc3Ryb25hdXQgaW4gc3BhY2UKbmV3cyBmb290YWdlCmluIHRpbWUgc3F1YXJlCmJ1YmJsZXMgaW4gdGhlIGFpcgpidW5ueSBnaXJsCnRhcmFzIHN1c2FrCnBhc3RlbCBodWVzCmV4cXVpc2l0ZSBhbmQgaGFuZHNvbWUgd2luZ3MKY29uY2VwdCB3b3JsZApzb24gb2YgdGhlIG5pZ2h0CmNvbG9yIHNtb2tlCnJ1c3R5IGNvbXBvbmVudHMKaG9sZGluZyBhIGZsb3dlcgpsaWdodCBicm93biBwaWVyY2luZyBleWVzCmJsb25kZSBtZWRpdW0gaGFpcgpkYXJrIGZhbnRhc3kgbWl4ZWQgd2l0aCByZWFsaXNtCmFuY2llbnQgZWd5cHRpYW4gbXVyYWwKY2xvc2V1cCBwaG90b2dyYXBoCm5lby1jeWJlcnB1bmsKZXhxdWlzaXRlIG1hdHRlIHBhaW50aW5nCm1hZ2ljawp3aXRoIG92ZXJoZWFkIGNsb3VkeSEhISEhIHNraWVzCnBhcnRseSBzdW5ueQooZXhvdGljIGFydGlmYWN0cykKd2F0ZXIgZGFtYWdlCjEvMTAwMAp2b2x1bWV0cmljIGR1c3QgcmF5cwpzaG90IGZyb20gZmFyIGF3YXkKc3R1bm5pbmcgYXBwZWFsaW5nIGZpZ3VyZQpzdGFyZGVzdHJveWVyIGluIHRoZSBiYWNrZ3JvdW5kCnRoZSBkYXJrIGNyeXN0YWwKYW5hdG9taWNhbGx5IGNvcnJlY3QgaGFuZHMKZnJhZ21lbnRlZAp1bnJlYWwgb2N0YW5lIHJlbmRlcgp0aGUgamFiYmVyd29jawpjaW5lbWF0aWMgbGlnaHQgZWZmZWN0CmhpZ2hseV9kZXRhaWxkZWQKYW5nZWwgb2YgZGVhdGgKdGhpbiBpbnRyaWNhdGUgYXJ0IG5vdXZlYXUgZnJhbWUKMTd0aCBjZW50dXJ5IHBhaW50aW5nCmFydGdlcm0gcG9ydHJhaXQKYW5nbGUKY29taXggd2F2ZSBmaWxtcwpkZXRhaWxlZCBtb2lzdHVyZQp3ZWFyaW5nIGNyb3duIG9mIGJyaWdodCBmZWF0aGVycwpzdHJvbmcgYmx1ZSByaW1saXQKY3V0ZSBwYW50aWVzCmh5cGVycmVhbGlzdGljIHZmeCBzaW11bGF0aW9uCmluIGZyb250IG9mIHNwYWNlIHN0YXRpb24gd2luZG93CnRoZSB1bml2ZXJzZSBhbmQgZXZlcnl0aGluZwpqZWZmcmV5IGVwc3RlaW4KZGVlciBwb3J0cmFpdApmYWNlIGlsbHVtaW5hdGVkCnRyaWJhbCByZWQgYXRtb3NwaGVyZQpsYXJnZSBwdXJwbGUgZXllcwp2ZXJ5IHZlcnkgdmVyeSBwYWxlIHdoaXRlIHNraW4KYmxhY2sgY2FyCjJkIGRpZ2l0YWwgYXJ0Cm1hY2hpbmVyeSBhbmQgd2lyZXMKZGFyayBzd29yZCBpbiBhcmVzJ3MgaGFuZApzeW1tZXRyaWNhbCBmYWNlLiBiZWF1dGlmdWwgZXllcwphcm1hIDMKZmlnaHRlciBqZXRzCmd1bnNob3RzIGZpcmVkCnZpdmVjIGNpdHkKMjAwMAp5ZWxsb3cgdGludApiM2QKY3Jlc3Rpbmcgd2F2ZXMgYW5kIHNlYWZvYW0KYWZyby1wc3ljaGVkZWxpYQptYXN0ZXJzdHJva2UKc2hvd3BpZWNlCmNyZWFtIG9mIHRoZSBjcm9wCnBpw6hjZSBkZSByw6lzaXN0YW5jZQpmZWF0IG9mIGFydGlzdGljIGFjaGlldmVtZW50CmJleW9uZCByZXByb2FjaAp3aXRob3V0IGZhdWx0CjNkIHN0aWxsIGRlc2lnbnMKYWJzdHJhY3QgZm9ybXMgYW5kIHNoYXBlcwphYnN0cmFjdCBzY2VuZSBkZXNpZ24KZGFyayBncmVlbiBjb2xvciBzY2hlbWUKYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UgcHJpbmNlc3MKcGhpbCBub3RvIGFuZCBqYW1lcyBqZWFuCmFydWJhCnJlYWR5CmhpZ2gtZW5kIGNpdmlsaXphdGlvbgpvbnNlbnMKc3RhcnMgaW4gc3BhY2UKb2ZmLXJvYWRpbmcKYXQgdGhlIG1vdW50YWlucyBvZiBtYWRuZXNzCndlYXJpbmcgc3RyaXBlIHNoaXJ0CmplYW4gYW5kIG11bHRpY29sb3Igc2hvZXMKYXR0YWNrIG9uIHRpdGFucwpjb252ZXJ0aWJsZQp6b29tIGJsdXIKc3RhbmRpbmcgaW4gYW4gYXJlbmEKMTkyNAp2aXJ0dWFsIGVuZ2luZQphdXR1bW4gbmlnaHQKbWFuaWN1cmVkIHNvbGFycHVuayBncmVlbmVyeQpoaWdoLXF1YWxpdHkgcmVuZGVyCmF2YXRhciB3aXRoIGEgYmxvbmQgaGFpcgpkZXRhaWxlZCBoaWdoIGNvbnRyYXN0IGxpZ2h0aW5nCmF2b2NhZG8gYXJtY2hhaXIKc2lsa3MKbWFwYm94CmNvbG9yZnVsIHZpdmlkIG9jdGFuZSByZW5kZXIKYnJpZ2h0IHNpZ25hZ2UKc3RpbGwgZnJvbSB0diBhbmltZQphenVyaXRlCmF0bW9zcGVyaWMKcm9ib3QgbHVya3MgaW4gdGhlIGJhY2tncm91bmQKZ3VpIGd1aW1hcmFlcwpjdXRlIHJhdmUgb3V0Zml0Cm1vZGVybiBzY2ktZmkgYW5pbWUKYmFsaQpoYWppbWUga2F0b2tpCmRvbiBibHV0aCBhbmltYXRpb24KYmFyYmllIG9yIGtlbiBkb2xsCm5lb24gY3Jvc3MKcGVhY2hlcwpiYXRtYW4gcG9ydHJhaXQKYmF0bWFuIGFzIGEgem9tYmllISEhCnN1cnJlYWxpc20gcGFpbnRpbmcKd2FsdGVyIHdoaXRlIGFzIGJhdG1hbgpiZWF1dGlmdWwgYmx1ZSBhcm1ldCBoZWxtZXQKc3RhbmRpbmcgb3ZlciBhIGZhbGxlbiBmb2UKYnVybmluZyBwdWxzZQpvcGVuZWQgbW91dGgKY2hlcnJ5IGJsb3Nzb20gYmFja2dyb3VuZAp0aGUgamV0c29ucwpoYWxmIHN1Ym1lcmdlZApzaGFtYW5pc3RpYyBkYXJrIGJsdWUgY2xvdGhlcwpjb3ZlcmVkIQpzb2Z0IGxpZ2h0aW5nIHNvbGQgYXQgYW4gYXVjdGlvbgpzb2xkIGF0IGFuIGF1Y3Rpb24KcmVhbGlzdGljIGludHJpY2F0ZSBjb25jZXB0IGFydApyb21hbnRpYyBzdHlsZQp2ZXJ5IHN0cm9uZyBhbmQgbXVzY3VsYXIgbWFuCmJlYXV0aWZ1bCBlbHNhCmdvcmdlb3VzIHN1bmxpZ2h0IGFuZCBzaGFkb3dzCnBvd2VyZnVsIG1hZ2ljCm5ldyB5b3JrIGFsbGV5d2F5CmJlYXV0aWZ1bCBmZW1hbGUgd2l6YXJkCndpdGggd2luZ3MKYmlvcHVuayBhcnQKaW50cmljYXRlIHRyYW5zaHVtYW4KY2FsbSBmYWNlCmR1c3R5IHJvY2sgaW4gYmFja2dyb3VuZAp0aGUgZmx5aW5nIGR1dGNobWFuCmFybSB3cmVzdGxpbmcKYmlnIG1vdXRoCnZpbnRhZ2UgcG9sYXJvaWQgcGhvdG8KaW4gc3VtbWVyCmJydXRhbCBiYXR0bGUKY29sb3IgY29ycmVjdGlvbgptb3Rpb24gZ3JhcGhpY3MKb2xkIHRyZWVzCmJlYXZpcyBhbmQgYnV0dGhlYWQKaGVhdmVubHkgY2xvdWRzCmJlZXBsZSBtYXN0ZXJwaWVjZQptYXllYgphcm91bmQgdGhlIHRocm9uZQpiZWdpbm5pbmcgb2YgYXV0dW1uCm1vbWVudCBjaW5lYmxvb20gZmlsdGVyCmJldHdlZW4gaGVhdmVuIGFuZCBoZWxsCmJld2FyZSB0aGUgamFiYmVyd29jawpiaWcgYnVkZ2V0IG1vdmllIHNjZW5lCnRoZSB0aW1lIG9mIGRheSBpcyBkdXNrCjRrIGFuaW1lIHdhbGxwYXBlcgpwaG90b2dyYXBoaWMgc3RpbGwKYmVhdXRpZnVsIGZhY2lhbCBzeW1tZXRyeQpnb3JnZW91cyBzeW1tZXRyaWNhbCBmYWNlCmJpb21lY2hhbmljYWwgYXJtb3IKbWljaGVsaW4gNSBzdGFyCmdlb3JnZXMgZGVzdmFsbGnDqHJlcwpsb29raW5nIG1lbGFuY2hvbHkKaGVhZGNyYWIKaGFyZCBicnVzaAp0b3kgc3RvcnkKZ29vZCBzaGFkaW5nCmJsYWNrIGRvZwpibGFjayBtb3VudGFpbnMKcGFpbnRlZCBtYXJibGUgc2N1bHB0dXJlcwpibHVleQphbmRyZSBicmV0b24KYm9iIG1hcmxleQptYXJpZSBzcGFydGFsaSBzdGlsbG1hbgpjYXRoZXJpbmUgbm9saW4Kd2hpcApib29rIG9mIGtlbGxzCmhhcHB5IHNtaWxpbmcKeWVsbG93IHgtbWFuIGNvc3R1bWUKYm9yaXMgam9obnNvbiBhcyByaWNrIHNhbmNoZXoKYm9yaXMgam9obnNvbiBhcyB3b2x2ZXJpbmUKbmlrb24gbWlycm9ybGVzcwpqYXNvbiBtYW5sZXkKZGlzdGluZ3Vpc2hlZAppbiBhcnQgbm91dmVhdSBzdHlsZQpzb2xhcnB1bmsgY2l0eQpodWdlIGZhY3RvcmllcwpzYXBwaGlyZXMKbWFnaWMgZmxhbWVzCmJ1bGJhc2F1cgp0YWxsIG1hbgpidXN5dG93bgp2b2x1bWV0cmljIGxpZ2h0IHdhdGVyCmJhdCBjbGF3cwpjYW1pbG8gZ2MKc2lsdmVyIGFnZSBvZiBjb21pY3MKY2FyIG9uIGZpcmUKc3RyZWV0IGFydDoyCnJ1YmJlciBob3NlIGFuaW1hdGlvbgpjb25jZXB0IGRpZ2l0YWwgYXJ0Cmdvcmdlb3VzIHZvbHVtZXRyaWMgbGlnaHRpbmcKdXBjbG9zZQppbiBhIGNvbG9yZnVsIHRlbnQKY2VsbHVsYXIgYXV0b21hdGEKb24gYSB0cmVlCnByb2xpZmljCnNreXNjcmFwZXJzIGluIHRoZSBiYWNrZ3JvdW5kCnllbGxvdyBpbmZyYXJlZApjaW5lbWF0aWMgYmF0dGxlCmNoZXNoaXJlIGNhdCBkcmlua2luZyB0ZWEKZ29sZGVuIHN0ZWFtcHVuayBjaXR5IGF0bW9zcGhlcmUKdXBsaXQKZGVhZCBwbGFudHMgYW5kIGZsb3dlcnMKY2hyaXMgZXZhbnMgYXMgYSBib2R5YnVpbGRlcgptYXJpbyBoYXQKY2hyaXN0aW5hIGFwcGxlZ2F0ZQpwbGF5Ym95IHN0eWxlCm9wZXJhdGluZyByb29tCmNocmlzdG9waGVyIHdhbGtlbgpjaHJvbWUgYW5kIHZpc2NlcmEgYW5kIGJvbmUKY29zdHVtZSB3ZWlyZCBjcmVlcHkKb2ZmIHB1dHRpbmcKaGVhZCBhbmQgYm9keQpzdW5mbGFyZXM7YmFjayB0byBjYW1lcmEKZm9jdXMgb24gdHdvIGFuZHJvaWRzCmdhcmRlbiBwb25kIHNjZW5lCnNjYXR0ZXJlZCBnb2xkZW4gZmxha2VzCmNpcmNlCnNtb2tpbmcgb3V0c2lkZQpqZW5uYSBjb2xlbWFuCnRlbXBsZSBpbiB0aGUgYmFja2dyb3VuZAp6dXJiYXJhbgp2b2d1ZSBtYWdhemluZSBlZGl0b3JpYWwKcGxhc3RpY2luZSBtb2RlbHMKbm90aG9mYWd1cwp3aWRlIGxlbnMgc2hvdApyZWNsZWN0aW9ucwpvdXRsaW5lZApjb21lZGlhbiBpcyBmdW5ueQpwZXJmb3JtaW5nIHRvIGRlYWQgc29sZGllcnMKbG9vayBhdCBhbGwgdGhhdCBkZXRhaWwKc2hpcHBpbmcgZG9ja3MKYmxhY2sgYW5kIG9yYW5nZQptaWNoaWdhbgphbmdlbCBrbmlnaHQgZ2lybApzdHlsZSBhcyBuZW5kb3JvaWQKaW5mcmFyZWQgYW1iaWVudCBsaWdodAphbGllbiBmZWF0dXJlcwpjb3J0YW5hCmNvc21pYyBjb2xvcmZ1bCB1bHRpbWEgbW9vbmdhdGUKcGluZQplbmhhbmNlZCBsaWdodGluZwpjcmF6eSByYWNlciBzcGlubmluZwpidXJub3V0CnNtb2tleSB0aXJlcwpjbGFzc2ljLWN1bHQtY29taWMtc3R5bGUKaGFuZCBkcmF3biBzdmcKdGhlIHJvb3RsZXNzIGdvZCBvZiBsb3N0IHRoaW5ncwpzb2ZpYSBjb3Bwb2xhCmNyb2F0aWFuIGNvYXN0bGluZQpsZWFndWUgb2YgbGVnZW5kcyBjaGFyYWN0ZXIKd29ybGQgb2Ygd2FyIHNwYWNlc2hpcHMKY3VyaW9zaXR5Cmthd2FpaSBzdHlsZQp3aGl0ZSBnaXJsCmN1dGUgY2FyYWNhbApkcmFnb24gc2tpbiBiYWNrZ3JvdW5kCm5lb24gZWxlY3Ryb25pYwpoaWdobHkgZGV0YWlsZWQgYW5kIHJlYWxpc3RpYwpzY2ktZmkgc3BhY2UgZ2FtZSBhcnQKZHluYW1pYyBjaW5lbWF0aWMgbGlnaHRpbmcKMjhtbSBzY2FsZQpkZGxjCmRpc25leWxhbmQKam9uYXRoYW4gemF3YWRhCmRtdCByZWFsbQpyZWFkaW5nIGFuIGV2aWwgZGVtb25pYyBib29rCmZvcmJpZGRpbmcgc3Bpcml0ISEKaG9sZGluZyBhIHdoaXAKYWtpcmEgYWVzdGhldGljCmRhbGkgc3R5bGUKaGlnaGx5IGRldGFpbGQKZGFuYSBzY3VsbHkKbGlnaHRiZWFtcwphcnQgZGVjbyBwb3N0ZXIKYmxhY2sgZmluZSBsaW5lcyBvbiB3YXJtIGJyb3duCmdyYW5kIGxpYnJhcnkKb3Zlcmdyb3duIHdpdGggdmluZXMKcmVncmV0CmRhcnRoIHZhZGVyIGhlbG1ldAptdXNpY2FsCm5lb24gaW5jCnVwc2NhbGVkIHRvIDRrCmJyYXppbGlhbiBmbGFnCm5pZ2h0bGlmZQpjaHJpcyBiYWNoYWxvCmRlYXRoIG1ldGFsIGFsYnVtIGNvdmVyCmRlZXAgZGFyayBtb29keSBmb3Jlc3QKY2hpbm9pc2VyaWUgcGF0dGVybgpkZXRhaWxlZCByZW5kZXJpbmcKcmVkIGJyb3duIGFuZCBncmV5IGNvbG9yIHNjaGVtZQpiZWF1dGlmdWwgc29mdCBzaWxreSBkcmVzcwpuaWdodCBhdG1vc3BoZXJlCnN0b3JteSBhdG1vc3BoZXJlCm1lZGlldmFsIGFnZXMKamFjayBzcGFycm93CmluZm9ybWF0aXZlIGdyYXBocyBhbmQgZGlhZ3JhbXMKZGFuZGVsaW9ucwpsaWdodCBzbm93CmNyaW1pbmFscwpsZWFndWUgb2YgbGVnZW5kcyBjaGFyYWN0ZXIgYXJ0CmRpYXBlciBkaXNwb3NhbCBmYWN0b3J5Cm92ZXJmbG93aW5nCmZ1bmtvIHBvcOKAnQpiYWxlbmNpYWdhIGZhc2hpb24KZGllc2VscHVuayBub3JpbHNrIGNpdHkKYWVyb3BsYW5lCmJlYXV0aWZ1bCBibG9uZGUgd29tYW4KZ3VuIGFydCByZWZlcmVuY2UKZGlydCB0ZXh0dXJlCmRpcnR5IGhhcnJ5IHBvdHRlcgpzdXJyZWFsIGRyZWFtc2NhcGUKZmFpcnl0YWxlIGFydHdvcmsKZG9ncyBwbGF5aW5nIHBva2VyCnNlZHVjdGl2ZSBnYXplCmRvbmFsZCBnbG92ZXIKNjVtbQpwb3N0IGFwb2NhbHlwdGljIG5ldyB5b3JrCmRvbmFsZCB0cnVtcCBpbiBmb3J0bml0ZQpzdHlsZSBvZiBsYWR5IGZyaWVkYSBoYXJyaXMKZWF0aW5nIGEgY2hlZXNlYnVyZ2VyCnN0b25ld29yawoyLjM1OjEgcmF0aW8KZ2FtZSBjb3ZlciBhcnQKcmVhbGlzdGljIGZhbnRhc3kgcmVuZGVyCnJ1YmJlcnkKdGhhdCBsb29rcyBsaWtlIGEgZHJhZ29uZmx5CnRoYXQgaGFzIHRoZSBmb3JtIG9mIGEgZHJhZ29uZmx5CmFuaW1lIGZpZ2h0CnJwZ19wb3J0cmFpdApzaGFyZHMgb2YgbWVyY3VyeQpzbW9vdGggc2hhcGVzCmR1a2UgbnVrZW0gYXJ0IHN0eWxlCnNwYWNlc2hpcCBoYW5nYXIKY3liZXJwdW5rIGxvb2sKbWF5YSBhbGkgc29yY2VyZXNzCnZpbGxhZ2VyCihoaWdoIGNvbnRyYXN0KQp3aGl0ZSByb3NlcwpkdXRjaCBzdHlsZQp1bmRlciByYWluCmR3YXluZSBqb2huc29uIGFzIHRoYW5vcwp3ZWFyaW5nIGEgc2tpcnQKaGlnaCByZXMgcmVuZGVyCnBob3RvZ3JhcGhzCndoaXRlIGZvZyBwYWludGluZwpzbm93eSBkYXkKYXJjaGVvbG9neQplaW5zdGVpbgplbCBjaGF2byBkZWwgb2Nobwpnb2xkZW4gcmF0aW8gY29uY2VwdAoxOTgwcyBmYW50YXN5IGFydAphcnQgbm91dmVhdSB0YXJvdCBzdHlsZQplbGxlIGZhbm5pbmcgYXQgbmlnaHQKd2VhcmluZyBhIGJsYWNrIHN3ZWF0ZXIKaW4gYSBkb2pvCm9jdGFuZSByZWRzaGlmdApsaXZlIGNvbmNlcnQKcHJvbW8gbWF0ZXJpYWwKc3RhZ2dlcmVkIGRlcHRoKQplbW1hIHdhdHNvbiBhcyBoYXJyeSBwb3R0ZXIKZnJvbSBsZWdlbmQgb2YgemVsZGEKYXJtcyBmb2xkZWQKbWFkIGdyaW4Kc29jY2VyIGJhbGwKYmlnIG11c3RhY2hlCmVtbXkgcm9zc3VtCmRpYW1vbmQgdGV4dHVyZQphbmdlbCBzdGF0dWVzCmVuZCBvZiBodW1hbml0eQoyMDQ1CmdyYXBoIGRlc2lnbgpkJmQgY2hhcmFjdGVyIGNvbW1pc3Npb24KZG9taW5payBtYXllcgplcGljIGdhbWUKZXJlbiB5ZWFnZXIKc291dGggcGFyayBzdHlsZQplcmluIG1vcmlhcnR5CmV0aGlvcGlhbiBjaXZpbCB3YXIKZGV0YWlsIGZhY2UKYnVybmluZyBpbiBoZWxsCnJlYWRpbmcgbm9vawptaWxpdGFyeSBlcXVpcG1lbnQKdHJlbmRpbmcgb24gYXJ0bGlzdApmYWlyeSBwcmluY2VzcwpzdWJtZXJnZWQgdG8gd2FzdGUKa2luZ2RvbSBoZWFydHMgMwpkYWQKbGlnaHQgZW1pdHRpbmcgZnJvbSBmaW5nZXJ0aXBzCm9ubG9va2VycwpmYW50YXN5IG1tbwpuYXRpb25hbCBnZW9ncmFwaWMKc29sYXIgZmxhcmUgdW5yZWFsIGVuZ2luZQpteXRoaWMgaXNsYW5kCmZhdCBiYXRtYW4KZmF0IGJ1Z3MgYnVubnkKZmF5ZSB2YWxlbnRpbmUKZW1vdGljb24Kbm8gbG9uZyBuZWNrCm9uZSBzdWJqZWN0CnNoYWRvd3kgY2FzdGxlIGJhY2tncm91bmQKb3Zlcmdyb3duIGx1c2ggcGxhbnRzCmhpZ2ggZGVmaW5pdGlvbiBhcnQKY29uc3BpcmFjeSB0aGVvcnkKZmlnaHRlciBwaWxvdCBpbiB0aGUgY29ja3BpdApkYXktZ2xvIGNvbG9ycwpmYWNlcyBsb29rIGF0IGVhY2ggb3RoZXIKYnVybmluZyBmaXJlCnRpbHRlZCBjYW1lcmEgYW5nbGUKbGFyZ2Ugdmlld3NjcmVlbnMKZmlyZSBlbWJsZW0KZmlyZW1hbgpqYW1haWNhbgpmbGFzaCBnb3Jkb24KZ3JleSBhbGllbnMKZmxhdCBlYXJ0aAp0cmFuc2Zvcm1lcnMgYXJtYWRhCmVtaXR0aW5nIGxpZ2h0IG9ybmFtZW50cwpkdWxsIHJlZApmb29kIGFkdmVydGlzZW1lbnQKZm9yZXN0IGF0IG5pZ2h0Cmdsb3dpbmcgbGVhdmVzCmZvdW5kIHBvbGFyb2lkIHBob3RvCmZyYW5rIG9jZWFuCmZyZWRkaWUgbWVyY3VyeQpyYXZpbmUKYnJvb2tseW4Kc3Bpcml0dWFsaXR5CmxpZ2h0IGdyZXkgaGFpcgpmdWxsIGJvZHkgcGljdHVyZSBvZiBhIG1hbGUgbW9uawpiYW5kYWdlIG9uIGFybXMKd2hpdGUgbG9uZyBiZWFyZApkYXJrIGJsdWUgbGlwc3RpY2sKcGlsbGFycyBvZiBpY2UgYmFja2dyb3VuZApqYW1lcyBqZWFuIGFuZCBjbHlkZSBjYWxkd2VsbApzaGUgaXMgYXBwcm9hY2hpbmcgaGVhdmVuCm1hbGUgaG9sb3NtaXRoCnN0ZWFtcHVuay1lc3F1ZSEKY3VydnkgYWNjZW50dWF0ZWQgYm9vdHkKbWVjaGFuaWNhbCBhcm0KYmlnIGJvb3R5CnNoZSBoYXMgZmlyZSBwb3dlcnMKZnVsbCBwb3J0cmFpdCBvZiBlbGVtZW50YWxpc3QKcmVkIGFuZCBibHVlIGdhcm1lbnRzCmJyYXNzIGJyYWNlbGV0cwpjbGFzc2ljYWwgcm9iZXMKcmVkIHdhaXN0LWxvbmcgaGFpcgp3ZWFyaW5nIHNob3J0cwpmdXR1cmlzdGljIHJvYm90CmZ1dHVyaXN0aWMgYmF0dGxlIHRhbmsKZnV0dXJpc3RpYyBjeWJlcnB1bmsgY2l0eQp3YWxraW5nIHRocm91Z2ggaGVsbApnYWwgZ2Fkb3QgYXMgaGFybGV5IHF1aW5uCm1vamFuZwptb2RkZWQKYnVpbGQgaW4gYSBmb3Jlc3QgbmVhciBvZiBhIGxha2UKZ2FtaW5nIHRvaWxldApoaWdoIGNsaWZmCnplbiBuYXR1cmFsIGJhY2tncm91bmQKZ2VuZ2FyCmdlb3JnZSBjbG9vbmV5CmZ1bGx5IGJvZHkgcGhvdG8Kc2NyZWVuZ3JhYgp5ZW5uZWZlcgpmbGFtaW5nIGdyaW0gcmVhcGVyCm1vdG9rbyBrdXNhbmFnaQpjb2x1bW5zCmxvbmcgbWFuZQpnaWdlciBhcnQKZ2lsbGlhbiBhbmRlcnNvbgpnaW9ybm8gZ2lvdmFubmEKMTd0aCBjZW50dXJ5IGV1cm9wZWFuIGZpbmUgYXJ0CmdpcmwgYXQgYSBmYXNoaW9uIHNob3cgaW4gaGVsbApwdgpwb29sc2lkZQpnbGFpdmUKZXhwZXJ0CmdvbGQgZWFycmluZwpnb2QncyBjcmVhdGlvbgp3ZWFsdGgKZHJhZ29uYmFsbApnb2t1IGluIHJlYWwgbGlmZQpuZW9uIG9yYW5nZQpzaWx2ZXIgaW5zZWN0IGxlZ3MKaCByIGdpZ2VyIHN0eWxlCnRlcnJvciBnbG93Cmdvb3NlYnVtcHMgYm9vayBjb3ZlcgpvaWwgYW5kIGFsaWVuIG9uIGNhbnZhcwplYXJseSBkYXduCmRhcmsgb2lsIHBhaW50aW5nCmdvdGhpYyBjYXN0bGUKa2lubW96YSEKaWRvbG1hc3RlcgptaW5pbWFsaXN0IGJhY2tncm91bmQKYXJ0aXN0IGFydGdlcm0gaSBhbmQgd2xvcApjb29sIHRvbmVkCmxpZmUgbGlrZSBwbGFudHMKZHJlYWRzCmdyZWcgcnV0a293c2tpIHBhaW50aW5nCmdyZWVuIHRpbnQKZ3JvdW5kIGxldmVsIHNob3QKYmFuZCBwcm9tbyBwaG90bwpydW1pa28KZ3VpbHQKZ3VzIGZyaW5nCmFycmFraXMKZ3V5IGZpZXJpIGluIHN0YXIgd2Fycwphc3RvbmlzaGluZyBiYWNrZ3JvdW5kCnB1cnBsZSByYWluCnN1bmxpZ2h0IHRocm91Z2ggd2luZG93cwpzdXBlciBjb29sCmdhbWUgZm9vdGFnZQpjaW5lbWF0aWMgYnVzdCBwb3J0cmFpdApwb3J0cmFpdCBibGFjayBhbmQgd2hpdGUKaW5zdHJ1bWVudApob2xkaW5nIGEgcmVkIGxpZ2h0c2FiZXIKZGV0YWlsZWQgNGsgaG9ycm9yIGFydHdvcmsKY29tcGxleCBzeXN0ZW0gb2Ygb3JkZXIKdHJlZG5pbmcgb24gYXJ0IHN0YXRpb24KMTk4MHMgbWV0YWwgYXJ0d29yawpjb21pYyBib29rIGNvdmVyIHN0eWxlCmZyaXp6eSBoYWlyCmhlYXZlbiBvbiBlYXJ0aApyb2JvdCBnaXJsCmFuY2llbnQgd29ybGQKdGhlIHRoZW1lIG9mIGFsaWNlIGluIHdvbmRlcmxhbmQKaW50ZXIgZGltZW5zaW9uYWwgdmlsbGEKZGVhdGgga25pZ2h0CmVsZWdhbnQgaGlnaGx5IGRldGFpbGVkCmhlcmEKZ290aGljIGZhbnRhc3kgYXJ0CmZhbnRhc3kgcGFsYWRpbgpndXl2ZXIgZGFyayBoZXJvCndlYXJpbmcgYW4gYXByb24KaGlnaCBwcmllc3Rlc3MgdGFyb3QgY2FyZApzYW1kb2VzYXJ0cwpyZWQgYW5kIGJsdWUgbGlnaHRpbmcKcmljaCBhdG1vc3BoZXJlCmhpZ2hseSByZWFsaXN0aWMgcGhvdG8KaWxsdXN0YXRpb24KZW1hY2lhdGVkCnBhdHJpY2sgYmF0ZW1hbikKaHVtYW4gZmlnaHRlcgpodW1hbiBhbmQgZHJhZ29uIGZ1c2lvbgpibGFjayBob2xlcwpodW1hbiBza2VsZXRvbgphbmltYWwgZmFjZQpzcGxlbmRpZApnb2xkZW4gZmxvd2VycwptLncga2FsdXRhCmthcm9sIGJhayB1aGQKc2VsZi1wb3J0cmFpdAppIHdva2UgdXAgaW4gcGllY2VzCnRpbWUgaXMgcnVubmluZyBvdXQKY3liZXJwdW5rIHRlZW5hZ2VyIGJlZHJvb20KaV81NTg5LmpwZWcKZ29yZ2VvdXMgM2QgcmVuZGVyCnRlbnRhY2xlIG1vbnN0ZXIKMTAgYml0IGNvbG91cgpvdmVyIHdhdGVyCnNoaXBzIHdpdGggc2FpbHMKaW1hZ2UgY29taWNzCmltYWdlIGZyb20gYWZhcgppbWFnZXMgb24gdGhlIHNhbGVzIHdlYnNpdGUKdGVjaHdlYXIgY2xvdGhlcwpzdXBlcndpZGUgc2hvdApsdW5hcHVuawpvbmUgYSBkZW1vbi1saWtlIGNyZWF0dXJlCmF3aW5nYXdhdApsdWNhc2FydHMKaW5kdXN0cmlhbCBtYWNoaW5lcnkKdWhkIDRrIGltYWdlCnNoYWRvdyBvdmVyIGlubnNtb3V0aAppbnNpZGUgYSB0YXZlcm4KZmFudGFzdGljIHZlbmRvciBpbnRlcmlvcgppbmRvb3Igc2NlbmUKaW5zaWRlIHRoZSB0cmFpbgpsaWdodCBzaGFmdAptYXJibGVkIGNvbHVtbnMKc21hbGwgd2luZG93cwp3ZXRwbGF0ZSBwaG90b2dyYXBoeQppbnRyaWNhdGUgYmVhdXR5CndpbGRsaWZlIGlsbHVzdHJhdGlvbgpzdHJhbmdlIGZsb3dlcnMKY291bnRlcgppc2FhYyBhc2ltb3YKaXNsYW5kIGZsb2F0aW5nIGluIHRoZSBza3kKaXNvbWV0cmljIDNkIGZhbnRhc3kgdHVydGxlCmNoaWJpIHByb3BvcnRpb25zCmJpcmNoCnBzeWNoZWRlbGljIGludGVyY29ubmVjdGlvbnMKY3liZXJuZXRpYyB3ZWJzCmdhbGFjdGljIGRyZWFtY2F0Y2hlcnMKYnVybGVzcXVlCndhbGtpbmcgb3V0IG9mIGZsYW1lcwpiYWtpbmcgYXJ0d29yawpldmVudApheWFuYW1pCmphbWFpY2EKamFtZXMgamVhbiBhcnR3b3JrCm5vbi10cmFkaXRpb25hbCBhdmFudC1nYXJkZQorODEgbWFnYXppbmUKanVsZXMganVsaWVuCmphcGFuZXNlIGtpbW9ubwpibHVlIGFuZCBwaW5rIGFjY2VudHMKM2Qgc2N1bHB0CmplZmYgZ29sZGJsdW0KaG9sZGluZyBhIHdhbmQKc21pbGluZyBjb25maWRlbnRseQpkcmVzc2VkIGFsbCBpbiBibGFjawptYWkgeW9uZXlhbWEKdmlkZW8gZ2FtZSBpY29uIGRlc2lnbgpibGFjayBzaGlydCB3aXRoIHJlZCBzdGFyCm1peGluZyBkcmlua3MKamltbXkgbmV1dHJvbgpqb2UKc3RhciB3YXJzIHBvc3Rlcgpjbm4gbmV3cyBmb290YWdlCm1vbmV0IHBhaW50aW5nCnBob3RvIGlsbHVzdHJhdGlvbgp1LnMuIG5hdGlvbmFsIHNlY3VyaXR5IGFkdmlzb3IKZnVubnkgZmFjZQpqb2huIHdheW5lCjg0bW0pCmhvbGRpbmcgYXhlCmRvbWlubyBtYXNrCmxvbmcgc3RyYWlnaHQgYmxhY2sgaGFpcgpoYW5naW5nIGZyb20gd2hpdGUgd2ViCmF0IGEgYmFyCm1hc2h1cApqdXJnZW4ga2xvcHAKbGl2ZXJwb29sIGZvb3RiYWxsIGNsdWIKcGV0ZXIgbW9yaGJhY2hlcgpqdXN0aW4gYmllYmVyCmtha3lvaW4KcmVuZGVyZWQgaW4gcmVuZGVybWFuCsaSLzUuNgpwcm9mZXNzaW9uYWwgcGhvdG9zaG9vdGluZwptYXN0ZXJwaWVjZSA0ayBkaWdpdGFsCmthd2FpaSBjYXQKZWF0aW5nIG5vb2RsZXMKc2lsdmVyIGxvbmcgaGFpcgo4IGsgLQpsYXJnZSBncmVlbiBleWVzCnBvbnlvIGhheWFvIG1pdGF6YWtpCnByb2Zlc3Npb25hbCBpbWFnZQpkZXRhaWwgc3R1ZGlvIHF1YWxpdHkgbGlnaHRpbmcKZGVyZWxpY3QgaG91c2UKZWRpYmxlCnRyZWUgd29vZGxhbmQgYXRtb3NwaGVyZQpuaW5lIHRhaWxzCmtpdHQKbGlnaHRib3gKa25pZ2h0cyB0ZW1wbGFyIGluIGEgc3BhY2Ugc3VpdApyZWQgYW5kIGdyZWVuIGxpZ2h0aW5nCnRoZSBmYWNlIGVtZXJnZXMgZnJvbSBwYW11a2thbGUKcmVuYSBub3VuZW4gc3R5bGUgMy80CmFib3ZlIHdhdGVyCm5lZ2FvCm1pcnJvciBiYWNrZ3JvdW5kCnRyaXRvbmUKaGVucmkgY2FydGllciBicmVzc29uCmxhZHkgZGltaXRyZXNjdQpsYWR5IGluIHJlZCBhcm1vcgpubyBleHRyYSBjaGFyYWN0ZXIKY292ZXJlZCBjaGVzdApuZW9uIHN0eWxlCmJhdHRsZSBmb3Igd2hpdGVydW4gY2l0eQpjb21wdXRlciBtb25pdG9yCmxhcmEgY3JvZnQgYXMgc3BpZGVyd29tYW4Kc3R5bGUgb2YgYmxhZGUgcnVubmVyCmxhdGluCnN1biBleHBsb2Rpbmcgb24gdGhlIGJhY2tncm91bmQKbGVnZW5kcwpoaXlhbyBtaXlhemFraQpvcmFuZ2UgYW5kIGJsdWUKbXlzdGVyaW91cyBtYW4KbGVtb24gZGVtb24KbW9udW1lbnRhbGx5IGFydCBjb21wb3NpdGlvbgpjZWxlYnJhdGUgZ29hbAptYXBwYSBzdHVkaW8KaGVsbWV0IGlzIG9mZgpqYW4gdmVybWVlcgpkYXJrIGFuZCBncml0dHkKcmVuZGVyZXIKbGlnaHRuaW5nIGluIGEgYm90dGxlCmRhbGxlIDIKaGVyb2VzCnNmbQp3aGlybGluZyBibHVlIHNtb2tlCmxpb25lbCBtZXNzaQpuIDQKc3R5bGUgb2YgZHVlbHlzdApuaWNvbGEgc2Fsdmlvcgpsb2ZpIHN0ZWFtcHVuayBiaW9zaG9jayBwb3J0cmFpdApydWluZWQgY2l0eSBpbiB0aGUgYmFja2dyb3VuZApkeW5hbWljIHNreQpjYXJ0b29uIG1vb2R5IHNjZW5lCmFkcmVhcyByb2NoYQpvbmUtcG9pbnQgcGVyc3BlY3RpdmUKbG9yZCBzaGl2YQpsb3JkIGZyb20gaGVsbCBvbiB0aGUgdGhyb25lCnJlbWJyYW5kdCBsaWdodApmYW50YXN5IGNhcmQgZ2FtZSBhcnQKbmV2ZXIgZW5kaW5nIHN0b3J5Cmh5cGVyIHJlYWxpc3RpYyBmdXIKYXJ0IG9mIGlsbQpnb2xkZW4gc21vb3RoIG1hdGVyaWFsCmdsaXR0ZXJpbmcgbGlnaHQKdHJlYXN1cmUgYmFja2dyb3VuZApkZWVwIGNvbnRyYXN0Cmx5bmRhIGNhcnRlciB3b25kZXIgd29tYW4KZ29sZCBwYWludAptYXJibGUgZmxvb3JzCmVwaWMgZmFudGFzeSBhcnR3b3JrCmNhdGFwdWx0CndlYXJpbmcgYW4gZXllIHBhdGNoCnBlbnRhY2xlCmFsaWVuIG1vdXRoCnVuY2hhcnRlZCA0OiBhIHRoaWVmJ3MgZW5kCmFuaW1lIGNoYXJhY3RlcjsgZnVsbCBib2R5IGFydApzaGlueSBicmFzcwp5b3V0aGZ1bCBmYWNlCndlYXJpbmcgZmFjZW1hc2sgYW5kIHN1bmdsYXNzZXMKcmljaCBkZWVwIGNvbG9yIHNjaGVtZQptYW4gaW4gaGlzIDMwcwp0cmFwcGVyIGtlZXBlcgptYW5kYWxvcmlhbiBhcm1vcgpwcm9kdWN0aW9uIHBob3RvCm1hcmdvdCByb2JiaWUgYXMgdGFuayBnaXJsCm1hcmllIGFudG9pbmV0dGUKbWFyaXNhIGtpcmlzYW1lCm1hcmtpcGxpZXIKc2NhbGVkIHNraW4KbWFyayB6dWNrZXJiZXJnIGFzIGEgcm9ib3QKbWFya2V0IHN0cmVldApvZmZpY2lhbCBjb25jZXB0IGFydApoZHIgcGhvdG9ncmFwaApzdGFnZ2VyZWQgZGVwdGgKbWFyeXBvcnQKbWF0dCBkYW1vbgpkYXJrIGFuZCBmb3JlYm9kaW5nCmFiYW5kb25lZCBzdHJlZXRzCnBjIHNjcmVlbnNob3QKcGluaG9sZSBwaG90bwpidXJiZXJyeQptZWNoYW5pY2FsIGdlYXIKY2xvYWtlZAppbnNpZGUgb2YgYSAxOTcwcyBzY2llbmNlIGxhYgptZWd1bWluCm1lbGFuaWUgbWFydGluZXoKbWVtcGhpcyBhYnN0cmFjdCBtaW5pbWFsIGFydApjeWNsZSByZW5kZXIKY2hhbmdlCnJlYWxpc20gOGsKZGF2aWQgaGFyZHkKd29vZGVuIGZsb29ycwpsZWQgZmxvb2RsaWdodHMKd2l0aCBsb3ZlbHkgbG9vawptaWtlIGVocm1hbnRyYXV0Cm1pbGEga3VuaXMgYXMgY2F0d29tYW4KbWluZWNyYWZ0IGNyZWVwZXIKZ29yZWNvcmUKc3BhY2VzdGF0aW9uCmFnZQphZ2dyZXNzaXZlIHN0YW5jZQpoaWdoIHF1YWxpdHkgZGlnaXRhbCBwYWludGluZwptaXN0eSBmcm9tIHBva2Vtb24KbW9pcmEgZnJvbSBvdmVyd2F0Y2gKaW4gbG9uZG9uCmltYWdlIGNyZWRpdCBuYXNhIG5hdCBnZW8Kc3Ryb25nIGFuZCBtdXNjdWxhcgpwaXhlbCBncmFwaGljcwpwcm9tb3Rpb25hbCBzdGlsbAptb3VzZSBpbiBjbG90aGVzCm1vdmllIHBvc3RlciBvZiBlYXJ0aGJvdW5kIDIKMTk0NwptdXNob2t1IHRlbnNlaQp0aGUgcG9wZQpteWxlbmUgZmFybWVyCnVsdHJhIHZpZXcKc2NpLWZpIG5ldGhlciB3b3JsZApzaW1vbiBiaXNsZXkgYW5kIGZyYW5rIGZyYXpldHRhCmxvdmluZyBhbWJlciBleWVzCmpvc2VwaCBzdGFsaW4Kb3JuYXRlIGJvcmRlcnMKbi05Cm5lb24gc2FtdXJhaQpuZXBhbApuZXcgYmFsYW5jZSBwb3AgdXAgc3RvcmUKZGV2aW5hcnQKY2hpbGQgZHJhd2luZwpuaW5ldGFsZXMKZHJlc3NlZCBpbiByZWQgdmVsdmV0CmRyZXNzZWQgaW4gYmxhY2sgdmVsdmV0Cm1pcmNlYSBzdWNpdQpzdW4taHl1ayBraW0KZ2F0ZXMgb2YgaGVsbAp3YXJuaW5nCmNvbW1lcmNpYWwgbGlnaHRpbmcKc3RhcmluZyBhdCB2aWV3ZXIKY29weXJpZ2h0IHRpbWUgbWFnYXppbmUKMTc5MgpvbGQgbWFudXNjcmlwdAp3b3JraW5nIG9uIGhlciBsYXB0b3AKcGluayBub3NlCm92ZXIgdGhlIGdhcmRlbiB3YWxsCm96eW1hbmRpYXMKcG9ydHJhaXQgY2xvc2UgdXAKYW1lcmljYW4gZ290aGljIHN0eWxlCnRlcmVuY2UgbWNrZW5uYQphY3Rpb24gc2NlbmVzCmF3YXJkLXdpbm5pbmcgdmVyeSBkZXRhaWxlZApwYW1lbGEgYW5kZXJzb24KbG9va2luZyBvdXQgb3ZlciB0aGUgc2VhCmJyb256ZSBmYWNlCmRhcmsgcmVkIGJsb29keSBmb2cgZmx5IGFyb3VuZApsdW1pbm91cyByZWQgZXllcwptb2RlbCBzaGVldApwZXJzZXBob25lCmVuaGFuY2VkIHNoYXJwbmVzcwpwaG9uayBhbGJ1bSBjb3Zlcgpmb2NhbCBsZW5ndGg6IDUwbW0KcGxheWluZyB2aWRlbyBnYW1lcwp6ZXJvIGcKZGVjbGFzc2lmaWVkCnBob3RvIG9mIGEgaGFuZCBqZXdlbGxlcnkgbW9kZWwKZmluZS1hcnQgcGhvdG9ncmFwaHkKcGluayB2aW9sZXQgbGlnaHQKbGVhdGhlciBwYW50cyB3aXRoIGEgYmVsdAp3aXRoIGEgbGlnaHQgbGVhdGhlciBhcm1vcgp0YWtlbiBvbiBhbiBpcGhvbmUKd29vZCBjYWJpbmV0cwoyMDBtbSBmb2NhbCBsZW5ndGgKODhtbQpoaWdobHkgZGV0YWlsZWQgaW4gNGsKbGlnaHQgYm93biBpcmlzCnJlYWR5IGZvciBjb21iYXQKc2FraW1pY2hhbiBhbmQgZnJhbmsgZnJhbnp6ZXRhCmJvb2sgaW4gaGFuZAp0aGUgY29sb3VycyBvZiB0aGUgc3Vuc2V0Cm94eWdlbiBtYXNrCjJkIGdhbWUgYXJ0IGd0YSBjb3ZlcgpiaWcgYmFuZwpwb21lcmFuaWFuCjRrLzgKZmFjZSBzY2FycwptdXRpdmVyc2FsIHRzdW5hbWkKd2FybSBhbmQgZ2VudGxlIHNtaWxlCnJvYmVzISBpbnRyaWNhdGUKcG9ydHJhaXQgb2YgYWxleGFuZHJlIGR1bWFzCmpheXNvbiB0YXR1bSBhcyBjaGUgZ3VldmFyYQpkYXJrbmVzcyBhbmQgZmxhbWVzCmJlbmVkaWN0IGN1bWJlcmJhdGNoCnBhaW50aW5nIG9mCmRlcHRoIHNlbnNlIG9mIG1vdmVtZW50Cm5vcmRpYyBteXRob2xvZ3kKZmFjZSBmb3J3YXJkcwpmdXR1cmlzdGljIGFybW9yCmhvbGRpbmcgYSB0YW5nZXJpbmUKcG9ydHJhaXQgb2Ygb3Jvcm8gbXVucm9lCnBvcnRyYWl0IG9mIHN0ZXZlIGpvYnMKcG9ydHJhaXQgb2Ygc3VwZXIgbWFyaW8KaW1wZXJpdW0KYnJvYWQgc3dvcmQKcG9ydHJhaXQgb2YgeW9kYQp3YXJtIHNwcmluZwpnZW9yZ2lhIG8na2VlZmUKcG9ydHJhaXQgb2YgYSBidWdzIGJ1bm55CnVwcGVyIGJvZHkgaW1hZ2UKcmljaGx5IGRldGFpbGVkIGNvbG9yZWQKZGFyayBmaWxhbWVudHMKcG9ydHJhaXQgb2YgYSBkcmFnb24KY2F0IGVhcnMgb24gaGVyIGhlYWQKKChyZWQpKSBiYWdneSBleWVzCm1hbGUgZmFjZSBhbmQgYnVzdAp2aWtpbmcgYW5kIHRlbXBsYXIgYWVzdGhldGljcwptaXggYmV0d2VlbiB0cmliYWwgYW5kIGhpLXRlY2gKd2hpdGUgaGFpciEhIQpheWFrYSBnZW5zaGluIGltcGFjdApheWFrYSBnYW1lIGdlbnNoaW4gaW1wYWN0CmR5aW5nCmNvcmFsLWxpa2UgcGViYmxlcwpoYW1tZXJzaG9pCndoaXRlIGhhaXJzCmh1Z2UgaG9ybnMKaW4gcGluayBmb3Jlc3QKcG9ydHJhaXQgb2YgamFwYW5lc2UgZ3lhcnUKd2l0aCByb3VuZCBmYWNlCmdsb3dpbmcgbWFnaWNhbCBleWVzCnJlbmRlcmVkIGluIGhvdWRpbmkKZ29sZGVuIGFuZCBzaWx2ZXIgY29sb3JzCmxhdGUgOTBzCmRyZXNzZWQgaW4gYSBzdWl0CmRlbGljYWN5CmZvcnRuaXRlIHNraW4KcHJldHR5IHdvbWFuCmx1c2ggZmFpcnkgZm9yZXN0CnZpdmlkKQpub3N0YWxnaWEgb2YgYSBmYWlyeXRhbGUKY2F2YWxyeQprb2RhayAyMzgzIHZpc2lvbiBjb2xvcgpiZXN0IG9mIGFydCBzdGF0aW9uCnNtaWxpbmcgc2VkdWN0aXZlbHkKYmxhY2sgc3BvdCBvdmVyIGxlZnQgZXllCmhkciBwaG90b2dyYXBoeQpyYXQga2luZwpzdHJpbmcgdGhlb3J5Cm9yaWVudGFsIGZhbnRhc3kKbGVhZGluZyBhIGJhdHRsZQp3aXRoIHN0dW5uaW5nIGdyZWVuIGV5ZXMKcmVmbGVjdGlvbnMgb24gYSBnbGFzcyB0YWJsZQpyZW4gYW5kIHN0aW1weQp3aWRlIGFuZ2xlIGxlbnNlCnJpdmVuCmF0bW9zcGhlcmljcwpyb2JvdGljIGhlYWQKYmxvb2QgcmVkIG1vb24KZWFybHkgcmVuYWlzc2FuY2UKcm9tZW8gYW5kIGp1bGlldApyb24gcGVybG1hbgpzaGF0dGVyaW5nCmlseWEga3V2c2hpbm92IGxhbmRzY2FwZQpyZWxpZWYKbm8gc2hhZG93cwpmb2dneSBldmVuaW5nCmdyZWVrIHRlbXBsZSBiYWNrZ3JvdW5kCnNhbG1hIGhheWVrIGFzIGEgYmFyYmFyaWFuCmV4dHJlbWVseSBkZXRhaWxlZCBzYW5kCnNlZ2EgZ2VuZXNpcwpkZXNjcmlwdGl2ZSBhcnQKdmVyeSBiZWF1dGlmdWwgZGlnaXRhbCBhcnQKcGVyZmVjdCBkZXRhaWwKc2NhcnkgcG9zZQpyaW5hdCB2b2xpZ2Ftc2kKZGlmZnVzZQpzY2ktZmkgbGl6YXJkIGFsaWVuCmluIGRhcmsgcm9vbQpzb2Z0IHRleHR1cmVzCnNjb3R0IHdvem5pYWsKc2NyZWVuc2hvdCBmcm9tIG92ZXJ3YXRjaAppbi1nYW1lCnJldm9sdmVyCm1vbmtleXMKdmVjdG9yIHRyYWNlCm1vbnVtZW50cwpzcGxpbnRlciBjZWxsCmplZmYgbHlvbnMKbW9vbiBtaXNzaW9uCndhciBwaG90b2dyYXBoCnNpbXBsZSBhbmF0b21pYwpwaG90b3JlYWxpc3RpYyBkcmF3aW5nCmJiYyBkb2N1bWVudGFyeQpzcG9ydHMgbG9nbwpncmFzcCBvZiBkYXJrbmVzcyEhIQpwaXRjaGJ1cm4gZGV2aWxzCnBpY3R1cmUgb2YgdGhlIHllYXIKZ3JheSBiZWFyZApzbW9rZSBvbiB0aGUgd2F0ZXIKc211ZyBzbWlyawpsb3cgYnVkZ2V0CnJpZGluZyBhIGZ1dHVyaXN0aWMgbW90b3JjeWNsZQp3ZWFyaW5nIGEgZmVkb3JhCmhpZ2hseSBjYXBzdWxlZApndXJyZW4gbGFnYW4KZmx5aW5nIGluIHNwYWNlCmlsbHVtaW5hdGluZyBmb2cKc3RhciB3YXJzIG1vdmllIHBvc3RlcgpvcmFuZ2UgYW5kIHdoaXRlCnN0YXIgd2FycyBhcmNoaXRlY3R1cmUKc3RlYW1wdW5rIGdpcmwKZ29nZ2xlcyBvbiBmb3JlaGVhZApzdGVpbnM7Z2F0ZQpjeWJlciBhdWdtZW50YXRpb24gaW1wbGFudApoaWdobHkgZG93bnZvdGVkCmhhbmdpbmcgaW4gdGhlIGxvdXZyZQpoYW5kIGhvbGRpbmcgYSBrbmlmZQrGkjUuNgpyaWNoYXJkIGNvcmJlbiBzdHlsZQpibHVlc2hpZnQgcmVuZGVyCnN0eWxlIG9mIGJhbmtzeQpzd2luZ3MKOGsgdWx0cmEgZGV0YWlsCm1pbGl0YXJ5IGNsb3RoaW5nCnN0YXIgY2hpbGQKYnVzeSBzdHJlZXRzIGZpbGxlZCB3aXRoIHBlb3BsZQpzdXBlciBtYXJpbyBpbiByZWFsIGxpZmUKc3VwZXJtYW4gPnllbGxpbmc8PDw8IHNjcmVhbWluZyEKYm9keSBzd2VsbGluZyBhYm91dCB0byBleHBsb2RlCnN3ZWVwaW5nIGFyY2hlcwphbGllbiBpc29sYXRpb24Kc3dhbgpncmFwaGljIHRlbXBsYXRlcwpvbGQgb2lsIHBhaW50aW5nCnRhbGwgYW5pbWUgZ3V5IHdpdGggYmx1ZSBleWVzCmNhcGl0YWwgb2YgZXN0b25pYQp0YXBpcgptdXNpY2lhbgp0YXlsb3Igc3dpZnQgYXMgcHJpbmNlc3MgbGVpYQp0ZWNobm9tYW5jZXIKbmVyZHkgZ2xhc3NlcwpleHRyZW1lbHkgc2hhcnAgbGluZXMKd2l0bmVzcyBzdGFuZAp0aGUgYWdlIG9mIGRpc2NvdmVyeQpyZWQgbW9vbiBvdmVyIHN0b3JteSBvY2Vhbgp0aGUgZHVkZQp0aGUgZWFydGgKdGhlIGVuZCBvZiBldmFuZ2VsaW9uCmh5cGVyZGV0YWlsZWQgfCBkb25hdG8gZ2lhbmNvbGEKdGhlIGdob3N0IGluIHRoZSBtYWNoaW5lCmZhbnRhc3kgc3dvcmQKY2xvc2Ugc2NlbmUKdGhlIG1vb21pbnMKY2liZXJjaXR5CmNvbXB1dGVyIG5lcmQKcmVkIGJsdWUgY29sb3Igc2NoZW1lCnRoZSBhbmdyeQpkcmFtYSBtYXNrcwp0aGUgYmF0bWFuIHdobyBsYXVnaHMKdGhlIGJlZ2lubmluZyBvZiB0aW1lCjMwMwpzY3JldGNoCndpdGggZnVybml0dXJlIG92ZXJ0dXJuZWQKd2VsbC1hcHBvaW50ZWQgc3BhY2UKcGljc2FydAptYXNzaXZlIGRlY29yYXRlZCBkb29ycwpjaXJjYSAxOTkyCnRoZSBmdXR1cmUKdGhlIGxhc3QgZGF5IG9uIHRoZSBlYXJ0aApzbm93IG91dHNpZGUgdGhlIHdpbmRvd3MKc3ByaW50ZXJzIGluIGEgcmFjZQpjbGFyaWNlIHN0YXJsaW5nCnVuZXhwZWN0ZWQKdGhlIHBvb2xyb29tcwpjeWJlcnB1bmsgc3RyZWV0cyBpbiBqYXBhbgpzbmFja3MKb3JjaGVzdHJhCmxvdyBzdW4KdGhlIGNlbnRyZSBjYW5ub3QgaG9sZAppbXByb3Zpc2F0aW9uYWwKZGFyayBicm93biBmbG93aW5nIGxvbmcgaGFpcgp0b2FzdGVyCnRvbSBjcnVpc2UgYXMgaXJvbiBtYW4Kd2lraXBlZGlhCmxpZ2h0IGZpbG0gZ3JhaW4KdG9tIGFuZCBqZXJyeQptYWplc3RpYyBiZWF1dGlmdWwgd29ybGQKdG9ueSBzb3ByYW5vCnBybyBwaG90b2dyYXBoeQphcnRpZmljaWFsIGxpZmUKdHJpbml0eSB0aGUgbWF0cml4CmF0aGxldGljIGZvb3RhZ2UKbmF0dXJhbCBkaXNhc3Rlcgp0dWNrZXIgY2FybHNvbgp0b3AgcmF0ZWQKYmxhY2sgZnVybml0dXJlCmJvYiBsYXJraW4KcmVuZGVyaW5nIG9mIGxvZyBwaWxlIGZhY3RvcnkKY292ZXIgb2YgbmV3IHlvcmtlciBtYWdhemluZQpjbGFtcApjaW5lbWF0aWMgYW1iaWVudCBsaWdodGluZwpwcm9kdWN0aW9uIGlnCnR3byBvbGQgcGVvcGxlCnRyYW5zaHVtYW5pc3QgZXZvbHV0aW9uCnR5bGVyIHRoZSBjcmVhdG9yCmludHJpY2F0ZSBjbG93biBtYWtldXAKd2VhcmluZyBhdXRoZW50aWMgYXR0aXJlCmZ1dHVyaXN0aWMgcm9ib3RpY3MKaW50cmljYXRlIHRoaW4gZGV0YWlscyBpbiBnb2xkCnN1cGVycmVzb2x1dGlvbgpob3QgZGF5CmJyaWdodCBjb2xvdXIgdG9uZQpiZWdnaW5nIGZvciBhbG1zCnBlcnNvbiBjZW50ZXJlZCBjb21wb3NpdGlvbgp1bmRlciBhIHRlY2huaWNvbG9yIHNreQp1bmRlcnRhbGUKc291cyBsYSBwbGVpbmUgbHVuZQp2IGZyb20gZGV2aWwgbWF5IGNyeSBhcyBhbiBlbGYKdGlsdC1zaGlmdGVkCm5hdXRpY2FsIG1hcHMgZ3JhZml0dGkKdmFzcyByb2xhbmQKaW50ZXJlc3RpbmcgcGVyc3BlY3RpdmUKdmVyc2FpbGxlcwpjaGltcGFuemVlCnZpY3RvcmlhbiBoYXJib3VyIG5pZ2h0CnNoYXJwLWZvY3VzCnZpZXcgZnJvbSB3aW5kb3cgb24gbWVnYXBvbGlzCnN0dWRpbyBmbG9vcgpzaWdtYSA4NSBtbQpncmFuZCB0aGVmdCBhdXRvIHN0eWxlCmZlbWluaW5lIGxvb2tpbmcKdmlyZ2lsIGZpbmxheXRpbSBoaWxkZWJyYW5kdAptb2Rlcm4gY29sb3JzCnNvbWEgZ2FtZSBhcnQgc3R5bGUKd2FsdGVyIHdoaXRlIGZ1bmtvIHBvcAp3YWx0ZXIgd2hpdGUgYXMgdGhhbm9zCndhbHRlciB3aGl0ZSBpbiBkYXJrIHNvdWxzCndhbHRlciB3aGl0ZSBpbiBtaW5lY3JhZnQKZGV0YWlsZWQgY2l0eQp3aWRvd21ha2VyCndpbGwgc21pdGggc2xhcHBpbmcgY2hyaXMgcm9jawp3aW5nZWQgZ2lybCBhbmdlbAp3aXphcmQncyB0b3dlcgp3b3JsZCBvZiB3YXJjcmFmdCBzY3JlZW5zaG90Cnd1dGhlcmluZyBoZWlnaHRzCmxpdHJwZyBub3ZlbCBjb3ZlcgpjaGluZXNlIG1vbmdvbGlhbiBzY3JpcHQKaWJpemEKZGV0YWlsZWQgbGFzaGVzCnl1bmcgbGVhbgplZXJpZSBhdG1vc3BoZXJpYwp2b2x1bWV0cmljIGxpZ2h0IGhpZ2hseSBkZXRhaWxlZApjZXphbm5lCmxvdHoga2Fyb2x5CmZhbnRhc3kgY2hlbWlzdHJ5CmZsb3VyIGR1c3Qgc3ByYXkKcmV0cm9jb3JlCmZhc3NiaW5kZXIKbWFyYwpiaXNwbyBkbyByb3NhcmlvCmNodHVsaHUKZGlzcG9zYWJsZSBjYW1lcmEgcGhvdG8KbGlnaHQgcm9vbQpwb2xpc2hlZCB3aXRoIHZpc2libGUgd29vZCBncmFpbgpyZXRybyBlZmZlY3QKYWVzdGhldGljIG1vb2QKb24gYSBkYXJrIGJhY2tncm91bmQKa2F3YWlpIGhhaXJzdHlsZQppbiBhIG1lYWRvdwppbWF4IDcgMCBtbS4gb2N0YW5lIDMgZCByZW5kZXIKaW1heCA3IDAgbW0uIGJ1enogbGlnaHR5ZWFyCnRpbGUKY2luZW1hdGljIDNkIHJlbmRlcgo0ayBzaGFycApvbmUgb24gZWFjaCBzaWRlCjEgOSA4IDAgcyB0ZWNoCmxvbmcgcGlndGFpbAptdWx0aXBoYXNlIGZsb3cKYmx1ZSBoZWFkbGlnaHRzCmZseWluZyBvdmVyIGEgY2l0eQpjaW5lbWF0b2dyYXBoaWMgYXRtb3NwaGVyZQpkYXJrIHN0dWRpbyBiYWNrZHJvcApoaWdobHkgY3JlYXRpdmUKZW5naW5lZXJpbmcgYmF5Clsgb2lsIHBhaW50aW5nIF0hIQpwaG90byB0YWtlbiBvbiBhIG5pa29uCndhcm0gbGlnaHRpbmcgd2l0aCBjb29sIHNoYWRvd3MKaGVyIGZhY2UgbG9va3MgbGlrZSBhbiBvcmNoaWQKY2FyIHRlc2xhIDMKcSBwb3NrZXQKYW5hc3Rhc2lhIG92Y2hpbm5pa292YQpzaWUgYm9vYgptZWRpZXZhbCBjb25jZXB0IGFydApjaW5lbWF0aWMgbGlnaHRuaW5nIGFuZCBjb2xvcnMKdmVnZXRhYmxlcyBvbiB0YWJsZSBhbmQgY2FuZGxlCmFuIHVuZGVyd2F0ZXIgY2l0eQp1bHRyYSBzaGFycCAtIC0gYXIgMSA2IDogOQpkZXRhaWxlZCBsaW5lIGRyYXdpbmcKYmx1ZSBzYW5kCnNjYXJ5IGNhcnRvb25zCm9uZSByYWlzZWQgZXllYnJvdwpjZ3NvY2lldHkgYXdhcmQKMSA5IDYgNAphdHRyYWN0aXZlIGJlYXV0aWZ1bCBmYWNlCmRldGFpbGVzIGZhY2UKc2l0dGluZyBhbG9uZSBpbiBhIGNhZmUKYmx1ZS1mYWJyaWMKdGVjaG5pY2FsIGRldGFpbApmdWxsIGNvbG9yIHNjaGVtZQppbiBhIGx1bWluaXN0IGJhcm9xdWUgc3R5bGUKdW5ob2x5IHVuaW9uCmNlbHRpYyB2ZWdldGF0aW9uCmV4cGxvc2l2ZSBlbmVyZ3kKdHdpc3RpbmcKb24gaGVyIGtuZWVzCmNhcnRvdWNoZQphbmRlcnMgcGV0ZXJzZW4Kd2VhcmluZyBhIHJlZCBjaGVvbmdzYW0KbnVtZXJvdXMgZmlyZXMKaHdhbmcgc2UgLSBvbgpyb21hbiBjb2x1bW5zCmpycGcgZmFzaGlvbgpyZWZpbmVkIHNwb250YW5laXR5CmJlYXV0aWZ1bCBzdHVkaW8gbGlnaHRzCjJkIG1pbmltYWxpc3QgdmVjdG9yIGFydAp3ZXN0ZXJuIGNsb3RoaW5nCnNjaSAtIGZpIHNldHRpbmcKd2l0aCBnbGFzc2VzIGFuZCBnb2F0ZWUKbGl2aW5nIHJvb20gYmFja2dyb3VuZApleHRyZW1lIGRldGFpbGluZwp3aXRoIHdhbGt3YXlzCmZsb3dlcnMgYW5kIHdhdGVyZmFsbHMKZGV0YWlsZWQgY2xhc3NpY2FsIGFyY2hpdGVjdHVyZQpmb3Jlc3QgdGhlbWUKd2hpdGV3YXNoZWQgaG91c2VkCmNhbm9uIDM1bW0gbGVucwptb3V0aCBoYWxmIG9wZW4KZnVsbCBwb3NlCmhpZ2hseSBkZXRhaWxlZCB2ZWN0b3IgYXJ0CmJsYWNrIHNjaGVtZQphdWRpZW5jZQpmcm9tIHRoZSBzdHVkaW8gZ2hpYmxpIGZpbG0Ka2FudG9rdQppbiBoZXIgZWFybHkgMyAwCnBlcnNwZWN0aXZlIHBpZWNlCnJhaW4gZHJvcGxldHMgZnJvemVuIGluIHRpbWUKZ3JhZGllbnQgd2hpdGUgdG8gc2lsdmVyCnJvbWFudGljIGRyZXNzCndoaXRlIGN5YW4KYmxhY2sgYnV0dGVyZmxpZXMKbW9zcyBhbmQgZmxvd2VycwpkcmFtYXRpYyBsaWdoaW5nCmNvcm5lcgpvYnNjdXJlZApzdG9yeWJvb2sgc3R5bGUKc2NhdHRlcmVkIHByb3BzCm5pY2Ugc3ByaW5nIGFmdGVybm9vbiBsaWdodGluZwpoZWF2eSBzbm93IGZhbGwKcGlndGFpbHMgaGFpcnN0eWxlCjRrIGhkIGFydHdvcmsKa2ljayBmbGlwCmxvZyBob21lcwp0aGUgcGxhbmV0CmxvbmcgY3VydnkgaGFpcgpjeWJlcnB1bmsgY29sb3IgcGFsZXR0ZQpjdWJpYyBibG9ja3MgbWl4IHN0cmlwZXMgY3V0cwo2IGsKc3RhbmRpbmcgYWxvbmUgaW4gZ3Jhc3N5IGZpZWxkCnNoYW1hbmlzbQpsZWF0aGVyIGFybW9yZWQKKCBmaWxtIG5vaXJzICkKKCBicnVzaCBzdHJva2UgKQp0cmFuc21pdHRlcnMgb24gcm9vZgplbGVjdHJpY2FsIGFwcGVuZGFnZXMKYmlnIHNjZW5lCnJlYWxpc3RpYyA4ayByZW5kZXIKaHlwZXJwb3AKbW9yYmlkIGFydAp3aGl0ZSBob3VzZXMKbWFzc2l2ZSBzdHJ1Y3R1cmVzCmxvdWlzIGthaG4KYnVsbHJ1c2hlcwptb29keSBjb2xvciBzY2hlbWUKYnV0dGVyZmxpZXMgZmx5aW5nCnN1YnRsZSBhdG1vc3BoZXJpYyBsaWdodGluZwptZXJtYWlkcyBpbiBkaXN0YW5jZQpkb2cgaW4gYSBzcGFjZSBzdWl0ZQpsZXdhbmRvd3NraQpob3BwZXIgYW5kIGdpbGxlYXJkCmFjYWRlbWljIGNsb3RoaW5nCnByb2Zlc3Npb25hbCBzaGFkaW5nCmJhdGh0dWIKc3ludGh3YXZlIGNvbG9yIHBhbGV0dGUKZmllbGQgb2Ygd2lsZCBmbG93ZXJzCmdyYWNlZnVsIGFuZCBlbGVnYW50CnN0dW5uaW5nIG1vZGVsCnBpcGUgc21va2UKZm9yIHRoZSBoaWdoc2Nob29sIHllYXJib29rCmV4dHJlbWVseSBwc3ljaGVkZWxpYyBleHBlcmllbmNlCnplaXNzIDggMCBtbSBmIDIuIDggbGVucwpjeWJlcnB1bmsgZ2xvc3N5IGxhdGV4IHN1aXQKYW5pbWUgY29sb3VycwpkYXJrIGdyZWVuIGxlYXZlcwpjb2hlcmVudCBzeW1tZXRyaWNhbCBmYWNlcwpzeW1ib2xpc3QhCmRhcmsgc3Ryb2tlcwpob21vZXJvdGljISEKaW50cmljYXRlIGdvbGRlbiB0aHJlYWRzCnJlZCBhbmQgZ29sZCBvcm5hdGUgZHJlc3MKd2F0ZXJjb2xvci13YXNoCnJvc2UgZ2FyZGVuCmFuIGFuZ2VsIHN0YW5kaW5nIHN0aWxsCmludGVyc3RlbGxhciBnYWxheHkKc3R5bGUgb2YgZ2VyYWxkIGJyb20KaW5zaWRlIGEgbW9kZXJuIGFwYXJ0bWVudApmcmFjdGFsIGFycm93cwpsb25nIGZsb3dpbmcgd2hpdGUgaGFpcgpjdXJseSBibG9uZApyb3NlcyBpbiBoZXIgaGFpcgpzdHlsaXplZCBjb25jZXB0IGFydApmb2NhbCBkZXB0aApicmFpZGVkIGhhaXIuIG5pZ2h0aW1lCiggKCBzdGFnZSBsaWdodHMgKSApCjhrISEKbm8gaGVsbWV0ISEhIQphbGwgaW5zaWRlIGZyYW1lCndoaXRlIGFuZCBnb2xkIGNvbG9yIHBhbGV0dGUKbGluc2V5IGxldmVuZGFsbAp0YWxsIG1ldGFsIHRvd2Vycwpwcm9mZXNzaW9uYWwgY2xvc2V1cCBwaG90bwpjaHJvbWUgYXJ0CnJhaW5ib3cgY29sb3JlZApjb21wbGV4IDNkIHNjZW5lCnBpY2Fzc28gYW5kIG1vZWJpdXMKZGF5Z2xvCnZhdAptaXhlZCBtZWRpYSAzIGQgY29sbGFnZQptaW5kIC0gYmVuZGluZwoyIDAgMSA4CmNvbnN0cnVjdGlvbiBzaXRlCmlzIGxvb2tpbmcgYXQgYSBiaXJkCnZvbHVtZXRyaWMgbGlnaHQgLSBzIDEgNSAwCnRyZW5jaCBjb2F0IGFuZCBzdWl0CmJhY2tncm91bmQgYXJ0IG5vdXZlYXUKYm9rZWghISEhCmZsYXQgbWF0dGUgYXJ0CmRhcmsgc3Rvcm15IGRyYW1hdGljIHNreQppbnNpZGUgYSBnbG9iZQpkcm9vbGluZyBmZXJyb2ZsdWlkCnJlZCBjbG91ZCBsaWdodAp5b3V0dWJlIHZpZGVvCmplYW4gbWljaGVsIGJhc3F1aWF0CnJvcGUKbWFkZSBvZiBpbnRyaWNhdGUgbGFjZSBza2VsZXRvbgpnbG93aW5nIGlyaWRlc2NlbnQgYWNjZW50cwo4IGsgcGhvdG9yZWFsaXNtCmNvdmVyZWQgaW4gYmFuZGFnZXMKYmxpbmQgZXllcwpzY29yY2hpbmcgd2VhdGhlcgpibGFjayBvdXRsaW5lcwpzdGFuZGluZyBpbiBtaWRncm91bmQKbm8gbW9yZSBoZXJvZXMgY29uY2VwdCBhcnQKd2VhcmluZyBib25lIGFybW9yCnNpbXBsaXN0aWMgaWNvbm9ncmFwaHkKZGV0YWlsZWQgaW5rIGRyYXdpbmcKdGhlZGllbGluZQpwYWNrYWdpbmcgYXdhcmQKY2FydG9vbiBjcmVhdHVyZQpuZW9uIGdsb3dpbmcKZmFjZSBpY29uCmRldGFpbGVkIG9pbCBwYWludApydWxlcyBvZiBjb21wb3NpdGlvbgpoaWdoIGRldGFpbGVkIDggawpicmFpbiBhbmF0b215Cmh5cGVyIGx1eHVyaW91cwppdCdzIG5pZ2h0IHRpbWUKc3Vuc2hpbmUgdGhyb3VnaCB3aW5kb3cKbWFueSBzaGFyZHMKcGFsZSBza3kKYmVpZ2Ugc2t5IHBlbmNpbCBtYXJrcwpwcm9mZXNzaW9uYWwgbmF0dXJlIHBob3RvZ3JhcGh5CnZlbmljZSBiaWVubmFsZSdzIGdvbGRlbiBsaW9uCmNyZWF0aW9uCnZpYnJhbnQgdml2aWQgY29sb3JzCnBlb3BsZSBvdXRzaWRlIGVhdGluZyBtZWFscwp1bHRyYSBkZXRhaWxlZC4gc3R5bGUgb2YgYXJyaXZhbApkZW5zZSB0cmVlcwp3aW50ZXJ0aW1lCmNpdHkgc3Vuc2V0IG1pc3QgbmVvbiBsaWdodHMKa2FuYWdhd2EgcHJlZmVjdHVyZQpzYW11cmFpIHZpbnlsIHdyYXAKZGV0YWlsZWQgLSB3aGVlbHMKaGVkZ2VtYXplCnN0b2NrIGFydAp0b3duc2hpcAp3aWxkc2NhcGVzCm9ydG9ncmFmaWNvCmNsb3NlIC0gdXAgcGhvdG8KZW1pc3NpdmUgbWF0ZXJpYWwKcHVmZnkgc3RpY2tlcgpvbGQgY29wcGVyIHBpcGVzCmFscGhvbnNlIG11Y2hhIC0gaCA3IDYgOAprb2RhayA0IDAgMAp0aGUgY2F0IGxvb2tzIGxpa2UgZ2lyYWZmZQpsYXJ5bngKdm9jYWwgdHJhY3QgbW9kZWwK8J+OgCDwn42TIPCfp5oKZHJlYW1zY2FwZSBpbiBhIGphcgpncmVhdCBib2R5CmRyYW1hdGljIGJsYWNrIGFuZCB3aGl0ZQptdW5kYW5lCm5hdHVyZSBwYWludGluZwpvY3RhbmUgdWUgNQpzdXBlcnJlYWxpc3RpYwpzY2FyeSBleWVzCndlYXJpbmcgYmVhbmllCmd1amlhbgp2aWN0byBuZ2EKbWVyY2hhbnQgdGVudHMKc2hydWJiZXJ5CnBva2Vtb24gdHJhaW5lciBvdXRmaXQKd2luZCBibG93cyB0aGUgbGVhdmVzCmtsYXVzIGZpbG0Kb29hawphbGllbiBleG90aWMKY291cnQgamVzdGVyCm52aWRpYSByYXl0cmFjaW5nIGRlbW8pCmZlYXRoZXIgZWFyaW5nCmRpZmZlcmVudCBjb2xvcnMKY29zbWljIGFyY2hpdGVjdHVyZQpjYXJ2ZWQgaW4gbWFyYmxlCnR3aW4gbW90aW9uCmNoaWxsaW4gYXQgdGhlIGNsdWIgdG9nZXRoZXIKcGhvdG9yZWFsaXN0aWMgb2lsIG9uIGNhbnZhcwpuZXcgeW9yayBjaXR5IGJhY2tncm91bmQKY2hpbGwgdmliZQp0aGVyZSBpcyBwYWludCBldmVyeXdoZXJlCmh1Z2UgZWFycmluZ3MgYW5kIHF1ZWVyIG1ha2UgdXAKc3Rvcm15IHBvc3QgYXBvY2FseXB0aWMgZGVzZXJ0CmluIHRoZSBhbmltZSBmaWxtIGVyZ28gcHJveHkKYmlvbWVjaGFuaWNhbCBvcGVuIGNoZXdpbmcgbW91dGgKcmVkIHNoaWZ0CndoYWNreSBkZXNpZ25zCmJhcm9xdWUgd2FsbHBhcGVyCmlkZWFsIGNvbXBvc2l0aW9uCndpZGUgYW5nbGUgMTVtbSBsZW5zCnBpbmsgaGVhZHBob25lcwppbiBzdHlsZSBvZiBhbHBob25zZSBtdWNoYQpoaWdoIGNvbnRyYWN0CmRyYWdnaW5nIGEgcGlsZSBvZiBjaGFpbnMKaG9ycm9yIGVudmlyb25tZW50CnNjaSAtIGZpIGNoYXJhY3RlcgppbiBhIGZvZ2d5IGxha2UKbGlnaHRzIG9mZgpib3RoIGJyaWdodCBhbmQgZWFydGggY29sb3JzCmNlbGVzdGlhbCBhc3RoZXRpY3MKc2l0dGluZyBpbiBhIHBsYXN0aWMgdGhyb25lCmRlbXVyCmV2ZXJkaW1lbnNpb25hbAoxIHN0YWlyY2FzZQp0cmliYWwgcHN5Y2hlZGVsaWMKaGlnaCBpbiB0aGUgbW91bnRhaW5zCnBlb3BsZSBhdCB3b3JrCnNjaWVudGlzdHMKZGluYW1pYyBjb21wb3NpdGlvbgpmbHlpbmcgY2l0YWRlbCB3aXRoIHRvd2VycwpiZWV0bGVzCnVsdHJhIHJlYWxpc3RpYyBwaWN0dXJlCmNsb3NlIC0gdXBzCnRyYXVtYQpzdWJkdWVkCnllbGxvd2VkIHBhcGVyCnZpb2xldCBhbmQgeWVsbG93IHN1bnNldApncmVlbiBhbmQgcGluayBjb2xvdXIgcGFsZXR0ZQpmb3VuZCBmb290YWdlIHN0eWxlCmJsZWVkaW5nIGRlY2F5aW5nIGNvbG9ycyEKaGlnaCBkZWZpbml0aW9uIDMgZCByZW5kZXIKY3V0ZSBkZXRhaWxzCmxlbmd0aHdpc2UKNiAwJ3MKYXNwZWN0IHJhdGlvIDE6MwpvaWwgcGFpdGluZwpzdWJsaW1lLWNvb2wtaG90LWh5cGVyYWR2YW5jZWQKbG9uZyBzdHJhd2JlcnJ5IC0gYmxvbmQgaGFpcgppbiBhIGN5YmVycHVuayBzZXR0aW5nCmN1dGUgYW5kIGxvdmVseQpzb2Z0IGZ1ciB0ZXh0dXJlCm1hZ2ljYWwgcG93ZXIKMSA5IDUgMCBzIGNvbmNlcHQgYXJ0ICkgKSApCmxlZCAtIGxpdCBhcm1vcgpsYXVyYSB3YXRzb24KbGluZWxlc3MKY2VudGVyIGZyYW1lIHBvcnRyYWl0CnN0YW5kcyBpbiBhIHBvb2wgb2Ygd2F0ZXIKaGlnaCB0aW1lcyBtYWdhemluZSBhZXN0aGV0aWMKbWFuZGthd3MKYnQgMiAxCmxvb2tpbmcgdG8gdGhlIHNreQpwaW5rIGFuZCBibHVlIGxpZ2h0aW5nCmxldml0YW4KYXdhcmQgd2lubmluZyA0IGsgcGhvdG8KcGx1c2h5CmF0IHRoZSBzZWEKYmxhY2sgYm9iIGN1dCBoYWlyCjQgayB1bHRyYQpvcnRob2dyYXBoaWMgdmlld3MKcmVmbGVjdGl2ZSBvcmNoaWQgZmxvd2VyCmFuaW1lISEhCmluc2lkZSBhIGR1bmdlb24Kb3JhbmdlIG5lb24KdGhvdWdodGZ1bCBleHByZXNzaW9uCmJsZW5kZXItaGFyZC1zdXJmYWNlCmhvdWRpbmktaGFyZC1zdXJmYWNlCm14MgpjeWJlcnB1bmsgMiAwIDQgOQplbWlzc2l2ZSBsaWdodApkICYgZCBjaGFyYWN0ZXIgYXJ0CnByb2Zlc3Npb25hbCB1bmlxdWUgbWFzdGVycGllY2UKZW1pdHRpbmcgc21va2UgYW5kIHNwYXJrcwp0cmVuZGluZyBvbiBhcnRzc3RhdGlvbgptZXRhbCBodXJsYW50CmxvbmVseSB2aWJlCmVlcmllIG1vb25saWdodAptYXJibGUgc3RvbmUKY3Jhd2xpbmcKd29ybGQgb2YgdGhlIHNpbGVuY2UKZXBpY3VyaW91cwpmcmFtZWxlc3MKaW5rIHBlbgpzY2FyeSBuaWdodApyb3R0aW5nIHNraW4KY3VwY2FrZQppbiBsb3ZlIHNlbGZpZQpjcmlzcCBpbWFnZQoxIDggdGggY2VudHVyeSBzb3V0aCBhbWVyaWNhCnBvcnRyYWl0IG9mIGNhcHRhaW4gamFjayBzcGFycm93CmJlYXV0aWZ1bCBhbmltZSBzY2VuZQpzbWlsaW5nIGNveQpqZXN6aWthIGxlIHZ5ZQp2YXBvcndhdmUgc3R5bGUgbWFzdGVycGllY2UKbmlnaHRtYXJlIGluIHRoZSBwYXJrCmJsYWRlIHJ1bm5lciBsaWdodGluZwppbiBuYXppIG9jY3VwaWVkIGZyYW5jZQphcnQgaW4gYSBub2lyIGNyaW1lIG5vdmVsIHN0eWxlCnRoZSBhbmdlbCBvZiBkZWF0aCB3aXRoIGEgaGFsbwpzbGlnaHRseSBoYXBweSBmYWNpYWwgZXhwcmVzc2lvbgptYWdpY2FsIG1vb2QKbW9ub25va2UKZXhoaWJpdGVkIGluIHRoZSBicml0aXNoIG11c2V1bQpzdXBlciBoZXJvIGNvc3R1bWUKb3Nib3JuZSBtYWNoYXJpYQppbiBzdW5ueSB3ZWF0aGVyCm1zIHBhaW50IGRyYXdpbmcKc3RyYW5nZSBwbGFudHMKb2lsIHNsaWNrIG11bHRpY29sb3JlZCBoYWlyCnByb2R1Y3Rpb24gcmVhZHkKZXh0cmFvcmRpbmFyeSBjb2xvcmZ1bCBsYW5kc2NhcGUKc2Npc3NvcnMgaW4gaGFuZApyZWZsZWN0aW5nIGxpZ2h0IGluIGEgbmlnaHRjbHViCmNoaWFvc2N1cm8KZmxhdCBjb2xvcmluZwpyb3NleSBjaGVla3MKc3BhcmtsZXMgb24gZXllbGlkcwpwZWJibGVzCjE5OTBzIGNhcnRvb24KYXN0cmFsIHRyYXZlbApsb3cgd2lkZSBhbmdsZQpmYW50YXN5IHBhaW50ZXJseSBzdHlsZQpkZXRhaWxlZCBtYXR0ZWQgcGFpbnRpbmcKY29ncyBhbmQgZ2VhcnMKbWFnbmlmaWNlbnQgZGVzaWduCmNocnlzbGVyIGJ1aWxkaW5nCmdyZWVuIGFuZCByZWQKbXVzaHJvb21zIGFuZCBwbGFudHMKd2FsbHMgYXJlIGNvdmVyZWQgd2l0aCB2aW5lcwpnYW5nbHkKZG5kIGluIGEgZGFyayBmb3Jlc3QKZGlzbmV5IHBpeGFyIHN0eWxlCmdsb3ZlcyBhbmQgamV3ZWxyeS4gbW90aW9uCmFpciBwb2xsdXRpb24Kc3R1Y2sgaW4gdGhlIGdyb3VuZAplcGljIHN0dW5uaW5nIGF0bW9zcGhlcmUKcGl0cwpob3Jyb3IgY2dpIDQgawpmbGF0IG1pbmltYWxpc3RpYwp3aGl0ZSBsb25nIHRhbmt0b3AKanVuZ2xlIGVudmlyb25tZW50CmxpZSBvbiBhIGdvbGRlbiBzdG9uZQp3aWxsaWFtIGhlbnJ5IGh1bnQKZmluZWx5IGRldGFpbGVkIGNhcgp3aXRoIGEgYmV3aXRjaGluZyB2b2ljZQpub3QgYSBtZXNzZW5nZXIgZnJvbSBhYm92ZQpsYXN0IHN0YW5kCndpdGggZnJvemVuIGZsb3dlcnMgYXJvdW5kIGhlcgpiYWxsZXQKaHlwZXJyZWFsaXN0YwphcnQgbm91dmVhdSBwYXR0ZXJucwpiYXR0bGUgc3RhbmQKZ3JhemluZwpwYWludCBzd2lybHMKY3JhY2tlZCBoYW5kbWFkZSBwb3R0ZXJ5IHZhc2UKZGV0YWlsZWQgc3BhY2VzaGlwIGludGVyaW9yCnBpbmsgYW5kIHJlZCBjb2xvcnMKZGVsaWNhdGUgZmFjZQpuYW5vZ2lybHYgMgpvdmVyZ3Jvd3RoLiBieSBtYWtvdG8gc2hpbmthaQpuaWdodCBjaXR5IGJhY2tncm91bmQKbW92aWUgZW52aXJvbm1lbnQgZGVzaWduCnVyYmFuIHBhdHJvbApjaGFwcGllCndldCBib2R5CmZhY2VwYWludApjb2hlcmVudCB0ZXh0IGVuZ2xpc2ggY2hhcmFjdGVycwpraW0gam9uZyAtIGlsCmZwcyBnYW1lIGNvbmNlcHQKY2hpbmVzZSBkcmFnb24gY29uY2VwdCBhcnQKdGFibGV0b3AgZ2FtZSBib2FyZApza3kgc3dpcmxpbmcgd2l0aCBibGFjayB3aW5kCmluIGEgY2xvdWQKd2VhcmluZyBuZXRydW5uZXIgY2xvdGhpbmcKZXh0cmVtZWx5CmNhbG0gc2VyZW5lIGF0bW9zcGhlcmUKcGVyc29uaWZpZWQKYXJyaWZsZXggbGVucwpoZeKAmHMgd2VhcmluZyBhIHJlZCBuZWNrZXJjaGllZgpkcmVzc2VkIGFzIGEga25pZ2h0CnRoYXQgcmVzZW1ibGVzIGEgYnVsbCdzCnRoZSBkcmVzcydzIGxvd2VyCm5vbi1wbGVhdGVkIHNlY3Rpb24Kd2hpY2ggZ29lcyBuZWFyIHRoZSBncm91bmQKY2xlYXJseSB2aXNpYmxlIGZhY2UKb3JuYXRlIGRlY29yYXRpdmUgYmFja2dyb3VuZApwaG90byB0YWtlbiB3aXRoIHNvbnkgYTdyIGNhbWVyYQp0YWlzaG8gcm9tYW4KZmVhciBvZiBnb2Qgc3R5bGUKcGFzdGVsIG1ha2V1cApwcmVjaXNlIGFuYXRvbXkKYWJzdHJhY3QgY29sb3Vycwpyb21hbiB0b2dhCnZlcnkgYmxvb2R5CmluZHVzdHJpYWwgZGVzaWduIGJsdWVwcmludApuZWNyb25vbWljb24gc3R5bGUKYmVhdXRpZnVsIHBlb3BsZQpodWdlIHVuaXZlcnNlCmxpdmluZwozZCBtaW5pbWFsaXN0aWMKYmlnIGV4cGxvc2lvbgpsdXQKdGVzbGEKc3dpdGNoZXMKY2Fub24gMiAwIG1tIGxlbnMKZGVjb3JhdGVkIHBvbGlzaGVkIHdvb2QKZ2xvd2luZyBibHVlIGludGVyaW9yIGNvbXBvbmVudHMKYm9keSBidWlsZGluZyBibGFja3NtaXRoCnJpcHBsaW5nIGZhYnJpYyBvZiByZWFsaXR5CjQgayA2IDAgZnBzCmFiZHV6ZWVkbwpjYXJyeWluZyBmbG93ZXJzCnNtb290aCBncmFwaGljcwpwbGFuZXRzIGluIG9yYml0Cm1ldGFiYWxscwpmdWxsIG9mIGhpZ2ggYnVpbGRpbmdzCmV4YWdnZXJhdGVkIHBlcnNwZWN0aXZlCmh5cGVycmVhbGlzdGljIG1vdmllIGZpbG1zdGlsbAptYWdpY2F2b3hlbCBjaW5lbWF0aWMgbGlnaHRpbmcKbWFydmVsIG1vdmllIHBvc3RlcgphbiBvbGQgdHdpc3RlZCB0cmVlCnNoYXBlZCBsaWtlIGEgeWFjaHQKZ2FsYXhpZXMgYW5kIHN0YXJzIGluIGJhY2tncm91bmQKZ2F1bnRsZXRzCmZhY3RvcnkgZmxvb3IKZHlzdG9waWFuIHN0eWxlCm1hcmdpZWxhIGNhbXBhaWduCmNvdmVyZWQgaW4gc2FuZApzYW5kIHN3aXJsaW5nCjcgMCBtbSBpbWF4CmFuaW1lIHN0aWxsIGZyYW1lCnJhbHBoIGdvaW5ncwptb25zdGVyIHRlZXRoCm15c3RlcmlvdXMganVuZ2xlIHBhaW50aW5nCmhpZ2hseSBkZXRhaWxlZCB3YXRlciBjb2xvdXIgOGsKZW1wdHkgc3BhY2UKd2V0IGZ1cgpncmV5IHRvbmVzCmR1cmluZyBhIHRodW5kZXJzdG9ybQphbmltZSBtZWNoIGFybW9yCmh1bnRlciB4IGh1bnRlcgoxIDggOCAwIHMgc3R5bGUKb3JhbmdlIHRoZW1lCmdvbGRlbiBvcmJzIGFuZCBmaXJlZmxpZXMKZnJvbSB5b3dhbXVzaGkgcGVkYWwKYmFja2dyb3VuZCBjeWJlcnB1bmsgY2l0eQptYXJjIF8gc2ltb25ldHRpCmZsb3dlcnMgaW4gYmFja2dyb3VuZApiYXJvcXVlIGRldGFpbGVzCmJsdWUgbGVucyBhaXJzb2Z0IG1hc2sKaW4gcmV0cm8gc3dpbXN1aXQKc29saWQgb2JqZWN0IGluIGEgdm9pZApuYXR1cmFsIGJvdGFuaWNhbCBnYXJkZW5zCnByZSAtIGhpc3RvcmljCnBvdnJheQpndXN0YXYga2xpbXB0CjEgOSAyIDIKc3ByaW5rbGVzCnllbGxvdyBtYWdpYyB0aGVtZQpmZWx0aW5nCmdyZXkgb3JhbmdlCnR1cmJ1bGVudCBsYWtlCnNraW4gcmVmbGVjdGl2ZSBtZXRhbGxpYwooIHRob21hcyBraW5jYWRlICkKYmFyb3F1ZSB3aW5kaW5nIGNvYmJsZWQgc3RyZWV0cwptaXN0eSBhbGxleXdheXMKdGlsZWQgcm9vZnMKbWVkaWV2YWwgdHVtYmxlZG93biBob3VzZXMKc3QgY2lycSBsYXBvcGllCmh5cGVycmVhbGlzbSBhcnRzdHlsZQp0dXJidWxlbnQgd2F0ZXIKbmV4dCB0byBpdCBpcyBhIHRveSByYXkgZ3VuCnN5bW9ib2xpc20KaGVhdnkgd2ludGVyIGFlc3RoZXRpY3MKb2NlYW4gc3Rvcm0KdW5kZXIgYSBzcG90bGlnaHQKaG93bGluZwpuYXR1cmFsIGxpZ2h0IG91dHNpZGUKMTk5MHMgcGhvdG9ncmFwaApkZWVwIGltcGFzdG8KZnV0dXJpc3RpYyBkaWdpdGFsIGFydAptYXJ0ZXJwaWVjZQpyZWFsbGlzdGljCnNlYSBvZiB0aGlldmVzIHN0eWxlCnNrZXRjaHkgYXJ0c3R5bGUKaGlzIGhhaXIgaXMgbWVzc3kgYW5kIHVua2VtcHQKaW50aW1pZGF0aW5nIGFwcGVhcmFuY2UKZGlnaXRhbCBhcnQhIQo1MG1tIGYvMS40Cmluc2FuZWx5IGludHJpY2F0ZSBhbmQgZGV0YWlsZWQKbmFpdmlzdGljIGFydApzY2hpem9waHJlbmljCnNpbWlsYXIgdG8gbWFsZm95Cm1lcmNlZGVzCm51bWVyb3VzIGRpbWx5IGdsb3dpbmcgZXllcwpiaWcgZXllcyEhISEhISEhCm52aWRpYSBvY3RhbmUKd2VsbCBkZXRhaWxlZCBoZWFkIHdpdGggbGVkIGV5ZXMKY29uY2VwdCBhcnQhIQp0cmFuc3BvcnQgZGVzaWduCnNpbW9uIGNvd2VsbApkYW4gdm9sYmVydApvbGQgc2NhcnMKbmlnaHQuIGJ5IGdyZWcgcnV0a293c2tpCnN0cmluZ3MgYmFja2dyb3VuZApicmlnaHQgcmVkIGV5ZXMKYmx1ZSBhbmQgYmxhY2sgY29sb3Igc2NoZW1lCndpdGggYSB0YWxsIHRyZWUKcmVtb3RlIGljZWxhbmRpYyB2aWxsYWdlCnJpZ2h0IGFuZ2xlZCB2aWV3CnNhbHZpYSBkcm9pZApvcm5hdGUgYmxhY2sgdHV4ZWRvCnZpdHRvcmlvIG1hdHRlbyBjb3Jjb3MKbmlrb24gNSAwIG1tCnJlZCBoYWlyZWQgZ2lybAplciBkcmFtYQpidXJpZWQgaW4gc2FuZApiYXJvcXVlIHZpc3VhbCBrZWkgZGVjb3JhIGFydAptaWRkbGUgZWFzdGVybiBzdHlsZSB2ZW5kb3JzCmd5byBmdWppa2F3YQpqYW5lIGNsYXJrZQpsb3cgcG9pbnQgb2YgdmlldwplYXJseSAyIDAgMCAwIHMKYXNzb2NpYXRlZCBwcmVzcyBwaG90b2dyYXBoeQpob2xvZ3JhcGgKZm91bnRhaW4gcGVuCm92ZXJoZWFkIHBob3RvZ3JhcGh5CmVtb3Rpb25hbCBjb25mbGljdApwYWdlcwp3aGl0ZSBmZWF0aGVycwpzdXMKZ2xlbiBvcmJpawpvcmdhbmljIGRldGFpbApyaXlhaGQgY2Fzc2llbQppbHlhIGt1dnNoaW5vdiBhbmQgYXJ0Z2VybQpzaGlua2lybwp6ZHppc8WCYXcgYmVrc2nFhHNraSBzdHlsZQpkYXJrIG1vb2R5IGJhY2tsaWdodGluZwpxdWFudHVtIGZyYWN0YWxzCmdsYXNzIGZhY2UKcG9ldHJ5CmhpdmVzCmNoaWxkcmVuJ3MKYXRvbWljIHN0YXJzCjQgMCAwIG1tIGYgMS4gOAp3aGl0ZWJvYXJkCnRoaWNrIHJvdW5kIHNwZWN0YWNsZXMKcGFpbnRlZCBhY3Rpb24gZmlndXJlCm15IG1vbSBpcyBnb2luZyB0byBiZSBzbyBtYWQKNSAwIG1tIGYgLyAxLiA4CnBob3RvbW9udGFnZQptYXN0ZXJwaWVjZSBlcGljIHJldHJvd2F2ZSBhcnQKY2xhc3NpYyBjaGlsZHJlbidzIGlsbHVzdHJhdGlvbnMKbGFzY2F1eApraXQgYmFzaGluZwpoYWxmYm9keSBwb3J0cmFpdAp0aGljayB2ZWN0b3IgbGluZSBhcnQKZGVlcCBjb2xvcnMgYW5kIGRhcmsgc2hhZG93cwpkaXN0YW5jZSBmb2cKdGhlIGxvcmF4CjMgZCBoaWdobHkgZGV0YWlsZWQKeW9kYTotMQpidW4Kcm9vdHMgZGFuZ2xpbmcgYmVsb3cKaXMgd2VhcmluZyBhIHN3aW1zdWl0CnNoYXJwLWphdwpicmVhdGh0YWtpbmcgZGlnaXRhbCBhcnQKdmFzZQprYXdhc2FraQp0cmF2ZWxpbmcgbG9uZyBkaXJ0IHJvYWQKbWljaGFlbCBhbGZvcmQKZmxpbnRsb2NrIGZhbnRhc3kgY2FwaXRhbCBjaXR5CmJhY2tncm91bmQgc2hhcnAgZWFydGgKdGlmZmFueQpidWxnYXJpCmF0IHRoZSBnb2xkZW4gaG91cgpzdHJvbmdzaGFkb3dzCjggayBzdHVkaW8gbGlnaHRpbmcKcXVpdmVyaW5nIGxpcHMKY29uc2lzdGVudCBmYWNlCnN3aXJsaW5nIGVuZXJneQptYWRlIHdpdGggbWlsbGlvbnMgb2Ygc3Ryb2tlCmluIGEgdGh1bmRlcnN0b3JtCmhpZ2ggcXVhbGl0eSBjeWJlcnB1bmsgYXJ0Cmlyb24gY2xhd3MKYXQgdGhlIGRhd24gb2YgdGltZQpncmFkaWVudCBicm93biB0byBzaWx2ZXIKcGFuYXNvbmljIDM1bW0Kc21va2UgaW4gYmFja2dyb3VuZAp3aWRlIHNob3QgYW5nbGUKZHJlYW1saWtlIHN0YW5sZXkga3VicmljawphY3Rpb24gZmlsbSBjb2xvciBwYWxldHRlCmNsZWFuIGFuZCBjbGVhciBmYWNlCnNwZWVkIGJsdXIKZXh0ZW1lbHkgZGV0YWlsZWQKc3Rvcm0gb2YgYWxsIHN0b3JtcwpzbGlwIG4gc2xpZGUKc3RyaWtpbmcgcGVyc3BlY3RpdmUKYWVzdGhldGljIGNvbG9yIHBhbGV0dGUKd2VhdGhlcmVkIGNvbmNyZXRlCm11bW15IHBvcnRyYWl0CmZyb20gbHV4b3IKYW5uaWUgbGllYm93aXR6ClsgdHJlbmRpbmcgb24gY2dzb2NpZXR5IF0hIQptYWRlIG9mIGNhcnJhcmEgbWFyYmxlCndpdGggbmVyZHkhIGdsYXNzZXMhIGFuZCBnb2F0ZWUKYnJhbmRpbmcKYXJjaGVzIGFkb3JuZWQgcGlsbGFycwpzaGF0dGVyZWQgd2FsbApyZWFsaXN0aWMgamVsbHkgc3BsYXNoZXMKMyBkcyBtYXggKyB2IC0gcmF5CnJ1c3RlZCB3YWxscwpkcmlwcGVkIG91dApubyBpcmlzZXMKZ29yZ29uCmNyaW1zb24gYW5kIHdoaXRlIGNvbG9yIHNjaGVtZQptaXhlZC1yYWNlIHdvbWFuCmRldGFpbGVkIGFuZCBvaWwgcGFpbnRpbmcKYnJpZ2h0IHBzeWNoZWRlbGljIGNvbG9yCjMgMiB5ZWFycyBvbGQKZmFjZSBzaG93bgpwcm9maWxlIGltYWdlCnNlYWhvcnNlCmNhbmRpZXMKY3ltYXRpY3MKbWlkZGxlIGVhc3QKYmVhdXRpZnVsIG1hdHRlcGFpbnRpbmcKZGlsYXRlZCBwdXBpbHMKYW55YSB0YXlsb3IgLSBqb3kgYW5kIGVtbWEgc3RvbmUKd2lkZSAtIGFuZ2xlIG1hY3JvIGxlbnMKYmVhdXRpZnVsIGhpZ2ggcmVzb2x1dGlvbgpvY2hlcgpuZWJ1bGEgaGlnaGx5IGRldGFpbGVkCnRlbm5pcyByYWNrZXQKdGhlcmUgYXJlIGFyY2h3YXlzCmJ1dHRyZXNzZXMKZHJhbWF0aWMgbW9vZHkgbGlnaHRpbmcKKChvY3RhbmUgcmVuZGVyKSkKdm9ndWUgZnJhbmNlCmFuIGVjb2xvZ2ljYWwgZ290aGljIHNjZW5lCmNsZWFuIGFuZCBuZWF0CnZpY3RvciBhbnRvbm92CndlYXJpbmcgc2FyaQp0ZXh0dXJlIGZvciAzZAptYXkgNiA4CmlwaG9uZSAxIDMKbWVtcGhpcyBkZXNpZ24Kc2NpIC0gZmkgaW50ZXJpb3IKbWV0YWwgcmVhZHltYWRlCmdpb3JnaW8KbWlkIHNob3QgcG9ydHJhaXQKdmludGFnZSBmcmFtZSB3aW5kb3cKZXRoZXJlYWwhISEhISEhCmNoYWxrIGRyYXdpbmcKZGFuaWVsIGxpYmVza2luZApkYWRkeS9mYXRoZXJseQpnb2xkZW4gbWFjaGluZSBwYXJ0cwpmbHVvIGRldGFpbHMKc21pbGV5CmNsZWFyIGdsYXNzCmdvbGQgbm9ibGUKYnJpZ2h0IGRlcHRoIG9pbCBjb2xvcnMKYXV0dW1uIHN1bnJpc2Ugd2FybSBsaWdodApuZW8gLSBpbXByZXNzaW9uaXNtCm5hdHVyYWwgc2Vuc3VhbGl0eQp0cmFuc2dlbmRlcgptZXRhbGxpYyBmbGVja2VkIHBhaW50CnNldHRpbmcKcHJvZm91bmQgZXBpcGhhbnkKc3R5bGUgb2YgbG9pcyByb3lvCmluIGxvbmcgZHJlc3Nlcwp3aXRoIGdvbGQgZXllcwppbiBhIGJsYWNrIGhvb2RpZQpqb2Ugd2ViYgpjaGFtYmxpc3MgZ2lvYmJpCmx5bm4gc2tvcmRhbApiYXJiYXJhIGtydWdlcgpqYWNxdWVzIHZpbGxlZ2xlCmluIHN0eWxlIG9mIGRpc25leSBwaXhhcgpkaWdpdGFsIHZpc2lvbmFyeSBhcnQKc21va2UgbWlzdCByYWluCm9oYXJhcnl1CnNvdWdldHN1CnRyYWluIHN0YXRpb24gZXhwbG9zaW9uCnJlZ3VsYXIgc2l6ZWQKc2FuZHkgY29sb3VycwpzYW5keSBncmVlbgpzYW5keSBiZWlnZQpvcmduaWMgaGVhZHBpZWNlCm9uZSBwZXJzb24gb25seQpoaWdobHkgZGV0YWlsZWQgc2hvdApvcmFuZ2UgcGFsZXR0ZQpjb2xvciBhY2NlbnRzCnN1YnRsZSBsZW5zIGZsYXJlCmFuY2llbnQgcm9tYW4gc2V0dGluZwp1bHRyYSBoZCA0IGsKcm95YWwgZ293bgppbnRyaWNhdGUgZ293bgpjeWNsZXMgZW5naW5lCndpbmQgYmxvd2luZyBoYWlyCnN0dW5uaW5nIGNnc29jaWV0eQp3aXRoIGxvbmcgZmxvcHB5IHJhYmJpdCBlYXJzCnRyaWFkaWMgY29sb3IgZ3JhZGluZwpmYWUgd2lsZHMgc2t5CmVsYWJvcmF0ZSBvcm5hdGUgZ3Jvd3RoCnJlbmRlcmVkIHdpdGggYmxlbmRlcgpzdHJlZXQgbGFtcAp3ZWFyaW5nIGFuIGVneXB0aWFuIGNyb3duCmF0ZWYKZ29kIGVtcGVyb3Igb2YgZHVuZQpkaW1lbnNpb24Kcm9uIG11ZWNrCnJhbSBza3VsbCBoZWFkcGllY2UKbWFydGluZQpzb2Z0IHN0dWRpbyBsaWdodApoZWF2eSBwaWdtZW50CmhlYXZ5IGltcGFzdG8gdGVjaG5pcXVlCmJsdWUgYXVyYQpydXNzaWFuIHNoYW1hbgpjaWdhcmV0dGUgaW4gbW91dGgKYWxlc3NpbyBhbGJpIGFuZCBzaGluIGplb25naG8KMy80IHNpZGUgdmlldwpjb21iYXQgc2V0dGluZwpwaXJhdGUgc2V0dGluZwpob2d3YXJ0cyBzZXR0aW5nCmNhbm9uIHIgNQp3ZWFyaW5nIG1vbnN0ZXIgaHVudGVyIGFybW9yCnByaW5jZXNzIGRpYW5hCmZsYXdsZXNzIGNvbXBvc2l0aW9uCmJsYWNrIGVsZWdhbnQgaGFpcgpzdHJlZXR3ZWFyIGdyYXBoaWMgZGVzaWduCndhYmkgLSBzYWJpCmNvbmZ1c2VkIGZhY2lhbCBleHByZXNzaW9uCjEzMDk5ODg5MDAKMzE1NjM1MDk3NQpiYXNzIGRydW0KY29ycmVjdCB3b2xmIG11enpsZQpjeWJlcnB1bmsgYWVzdGhldGljcwpmbGF0IHBhaW50aW5nCnJveWFsIGNhcGUKY2FpdCBtaWVycwptaWNoYWVsIGhvcHBlbgpib3JpcyB2YWxlam8uIG9jdG9wYXRoIHRyYXZlbGVyCmluIGEgc292aWV0IHByb3BhZ2FuZGEgc3R5bGUKZm9ybG9ybgphbmltZSBjaGFyYWN0ZXIgYXJ0CmludGVyaW9yIGJhY2tncm91bmQKZ29sZGVuIHJhdGlvIGJhY2tncm91bmQKY293Ym95IGJlYm9wIGFydCBzdHlsZQpqb2hhbm5hIG1hcnRpbmUKZXh0cmVtZWx5IGRldGFpbGVkIGFydGdlcm0KZGFvIHRyb25nIGxlCnN1YmplY3QgYWN0aW9uIDogaG9sZGluZyBzaWduCmxvdyAtIGtleSBzdHVkaW8gbGlnaHRpbmcKc29mdCBuYXR1cmFsIGxpZ2h0aW5nCnBvaW50eSBtYXNrCnd5bmRoYW0gbGV3aXMuIGJlaGFuY2UKcG9zaW5nIHdpdGggY3Jvc3NlZCBhcm1zCmhpZ2ggLSBxdWFsaXR5IGRpZ2l0YWwgYXJ0CmludHJpbnNpYyBkZXNpZ24KZmFudGFzeSBhZXN0aGV0aWMhCnNhZCBleWVicm93cwpmaW5lbHkgZGV0YWlsZWQgaWxsdXN0cmF0aW9uCnZpZ25ldHRlIHRpbHQtc2hpZnQKdHJpY2tsaW5nIHdhdGVyCmxheWVycyBvZiBjb2xvcmZ1bCByZWZsZWN0aW9ucwpjbG90aGVkIGluIGV0aGVyZWFsIGJhdHRsZSBhcm1vcgpzdWJtZXJnZWQgaW4gd2F0ZXIKaGVucnkgdGF5bG9yCnJlZGRpc2ggZ29sZCBoYWlyCnN5bnRod2F2ZSBhcnQgc3R5bGUKc2hhcnAgLSBmb2N1cwpzdXBlciAtIHJlc29sdXRpb24gbWljcm9zY29weQpwdGVyYW5hZG9uIHN0eWxpbmcKNCBkaW1lbnNpb25zCnN0b3J5Ym9hcmRpbmcKc3BlZWNoIGJ1YmJsZXMKMiAtIGRpbWVuc2lvbmFsCmNpbmVvdmlzaW9uCmZhaXJ5dGFsZSBzdHlsZQpvbiB0aGUgZmllbGQKc29jY2VyIHBsYXllciBhbnRvaW5lIGdyaWV6bWFubgpzYWJiYXMKdmFtcGlyZSBmYXNoaW9uCnNlbXBlCmFmcm9mdXR1cmlzdApmcm9tIGtpbmdkb20gaGVhcnRzCmF0bW9zcGhlcmljIGRyZWFtc2NhcGUgcGFpbnRpbmcKaW5zaWRlIGEgd2F0ZXJmYWxsCmNvbG9ybGVzcwpjaGlzZWxlZCBmZWF0dXJlcwpkZXNjcmlwdGlvbgpkYXJrIGxpdCBjYW5kbGVzCmFic29sdXRlbHkgZ29yZ2VvdXMKaGlnaGx5IGRldGFpbGVkIG1lbHRlZCB3YXgKZGlnaXRhbCBwcm92aW8gCnNjaSAtIGZpIGRldGFpbHMKZGV0YWlsZWQgYnJ1c2ggc3Ryb2tlcwp2ZXJ5IGRldGFpbGVkIHBob3RvZ3JhcGgKc3RhciB3YXJzIGNhdmVybiBpbnRlcmlvcgplbnRpcmUgY2l0eSB2aXNpYmxlCnJldHJvIGFyY2hpdGVjdHVyZQpvdmVybGFpZCB3aXRoIGN5cmlsbGljIHdvcmRzCmdlcm1hbiBleHByZXNzaW9uaXN0IHdvb2RjdXQKdWtpeW8gLSBlIHBhaW50aW5nCmFjY3VyYXRlIGZpbmdlcnMKY2VsbCBhdXRvbWF0YQpjbG9ja3dvcmsgbWVjaGFuaWNhbApwcm9zdGhldGljIG1ha2V1cApwc3AKbW9iaWxlCnNpZGUgdmlldyBjZW50ZXJlZApjYXJ2ZWQgaW4gc3RvbmUKc2xhc2ggcGFnZQpwZXJzcGVjdGl2ZSBzaG90IGZyb20gdGhlIHNreQp0aGluIHlvdW5nIG1hbGUKYmxhY2sgYW5kIHdoaXRlIHRvbmVzCnBsYXlpbmcgd2l0aCBmb3hlcwpqZWFucyBhbmQgYm9vdHMKZXhwZW5zaXZlIHZvbHVtaW5vdXMgZHJlc3MKc3R5bGl6ZWQgcGJyIG1hdGVyaWFscwpzdG9ybXRyb29wZXIgLSBoZWxtZXQKZmlzaGluZyB2aWxsYWdlCm5lb24gc3RhbmR1cCBiYXIKYWxpZW4gbGlmZQpibGFjayBpbgpyZWVzZSB3aXRoZXJzcG9vbiBmYWNlCjIgdG9uZSBjb2xvcnMgb25seQpzdHlsZSBvZiBha2lyYSBtb3Rpb24gbW92aWUKbmV3IHllYXJzIGV2ZQpoYWlyIGlzIHRoZSBmb2N1cwpwYXN0b3JhbCBiYWNreWFyZCBzZXR0aW5nCnJvYm90aWMgYnVzdApza2V0Y2h5IGxpbmVzIGFuZCBicnVzaHN0cm9rZXMKbGlnaHQgYnJvd24KYW5jaWVudC4gYXRtb3NwaGVyaWMgbGlnaHRpbmcKcGVyZmVjdCBzdHJhaWdodCBsaW5lcwpzdGFydmluZyBhcnRpc3Qgd2VhcmluZyBvdmVyYWxscwppbiBhbiBhbGxleQpzdHlsZSBvZiBjdXRlIHBva2Vtb24KZ28gbmFnYWkKc2FkIGFuZCBpbnRyb3NwZWN0aXZlCmxvdWlzIHdpbGxpYW0gd2FpbiB3YXRlcmNvbG9yCmRhcmsgcGVvcGxlIGRpc2N1c3NpbmcKc3BlY3RhY3VsYXIgY2luZW1hdGljIHNjZW5lCnJ1aW5lZCBjaXR5IGluIGJhY2tncm91bmQKbWFnaWNhbCBwb3J0YWwgZ2F0ZXdheQpwYXRod2F5cwpleHRyZW1lbHkgcGx1bXAKYnJhbmQKbGFzZXIgZmlyZQpzY2llbmNlIGZpY3Rpb24gc2NlbmUKanVzdCB0aGUgZmFjZQp2ZW50cwphaXJzaGlwIGluIHRoZSBza3kKYWdlZCA0IDAKc2hyb3VkZWQgaW4gZm9nCmthd2FpaSBjdXRlc3Qgc3RpY2tlciBldmVyCnN0cmF3YmVycnkgZW1iZWxsaXNobWVudApjbGVhciBza3kgYW5kIGJhY2tncm91bmQKYXJ0IHBvdHRlcnkKc2VlZHMKaW4gdG9reW8gYWtpaGFiYXJhCm1lc2ggZmFicmljcwphaXIgdGVjaG5vbG9neQpsb3VkIGNvbG9ycwpzb2Z0IGV0aGVyZWFsIGxpZ2h0aW5nCmtleSBpcyBvbiB0aGUgY2VudGVyCmlvcyBhcHAgaWNvbgphbGllbiBwbGFudHMgYW5kIGFuaW1hbHMKZHJhcGVkIGluIHB1cnBsZQpnb2xkIHNpbGsKZHJhcGVkIGluIHB1cnBsZSBhbmQgZ29sZCBzaWxrCmRyYXBlZCBpbiBzaWxreSBwdXJwbGUgYW5kIGdvbGQKc2Vhc2hlbGxzCndhaXN0IC0gdXAKZXh0cmVtZSBjb250cmFzdCBhbmQgc2hhcnBuZXNzCmdyZXkgY2xvdWR5IHNraWVzCnN5bW1ldHJpY2FsIGlsbHVzdHJhdGlvbgpoZSBoYXMgYSBwaXN0b2whIQphbmF0b21pY2FsIGZpZ3VyZQpodW50ZXIgaHVudGVyCnNhbmQgc3Rvcm0gYXBwcm9hY2hpbmcKc2hhcnAgYnJpZ2h0IGNvbG9ycwpmbG9vciBwbGFuCnN1c3RhaW5hYmxlIG1hdGVyaWFscwpoZHBlCmxkcGUKcHAKcHMKZXJ1cHRpbmcgdm9sY2Fubwpqb2UgZ2IgZmVudG9uCmluIGthZXRoZSBidXRjaGVyCmJhcm9xdWUgc3R5bGUgcGFpbnRpbmcKbG9va2luZyB1cCBhdCB0aGUgY2FtZXJhCnZhbG9yYW50IGNoYXJhY3RlcgpoZCBuYXR1cmUgcGhvdG9ncmFwaHkKdG9yY2ggbGlnaHRpbmcKZGFyayBwdXJwbGUgc2NoZW1lCm9uIGEgcmFjZXRyYWNrCnJhcWliIHNoYXcKaXNvbWV0cmljIGFuZ2xlcwp2aWJyYW50IGNvbG9yZnVsIGdyZWVuIGxlYXZlcwpyb21hbiBzaGlwdW5vdgpzaXR0aW5nIG9uIHRoZSBpcm9uIHRocm9uZQpsaWdodCBzdHJlYW1zCm1ham9yIGFyY2FuYSBtYXNvbiBzcGFya2xlcyBza3kKZ2lhbnQgY29sdW1ucwpyaW4Kd2VhcmluZyBhIHNoaXJ0IHdpdGggYSB0aWUKZ2FsbG9waW5nCmNvbG9yZnVsIHNreQphaXJwb2RzCmJyaWxsaWFudCBtb2Rlcm4gY29sb3JzCmtleWZyYW1lCnR1ZG9yIGFyY2hpdGVjdHVyZQppbiB0aGUgd2hpdGUgY2xvdWRzIGZhaXJ5bGFuZApwYWxlIGJsdWUgZXllcyEKaGF6bGVyIGV5ZXMKc21vb3RoIHNjYWxlcwpsYXlpbmcgaW4gYmVkCnNlZHVjdGl2ZSBzdGFyZQpmdWxsYm9keSBwaG90bwpzYWlsIG1hZGUgb2YgaHVtYW4gc2tpbgp1bmRlcndlYXIgYWQKdXBzaWRlIC0gZG93biBidWlsZGluZwp3aXRoIG1hbnkgZ29sZCBjb2lucwptYW55IHRyZWFzdXJlcwpibG93aW5nIG91dCBzbW9rZQpvbnNlbgpkZWhhemVkIGltYWdlCnZpbnRhZ2UgZGlzbmV5CmZsb29kcwo0IGsgcGhvdG9zaG9wCmRldGFpbGVkIGR5bmFtaWMgY29tcG9zaXRpb24KcHVycGxpc2ggc3BhY2UgaW4gYmFja2dyb3VuZAp2ZXJ5IGJlYXV0aWZ1bCBmYW50YXN5IGFydAp5YW5nanVuIGNoZW4KOCBrIGh5cGVycmVhbGlzdGljCnJlYWN0aW9uIGRpZmZ1c2lvbiBsaW5vY3V0CnRyYWRpdGlvbmFsIGRyZXNzCmRhbmsKbWFkZSBvZiBwYXBlcgp2ZXJ5IHJvdW5kCnZlcnkgY29uc2lzdGVudCBiZXppZXIgY3VydmVzCmxvb2tpbmcgb3V0c2lkZQpwb2xsZW4KZGlzY3dvcmxkIHRoZW1lCnBoaWxpcCBjb2xlcwp3YXIgam91cm5hbGlzbQpoZWFkIGJvd2VkIHNsaWdodGx5CndhdnkgYmxvbmQgaGFpcgpiYXR0bGUgY2hhc2VycwpuaWNvZGVtdXMgeWFuZy1tYXR0aXNzb24KcmFpbiBhbmQgc21va2UKc3RpbGwgZnJvbSBhIHdlcyBhbmRlcnNvbiBtb3ZpZQpjaXRpZXMgZmxvdXJpc2hpbmcKc3RyZXNzZWQgYW5kIGJ1cm50IG91dAp0aGUgdGFibGUgaXMgZnVsbCBvZiBmb29kCmNvaGVyZW50IGhhbmRzCmJsb25kZSBicmFpZGVkIGhhaXIKdWx0cmEgLSBxdWFsaXR5CnBsYXkgb2YgbGlnaHQKZGVlcCBwYXN0ZWwgY29sb3JzCnBldHp2YWwgbGVucy4gZmVhdHVyZWQgb24gZmxpY2tyCnN0ZXZlCmR1c3R5IGRpcnR5IGZsb29yCmVwaWMgcmVkIC0gb3JhbmdlIHN1bmxpZ2h0CnNhYXRjaGkgYXJ0CnNob3Qgb24gbmlrb24gZCAzIDIgMCAwCnBhaW50ZWQgbWV0YWwKZHVzdHkgZmxvb3IKcmlmbGVndW4KYW50ZWRpbHV2aWFuCmNpbmVtYXRpCnNpZW5uYQpmZWVsaW5nIGdvb2QKb3ZlcmNvbXBsaWNhdGVkCm1hdGggaW5zcGlyZWQKaGFpcnMKc3Ryb25nIHN0dWRpbyBsaWdodApoaWdoIGNvbnRyYXN0IGhkIG9wdGljcwpzcHJheSBwYWludCB0ZXh0dXJlCmJpZyBzdHJva2VzCmludHJpY2F0ZSBpbmsgZGVzaWducwphYnN0cmFjdCBnZW9tZXRyeQphYnN0cmFjdCBtYXhpbWFsaXN0IHBhaW50aW5nCmFic3RyYWN0IG1vc2ggcGl0CmRlc2lnbiBhd2FyZAphYnN0cmFjdCBwYWludGluZy4gOGsKa2FuZ2Fyb29zCm5veGlvdXMKbmlnaHQgYmFja2dyb3VuZAp0aGljayBibGFjayBsaW5lcwpzdHVkaW8gc2V0dXAKdHJ5cHRhbWluZQpvdmVyaGFuZ2luZyBicmFuY2hlcwpmZXJyb2x1aWQKY2FibGVzIG9uIGhlciBib2R5CmFydCBkZWNvcwpvdmVybG9va2luZyBhIGRhcmsgc3RyZWV0Cmpvcm11bmdhbmQgYW5pbWUKc2NyZWFtaW5nIHllbGxpbmcKc21vbAo4ayByZXNvbHV0aW9uIGRpZ2l0YWwgcGFpbnRpbmcKYWRyaWFubyBjZWxlbnRhbm8gYXMgdGVybWluYXRvcgpwbHV0dXMgc3UKY2hyaXMgc2NhbGYKYmlsbHkgY2hyaXN0aWFuCmdyZXkgYW5kIGdvbGQgY29sb3IgcGFsZXR0ZQpwb2tlbW9uIGNhcmRzCjM1bW0g4oCUdyAxOTIwIOKAlGggMTA4MAphZW9uIGZsdXgKY3liZXIgY2l0eQpodW11cwpyZWNyZWF0aW9uCnJvYm90aWMgZHJvbmVzCm9jY3VsdCBhYmlvZ2VuZXNpcwpwaWV0ZXIgcnVkb2xwaCBrbGVpam4KYWJyYWhhbSB0ZWVybGluawp3aW50ZXIgYXJtb3NwaGVyZQpob2xkaW5nIGEgcGlzdG9sCmxpbmUgLSBhcnQKZ29sZ2FyaSBmaW5kYnJva2VyCmFmcmljYW4gYW1lZXJhIGFsIHRhd2VlbApteXJ0bGUKYWZyaWNhbiBhcmdvbmlhbiEgYm9keSEgaW4gZnVsbApzbW9vdGggd2hpdGUgdGlnaHQgY2xvdGhlcyBzdWl0CmJ1c2h2ZWxkIGJhY2tncm91bmQKMTk3MHMgeC1tZW4gYXJ0IHN0eWxlCjE4MTEKbW9zdCBkZXRhaWxlZApvaWwgcGFpbnRpbmchISEKbXlzdGVyaW91cyBibGFjayBzbGltZQoxIHN0IHBsYWNlCmFpc2h3YXJ5YSByYWkKcmF5Y2FzdGluZwp2ZXJ5IHJlZmxlY3RpdmUKdHJvaWthIGdhbWVzCnZ0bWIKc2hvdWxkZXItbG9uZyBzdHJhaWdodApidXJuIHNjYXIgbGVmdCBjaGVlawphbGJ1bSBhcnQgY292ZXIKZnV0dXJpc3RpYyBwcm9kdWN0IGRlc2lnbgpiZWF1dGlmdWwgdmlzdWFscwpmdXR1cmlzdGljIHR5cG9ncmFwaHkKZ29sZGVuIGhvdXIgOCBrCnByZWNpc2Ugc3RpcHBsaW5nCmJsdWUgYW5kIHJlZCB0d28gLSB0b25lCnJldHJvIGxhYmVsCjEgOSAyIDAgcyBhZHZlcnQKZ3JlZW4gc2tpbi4gaW50cmljYXRlCmxvbCBzdHlsZQpza2FyeQpibHVlIHdpemFyZCBoYXQKcG9pbnRpbmcgaW5kZXggZmluZ2VyCnN0eWxlIG9mIGdyZWcgc2lta2lucwphbWF6aW5nIG9jdGFuZSByZW5kZXIKYmxvb2QgbGV0dGVyCnVsdHJhIGRldGFpbGVkIGNvbmNlcHQgYXJ0CmZyb250IHN5bWV0cmljYWwKYmVhdXRpZnVsIGRldGFpbGVkIGJsdWUgZXllcwphbGllbiByb2JvdCBsdWZmeQpsb3dicm93IHN1cnJlYWxpc20KYWxpZW4gc2hvcAphbGllbiBzcGFjZSBzaGlwIGZseWluZyBpbiBzcGFjZQpzdGVlbCBhcmNod2F5cwpyZWFsIHBvbGFyb2lkIHBob3RvCm1vdGhlcnNoaXAgaW4gdGhlIHNreQozIGQgY2hhcmFjdGVyIGNvbmNlcHQgYXJ0d29yawoxIDkgNCA2CmR5bmFtaWMgYWN0aW9uIHBvc2VzCnVudXNlZCBkZXNpZ24Kd2l0aCBoZWxsaXNoIGRldmlsIHdpbmdzCmFtYXRlcmFzdQo1MG1tIHBvcnRyYWl0Cm5lb24gcmFkaW9hY3RpdmUgc3dhbXAKcG9wIGFydCBjYXJ0b29uIHN0eWxlCmFsaXZlIGNvbG9ycwpiaWcgc2l6ZQpjb2xvciBjb3JyZWN0ZWQKbWF5b25uYWlzZQphbWVyaWNhbiBtY2dlZSdzIGFsaWNlCmhlYXZ5IHZpZ25ldHRlIQpzcGVja3MKYmxhY2sgb296ZQpkaWdpdGFsIGFydCBvbiBwaXhpdgpyb2NreSBlbnZpcm9ubWVudApzdW4gbGlnaHQgcmF5cwpwaG90byB0YWtlbiBvbiBmdWppZmlsbSBzdXBlcmlhCnZlcm1pbGxpb24KaGlnaGx5IGFydGlzdGljCnlvdW5nIGFuZCBiZWF1dGlmdWwKYWxhYmFtYQp0aHJlZSB0b3dlcnMKd2hlZWwKYW4gYWxpZW4gbGFuZHNjYXBlIHZpZXcKY2luZW1hdGljIGxlbnMgZmxhcmUKYmVhdXRpZnVsIGNvbG9yZnVsCmtlbm55IHdvbmcgeCBwb3AgbWFydApzcGFjZSBtb2xseQoxIDkgOCA5IG1vdmllIHN0aWxsCmdsYXNzIHBsYXRlIHBob3RvZ3JhcGh5CndlYXJpbmcgYSBiZXJldApzYW5nc29vIGplb25nCm1vYXQKcm9jayBwYWludGluZwpjb3NtaWMgdW5pdmVyc2UKYW5jaWVudCBncmVlayBzY3VscHR1cmUKYW5jaWVudCBncmVlayBwb3R0ZXJ5Cm11c2N1bGFyIGJvZGllcwphdXRvZGVzayAzZCByZW5kZXJpbmcKdi1yYXkgY29sbGVjdGlvbgphcm5vbGQgM2QgcmVuZGVyCmZhdXggcGFpbnRpbmcKZmlsbWF0aW9uIGFuaW1hdGlvbgplYXRpbmcgYSBidXJnZXIKYW4gYXJtb3JlZCBjb3JlIG9uIHRoZSBncm91bmQKdGV4dHVyZSBlbGVjdHJvbmljIGNpcmN1aXQKdGV4dHVyZSBjaXR5IGF0IG5pZ2h0CmZ1bGwgbW9vbiBvbiB0aGUgc2t5CmFuIGFzaWFuIHdvbWFuCndpdGggdmlsbGFnZQphbiBlZXJpZQphbiBlbGVnYW50IGNvdXBsZQpuYXR1cmFsIGxpZ2h0bmluZwplbGVnYW50IGxpZ2h0aW5nCmhpZ2ggbGV2ZWwgb2YgZGV0YWlscwp2ZXJ5IHBvZXRpYwpzY2lmaSBzcGFjZSBzdGF0aW9uCmpvcm11bmdhbmRyCmhvcnJpZmljIGRpZ2l0YWwgYXJ0CnBldHJvbCBhZXN0aGV0aWMKbm8gcmVkIGNvbG91cgpjb2xvcmZ1bCBmaXNoCndpdGggZmV3IGZpcmUgcmVkIGhpZ2hsaWdodHMKcGhvdG8gcmVuZGVyCnV0aWxpdHkKYm9zcyBiYXR0bGUKaG9saWRheSB2aWJlCmZhbnRhc3kgcmFjZXMKZHVzdHkgbGlnaHQKaG9sb2RlY2sKdG9nZ2xlcwp3aW5keSBiZWFjaAptZWx0aW5nIGdsYXNzCjhrIGhkciBvY3RhbmUgcmVuZGVyCndhdGVyY29sb3IgZHJhd2luZwppbiBhIG1lZGl1bSBmdWxsIHNob3QKcnVzc2lhbiBhbmQgamFwYW5lc2UgbWl4CnN0YXJyeSBza3kgaW4gYmFja2dyb3VuZAohISEgc2hhbGxvdyBkZXB0aCBvZiBmaWVsZCEhIQpjb2xvciBrb2RhayBmaWxtIHN0b2NrCnJpY2ggZGVlcCBwaW5rCmdvcmdlb3VzIHdvbWFuCihib29rcykKcm9ib3QgaGFuZHMKZ3JpbSBnd2VudCBjYXJkCnJlbmFpc3NhbmNlIHBvcnQgY2l0eSBiYWNrZ3JvdW5kCmFnaW5nCmluZXZpdGFiaWxpdHkKc29mdGVuZWQgZGlmZnVzZSBsaWdodApraXRjaGVuIGNvdW50ZXIKd2l0aCBnbGFzc2VzIG9uCmZhbnRhc3RpYyBzcGFjZQpzY2VuZSBpbiBhbiBvcGVuIGZpZWxkLiAxIDggOSAwCndpZ2dsaW5nIGEgd2Vhc2VsCnRlc3RpbmcgY3VzdG9tCmJpcmQncyAtIGV5ZSB2aWV3CmV1Y2xpZCBjbGFzcwppbmsgc3BsYXNoZXMKYnJpZ2h0IHJlZCBkZXNlcnQgc2FuZHMKYnJpZ2h0IHllbGxvdyBhbmQgcmVkIHN1bgphcnQgZGlyZWN0ZWQgZmlsbWljCnN0b29kIGluIGEgbGFiCmNpbmVtYXRpYyBoZWFkc2hvdCBwb3J0cmFpdApmYWNlIGluIHdhdGVyCndpdGggdmljdG9yaWFuIGNsb3RoaW5nCnN0b29kIGluIGEgc3VwZXJtYXJrZXQKcml0dWFsIG9jY3VsdCBnYXRoZXJpbmcKYmxhY2sgYW5kIHdoaXRlIGZpbG0gcGhvdG9ncmFwaHkKb2xkZXIgd29tYW4KZ2xvb215IG1lZGlldmFsIGJhY2tncm91bmQKbmlnaHRnb3duCmJyb2tlbiBwaWVjZXMKcGhvdG8gc2hvdCBteSBtYXJ0aGEgY29vcGVyCmFsZXggbWFrc2lvdiBhbmQgam9obiBwdWdoCmVsZWdhbnQgbWluaW1hbGlzbQp0MTAwCnRoZSBob2JiaXQgY29uY2VwdCBhcnQKdGhyZWUga2luZ2RvbQphbmNpZW50IGNoaW5lc2UgcHJpbmNlc3MKc2V2ZXJhbCB3YXRlcmZhbGxzCndpdGNoY3JhZnQhCm1vc3MgbGFuZHNjYXBlCnJlZnJhY3RpdmUgY3J5c3RhbAp2aW5leWFyZApnb2xkIHJhbSBob3JucwpzY2kgLSBmaSEhCnRlbXBsZSBydW4KZmlzdCBmaWdodAppJ2QgbWFrZSBhIGRlYWwgd2l0aCBnb2QKc2hhcmluZyBhIHBpenphCmludHJpY2F0ZSBza3kKaXJpZGlzY2VudCBmYWJyaWMKY3lib3JnIGJvZHkKZGVhdGhwdW5rCmhvbGRpbmcgYSBwb3N0Y2FyZCBmcm9tIGNoaWNhZ28Kd2hpdGUgamFja2V0CnZhcmlvdXMgc3R5bGVzCmd1bnRoZXIgdm9uIGhhZ2Vucwp3ZWFyIGFuZCB0ZWFyCnNoZWxsIHNob2NrZWQgZXllcwpzb3ZpZXQgaW50ZXJpb3IKYW5na29yIHRob24KcGhvdG9ncmFwaHkgaGlnaHQgcXVhbGl0eQphbmdsZXIgZmlzaCBzY3VscHR1cmUKaHlwZXJyZWFsaXN0aWMgYW5hdG9teSBjb250ZW50CmVtcHR5IGJsb29keSAtIGJsYWNrIGV5ZXNvY2tldHMKcG9rZXIKdGhpbiBmYWNlIHN0cnVjdHVyZQpzbW9rZSBiaWxsb3dzIG92ZXIgdGhlIGhvcml6b24KbWFkIGN1dHRsZWZpc2gKbWFkZSBvZiBuZW9uIGxpZ2h0CmFuaW1hbCBzbG90aApzbm93eSB3aW50ZXIgY2hyaXN0bWFzIG5pZ2h0CndoaXRlIGJsYWNrIGZhZGUgYnJhaWRlZCBoYWlyCmRhcmsgbGlnaHQgbmlnaHQgYnJhaWRlZCBoYWlyCmluIHdoaXRlIGNsb3VkcyBmYWlyeWxhbmQKc3Vuc2V0IGluIGEgdmFsbGV5CnNob3J0IGJyb3duIGhhaXIgYW5kIGxhcmdlIGV5ZXMKYW5pbWUgYmFyYmllIGluIHdoaXRlIHN0b2NraW5ncwpwYXR0ZXJuZWQgY2xvdGhpbmcKZGFyayBsaWJyYXJ5CnNwb3J0IGJyYQpoYW5kIHRyYW5zcGxhbnRlZCB0byBoZWFkCnByb2ZpbGUgY2xvc2UtdXAgdmlldwpha2lrbyB0YWthc2UKOCAwIHMgYW5pbWUKd2l0aCBpbmZsdWVuY2Ugb2YgamVyZW15IG1hbm4KbWF1cmljZSBzYXBpcm8KYmx1ZSBzaG9ydHMKY3VydnkgYm9keQpyZWQgc2lsayBzY2FyZgpibGFjayBzY2FyZgphbmltZSBnb2RkZXNzCndpdGggb25lIHNtYWxsCm1hdHJpYXJjaHkKZnVuaW1hdGlvbgpzdHJvbmcgc3BvdGxpZ2h0cwpmcm9kbwpibGFjayBzY2xlcmEgd2hpdGUgcHVwaWwKdmFyeWluZyB0aGlja25lc3MKbWFuZ2EgcGVuCm9jZWFuIGNsaWZmIHNpZGUKc3BpZGVyIG5lc3QKc2NyYXB5YXJkCnN1Ym1lcmdlZCBkcmFtYXRpYwp0aHJlZSBwaWVjZSBzdWl0CmNvbG9yZnVsIGZlYXRoZXJzCmZlbWFsZSBiYXNlYmFsbCBwbGF5ZXIKZ2lybCBpcyBydW5uaW5nCm1lY2hhbml6ZWQgdHJhbnNwb3J0Cm5hdnkgZmxhZ3MKbWFkZSBpbiBycGcgbWFrZXIKaW4gYmx1ZSBhbmQgeWVsbG93IGNsb3RoZXMKY3Jpc3Agc21vb3RoIGxpbmVzCmJsdWUgYmxhY2sgZ29sZAphbmltZSB3b21hbiBmdWxsYm9keSBhcnQKaWxsdXN0cmlvdXMgY2xvdGhlcwpyaW0gbGlnaHRzIHdsb3AKaWNoaWdvCnNoYXJwZW5lZCBpbWFnZQpibGFjayBib2R5c3VpdAphcnRzdHlsZSA6IGlseWEga3V2c2hpbm92Cm5pZ2h0IGNpdHkgaW4gdGhlIGJhY2tncm91bmQKbWlkIGFpciBzaG90CmFubmloaWxhdGlvbgp1bmF3YXJlIG9mIHlvdXIgdGlueSBleGlzdGVuY2UKZGlzbmV5ISEhIQooICggdGhvbWFzIGtpbmthZGUgKSApCiggKCBtYWtvdG8gc2hpbmthaSApICkKZGV0YWlsZWQgNCBrIG9pbCBwYWludGluZwpwb3Ygc2hvdApkICYgZCBjaGFyYWN0ZXIgcmV2ZWFsCnNhbmRyYSBjaGV2aWVyCjEgOSAyIDAgcyBwaG90b2dyYXBoCmh5cGVyIGRldGFpbGVkIHdvbGYgLSBsaWtlIGZhY2UKOSAwIC0gcyBmYXNoaW9uCnBvaW50eSBzaGVsbApoaWdobHkgZGV0YWlsZWQgZnVyCnNoZWxsIGNvbGxhciEhbAphbnRocm9wb21vcnBoaWMgc2FtdXJhaSBiZWFyCmFudGhyb3BvbW9ycGhpYyBzaGFyawpkYXJrIGdyYXZleWFyZCBzY2VuZQp0dXJ0bGUgc2hlbGwKYW50aHJvcG9tb3JwaGljIHR1cnRsZSBoZXJvCmVsZWN0cm9uaWMgaGFyZGNvcmUgbXVzaWMKd2VhcmluZyB2aWN0b3JpYW4gYnJhc3MgZ29nZ2xlcwpkb3RhIDIgY29uY2VwdCBhcnQKd2VhcmluZyBzdHJhdyBoYXQKYWkgc3RhcnR1cApyZWQgYXBwbGVzCmFyYWIgYW1lZXJhIGFsLXRhd2VlbAptYWlkZW4KZmFpcnlsaWtlCnBhbGV0dGUga25pZmUgYmFja2dyb3VuZApzb21lIGJlYXJkCmFyY2FkZSBtYWNoaW5lCvCfkqMg8J+SpfCfkqMg8J+SpQpiaW9waGlsaWEKbGlmZS4gYW1lcmljYSAyIDAgOSA4Cm11bHRpIGNvbG9ycwpoaWdoIGZhbnRhc3kuIHJveW8KNGsgaGlnaCBxdWFsaXR5IGJlc3QKY2xvc2UgdG9nZXRoZXIKZm9nZ3kgZGFyawp2ZXJ0aWNhbCBsaW5lcwphcm1vdXJlZCB3YXJyaW9yCmFybXkgb2Ygcm9ib3RpYyBzcGFjZSBwZW5ndWlucwphZ2UgMyAwCmJvdGggZmFjZXMgdmlzaWJsZQp0ZWxsdGFsZSBnYW1lcyBzdHlsZQpzY3JlZW4KaWNlIGdhdGUKcmFuZG9tIGFydGlzdApiZWF1dGlmdWwgYXJ0aXN0IHJlbmRlcmluZwpyZWFsaXN0aWMgYW5hdG9taWNhbCBwcm9wb3J0aW9ucwphbWF6aW5nIGNvbmNyZXRlIHNjdWxwdHVyZQpza2V0Y2h5IGV4cHJlc3NpdmUgbGluZXdvcmsKYm9sZCBtb29keSBjb2xvcnMKZmxhbWJveWFudCBjbG90aGVzCmZsb3dlcmJlZHMKZ2FsYXh5IHJlZmxlY3RlZCBpbiBoZWxtZXQKbG9vbWluZyBvdmVyIGVhcnRoCnJpZ2h0IGFsaWduCm5vIHNwb3QgcmlnaHQgZXllCmluc2lkZSBoYXVudGVkIGhvdXNlCmNsb3NldXAgcGFpbnRlZCBwb3J0cmFpdAp0aGVyb29raWVzCm9mIHBlcHBhIHBpZwphcnRpc3RpYyBsYW5kc2NhcGUKc3RhaW5lZCBnbGFzcyBmdXR1cmlzdGljIGNodXJjaApmcm9tIGhvcnJvciBtb3ZpZXMKc3VtbWVyIHVucmVhbCBlbmdpbmUgNQpicm93biBzdWl0IHZlc3QKYXJ0d29yayBhYm91dCBhIHJvYWQgdG8gZnJlZWRvbQooICggbWlzdHkgYXRtb3NwaGVyZSApICkKdGltZSBkcmFnZ2luZyBvbiBmb3IgdG9vIGxvbmcKdG9vdGgKYXQgYm9yb2J1ZHVyCm4gLSA2CmFuZHJlaSByeWFib3ZpY2hldgpicm9uemUgYmlvbWVjaGFuaWNhbAphc2hlcyBjcnlzdGFsCmNvbG9yZnVsIHBsdW1hZ2UKb3JhbmdlIGdyZXkgd2hpdGUKYXMgb3ZlcndhdGNoIGNoYXJhY3Rlcgp1bmRlcmJpdGUKYXNpYW4gd29tYW4KY2xheSB3aWxzb24Kc3BhaW4gcm9kcmlndWV6CmFzbGFuIHRoZSBsaW9uCmFzcGljIG9uIHBsYXRlCnRvdXJpc3QgbWFwCmJvZHkgYXJtb3VyCmltcGVuZGluZyBmZWFyCnBvc2VzCnRzdXRvbXUgbmloZWkgYXJ0CmJydXRhbCBodW1hbiBkZXRhaWxlZCEhIQprbmVlcyB0dWNrZWQgaW4gfCByYWluIGZhbGxzCnByaW50IG9uIG1hZ2F6aW5lCnN1biBzaGluaW5nIHRocm91Z2ggdGhlIGxlYXZlcwpzYXR1cmF0aW9uIDQwCnBob3RvIC0gcmVhbGlzdGljIG5pa29uIDMgNSBtbQpzZCB2aWRlbwpibHVlIGFuZCByZWQgaGFpcgpib3R0b20gYm9keSBjbG9zZSB1cApjcmFpZyBtaWxsZXIKd2hvbGUgYm9keSBpbiBmcmFtZQpseWluZyBhdCB0aGUgYmVkCmhpcCBlbW8gZmFzaGlvbgp0c2hpcnQhIQpzaG9ydHMhIQppbnNwaXJlZCBpbiBzdXBlciBib21iZXJtYW4KcGxheWluZyBwaWFubwpsdml2IGhpc3RvcmljIGNlbnRyZQphdWRpbyB3YXZlZm9ybQpwdXIgY2hhbXBhZ25lIGRhbWVyeQp0aGUgbWFzdGVycwphbG1hIHRhZGVtYQpsZWFmcwpiaXJjaGVzCmhkIHZlY3RvciBhcnQKYXdhcmQgd2lubmluZyBvbiBiZWhhbmNlCjQgZGcKd2VhcmluZyBuYmEgamVyc2V5CnNpZGUgcG9ydHJhaXQgZGFyayB3aXRjaApoaXAgY29ycG9yYXRlCnZlcnkgcHJldHR5IGV5ZXMKYmlnIGNhdAp3b29kIGRvb3IKb21pbm91cyBhbmQgZWVyaWUgZm9yZXN0CnRlZW5hZ2UgYm95CmR1c3QgYW5kIHNhbmQgaW4gdGhlIGFpcgp0b3AgNiB3b3JzdCBtb3ZpZSBldmVyIGltZGIgbGlzdApiYWxkIHBhdGNoCmludHJpY2F0ZSBzeW1tZXRyaWNhbCBhcnR3b3JrCmxhcmdlIHNtaWxlCnNpdHRpbmcgb24gYSBsb2cKcHVycGxlIGZlYXRoZXJzCmN5YmVyIGxlZCBuZW9uIGxpZ2h0aW5nCm1vbGR5IHdhbGxzCnRocmVlIHF1YXJ0ZXIgc2hvdApmYWlyeXRhbGUgZm9yZXN0CmJhbGQgbWljaGFlbCBqYWNrc29uCnNlY3RvaWQKYmFsZHVyJ3MgZ2F0ZSBjaGFyYWN0ZXIgcG9ydHJhaXQKYXBwbGUgc2t1bGwKdHdpc3RlZCB0ZW50YWNsZXMKY2FuZHkgZGVjb3JhdGlvbnMKMSA5IDkgOSBhZXN0aGV0aWMKbXVsdGljb2xvcmVkIGRpZ2l0YWwgYXJ0CnZlY3RvciBpY29uCndlYXJpbmcgZ29sZCBjaGFpbgpiYXJiaWUKbm8gbWFrZXVwIHdhdnkgaGFpcgp2aWtpbmcgYmVhcmQKYmFyb3F1ZSBpbnRlcmlvcgpzbW9rZSBkZWJyaXMKYmxvbmQgaGFpciBibHVlIGV5ZXMKZGVmaW5pdGlvbgpoaXAgLSBob3AKZXhwYW5zaXZlIGNpbmVtYXRpYyB2aWV3CnNjaSAtIGZpIGlsbHVzdHJhdGlvbnMKZmluZCB0aGUgaGlkZGVuIG9iamVjdApiYXR0bGUgYmV0d2VlbiBhbmdlbHMgYW5kIGRlbW9ucwpoaXAgaG9wIGFsYnVtIGNvdmVyIGFydApiYXltYXgKc2tlbGV0b24gY29ycHNlCmZ1bGwgYm9keSBwaWN0dXJlcwpiZWFyZGVkIGJlYXV0aWZ1bCBtYW4KZ2lvcmdpbyBncmlmZmEKcGVyc2lhbiBmb2xrdGFsZSBhcnRzdHlsZQpibGFja291dApzYXdibGFkZSBib3JkZXIKaGFyZHN1cmZhY2UgYXJtb3VyCmJsb29kIHN0YWlucyBvbiBzaGlydAp0cmFkaXRpb25hbCBkcmF3aW5nIHN0eWxlCmhpZ2ggZGV0YWlsIGRyYXdpbmcKaW50cmljYXRlIGFjY3VyYWN5CmJyaWxsaWFudCBnbGl0dGVyaW5nIGhhaXIKdmVpbGVkIGZhY2UKYmVhdXRpZnVsIGFyYWIgd29tYW4KMmQgYXJ0IGNvdmVyCnZlcnkgZ3JhaW55IGltYWdlCmNoZXN0IGFuZCBmYWNlCnNjaS1maSB0aWJldGFuIGZhc2hpb24KOGshCnZlcnkgc2hhcnAgbGlrZW5lc3MKcmltIGxnaHQKaGlwIGhvcCB2YXBvcndhdmUKd2F0ZXIgZmlzdHMgb2YgZnVyeQpqdW1waW5nIGxlYXBpbmcgaGVyb2ljIGF0dGFjawp2aWJyYW50IGNpbmVtYXRpYyBsaWdodGluZwpmIDQKemhvdXpodWFuZyBhbmNpZW50IHRvd24KYmVhdXRpZnVsIGFuZ2VsIGdpcmwgcG9ydHJhaXQKZ29sZCBicmEKcmF0aW5nOiBnZW5lcmFsCnR3aW50YWlscyB3aGl0ZV9nbG92ZXMKYmVhdXRpZnVsIGFuaW1lIGhpZ2ggc2Nob29sIGdpcmwKY29sb3VyZnVsIHJvc2VzIGFuZCBnbGFkaW9saQp2aW9sZW50IGFuZCB2aWNpb3VzIGFwcGVhcmFuY2UKd2l0aCBoZWFkIHBob25lcwppbnRyaWNhdGUgY29sb3JzCmdpbGRlZCB3aXRoIGdvbGQKbmVjcm9wb2xpcwpsaWdodCBzaW11bGF0aW9uCnVsdHJhcmVhc2xpc3RpYwpleHBsb2RpbmcgbmVidWxhZQphc2lhbiBkZXNjZW5kCmRyYW1hdGljIGV4cGxvZGluZyBuZWJ1bGFlCnBhbGUgcG9yY2VsYWluIHdoaXRlIHNraW4KY2xlYW4gcGVyZmVjdCBzeW1tZXRyaWNhbCBmYWNlCmxpZ2h0IHRhbgpyaWRlIGhvcnNlIGluIHNhaGFyYW4Kc2hpZWxkIGVtYmxlbQp0ZW5kdSBwb3NlCnR3aXN0aW5nIGxlYXZlcwptYXVzb2xldW0KZXhvdGljIGZleSBmZWF0dXJlcwpsZWF0aGVyIGplcmtpbgpiZWF1dGlmdWwgY293Ym95IHdpdGNoCnN0eWxlIG9mIGhheWFvIG1peWF6YWtpCm5vIGJsdXIgZG9mIGJva2VoCmJsYWNrIGxvbmcgaGFpciEKYXN0cm9uYXV0IHN0YW5kaW5nIGxvb2tpbmcKbWFyYmxlIGNhcnZpbmcKdGVkIG5heXNtaXRoCnRyZW5kaW5nIGFuaW1lIGFydApwcmV0dHkgYW5pbWUgY2hhcmFjdGVyIGRlc2lnbgp0aGUgYmF1aGF1cwpwb3J0cmFpdCBpbiB0aGUgc3R5bGUgb2YgY3Jhb2xhCmJlYXV0aWZ1bCBlbGYgd2l0aCBvcm5hdGUgcm9iZXMKZWxkZW4gcmluZyBjaW5lbWF0aWMgbGlnaHRpbmcKZ3JlZWsgZGFyayByaXR1YWwgbXl0aApwb2ludMOoIHBvc2UKb3ZlciAtIGRldGFpbGVkCmJlYXV0aWZ1bCBmYWlyeQpsaWxseSBjb2xsaW5zCmJhY2sgZmFjaW5nCnZ1bHR1cmUKb3JhbmdlIHNraW4gYW5kIGxvbmcgZmllcnkgaGFpcgp2aWNpb3VzIGFwcGVhcmFuY2UKd2hpdGUgd2luZ3MKaXJhbmlhbgpmbG93aW5nIGxvbmcgaGFpcgo4ayA0ayB1aGQgaW1hZ2UKYXJjcwpyZXRyby1mdXR1cmlzdGljCmluIGJpa2luaQpnaG9zdGJ1c3RlcnMgcHJvdG9uIHBhY2sKbG93IGFuZ2xlIG1pc3QKYmVhdXRpZnVsIGZ1bGwgYm9keSBjb25jZXB0IGFydApkZXRhaWxlZCBkZWVwIGJsYWNrIGV5ZXMKc3RlYW1wdW5rIGZpY3Rpb24KaW1hbG91CjMgZCBzY2lmaSBhcnQKdmlldyBmcm9tIHRoZSBleWVzCndoaXRlIGJ1aWxkaW5nCnJlZCBraW1vbm8gd2l0aCBmbG93ZXIgcGF0dGVybnMKaGlnaCByZXMgcGhvdG8KY2xvc2VkIHVwIHBvcnRyYWl0Cm11c2ljIGluIHRoZSBhaXIKbG9uZyBsaWdodCBwbGF0aW51bSBibG9uZGUgaGFpcgpoeXBlcnJlYWxpc3RpYyBwaG90byBsdWlzIHJveW8KaGlnaGVyIGRldGFpbHMKc2hpbnkgd2hpdGUgc2tpbgpleG90aWMgdHJlZXMKZ3JlZyBnYW5keQpoZWxsdGFrZXIKcnlhbiBkZW5pbmcKZmlyZSBkcmVzcwphcnRpZmljaWFsIGludGVsbGlnZW5jZSBnb2RzCmxhcmdlIHNjcmVlbnMKamlybyBtYXRzdW1vdG8gYW5kIHl1c3VrZSBtdXJhdGEKYmVhdXRpZnVsIG1vZGVsIGdpcmwKZXBpYyBibHVlIHNreQptYXN0ZXIgbGlmZSBkcmF3aW5nCmNoZXN0bnV0IGhhaXIKYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UgbWFjaGluZQpjaGFvcyBiZWF1dHkKbGlnaHQgZnJvbSB3aW5kb3cKc25vd3kgd29vZGxhbmQgbWVhZG93CnlvdW5nIHRlZW4KdG9vIG1hbnkgdGVldGgKZHJvb2xpbmcgdGVldGggYmFyZWQKYm9uZSBjcm93bgpib25lIGRyZXNzCnNlcmdlIGJpcmF1bHQKZ290aCBtYWtldXAKcG9seW1lc2gKcG9seWdyb3Vwcwp2aXZpZCEhCmV4dHJlbWVseSBldmVuIGxpZ2h0aW5nCmludHJpY2F0ZSBkZXRhaWxzIGFuZCBvcm5hbWVudHMKZHJhbWF0aWMgbGlnaHQgb24gZmFjZQpmcm9tIHBhdGhmaW5kZXIKa2FubyB0YW4neXUKa2FpZ2V0c3VkbyBhbmRvCm1peWFnYXdhIGNob3NodW4KZGV0YWlsZWQgbWF0dGUgZmFudGFzeSBwb3J0cmFpdApzdW1tZXIgbGFuZHNjYXBlCmZyb3plbiBsYWtlCmJsdXJyZWQgcGhvdG8Kc2FyY2FzdGljIHBvc2UKbWVjaCByb2JvdApwbGF0aW51bSBibG9uZGUgbG9uZyBoYWlyCm1vZWJpdXMgYW5kIGFscGhvbnNlIG11Y2hhCmNvbGQgY29sb3JzLiBpbnNhbmVseSBkZXRhaWxlZAphcnQgaGlnaCByZW5haXNzYW5jZSBhcnQKZmlzdCB0cmFpbmluZwpob2xseSBoZXJuZG9uIG9yaWdhbWkgc3RhdHVlCnBvaW50ZSBwb3NlcwptaW5pYXR1cmUgcG9yY2VsYWluIHBvcnRyYWl0CmJlYXV0aWZ1bCB0cm9waWNhbCBpc2xhbmQgYmVhY2gKdHJvcGljIHBsYW50cyBhbmQgZmxvd2VycwpzdW1tZXIgdmliZQpzYXJjYXN0aWMgc21pbGUgc2hvd2luZyB0ZWV0aAptYWdtYSBjYXNjYWRlcwpleG90aWMgZmlzaApyYXkgZ29kcwp3aXRoIHNwYXJrbGluZyBoYXplbCBleWVzCmVsbGVuIHJpcGxleQpmaXNoIHRhbmsKYXJ0IG9mIGludmluY2libGUKcmVhY2hpbmcgdG93YXJkcyB0aGUgaGVhdmVucwpwcmluY2VzcyBvZiBjYW5uYWJpcwptdXRlZCBjb2xvcmVkIGJvZHlzdWl0CmhhaXIgd2F2aW5nIGluIHRoZSB3aW5kCmFjY3VyYXRlIGZhY2lhbCBkZXRhaWxpbmcKYmVhdXRpZnVsISEhISEhISEhISEhCmZsb2F0aW5nIHVuZGVyIHdhdGVyCnRhbGwgdGhpbgprYWtlamlrdQpzdGF0ZSBvZiBtZWxhbmNob2x5Cndhc3RlCnVsdHJhIGNsZWFyCmNlbnRlcmVkZQpkaXNzaXBhdGUhIQpib3R0b20gdXAgbGlnaHRpbmcKam9obiB3aWxsaWFtCmJpYmxpY2FsIGZlbWFsZSBhbmRyb2lkCm11c2ljIGFsYnVtIGFydApzdGFuZGluZyBpbiBmcm9udCBvZiBsb3dyaWRlcgpzb2Z0IGxpZ2hpbmcKc3BlbGxmaXJlCndlYXJpbmcgY2hhaW5tYWlsIGFybW9yCmJlYXV0aWZ1bCBhZXN0aGV0aWMgYXJ0CmphbnVzeiBrYW1pbnNraQphbGVqYW5kcm8gaW5hcnJpdHUKYmlnIGJ1dGNoZXIgbWFuIHBvc2luZyBzY2FyaWx5CmJpZyBjaHVuZ3VzIGJvc3MKcmVuZGVyaW5nIDggawpiaWcgZXZpbCBjaXR5CnRyYXZlbCB1cHdhcmRzCmdsYXNzIHNoYWRlcgpiaWcgZ3JlZW4gdHJlZQpkaWdpdGFsIGNhcnRvb24gcGFpbnRpbmcgYXJ0CmJpZyB0b2FkCnByZWhpc3RvcmljIGNhdmUgcGFpbnRpbmcKY2xvdWQgZm9yZXN0IGluIGJhY2tncm91bmQKaCBlIGdpZ2VyCmNvc3BsYXkgYXdhcmQgd2lubmVyCmZvcmdlCmJpbGwgbnllIGFzIGphbWVzIGJvbmQKaGlnaGx5IGR2ZXRhaWxlZApib3R0b20gb2YgdGhlIHNlYQpleHRyZW1lIGRlcHRocwpiaW9tYXRlcmlhbApiaW9tZWNoYW5pY2FsIGRyZXNzCmZ1bGwgbGVuZ2h0IHZpZXcKbWlsaXRhcnkgb3V0Zml0CmJpcG9sYXIKdHJhaWxlciBwYXJrCmdsYXJlIG9uIHRoZSB3YXRlcgpiaXJkcyBleWUgb3ZlcmhlYWQgcGVyc3BlY3RpdmUKY2hlcmlzaGVkIHRyZWVzCndpdGggdGFsbCBnbGFzcyBza3lzY3JhcGVycwpzdW1lcmlhbiBnb2RkZXNzIGluYW5uYSBpc2h0YXIKYmlydGggb2YgdmVudXMKY29ybnJvd3MgYnJhaWRzCmZpbmUgZmlsaWdyZWUgZm9saWFnZSBsYWNlCmJsYWNrIGFuZCB3aGl0ZSBjYXQKZGF2aWQgdXpvY2h1a3d1Cm5lYXQgYmVhcmQKbmV3IGFsYnVtIGNvdmVyCnNvdWwgc2luZ2VyCnNvdXNhcGhvbmUKbmFrb2xraQpkZXRhbGl6ZWQgbmV3IHlvcmsgYmFja2dyb3VuZAppbiB0aGUgem9vIGV4aGliaXQKc2hlcGhlcmQncyBjcm9vawpkZXB0aCBkZXRhaWwKaGlzdG9yaWNhbCByZWVuYWN0bWVudAphcnQgYnJvdWdodCB0byBsaWZlCnBpY2Fzc28gYW5kIGRhbGkKYmxhY2sgZ290aWMgbGV0dGVyIG0KaWNld2luZCBkYWxlCmJsYWNrIGhvbGUgaW4gc3BhY2UKaW5rIHN0YWlucwpjb3NtaWMgcHVycGxlIHNwYWNlIQpibGFjayBtZXRhbCBiYW5kIGZvbnQKbG9va3MgbGlrZSB2YXJpY29zZSB2ZWlucwpicmFuY2hpbmcKdW5yZWFkYWJsZSB0ZXh0CmxvY2FsIGJhcgpkLiBpLiB5LiB2ZW51ZQpmbGV4IGJveCBwb3NpdGlvbgphbmltZSBuYXR1cmUKaGlnaGx5IGRldGFpbGVkIHRveQpzb2Z0IHN1cmZhY2VzCmFuZ3J5IGFuZCBoZWxwbGVzcwpob2xvZ3JhcGhpYyBjYXNlIGRpc3BsYXkKc2NpZmkgY3liZXJwdW5rCndyZXN0bGluZyByaW5nCmRyYWdvbiAtIGxpa2UKYmxvbmRlIC0gaGFpcmVkIHByaW5jZXNzCm9ybmF0ZSBkZXNpZ25zIG9uIGRlc2sKZmFsbGluZyBpbiBsb3ZlCmJsb25kZSBmZW1hbGUgamVkaQpibG9uZGUgZ2lybCBpbiBhIGNvc21pYyBkcmVzcwpjbGVhbiBhcnRzdHlsZQpwbGFpbiB3aGl0ZSB0c2hpcnQKcmVkIHJpdmVyCjMgZCBhcnRpc3QKaWNlIGNvbGQgYmx1ZSB0aGVtZQpwb3J0cmFpdCBnYXBtb2UgeWFuZGVyZSBncmltZGFyawpmbG9hdGluZyBzcGVsbGJvb2sKb25lIHB1bmNoIG1hbiBtYW5nYQpha2VoaWtvIGlub3VlIGFuZCByb3NzIHRyYW4Kcm9ib3QgcGhvdG9ncmFwaHkKZ3Jhc3MgbW91bnRhaW4gbGFuZHNjYXBlCmJsdXJlZCBiYWNrZ3JvdW5kCmRyZWFtbGlrZSBzdXJyZWFsaXNtCnVsdHJhIGZpbmUgZGV0YWlsZQpyZWQgdGFpbGNvYXQKaW50ZW5zZSBsZW5zIGZsYXJlCmR1bmdlb24gYW5kIGRyYWdvbgp0ZWNobmljYWwgZHJhdwpkZXNjcmlwdGl2ZQphdCAtIGF0Cm11bGxldCBsb25nIGhhaXJjdXQKbWVkaWV2YWwgYXJjaGl0ZWN0dXJlCmJvYXJkcyBvZiBjYW5hZGEgYWxidW0gY292ZXIKZXBpYyBjaW5lbWF0aWMgbGlnaHRpbmcKcmFpbmJvdyBzdHJpcGUgYmFja2dyb3VuZApib2VpbmcgNzM3IGNhYmluCnBvbHlnb25hbCBpcm9uIHN0ZWVsIHdhbGxzCnJlYWxpc3RpYyBlc3RhYmxpc2hpbmcgc2hvdAppc28gNTAKYm9vayBjb3ZlciEhISEhISEhISEhIQpzZWNvbmRoYW5kCmZyb250IG9mIGNhciBhbmdsZQpwaXJhdGUgdGhlbWVkCmhpYmlzY3VzCmNpcmNsZSBkZXNpZ24Kc29mdCBmZW1tZQpib3hpbmcgbWF0Y2gKYWxpZW4gY2FzdGxlIGluIGJhY2tncm91bmQKYmlnIGJhc3MgZmlzaGluZwpkZW5kcml0ZXMKYXhvbgpicmFpbnN0b3JtCjMgNSBtbSBibGFjayBhbmQgd2hpdGUKcHJvZmVzc2lvbmFsIHByb2ZpbGUgcGljdHVyZQpjYXIgY2hhc2UKZmluZ2VyIGJsZW5kIHNoYWRpbmcKYm9yamEKY3V0IHBhcGVyIHRleHR1cmUKaGFuZHMgcHJlc3NlZCB0b2dldGhlciBpbiBib3cKZmxhbWluZ29zCmphIG1peWF6YWtpCm1lYXQgYW5kIGJsb29kIHN0YWluZWQgZ2xhc3MKYW1hbGdhbWF0aW9uIG9mIGVtYmVycwpsb3B1dHluIGFuZCBtYXRjaGEKeW91ciBoZWFkIHR1cm5zIGJhY2sKYnJlYXRodGFraW5nIG1hc3RlcnBpZWNlIG9mIGFydAp3bG8gYW5kIHBldGVyIG1vaHJiYWNoZXIKY2hhcmFjdGVyIGhlYWRzaG90IGNvbmNlcHQgYXJ0CmJlYXV0aWZ1bCBkZXRhaWxlZCBmYWNlcwpicmlnaHQgZGVtb25pYyBnbG93aW5nIGV5ZXMKbGVlIG1hZGd3aWNrIGFuZCBodWJlcnQgcm9iZXJ0CmJyaWdodCB0cm91c2VyIHN1aXQgZm9yIGEgcmF2ZQpicmlnaXR0ZSBmcm9tIG92ZXJ3YXRjaAp3ZWFyaW5nIGEgYnVzaW5lc3Mgc3VpdApicm9uemUgc2N1bHB0dXJlIG9mIG1lZHVzYQptYW5keSBqdXJnZW5zIGdvbGRlbiByYXRpbwpwcmUgLSByYXBoYWVsaXRlIGJlYXV0aWZ1bApicm93biBwYXBlcgpyZW1icmFuZHQgc3R5bGUgcGFpbnRpbmcKc3RhbmRpbmcgb24gdG9wIG9mIGEgcGlhbm8KYW5pbWVzcXVlCmZsYXQgaXJvbmVkIGhhaXIKZ3JhcGhpY2FsIGVycm9ycwp3ZXQgYnJ1c2gKY3Jvd2RlZCBhaXJwb3J0CnRheGlzCnByaXNvbiBjaXR5CnRvdGFsaXRhcmlhbiBwcmlzb24gaXNsYW5kCm1pbGl0YXJ5IGJ1aWxkaW5ncwpicmlnaHQgY29sb3IgcGFsZXR0ZQpyb3R1bmRhCnJvbmRlbApkZXNzZXJ0cwpjb250cmFzdGluZyBsaWdodApvbiBkaXNwbGF5IGluIHRoZSBsb3V2cmUKYnVnYmVhciByYW5nZXIKaG9sZGluZyBwaXp6YQpyYXkgY2FzdGluZwpkcmFrIGZhbnRhc3kgZ29ibGluCmJ1c3QgcG9ydHJhaXQgb2YgYSBrbmlnaHQKb3JuYXRlIGRlY29yYXRpb24KcGFsZSB3aGl0ZSBkZXRhaWxlZCByZXB0aWxlIHNraW4KbWVkaWV2YWwgYXJhYmlhCm1vbmdlemkgbmNhcGhheWkKbXlzdGVyaW91cyB0ZW1wbGUgc2V0dGluZwpvbmkgaG9ybnMKZ29sZGVuIHNoYXBlcwp3aG8gaXMgbG9va2luZyB1cCBhdCBpdCBpbiBmZWFyCm1vb21pbgpicmlsbGlhbnQgZGF5bGlnaHQgdnIgb3MgdXgKcGVhY2VmdWwgYW5pbWFscwpvciBwZXJoYXBzIGEgZmFpcnkgdGFsZQppbmNsdWRpbmcgYSBtYXRhZG9yICYgYSBidWxsCmNhYmluZXQgb2YgY3VyaW9zaXRpZXMKY2FibGUgcGx1Z2dlZCBpbnRvIGN5YmVyZGVjawpjYWl0bHluIGZyb20gbGVhZ3VlIG9mIGxlZ2VuZHMKZGFycGEKZnJvbSBvdmVybG9yZApuaWdodCBpbiBhIGRhcmsgZm9yZXN0Cmx1c2ggd2lsZGxpZmUKd2l0aCBncmVhdCBiaXJkcwpoYXVudGVkIGhvdXNlIGludGVyaW9yCmNyYWNrcyBvZiBtYWdtYQooIG1hdHRlIHBhaW50aW5nCnBhaW50IHNtZWFyZWQgd2l0aCBwYWxldHRlIGtuaWZlCnNwcm91dGluZwpiYmMgcHJvbW90aW9uYWwgYXJ0d29yawpzdGFyIHRyZWsgOiB0aGUgbmV4dCBnZW5lcmF0aW9uCnNoYWRvdyBjYXN0IG9mIGRhcmsgY29ycmlkb3IKcmVhbGlzdGljIGZvcnRuaXRlCm1lYXR5CmNhbmRsZWxpdCBjYXRhY29tYnMKY2FybmF2YWwgZGUgYmFycmFucXVpbGxhCnNvZnQgbGlnaHQgbWlzdHkgeW9zaGl0YWthIGFtYW5vCmNhcnQKY292ZXJlZCBpbiBjcnlzdGFscyBhbmQgZ2xpdHRlcgpncmVlayBteXRoIGRpZ2l0YWwgcGFpbnRpbmcKaW5zaWRlIGFuIGVub3Jtb3VzIHZhc3QgY2F2ZQpzdHlsZSBvZiBpdmFuIGFpdmF6b3Zza3kKY2dzb2NpZXR5IHBvcnRyYWl0CmNvbnRyYXN0IHZvbHVtZXRyaWMgbGlnaHQKZmxhdCAtIGNvbG9yCmZvY3VzIHJlbmRlcgpjYXRuZXQKaW4gYSBjbGFzc2ljIDUgMCBzIGRpbmVyCmJhZCBza2luCnRodXMgc3Bva2UgemFyYXRodXN0cmEKZ2xhemUgb2lsIHBhaW50aW5nCnggLSBmaWxlcwpibHVycnkgYW5kIGdsaXRjaHkKcmV0cm8gc3R5bGUgYXJ0CmNlYXNlbGVzcyB3YXRjaGVyCmNlbGVzdGlhbCBnb2RkZXNzCmludHJpY2F0ZSBvaWwKd2VhcmluZyBjeWJlcnB1bmsgbGVhdGhlciBqYWNrZXQKbXlzdGljYWwgZmFudGFzeSBsYW5kc2NhcGUKcG91dApoeXBlcmVkZXRhaWxlZCBwaG90bwpwdWRpY2EgcG9zZSBib3VndWVyZWF1IHN0eWxlCm1heGltYWxpc3QgYXJ0IG5vdXZlYXUKY3lhbiBsaWdodG5pbmcKd2V0IGNsYXkKbm93IGF0IG1jZG9uYWxkcwpmdXNpbmcKYmlnIGFybXMKbWF0dGUgYmxhY2sgYmFja2dyb3VuZArihpIg4oOjIHNwZWN0cnVtIGRhcmtuZXNzIHByaW1lCndhcmhhbW1lciBmYW50YXN5IGFydArjgJAgc2NpYXJ0IPCfkpnwn5KcIG1zb24KcGxheXN0YXRpb24gMSBlcmEgZ3JhcGhpY3MKZ29vc2VtYW4KZmVhdGhlcnMgZ3Jvd2luZyBmcm9tIGFybXMKYW5pbWUgcmVhbGlzbSBzdHlsZQphbHBob25zZSBtdWNoYSBhbmQgYWxlbmEgYWVuYW1pCnJlZCBwYW5kYQprYXNhaQptaWtlIG1pZ25vbGEgc3R5bGUKZnJvc3R5IHdoaXRlIGV5ZXMKd2ludGVyIG1pc3QgYXJvdW5kIGhlcgp3aGl0ZSBwbGF0ZWQgYXJtb3IKZGFyayBhcmNhbmlzdApwaHlzaWNhbGx5IC0gYmFzZWQgcmVuZGVyCm1hbGRpdmVzIGluIGJhY2tncm91bmQKd2lsbG93eSBmcmFtZQpodWdlIHN5bW1ldHJpYyB3aW5ncwpmaXN0aW5nIG1vbmsKYnJvd24gYm9iIGhhaXJjdXQKY2hhcmFjdGVyIGRlc2lnbiBjb25jZXB0IGFydApjaGlzZWxlZApnb3JyaWxhegpubyBleWVicm93cwpzdHVkaW8gZ2hpYmxpIG1vdmllIHN0aWxsCmFzIGFuIHVnbHkgdGl0YW4KZHJ1bSAmIGJhc3MKa2luZ3Mgcm93IGluIHRoZSBiYWNrZ3JvdW5kCnpvb3RvcGlhIHN0aWxlCmNvbXB1dGVyIGdsaXRjaGVzCnlvdW5nIGdpcmxzCmdhbGFjdGljIGxpZ2h0IGNvbG9ycwpzdHJhdGhtb3JlIDIgMCAwCmV4dHJlbWUgaW50cmljYXRlIG1ldGFsIGRldGFpbHMKY2xlbWVudCBodXJkCmNoaWxkcmVuIHBsYXlpbmcgYXQgdGhlIGJlYWNoCm9pbHBhaW50CmN1dGUgY2F0IGluIGEgc3VuZmxvd2VyIGZpZWxkCmluZm9ncmFwaGljIHN0eWxlCmdyYWNlZnVsIGN1cnZlcwpkcmV3IHN0cnV6YW4uIGVwaWMKY2hpbmVzZSBtZW4gaW4gYSBwcmlzb24Kd2VhcmluZyB2aWN0b3JpYW4gcmFncwp0aGV5IGFyZSB1bmhhcHB5CmNob2NvbGF0ZSBjYW5keSBiYXIgcGFja2FnaW5nCnZlcnkgYXBwZWFsaW5nCjQgayBoZCBwaG90b2dyYXBoCmNocm9tYXRpYyAzZCBnZW9tZXRyeQp1dG9waWFuIGp1bmdsZSBpbiBzcGFjZQp4ZW5vbW9ycGhzCmdvdGhpYyBhcnQgc3R5bGUKbWV0YWwgZWFycyBwdXJwbGUgZXllcwpkZXRhaWxlZCBtYXdzaG90CndpdGggcm9ib3QgZHJhZ29uIGhlYWQKc2hhcnAgc2xlZWsgZWRnZWQgYmxhY2sgYXJtb3IKbWFuIGluIGFkaWRhcyB0cmFja3N1aXQKcXVhbGl0eSBpbGx1c3RyYXRpb24KY3Jvd24gb2YgZmlyZQpjaW5lbWF0aWMgbWVkaXVtIHNob3QKbG90cyBvZiBwYXN0ZWwgY29sb3VyCnNldmVyZSB3ZWF0aGVyIHN0b3JtcwpzaGVpayBtb2hhbW1hZCBydWxlciBvZiBkdWJhaQppbiB0aGUgbmVhciBmdXR1cmUKY2luZW1hdGljIGRpZmZ1c2UgbGlnaHRpbmcKc2h1dCBkb3duCmdvdCBzaHV0IGRvd24Kcm9sbGVyIGNvYXN0ZXJzCnNsZWVrIGJsdWUgdmlzb3IgZm9yIGV5ZXMKcm9ib3QgbWVjaGEgZmVtYWxlIGRyYWdvbiBoZWFkCmdlb2Rlc2ljIGRvbWVzCmFuZnJlZSB3YWxsaW4Kc2hpbmluZyBhcm1vcgpkb25hbGQgdHJ1bXAgYXMgdGhvcgo4IGsgNCBrIHVoZCBpbWFnZQpoeXBlcnJlYWxpc3RpYyAzIGQgZGlnaXRhbCBhcnQKaHVtYW4gc2tpbgpzb2xhciBzdG9ybQpoYWlyIGluIHdpbmQKbWF0dCBjb2xvcnMgb3V0ZG9vcgpkaXZlcnNlIHNwZWNpZXMKY2luZXN0aWxsIGhhc3NlbGJsYWQgMiAwIDAgbW0KY2luZXN0aWxsIGhhc3NlbGJsYWQgOCA1IG1tCnByZWNpb3VzIG1ldGFscwpjaXJjdWl0IGJvYXJkIHByb2Nlc3NvcgpjaXJjdWxhciBnYXRlIGluIGEgd2hpdGUgd2FsbApncHQKc2F0dXJhdGVkIHRvcCBsaWdodAp0b3AgZG93biBwZXJzcGVjcml2ZQpndGEgdmljZSBjaXR5IGNvdmVyIGFydApza3lzY3JhcGVycyBhbmQgZmx5aW5nIGNhcnMKdGlsZXNldApzdGVtcHVuawpqb2hubnkKY2xhc3NpYyAzIGQgbW9kZWwgb2YgbW9sZWN1bGUKcm9zZW50aGFsCmJhbHRlcm1hbnRzCmtlcmxlZQp2YWNjYXJvCnJlYWxpc3RpYyBoeXBlciBkZXRhaWxlZAptYWZpYSBiYWNrZ3JvdW5kIGh5cGVyIGRldGFpbGVkCmNyaW1pbmFsIGFwcGVhcmFuY2UKY3Jhc2ggYmFuZGljb290IGFydHN0eWxlCnN0eWxlIG9mIGpha3ViIHJvemFsc2tpCmNsb2lzb25uZSBjYXQgaGVhZCBzY3VscHR1cmUKdGhlIHN0eWxlIG9mIGFuZHkgd2FyaG9sCnJveSBsaWNodGVuc3RlaW4gYW5kIGphY2tpZSB0c2FpCmluIGEgY3Jvd24KYmx1cnJlZCBzcGFjZQp2aXN0YSBvZiBmdXR1cmlzdGljIGNpdHkKaHVnZSBtYWdpYyBjaXJjbGVzIG9uIHRoZSBoYW5kCndoaXRlIHRhYmxlCmFib3V0IHRvIGNvbnN1bWUgeW91CmRldmlhbnRhcnQgZWthJ3MgcG9ydGFsCndpdGggYSBndWxsZXQgYXQgdGhlIGVuZApiYWNrIHNoYXJrIGZpbgpzbW9nIG9uIHRoZSBmbG9vcgplcGljIGdyYXBoaWMgbm92ZWwgd2FsbHBhcGVyCnZlcnkgYnVzaHkgYnJvd24gaGFpcgp2ZXJ5IGJyaWdodCBicm93biBleWVzCmZpcmV3b3JrcyBpbiB0aGUgYmFja2dyb3VuZApibG9uZCBib3kKc2FkIG1hbgo1IDAgbW0gY2FtZXJhCmRpc25leSBjb25jZXB0IGFydGlzdHMKc3RvY2sgYW5kIHR3byBzbW9raW5nIGJhcnJlbHMKZ2F1Z3VpbgpyZWFsaXN0aWMgZGV0YWlsZWQgcGFpbnRpbmcKd2ludGVyIHNjZW5lIGZhbnRhc3kKbmVvbiBwYWxldHRlCm1hcmsgdmFuIGhhaXRzbWEKYW50b24gbWlndWxrbwphaXJib3JuIHN0dWRpb3MKZHJldyBoaWxsCmhlcm8gcG9zZSBjb2xvcmZ1bCBjaXR5IGxpZ2h0aW5nCmNsb3NldXAgZmFjZQplY3N0YXRpYyBmYWNlIGV4cHJlc3Npb24KZmF0ZS96ZXJvCmNsb3NldXAgb2YgYSBjcm93CmNsb3NldXAgb2YgZmFjZSBtZWx0aW5nIGluIGFnb255CmNsb3NldXAgb2YgZmFjZSBtZWx0aW5nCm5pa29uIGQgNyAyIDAgMAptb2RlbCB3aXRoIGF0dHJhY3RpdmUgYm9keQpvbGQgbGFkeQpjaGluYSB0b3duIGJsYWRlIHJ1bm5lcgpsYXJnZSBzd29yZApzdHJvbmcgYm9keQpsb3JkIG9mIGJlYXN0cwp0dWJlcyBhbmQgY2FibGVzCnNoYXdsCnRoaWNrIHNxdWFyZXMgYW5kIGxhcmdlIGFycm93cwppbnNpZGUgYW5jaWVudCBncmVlayBydWlucwp3b3Jrc2FmZS4gaW5zdGFncmFtIHBob3RvCnNvdmlldCBwcm9wYWdhbmRhIHBhaW50aW5nCmNsb3ducyBib3hpbmcKZ2lybCB1bmRlciBsYW50ZXJuCm1hZ2ljIHBvd2Rlcgp3aGl0ZSBzb2Z0IGxlYXRoZXIgbW9kZWwKY29ja3JvYWNoIGxhZHkKZGFyayBodWVzCjEgNiA2IDcuIG1hbmRlbGJ1bGIgMyBkCmNvbGQgZHJpbmtzCm11bHRpcGxlIGxheWVycwpncmV5YmVhcmQKcG9saXRpY2EKd2F0ZXIgY29taW5nIG91dCBvZiB3aW5kb3dzCmNhbm9uIDI0bW0gZjExIGFwZXJ0dXJlCnN0cmFpZ2h0IHdoaXRlIHRlZXRoCmJsYW1lIG1hbmdhCmNvbG9yZWQgcGhvdG9ncmFwaHkKd2VhcmluZyByZWQgYW5kIHllbGxvdyBoZXJvIHN1aXQKbG90cyBvZiBidWlsZGluZwpzdGFubGV5IGFydGdlbSBsYXUKc3ByaWFsCmNvbWljIGJvb2sgcmVhbGlzbQphd2Vzb21lIGJyaWdodCBjb2xvciBwYWxldHRlCmF3ZXNvbWUgdHJlbmR5IGNvbG9yIHBhbGV0dGUKc29sYXJwdW5rIHV0b3BpYQpreWxpZSBtaW5vZ3VlIGFzIGJhcmJhcmVsbGEKc2xpZ2h0bHkgcmVhbGlzdGljCnBzeWNoZWRlbGljIGNvbG9yaXphdGlvbgpzb3ZpZXQgc3R5bGUKY29tbXVuaXN0IGNsb3duCjIwMTggY2luZW1hdG9ncmFwaHkKZmllcnkgYXVyYQpjeWJlcnB1bmsgbWV0YWxsaWMgYnJhY2tldHMKc2lsdmVyIHJlZCB3aGl0ZSBkZXRhaWxzCnJlZCBkZXRhaWxzCmNvbXBsZXggYmVpbmdzCmdhbGFjdGljIHRlbXBsZQpmcmFjdGFsIGVuZ3JhdmluZ3MKbWVzc3kgY29yZHMKYWN0aW9uIHdpdGggcnVuIGFuZCBmaWdodApwZXRlciBtb2hiYWNoZXIKY3liZXIgamFwYW4gc2FtdXJhaSBhcm1vcgpjb21wdXRlciBzY2llbmNlCmxvb2tpbmcgcmFiaWQKdW5kZXIgdGhlIHNpbGVudCBuaWdodCBza3kKbHVtaW5vdXMgZmxvd2Vycwpwb3J0cmFpdCBvZiBlaW5zdGVpbgpjeWJlcnB1bmsgaW1wZXJpYWwgbWlsaXRhcnkKY3liZXJwdW5rIHBpbG90IGZpZ2h0ZXIKamV0cGFja3MKb3JpZ2luIGp1bXB3b3JrcwppbiBkYXRhIGNlbnRlcgpmbHVpZCBzaW11bGF0aW9uIGluIGhvdWRpbmkKdHVybmFyb3VuZCB3b3JsZCBidWlsZGluZwpjb2xvcmZ1bCBzdHJpcGVkIHBhdmlsbGlvbnMKcGVuY2lsIG1pbmlza2lydApibHVlcHJpbnQgc2NoZW1hdGljcwpjYXJyeWluZyBhIHNhZGRsZSBiYWcKYW50aHJvbW9ycGhpYwpzY2lmaSBhY2Nlc3NvcmllcwppdGVtIGFydApibHVlIHR1bmljIGFuZCByb2JlcwptYWdlbnRhIGFuZCBncmF5Cm1vd2luZyBvZiB0aGUgaGF5CjUwIHllYXJzIG9sZCBtZW4KbXVsdGkgLSBsZXZlbApkZXNpZ25lciBmdXJuaXR1cmUKZWxlZ2FudCBoaWdoIHF1YWxpdHkKZW52aXJvbm1lbnQgcGFpbnRpbmcKc2NpIC0gZmkgc3BhY2VzaGlwIGluIGNvbWJhdApza3lyaW0gYXJ0CmFybW9yIHBpZXJjaW5nIG1pc3NpbGVzCjEgNSB0aCBjZW50dXJ5CmtlcmFsYSBtb3RpZnMKZ2xvYmFsIGF3YXJkZWQKY29ucXVlcmluZyBpbWJhbGFuY2UKcGhvdG9yZWFsaXN0aWMhISEhISEhIGFydCBzdHlsZQpjb250ZW50ZWQKY3Jvc3MgY29udG91cgp3aXJlIHNjdWxwdHVyZSBkcmF3aW5ncwphYXJvbiBlYXJsZXkKdG9ybndpbmcKa2Fyb2xpbmEgY3VtbWluZ3MKZG91ZyBiZWxsCm5pY2hvbGFzIHdlbHR5awptb2JpbGUgZ2FtZSBhcnQKY29yYWwgdW5kZXJ3YXRlciBjb2xvcmZ1bApkbXQgc3BhY2UgYmVoaW5kCmJlYXV0aWZ1bCBtb3VudGFpbnMgYmVoaW5kCmNvdWdhciBpbiBmb3Jlc3QgYXQgbmlnaHQKaGFuZ2luZyBiZWVmIGNhcmNhc3NlcwpnYXZlbApqdXJ5CmNvbG9ubmFkZSBvcm5hdGUgaGVhZGRyZXNzCmNyYXZpbmcKaGlnaCByZXNvbHV0aW9uIGNhbWVyYSBzaG90Cm5pY2Ugc2xpZ2h0IG92ZXJjYXN0IHdlYXRoZXIKbW91dGFpbgpwbGF0ZXMgb2YgZnJ1aXQKYmVsb3cgaXMgdGhlIGNyb3dkCnZpbGxhZ2VzIO+8jCB1bnJlYWwgZW5naW5lCmZpbmUgcG9pbnR5IGNoaW4Kc2xlbmRlciBub3NlCmVtZXJnaW5nIGZyb20gdGhlIG1pc3QKc29ueSBwaWN0dXJlcyBhbmltYXRpb24KZHVzdCBtaXN0CnZhbmlsbGEgLSBjb2xvcmVkIGxpZ2h0aW5nCmRldGFpbGVkIGJhcm9xdWUgb2lsIHBhaW50aW5nCm5vcml5b3NoaSBvaHJhaSBtYXN0ZXJwaWVjZQpwaG90byBmcm9tIHRoZSA4MHMKcG9zdGFwbyBzdHlsZQpkZWVwIGxpbmVzIGFuZCBzaGFkb3dzCmRpZ2l0YWwgaHVtYW4KZmxlc2hzY2FwZQpzaWRlIGVsZXZhdGlvbgp0cmVuY2ggY3J1c2FkZQpyZWQgYmxhY2sgd2hpdGUgY29sb3JzCnN0ZWFtcHVuayEhISEgZ3JhaW55IHRleHR1cmUKZ2xvdyBzdGlja3MKdmFwb3J3YXZlIHN1cnJlYWwgb2NlYW4KY2hlY2tlcmJvYXJkIHBhdHRlcm4gdW5kZXJ3YXRlcgpjdWFzdGljcwp2b2x0cm9uCmNyeWluZyBiZWF1dGlmdWwgZmVtYWxlIGFuZHJvaWQhCmRldGFpbGVkIHRlcnJhaW4gdGV4dHVyZQp0aW50YWwgZWZmZWN0Cm9sZCBjb21wdXRlcgpjc2dvIHN0aWNrZXIKYXBwZWFycyBhcyB0aGUgZmlyZSBnb2RkZXNzCmN1YmUgc2hhcGVkIGlyaXNlcwp3ZXQgcmVmbGVjdGlvbnMgaW4gc3F1YXJlIGV5ZXMKYWRvYmUgcHJlbWllciBwcm8KY3V0ZSBhbmltYWxzCmJyb3duIG1pc3QKaGVsbWV0IG9uCmJyaWdodCB0b3dlbHMKaW50YWdsaW8gc3R5bGUKc3R5bGl6ZWQgY2VsIHNoYWRpbmcKZW1vdGlvbmFsIHN1cnJlYWxpc3QgYXJ0CnB1cnBsZSBoYWx0ZXIgdG9wCmhlYXZ5IGJva2VoIGFuZCBibHVyCmRldGFpbGVkIHBhaW50aW5nIDQgawppbiBvcnRob2RveCBjaHVyY2gKb3J0aG9kb3ggaWNvbnMKamVsbHkgZ2xvdwpjdXRlIGZ1bW8gcGx1c2ggYnVubnkgZ2lybAptZWx0aW5nIHZvbHVtZXRyaWMgc21va2UgYW5kIGZvZwplZGdlIGdsb3cKdmVyeSBsb25nIGFuZCB1bmtlbXB0IGhhaXIKcGVudW1icmFsIHNoYWRvd2NyZWF0dXJlCmFuaW1lIGdpcmwgd2l0aCBsb25nIGhhaXIKZ290aGljIG1haWRlbiBhbmltZSBnaXJsCmN1dGUgZnVycnkgbmVlZHMgeW91ciBoZWxwCmF3YXJkIC0gd2lubmluZyBwZXQgcGhvdG9ncmFwaHkKZHlzbmV5CmNsZWFuIGRldGFpbGVkIGFydApob2xkIG1lY2hhbmljYWwgYm93IGFuZCBhcnJvdwpuZW9uIGhhbmQgc3BvcnRzIGJyYWNlbGV0CnN0YW5kaW5nIG9uIHRoZSB3YXRlciBncm91bmQKY29taWMgcGFpbnQKbmlnaHRtYXJlcwpuZXpoYSA6IGJpcnRoIG9mIHRoZSBkZW1vbiBjaGlsZApjdXRlIG90dGVyIHNhaWxvciBlYXQgY2FrZQpjaGFyYWN0b3IKdHJla2tpbmcgaW4gYSBmb3Jlc3QKY3V0ZSB5b3VuZyBnaXJsCnNvZnQgcm91bmQgZmFjZQpnbG93aW5nIGZyb20gaW5zaWRlCnVucmVhbCB1bmdpbmUgNQpzZXJyYXRlZCBwb2ludApvcmdhbmljIGdyb3d0aApzYW5yaW8gb3JuYW1lbnRzCmN5YmVybmV0aWMgZGVtb24gZHJlYW1pbmcKY3liZXJuZXRpYyBoZWFkCnBpeGVsIGFydCA4IC0gYml0CmN5YmVycHVuayAyIDAgNyA3IG5pZ2h0IGNpdHkKOGtyZWFsaXN0aWMKZGltIGFtYmllbnQgbGlnaHRpbmcKY3liZXJwdW5rIGFjY2Vzc29yeQpwcm9taW5lbnQgY2hlZWtib25lcwpmdWxsIHBhZ2UgZ3JpZCBzcHJpdGUgc2hlZXQKYXJjYW5lIGFydCBzdHlsZQphcmNoaXRlY3R1cmUgb2YgcHVyaWZpY2F0aW9uCmN5YmVycHVuayBuaWdodGNsdWIKNCBrIHBob3RvIGF1dG9jaHJvbWUKY3liZXJwdW5rIG51biB3YXJyaW9yCndpdGggbmVvbiB2aXNvcgpjaW5lbWF0aWMgbGlnaHRpbmcgY29sb3Igc2NoZW1lCjhrIGF3YXJkLXdpbm5pbmcgcGhvdG9ncmFwaApoaWdoIHF1YWxpdHkgZ2xvc3MgYXJ0Cm1hdHRlciBhcnQKY2lnYXJldHRlIGRhbmdsaW5nCmdyZW5hZGUgaW4gaGFuZApicm93biBidXp6Y3V0CnJhem9yZ2lybApmbHlpbmcgY2FyCmRpZ2l0YWwgbWF0dCBwYWludGluZwpteXN0ZXJpb3VzIHBvcnRyYWl0Cmdyb3d0aHMKY3lib3JnIGtpdHRlbgp3aXJlcyBhbmQgcmVzaXN0ZXJzCmNoYW1vbWlsZQpmYW50YXN5IHNjaWVuY2UgZmljdGlvbgp0YWJheGkgbWFsZQpzcXVlbGNoCmQyMCBtYWRlIG9mIHRlZXRoCmRhY2hzaHVuZCByb2JvdApkYWVkcmljIGFybW9yCnBpbnVwLiBsb3JkIG9mIGRhZ2dlcnMKcHVscCBmZW1tZSBmYXRhbGUKbW9vbiBiZWFtcwpkaWdpdGFsIGFydCAtIHcgNjQwCnJlbmFpc3NhbmNlIHN0aWxsIGxpZmUgcGFpbnRpbmcKcmVhbGlzdGljIGxpZ2h0IGFuZCBzaGFkb3cKZGFubnkgdHJlam8KdHJhZmZpYyBzaWducwpmbG9hdGluZyBpbiBkZWVwIHNwYWNlCmJ1cm5pbmcgd29ybGQKc2VlbWxlc3MKc2lja25lc3MKY2hhcmFjdGVyIGNvbmNlcHQgYXJ0d29yawp0YW5ub3kKYmxvb2QgaW4gdGhlIHdhdGVyCm9ic2N1cmVkIGhvb2RlZCBwZXJzb24gd2Fsa2luZwpzaGFkaW5nIHVucmVhbCBlbmdpbmUgNQpuYW5vIHRlY2hub2xvZ3kKcWljaGFvIHdhbmcKeW91bmcgdmljdG9yaWFuIHNhZCBmYW5jeSBsYWR5CnNwYWNlIGhpdmUKYXJ0IG9mIGVseXNpdW0KYnJpc3RsZWNvbmUgcGluZSB0cmVlcwp0aGluIHNrZWxldG9uCmRhcmsgbWV0YWwKdGV4dGlsZXMKY29sb3JmdWwgY29wcGVyIGJyYXNzIGFjY2VudHMKZWxldmF0aW9uIHZpZXcKZGlzdHVidXJiaW5nCnNoYXJwZXIgbHVtaW5lc2NlbnQgZm9jdXMKZGFyayB1bmRlcndhdGVyIGFsaWVuIG9jZWFuCnZpb2xldCBjb2xvcmVkIHRoZW1lCnNlYW1zIHN0aXRjaGVkIHRpZ2h0bHkKc2NhcnMgd2lsbCByZW1haW4Kc2NyYXBlIHRoZW0KbG9vbWluZyBvdmVyIHRoZSBlYXJ0aAp2YXN0IGV4cGFuc2l2ZSBsYW5kc2NhcGUKZGUgXyBkdXN0IDIKYmV1dGlmdWxsCmRlYWQgZm9yZXN0Cm1hcmZhbiBzeW5kcm9tZQplbnRpdGllcwpnbG93aW5nIGNhbmRsZXMKc2NhdHRlcmVkIGlzbGFuZHMKbG93IHByZXNzdXJlIHN5c3RlbQpjbG91ZCB3aXRoIGV5ZQp2ZXJ5IHdpbmR5CmRlc2VydCBmbG93ZXJzCmxlYXRoZXIgcG91Y2gKZGVlcCBtYW5kZWxidWxiIGxhbmRzY2FwZQpkZWVwIG9jZWFuIHNjdWxwdHVyZQp1bmRlciBhIHBhbGUgZGVhZCBtb29uCnBhcmtpbmcgbG90Cm1pc3R5IGZvcmVzdCBzY2VuZQpzdXJmYWNlIGhpdmVzCmRlZm9ybWVkIGh1bWFuIGJvZHkKc2lnbWEgOCA1IG1tIGYgXyA4CmNpcmNhIDEgOSA4IDQKZmFjZSBtYWRlIG91dCBvZiBjbG91ZHMKZGVtb24gYm94aW5nIGhlcm8Kc3R1ZGlvIHRyaWdnZXIgYXJ0CmhhbmRzb21lIGphcGFuZXNlIGRlbW9uIGJveQpwZXJmZWN0IGNvbXBvc2l0aW9uIGJvZHkKdG9tYXN6IGFsZW4ga29wZXJhIGFuZCBjZ3NvY2lldHkKd2VhcmluZyBhIGxvbmcgY29hdAp3aWRlIG9wZW4gd2lmZSBtb3V0aAp6b21iaWUgZmFjZQpsb3cgcXVhbGl0eSBncmFpbnkKZGVtb25pYyBzaWdpbHMKcHRzZApvbGQgdGludHlwZQppdHN1a28gYXp1bWEKZmVpc2FyCm1hZ2ljYWwgZmFudGFzeSBmb3Jlc3QKY2VvbmNlcHQgYXJ0CndpZGUgYmVsdApsdW1iZXJqYWNrCmdsYXNzZXMgfApwYXRlbnRlZCBpbiAyMDM5CmpvaG4gbGliZXJ0bwphbmdlbGluYSBzdHJvZ2Fub3ZhCmxhcmdlIGhhZHJvbiBjb2xsaWRlcgp3YXJtIHNwYWNlCnJhbW1lZCBlYXJ0aCBjb3VydHlhcmQKZGV0YWlsZWQgZmFjZSBwb3J0cmFpdApzdXBlciBzdG9ybQpvcmFuZ2UgcmVmbGVjdGl2ZSBwdWZmeSBjb2F0CnRva3lvIGluIHRoZSBiYWNrZ3JvdW5kCndldCBsb29rCmJsdWUgY29sb3IgYmxlZWQKZmVtYWxlIGh1bWFuIHRvcnNvCmdvdGhpYyB3ZWFyaW5nIGhvb2RlZCBkYXJrIGNsb2FrCmxvbmcgZXhwb3N1cmUgOyBzaGFycCBmb2N1cwp3b3JrZWQgc3RvbmUKcGFjbWFuCnNtaWxpbmcgY291cGxlCmhhbmdpbmcgYnJpZGdlISEKYWVzdGhldGljbHkgaW5zcGlyZWQKdmFyaW91cyBwb3NlCmVsZWdhbnQgcmVkIGRyZXNzCnJveWFsIHdlZGRpbmcKZW1tYSB3YXRzb24gd2l0aCBhbnhpb3VzCmxvdy1lbWlzc2lvbi1uZW9uCndpemFyZCBtYWdpYyBzdGFmZgpzdHJvbmcgbGVncwp3ZWFyaW5nIGEgZGlhbW9uZCBjcm93bgpiaWcgbWlycm9ycwpzY2llbmNlIGxhYgpkYXJrIHB1cnBsZSBjcm93bgpqb2hhbiBsaWViZXJ0CnNjcnVmZnkgbWFuCmZpbmUgY2xvdGhpbmcKbmVvIC0gY2xhc3NpY2FsCmxhbmRzY2FwZSBpcyBsdXNoCnRoaW5rZXIgcG9zZQp3ZWFyaW5nIDE4OTBzIGVyYSBjbG90aGVzCmluIGEgY2FzdGxlIG9uIGFuIGFsaWVuIHBsYW5ldApkdXRjaCBhbmdsZSBkaWdpdGFsIGFydApwb3N0ZXJpemVkIGNvbG9yCmNocm9tYSBjb2xvcgptdXRhdGVkIGZsb3dlcnMKZGlnaXRhbCAyZCBpbGx1c3RyYXRpb24KaGlnaCBkZXRhaWwgY29taWMgYm9vayBhcnQKYmxhY2sgcmVkIGxvbmcgaGFpciEKZnVsbCBib2R5IGxlbmd0aCBzaG90CnZlcnkgdmVyeSBsb25nIGJsb25kIGN1cmx5IGhhaXIKbXlzdGVyaW91cyBjcmF6eSB3b3JsZApob2xkaW5nIHNob3RndW4gZG93bgpoZWFkIC0gYW5kIC0gc2hvdWxkZXJzIHNob3QKaWxsdW1pbmF0ZWQgc3RhcnMgYW5kIGdhbGF4aWVzCnZlcmRhbnQgZmllbGQgaW4gdGhlIGZvcmVncm91bmQKLTY0MApncmFwaGljIHNoYXBlcwpjcnVzaGVkCnBhdHJpY2sgbydrZWVmZmUKZGlhZ25vc3RpY3MKYXJ0Z2VybSBhbmQgYmVuIGxvCm1ldGFsIGJvcmRlcgpnbG93IG9mIG5lb24gbGlnaHRzCmF3YXJkIHdpbm5pbmcgZGFyayBsaWdodGluZwp2ZXJ5IGxvdyBzYXR1cmF0aW9uCmZpc2ggbWFkZSBvZiBwYW5jYWtlCmRpbmVyIHNjZW5lCmp1a2Vib3gKYnJva2VuIGNvbXB1dGVycyBhbmQgY2FibGVzCnJ1YmJlciBsYXRleApkaXNhc3RlciBwaG90b2dyYXBoeQpyYXBwZXIgYmxpbmcgamV3ZWxyeQpkaXNuZXkgcGl4YXIgOCBrIHBob3RvCmRpc3NlY3Rpb24gb2YgZnVubnkKZmFsbGVuIGtpbmdkb20gY2l0eSBydWlucwpzY3VtYmxlZApvZmZpY2VyCmhhcHB5IHNtaWxpbmcgaHVtYW4gZXllCmV4dHJhdGVycmVzdHJpYWxzCnBzeWNoZWRlbGljIGFyY2hpdGVjdHVyZQpjb2xjaGlhbnMgcGFpbnRpbmcKZmVtYWxlIHZhbXBpcmUga25pZ2h0CmhvbGRpbmcgYSB3aGl0ZSBkdWNrCnRoZSBvY2VhbiBpbiB0aGUgYmFja2dyb3VuZAppbnR1YmF0aW9uIGVxdWlwbWVudApzcGVjdWx1bQpwYXNzaXZlIGhvdXNlCnZpc3VhbGlzYXRpb24KZ3JvdXAgb2YgcGVvcGxlCmRvbmFsZCB0cnVtcCBpcyBhIHNwYWNlIG1hcmluZQp3ZWFyaW5nIGtuaWdodCDigJkgcyBhcm1vcgpzZWVuIGZyb20gc3RyYWlnaHQgYWJvdmUKYmlvcHVuayBhcm1vcgppZCBzb2Z0d2FyZQptdXRlIGNvbG9ycwppbiBsb3dicm93IHN0eWxlCmN5YmVyIG11c2hyb29tIGNpdHkKdmljdG9yaW91cyBvbiBhIGhpbGwKc3dvcmQgcG9pbnRlZCBhdCBza3kKcGFsZXR0ZSBvZiBwcmltYXJpZXMKcmVkIHVuaWZvcm0KdGhpbiBzdHJva2UKc2t5bmV0Cm1hc3RlcnBpZWNlISEhIQpjZWxsYXIKZHJhbWF0aWMgbmV3cwpzdGFuZGluZyBpbiB0aGUgbXlzdGljYWwgZm9yZXN0CnN0dWRpbyBkaWZmdXNlIGxpZ2h0cwpwcmV0dHkgY29sb3IKaW1wb3NzaWJsZSBhbmdsZXMKYWJzdHJhY3QgYmxhY2sgbGVhdGhlcgpjeWJvcmcgZ29kZGVzcyBpbiBjb3Ntb3MKcmVhbCByb3R0ZW4gZmxlc2ggYW5kIGJsb29kCm1hcnMgYWVyaWFsIHBob3RvZ3JhcGh5CmJvdHRsZXMgY292ZXJlZCBpbiB3YXgKb24gYSBib3RhbmljYWwgaGVyYmFyaXVtIHBhcGVyCndpdGggYXJtcyB1cAp3aWxkIHNoYXBlIDogcmFjY29vbgpmcm9zdCBjbGluZ3MgdG8gaGVyIHNraW4KbG9zdCBpbiB0aGUgbW9tZW50CmRpbW1lZCBsaWdodG5pbmcKY29saW4gZmFycmVsbCB3aXRoIGplc3NpY2EgYWxiYQpzaGFycCBkZXRhaWxlZCBmYWNlCmNhbm5hYmlzIQpjbGF3IGJsYWRlcyBpbiBmaW5nZXJzCnRyaW5pdHkgbWF0cml4CnN0dW5uaW5nIGFjdGlvbiBwb3Nlcwp0cmFuc2Zvcm1lcnMgYmVhc3Qgd2FycwpzbW9rZSBzaW11bGF0aW9uCmdsb3dpbmcgc2NyZWVuCnBvbGx1dGVkCnZlcnkgZmFkZWQKZWFycmluZyBkZXNpZ24KZmVkb3NlbmtvIHJvbWFuCm1pbmlhdHVyZSByZXNpbmUgZmlndXJlCnRyYW5zcGFyZW50IGZhY2UKYnJvd24gKSApCmFuaW1lIHBvcnRyYWl0IG9mIHNoaWluYSByaW5nbwp3ZWFyaW5nIHNldmVyYWwgcGVuZGFudHMKc2hhZnRzIG9mIHN1bmxpZ2h0IGluIHRoZSBjZW50cmUKcGhvdG8gZnJvbSAxOTQwcwpzdGFuZGluZyBpbiBkZXNlcnQKa2FybCBoZWlsbWF5ZXIKbGF0ZSBuaWdodCByYWluaW5nCmFsZnJlZCBjaGVuZXkgam9obnN0b24KYm9pY2hpCmxvbmcgYnJhaWRlZCBzaWx2ZXIgaGFpcgplbGYgcXVlZW4Kb2xkIG1hc3RlciBwYWludGluZwpjYXQuIGRpZ2l0YWwgcGFpbnRpbmcKZWxvbiBtdXNrIGFzIHB1bmlzaGVyCmludHJpY2F0ZSBoYWlyCmVscmljIG9mIG1lbG5pYm9uZQplbWJsZW0gb2Ygd2lzZG9tCnRhbiBjb21wbGV4aW9uCmVtbWEgZnJvc3QKZGlzbmV5IGNhcnRvb24gZmFjZQpwYWludHRvb2xzYWkKaW4gYSBtb25lc3RyeSBuYXR1cmFsIGxpZ2h0aW5nCmF0dHJhY3RpdmUgY3VydmVzCndoaXRlIGFuZCBnb2xkIGRyZXNzCnRvcGF6IGFuZCBvdGhlciBqZXdlbGxhcmllcwphbGwgYm9keSEgc2hvdApjb2xvdXJmdWwgaGFuZCBkcmF3aW5nCjQgayBjaW5lbWF0aWMgcGhvdG8KbGlnaHRidWxiCmVtbyBib3kgd2l0aCBjYXQgZWFycyBhbmQgdGFpbApiZWF1dGlmdWwgb3ZhbCBzaGFwZSBmYWNlCnBybyAtIHZpZGEKY29zbWljIGludGVncmF0aW9uCm1hY3JvIHVwIHZpZXcKc2t5IGZ1bGwgb2YgY2xvdWRzCmdyb3Rlc3F1ZSBoZWxsCnBpeGFyIG1vdmllIHBhbm9yYW1hCnZvbHVtZSByYXl0cmFjaW5nIGZvZwpkcmFtYXRpYyBsaWdodCBoZHIKbGF5ZXJzIG9uIGxheWVycyBvbiBsYXllcnMKc3BhcnNlIHBpbmUgZm9yZXN0IGxvbmcgc2hhZG93cwplbnZpcm9tZW50IGRlc2lnbgpubyBzdW4KZmxvYXRpbmcgdnIgaGVhZHNldHMKbGlxdWlkIGhlYWRkcmVzcwpmcm9tIHdhaXN0IHVwCm1pbmlhdHVyZWNvcmUKc2tlbGV0b25zIG9uIHRoZSBncm91bmQKdHJhZmZpYyBhY2NpZGVudApvbiBhIGJsYWNrIHdhbGwKc2hhdmVkCnNob25lbiBtYW5nYSBwYW5lbApuZXV0cmFsIGZvY3VzZWQgZ2F6ZQpjb2xkIHN0b3JteSB3aW5kCndlYXJpbmcgaHVtYW4gYWlyIGZvcmNlIGp1bXBzdWl0Cm1hbmlwdWxhdGlvbgp5b2ljaGkgaGF0YWtlbmFrYQplcGljIHNjZW5pYyBzaG90CmNhcnJ5aW5nIGd1bnMKZnV0dXJpc3RpYyBjaHVyY2gKY292ZXJlZCBpbiBqZXdlbHMKZGV0YWlsZWQgZ2xvd2luZyBoZWFkCm9jdGFuZSByZW5kZXIgOCBrIGhkcgpsaW1pdApqb2hhbm5hIHJ1cHByZWNodCBzdHlsZQpsb25lcgp2bWFuIG1hZ2F6aW5lCmpvaG4gbWNuZWlsbCB3aGlzdGxlcgpyYW5kb20gZW5nbGlzaCB3b3JkcwpkZWZvcmVzdGVkIGZvcmVzdCBiYWNrZ3JvdW5kCmludG8gdGhlIHNwaWRlcnZlcnNlCmdsb3dpbmcgZWxlY3RyaWMgYXVyYQpleHByZXNzaXZlIGFuZCBpbnRlbnNpdmUKc2NpZmkgZnV0dXJpc3RpYyB2ZWhpY2xlcwpiaW9uaWMgYXJtb3IKa2l0c3VuZSBpbnNwaXJlZCBhcm1vcgpwb3J0cmFpdCBvZiBhIGN5YmVyIHNrZWxldG9uCmhhbGYgd29tYW4gaGFsZiBza2VsZXRvbgpoYXphcmQgc3RyaXBlcwpyb2JvdCBkcmFnb24gY2xhd3MKc3RyZWFtbGluZWQgcGluayBhcm1vcgpleHRyZW1lbHkgZGV0YWlsZWQgZ29kZGVzcyBzaG90CjkwLXMgYW5pbWUKc2lkZSBmZWQKZmluZSBza2luIGRldGFpbHMKZXllIGNvbG9yIGdyZWVuCmhhaXIgY29sb3IKbmF0dXJhbCBkeW5hbWljIHJhbmdlIGNvbG9yCndoaXRlIG1hcmJsZSB3aXRoIGdvbGQgYWNjZW50cwpwc3ljaGVkZWxpYyBpbnRlcnByZXRhdGlvbgpoYWxsdWNpbmF0b3J5IGFydApmYWNlIGxpa2UgZ2FsIGdhZG90CmludHJpY2F0ZSBwb3J0cmFpdCBkZXNpZ24KZGFyayBwZW5ldHJhdGluZyBleWVzCmdvbGRlbiBzdGVhbXB1bmsKY2xhc3NpYyBnZW0Kc2VuZ29rdSBlcmEKZGllc2VscHVuayBhcnQgc3R5bGUKYmVhdXRpZnVsIGVwaWMgdmlzdGEKZmxvd2luZyBoaWxscwp0aHVtYnByaW50CnRlYXJpbmcKemVicmEgc3RyaXBlcwpleWUgc3RhbGtzCnByaXNtYXRpYyBoYWxvCjEgOCAzIDQKZmFrZWQgdGlja2V0IGNsb3NlIHVwCmZlbWFsZSBtYWdpY2lhbgpvdXRkb29ycyB0cm9waWNhbCBjaXR5c2NhcGUKb2ggdGhlIHBsYWNlcyB5b3UnbGwgZ28K8J+Yg/CfmIDwn5iE4pi68J+Zg/CfmInwn5iXCmZhbnRhc3kgYXJ0IG9mIGRvb20gc2xheWVyCnN0dW5uaW5nIHdvbWFuCnNoYWRvd3kgaW5mb3JtYW50Cmp1bGlhIGdhcm5lcgpjdXJ2eSBhbmQgYm93CmZhbnRhc3kgbGlzdAphcmdvcwpyZWdhbGUKd2hpdGUgZXllcyB3aXRob3V0IHB1cGlscwptdXNpYyBpbnN0cnVtZW50IGluIGhhbmQKYmxhY2sgc2NhcnMgb24gaGVyIGZhY2UKd2VhcmluZyBsb2luY2xvdGgKc3VwcGVycmVhbGlzdGljCmZhbnRhc3kgd29sZiBwb3J0cmFpdApzeW1tZXRyaWNhbCBiZWF1dGlmdWwgaHVtYW4gZmFjZQpmYXQgZHJhZ29uCmJyaWxsaWFudCBzdW5zZXQKZmF0IHBlbmd1aW4KcmVzZWFyY2ggc3RhdGlvbgp3aGlybGluZwpmZWVsaW5nIG9mIGRlc3BhaXIKZ2lhbnQgZmx1b3Jlc2NlbnQgZnVuZ2kKZGlub3NhdXIgYm9uZXMKbG9uZSBmZW1hbGUKaGlnaCB3YWlzdCBzd2VhdHBhbnRzCndpZWxkaW5nIGEgbG9uZyBoYWxiZXJkCndlYXJpbmcgYSBub2ggdGhlYXRyZSBtYXNrCnBlcmZlY3QgYmx1ZQp2b2x1bWV0cmljIGJhY2tsaWdodGluZwpmZW1hbGUgZHdhcnZlbiBibGFja3NtaXRoCmZlbWFsZSBleHBsb3JlciBtaW5pIGN1dGUgZ2lybApmZW1hbGUgbGluayBhbmQgbWFsb24ga2lzc2luZwpmZW1hbGUgbHVjaW8KZmVtYWxlIHJvdWdlIGFzc2Fzc2luCndhciBmb290YWdlCmZlbWluaW5lIHBvcnRyYWl0CmluIHN0cmljdCBzdWl0CmNpbmVtYXRpYyBsaWdodGluZyEhCmZpZXJ5IHNrdWxsIGNvbnRlbXBsYXRpbmcgbGlmZQp2aW50YWdlIHBob3RvIGZyb20gMTg5MApmaWxtIHN0aWxsIG9mIGtpbSBrYXJkYXNoaWFuCmRlc3BvbmRlbnQKY2luZW1hdGljLXNob3QKdHJhbnNwYXJlbnQgZ29vCnN0YW5kaW5nIGluIGEgY2FudGluYQplbW1hIHdhdHNvbiB2aWV0bmFtIGRvb3IgZ3VubmVyCnZpZXRuYW0gd2FyIHNvbGRpZXIKZXBpYyByb21hbmNlCnJvbmVuIGJla2VybWFuCmxvdmVjcmFmdGlhbiBjcmVhdHVyZQpzdW1tb24KZmlyZSBzcGVsbApldmEKZmlyc3QgbG92ZQpyZWFsaXN0aWMgYWlyY3JhZnQKbG9zdCBpbiBjb2RlCmluIHNoYXBlCnZhbm5lc3NhIGl2ZXMKaG9zdGlsZQpmbG9hdGluZyBnb2xkZmlzaApmbG9hdGluZyBsYW5kcyBpbi1jbG91ZHMKYmlyZCBmbG9ja3MhIQpnb2xkIHdhdGVyZmFsbHMKd2hpdGUgY2hlZWtzCnRoaXNzZXQgc3R5bGUKc3Rvcm0gc2t5Cmh5cGVyIGRldGFpbGVkIGxpbmUgYXJ0CmluIGEgc3F1YXJlCmNhbm9uIG1hY3JvIGxlbnMKZm9vdGFnZSBvZiBhIHRoZWF0ZXIgc3RhZ2UKZm9yZXN0IGNsZWFyaW5nIGxhbmRzY2FwZQplbmNoYW50ZWQgZHJlYW1zLiBpbnN0YWdyYW0KYmxhY2sgZm9yawpjcmltc29uIGZvcmsKYmxhY2stY3JpbXNvbiBjb2xvciBzY2hlbWUKcmVzdG9yZWQgY29sb3IKaW4gbGltaW5hbCBzcGFjZQpmb3JzaG9ydGVuaW5nCmZyZWRkaWUgbWVyY3VyeSBzbWlsaW5nCmJvbGl2aWFuIGNob2xpdGFzCmZyZWVkb20gZnJvbSBjcHRzZApzaGFtZQpmcmllbmRseSBjYXJyb3QgY3lib3JnCmJlYXV0aWZ1bCBjcmVhdGl2ZSBzcGFjZSBiZWhpbmQKc2NlbmUgZnJvbSBmaWdodGNsdWIgbW92aWUKYXZpYW4hISEgZnVyc29uYQppbnRyaWNhdGUgb3ZlcmxheSBmbGFtZXMgaW1hZ2VyeQpmdWJ1a2kKZmVzcwp0aWVkIGxlYXRoZXIgYXJtb3IKdXBwZXIgdm9sdW1ldHJpYyBsaWdodG5pbmcKZnVsbCAtIGxlbmd0aCBwaG90bwpjYW5vbiAxIDAgMCBtbQpicm93biBzd2VhdGVyCnRoZSB2aXRydXZpYW4gbWFuIHN0eWxlCmNvc21pYyBzY2FsZQpkeW5hbWljIGFuZCBkb21pbmF0aW5nCnJlc3BsZW5kZW50IGFuZCBwcm91ZCBvZiBiZWFyaW5nCmthbWVuIHJpZGVyIGdob3N0CmJsYWNrIHVuZGVyc3VpdAptb25rZXkgbGltYnMKbGluZHNheSBhZGxlcgpvcmFuZ2UgeWVsbG93CmVuZ3VsZmVkIGluIHN3aXJsaW5nIGZsYW1lcwpzdHlsZSBvZiBtaWRqb3VybmV5CnJlYWwgaHVtYW4gZmVldApkcmFnb24gaW5zcGlyZWQgYmx1ZSBhcm1vcgpob2xkaW5nIGEgaHVnZSBzaGllbGQKZ2FicmllbGUgZGVsbCdvdHRvCm1hZ2ljIGJsdWUKbXlzdGljIGhhemUKMTM1bW0gbmlrb24gZi8yCmluIHN0eWxlIG9mIG1pbmVjcmFmdApmdXJuaXR1cmUgYXJvdW5kCmJ1c2luZXNzIHN1cnJvdW5kaW5nCmJlYXV0aWZ1bCBhZHVsdCBsaWJyYXJ5IGZhaXJ5CmluIGFuIGVsZXZhdG9yCiggZXZhbmdlbGlvbiApCndpdGggbG9uZyBhbnRlbm5hZQpkYXJrIGRlc2VydCBiYWNrZ3JvdW5kCmZ1bGwgLSBib2R5IGFydAphcm1zIHRvIHNpZGUKbG9uZyB0YWlsIHdpdGggaG9ybnMKd3lldGgKZmluYWwgZmFudGFzeSBmYWNlCmRldGFpbGVkIHByYWN0aWNhbCBlZmZlY3RzCmluIGEgY3liZXIgLSBwdW5rIGFsbHkKMyBkIGdvZ2dsZXMKbG93IHBvbHlnb25zIGlsbHVzdHJhdGlvbgpmdWxsIGV4dHJlbWVseSBzbGltIGJvZHkKdmVjdG9yIGFlc3RoZXRpY3MKZXh0cmVtbHkgaGlnaCBxdWFsaXR5CnNtYWxsIHN0eWxlIGN1ZSBmcm9tIG1hZCBtYXgKZ2xvd2luZyBwaW5rIGV5ZXMKZmxvd2luZyBzYWxtb24tY29sb3JlZCBzaWxrCnByaW5jZSBjcm93biBvZiBibGFjayBnZWFycwpoaWdoIGRldGFpbGVkIHRvbSBzZWxsZWNrIGZhY2UKYmlnIHN0b21hY2gKZnVsbHMgb2YgcmF0cy4gcG9wIGFydAp3YXRlcnRhbmsKY2dzb2NpZXR5IHVucmVhbCBlbmdpbmUKZnVubnkgaWxsdXN0cmF0aW9uCnRvcCB0ZXggYm90dG9tIHRleHQgbWVtZQpncmFmZml0aSBfIGJhY2tncm91bmQgKCBzbW9rZSApCnVsdHJhbWFyaW5lIG1ldGFsCnNvaWwKYW5jaWVudCBzdG9uZSB0aWxpbmcKd2l0aCBhIG1pbmlhdHVyZSBpbmRvb3IgbGFrZQppY2VsYW5kIGxhbmRzY2FwZSBwaG90b2dyYXBoeQppbnRyaWNhdGUgYW5kIGJlYXV0aWZ1bApkaWdpdGFsIHBhaW5pdG5nCmF0IGluc2lkZSBvZiBhIGZ1dHVyZSBzdWJtYXJpbmUKcGxhY2UKdGd2CmZ1dHVyaXN0aWMgY2l0eSBzdHJlZXQKaGFuZ2luZyBjYWJsZXMKa3lvdG8gaW5zcGlyZWQKZ2lybCBwaW51cAphIGJhY2twYWNrCmV2ZW5pbmcgYXQgZHVzawpncmVnIHJ1dGtvd3NraSBhbmQgaCByIGdpZ2VyCiggb2N0YW5lIHJlbmRlciApCmZ1dHVyaXN0aWMgcGlzdG9sCml2eSB2aW5lcwpkYXJrIGJ1aWxkaW5nCnNwYWNlc2hpcHMgbGFuZGluZwpjb2xvcmZ1bCBwbGFzdGljCmZ1dHVyaXN0aWMgc3BhY2Ugc3RhdGlvbgpza2ludGlnaHQgc3VpdHMKaGlkaW5nIGJlaGluZCBvYnN0YWNsZXMKbm9ydGhlbiBsaWdodHMgYmFja2dyb3VuZApiZWF1dGlmdWwgYmx1ZWlzaCBleWVzCmZsdWZmeSBtYW5lCmZsdWZmeSBncmVlbiBiZWxseQpmbHVmZnkgYm9keQpzbW9vdGggZ29sZCBza2luCnRoYW5rcwptaW5lcyBvZiBtb3JpYQppbiBzdHlsZSBvZiBhbGFuIGxlZQpkeW5hbWljIGNvbXBhcmlzb24KaWRlbnRpY2FsCmd1aWRlCmdhcmJhZ2Ugd2hlZWwgYmluCnN0ZWFtcHVuayBhdXRvbWF0b24KbmVvIC0gYW5kZWFuIGFyY2hpdGVjdHVyZQplbnZpcm9ubWVudHMgKQpnZW50bGUgZmVtZG9tCmdlbnRsZW1lbnMgZGlubmVyCmdlb21ldHJpYyBmdXR1cmlzdGljIGNpdHlzY2FwZQpibHVlIGljZQptb29uIGFuZCBjYW5kbGUKYmxhY2sgcm91bmQgaG9sZQpnaWFudCBjYXJuYXRpb24gZmxvd2VyIGhlYWQKc3dpcmxzIG9mIGZpcmUKb24KZ2lhbnQgcmVkIGZsb3dlciBhZnJvCmdpcmwgZnJvbnRhbCBpbiBhIGZsb3dlciBmaWVsZAp2aWJyYW50IHN1bnNldCBkcmFtYXRpYyBza3kKZGVzdHJveWluZyBhIGNpdHkKbG93IGtleSBkcmFtYXRpYyBsaWdodGluZwpob2x5IGljb25vZ3JhcGh5CmJpcmRzIGFyZSBhbGwgb3ZlciB0aGUgZ3JvdW5kCmdyaW1nYXIKcmVhY2hpbmcgZm9yIHRoZSBza3kKZGVlcCBpbmsgY29sb3JzCmdyYXZlbApmdW4gdmlicmFudCB3YXRlcmNvbG9yCmdpcmwgd2VhcmluZyBob29kaWUKZ2lybCB3aXRoIGJsdWUgaGFpcgpzaG9ydCBob3JucwoxIDggeW8KdHJhbnNsdWNlbnQgbmVvbiBza2luCmxpbm8gcHJpbnQKZ2xhc3MgYW50aWt5dGhlcmEKZ2xhc3MgY3lib3JnCmdsYXNzIHRvcnNvCmdsaW1tZXJpbmcgd2hhbGUKbGlxdWlkIHRyYW5zbHVjZW50IGFtYmVyCnN0b3Agc2lnbgp0cmFuc3BhcmVudCBjZWxlc3RpYWwgbGlnaHQgZ2VscwpnbGludGluZwp3aGl0ZSBqb2huIGJlcmtleSBwYW5lbHMKcm93cyBvZiB3aW5kb3dzIGxpdCBpbnRlcm5hbGx5CnNlbnNvciBhcnJheQpibGF6aW5nIGVuZ2luZXMKZmluYWwgZmFudGFzeSAxIDQgc2NyZWVuc2hvdAplbGFib3JhdGUgbG9uZyBoYWlyc3R5bGUKZ29sZCBleWVzaGFkb3cKcHN5Y2hlZGVsaWMgZmxvcmFsIHBsYW5ldHMKZ29sZGVuIGJheSBuZXcgemVhbGFuZAphYmVsIHRhc21hbgpnb29nbGUgZWFydGgKd2hpdGUgYWRpZGFzIHBhbnRzCmdyb3VuZCBiZWVmCjRrIGltYXggaHlwZXJyZWFsaXN0aWMKZGFzaGEgdGFyYW4KbGkgYmluZ2JpbmcKZ29yZ2VvdXMgZ29kZGVzcyBvZiBsZW8Kb2ZmIHRoZSBzaG91bGRlciBzaGlydAptZWdhbG9wb2xpcwphbmFtb3JwaGljIGlsbHVzdHJhdGlvbgooKChoaWdoIHRlY2gKY3liZXJwdW5rKSkpCmFudGhvbnkgbWNiYWluCnJveGllIHZpemNhcnJhCm1peGVkCnBvc3RlciBjb3ZlciBhcnQKZ3Jhc3MgdGV4dHVyZSBtYXRlcmlhbApuYXpjYSBkZXNpZ24KZ21hc3RlciBsZW5zCmx1bWlub3VzIGRlc2lnbgpwaW5rIG1hcmJsZSBidWlsZGluZwp0ZXh0Ym9va3MgYW5kIGJvb2tzCmxhcmdlIHdoaXRlIHdpbmdzCmxvbmcgd2luZ3MKd2VhcmluZyBhIGJsdWUgaG9vZGllCmplcmVteSBlbmVjaW8KaG9tZSBhbGJ1bSBwb2NrZXQgY2FtZXJhIHBob3RvCmJydXRhbGlzbSBidWlsZGluZ3MKZ3RhIGluIG1vc2NvdwptdWNoYSBrbGltdCBhbmQgdG9tIGJhZ3NoYXcKYnJvd24gYnJlYWQgd2l0aCBzbGljZWQgc2FsbwpqYXBhbmVzZSBnaXJsIHNjaG9vbCB1bmlmb3JtCndoaXRlYmFuZ3NibGFja2hhaXIKcmljaGFyZCBrYW5lIC0gZmVyZ3Vzb24KaGFsZiAtIGVsZWN0cmljIHN0cmlraW5nIHdvbWFuCmluIGEgY3liZXJwdW5rIGdhcmRlbgp3ZWFyaW5nIGEgbHV4dXJpb3VzIGNsb2FrCmNhcnZlZCBib25lIHJ1ZmYKaGFsZiBidW5ueQpoYWxmIGdyaXp6bHkgYmVhcgpzaWxpY29uZSBjb3ZlcgpoYWxmIHBpZwpoYW4gc29sbwpoYW5kIHBob3RvZ3JhcGh5Cm1vb25saWdodCBzbm93aW5nCnJlZmVyIHRvIGxhdGUgdGltb3RoeSBsZWFyeQpsdXNoIHN1cnJvdW5kaW5ncwppbiB0aG9tYXMgcnVmZiBzdHlsZQpoYW5kc29tZSB5b3VuZyBtYW4KaW4gaG9zcGl0YWwgYmVkCmV2ZW5seSBzcGFjZWQKZnVsbCBib2R5IGZyb250YWwgdmlldwp3aWVsZGluZyBhIG1hZ2ljYWwgc3dvcmQKZHluYW1pYyBjaGFyYWN0ZXIgcG9zc2UKaGFybGV5IHF1aW5uIHN0YW5kaW5nCmhhcm1vbnkgYmxhY2sgcm9vbQpuYWRpciBsaWdodGluZwpuZW9uIHllbGxvdyBzdGFycwpib29rIHRpdGxlIHZpc2libGUKdmludGFnZSBkYXJrIHNjaSBmaQpoYXZhbmVzZSBkb2cKYW50aS1hbGlhc2VkCmxpZ2h0IHNwYXR0ZXIgb2YgYmxvb2QKY29uY2VwdCBhcnQgcGFpbnRpbmcKc211ZGdlZCBmYWNlCmZ1bGwgZmFjZWQKc2ViYXN0aWFuIHN0YW4Kc3RveWEKMSA2IGsgaGQKcGV0ZXIgZmFsayBhcyBjb2x1bWJvCmFzZW1pYyB3cml0aW5nCmhlbGdhIHBhdGFraSdzIHRlZXRoCmNvbmNlcHQgc2tldGNoZXMKcmVqZWN0ZWQgY29uY2VwdHMKaG9seSBjcnVzYWRlciBtZWRpZXZhbAprYXRla3lvIGhpdG1hbiByZWJvcm4KMyBkIGNoYXJhY3RlciByZWZlcmVuY2Ugc2hlZXQKaGlnaCBidWlsZGluZ3MKaGFuZGN1ZmZzIGtpbmcgc2l6ZSBjYW5vcHkgYmVkCm5pZ2h0aW1lIGxvbmcgZXhwb3N1cmUKaG9zcGl0YWwhCnBvcnRyYWl0IG9mIGEgc3VnYXIgc2t1bGwKcmV0cm8gc2NpIC0gZmkgcGljdHVyZQptZXNoIHJvb3RzCmZpZWxkIG9mIHBpbmsgZmxvd2VycwpuZW9uIHllbGxvdyBtYWRodWJhbmkKc21vb3RoIGluIHRoZSBiYWNrZ3JvdW5kCmthbGlnaGF0IGhhbnVtYW4hISBoZWFkIGJ1aWxkaW5nCm1hdHRlIGNvbG9yZnVsIGdyYWRpZW50cwohIXdlYXJpbmcgbW9kZXJuIGdsYXNzZXMhIQpjaW5lc3RpbGwgODAwdCA4awpoaWdoIHF1YWxpdHkgc2lsZW50IG1vdmllCmdvbGRlbiBlYWwKaW50ZW5zZSBkZW1vbmljIGxvb2sgaW4gdGhlIGV5ZXMKcGFydGlhbGx5IGdvbGQKaGlnaCBzY2hvb2wgYmFkZ2UKbW90aW9uIGJsdXIgb2YgcGVvcGxlIHdhbGtpbmcKZGFuIGV4cGVyaW1lbnQKYW1hemluZyBzaW1wbGUgY29tcG9zaXRpb24KbGlnaHQgYmx1ZSBwYXN0ZWwgYmFja2dyb3VuZApzaWRlIC0gc2Nyb2xsaW5nIDIgZCBwbGF0Zm9ybWVyCmN5cHJlc3NlcyBhbmQgaGlsbHMKaGFwcHkgYW1iaWVuY2UKcmFwaGFlbCBsZWNvc3RlCmJha2VsaXRlIHJvY2t5IG1vdW50YWlucwpncmFkaWVudCBjeWFuCnR5cmVsbCB3ZWxsaWNrCmJ1YmJsZWd1bSBoYWlyCndpdGggbG90cyBvZiB0aGluIG9ybmFtZW50cwp3aGl0ZSBib3gKbG9uZyBzbGVlayB0YWlsIGJlaGluZApyb2JvdCBkcmFnb24gZm91ciBmaW5nZXJlZCBoYW5kcwpzaGlueSBzaWx2ZXIgYXJtb3IgZW5ncmF2ZWQKbG9va2luZyBkb3duIGF0IHlvdQpnbGFzcyBob3VzZXMKY2F0aGVkcmFscwp3ZW5mZWkgeWUKZmlubnN0YXJrCnNreSBicmlkZ2VzCmV4cXVpc2l0ZSB3YXJmcmFtZSBmYW5hcnQKZWxlZ2FudGx5IHBvc2luZyBvdmVyIHlvdQpiZWVwbGUgZ2xvYmFsIGlsbHVtaW5hdGlvbgpoYW1zdGVycyBob2xkaW5nIHJpZmxlcwpmb3JiaWRkZW4gLSBrbm93bGVkZ2UKd2hpdGUgYW5kIGJsb29kIGNvbG9yIHNjaGVtZQphcm91bmQgYSBuZWNrCmhpZ2hseSBkZXRhaWxlZCBwaG90byBvZiBoYXBweQpzdXJidXJiIHdvbWFuCnZpYnJhbnQgYnV0IGRyZWFyeSBvcmFuZ2UKbWV0YWwgZ2VhciBzb2xpZCBpbnNwaXJlZApidXJiZXJyeSBob29keQpoaWRkZW4gaGFuZHMKdmlicmFudCBjb29sIGNvbG9ycwpkb2luZyBhIG1hamVzdGljIHBvc2UKc2hhcnAgY2xhd3MgYW5kIHRhaWwKb25seQpvbmNlCndlYXJpbmcgd2luZ2VkIGhlbG1ldApmYW50YXN5IHBhaW50aW5nIGhkCmhpZ2h0IGZvY3VzIGYgLSAyIDIKc3VuIGF0IGRhd24KcmVjdGFuZ3VsYXIgcG9vbAptb3ZpZSBzdGlsbCBmcm9tIGdhbWUgb2YgdGhyb25lcwpob3V6egpob25vcmVkCm1pZGRsZSBib2R5IHNob3QKYW50aHJvcG9tb3JwaGljISEKcGljayB3dQpiZWF1dGlmdWwgZHluYW1pYyBzaGFkb3dzCnZlcnNhY2UgcGF0dGVybgpodWdlIGR1Y2F0aSBwYW5pZ3JhbGUgbW90b3JiaWtlCmh1Z2UgZ2F0ZQpwYXN0ZWwgZHVsbCBjb2xvcnMKaHVnZSBtb2Rlcm4gZG93bnRvd24gY2l0eQoyIHllYXJzIG9sZApyZWQgc3F1YXJlIG1vc2NvdwpodWdoIGdyYW50IG1hbiB2cyB3aWxkCnZlcnkgY2xlYXIgcGljdHVyZQpzdHlsZSBvZiBjb25yYWQgcm9zZXQKc3R5bGUgb2Yga2Fyb2wgYmFrCmh1bWFuIGNpcmN1bGF0b3J5IHN5c3RlbQpodW1hbiBleWVzIQpoZCBtYWNybyBwaG90b2dyYXBocwpodW1hbiB0b3JjaAphIHB1cnBsZSBzdWl0IGphY2tldApzbGlnaHRseSByZWQKd29vZGVuIGJhbmtzCndvb2RlbiB0YWJsZXMKbW9zYWljIHN0b25lIGZsb29yCmFydGdhc20KaGFsZiBjYXQgLSBoYWxmIG1vdXNlCmNob2tlIHNtaXJrIHNtaWxlIGdyaW4KYXdhcmRlZCBwaG90b2dyYXBoeQp0aG9tYXN6IGFsZW4ga29wZXJhCmluc2FuZWx5IDNkCmh5cGVyIHJlYWxpc3RpYyBjb2xvciBwaG90bwpmcm9tIHJpY2sgYW5kIG1vcnR5CmZsYXNoIHBob3RvZ3JhcGh5IGF0IG5pZ2h0CmphbWVzIGd1cm5leSBicm9tCndlYXJpbmcgYSBmdWxsIGxlYXRoZXIgb3V0Zml0CmtuZWUKaGlzIGNhcGUgaXMgdGhlIGFtZXJpY2FuIGZsYWcKY2FybmFsICkgd2V0CmdsaXR0ZXJpbmcgc3VuIHJheXMKZm9yY2VmaWVsZApoeXBlcnF1YWxpdHkKd2VhcmluZyBpdm9yeSBjb2xvdXIgZHJlc3MKbnVuIGZhc2hpb24gbW9kZWwKZHJlc3NlZCBpbiBjbG9hawpvYyByZW5kZXJlZApwYWxlb3pvaWMgYXRsYW50aXMKZm9nZ3kgdHdpbGlnaHQgbGlnaHRpbmcKa2luZ2RvbXMgb2YgZXRoZXIKZHluYW1pYyBwZWFybGVzY2VudCB0ZWFsIGxpZ2h0CmN5YmVycHVuayBjaXR5IG9uIGJhY2tncm91bmQKbmljZSBkZWVwIGNvbG91cnMKZ29sZGVuIGZhY2UgdGF0dG9vcwpkYXJ0IGJvYXJkCmJsYWNrIGFuZCB3aGl0ZSBjb2xvciBwaG90b2dyYXBoCmNvbXBsZXggYnVpbGRpbmdzCm1pbGl0YXJ5IGJhc2UKMyA1IG1tIGZpbG0gbG9vawp3aXRob3V0IGR1cGxpY2F0aW9uIGNvbnRlbnQKaW1tZXJzZWQgd2l0aGluIGEgZ2xpdGNoIG5ldHdvcmsKbWV0emluZ2VyCmxpdCBpbiBhIGRhd24gbGlnaHQKY2VudGVyZWQgdG9yaWkgZ2F0ZQpoeml1bHF1b2lnbW56aGFoCmVsb25nYXRlZCBhcm1zCm9oIHllYWgKdmVyeSBpbnRyaWNhdGUgYXJ0CmlwaG9uZSBiYWNrZ3JvdW5kCm5lYnVsYWUhIQpzdGFycnkgc2t5ISEKc21pbGUgMTk1MHMKcGl0dHVyYSBtZXRhZmlzaWNhCjhrIGhpZ2ggZGVmaW5pdGlvbiBoaWdoIHF1YWxpdHkKbGlnaHQgZ3JleXNjYWxlCnN0dWlkbyBnaGlibGkKZGF0YXBpcGVsaW5lIG9yIHJpdmVyCmlseWEga3V2c2hpbm92IHdpdGggbG9uZyBoYWlyCm1hamVzdGljIHN3ZWVwaW5nIGFjdGlvbgppbWFnZSBvZiByYW5kb20gYXJ0cwp2aXNpYmxlIHNwYWNlCmltcG9zc2libHkgYmVhdXRpZnVsIHBvcnRyYWl0CmRhcHBlciBkcmVhbSBkZW1vbgpzbmFrZSBtYW4KdGVhciBkcm9wcwppbiBhIHN0ZWFtcHVuayB3b3JsZAplbmRvc2tlbGV0b24KcHVlYmxvIGFyY2hpdGVjdHVyZQpwcmFpcmllIGluIGJhY2tncm91bmQKaW4gdGhpcyBvbWlub3VzIHNjZW5lCmFjdGlvbiBzaG90IGdpcmwgaW4gcGFya2EKcm9ib3QgYXJ0IGNyYWNraW5nIHRoZSByb2FkCnJvYm90IGdob3N0IG1hc2sKbW9vbiBoaXR0aW5nIGVhcnRoCnJ1YW4gamlhIG1vdmllIHBvc3Rlcgp5ZWxsb3cgYXduaW5nCmJyaWNrIGRlYnJpcwpmYXZvcml0ZSBzY2VuZQp3aWRlIGV5ZXMgc2hvY2tlZCBleHByZXNzaW9uCm9kZCBwaXBlcwpicm9rZSBtYWNoaW5lcwptYWRlIG9mIGxhYiB0aXNzdWUKZnVsbCAtIGJvZHkgbWFqZXN0aWMgYW5nZWwKYnJpZ2h0IGFjY3VyYXRlIGdyZWVuIGV5ZXMKZHJhbWF0aWMgbGlnaHRzIG15c3RpY2FsIHNjZW5lCnRyYW5zbXV0YXRpb24KY29wcGVyIGFuZCBicmFzcwp2ZWx2ZXQgY291Y2gKaW5zaWRlIGEgbWVkaWV2YWwgaG9iYml0IGhvbWUKY29tcGxleCBjZWlsaW5nCmNhYmxlcyBoYW5naW5nCnBhc3NlbmdlcnMKcG9sa2EgZG90IHRhYmxlcwpob3QgcGFudHMKcmVkIGFuZCB0ZWFsIGFuZCB5ZWxsb3cKaW4gYSBmYW5jeSBkcmVzcwpncmVhdCBhcmNoaXRlY3R1cmUKaW50ZXJpb3Igb2YgYW4gYWxpZW4gc3BhY2VzaGlwCmludGVyaW9yIG9mIHRoZSBvbGQgY2F0aGVkcmFsCmRhbWFnZWQgZmxvb3IKZ3Jvd2luZyBvZmYgYSB0cmVlCmJsb29kIHRyYWlscwptZXRhbGxpYyBjb2xvcnMKbWF0Y2hpbmcgY29sb3JzCnNsZWVrIG1ldGFsIGVhcnMKYXJjaGltYm9sZG8hISEKcGFzdGVsIGNvbG9yIHRoZW1lCmdsaXN0ZXJpbmchISEgb2lsZWQgLSBza2luISEhCnNoaW55IC0gc2tpbiEhIQphYnN0cmFjdCBhbmQgLyBvciBtb2Rlcm5pc20KY3ViaXNtIGFuZCAvIG9yIHJvbWFudGljaXNtCmludHVpdGlvbgpkYXJrIGludmVydGVkIHNwZWxscwpjeWFuIGFuZCBtYWdlbnRhCmVlcmllIGNvbG9yCmFydCBjb25jZXB0IGZvciBhIGJvb2sgY292ZXIKcm90YXRlZCBsZWZ0IHJpZ2h0IGZyb250IGJhY2sKZ2FtZSBkZXNpZ24gY29uY2VwdAplYm95Cm1lZGlldmFsIHRhdmVybgp5b3NoaWRhCml0YWxpYW4gcGl6emEKY2FwcmkgY29hc3QKY2xvdWRzIG9uIHRoZSBza3kKZnJvegpjaXJjdWxhciBnbGFzc2VzCnJlIGVuZ2luZSByZW5kZXIKZHluYW1pYyBtb3ZpbmcgcG9zZQpjb21wYWN0IGJ1aWxkaW5ncwpicmlnaHQgbmVvbiBzaWducwo0IDUuIDcgbXAgbGVucwpkcmV3IHN0cnV6YW4gdG9tYXN6IGFsZW4ga29wZXJhCmdvbGRlbiBhZ2UKZHJhbWF0aWMgbGlnaHRpbmcgZmFudGFzeQppbiBvcHVsZW50IGxpYnJhcnkKc2ltcHNvbnMgYW5kIG5lbmRvcm9pZCBtYXNodXAKZ2hpYmxpIGFuZCBpbHlhIGt1dnNoaW5vdgpvZmYgLSB3aGl0ZSBzdHlsZQpkZWNvcmF0aXZlIGFydApqZXdpc2ggeW91bmcgbWFuIHdpdGggZ2xhc3Nlcwptb29kYm9hcmQKMiAwIDAgMApmZWF0dXJlZCBmYWNlIGRldGFpbHMKd2Fsa2luZyBkb3duIGEgbWFyYmxlIHN0YWlyd2VsbAp0ZWVuYWdlciBnaXJsCmNoaWxkcyBiZWRyb29tCnVucmVhbCBlbmdpbmUuIDQgawpzaXIgbGF3cmVuY2UgYWxtZGEgdGFkZW1hCmlyaXNoIG1vdW50YWlucyBiYWNrZ3JvdW5kCmVtbWEgc3RvbmUgcG9pc29uIGl2eQpqdW1waW5nIHNwaWRlciBtaXhlZCB3aXRoIG93bApiYW8gcGhhbgpmbGVzaCB3aXRoIHRlY2hub2xvZ3kKaHVtYW4gc29sZGllcnMKdGh1bmRlcmJvbHQKdXNhIHZvbGxleWJhbGwKYXZwCmNhcnZlZCBmbG9vcgpsb2NrcGlja3MgYW5kIHBpbGUgb2YgZ29sZApzb2Z0IGJpb2x1bWluZXNjZW50IG1lbWJyYW5lcwprYXdhaWkgc3dhdCB0ZWFtCm9mZmljaWFsIHN0dWRpbyBhbmltZSBzdGlsbApzb3ZqZXQKa2luZCBjeWJvcmcgZ2lybCB3aXRoIGZsb3dlcnMKbGVhdGhlciBzaG91bGRlciBhcm1vcgpwdWJsaWMgYXJ0Cmtpc3NlcyBhcmUgd29yZGxlc3Mgc3BlbGxzCmtpdHRlbiBwbGF5aW5nIHdpdGggYmFsbCBvZiB5YXJuCmtuZWVsaW5nIGJlZm9yZSB0aGUgcG9wZQplbGYgbG9uZyB3ZWF2aW5nIGJyb3duIGhhaXIKaGVhdnkgZ3VuCnJ1bm5pbmcgZmFzdCB0b3dhcmRzIHRoZSBjYW1lcmEKYXJ0IG5vdXZlYXUgZmFzaGlvbiBwaG90b2dyYXBoeQpzcGFya2xlIHN0b3JtCmNvbG91cmVkIGluIGJsdWViZXJyYSBhbmQgb3JhbmdlCmRydW0gc2V0CmhpZ2hseSBkZXRhaWxlZCBwYXR0ZXJuCmt5bGllIGplbm5lciBhcyBjYXR3b21hbgpkZWF0aCBub3RlIO+8jCBkICYgZApvbGQgaG9sbHl3b29kIHRoZW1lZApib3JuIHRoaXMgd2F5CmJvcm4gdGhpcyB3YXkgYWxidW0KbGFkeSBpbiBibGFjayBjb2F0IGFuZCBwYW50eWhvc2UKbmVlZGxlIGZlbHRpbmcKbGFsaXNhIG1hbm9iYW4gb2YgYmxhY2twaW5rCndhcm0gc2hhZGVzIG9mIGJsdWUKbGFuZHNjYXBlIHdpdGggcmVkIG1vdW50YWlucwphem9yZXMKYmx1ZSBiaW9sdW1pbmVzY2VuY2UKc2hhdmVuCmd1YXJkaWFucyBvZiB0aGUgZ2FsYXh5IHN0eWxlCmJva2VoIGRldGFpbHMKbGVibGFuYwpzcGxhc2hlcyBvZiBsaWdodG5pbmcgYmVoaW5kIGhlcgpzcGFjZXNoaXAgc2tldGNoZXMKeWVsbG93IHdpbmRvd3MgYW5kIGRldGFpbHMKY2luYW10aWMKdmVyeSBjb252aW5jaW5nCmxpZmUgYWZ0ZXIgZGVhdGgKcHlvbmd5YW5nIGNpdHkKZGVlcCBjbGVhciBwb29scyBvZiB3YXRlcgpjb25jZXB0IGFydCBsaWtlIGVybmVzdCBraGFsaW1vdgppbnRlcnR3aW5lZCBhIGRpc3NvbHZpbmcKaGVhcnRoc3RvbmUgY29sb3VyIHN0eWxlCmZsaWNrZXJpbmcKYnVybmUgaG9nYXJ0aApsaXF1aWQgZmlyZQpoaWdoIGNvbnRyYXN0IQpkaGFybWEgYXJ0aWZhY3RzCmJ5IG0uIGMuIGVzY2hlcgp3YXJyaW9yIGRyZXNzCmxpZ2h0IC0gYnJvd24gd2FsbAphcnQgd2FsbAptdXNpYyBpbnN0cnVtZW50cwptdXNpYyByZWNvcmRzCmxpdmluZyB0cmVlCmZ1bGwgYm9keSBwb3RyYWl0IGhvbGRpbmcgYm90dGxlCihuZW9uIGNvbG9ycykKbGVlIGJlcm1lam8gYW5kIGRhcnd5biBjb29rZQpsb25nIGxvc3QgdGVjaG5vbG9neQpsb25nIHNob3Qga29kYWsgcG9ydHJhIDQgMCAwCmplYW4gZHVwYXMKcmVnaW5hbGQgbWFyc2gKY3Jvc3Nib3cgYXJyb3cKaWRlbnRpY2FsIHBpY3R1cmUKY3Jhc2hlZCBzcGFjZXNoaXAhIQpsb29raW5nIGF0IHRoZSBmdWxsIG1vb24KZmFjZSBmdWxseSB2aXNpYmxlCmxvcmQgbG9zcwptYWNybyB1cCB2aWV3IG1ldGFsbGljCmZyYW5jZXNjbyBtYXkgd2lsc29uCmhkciByZWZyYWN0aW9ucwpjYXJ0b29uIHByb3BvcnRpb25zCmhpcHBsZSBhbmQgYm9obyBmYXNoaW9uIDE5NzBzCm1hcmtldHNxdWFyZQpsb3cgdmlzaWJpbGl0eSBjcmVlcHkKbG93ZXIgYmFjayBvZiBhIGJlYXV0aWZ1bApsdWNoYSBsaWJyZQpsdWNpbyBmcm9tIG92ZXJ3YXRjaApsaW9uIGhlYWQKc2VhbWxlc3MgZmFicmljIHBhdHRlcm4gOGsKbWF0cml4IGx1dApmb3JiaWRkZW4gaW5mb3JtYXRpb24KbXlzdGVyaW91cyBwYXJhbm9pYQptYWRva2Ega2FuYW1lCm1hZHMgbWlra2Vsc2VuIGFzIGEgdmFtcGlyZQptb25zdGVyIGhpZ2ggbWFrZXVwCmJ1ZyBsaWtlIGZhY2UKc21vb3RoIGNhcmFwYWNlCnNhaWwKbWFnaWNhbCBjYXN0bGUgc2Nob29sIG9uIGEgaGlsbApwb3dlcmZ1bCB3YXJyaW9yCm1hZ2l0ZWNoCnN5bW1ldHJpYyBiZWF1dGlmdWwgZmFjZQpleHF1aXNpdGUgZGlnaXRhbCBhcnQKcmF2ZW5vdXMKbGlnaHRiZWFtcyBzaGluaW5nIHRocm91Z2gKcmVkIHNoaXJ0IGJyb3duIHBhbnRzCm1hbGUgYXJ0aWZpY2VyCm1hbGUgZGppbm4gbWFuIGRlbW9uIGh5YnJpZApuZXcgeW9yayBidWlsZGluZ3MKaG91c2Ugb24gYmFja2dyb3VuZApibG9vZCBvbiBib2R5CmVycm9yCmRvbGxhcnMgaW4gcG9ja2V0CndlYXJpbmcgYSBzaW1wbGUgcm9iZQptYW4gd2l0aCBnbGFzc2VzCnBhcGVyIHNrZXRjaAphcmNhZGUgY2FiaW5ldCBpbiBiYWNrZ3JvdW5kCm1hcG8gdG9mdSBjYXJ0b29uCmJlYWNoIGluIHRoZSBmb3JlZ3JvdW5kCnRsYXF1ZXBhcXVlCm1hcmluIGtpdGFnYXdhIGZhbmFydAppbiBwdWxwIGZpY3Rpb24gMSA5IDkgNApkZXNlcnQgcm9iZQptYXNzaXZlIHRyZWUKbXVzaHJvb20gZm9yZXN0IGFyY2gKaGVhdnkgYmxhY2sgb2JzaWRpYW4gYXJtb3IKbWVsYW5jaG9saWMgZmFjZQppbW9nZW4gcG9vdHMgYXMgYSBob2x5IHdhcnJpb3IKZWxlY3Ryb25pY3Mgc2VlIHRocm91Z2gKY2VsdGljIGZhbnRhc3kgYXJ0CnZpYnJhbnQgYXVyYQpnbGFtb3VyIHBob3RvZ3JhcGh5Cmdsb29teSBmYWNlCmFzIHJlYWwgcGVyc29uCm9jdGFuZSByZW5kcmluZwpjb2xvciBiYWxhbmNlIGhhcm1vbnkKbWF5YW4gcHJpZXN0ZXNzCmZpdmUgZmluZ2VycyBvbiB0aGUgaGFuZApzcGFyZSBwYXJ0cwptZWNoYW5pY2FsIGRlbW9uCm1lZGljYWwgcmVmZXJlbmNlCmNpdHkgd2FsbHMKZmluZ2VycHJpbnRzIG9uIGNsYXkKMzM4OTg2MTU2OQptZWRpdW0gY2xvc2V1cCBzaG90CmZsYXQgbmV1dHJhbCB0b25lCnRoaWNrIGJsYWNrIHNtb2tlIGFuZCBmaXJlCmFwcGFsYWNoaWFuIG1vdW50YWlucwptYWdpdGVjaCEKbWVnYW4gZm94IGFzIGJlYXV0aWZ1bCBtb3VudGFpbnMKcGVyZmVjdCBmYWNlIHN5bW1ldHJ5CnNjaSAtIGZpIHN1aXQKY29sb3JmdWwgY2FwYXJpc29ucwptZiBkb29tIHJlcHRpbGUgZXllcwptZiBkb29tIHdpdGggcmVwdGlsZSBleWVzCnJvdW5kIGVhcnMKKCAoICggYmxhY2sgd2l0Y2ggaGF0ICkgKSApICkKa25lZXMKc3RldmVuIHdpbHRzaGlyZQpsb29ueSB0b29ucwplbGVnYW50ISEKdmVyeSBtaW5pbWFsIHZlY3RvciBhcnQKZWFybHkgbWlkZGxlIGFnZXMKdW5kZXJ3YXRlciBzbW9rZQptaW5vdGF1ciBmcm9tIHBhdGggb2YgZXhpbGUKbWl4IG9mIHZlbm9tIGFuZCBjdGh1bGh1CmVhc3kgdG8gdXNlCmJ1YmJsZSBnb3RoIG1ha2V1cAp3aWRlIGxlZyBoYWthbWEgdHJvdXNlcnMKdGliZXRhbiBpbnNwaXJlZCBhcmNoaXRlY3R1cmUKbW9kZXJuIG9mZmljZQooICggY2luZW1hdGljICkgKSBjb25jZXB0IGFydAptb2Rlcm4gc2NpZW50aWZpYyBkb2N1bWVudHMKZ29sZGVuIHRocm9uZQptb2Rlcm4gdGVjaG5vbG9neSBidWlsZGluZwpwb3N0bW9kZXJuaXNtCm1vZ2FvIGdyb3R0b2VzCm1vb2cgbW9kdWxhciBzeW50aGVzaXplcgpnbG93aW5nIGJsdWUgYnkgZ3JlZyBydXRrb3dza2kKbW9zdCBibHVlcwpiYXR0bGUgYW5nZWwgbWFuZ2EKZnVsbCBib2R5IGRyYW1hdGljIHByb2ZpbGUKanVnZ2VybmF1dApzY3Jld2RyaXZlcnMKc3VubnkgY29tcGxlbWVudGFyeSBwYWxldHRlCmdyZXkgZmFjaWFsIGZsZXNoCnNsZW5kZXJtYW4gem9tYmllCnNpbGVuY2VkIHBpc3RvbAphcG9jYWx5cHRvCnRpdGFuaWMgc2hpcCBleHRlcmlvcgppbnRlcmFjdGUgc21vb3RoIGZsb3dpbmcgbGluZXMKaW50cmFjYXRlIGJydXNod29yawp3YXRlcmNvbG9ycyBhbmQgYWNyeWxpY3MKdmlzaWJsZSBiZWxseQptdWx0aSBjb2xvciBzbW9rZQphcmNoaXRlY3R1cmUgdmlzdWFsaXphdGlvbgpzaGlueSBzcGFya2xpbmcgZGlhbW9uZHMKb3JhbmdlIGhhbHRlciB0b3AKZnVsbCBodW1hbiBoYWlyeSBib2R5CnRodW5kZXIgc3Rvcm0gYW5kIGZvcmVzdCBvbiBmaXJlCmFtbW8gYmVsdApmaXZlIG8nIGNsb2NrIHNoYWRvdwpzaWxob3VldHRlIG92ZXIgc3Vuc2V0Cm11c2N1bGFyIHdhcnJpb3Igd29tZW4KbWFkZSBvZiBnbG93aW5nIG9pbApob2xkaW5nIGd1aXRhcnMKbW91bnRhaW5zIGluIGEgYmFja2dyb3VuZAp3aGl0ZSBob3JzZQpwZXJmZWN0IG1heGltYWxpc3RpYyBjb21wb3NpdGlvbgpvY3VsdXMgcmlmdApibGFjayBsZWF0aGVyIGFjY2VudHMKc3R1bm5pbmcgd2F0ZXJmYWxsCnl1YW4gLSB0aQpuZWQga2VsbHkKZGV0YWlsZWQgY3Jhc2ggc3BhY2Ugc2hpcApibG9uZCBsb25nIGhhaXIKYW5pbWUgY2hpYmkKbWljaGFlbCBtYXVyaW5vCjggay4gZmlsbGluZyBtb3N0IG9mIHRoZSB2aWV3Cm5ldyBib2FyZHMgb2YgY2FuYWRhIGFsYnVtIGNvdmVyCm5ldyBoYW1wc2hpcmUKdGhlIGlyb24gbGFkeQpuZXh0IHRvIGEgZmFybSBob3VzZSBhbmQgYSBiYXJuCm5leW1hcgpzb2Z0bHkgc2hhZG93ZWQKZW5qb3lhYmxlCm5pZ2h0IHNreSB3aXRoIGNsb3VkcyBhbmQgc3RhcnMKbmlnaHQgc3RhcnJ5IHNreSBmdWxsIG9mIGNhdHMKbWFyeSBpbiBhIHNhbmN0dWFyeQptaXJyb3IgaGFsbHdheXMKbmlzc2FuIGd0ciByIDMgNApubyBhcnRpZmFjdHMhISEhIQpvZmZpY2UgY2VpbGluZyBwYW5lbHMKbm9uYmluYXJ5IG1vZGVsCmRlc3Ryb3llZCB0YW5rcwpub3J0aCBtZWxib3VybmUgc3RyZWV0Cm9jZWFuIG9mIGNhbnZhcyBjYXRjaGluZyBmaXJlCmNyaXNwIHJlbmRlcgphbGllbmF0aW5nCmNsb3VzZSB1cCBmYWNlIHBvcnRyYWl0CmV4dHJlbWUgbGlmZWxpa2UKY292ZXJlZCBpbiBjb3JhbCBhbmQgYmFybmFjbGVzCnNpbmcgd2l0aCBtZQpoaWdoIGRldGFpbHMgb24gY2xvdGhlcwpyZWFsaXN0aWMgZmFjZXMgYW5kIGV4cHJlc3Npb25zCmRyYW1hdGljIHN0b3JtIGNsb3Vkcwpyb21hbnRpc2lzbQpyZWZsZWN0aW9ucyBhbmQgcmVmcmFjdGlvbgpzdGVsbGFyIHNwYWNlCmNsZWFyIGNvbG91cnMKdGVlbmFnZSBqdWdoZWFkIGpvbmVzCmxhcmdlIGJ1c2h5IGV5ZWJyb3dzCm5vbiAtIGZpY3Rpb24Kc2l0dGluZyBvbiBhIGN1cmx5IGJyYW5jaApvcm5hdGUgY2xvYWsKYnVybmluZyBzY2VuZSBpbiB0aGUgYmFja2dyb3VuZApzb21lb25lIGluIGhvbWUgc2l0cyBpbiBiZWQKc3VuIHN1bnNldApudW4gb3V0Zml0CnBhdmVsIHNodmVkb3YKcGV0ZXIgbHVuZHF2aXN0CmRpYW5lIHJhbWljCm9uaW9uIG1hbgp0YW9ybWluYSBhbXBoaXRoZWF0cmUKY2hlZXJpbmcgY3Jvd2QKb25teW9qaSBwb3J0cmFpdAptaW5kIGJsb3cKb3JuYXRlIGVnZwpoaWdoIC0gYnVkZ2V0IGFuaW1lIG1vdmllCmpvcmRhbiBwZWVsZSdzIGZhY2UKZWFydGggbWFnaWMKYmxhY2tlbmVkIHNwYWNlCnNtaWxlcyBpbiBkZXNwYWlyCnN1cnJlYWxpc3QgYXJ0IHN0eWxlCnRoZSB0aHJlZSBzdW5zCm5leHQgdG8gdGhlIHJlZmxlY3Rpbmcgb2NlYW4Kb3Zlcmxvb2tpbmcgdGhlIGJlYWNoCnJvY2sgY2F2ZSBwYWludGluZwpyZWQgb2NoZXIKcGFpbnRlZCBwb3J0cmFpdCBvZiBydWdnZWQgb2Rpbgp0aHJlZSB3b21lbgpoYXV0ZSBjb3V0dXJlIGZhc2hpb24Kd2lkZSByaXZlciBhbmQgbGFrZQptaWRkbGUgZWFydGggbGFuZHNjYXBlCmludGVyY3Jvc3NlZCBodW1hbnMKbWl4ZWQgYW5pbWFsCi0gcyAxIDUgMAp2ZWlsZWQgaW4gbWlzdApvbiBhIHdhbGwKd29vZCBwbGFua3MKaHlwZXJkZXRhaWxlZCEKcGFpbnRpbmcgb2YgYW5nZWxhIG1lcmtlbAp2ZXJ5IGV4cHJlc3NpdmUgZGV0YWlsZWQgZmFjZQpidWJibGluZyBjYXVsZHJvbiEKZnJvbSB0aGUgYmxhY2sgbWFnZSBjZW1ldGVyeSEhIQpmdWxsIHN0YXR1cmUKY2xvc2VkIHN3aW1zdWl0CnRhbGwgZmVtYWxlIGVtbyBhcnQgc3R1ZGVudAphZGVwdHVzIG1lY2hhbmljdXMhCnBhaW50aW5nIG9mIGxhdmVuZGVyIGZpZWxkCmFya2hhbSBjaXR5CnBhaW50aW5nIG9uIGEgYmFkZ2UhISEhCmFsZXhhbmRyYSBkYWRkYXJpbyBmYWNlISEKcGFsZSB5b3VuZyBnaG9zdCBnaXJsCnBhbHV0ZW5hIHNtYXNoCnBhbmF2aWEgdG9ybmFkbyByZXBsaWNhCmxvbGl0YSBzdHlsZQpwZW5jaWwgZHJhd2luZyBpbGx1c3RyYXRpb24KaGFsZiBhZnJpY2FuCnJlYWxpc3RpYyBnbGFzcyBzY3VscHR1cmUKd2luZCAtIHN3ZXB0CnNhcmFoIHNoYWhpCnBlcnNvbiBtYWRlIG9mIHRyZWUKYmFja2dyb3VuZCAoIHNtb2tlCmNvbmNyZXRlICkKZGFyayBoYW5nYXIgYmFja2dyb3VuZApwcmlzdGluZSBhbmQgY2xlYW4KZml2ZSBwb2ludHMgb2YgYXJ0aWN1bGF0aW9uCnBob3RvIG9mIGEgNTAteWVhci1vbGQgd2hpdGUgbWFuCnRoaWNrIHJpbW1lZC1nbGFzc2VzCndpdGhpbiBhIGxha2UKMzAwIG1tIGRlcHRoIG9mIGZpZWxkIGJva2VoCnVua25vd24gdGVjaG5vbG9neQpob2xkIHN3b3JkIGluIHRoZSBmb3Jlc3QKcG9saWNlIGJveAoxOTgwcyBhcnQKcGVvcGxlIGVuam95aW5nIHRoZSBzaG93CnRvb2xzIGFuZCBqdW5rIG9uIHRoZSBncm91bmQKb2xkIHZpbGxhZ2UgaW4gdGhlIGRpc3RhbmNlCnVuZGVyIGEgc2hvd2VyCnBob3RvIG9mIG1hcmdvdCByb2JiaWUKcGhvdG8gb2YgcHV0aW4KcGhvdG8gb2YgdGhlIGJlYXV0eSBnYWwgZ2Fkb3QKYW50aHJvcG9tb3JwaGljIGRlZXIgZmVtYWxlCmNoYXJhY3RlciBwb3NpbmcKcGhvdG8gc3RpbGwgb2YgaW50ZXJpb3IKc25hcGNoYXQgc3Rvcnkgc2NyZWVuc2hvdAppbiBncm91cCBwaG90b2dyYXBoCmNhbm9uIDM1bW0gbGVucyBmOCBhcGVydHVyZQpjaXJjYSAxIDkgNiA5CnZpbnRhZ2UgcmV2b2x1dGlvbiBwaG90b2dyYXBoCnRhcmJlbGwKMyBkIHJheSB0cmFjZWQgY3J5c3RhbHMgYW5kIGdlbXMKMTk3NCBwb3JzY2hlIDkxMQpwaG90b2dyYXBoeSBhbGV4ZXkgZ3VyeWxldgpubyBmbGFzaApibGFkZSBydW5uZXIgZmlsbSBzdHlsZQpwcmV0dHkgZmFjZSB3aXRoIGFybXMgYW5kIGxlZ3MKaG9sZGluZyBpbnRpbWF0ZWx5Cm1pdHRlbnMKZGFyayBibG9uZGUgbG9uZyBoYWlyCnZvZ3VlIHBob3RvZ3JhcGh5CnR3aXRjaCB0dgplbGVnYW50IHRyb3BpY2FsIHByaW50cwpwaG90b3JlYWxpc3RpYyBzdHJlZXRzY2FwZQpkaXZpbmUgdmliZXMKc2hpbnkgZ29sZGVuIGV5ZXMKbG93IGFuZ2xlIGRpbWV0cmljIHJlbmRlcmluZwp2aW50YWdlIHBpbG90IGNsb3RoaW5nCnBpbmtpZSBwaWUgYXMgYSBzaXRoIGxvcmQKbGVhZ3VlIG9mIGxlZ2VuZHMgc3BsYXNoIHNjcmVlbgpyb25naWVyCnBpcmF0ZSBzaGlwIGluIHNwYWNlCnBpcmF0ZSBzaGlwcyBhdCB3YXIgYXQgbmlnaHQKb2NjdWx0IHN5bWJvbHMgYW5kIGRpYW1vbmRzCm1pc3R5IGZvZwphcm15IG9mIHJvYm90aWMgcGVuZ3VpbnMKcGxhbmV0YXJ5IGFubmloaWxhdGlvbiB0aXRhbnMKZ3JvdW5kIGNvdmVyZWQgaW4gbWlzdAp3YXJtIGNvc3kgY29sb3JzCmJ1YmJsZSBjaGFtYmVyCnlvdSBzZWUgZmlzaGVzCnBvc3QgYXBvY2FseXB0aWMgd29ybGQKbmF0YWxpZSBzaGF1IHRvbSBiYWdzaGF3CnJlYWxpc3RpYyBzcGFuaXNoIHdvbWFuIHBhaW50aW5nCnNhZG5lc3MgbG9vawpjaGFybWVkIHNleHkgbG9vawphbWF6aW5nIGJsdWUgYmFja2dyb3VuZCB0aGVtZQpwZXJmZWN0IGxpcHMKcG9ydGFsIGdhbWUgOSA5IDkgOSA5IHZhbHZlCmRjIHN0eWxlCmJsYWNrIGlyb24gY3Jvd24KaW50cmljYXRlIGdvbGQgY3Jvd24KcG9ydHJhaXQgYnVzdCBvZiB5b3VuZyB3b21hbgpwb3J0cmFpdCBjZXJzZWkgbGFubmlzdGVyIHNpdApwb3J0cmFpdCBjaGFyYWN0ZXIgZGVzaWduCnBvcnRyYWl0IGNvbXBvc2l0aW9uCmhpZ2hseSBkZXRhaWxlZCBhbW91cgpwaWthY2h1IGFzIGplc3VzCnBvcnRyYWl0IGV6aW8gYXVkaXRvcmUgYXMgZmVtYWxlCnBvcnRyYWl0IGZyb20gaGVsbApoaXZpcwpwb3J0cmFpdCBrZXZpbiBtY2tpZGQKYXJtb3JlZCBkaWVzZWxwdW5rIHdhcmRyb2JlCnNpbmdsZSAhIXRlYXIhIQpwb3J0cmFpdCBvZiAoY2hhcmxpemUgdGhlcm9uKQpjbGVhciBzbW9vdGggZmFjZQpoYXVnaHR5IGZhY2lhbCBleHByZXNzaW9uCndlYXJpbmcgaW4gYmxhY2sgY2xvYWsKYmxhY2sgbHV4dXJpb3VzIHN1aXQKc3VwZXIgc2FpeWFuIDMKcG9ydHJhaXQgb2YgZGFmdCBwdW5rCmJsYWNrICsgd2hpdGUKcG9ydHJhaXQgb2YgbWF4IGNhdWxmaWVsZAo0ayBzZXJlbmUKcmV0cm8gYW5kIGV0aGVyZWFsCndpdGggYSB3aGl0ZSBjb21wbGV4aW9uCmNhdCAtIGxpa2Ugc2NhcmxldCBleWVzCmEgdGhpbiBtb3V0aApldGhlcmVhbCBhbmQgZHJlYW15IHRoZW1lCm1vdXRoIHdpcmVkIHNodXQKcG9ydHJhaXQgb2YgYSBiYXJiYXJpYW4gZmVtYWxlCnBvcnRyYWl0IG9mIGEgYmFyYmFyaWFuIHdvbWFuCmxvbmcgdGhpbiBibGFjayBoYWlyCmouIGMuIGxleWVuZGVja2VyLiBkJmQKbGFyZ2Ugbm9zZXMKbGFyZ2UgbWVzc3kgaGFpciBzdHlsZQptaWNoYWVsIHdlbGxlbgppbXBlcmlhbCByb3lhbCBlbGVnYW50IGNsb3RoaW5nCnZlcnkgdHJpcHB5IGFuZCBhYnN0cmFjdAp0ZWNoIHJvYmVzCnNpdHRpbmcgb24gYmVudCBrbmVlcwpnb2xkIHdpcmVzCmZpbHRlcmVkIGV2ZW5pbmcgbGlnaHQKY3liZXJwdW5rIGN5Ym9yZy4gcm9zZXMKd2llbGRpbmcgYSBodWdlIGdyZWF0IGF4ZQpob3JyaWZ5aW5nIGZlYXIKcHJldHR0CmluIGEgZ29sZCBzdWl0CmhvcnJvciBncm90ZXNxdWUKbGlnaHQgLSBoZWFydGVkCmZhc2hpb24gc3R1ZGlvCm1lc3N5IGJsb25kIGhhaXIKcG9ydHJhaXQgb2YgYSBtYW4gaW4gcHJvZmlsZQpwb3J0cmFpdCBvZiBhIG1hcmsgenVja2VyYmVyZwpyb3NzIHRyYW4gOCBrCnJ1c3NpYW4gaW1wcmVzc2lvbmlzbQp5ZWFycyBvbGQKcnlhbiBraWVyYSBhcm1zdHJvbmcKYmFsZCBvcmMgbWVjaGFuaWMKcG9ydHJhaXQgb2YgYSBvbWlub3VzIGdpcmwKeWVsbG93IGFuZCBibHVlIHJpYmJvbnMKZXBpYyBjb2xkIGJsdWUgbGlnaHRpbmcKbGlnaHQgYnJvd24gbG9uZyB3YXZ5IGhhaXIKc2t5IC0gYmx1ZSBkcmVzcwpibGFjayBqZXdlcmx5Cmtha2kgYm9keSBzdWl0CndpdGggZGV0YWlsZWQgZmFjaWFsIGZlYXR1cmVzCmZyZWNrbGVzIG9uIGhpcyBmYWNlCnBvcnRyYWl0IG9mIGEgdXMgbmF2eSBzZWFsCnNlbGYgLSBjb25maWRlbmNlCnBvcnRyYWl0IG9mIGEgd29tYW4gd2Fycmlvcgpwb3J0cmFpdCBvZiBhIHlhcmkgYXNoaWdhcnUKd2l0aG91dCBoZWxtZXQKc3dlYXR5IG1lYXQKbWFnaWNhbCBzdG9ybSBmb2cKbWlycm9yIHJlZmxlY3Rpb25zCnBvcnRyYWl0IG9mIGFuIGFpCmVhdGluZyBjYWtlcwpiaWcgcmliYm9uCmphcGFuZWVzZSBzdHlsZQpnb2JsaW5rbwpwb3J0cmFpdCBvZiBjaGVzdGVyIGJlbm5pbmd0b24KY3liZXJwdW5rIG1hY2hpbmUKYXJhYmlhbiBuaWdodHMgaW5zcGlyZWQKcG9ydHJhaXQgb2YgY29uYW4gdGhlIGJhcmJhcmlhbgp0aHJ1c3RtYXN0ZXIgdCAzIDAgMApyb2FkIGJpa2UgaGVsbWV0CnBzIDUgZ2FtZXBsYXkKZGFyayBtYWtlIHVwCnBvcnRyYWl0IG9mIGZlbWFsZSBodW1hbm9pZApibGVhayBhbmQgb3BwcmVzc2l2ZSBhdG1vc3BoZXJlCnBvcnRyYWl0IG9mIGhlYWQgYW5kIGJvZHkKdmludGFnZSBhc3RvbiBtYXJ0aW4KZ2hvc3RzIGluIHRoZSBiYWNrZ3JvdW5kCmV2aWwgZGV2aW91cyBtYWxlCnBvcnRyYWl0IG9mIGpvaG4gZiBrZW5uZWR5CndlYXJpbmcgYSBwdXJwbGUgYnJldG9uIGNhcApzdWJ0bGUgY29uZmlkZW50IHNtaWxlCnBvcnRyYWl0IG9mIGthdGUgd2luc2xldApwb3J0cmFpdCBvZiBrbmlnaHQKYWJzdHJhY3QgcmlwcGxpbmcgYmFja2dyb3VuZApzZXh5IG11c2N1bGFyIHVwcGVyIGJvZHkKcG9ydHJhaXQgb2YgbWVybWFpZCB3YXJyaW9yCmZvZ2d5IGVmZmVjdAp0cmFuc3BsYW50ZWQgaGFuZCB0byBoZWFkCml0J3MgZGFyawpwb3J0cmFpdCBvZiBwcmluY2VzcyBwZWFjaApwb3J0cmFpdCBvZiByYWRpY2FsIGxvbGl0YSBnaXJsCmJsYWNrIGNyb3dzIGZseWluZwp2ZXJ5IGRldGFpbGVkIGZ1cgpzcXVpbnQgZXllcwpjdXRlIGJhbmRhaWQgb24gbm9zZSEhCmZlZGVyYXRpb24gY2xvdGhpbmcKd2FycmlvciBmYWNlIHBhaW50aW5nIHJlZApnb2xkZW4gYmx1ZSBvdXRmaXQKcG9ydHJhaXQgb2YgdGhlIG9sZCBuZWNyb21hbmNlcgp3ZWFyaW5nIGFybW9yISEKNzBtbSBzaWdtYSBsZW5zCmh5cGVyIHJlZmluZWQKcG9ydHJhaXQgc2FydW1hbgpidXJudCB1bWJlciBhbmQgYmx1ZQpzbWlsaW5nIDo6IGF0dHJhY3RpdmUKbmVhbCBhZGFtCmJvZHkgYW5kIHRvcnNvCnNub3cgd2hpdGUgYXMgYSBkICYgZCBmaWdodGVyCmRpZ2l0YWwgcGVuIGFuZCBkaWdpdGFsIGluawp0d2lucyBwbGF5aW5nIHZpZGVvIGdhbWVzCnZpa2luZyBraW5nCmNoZXN0cGxhdGUKc2lsayB0YXJwcyBoYW5naW5nCnBvc3QgYXBvY2FseXB0aWMgY29ydXNjYW50CnBvc3QgYXBvY2FseXB0aWMgcGFsYWNlIGludGVyaW9yCnNhdWwgYmFzcyBhbmQgcGF1bCByYW5kCm9wZW4gamFja2V0CnBvdiB1bmRlcndhdGVyCnByZXNpZGVudCB3YWx1aWdpCnByaW5jZXNzIGFyaWVsCmxvbmcgZ2xvd2luZyByZWQgaGFpcgp1a3JhaW5lLiBwcm9mZXNzaW9uYWwgcGhvdG8KOGsgY29taWMgYXJ0CmFuIDkgNAphbGllbiBzcGFjZSBzaGlwcwpsYWR5YnVnIGhvYmJpdHMKcHJvbW90aW9uYWwgc3RpbGwgd2lkZSBhbmdsZQptYWdpY2FsIGV5ZXMKYWxjaGVtaWNhbCBvYmplY3RzIG9uIHRoZSBzaWRlCmNlcmFtaWMgbG9va2luZyBmYWNlCnByb21wdDogZnJhZ2lsZSBsb29raW5nIGZpZ3VyZQpueW1waCBpbiB0aGUgd2F0ZXIKbWVuYWNpbmcgb3JjcwpmaW5lIGJydXNoISEhISEhCndlYXJpbmcgY2VsdGljIHRhdHRvb3MKcHN5Y2hvbG9naWNhbCBob3Jyb3IgbW92aWUgc3RpbGwKMTk3MHMgaGlwcGllIGNsb3RoIHN0eWxlCmNyYWZ0aW5nCnF1ZWVuIGNoZXNzIHBpZWNlIHBob3RvIHBvcnRyYWl0CmFscGhvbnNlIG11Y2hhLiBoaWdobHkgZGV0YWlsZWQKdmlicmFudCByZWQgY29sb3JzCnJhZGlvYWN0aXZlIHNwaWtlIGZpZWxkCnBvc3QgbnVjbGVhciBmYWxsb3V0Cm9ic2N1cmVkIHVuZGVyZXhwb3NlZCB2aWV3CnJhc3BiZXJyeQp3YXJtIHNoaW55IGNvbG9ycwpnb2xkIGFuZCByZWQgbWV0YWwKZ3V3ZWl6IG9uIHBpeGl2IGFydHN0YXRpb24KMTYxNDU3MjE1OQpwb3J0cmFpdCBvZiBtaWEgZmFycm93CmlyaWRlc2NlbnQgdmVuZXRpYW4gYmxvd24gZ2xhc3MKZmliYW5jaSBiYWNrZ3JvdW5kCnNpdGluZyBpbiBhIGNoYWlyCmNhdCBjYXQgZHJlYW1jYXRzCnRoaW4gcmVkIHZlaW5zCm1vZGVsIGlzIHdlYXJpbmcgdGVjaHRpY2FsIHZlc3QKYXV0dW1uIGxpZ2h0cyBjb2xvcnMKZm9jdXMgb24gc25lYWtlcnMgb25seQp3ZWFyaW5nIGEgYnJvd24gbGVhdGhlciBjb2F0CnJlY3RhbmdsZQpyZWQgZ3VuZGFtIGhlYWQKc3RyZWV0IGVsZXZhdGlvbgpyZWRoZWFkIHF1ZWVuIGluIGhlYXZ5IHJlZCBhcm1vcgpwbGVhZGluZyBmYWNlCnJlbmFpc3NhbmNlIHBhaW50aW5nIG9mIG1hbgpsaWJyYXJ5IGludGVyaW9yIGJhY2tncm91bmQKMTk2MHMgYW1lcmljYW4gd29ybGQncyBmYWlyCnByb2Zlc3NvciBjbG90aGVzCmRyYW1hdGljIGludGVuc2UgbGlnaHRpbmcKZnJhY3RhbCBmZWF0aGVycwpyaHl0aG0gb2YgdGhlIHdpbmQKcmltdXJ1IHBsYXlpbmcgY2hlc3MKc3RpbGwgcG9uZApyaXZlciBzdG91ciBpbiBjYW50ZXJidXJ5CmN5Ym9yZyBmcmFtZSBjb25jZXB0CnNjaS1maSBhbmRyb2lkIGZlbWFsZQphbmF0b21pY2FsIHBlcmZlY3Rpb24Kcm9ib3RzIHF1ZXVlIHVwIGZvciBpY2UgY3JlYW0Kcm9tYW4gbGVnaW9ubmFpcmUKcm9zYWxpYQpkYXJrIC0gaGFpcgpyb3NlIGdvbGQgaGVhcnQKcnVpbnMgb2YgYW5jaWVudCB0ZWNobm9sb2d5CnJ1bm5pbmcgcm9ib3RzIGluIGEgbWFyYXRob24KYW5kcmV5IHRhcmtvdnNreQpydXNzaWFuIHJldm9sdXRpb24gMSA5IDEgMApydXN0aWMgeWV0IGVub3Jtb3VzIHNjcCAoc2VjdXJlCjM1bW0gZjIuOCA0awpzYW11cmFpIHBvcnRyYWl0IHBob3RvCnNhdGFuIGRhdWdodGVyCndoaXRlIGRyZXNzISEgb2Ygc2lsdmVyIGhhaXIKc2F5CmhlYXZ5IGZvZyBtYWNoaW5lCmh1Z2UgY3Jvd2Qgb24gZHJ1Z3MKc3RyYW5nZXIgdGhpbmdzIGNoYXJhY3RlcgpuaW5qYSBzY3JvbGwgYW5pbWUgc3R5bGUKMyBkIG1heWEKc2NpLWZpIGJ1aWxkaW5nLiBpc29tZXRyaWMgdmlldwpzY2llbmNlIGZpY3Rpb24gY2l0eQpudWNsZWFyIGJvbWIgYmxhc3QKbG90cyBvZiBtdWQgcHVkZGxlcyBhbmQgY3JhdGVycwpzY3JlZW5zaG90IGZyb20gZ3VybyBhbmltZQpvbmUgZ2lybCBoYXMgd2hpdGUgaGFpcgo0ayBoZCBzaGFycApzdXJyZWFsIHNjaSBmaSBzZXQgZGVzaWduCnN1bmxpdCB3aW5kb3dzCnNjdWxwdHVyZSBvZiBjYXRlIGJsYW5jaGV0dApzZWEgYW5kIHNreQpjcmVlcGluZyBmb3J3YXJkCnNlYXNoZWxsIGhvdXNlCmJlaGluZCB0aGUgd2FsbApyYWlueSBzdG9ybXkgbmlnaHQKZGFuY2luZyBpbiB0aGUgYmFja2dyb3VuZApzZXh5IGNoYXJsaXNlIHRoZXJvbgpzdW5zZXQgaGFsbyBiZWhpbmQgaGVyIGhlYWQKc2V4eSBnaXJsIHdlYXJpbmcgc2hvcnRzCnNleHkgZ2lybCB3aXRoIGdyZWVuIGV5ZXMKMyAvIDQgdmlldyBmcm9tIGJhY2sKYW5ndWxhciBhc3ltbWV0cmljYWwgZGVzaWduCndlYXJpbmcgY29ycmVjdCBlcmEgY2xvdGhlcwpzaG9wIHdpbmRvdyBmb3IgbWFnaWNhbCB3ZWFwb25zCnNpZGUgcG9ydHJhaXQgb2YgY3V0ZSBnaXJsCm5pa2Ugc2hpcnQKKCBsYW5kICkKcGhvdG9yZWFsIGRldGFpbHMKc2ltcGxlIHlldCBkZXRhaWxlZAphbmltYWwgc2t1bGxzCmNvbG9yZnVsIG11c2N1bGFyIHJvYm90CnNpbmdsZSB0ZW50YWNsZQpza2Egc2tlbGV0b24gYW5kIGdpcmxmcmllbmQKc2tldGNoIG9mIGFuIG9jZWFuIGluIG1zIHBhaW50CnByZWhpc3RvcmljIGhlbGwgcGlncwpiYXR0bGV0ZWNoIHN0eWxlCmJhdHRsZWZyb250Cm5vaXIgYW5pbWF0aW9uCmNoaWxsaW5nIG9uIGEgbGVhZgpzbWlya2luZyBtYWxlIGJhcmQKZmV0aWQKdW5kdWxhdGluZyBuZWJ1bG91cyBjbG91ZHMKYmF0b2lkZWEgc2hhcGUKYmFja2xpdCBmYWNlCnJ1c3R5IHJlZCBoZWxtZXQKc29yY2VyZXIgb2Ygc2FuZApyZWFsaXN0aWMgbW91dGgKc3BhY2Ugd2FyIGJldHdlZW4gY2hpbmEgYW5kIHVzYQpzcGFjZWNvcmUKbWV0YWwgZnJhbWVkIHBvcnRhbApzcGlyaXR1YWwgam91cm5leSBpbnRvIG1hZG5lc3MKcGluayBzdW5zZXQgaHVlCnN0YXIgZGVzdHJveWVycwpzdGFyIHdhcnMgbGFzZXJzCmFnZW50IG9yYW5nZQpzdGFyeSBuaWdodCBwYWludGluZwpzdGVhbXB1bmsgc3RhZyBiZWV0bGUKZiA1LiA4CmNvb2tlIHByaW1lIDUwbW0Kc2hpbmppIGhpZ3VjaGkgYW5kIHRvbW9raSBreW9kYQp3ZWlyZCBhcnQgb24gdGhlIHdhbGwKc3RpbGwgZnJvbSBsJ2VzdGF0ZQpiYWNrbGl0IHN1bnNldApsZWZ0b3ZlciBtZWF0IHBpZQpmYWVyeSBwYWxhY2UKZW1ib3NzZWQgcGFpbnQKZWR3YXJkIGhvcHBlciBkcmFtYXRpYwp1cG9uIGEgcGVhayBpbiBkYXJpZW4KcmVmbGVjdGl2ZSBzdWl0Cm9mIGEgYmVhdXRpZnVsIGZlbWFsZSBrbmlnaHQKb2ZmaWNpYWwgcHJhZGEgZWRpdG9yaWFsCmxlZ3MgaW50ZXJ0d2luZWQKd2l0aCB3ZXQgZmFjZXMhIQptaWQgdmlldyBmcm9tIGJlbG93IGhlciBmZWV0CnRha2luZyBjb250cm9sIHdoaWxlIHNtaWxpbmcKdmVyeSBsb25nIHNwaXJlcwpyZWkgaGlyb2UgYmxhY2sgbGFnb29uIG1hbmdhCmNvcnkgYmVoYW5jZSBoZAphbWF6aW5nIGQgJiBkIGRhcmsgc3VuIGFydAp0YW5nIGR5bmFzdHkgcGFsYWNlCm9yZ2FuaWMgYW5kIHJvYm90aWMKaW5uc21vdXRoIG9jZWFuIC0gZHdlbGxlcnMKZ2xhc3MgcmFpbgphbGllbiBzdXJmYWNlIHBsYW5ldApwc2N5Y2hvZGVsaWMKc3VycmVhbCBlcGljCmZ1dHVyaXN0aWMgYmxhbWUKc3dhbXAgbW9uc3Rlcgpzd29yZCBzdHVjayBpbiBhIHBvbmQgaXNsYW5kCnN5bW1ldHJpY2FsIGRpZXNlbHB1bmsgd2FycmlvcgpzeW1tZXRyaWNhbCBmYW50YXN5IGxhbmRzY2FwZQpzeW1tZXRyeSEgaHVtYW4gZmV0dXMKY3liZXJuZXRpYyBhbmQgaGlnaGx5IGRldGFpbGVkCnJlZCAtIGNoZWVrcyEhCnN5bW1ldHJ5ISEgY29uY2VwdCBhcnQKc3ltbWV0cnkhISB3YXRlcgp3aGl0ZSBhbmQgZ29sZCBraW50c3VnaQplbGFib3JhdGUgY3VsdCByb2Jlcwpnb3VyZHMKeHlsb3Bob25lCndhbiBhZG9yYWJsZSBrb3JlYW4gZmFjZQp0YW5rIGZpcmVzIHdpdGggZG9sbGFyIGJhbmtub3RlcwpoYWxmIGFuZHJvaWQKbmF0dXJlIGlsbHVzdHJhdGlvbiB0YXR0b28KdGVjaG5vbG9neSBhbmQgbmF0dXJlCnRob21hcyBraW5rYWRlLiBoaWdobHkgZGV0YWlsZWQKZnVsbCBib3JnIGh5cGVyIGRldGFpbGVkCmF1Z3VzdAp0aGUgYmVhc3RsYW5kcwpsYXVnaGluZ3N0b2NrCnB1YmxpYyBzaGFtZQpzdHJhbmdlIGVtb3Rpb25zCmRpc3J1cHRlZCBtZW50YWwgc3RhdGUKZHJvb2xpbmcgZ29vCnRoZSBjcmVhdHVyZSBpbiB0aGUgYmFzZW1lbnQKY29sb3JmdWwgc2tpZXMKdGhlIGN5YmVycHVuayBhcGFydG1lbnQKdmVyeSBiZXNhdXRpZnVsIGFtYmllbnQgbGlnaHQKZ29sZGVuIHRhdXJ1cwp5b3VuZyBseW54CnRoZSBmdXRpbGl0eSBvZiBvdmVyZXhlcnRpb24KdGhlIGdvZGRlc3Mgb2Ygc3VtbWVyCnRyZWUgb2YgbGlmZSBicmFpbnMKdGhlIGhvcnNlIGFuZCBoaXMgYm95CnBvcCBhcnQgcGF0dGVybnMKdGhlIGpld2VscHVuayBhZXN0aGV0aWMKa2lsbGVkIGluIHdhcgpkYWRhIDIwcwpoYW5kc29tZSBmYWNlIGFuZCBiZWF1dGlmdWwgZmFjZQpjbG9ha2VkIGRhcmsgbmlnaHQKdGhlIGxvdmVyIHRhcm90IGNhcmQKZmFkZWQgd29ybgp0aGUgbW9vbmxpdCBkYW5jZSBvZiB0aGUgZmFlCnRpbnkgZmlyZXNwaXR0ZXIKdGhlIG15c3RlcmlvdXMgc3RyYW5nZXIKc2F2aW5nIHRoZSBkYXkgYWdhaW4KaW4gdGhlIGZhbGxvdXQgd2FzdGVsYW5kCnRoZSBjcm93biBpcyB2ZXJ5IGhpZ2gKdGVjaG5vbG9neSBjbG9hawp0aGUgb3JiIG9mIHRpbWUKKCAoICggKCBrYXVhaSApICkgKSApCnNtYWxsIHJlZmxlY3RpbmcgcmFpbmJvdyBzdGFycwp0aGUgcm9ib3Qgd2VhcmluZyBoZXIgaHVtYW4gbWFzawp0aGUgc2VlIGhvcnNlIHZhbGxleQplcGljIHNjaSBmaSBiYXR0bGUKdGhlIHN0YXIgdGFyb3QgY2FyZAp0aGUgc3VuLiBiZWF1dGlmdWwKb3V0c2lkZSBpbiBhIGZhcm0KaW50cmljYXRlIGJlYXV0aWZ1bCBmYWNlcwp0cmVhY2hlcm91cyByb2FkCmdyb3Rlc2sgZm9udAp0aGVyZSBpcyBhIHBsYWNlIGluIHdhbGVzCmJsb25kZSB3b21lbgp0aHBzIDIgbGV2ZWwKaW4gd2VkZGluZyBkcmVzc2VzCnRpbWUgZG9lcyBub3QgZXhpc3QgYW55bW9yZQptYWduaWZpY2llbnQgY2xvdWRzCnRpbnkgY3JlYXR1cmUgbWFkZSBvZiBvbmUgYnJpY2sKYmlnIHJvdW5kIGN1dGUgZXllcwpmb3JjaW5nIHlvdSB0byBidXkgc2t5cmltCmZsb2F0aW5nIGxvbmcgaGFpcgpnbGFzcyBwaXBlcyBzaG93aW5nIHJlZAp0b3Jiam9ybiBmcm9tIG92ZXJ3YXRjaAp0cmFuc3BhcmVudCBnbGFzcyB3b21hbgp0cm9uIGFuZ2VsCnBzeWNob2xvZ2ljCmRldGFpbGVkIGRpZ2l0YWwgYW5pbWUgYXJ0CnNvZnQgbGlnaHQgOCBrCm1hZGUgb2YgZmVsdCBhbmQgY2xvdGggYW5kIGJlYWRzCnR3byBpbiB0aGUgdm9pZAp0d28gbXVzY3VsYXIgbWVuIGVudHdpbmVkCnNpbmdsZSBleWUKc2NydWZmeSBsb29raW5nCmFtYW5vIGFuZCBrYXJvbCBiYWsKY29uY2VwdCBhcnQuIHNtb2tlCmNocm9tZSBtZXRhbCBtYXRlcmlhbAphcnRzdHlsZSBoaXJha3UgdGFuYWthCmJsYWNrIHNjYWxlcyBhbmQgY3lib3JnIHRlY2gKdWx0cmEgcmVhbGlzdGljIDhrIG9jdGEgcGhvdG8KaHlwZXJyZWFsaXN0aWMgc21va2UKbGlmbGlrZQoxIDkgeWVhciBvbGQKZ2VudGxlIGFuIGhhcm1vbmljIGNvbG9ycwpjZ3NvY2lldHkgY3liZXJwdW5rCmh5cGVyIHJlYWxpc20gc2NhcnkKYmFhZGVyIHUgdmVudXMgZmlsdGVyCnVuY2xlIHNhbQp3YXRlciBsaWdodCBzY2F0dGVyaW5nCnVuZGVyZ3JvdW5kIHJvb20KdW5kZXJ3YXRlciBlZGluYnVyZ2ggY2FzdGxlCnVuZGVyd2F0ZXIgbG9va2luZyB1cAp1bmRlcndhdGVyIG9jZWFuCmRhcHBsZQp1bnNwZWFrYWJsZSBob3Jyb3JzCmVkIGhvcHBlcgpjaHJpcyBtb29yZS4gYXJ0Z2VybQpzaW1wbGUgbXV0ZWQgY29sb3JzCmJsYWNrIG9sZWQgYmFja2dyb3VuZAptb2Rlcm4gYXJjaGl0ZWN0dXJlIGRlc2lnbgpjaW5lc3RpbGwgODAwdCAxMG1tIDRrCnZlcnkgcmVhbGlzdGljLiBsb3cgZGFyayBsaWdodAphbmltZSBtZWNoYSBhZXN0aGV0aWMKY3lhbiBmb2cKdmVyeSB2ZXJ5IHZlcnkgYmVhdXRpZnVsbCBmYWNlCmNpbmVtYXRpYyBiZWF1dGlmdWwgbmF0dXJhbCBza2luCmZpbG0gcHJvZHVjdGlvbgpnbG93aW5nIGdyZWVuIHNvdWwgYmxhZGUKYWxpZW4gYW50ZW5uYQpmdXR1cmlzdGljIGJhbGxyb29tLiBiaWcgZXllcwp2aWN0b3JpYW4gdGhhbmtzZ2l2aW5nIGZlYXN0CmdhbWUgbGV2ZWwgZGVzaWduCmJsdWUgY2xlYXIgc2tpZXMKdmlldyB0aHJvdWdoIHdpbmRvdwp2aW5jZSB2YXVnaG4gYXMgamFjayBmZW50b24KcmFpbiByZWQgY29sb3IgYmxlZWQKZ3Q0MAp3aWRlIG9wZW4gbW91dGggaW4gdGVycm9yCm9sZCBjZ2kgMyBkIHJlbmRlcmVkIGJyeWNlIDMgZAp2aW50YWdlIHNjaS1maSBib29rIGNvdmVyCnZpc3RhIG9mIGEgY2l0eSBhdCBzdW5zZXQKdmlzdWFsIHN0YXRpYwp0ZXNzZWxsYXRlZCBwbGFuZXMgb2Ygcm9jawp2aXZ5CmNsb3duIG5vc2UKd2FyIG1vdmllIHNjZW5lCmJhY2tncm91bmQgYXJ0IGRlY28gcGFsYWNlCndlaXJkIGFydCBwaWVjZQpoYXBoYXphcmRseSBsYXllcmVkIHNjZW5lcwp3aGF0IGRlcHJlc3Npb24gbG9va3MgbGlrZQp3aGF0IGhhcHBlbnMgYWZ0ZXIgZGVhdGgKd2hpdGUgKCBjYXQgKSBnaXJsCndoaXRlIC0gaGFpcmVkIGZveApzdGFybGl0IG5pZ2h0IHNreQpnaWFudCBiZWFyIGh1bWFuIGh5YnJpZAptZWNoYSBhbmltYWwKdGVycmlmeWluZyBhbmQgZGFuZ2Vyb3VzCm1hdHRlIHNjaWZpIGZhbnRhc3kgcGFpbnRpbmcKd2lsbGlhbSBkYWZvZQp3aW5zdG9uIHRoZSBhcGUgZnJvbSBvdmVyd2F0Y2gKd2ludHJ5IHJ1bXBlbHN0aWx0c2tpbgp3aXRjaCBwYXlpbmcgZm9yIGhlciBzaW5zCndvbWFuIGFuZCBjYXQKc2hlIGlzIGhvbGRpbmcgYSBrYXRhbmEgc3dvcmQKd29tYW4gcG9ydHJhaXQgbWFkZSBvdXQgb2YgcGFpbnQKd29tYW4gc21va2luZyBhIGNpZ2FyZXR0ZQpzbGVlayBnbG93aW5nIGFybW9yCndyZXN0bGVycyB3ZWFyaW5nIHZyIGhlYWRzZXRzCmFua2ggcGVuZGFudAp5ZWxsb3cgYnJvYWQgc3dvcmQKeWVsbG93IGh1bWFuLXNpemVkIHdhcmZvcmdlZApyZW5uYWlzc2FuY2UgbWFzdGVycyBwb3J0cmFpdApqZWFuIGdpcmF1ZCBwb3J0cmFpdApzaXQgb24gdGhlIGVkZ2Ugb2Ygc3dpbW1pbmcgcG9vbApraXJzdHkgbWl0Y2hlbGwKeW91bmcgZ2lybCBsaWVzIG9uIGEgbWVhZG93CnlvdW5nIGdvZGRlc3MKYmlvb3JnYW5pYyBjb25jZXB0CndpZWxkaW5nIGEgZmlyZWJhbGwKeW91bmcgcHJpbmNlCnNoZSB3ZWFycyBib290cwp5b3V0aGZ1bCB0YWxpeWFoCnphcnlhIGZyb20gb3ZlcndhdGNoCmNvbG9yIGtvZGFrY3Job21lIDY0CmRpZ2l0YWwgcGFpbnRpbmfigJ0KaGlnaGx5IHJlYWxpc3RpY+KAnQpldWNhbHlwdHVzCnN1cmdpY2FsIGl2IGJhZwpjb2xvciBjb21pYwpvcmdhbmljIGZvcm0g4oCdCmxvZ28gaGFz4oCdCuKAnCBmZW1tZSBvbiBhIGdhbGFjdGljIHNob3JlCnBvcnRyYSA4IDAgMCDigJ0K4oCcIGdvbGRlbiBjaGFsaWNlCmJyaWdodCDigJ0KZGVwdGggb2YgZmllbGQg4oCdCmRldGFpbGVkIG5hdHVyYWwgbGlnaHRpbmcKc3BpZGVyeSBpcnJlZ3VsYXIgc2hhcGVzCnVsdHJhd2lkZSBsZW5z4oCdCmhpZ2hseSBkZXRhaWxlZCBpbGx1c3RyYXRpb24u4oCdCmdyZWF0IHByb3BvcnRpb25zCnBob3RvZ3JhcGjigJ0Kc3R1bm5pbmcgaGlnaCB0ZWNoCmh5cGVycmVhbGlzdGlj4oCdCuKAnGxlb25hcmRvIGRpY2FwcmlvCuKAnG1lZ2FuwqBmb3gKYW50aHJvcG9sb2d5IHBob3Rv4oCdCuKAnGRuZCBkd2FyZgplcGljIGxpZ2h0aW5n4oCdCuKAnG1vZGVybiBjYWxsaWdyYXBoeSBhcnQKWyBjb3NtaWMK8J+Mu/Cfjrnwn468CvCfjYEgY3V0ZQptb2ViaXVzICsgbG9pc2ggKyB3bG9wCvCfpKQgZ2lybCBwb3J0cmFpdApzaXR0aW5nIGluIGhlciBjYXIKcXVpZXQgc3RyZWV0CndlYXJpbmcgYSBzcGFya2xpbmcgZHJlc3MKc2hvb3RpbmcgbGFzZXIKYW5pbWF0ZWQgY2FydG9vbiBzZXJpZXMKZnVsbCBwaWN0dXJlCmhhcmQga2V5IGxpZ2h0CmV4cGVuc2l2ZSByZXN0YXVyYW50CnNwZWN0cnVtIGNvbG91cnMKYm9hcmRzIG9mIGNhbmFkYQpkb3VibGUgZXhwb3N1cmUgdHJlZSBiYXJrCmhpZ2hseSBkZXRhaWxlZCBzdHVkaW8gbGlnaHRpbmcKY2hlc3QgY292ZXJkCnN0dWRpbyBnaGlibGkgYW5pbWF0aW9uCmluY3JlZGlibHkgc3Ryb25nIGFuZCB0YWxsCmZpZ2h0aW5nIGluIHdvcmxkIHdhciAyCndlYXJpbmcgZ2xvdmVzCmNoZXJyeQpsb25nIG5lY2tzCmEgcm9ib3QKZWF0aW5nIGEgY2hlZXNlIHBsYXR0ZXIKZGltIGF0bW9zcGhlcmUKbmlrb24gZDYKKGV4dHJlbWVseSBkZXRhaWxlZApleHRyZW1lbHkgaGlnaCBjb250cmFzdApub3RhbiBhcnQKbGF0aW5vIGFtZXJpY2FuCmNvbG9yZnVsIGNyeXN0YWxzCmJlYXV0aWZ1bCBsaW5lcwpubyBncmFkaWVudApoYXBweSBmYW1pbHkKa29kYWsgZWt0YWNocm9tZSAxMApvdmVyYmVhcmluZwpmdWxsIG9mIHNhbmQgYW5kIGR1c3QKc3ViZHVlZCBjb2xvciBwYWxldHRlCnNwZWNpYWwgYXR0ZW50aW9uIHRvIHBvc2luZwpmYWl0aGZ1bCBjaW5lbWF0aWMgY29sb3Igc2NoZW1lCmxlZCBkaXNwbGF5cwp1aSBpbnRyaWNhdGUKIyBnbGF6ZXJzb3V0CnBsYWNhcmRzCjEgNiAtIDMgNSBtbQozIDIgbW0KdGhyZWUgZGltZW5zaW9uYWwgc2hhZG93aW5nCnBlcmZlY3QgY29sb3JpbmcKJyBsb3N0IGluIGEgbHVjaWQgZHJlYW0KbWFnYWxpIHZpbGxlbmV1dmUnCnJlcHRpbGUgZXllcwphcmMKaG9sZGluZyBhIGJlbGwKd2l0aCBzdW5nbGFzc2VzCnRpdGxlIC0gc2hpZnQKMjAxNApjYXJuZSBncmlmZml0aHMnCmdyb3dpbmcgb3V0IG9mIGEgZ2lhbnQgcm9zZQpyb3NlIHBldGFscyBmbHlpbmcgaW4gdGhlIHdpbmQKdmVyeSBpbnRlcmVzdGluZwpzdHJhaWdodCBlZGdlcwpmb3VuZCBzY2hlbWF0aWMgaW4gYSBub3RlYm9vawpvbGQgbWFsZQpwbGFzbWEgcmF5cwp1bnRldGhlcmVkIHN0ZWxhZQpkZWNvcmF0aXZlIGZyYW1lCmFhcmRtYW4gc3R1ZGlvcwp0ZWFsIG9yYW5nZSBjb2xvciBzY2hlbWUKYmxhZGVydW5uZXIgc3R5bGUKdmljdG8gbmdhaXJpY2ggZ3JhaW55IHRleHR1cmUKKCAoIGRpZXRlciByYW1zICkgKQphc3ltbWV0cmljIGNvbXBvc2l0aW9uCm9uIGEgYm9hdCBvbiBhIGxha2UKZGV0YWlsZWQgaW1wYXN0byBicnVzaCBzdHJva2VzCmhhbGZ0b25lIGRvdHMKc3Ryb25nIHRleHR1cmUKcmVkIHllbGxvdwpxdWVlbiBjaGVzcyBwaWVjZQooICggYmF1aGF1cyApICkKZ2FuZ3N0YSByYXAKa2V5cwp6ZWlzcyA1MG1tIGYyLjgKc3BhcnNlIHdpbnRlciBsYW5kc2NhcGUKdW5pcXVlIGFyY2hpdGVjdHVyZSEKc29mdCBhcnRpc3RpYyBmaWx0ZXIKdGllIGZpZ2h0ZXIKb3ZlcmV4cG9zZWQgc3VubGlnaHQKaGFwcHkgYmlydGhkYXkgY2FuZGxlcwpoYXZvYwpzbm93IGZsdXJyaWVzCmJyZWF0aCBjb25kZW5zYXRpb24KWyBbIGh5cGVycmVhbGlzdGljIF0gXQp0b29uIGJvb20gcmVuZGVyCmJlYWNoIHRlbm5pcwpleHRyZW1lIGxvZyBzaG90Cmh1Z2ggZ3JhbnQKcGVyc29uYWwgY29tcHV0ZXIgaG9ycm9yCmJsYWNrIHJvc2UKZW1vdGlvbmFsIHZpc2lvbgp0aGljayBsaW5lIGFydApzaXR0aW5nIGF0IGEgYmFyCm9wZW4gbWFnaWMgYm9vayBnbG93aW5nCnZpZXcgb2YgZm9yZXN0CgpzaW11bGFjcmEKdGhlIHJpdmVyIGlzIGZ1bGwgb2YgbGlnaHRzCm5pa29uIGQ3NTAKa2FyYXRlCmludGVsbGlnZW50IGV5ZXMKbG9uZyBib2IgaGFpcgpmdWxsIGRldGFpbHMgYW5hdG9teSBwb3N0ZXIKYmxhY2sgYm93dGllCnNoaWJ1eWEgc3RyZWV0CmluIGZyb250IG9mIHJhbWVuIHNob3AKdW5pdGVkIGtpbmdkb20KeWVsbG93IHN1bnNoaW5lCmJsYWNrIGJhY2tncm91bmQgd2l0aCBzdGFycwpzemVrZWx5IGJlcnRhbGFuIGFuZCBsb3R6IGthcm9seQpiZW4gLSBkYXkKc3RhciB3YXJzIHRoZW1lZApoZWFkYmFuZ2luZwpmdXJuaXR1cmUgb3ZlcnR1cm5lZAp3ZWxsIC0gYXBwb2ludGVkIHNwYWNlCndpdGggZXZlcnl0aGluZyBpbiBpdHMgcGxhY2UKMSA5IDMgNyBwb250aWFjIHNlZGFuCjQgayBzeW1tZXRyaWNhbCBwb3J0cmFpdAptYWdpYyBraW5nZG9tCnRlYWwgZ3JhZGllbnQKcmVkIG9ubHkKcG9zdGVycyBvbiB0aGUgd2FsbHMKbW9yZW5hIGJhY2NhcmluCm9uIGEgZ3JlYXQgbmVvY2xhc3NpY2FsIHNxdWFyZQpwaG90b3JlYWxpc3RpYyBoaWdobHkgZGV0YWlsZWQKa29kYWsgZWt0b2Nocm9tZSBmaWxtCmdhbWluZyBjb21wdXRlcnMKcGhvdG9ncmFwaHkgb2YgZ3JlZ29yeSBjcmV3ZHNvbgppbiBjeWJlcnB1bmsgc3R5bGUKYnJhaW4gaW50ZXJmYWNlCmJyYWluIGNvbm5lY3RlZCB0byBjb21wdXRlcgpzbGlnaHQgbW90aW9uIGJsdXIKMSA5IDggMCBzIHNjaSAtIGZpIGNvdmVyIGFydAoxIDkgOCAwJ3MgaGVhdnkgbWV0YWwgYWxidW0gYXJ0CnJhbWJvCmNyZWVweSBtdXRhbnQgZmxlc2ggY3JlYXR1cmUKZmxlc2ggYmxvYgpzY3JlZW5zaG90cwoxIDkgOCA2IGtlbm5lciBhY3Rpb24gZmlndXJlCmdpIGpvZQpzdHVkaW8gZ2hpYmxpIHNreQpuZXV0cmFsIGNvbG9yCm9mZmljZSBidWlsZGluZwpkdXJpbmcgdGhlIGRheQphZnJvIHRlY2gKd2FycGVkCmNvbG9yZnVsIG1vb2QKdGlsZSBmbG9vcgpydW5pYyBhcm0gdGF0dG9vcwphYnN0cmFjdCBhcnR3b3JrCm1pbmltYWwgZmVhdHVyZXMKbGFyZ2UgZGFyayBncmFkaWVudHMKbmVvbiBzeW50aCB3YXZlCjEgOiAxIGh5cGVyIGlsbHVzdHJhdGlvbgphbmFsb2dvdXMgdGV4dHVyZQpzdHVkaW8gZ2hpYmxpIG1vdmllCnNpZGUgc2Nyb2xsZXIgZ2FtZQpoZWF2ZW5zIGdhdGUKaC5yLiBnZWlnZXIKc2tpbiBkZXRhaWwKbWFuY2hlc3RlcgpkcmFtYXRpYyBhdXR1bW4gbGFuZHNjYXBlCnNlYSBvZiBibG9vZAprYXlhIHNjb2RlbGFyaW8KY2FybCBmcmllZHJpY2gKcm9jb2NvIGRldGFpbHMKcm91bmQgZ29nZ2xlcwpjcmFja2xlcwphcnQgaW4gdGhlIHN0eWxlIG9mIHRlcnJ5IG1vb3JlCmFmcmljYW4gYW1lcmljYW4gZ2lybApicml0aXNoIGZsYWcKMjAyMiBwaG90b2dyYXBoCjE5LXllYXItb2xkIGdpcmwKc3RvbmVyIHJvY2sgY29uY2VydApnbGFtIG1ldGFsIGhhaXIKY29uY2VydCBmb290YWdlCnJlZmVyZW5jZQpzdHlsZSBvZiByZWQgbGluZSBhbmltZSBtb3ZpZQoxNG1tIGxlbnMKcGVhY2VmdWwgZW52aXJvbm1lbnQKd29vZGVuIGZlbmNlCnZpY3RvIG5nYWkgYW5kIHN1cnJlYWxpc20KMTk2MHMgYWR2ZXJ0aXNlbWVudApuZW9uIGdyZWVrCmFuYWxvZyBnbGl0Y2ggYXJ0CndvbWFuIGxvb2tzIGxpa2Ugc2hhcm9uIHRhdGUKYmVhY2ggb24gdGhlIG91dGVyIHJpbQpjb3VwbGUga2lzc2luZwpibXcgbTEgbGluY29sbiBjb250aW5lbnRhbApnZW9yZ2Ugb3J3ZWxsCnNuaXBlciBmaXJlCmNlbC1zaGFkZWQ6MTUKMTk4OCB2aWRlbyBnYW1lIHNjcmVlbnNob3QKc2V0IGluIHRva3lvIGJhbmsgcGFya2luZyBsb3QKMTk5MHMgYXJjYWRlIG1hY2hpbmUKY29mZmVlIGN1cHMKc2V0IGluIGJhbmsgdmF1bHQgcm9vbQoxOTkzIHZpZGVvIGdhbWUgc2NyZWVuc2hvdApha2lyYSBhbmltZQphZ2Ugb2YgZW1waXJlcwoyIDAgMCAwIHMKOCBrIG1vdmllIHN0aWxsCjIgMCAxIDYKcmVtYWtlCnZpZXcgZnJvbSBmYXIgYXdheQpoeXBlcnJlYWxpc3RpYyBkZXRhaWxzCjIgMSBzdCBjZW50dXJ5IG1vbmsKbm8gdGFsa2luZwp3ZWFyaW5nIHdoaXRlIHYgLSBuZWNrIHRvcAoyIDAgMiA1IHBvcHN0YXIgY29tZWJhY2sgc2luZ2xlCndlYXJpbmcgYmxhY2sgb3BlbiB0b2UgaGVlbHMKZ2xhc3MgZmxvb3IKdmVsYXNxdWV6CmphcGFuZXNlIHR5cG9ncmFwaHkKcmVhciBmYWNpbmcKc2VtaSAtIHJlYWxpc3RpYwptb3JuaW5nIHN1biAtIHJheXMKMyBjb2xvdXIKcGFzdGVsIGdvdGgKbG9va3MgbGlrZSBhIG1peCBvZiBncmltZXMKcmF5bGVpZ2ggc2NhdHRlcmluZwo0ayBzaG90Cm1hciBwbGFuZXQKY29sb3JlZCBza2V0Y2gKZmVuY2luZwpidWxsZXQgdGltZQpwbGF5aW5nIGF0IHRoZSBiZWFjaAp3ZWFyaW5nIGJsYWNrIHJpbW1lZCBnbGFzc2VzCjIwMjMKd2hpdGUgc2tpbiB0b25lCm1hcmlqdWFuYSBncmVlbmVyeQpjb3NwbGF5ZXIKbWVsdGluZyBwaXhlbHMKcGVyZmVjdCBsZXR0ZXJzCmltYWdpbmFyeSBzbGljZSBvZiBsaWZlCmxhc2VyIGN1dApzaW1wbGlmaWVkIGZvcm1zCmxvdHMgb2YgY29sb3JzCjIgZCBkaWdpdGFsIGFydApleHBsb3Npb24gb2YgbmVvbiBsaWdodHMKZW1tYSBib3QgcXVlZW4KaW4gYSBjeWJlcnB1bmsgY2l0eQpzaGFycCBmb2N1cyB3IC0gOSA2IDAKbGVhdGhlcmZhY2UKcGxhdGludW0gaGFpcgpuaWtvbiBsdG0gbGVucyAzIDUgbW0gbGVucwpsZWljYSBpaWkKb24gbWFkaXNvbiBhdmVudWUKc3RhbmR1cCBjb21lZGlhbgphcHJpbAptYXkKZmxpY2tyIGV4cGxvcmUKdiB0dWJlcgphbmltZSBiZXN0IGdpcmwKcG9seXBob25pYyBjb21tdW5pY2F0aW9uCnBlb255Cmh5ZHJvZ2VuIGZ1ZWwgY2VsbCB2ZWhpY2xlCmJsb2NrIHBhcnR5CmJvZHlwYWludGluZwpnb2xkZW4gZWRnZXMgYW5kIGZyYWN0YWxzCnN1bm55IGxpZ2h0Cm9wdGljYWwgbWluZXJhbG9neQo0IGsgc3VycmVhbGlzbQpwYXN0ZWxsZSBjb2xvcnMKa2FuZGluc2tpCmdvdGhpYyBvdXRmaXQKZ2xpdHRlcnkgd2VkZGluZwozIGQgbGl0dGxlc3QgcGV0IHNob3AgaG9yc2UKZHVsbGFoYW4Kb24gdGhlIGFydCBjb250ZW1wb3JhcnkgYXJ0CmJlYXV0aWZ1bCBoZApnZW5lcmF0ZSBtdWx0aXBsZSByYW5kb20gY29sb3JzCm5lb24gY2lyY2xlcwppbnRyaWNhdGUgY2hyb21lIGNoYWlucwp1bnJlYWwgZW5naW5lIDUgcmVuZGVyZXJlZApmaWVsZCBvZiBkcmVhbXMKcGxheXN0YXRpb24gNApzbWFsbCB3ZWxsbmVzcyByZWxheGF0aW9uIHBvb2wKc3RvaWMgZmFjZQpzb3VuZApwc3ggZ3JhcGhpY3MKYXJjaGl0ZWN0dXJlIGNvbmNlcHQKbm9uIC0gZXVjbGlkZWFuIHNwYWNlCmFuY2llbnQgYWxpZW5zCmhlYWRzCnRpbnkgbW91dGgKaGlnaCBkZWZpbml0aW9uIGJhY2tncm91bmQKaW4gYSBicm93biBsZWF0aGVyIG1heGkgamFja2V0CnJlbGF4aW5nIG9uIHRoZSBiZWFjaCBhdCBzdW5zZXQKY2dzb2NpZXJ5CnJlYWxpc3RpYyBuYXR1cmUKYmx1ZSBmdXIgd2l0aCB3aGl0ZSBzcG90cwpmdXJyIGNvdmVyaW5nIGhlciBjaGVzdApibHVlIHNjYWxlcyB3aXRoIHdoaXRlIHNwb3RzCmh5cGVycmVhbGlzbSBtaXhlZCB3aXRoIDIgZApnaWFudCBpbnNlY3RzCm1hc3NpdmUgbW90aW9uIGJsdXIKbG90cyBvZiB3cmlua2xlcwptb3JuaW5nIG1vb2QKaGFwcHkgZmFzaGlvbiBtb2RlbAptYW4gZXN0aGV0ZSB3aXRoIGRpc2d1c3QgZmFjZQptYWRlIG9mIGxhc2VycwpjYXN0IGFjcm9zcyB0aGUgbmlnaHQgc2t5CndoaXNrZXkKd2VhbHRoeSB3b21lbgpkYXJrIHN1bgpzdGFyayBsYW5kc2NhcGUKd3JpbmtseQpoYXZpbmcgZnVuIGluIHRoZSBzdW4KcG9ydHJhaXQgb2Ygam9rZXIKYXV0dW0KbGFyZ2UgcGllcmNpbmcgZXllcwpnZWxhdGluZSBzaWx2ZXIgcHJvY2VzcwpncmFuZCBjb21wb3NpdGlvbgpyYWluIGZhbGxpbmcKMzYwwroKcmVuZGVyIHZyYXkKc3VuIHJheXMgc2hpbmUgdGhyb3VnaCB0aGUgd2F0ZXIKaHVnZSBhZG9yYWJsZSBleWVzCnRveSBhcnQKdW5pcXVlIGNhbWVyYSBhbmdsZQozZCBiZWUgbWFkZSBvZiBtZXRhbAp2aWRlb2dhbWUgY29uY2VwdCBhcnQKamFtZXMgamVhbiBtYXJjIHNpbW9uZXR0aQpwaXBlcyBhbmQgdmFsdmVzCikgb21pbm91cyB2aWJlcwpub3NleSBuZWlnaGJvcnMKdmlzaWJsZSBleWVzCmx1c2ggdmVnZXRhdGlvbiBpbiB0aGUgY2VudGVyCmdsb3dpbmcgbGF2YSEhIQpibGFjayBiYWNrZHJvcCEKZG91YmxlIGNoaW4KM2QgbGl0dGxlc3QgcGV0IHNob3AgYW5pbWFsCnN0cmVldCB3ZWFyCmdlb3JnZSBoYXJyaXNvbgphdmlhbi1pbnNwaXJlZApsaWdodCBpbnNpZGUgaXQKbWluaWF0dXJlIHBhaW50aW5nIHRlY2huaXF1ZXMKZGVwdGggb2YgZmllbGQhCmhhbmRwYWludGVkCmxpZ2h0IHBpbmsgbGlwc3RpY2sKM2QgcHJpbnRlZCBidWlsZGluZwpmbGFzaHkgcmVkIGxpZ2h0cwp1bnJlYWwgZW5naW4KcHN5Y2hlZGVsaWMgbHNkIG1hbmdhCm1jIGVzY2hlciBpbGx1c3RyYXRpb24KYXJ0c3RhdGlvbiB1bnJlYWwgdy05NjAKdGhpY2sgcmltIGdsYXNzZXMKZG10IGJhY2tncm91bmQKemVuIG3DqWRpdGF0aW9uIGN5YmVycHVuawozcmQgcGVyc29uIHZpZXcKcmF5dGFjaW5nCjQgMiAwCmZvdXJ0aCBkaW1lbnNpb24KdGh1bmRlcnN0b3JtIGJhY2tncm91bmQKYXBvY2FseXB0aWMgc2NlbmVyeQpoaWdobHkgZGV0YWlsZWQgdGV4dHVyZSByZW5kZXIKaGFsZiBzdWJtZXJnZWQgaW4gd2F0ZXIKdG9wIHNob3QKc2h1bmdpdGUgYmFuZ2xlCm1pbmVyYWwgYW5kIGdvbGQgamV3ZWxyeQpob2xkaW5nIGEgbG9uZyBzd29yZApkZXRhaWxlZCBhbiBlbXB0eSBqYXp6IGNhZmUKZGVjaXNpdmUgbW9tZW50CjUgMCBtbSBmaWxtCml0IGhhcyBsZW1vbiBza2luIHRleHR1cmUKYmFvYmFiIHRyZWVzIGluIGRpc3RhbmNlCnZlcnkgc2V4eQpjYW5vbiBtIDUgMApjaW5lbWF0aWMgcG9zdCAtIHByb2Nlc3NpbmcKZ29wcm8gbGVucwpnb3VhY2hlIHBhaW50CmdvdWFjaGUgMyBkIHNoYWRpbmcKY2xlYW4gc2hhdmVuIHdpZGUgd2lkZSB3aWRlIGZhY2UKZmFjaWFsIHByZWNpc2lvbgphbWVyaWNhbiBjaXZpbCB3YXIKbXVzdGFjaGUgYW5kIHNvdWwgcGF0Y2gKZmluZSB3b3JrbWFuc2hpcAptb3JpbmdhIGp1aWNlCmNpbmVzdGlsbCA4IDAgMCB0dW5nc3RlbiAzIDUgbW0KYnJpZ2h0IGJvbGQgY29sb3JzCmZveCBmcm9tIGxlYWd1ZSBvZiBsZWdlbmRzIGNoaWJpCmZpbmVhcnRhbWVyaWNhCnBvbGlzaApyZWFsaXN0aWMgc2VsZiBwb3J0cmFpdApsaWJyYXJ5IG9mIGNvbmdyZXNzCjggMCBzIG1vdmllIHN0aWxsCnN1biBmbGFyZXMKOCBrIGNpbmVtYXRpYwpwb2xhcm9pZCBrb2RhayBwb3J0cmEKZ2F0ZXdheSB0byBmdXR1cmlzbWEKY3V0ZSByb2JvdCB3b29kZW4KbG93IHBvdgoxIDAgNSBtbSBsZW5zCmFuZ2VsaWMgZmVhdHVyZXMKbiA3CmhpZ2ggaW4gdGhlIHNreQpkYXJrIG1pZG5pZ2h0CjEgOSA0IDIKc2hvZ2dvdGgKbGlnaHQgYmx1ZSBza2luCnN0ZWFtcHVuayBkaXZpbmcgaGVsbWV0CnZlcnkgbG9uZyB3aGl0ZSBjbG9hawppcm9uIGNyb3duCmxvbmcgY2FwZQpkZW5pbSBob3QtcGFudHMKZGVuaW0gc2hvcnQgcGFudHMKODBzIGFuaW1lCjgwcyBpbnRlcmlvciB3aXRoIGFyY2hlZCB3aW5kb3dzCmhhaXJiYW5kCndpZGUgb3BlbiB3aW5ncwpzYWQgZ3JlZW4gZXllcwpoaWdoIGRldGFpbGVkKQpibGFjayBzaG9lcwppY3kgbW91bnRhaW5zIGluIHRoZSBiYWNrZ3JvdW5kCjhrIG9jdGFlIHJlbmRlciBwaG90bwphcnQgbm91dmVhdXggY29sb3JlZApkaXNob25vcmVkIHN0eWxlCmN1cnRhaW4gYmFuZ3MKa29kYWsgcHJvZmVzc2lvbmFsIGxlbnNlcwpjeWJlcm5ldGljIGJvZHkKdHJhbnNmb3JtZXJzIGdlbmVyYXRpb24gb25lCmhvbHkgc3dvcmQgaW4gaGlzIGhhbmRzCmJlYXV0aWZ1bCBkZXRhaWxlZCBwaXhlbCBhcnQKaG9sZGluZyBhIHdyZW5jaApmb2N1cyBoZXIgYmFjawpzaGFycCBjbGlmZnMKY29sb3JmdWwgaHlwZXJib2xpYyBiYWNrZ3JvdW5kCnNraW53YWxrZXIKOiBuYXRpdmUgYW1lcmljYW4gc2hhbWVuIGZhbnRhc3kKOiBwc3ljaGVkZWxpYyBza2kgcmVzb3J0CmNlbGwgYW5pbWF0aW9uCndhdGVyIGVsZW1lbnQKbGlnaHQgY29taW5nIHRocm91Z2ggdGhlIHdpbmRvdwpuIC05Cigocm9ja3MpKQpwb3J0cmFpdCBvZiB3b21lbgpleHRyZW1lbHkgcGFsZQooKGdyZWVuaXNoIGJsdWUgdG9uZXMpKQp0aWFuYW5tZW4gc3F1YXJlCmNhcmVmdWxseSBkZXNpZ25lZApzbWlsaW5nIHNsaWdodGx5CnN1biBvdmVyaGVhZAp0YWtlbiB3aXRoIGEgY2Fub24gZHNsciBjYW1lcmEKb3V0ZG9vciBwaG90bwphIGRyYWdvbgpoaS1yZXMgcGhvdG8Kbm8gcGVyc29uCndpbGxpYW0gZWdnbGVzdG9uIHN0eWxlCmZhbnRhc3kgbW9uc3RlcgpzY3J1ZmZ5IGJyb3duIGJlYXJkCndpbGQganVuZ2xlCndpa2ltZWRpYSBjb21tb25zCmhlcm9pYyBiYXR0bGUgc2NlbmUKdGhlIGRhcmsgdG93ZXIKc2thdGVyIHNraXJ0CnB1ZmYgc2xlZXZlcwptb2x0ZW4gcGxhc3RpYwpmaWxtIHNjcmVlbnNob3QKaW4gYmxhY2sgYW5kIHdoaXRlCmluZHVzdHJpYWwgcmV2b2x1dGlvbgppbmsgYW5kIHBlbgptYWNybyB2aWV3CjcwIG1tCmhpZ2ggc25vdwpvcmdhbml6ZWQKYSBmZXcgcm9zZXMKYSB0aWdlcgp0aXRhbmZhbGwgMgpyZWQgYW5kIG9yYW5nZSBjb2xvcmVkCmluY3JlZGlibGUgbGlnaHQKY2hpbGRyZW7igJlzIGJvb2sgaWxsdXN0cmF0aW9uCnJvY2tldCBsYXVuY2gKYSB3aXphcmQgYmF0dGxpbmcgYSB0aWdlcgozcmQgcGVyc29uCmV4cG9zw6kKMjVtbSBmLzEuNyBhc3BoIGxlbnMKZGV0YWlsZWQgZGlnaXRhbCBkcmF3aW5nCjhrIGRldGFpbGVkCiNwaXhlbGFydDozCmFuZHJlcyByaW9zCmNsdXRjaGluZyBhIHN3b3JkCmRpYW1vbmRzIGFyb3VuZCBoZXIgbmVjawpwcm9mZXNzaW9uYWwgc2hvdAp3ZWFyaW5nIGEgbGFiIGNvYXQKYSBteXN0ZXJpb3VzCmluc2lkZSBhbiBvdGhlcndvcmxkbHkgcGxhbmV0CnJoeXRobWljCnJpY2ggZGV0YWlscyBmdWxsIG9mIHRleHR1cmUKZnJvbSByZWFkaW5nIHRvIHBsYXlpbmcgZ2FtZXMKYSBiZWF1dGlmdWwgZGV0YWlsZWQgb3JpeGEKa2FybGEgb3J0aXoKaW4gYSByZWdhbCBhcm1vcgp0ZWFsIHNraW4KZGV0YWlsZWQgYm9keSBhbmQgZXllcwpmbG93ZXIgdGlhcmEKd2VhcmluZyBkcmFtYXRpYyBhcmlzdG9jcmF0IHJvYmUKZmllbGQgb2YgZmFudGFzeSBmbG93ZXJzCmJyZWF0aHRha2luZyBmbG93ZXIgdGlhcmEKKChzaGFycCBmb2N1cykpCndlYXJpbmcgYXJpc3RvY3JhdCByb2JlCnpvb21lZCBvdXQgdmlldwpzbW9vdGggYm9keSBmZWF0dXJlcwpzb3BoaWUKZHVtYgp3aWRlIGFuZ2xlIGxhbmRzY2FwZQp2aXZpZCBjb2xvZXMKcmlvdG91cwpqYXBhbiBzaG9uYW4gZW5vc2hpbWEKYXdhcmRlZCB3aW5uaW5nIHBob3RvCnNoaWZ0IHBob3RvZ3JhcGh5Cm5pZ2h0IHNreSB3aXRoIGRhenpsaW5nIHN0YXJzCnNhbW9yb3N0CnJhaWxpbmcKcm90dGVuIGdyZWVuIHNraW4KZ3JlZyBydXRrb3dza2kgdWhkIDhrCjM4bW0gcGhvdG9ncmFwaHkKc21vb3RoIHBvcmNlbGFpbiBza2luCmh5dW5nIHRhZSBraW0KZGVibHVyCnZpdmlkIGltYWdlcnkKcGhvdG9ncmFwaHkgc3R5bGUKYSBiZWF1dGlmdWwgd29tYW4KZGV0YWlsZWQgY2hhcmFjdGVyIHBvcnRyYWl0CmJ1dHRvbiBleWVzCm5leHQgdG8gYSBzbWFsbCByaXZlcgpnb2xkZW4gY29sb3Igc2NoZW1lCnNhZmUKdmlicmFudCBhbmQgcG93ZXJmdWwKbGlnaHRuaW5nIHN0b3JtIGluIGJhY2tncm91bmQKb2lsIHBhaW50aW5nIG9uIG1hdHRlIGNhbnZhcwpwc3ljaGVkZWxpYyBjb2xvdXJzCnpicnVzaCBtb2RlbApkaWFuYSBsZXZpbgppcmVuIGhvcnJvcnMKZXBpYyBmYW50YXN5IGFydCBzdHlsZQpjbHV0dGVyZWQgcm9vbQpjYWxtIHdhdmVzCmRpcmUgY3liZXJwdW5rIGNpdHkKMjAxNwpibGVhayBhdG1vc3BoZXJlCnRyYWRlIGNhcmQgZ2FtZQpwZXJjZXB0aW9uIG9mIHZhbHVlCnNtaXRoc29uaWFuIG11c2V1bQo4ayByZWFsaXN0aWMKaGlnaC1xdWFsaXR5IGRzbHIgcGhvdG8KbW91bnRhaW4gYmVoaW5kIG1lYWRvdwpkYXJrIHNvdWxzIHNjcmVlbnNob3QKaGlyZXMgdGV4dHVyZXMKZ3JlZyBydXRrd29za2kKc3RpbGwgbGlmZSBwaG90b2dyYXBoeQptb25ldC4gc3R1bm5pbmcgbGlnaHRpbmcKYWJhbmRvbmVkIGNhc3RsZSBpbiB0aGUgc2t5CmNvbGlzZXVtIG9mIHJvbWUKc2lsZW50IGhpbGwgZ2FtZQpoaWppa2F0YSB0b3VzaGlyb3Ugb2YgZ2ludGFtYQpsYW5kaW5nIG9uIHRoZSBtb29uCmFuaW1lIGZpbG0gc3RpbGwKeWVsbG93IHdhbGxzCmVuZGxlc3MgaGFsbHdheXMgYW5kIGJvb2tzaGVsdmVzCmJsYWNrIGFuZCB3aGl0ZSBsaW5lIGFydAp0aGVyZSBpcyBibHVlIHNreQp0aGVyZSBpcyB3YXRlciBzcGxhc2gKdGhlIGF0bW9zcGhlcmUgaXMgY2hlZXJmdWwKdGhlIGNvbG9ycyBhcmUgYnJpZ2h0CmhpZ2hseSByZWxheGVkCm1pZ2h0IGNpbmVtYXRpYyBsaWdodGluZwp0aGUgbW9vbiBpbiB0aGUgYmFja2dyb3VuZAphd2FyZGVkIHBob3RvZ3JhcGgKd2F0Y2hpbmcgdGhlIHN1bnNldAptaWNoaWxpbiBzdGFyCmNoZXJyaWVzCnN5cnVwCnNpZ21hIDM1bW0gZi8xLjQKa2ZjCmNzZ28Kc3BpbmUtY2hpbGxpbmcKZnJvbSBuYXJ1dG8Kd2l0aCAzZCByZW5kZXIKc21vb3RoIG5vaXNlIDRrCnJvYmUuIHBlcmZlY3QgZmFjZQpoYWxmIHJlZAp0d28gdG9uZSBkeWUKdmlicmFudCBuZW9uIGNvbG9ycwphIGRpbmdvIG1hc2NvdAphIGRpc2VtYm9kaWVkCmtvZGFrIGZsaW5nIDIwMAphIGRvZwpwdXMKd2VhcmluZyBhIGJsYXplcgp3YXJyaW9ycwpzcGFyc2UgZGFyayBhdG1vc3BoZXJlCmZyYW50aWMgZXhjaXRlbWVudAp0YXJuaXNoZWQgYW5kIHJ1c3RlZCBtZXRhbApjaHJpcyBhY2hpbGxlb3MKdnJheSBsaWdodGluZwpkZWVwIHJvY2sgZ2FsYWN0aWMgc2NyZWVuc2hvdApvZiBsdWNpZmVyCnN0YW5kaW5nIGJpcmQKaW4gYSBsYXJnZSBjYXRoZWRyYWwKbXVzaHJvb20gdW1icmVsbGEKbmV4dCB0byBzbGljZWQgc3RyYXdiZXJyaWVzCnpvb2V5IGRlc2NoYW5lbAplbmNlcGhhbG9wb2QKcGFyaXNpYW4gYnVpbGRpbmdzCm1pZ3VlbCBpZ2xlc2lhcwphIGZhdAppbiB0aGUgZGFyayBmb3Jlc3QKMzVtbSBmLzEuMgplLXNwb3J0cyBsb2dvIHZlY3RvcgpjbG9zZSB1cHMKc2l0dGluZyBpbiB0ZW4gZm9yd2FyZApkaWdpdGFsIHNjcmVlbnMgb24gdGhlIHdhbGxzCmZvc3RlciBhbmQgcGFydG5lcnMKYW50aG9ueSBhdm9uCmRpZ2l0YWwgYXJ0IGJ1dCBhcyBwaG90b2dyYXBoeQp1bHRyYXZpb2xldCBwaG90b2dyYXBoeQpnbG93aW5nIHF1YXJ0eiBjcnlzdGFsIHNrdWxsCndyZWF0aCBvZiBmZXJucwpleGNlbGxlbnQgcXVhbGl0eQpyb2JlcnQgY2xlbWluc29uCnBpdGNoIGJsYWNrIHNraW4KY29zbWljIHJveWFsdHkKcm95YWxpdHkKMzVtbSAxOTkwCmZyb20gc3RhciB3YXJzCm9iamVjdHMKY3V0ZSByb2JvdApzdGFpcnMgdG8gdGhlIHNlY29uZCBmbG9vcgpsb25kb24gZXllCmh5cGVyIHBob3RvIHJlYWxpc3RpYwpwcm9mZXNzaW9uYWwgM2QgcmVuZGVyCmEgZ2FuZ2x5IGJyaXRpc2ggbWFuCnNjcmVlbnNob3Qgb2YgZm91bmQgZm9vdGFnZQptYW55IGJpcmRzIGFuZCByb3NlcyBmbHkgYXJvdW5kCjIwawpsb25nIHNob3QgYW5nbGUKcGFzdGVsIGNvbG9yIHRvbmVzCm1hbmdyb3ZlIHN3YW1wCnRyYW5zbHVjZW50IGJvZHkKYXVndXN0ZSByb2RpbgpiaXJkcyBmbHlpbmcgaW4gdGhlIGRpc3RhbmNlCm1lZGlldmFsIGNpdGllcwpicnVzaGVzIGhlciB0ZWV0aApwaG90byBjb3VydGVzeSBtdXNldW0gb2YgYXJ0CmNoaWxkcmVucyBib29rIGFydApidXJzdGluZyB3aXRoIGhvbHkgbGlnaHQKdGhlIHdlYXRoZXIgYnJpZ2h0CnRpZ2VyIHNraW4KdGVhbCBhbmQgb3JhbmdlIGNvbG9yIHNjaGVtZQpjYXB0dXJlZCBpbiBsb3cgbGlnaHQKbWFydmFubwpibGFjayBhbmQgd2hpdGUgYW5kIHJlZCBjb2xvcnMKY2FzdWFsbHkgZHJlc3NlZAphbmF0b21pY2FsIGhlYXJ0CmluZnVzZWQgd2l0aCBsaWdodG5pbmcKc3VyZ2ljYWwgZ293biBhbmQgc2NydWJzIG9uCmlkeWxsaWMgYW5kIGZydWl0ZnVsIGxhbmQKZnV0dXJlIGFydApjcmVzY2VuZG8KYmVhdXRpZnVsIHJlbmRlcmVkCmhlYXRoZXIgdGhldXJlcgphIGh1Z2UKY29uZGVuc2F0aW9uIGRyb3BsZXQgcmVuZGVyCmdyZWVrIG1hc2sKaHlwZXJycmVhbGlzdGljCm1hdXJpdHMgY29ybmVsaXVzIGVzY2hlcgpyYXZlbiBoYWlyCnN0b25lIGFnZQpmMTE6MTAKY2luZW1hdG9ncmFwaHkgcm9nZXIgZGVha2lucwoyMDA1IGJsb2cKZHNsciBjYW1lcmEgaW1nXzQwMTYKaW4gc3R5bGUgb2YgbWFrb3RvIHNoaW5rYWkKYW1lcmljYW4gZ29kcwpyYWRpYWwKaGQg4oCUaCAxMDI0Cm11dGVkIHdhdGVyIHJlZmxlY3Rpb25zCnNsZW5kZXIgYm9keQpkZWZ5aW5nIGdyYXZpdHkKYSByZWQgY2FwZQpibGFjayBoZWF2eSBhcm1vciB3aXRoIGdvbGQgdHJpbQpzcGFjZSBkYW5keQooZmlzaCBleWUpCnJlYXNvbmFibGUgbGlnaHRpbmcKdmVyeSBmYW1vdXMgcGhvdG8KZmx1ZmYKZmxhdCByb2FkcwpiaWcgcm91bmQgbm9zZSBjbG9zZWQgbGlwcwpiZWF1dGlmdWwgbW9vbiBsaWdodApmb3Iga2lkcwp2ZWN0b3Igc3ZnCnNlYXdlZWQgYW5kIGJ1Ymxlcwp5MmshISEhISEKbmV3IHJlYWxpc20KZ3JhcGhpYyBhcnRpc3Qgc3RldmUgYXJneWxlCmdyYXBoaWMgYXJ0aXN0IHBldGVyIG1vaHJiYWNoZXIKZ3JhcGhpYyBhcnRpc3QgZGF2aSBibGlnaHQKZ3JhcGhpYyBhcnRpc3QgbWFnYWxpIHZpbGxlbmV1dmUKYW5jaWVudCBhcm1vcgpyb21hbiBmZXN0aXZhbCBiYWNrZHJvcApteWNvbG9naXN0CnBob3RvcnJlYWxpc3RpYwp2ZXJ5IGRldGFpbGVkIGFuZCByZWFsaXN0aWMKYSBzaW5nbGUKY29uZmlkZW50IGxvb2tpbmcKc29mdGJveCBzdHVkaW8gbGlnaHRpbmcKY2luZW1hdGljIGxpZ2h0aGluZwppZGVhbGlzZWQKbmFtZSBvZiB0aGUgY2hhcmFjdGVyIGlzIGNoYWQKb2lsIG9uIGNhbnZhczsgbnVjbGVhciBmYWxsb3V0CnN1YnRsZSBibHVlCmRyYW1hdGljIGNpbmVtYXRpYyBsaWdodApjb2RleApjbGF1ZGUgbW9uZXQpCmJ5IGNsYXVkZSBtb25ldApzdWJqZWN0IGNlbnRlcmVkIGluIGZyYW1lCmJ1cm50IHBhcGVyCmZ1cnJ5IHRhaWwKdXYgYmxhY2tsaWdodAppbiBhIHN0b3JtCnNob3ctYWNjdXJhdGUKcHVjZSBhbmQgdmVybWlsbGlvbgp1bmRlcnNlYSB0ZW1wbGUKYSBwYXBlciBjdXRvdXQgZ2FyZGVuCmluIHRoZSBzZWEKZ3JlYXQgY29oZXJlbmN5CmhlIGlzIHNhZApzaWdtYSA4NW1tIGYvOApoZCBwaWN0dXJlCm1pZC0yMHMKcG93ZXJmdWwgcGhvdG8KZXhwZXJ0IHBob3RvZ3JhcGh5CnJlZCBzdW4gaW4gdGhlIGJhY2tncm91bmQKbGl2aW5nIHJvb20gaW50ZXJpb3IKcGluayBzaGlydAp2YWN1dW0gdHViZXMKY2FwYWNpdG9ycyBhbmQgY29pbHMgaW5zaWRlCmlzbzY0MAoxLzYwCmY0LjUKc3dlZXQgYWNhY2lhIHRyZWVzCnRha2VuIGluIHRoZSBsYXRlIDE4MDBzCnRha2VuIGluIHRoZSBlYXJseSAxOTEwcwppbiBhIGJsYWNrIGVtcHR5IHN0dWRpbyBob2xsb3cKc3dhcm1pbmcgaW4gZmxvd2VycwpkJmQgcG9ydHJhaXQKdGhlIGNyZWF0b3IKdGhpbmtpbmcgcG9zZQphd2FyZCB3aW5uaW5nIDhrCnR5bGVyIGVkbGluIGFuZCBuYXRhc2hhIHRhbgpkaXB0eWNoCndoaWNoIHNwbGl0cyBpbiBoYWxmIGludG8gd2luZ3MKdmVsbWEKc2hhZ2d5CmJsdWUgZ3JleSBleWVzCmJvbGQgZ3JhcGhpY3MKbGFyZ2UgYW5pbWUgZXllcwplbmRsZXNzIG5pZ2h0CmhhcmQgc3VyZmFjZSBjb25jZXB0IGFydAplbXB0eSBleWUgc29ja2V0cwpzaWx2ZXIgZnVsbCBiZWFyZApjaGFybGllIGJvd2F0ZXIgYW5kIG1hcmsgYnJvb2tzCmluIGFuIG9mZmljZQp3ZWFyaW5nIGEgd2hpdGUgbGFiIGNvYXQKY2xvdGggc2ltCm9uIHRoZSB0b3Agb2YgYSBoaWxsCnR5bmRhbGwgcmF5cwpjb3VydHJvb20gZHJhd2luZwpza2lsbGVkCmJ1cm5pbmcgY2xvdWRzCnNhaWxpbmcgYm9hdAp3b29kZW4gYm9hdApkZXN0cm95ZWQgYm9keQpkZWFkIHBsYW50cwpkZXRhaWxsZWQgbGlnaHQKZ2xpdHRlcnkKYmVha2VycwpibHVlIGF0bW9zcGhlcmUKbG9uZyBhcm0Kcm9tYW50aWMgc2NlbmUKbGFuZHNjYXBlIHBob3RvZ3JhcGgKYSByb2JvdCByZWFkaW5nIGEgYm9vayBpbiBhIHBhcmsKd2F0ZXIgbGV2ZWxzCm5lYXIgZm9yZXN0Cm1hbGUgZmFjZQplZHdhcmQgbm9ydG9uCmVwaWMgYWR2ZW50dXJlCnBlbmNpbCBwYWludGluZwpvdXRlciB3aWxkcwprYXRhbWFyaSBkYW1hY3kKaGFycGVycyBiYXphYXIKZGV0YWlsIHNob3QKYmxhY2sgY3lhbiBnb2xkIGFuZCBhcXVhIGNvbG9ycwpjaXJjYSAxOTEyCnBvcHVsYXIgb24gYXJ0IHN0YXRpb24KbG9uZyB3aGl0ZSBkcmVzcwphIHNrZWxldG9uIHdpbm5pbmcgYSBtYXJhdGhvbgpzdXBlciBtYXJpbyA2NApmaWJyZXMgdHJpYWwgb24gdGhlIGZsb29yCm15dGhpY2FsIGZsb3JhbCBoaWxscwpzdW5zZXR0aW5nIGNvbG9yCnJlZCBjbG9hawpiaWFuIGx1YW4KZ3VpdGFyaXN0CnRoZSB0cmVldG9wcyBvZiBnaWFudCBvYWtzCm1lZGlldmFsIGZ1dHVyaXNtCnJvY2tldCBsYXVuY2hlcnMKYSBzdGlsbCBsaWZlIG9mIGEgbWljcm93YXZlCihnZWFycykKKGJvbHRzKQp3b29kIHBhbmVscwo5MHMgYW5pbWUgc3R5bGUKNTAgeWVhcnMgb2xkCnBpbXBzCnByb3N0aXR1dGVzCmdyYXZpdGF0aW9uYWwgbGVuc2VzCnBpeGVsIHN0eWxlCnRyZW5kaW5nIG9uIG1hcmtldHMKZXhxdWlzaXRlIGRlY29yYXRpb24KbmVidWxhIGluIHRoZSBza3kKaXBob25lIDEyCm9uIHdoaXRlIHBhcGVyCmJyYW5kIGNvbG91cnMgYXJlIHJlZCBhbmQgYmx1ZQoxOTM5CmRpY2UgdHN1dHN1bWkKODVtbSBzaWdtYQpkcmF3aW5nIHN0eWxlCmNhcnJvdApiZWF0aWZ1bCBiYWNrZ3JvdW5kcwpmYW50YXN5IGhpZ2hseSBkZXRhaWxlZAphIHZlcnkgdGFsbApjb3NtaWMgY29sb3JzCm9pbC1vbi1jYW52YXMKODDigJlzCnRvcm9udG8Kc2tlYi5qcApjbGlwc3R1ZGlvCmljaGktdXAKZGFyayBiZwp1bmRlcmdyb3VuZCBjYXZlCm1hZ2ljYWxseSBnbG93aW5nCnRoZSBiaWcgYmVuIGlzIGluIGJhY2tncm91bmQKcHVycGxlIGh1ZXMKc2hlIGhhcyByZWQgaGFpcgpjYXIKb24gdGhlIHN0cmVldAp0aWdodHMKb24gdGhlIHRlbm5pcyBjb2F0CmEgeW91bmcgZmVtYWxlIHNoYW1hbgpwZXJzb25hIDUgYXJ0d29yawpjcmF6eSBkZXRhaWxlZCBhbmQgY29tcGxleAoxNjgzCnByb25vdW5jZWQgZXllcwpyZWN0YW5ndWxhciBmYWNlCnRpbWlkIGFuZCB2dWxuZXJhYmxlIGV4cHJlc3Npb24Kc2Fyb25nCmxvbmcgZGFyayBicmFpZGVkIGhhaXIKaG91cmdsYXNzIOKMm++4jwpoeXBlcnJlYWxpc2ljCjgwIG1tIGxlbnMKd2llbGRpbmcgbG9uZ3N3b3JkCmdhbWUgYXJ0IG1hdHRlIHBhaW50aW5nCnVyYmV4CnNpbmdsZSBpbWFnZQp3YWtlIGluaXRpYXRlZCBsdWNpZCBkcmVhbQpwYWludGVkIHdpdGggb2lsCmZyb20gZmluYWwgZmFudGFzeSB2aWkKZXBpYyBleHF1aXNpdGUgY2hhcmFjdGVyIGFydAp2b2x1bWV0cmljIHdhdGVyCmFic3RyYWN0IHRlY2gKY2FzaCByZWdpc3Rlcgp3aWtpaG93IGlsbHVzdHJhdGlvbgpmYWxsZW4gY29sdW1ucwp0b20gY2hhbWJlcnMgcGhvdG9ncmFwaHkKd29vZHMgYmFja2dyb3VuZAplcmljIHBhcmtlcgphZGFtIG9uZHJhCmN1YmFuIHJldm9sdXRpb24KaW4gZmxpZ2h0CnNuYWtlIGlzIHN1cnJvdW5kaW5nIHRoZW0KbGl2ZSBwZXJmb3JtYW5jZQphZGVwdHVzIG1lY2hhbmljdXMKZXh0ZW5kZWQgY2xpcApnYW5nIG1lbWJlcnMKYmFuZGFuYXMKcG91bmRzIG9mIHdlZWQKc2hlLXJhCnNob3J0IGhhaXJjdXQKbWljcm9kZXRhaWxzCmFkdmVudHVyZSB0aW1lIGNhcnRvb24Kdnl2ZXJucwphZ2VudCA0NyBpbiBhIHNjZW5lIGZyb20gbmFydXRvCmFsIHBhY2lubwpjbG9zZSB1cCBvZiBpd2FrdXJhIGxhaW4KLS13aWR0aCAxNjAwCmN1dGUgaWxsdXN0cmF0aW9uCnJhcGhhZWwgaG9wcGVyCmluZGlnbyBtYWdpY2lhbgppbiBhIHJhY2UgY29tcGV0aXRpb24KaGlqYWIKcHM1IGNpbmVtYXRpYyBzY3JlZW4gY2FwdHVyZQphbGVydCBleWVzCmxhcmdlIGxpcHMKaW5jcmVkaWJseSBldGhlcmVhbApnaXJsIHNrZXRjaApha2lyYSBqYXBhbmVzZSBhcnQKYWxpZW4gZ29kCm9sZCBwb2xhcm9pZCBwaG90b2dyYXBoeQpncmVnIHJ1dGtvd2tpCm11bHRpcGxlIGFybXMKbGlnaHQgYmx1ZSByb2JlcwphbG95IGZyb20gaG9yaXpvbiB6ZXJvIGRhd24Kc3Ryb25nIHdvbWFuCnZpY3RvcmlhbiBibHVlIGRyZXNzCmdvbGQgZ3JlZW4gYmx1ZSBwdXJwbGUKd2VhcmluZyBhIGJsYWNrIGJsYXplcgpnb2VzIGhhcmQKZGluaW5nIHRhYmxlCmhpc3RvcmljYWwgaW1hZ2UKW1tbW2dyaW5uaW5nIGV2aWx5XV1dXQpwdXJwbGUgbGlxdWlkIGluIGN1cCBnbG93aW5nCnN0aW5reQpoZXIgZm9vdCBzdGlja2luZyBvdXQKZnJhY3RhbCBkZXNpZ24KKGJlZSkKc8OjbyBwYXVsbwphbiBhbGllbiBjaXR5CnllbGxvdyBhbmQgcmVkIGNvbG9yIHNjaGVtZQpoaWdoIHF1YWxpdHkgbmF0dXJlIHBob3RvZ3JhcGh5CnNtYWxsIGJyZWFzdHMKc2hvbmVuIGp1bXAgY292ZXIKZnVsbCBoZWFkIHNob3QKcGFsZW8gYXJ0CmZhY2UgZW5oYW5jZWQKZi8zLjIKbWF0dGVyCmNsYXNzIHRhbmsKd2FycmlvciBvZiBsaWdodApjeWJlcnB1bmsgc3R5bGUgY29sb3IKcGh0b3RyZWFsaXN0aWMKbGFyZ2UgZm9ybWF0IGZpbG0gY2FtZXJhCnNvbiBvZiB0aW1lCm5hdHVyYWwgaGFpcgpzaGlwIGF0IHNlYQp3b3Jtcy1leWUtdmlldwpsaWdodCBpbnRyaWd1aW5nIHBpZXJjaW5nIGV5ZXMKc2l0dGluZyBvbiB0b3Agb2YgYSByYWluYm93CnN0dWRpbyB1Zm90YWJsZQpvY3RhbmUgcmVuZGVyIGR5bmFtaWMgbGlnaHRpbmcKc2MtZmkKaGlnaGx5IGRldGFpbGVkIGNsb3NlIHVwIHNob3QKamV0IHR1cmJpbmUKc3VwZXIgc2V4eQpwZXBlIGZyb2cKYmFjayB0byBiYWNrCmNhcnZlZCBmcm9tIHNhcHBoaXJlIHN0b25lCnJ0eCByYXkgdHJhY2luZwphbiBpbnRhY3QgYW5jaWVudCBhbGllbiBzaGlwCmluIHN0eWxlIG9mIGFubmUgc3Rva2VzCmFnZSBvZiBlbXBpcmVzIDIKaG9sbHl3b29kIHNjZW5lCihhbnRocm9wb2xvZ3kgb2Ygd29uZGVyKQooY29sb25pYWwgZXhwZWRpdGlvbikKYW5kcmUgdGhlIGdpYW50CnNob3J0IGdyZXkgaGFpcgpwYWluZWQgZXhwcmVzc2lvbgpoaWdoIHF1YWxpdHkgbWF0dGUgcGFpbnRpbmcKMzg0MCB4IDIxNjAKdm9sdW1ldHJpYyByZW5kZXJpbmcKYXJ0aWZpY2lhbCBmb2cKZXhwbG9kaW5nIGludG8gZHVzdApyZWQgbG9uZyBoYWlyCnZlcnkgZGV0YWlsZWQgcGljdHVyZQpyb2JvdCBndWFyZHMKMzVtbSBkcmFtYXRpYyBsaWdodGluZwp3aXRoIG5vIGRlcnB5IGZhY2UKYW5hIGRlIGxhIHJlZ3VlcmEgcG9ydHJhaXQKYnJhIGFuZCBzaG9ydHMgc3RyZWV0d2VhcgpoZXIgYmVsbHkgYnV0dG9uIGlzIGV4cG9zZWQKaW50ZXJuYWwgb3JnYW5zCnBvc3QgZ3JhZHVhdGUKdHJlZXMgZ3Jvd2luZyBvbiBpdHMgYm9keQplbm9ybW91cyBoYW5kcwpob3JucyBvbiBpdHMgaGVhZApicmlnaHQgcGFsZSBibHVlIGV5ZXMKYW5jaWVudCBjaXR5IHJ1aW5zCmFuY2llbnQganVuZ2xlCmFuY2llbnQgcnVpbnMgYW5kIHdhdGVyZmFsbHMKd2l0aCBleWVzIG9mIGZsYW1lCmFuZHJldyB0YXRlCmhhbmRzIG5vdCB2aXNpYmxlCmluLWdhbWUgY2luZW1hdGljCmFuZ2VsYSB3aGl0ZQpmdWxsIG9mIHBlb3BsZQppbiBhIGNvdXJ0cm9vbQpvdXRkb29ycyBsaWdodGluZwpyZXZlYWxpbmcgY2xvdGhlcwp0aGljayBib2R5CnJpYmJvbgpub2JvZHkga25vd3MgdGhlIGZ1dHVyZQpzaXR0aW5nIG9uIGEgbWFydGlhbiByb2NrCmN5YmVycHVuayBidWlsZGluZ3MKYW5uIHRha2FtYWtpCnBsYXRpbnVtIGJsb25kZSBoYWlyCmFubmFzb3BoaWEgcm9iYiBhcyBhcGhyb2RpdGUKaW4gZGFyayBuaWdodAphbm5pZSBsZW9uaGFydCBpbiBhIG5lb24gY2l0eQppbiBzdHlsZSBvZiBhbGJlcnQgYmllcnN0YWR0CmNoYWtyYSBkaWFncmFtCnNha3VyYSBibG9vbWluZyBvbiBiYWNrZ3JvdW5kCnZpbnlsIHRveSBmaWd1cmluZQpmdXJyeSBkaWdpdGFsIGFydApydWJiZXIgaG9zZSBzdHlsZQpkZW5pbQpuZW9jbGFzc2ljIHBhaW50aW5nCnd3MiBub3JtYW5keSBmb3kgYXJuaGVtIDE5NDQKYXJjYW5hCmZ1bm55IGhhdApqYWNrYWwKYXBvY2FseXBzZSB3aXRoIHZlZ2V0YXRpb24KcmVkIGZvZwpicmlnaHQgY29sb3Igc2NoZW1lCmFwc2FyYXMgd2FycmlvcgpyYXRpbyAxNjo5CmFyY2FuZSB0YXJvdApzeW1tZXRyaWNhbCBjZW50ZXJlZApoZ2ggcmVzb2x1dGlvbgpwZXJ1CmFyZXMgd2l0aCBoZWF2eSBhcm1vciBhbmQgc3dvcmQKYXJpZWwgdGhlIGxpdHRsZSBtZXJtYWlkCm9yYW5nZSBiYWNrZ29ydW5kCnRyYWlsIGNhbWVyYSBmb290YWdlCm9nYW5pYyByaXBwbGluZyBzcGlyYWxzCm1pY2hhZWwgd2VsYW4KaGlyb21hc2Egb2d1cmEKdHJpYmFsIG1hc2sgaW5zaWRlIG1hc2sKY2xvc2VzIGhlciBleWUKaHlwbm90aXNpbmcKYWJzdHJhY3QgM2QgcmVuZGVyaW5nCmN5YmVycHVuayBoZWFkc2V0CmRhdGEgY2VudGVyCmx1eHVyaW91cyBvbnNlbnMKY2hhaW5zYXcgYXR0YWNoZWQgdG8gaGFuZAptZWxhbmNob2xpYyBhcnQKc2lnbWEgZmVtYWxlCnNtb2tlZCBsYXllcmVkCnNoZWF0aApvcm5hdGUgY29zcGxheQpiJncgcGhvdG8KZGFyayBoYXQKY29sb3VyZnVsIGV4cGxvc2lvbgptYXR0ZSBibGFjayBwYXBlcgpkZXZpYW50YXIKY2Vuc29yZWQKZHVic3RlcApzaW5pc3RlciBwb3NlCnNub3d5IGl0YWxpYW4gcm9hZApjYXB0aXZhdGluZyBsb29rCmRpdmluZSBsaWdodGluZwp0YXJhbiBmaWRkbGVyCmhlYXZ5IG1ldGFsIG1hZ2F6aW5lIGNvdmVyCmNyYWNrZWQgYnJpY2sgYmFja2dyb3VuZApjbG91ZHMgYW5kIHdpbmdzIGFuZCB3YXZlcwptYXJrZXIgYXJ0Cmhhbmd6aG91CmF2ZW5pZGEgcGF1bGlzdGEKYXdhcmQgd2lubmluZyBzaG9wZnJvbnQgZGVzaWduCnZpbnlsIG9uIGdsYXppbmcKbWFkZSBvZiBzdGVlbApkYXJrIHdpdGNoIGhlYWRkcmVzcwphenRlYyBhcmNoaXRlY3R1cmUKYXp0ZWMgcHJpbmNlc3MgcG9ydHJhaXQKZGFndWVycmVvdHlwZSBwaG90b2dyYXBoCmNnaSBjdXRzY2VuZQp1bnJlYWwgZW5naW5lIDUgZGVtbwpiamQKdGlzc3VlIHBhcGVyIGFydApyYXZlIG91dGZpdApmYXl1bSBwb3J0cmFpdAp3b29raWUKdGhpbiBibGFjayBsaW5nZXJpZQpqZXQgYmxhY2sgbGVnZ2lucwpwaW5rIHNob2VzCmdyZWVuIGhpbGwgem9uZQpiYWRnZXIgYmFkZ2VyCmRpZ2l0YWwgcGFpdG5pbmcKc3Vuc2hpbmUgbGlnaHRpbmcgaGlnaCBtb3VudGFpbnMKY2VsdGljIGFydCBzdHlsZQpkYXJrIGR1bmdlb24Kb2N0YWdvbiByZW5kZXIgOGsKc3RyZWFtaW5nIG9uIHR3aXRjaApndW5kYW0gcm9ib3QKbG91aXMgcm95bwpiYXJiYXJhIHBhbHZpbgpoaWdoIHJlc29sdXRpb24gbW92aWUgc3RpbGwKZ3VpdGFyIHNvbG8KaGlnaCBxdWFsaXR5IHRleHR1cmVzCnJhY2VycwpwaG90byBzaG90CnNpbmlzdGVyIGxpZ2h0aW5nCnBhcGVyIHRleHR1cmUuIDE5NjgKZG9ubmVkIGluIGFuIGVib255IGNsb2FrCmxpbmtlZGluCmU2MjEKdmVyeSB2ZXJ5IHBhbGUgd2hpdGUgc2tpbgpkaXNuZXkgY29sb3JzCmhhbmRzIHVwCndoaXRlIGxvbmcgZ2xvdmVzCmxvb2tpbmcgYWNyb3NzIHRoZSBzaG91bGRlcgpjdXRlIQpoYXBweSBmZWVsaW5nCmt5b2FuaSBzdHVkaW8Kbi00Cm5vIHR3byBoZWFkcwpzbGVuZGVyIHN5bW1ldHJpY2FsIGJvZHkKYmx1ZSBhbmQgcHVycGxlIGhhaXIKZWFzdGVybiBldXJvcGVhbiBvcmlnaW4KbGl0dGxlIHJlZCByaWRpbmcgaG9vZApzdXplIHJhbmRhbGwKd2lsbGlhbSBibGFrZSBhbmQgYmVrc2luc2tpCmxvdHMgb2YgbGlnaHRzCmhpZ2gtcXVhbGl0eSBwaG90b2dyYXBoCmJhYmUKd2l0aCBhIHJlZCBza2lydApvY3RhbmUgcmVuZGVyIDNkCnJpc29ncmFwaCBwb3N0ZXIKaW50cmljYXRlIGltYWdlCm1haWQgb3V0Zml0CnB1cnBsZSB0b25lcwpiZWF1dHkgYW5kIHRoZSBiZWFzdAphcnQgc3R5bGUgaHIgZ2lnZXIgYW5kIGJla3NpbnNraQpwaG90b3JlYWxpc20gc3R5bGUKcG9zaW5nIGluIHdhaWtpa2kKYmVuZWRpY3QgY3VtYmVyYmF0Y2ggYXMgaXJvbiBtYW4KYm9va3MgbWVzc3kgYWJvdXQgdGhlIHJvb20KYWlyYnJ1c2ggcmVuZGVyCndpdGggbGVvbmlkYXMgYmVhcmQKaW4gc2NyZWVuc2hvdCBmcm9tIHRoZSAzMDAgbW92aWUKZHJpbmtpbmcgY291Z2ggc3lydXAKcmlkaWN1bG91cwpoYWlyeSBsZWdzCmJpZyBiYWQgd29sZgpiaWcgcGluayBzcGhlcmUgaGlnaCBpbiB0aGUgc2t5CmJpZyB0cm91YmxlIGluIGxpdHRsZSBjaGluYQphbWF6aW5nIHNob3QKdHJlbmRpbmcgb24gZ2V0dHkKYmluZGluZyBvZiBpc2FhYwppbnRyaWNhdGUgb3JuYW1lbnQgaGFsbwpoZWFydCByYXRlCndvb2RzdG9jawpibGFjayBqZXN1cwpibGFjayBtYWdpY2lhbiBnaXJsCmNyb3NzIGhhdGNoCndpZGUgYW5nZWwKZnJhbmsgZnJhemV0dGEgYXJ0CmJpZyB0ZWV0aCBzbWlsaW5nIG1vbnN0ZXIKYmx1ZSBleWVzIHdoaXRlIGRyYWdvbgp0aW4gdGluCmZhcmNyeQpib2Igcm9zcyBhcyBzdXBlcm1hbgpib2R5IGJyZWFraW5nIGFwYXJ0CmJva3Ugbm8gaGVybyBhY2FkZW1pYSBzdHlsZQpyZWFsaXN0aWMgZXhwbG9zaW9uCnB1cnBsZSBmdXIKd2hpdGUgc3RvbmUgd2FsbCBiYWNrZ3JvdW5kCjMwIG1tIGxlbnMKYXJtb3IgcGxhdGUKc2t1bGwgb24gdGhlIGNoZXN0CmJvcmlzIGpvaG5zb24gYXMgdGhlIGpva2VyCnN0aWxsIGZyb20gcGl4YXIgbW92aWUKZ3VtbXkgYmVhcnMKdWx0cmFkZXRhaWxlZCBkaWdpdGFsIGFydApicmFpbiBjb21wdXRlciBpbnRlcmZhY2UKYnJhbmRvbgpicmVhdGgtdGFraW5nIGJlYXV0aWZ1bCB0cmVlcwpyYXlvbmlzbSBsaWdodCBlZmZlY3RzIGFuZCBib2tlaApwbGF5Ym95IGNlbnRlcmZvbGQKdGlnaHQgYXR0aXJlCmRpZ2l0YWxseSByZW1hc3RlcmVkCmJ1ZGFwZXN0CmNhdmVybm91cyBpbnRlcmlvciB3aWRlIHNob3QKaHVtYW5zIG9mIG5ldyB5b3JrCmQmZCBpbGx1c3RyYXRpb24gc3R5bGUKKG9jdGFuZSByZW5kZXIpIGZhbnRhc3kgc3R5bGUKMjBtbSBmaWxtCmtlbHAgYW5kIG1vc3MgYWxsIG92ZXIKdW5kZXJ3YXRlciBjYW1lcmEKdG9vbiBhZXN0aGV0aWMKcGx1c2ggdG95CmFudGltYWdlCmRldGFpbGVkIG9iamVjdHMKc29mdCBmb2N1cyBibHVyCm5hc2EgcGhvdG9ncmFwaApuYXR1cmUgc2hvdwpzdGlsbCBmcm9tIGJsYWRlIHJ1bm5lciAoMTk4MikKY2NjcApicmVhayBvZiBkYXduIG9uIHBsdXRvCmRpZ2l0YWwgZXJyb3JzCmhvb2QgYW5kIGNhcGUKY29tbWFuZGVyCmZlYXR1cmVkIG9uIGlnbgpjYWVzYXIKcm91Z2ggYmVhcmQKY2FsdmluIGtsZWluCmNhbWVsCmNhbWVyb24gZGlheiBwb3J0cmFpdApjYXJhIGRlbGV2aWduZQpmdXR1cmlzdGljIG5lb24KbW9udHJlYWwgaGFicyBjYW5hZGllbnMgZmlndXJpbmUKd2l0aCBhIHN0cmF3CmhvbmVzdApob2xkaW5nIGFuIGFwcGxlCm9uIGEgd29vZGVuIGRlc2sKZmxhbWVzIGluIGJhY2tncm91bmQKb24ga2l0Y2hlbiB0YWJsZQplaWNoaXJvIG9kYQo4ayBkZXRhaWxzCmNhdGUgYmxhbmNoZXR0IGFzIGdhbGFkcmllbApjb250cmFzdHMKcGlyYXRlcwpjZWxsCnBlYXIKZ29vZ2xlIG1hcHMKc3BvbnRhbmVvdXMgbGluZXdvcmsKdmVyeSBkZXRhaWxlZCBpbGx1c3RyYXRpb24KY2hhcmFjdGVyIGRlc2lnbiBwb2xpY2UgbWFuISEKdGFuIHZlc3QKa3lvdG8gYW5pbWF0aW9uIGtleSB2aXN1YWwKdGFsbCBzaG90CnN0ZXBoZW4geW91bGwKY2hlYnVyYXNoa2EKY2hlY2tlcmJvYXJkIGJhY2tncm91bmQKbWFnaWNhbCBteXN0aWNhbApkZWVyc3RhbGtlcgpwbGFuCndpZGUtc2NyZWVuCmJhc2UKY2hpbmF0b3duCmNlbGVzdGlhbCBhdXJhCnNlcnZlZCBvbiBhIHBsYXRlCmNocmlzIHByYXR0IGFzIHN1cGVyIG1hcmlvCmJsdWUgb3ZlcmFsbHMKY2hyaXMgcm9jayBzbGFwcGluZyB3aWxsIHNtaXRoCm9pbCBvbiB3b29kCmNocmlzdGlhbiB3ZXN0b24gY2hhbmRsZXIKdmVyeSB2ZXJ5IGFlc3RoZXRpYwpmdWxsX2JvZHkhIQpleHRyYSBiYWNvbiBsZXR0dWNlIGFuZCB0b21hdG8KY2hyb21lIHJvYm90CnNpdHRpbmcgY3Jvc3MtbGVnZ2VkCmNhbmRpZCBwb3J0cmFpdCBwaG90bwpyZW5kcmVkIGluIHJlZHNoaWZ0CmRpbmd5IGNpdHkgc3RyZWV0CmV4aXRpbmcgc3RvcmUKZ2V0dGluZyBncm9jZXJpZXMKbW9wZWQKdGFuIHN1aXQKd2lyZXMgaGFuZ2luZyBhYm92ZSBzdHJlZXQKd2lyZXMgaW4gYmFja2dyb3VuZApjaXR5IG9mIGFybWVuaWEgcXVpbmRpbwpmaXNoZXllIHBob3RvCmNpdHkgb24gYSBoaWxsc2lkZQpkYXJrIG9yYW5nZQpjbGFubmFkCm1vZGVybiBhbmQgbWluaW1hbGlzdApnb2xkIGRlY29yYXRpb25zCm1lYXQgdGV4dHVyZQo1MCBtbSBsZW5zIGFuZCBmLzEyLjAKZWRvbiBndXJheml1CndpZGUgbG9uZyB2aWV3CnB5cmFtaWRzIGluIHRoZSBiYWNrZ3JvdW5kCnVuY2xhZApzdXBlci1oaWdoIHF1YWxpdHkKb2lsIGFydApyb2JvdGljIGJpb25pYyB0ZWNobmljYWwKcm9ib3RpYyBjYWN0dXMgZGVzaWduCmluZm9ncmFwaGljcy4gbG9nby4gYmx1ZQpwb3J0cmFpdCBvZiB0aGUgbWFuCnByaXNtYWNvbG9yCmZsb29yIGIyCmVyc3RlIGJvZGVuCndyZWNrZWQKY29sdW1ibwpmaXJzdC1wZXJzb24gcG92CnVzZXMgZXhwbG9zaXZlcwpjNCBleHBsb3NpdmUKKGV0aGVyZWFsKQpzbW9rZSBmaWxscyB0aGUgYXJlYQpnZXJtYW4gYW5kIHNvdmlldCBzb2xkaWVycwpyZW56byBwaWFubwpraW1ldHN1IG5vIHlhaWJhCm1vbnN0ZXJnaXJsCm1lbGJvdXJuZQpyeWFuIG1laW5lcmRpbmcKYXJ0aXN0aWMgZGVwaWN0aW9uCmJhcm9xdWUgb3JuYW1lbnQgZGV0YWlscwp2ZXJ5IGNsb3NlIGRldGFpbGVkIGNsb3NldXAKMTk1OQpjcmliIGdvY2ghISEhISEhISEhISByaWRnZQpvbGQgaG9sbHl3b29kCnN0YWxlbmhhZyBzdHlsZQp3aGl0ZSBmbG93ZXIK4oCUbiA5CnNhaWxpbmcgYm9hdHMKc21hbGwgcG9ydCB2aWxsYWdlCmNlbnRyZSBjb21wb3NpdGlvbgpwb2ludGlsbGlzbWUKY2FycmF2YWdnaW8KZ2xvdyBnYWxheHkgYmFja2dyb3VuZAptYWRlIG91dCBvZiBsZWdvcwpib3JpcyB2YWxsZWpvIGFuZCB0b20gYmFnc2hhdwpsYWR5IHVzaW5nIHllbGxvdyBkcmVzcwplc3BvcnRzIGxvZ28Kc2FsYW1hbmRlcgpncmVlbnMgYW5kIGJsdWVzCmt5emEKc3lkCmN5YmVycHVuayBjaGFyYWN0ZXIKc2hvdCBvbiBpbWF4CmNoaWxkcmVucyBhcnQgaW4gYXJ0c3RhdGlvbgpjeWJlcnB1bmsgaW50ZXJpb3IKdmlldyBmcm9tIHRoZSBiYWNrCihhbHBob25zZSBtdWNoYSkKY3liZXJ0cnVjawpmYWlsdXJlCmtpbmcgb2Yga2luZ3MKdGllZmxpbmcgcm9ndWUKZGVubWFyawpsaW5lIHZlY3RvciBhcnQKaGFja3JvYmF0ISEhCnNhbmQgc2N1bHB0dXJlCmRhZ290aCB1cgpmYWNlIG1vcnBoCmJodXQgam9sb2tpYQpjYXJvbGluYSByZWFwZXIKc3R5bGUgb2Ygc2FsdmF0b3Igcm9zYQptaWNoYWVsIGFuZ2VsbyBpbnNwaXJlZAp0aGlnaCBoaWdocwpkYXJrIHZhZG9yCnBvdGlvbgpociBnaWdlciBtdXNjbGVzCmRhcmsgbWFqZXN0aWMgb3JuYXRlIGdyZWF0IGhhbGwKdGhlIG11bW15CmRpc25leSByZW5kZXIKZGF2ZSBncm9obApkYXZpZCBnaWxtb3VyCndpZGUgYW5nbGUgc2NpZmkgbGFuZHNjYXBlCmdyZWcgaXJvbnMKdmVyeSB0aGluCmhpZ2hseSBkZXRhaWxlZCBhbmF0b215CmxvbmcgYm93IGFuZCBhcnJvd3MKZXllIGdsYXNzZXMKZGVlcCBzZWEgbW9uc3RlcgpzdXBlcm5vdmFzCmRlbW9uIHNhbXVyYWkKbWF6b2t1CmJsZW5kZXIgcmVuZGVyaW5nCnBhbmF2aXNpb24gcGFuYWZsZXggeCBpaWkKcGFuYXZpc2lvbiB4IGlpaQpwcmltZXZhbCBkdWFsaXR5CmVuZGxlc3MgbGFrZQpkZXNlcnQgb2FzaXMKaXNvbWV0cmljIHN0eWxlCnZpZGVvIGdhbWUgY3V0c2NlbmUKdGhlIGVzc2VuY2Ugb2YgZXZpbApzb2Z0IGxpZ2h0aW5nIHwKZXBpYyBzaGFmdHMKc3dhcm0gb2YgZmlyZWZsaWVzCmxpZ2h0IG9mIHNpbgpjaW5lbWF0aWMgcmVkIGxpZ2h0aW5nCmNhc2NhZGluZyB3YXRlcmZhbGxzCmJyaWdodCBkYXkKZmlnaHQgcG9zZQpzYWQgZXhhc3BlcmF0ZWQgZXhwcmVzc2lvbgpkZXZvdXJlciBvZiB3b3JsZHMKZXh0ZXJpb3Igd2lkZSBzaG90CmRpYWJsbyAyCmRpYWJsbyA0CndlYXJpbmcgYW4gZXZlbmluZyBnb3duCmRpZXNlbHB1bmsgdm9sZ29ncmFkCmRpZXNlbHB1bmsgY2l0eQppIGhhZCBhIGRyZWFtIG9uIGEgYmFjayBsb3QKYW5kIHNhdyBteSBsaWZlIGxpa2UgYSBsb25nIHNob3QKdGhhdCB3ZSB3b3VsZCBzZWUgaW4gdGhlIGVzc29sZG8KaSBiZWF0IHRoZSBlbmVteSBvbiBteSBvd24Kd2VhcmluZyBwYW50cwpob2xkaW5nIHBlbmNpbApzb2Z0IGdvbGRlbiBsaWdodApkaW1lbnNpb25hbCBjeWFuIGdvbGQgbGVkIGxpZ2h0CndpdGggZG9ncwphcnJpIGFsZXhhIDY1CmRpc2NvIGVseXNpdW0gY2hhcmFjdGVyCmRpc2NvcmQKZGlzbmV5IGFydAoyMDIyIG1vdmllCmh5cGVyZm9jYWwgOGsKZG5kIGNoYXJhY3RlciBjb25jZXB0IHBvcnRyYWl0CmRvIHlvdSBrbm93IGRlIHdhZQpkb2UKbWFjaGluZSBndW5zCmRvZ2UgbWVtZQpkb2xvcmVzIGFiZXJuYXRoeQpoaWdoIHJlc29sdXRpb24gcHJpbnQgOjEgY215ayA6MQpkb24gcmFtb24KbWFzayBvZmYKbmFib28Kc3RhciB3YXJzIG1vdmllIHN0aWxsCnZpbnRhZ2UgNzBzIHByaW50CmRvbmFsZCB0cnVtcCBhcyBhIGplZGkgaGVybwpkb25hbGQgdHJ1bXAgcG9ydHJhaXQKcHMyIGdyYXBoaWNzCnVubmF0dXJhbCBncmluCmRhc2ggY2FtIGZvb3RhZ2UKY2F1Z2h0IGluIDRrCmZhbnRhc3kgYXJ0IGxhbmRzY2FwZQpkb25rZXkga29uZyBzbGlwcyBvbiBhIGJhbmFuYQpkb25rZXkga29uZwpkb29tZmlzdAp0YWlnYQooKGd0YSA1IHNjcmVlbnNob3QgaG91c2UpKQpiYWQgZ3JhcGhpY3MKZHJhZ29uIGJyZWF0aGluZyBmaXJlCm1hZ2ljYWwgYmVpbmcKZHJhZ29uIGZseWluZwpkcmFnb25zIGZseWluZyBpbiB0aGUgc2t5CmRyYW1hdGljIHBvcnRyYWl0dXJlIG9mIG5hbWVubG9zCnJ1c3NpYW4gYWNhZGVtaWMKZHJlYW0gdGhlYXRlcgpkcmVhbSBvZiB0aGUgZW5kbGVzcwpvZgpvc2NhciBkZSBsYSByZW50YQptZWx0aW5nIHNwYWNlc2hpcHMhCnRyYWRpdGlvbmFsIG1lZGl1bQpzb2Z0IGdsb3dpbmcgd2luZG93cwpibGFua2V0IG9mIGZvZwpoaXN0b3JpY2FsIGZvb3RhZ2UKd3cxCm9jdGFuZSBjZ3NvY2lldHkKaG9ybnMgYW5kIHJlZCBleWVzCmthcmF0ZSBwb3NlCnRlbGV2aXNpb25zCmdyZXkgc3VpdApmdWxsIGNvbG9yIGRpZ2l0YWwgaWxsdXN0cmF0aW9uCnZpdmlkbHkgYmVhdXRpZnVsIGNvbG9ycwp3aGl0ZSBiZwptb3ZpZSB0cmFpbGVyCnBlcmZlY3QgY3Jpc3Agc3VubGlnaHQKcGVyZmVjdCBjcmlzcCBsaWdodApiZXdpdGNoaW5nCmthbGkKZWxlY3RyaWMgc2hlZXAKYmxhY2sgYW5kIHB1cnBsZQp0ZXh0aWxlCmdsYW0gbWFrZS11cAplbGYgd2FycmlvcgpjZW50cmVkIHN5bW1ldHJpY2FsIHBvcnRyYWl0CnNob3VsZGVycyBhbmQgaGVhZAptYXRyaXggc3R5bGUKYXdhcmQgd2lubmluZyBjb2xvciBwaG90bwplbG9uIG11c2sgYXMgaXJvbiBtYW4Kc3VwZXIgcmVhbGlzdGljIHBob3RvCm52aWRpYSBvbW5pdmVyc2UKZWxvbiBtdXNrIG9uIG1hcnMKaW4gc3R5bGUgb2YgZ2lnZXIKZWx0b24gam9obiBsZW5ub24KYW5vbWFsaXNhCmJ1YmJsZXMgdmZ4CmNpbmVtYXRpYyA0ayBibHUtcmF5IHJlbmRlcgplbW1hIHdhdHNvbiBhcyBsYXJhIGNyb2Z0CmVtbWEgd2F0c29uIGFzIHBvaXNvbiBpdnkKZW1tYSB3YXRzb24gYXMgdGhlIGZsYXNoCmVtbWEgd2F0c29uIGFzIHRoZSBqb2tlcgppbiBhIHdoZWF0IGZpZWxkCmNoYXJhY3RlciBzZWxlY3Rpb24gc2NyZWVuCmVtbWEgd2F0c29uIGluIHN0YXIgd2FycwpzaGltbWVyaW5nIGxpZ2h0CmluIGFtZXJpY2FuIHBzeWNobyAoMTk5OSkKZ290aGljIGF0bW9zcGhlcmUKZ3JhbmQgcGlhbm8KYm9sZGx5LWlua2VkIGdvdWFjaGUgYXJ0d29yawphY3J5bGljIHBhaW50aW5nIG9uIG9pbGVkIGNhbnZhcwp3aXRoIGdvZHJheQp2YWxlIGVuY2FudGFkbwpvY3RhbmUgZmVuZGVyCmVwaWMgbmF2YWwgYmF0dGxlCndvb2RjdXQgcHJpbnQKYXJ0IGdpZ2VyCmFyYm9yZXNjZW50IGFyY2hpdGVjdHVyZQptYXJpZ29sZCBiYWNrZ3JvdW5kCnNpcml1cyBzdGFyIHN5c3RlbQpldXJvcGVhbiB3b21hbiBwaG90b2dyYXBoCmV2YSBlbGZpZQpncmVnIHJ1dGtvd3NraSB3aW50ZXIKZG8KZXhxdWlzaXRlIGNvcnBzZQphYnN0cmFjdCBmcmFjdGFsIGFydApncmVhdCByZWQgZmVhdGhlcgphd2t3YXJkIHNtaWxlCmZhY2lhbCBwb3J0cmFpdC4gam9obiBvbGl2ZXIKdGFrZW4gaW4gem9vCmZhbGwgb2Ygcm9tZQplcGljIGdhbWVzCm1scCBmYW5hcnQKbWxwCmJyaWdodCBibG9vbQpjb2xvcmZ1bCBiaXJkcwpzbW9sZGVyaW5nCnJveWFsdHkga2luZ2RvbQpmbG93ZXJzIGluIGhlciBkYXJrIGhhaXIKc2NlbmU6IHN1bmZsb3dlciBmaWVsZApyZWQgZmxhbWVzCmZhbnRhc3kgZmFpcnl0YWxlIHN0b3J5Cm15c3RlcmlvdXMgaXNsYW5kCnB1Zwp3b29kZW4gaG91c2VzCnNhbnRvcmluaQpndXN0YXZlIGRvcmUgZW5ncmF2aW5nCmNvd2JveSBiZWJvcCBhbmltZQptaWdodCBkZWxldGUgbGF0ZXIKc2tpbnRpZ2h0IHNpbHZlciBhcm1vcgpncmVhdmVzCmZlbWFsZSBuZWNyb21hbmNlcgpmZW1hbGUgdGhpZWYKZ2VuZXJhdGl2ZSB0ZWNobm9sb2d5CnRpbHQgYW5kIG9yYW5nZQpjb2xvcmZ1bGwgaWxsdXN0cmF0aW9uCmZyb20gZGlzbmV5IHBpeGFyJ3MgdXAgKDIwMDkpCnB1cnBsZSBhbmQgY3lhbiBsaWdodGluZwpkYXJrIG1hdHRlIG1ldGFsCndpZGUtYW5nbGUgbGVucyB2YW5pc2hpbmcgcG9pbnQKYnVybmluZyBjaXR5IGJhY2tncm91bmQKbmV1dHJhbCBsaWdodApoaWdoIGVuZCBpbnRlcmlvcgpwb3QgcGxhbnRzCnNvZnQgd2FybSBsaWdodApiYWNrZ3JvdW5kIGJva2VoCmZvcmVzdCBzY2VuZXJ5CmludGVyY29ubmVjdGlvbnMKOGsgcHJpbnQKcGV0ZXIgbXVsbGVuCmZpdmUgbmlnaHRzIGF0IGZyZWRkeSdzCnVuaWNyb24gdHJpbG9neQpib2R5bGVzcwphcnQgbm91dmVhdSBkZXNpZ25zCmJ1bm5pZXMKc2hhZGVzIG9mIGdyZWVuCmZvZ2d5IGZvcmVzdCBhdCBuaWdodApqZXdlbCBjYXNlCmZyZW5jaCBidWxsZG9nCmZyZW5jaCBtYWlkCmxheWVyZWQgcGFwZXIKc3VwZXJnaWFudCBnYW1lcwpmcm9udGFsIHBvcnRyYWl0IG9mIGEgeW91bmcKYmVhdXRpZnVsIGFuZCBlbGVnYW50IGZlbWFsZSBlbGYKZnVqaSBwcm8gNDAwaApub3JzZSBpbnNwaXJlZApubyBhZGl0aW9uYWwgY2hhcmFjdGVycwpibGFjayBiYW5kYWdlIG9uIGFybXMKYmxhY2sgc29nZ3kgcGFudHMKc2hvcnRib3cKZ29yZ2VvdXMgbGFkeQpnYXJtZW50cwp0ZWNoIGdsYXNzZXMKY29tcGxldGUgYm9keSEKZnVsbCBib2R5IHBvcnRyYWl0IG9mIGEgemVudGF1cgptdXNjdWxhciEhIHNjaS1maQpsaWdodCBjb21pbmcgb2ZmIG9mIHRoZSBhcm1vcgpob2NrZXkgbWFzawpza2ludGlnaHQgcmFpbmJvdyBib2R5IHN1aXQKY29taWMgYm9vayBjb3ZlciB2aXN1YWwgc3R5bGUKdGVuZWJyaXNtCnNtYXJ0cGhvbmUgcGhvdG8KZnVubnkgY2F0CmhpZ2hseSBkZXRhaWxlZCBpbWFnZQpmdXR1cmlzdGljIGNhciBjb25jZXB0CmhkIDRrIGRpZ2l0YWwgYXJ0CmZ1dHVyaXN0aWMgdXRvcGlhbiBtZXRyb3BvbGlzCmdwdXMgZ28gYnJycgpndGEgNgpzdXBlciBuaW50ZW5kbyBjYXJ0cmlkZ2UKZ2FsYWN0dXMKaCA1NzYKZ2FtZSB0b3AgZG93biB2aWV3CnNtaWxpbmcgd2FybWx5CmNyaW1zb24gbGVkCnZpcnR1b3NpYyBwYWludGluZwpob2xkaW5nIG5ldmVybW9yZQptYW55IGZsb3dlcnMKZ2F0dXJybwpmYW50YXN5IGdhdW50bGV0IG9mIHdhcnJpb3IKZGF2aWQgbHVvbmcKbWlsYW4gc2NoZXJlCm1heCBkZW5uaXNvbgpnZW5qaSBmcm9tIG92ZXJ3YXRjaApncmVlayBtYXJibGUgc3RhdHVlCnBhaW50ZXJseSBkaWdpdGFsIGFydAp0aGUgcGl0cyBvZiBoZWxsCmJhY2tsaXQgcG9ydHJhaXQKZ2lhbnQgZHJhZ29uIHJlc3RpbmcgaW4gYSBjYXZlCmdpYW50IHNuYWtlCmhvcm5lZCBoZWxtZXQKd29yc2hpcGVycwpib3hpbmcgc3RhbmNlCmxhcmdlIGNpdHkKZ2lnZXIgcG9ydHJhaXQgb2YgcXVlZW4gZHJhZ29uCnBsYXRlZCBhcm1vciBpbnRyaWNhdGUKbG9va2luZyBmYXIKZ2lybCB3aXRoIHdoaXRlIGhhaXIKcmVkIGRlc2VydApnbGFzcyBzY3VscHR1cmUgb2YgYSBoZWFydApnaWx0LWxlYWYgd2lubm93ZXIKZ2xpdGNocHVuayBnaXJsCmdvZCBlbXBlcm9yIGJvbmdib25nIG1hcmNvcwpjaGFyYWN0ZXIgY2xvc2UtdXAKZ29kZGVzcyBvZiB3aW50ZXIKY2luZW1hdGljIOKAlGFyIDE2OjkKYiBtb3ZpZQpwbGFzdGljIGJhcmJpZSBkb2xsCmlndWFuYQpjb3ZlcmVkIGluIHBpbmsgZmxlc2gKZXllIGJhbGwgd2luZG93cwpjcm93ZHMgb2YgcGVvcGxlIHByYXlpbmcKbm8gY2Fycwpnb2xkZW4gZ29kZGVzcwpibHVlIGFuZCBwdXJwbGUgdG9uZXMKZ29ybyBmcm9tIG1vcnRhbCBrb21iYXQKZ3JlYXQgdGVhY2hlciBvbml6dWthCnJlYWxpc3RpYyBwZXJzb24Kc3BlYXIgaW4gdGhlIHJpZ2h0IGhhbmQKY29va2VkCmZ1bGxib2R5IHNob3QKc2hhcnAgZm9jdXMgYW5kIG9jdGFuZSByZW5kZXIKZ3JpZmZpdGggZnJvbSBiZXJzZXJrCmdvbGlhdGgKZXhvdGljIGVuZGxlc3MgaG9yaXpvbgpoZWF2eSByb2NrCmNoZWV0YWgKdmVyeSB2ZXJ5IGhhcHB5CnN0eWxpemVkIHBvcnRyYWl0IGggMTI4MApoeXBlciBkZXRhaWxlZCBwaG90bwpiYWxscG9pbnQgcGVuIGFydAoxODc4CmV2YW5nZWxpb24gYmVhc3QgbW9kZQpmdWxsIGJvZHkgZGV0YWlscwpsb3ZlIHBlYWNlIGFuZCB1bml0eQpyZW5kZXJlZCBpbiB1bnJlYWwgZW5naW5lIDYKYW1hemluZyBtbW9ycGcKYW50aWFsaXplZApjYXJzIHBpeGFyIG1vdmllIHN0eWxlCnVsdHJhIHJhcmUKa2F0ZSBiaXNob3AKeWVsZW5hIGJlbG92YQpibGFja3NtaXRoIGFwcm9uCmhhbGYgd29sZgp2ciBnYW1lCmhhbGxvd2VlbiBmaWxtCmpvaG4gY2FybWFjawpiZWxseSBleHBvc2VkCnZocyB2aWRlbyBlZmZlY3QKZGlnaXRhbCBpbGx1c3RyYXRpb25zCmNvbmNlcHRhcnQuY29tCmhhcnJ5IHBvdHRlciEhCmhhcnJ5IHN0eWxlcwpoYXN0dXIgdGhlIGtpbmcgaW4geWVsbG93Cmhhc3R1cgpwaW5ndWluCnRoaWdoIGdhcApzbGltIGxlZ3MKcG9ydHJhaXQgb2YgYSBzYWNyZWQgc2VycGVudAphcHBhcml0aW9ucwpzcGFya3Mgb2YgZmlyZSBmbHlpbmcKc21pbGluZyB3b21hbgpoZXJvaWMgbG9vawpoZWRnZWhvZyBjb3Ntb25hdXQgcG9ydHJhaXQKY2F0YXN0cm9waGUKZmx1b3Jlc2NlbnQgbXVzaHJvb21zCmludHJpY2F0ZSBsZWdlbmRhcnkgYXJtb3IKZmFudGFzeSBpbnNwaXJlZCBkcmFnb24gYXJtb3IKbGVnIGhpZ2gKd2FybSBhbWJpZW50IGxpZ2h0aW5nCmRpc2NvIHBpY3RvcGxhc21hCjIwMCBpc28Kb2lsZWQgc2tpbgpsb29taW5nIG92ZXIgYSBjaXR5CmNhbm9uIG1hcmsgaWkKaW4gYSBwcmlzb24gY2VsbAppbnNhbmVseSBkZXRhaWxlZCBjIDEwLjAKZXllcyBsb29raW5nIGF0IHRoZSBjYW1lcmEKaGluZHUgZ29kcwprYWlsYXNhIHRlbXBsZQptYWdpYyBmYWlyeWxhbmQKa25lZXMgd2VhawpoaXNva2EgZnJvbSBodW50ZXIgw5cgaHVudGVyCmZvb2QgYW5kIGNvbnN1bWVyaXNtCnByaW5jaXBhbCBwaG90b2dyYXBoeQpwdmMgcG9zZWFibGUKYm9yZGVybGFuZHMgNGsgcmVuZGVyCndvb2QgcGFuZWxpbmcKYWJhbmRvbmVkIGhvc3BpdGFsCmN5YmVyZ290aApkYWthcgpmZXJyYXJpIDQ1OApkZXRhaWxlZCBzY2llbnRpZmljIGRpYWdyYW0KaHlwZXJyZWFsaXN0aWMgc2Nob29sZ2lybApkcmFtYXRpYyBmaXJlIGxpZ2h0aW5nCmh1ZWxsIGJhYmluZWF1eApwdWVibG8gZGVuc2UgYXJjaGl0ZWN0dXJlCmFsaWVuIGZhYnJpYwp2ZW5vbSBjb3N0dW1lCmRhcmsgYWVzdGhldGljcwpodW1hbm9pZCBjaGVldGFoCnNlZSB0aHJvdWdoCmh1bWFub2lkIHdvbWFuCnVsdHJhLWRldGFpbGVkIDRrCm1lbmFjaW5nIQpnb2xkIHJhaW5pbmcgaW4gdGhlIGJhY2tncm91bmQKZGFyayBzdG9ybSBjbG91ZHMgYWJvdmUKY2hhcmFjdGVycyA4ayBzeW1tZXRyaWNhbApnb2xkIGFybW91ciBhbmQgY3Jvd24Kc3VwZXIgc29sZGllcgpib2FyZCBnYW1lcwpnb2QgbGlrZQpwZXJmZWN0IHNtaWxlIHZvZ3VlCmF3YXJkcwp3aWxsaWFtIGdpYnNvbgpjeWJlcnB1bmsgYW5ncnkgZ29yZ2VvdXMgZ29kZGVzcwpyZW5kZXJlZCBpbiBvY3RhbmUgcmVuZGVyIDMyawpvbiB0aGUgc2FuZAp1bHRyYSByZWFsaXN0aWMgYXIgMTY6OQpzaHJvb21zCmludGltaWRhdGluZyBzdGFyZQpob3NwaXRhbCBib3VuZAppJ3ZlIGRpc2NvdmVyZWQgbGlmZQplbmVyZ2l6ZWQgZmFjZQpudXJzZQpmaXNoZXIgcHJpY2UKY3liZXJwdW5rIGNoaWxkcmVucyBiZWRyb29tCmxlZSBqaS1ldW4Kb3dsIHN0dWRpbyBhbmQgai5kaWNrZW5zb24KaGVhdnkgb3V0bGluZXMKbmVvbiBsYW1wCmRpc3BlcnNpb24KcnVuZS1lbmdyYXZlZCBhcm1vcgozZCBzaGFkZWQKbWVhbmluZyBvZiBwaHlzaWNhbCByZWFsaXR5CmRpZnJhY3Rpb24gb2YgbGlnaHQKaW4gdGhlIHVuaXZlcnNlCnR2IHRva3lvIDIwMTBzIGFuaW1lIHNlcmllcwppbmRpYW4gd2Fycmlvcgpib3VsZGVyIGNoYXNlCigoKCgoKCgoKGFuIG92ZXJncm93biBmb3Jlc3QKdGVsZXNjb3BlCmZpdmUgc3RhciBvaWwgb24gY2FudmFzCmludHJpY2F0ZSBtYW5kZWxidWxiIGZyYWN0YWwKY29uY2VwdCBwYWludGluZwpyZWQgYmxvb2QKd29ybGQgd2FyIGlpCm91dGVyc3BhY2UKaXJlbGlhCmlzb21ldHJpYyBmdXR1cmlzdGljIGdhbWUKaXNvbWV0cmljIHBpeGVsIGFydAp2aXJpZGVzY2VudCBhdCBzaG91bGRlciBoZWlnaHQKMTkyMQpqdWp1dHN1IGthaXNlbgpqYWtlIHRoZSBkb2cKYW50Z2VybQpwaG90b2NvbGxhZ2UKY2luZXN0aWxsIDgwMHQgZmlsbSBwaG90bwpqYXBhbiB0cmF2ZWwgYWVzdGhldGljCmV4cGVjdGF0aW9uIG9mIGFkdmVudHVyZQphdmFudC1nYXJkZSBlZGd5CmFsZXggeWFuZXMgYW5kIGxpc2EgZnJhbmsKamFwYW4gc2lnaHRzZWVpbmcKamFwYW5lc2UgdGV4dApqYXBhbmVzZSBzYW11cmFpCnBob2VuaXggaW4gZmlyZQpmZW1pbmlzbQptYXR0ZSBwaG90by1yZWFsaXN0aWMKYmFjayB0byB0aGUgY2FtZXJhCmphc29uIHN0YXRoYW0KZWR3YXJkIHJ1Y2hhCnZlbHZldCBibGF6ZXIKamVubmlmZXIgYW5pc3RvbgpmaWxtIHN0aWxsIGZyb20gc3RhciB3YXJzCnBvbGljZSBza2V0Y2gKcmV2ZWFsaW5nCmFjdGlvbiBwaG90b2dyYXBoCnJvdW5kZWQgZXllZ2xhc3NlcwpvbW9yaQpjcmVhbSBwYXBlcgp2ZXJ5IHJlYWxpc3RpYyBkaWdpdGFsIGFydApqb2UgYmlkZW4gY2FzdHMgYSBsb25nIHNoYWRvdwpnb2xkIGdsYXNzZXMKam9lIGJpZGVuIGVhdGluZyBpY2UgY3JlYW0Kam9lIGJpZGVuIGluIHNreXJpbQpqb2UgYmlkZW4gcG9ydHJhaXQKaW4gY3liZXIgcHVuayAyMDc3Cm9saXZpZXIgbGVkcm9pdApjaXR5IHF1YWxpdHkgbGlnaHRpbmcKbGVkIGdhbWluZwpsZWQgZ2FtZXJzIGtleWJvYXJkCisrKyArKysgcXVhbGl0eSBqLmMuIGxleWVuZGVja2VyCndlYXJpbmcgb3JhbmdlIHN1bmdsYXNzZXMKam9uIHNub3cKam91cm5leSB0byB0aGUgd2VzdApqdW5na29vawpyYWRpb2hlYWQgYWxidW0gYXJ0IGNvdmVyCmtha2FzaGkgaGF0YWtlCmtha2FzaGkKYmxvd24gZ2xhc3MKa2FueWUgd2VzdCBhcyBhIGplZGkKa2FueWUgd2VzdCBpbiBndGEgdgpjb3ZlcmVkIGluIHNsaW1lISEKZmVhdGhlci1hZG9ybmVkCmthcnRodXMgZnJvbSBsZWFndWUgb2YgbGVnZW5kcwprYXQgZGVubmluZ3MKd2VhcmluZyBhIHNwYWNlIHN1aXQKb2ZmaWNpYWwgbW9kZXJuIGFuaW1lCmtpa28gbWl6dWhhcmEKa2lsbCBsYSBraWxsCmluZHVzdHJpYWwgYXBwYXJlbnQKbm90IHNtaWxpbmcKd2VhcmluZyBhIHBpbmsgcmFiYml0IGNvc3R1bWUKcmUgbGlmZQpuaW50ZW5kbyBzdHlsZQpoaWdoIGxldmVsCnVua25vd24gYXJ0c3R5bGUKaGlnaHkgZGV0YWlsZWQKdHJhbnNmb3JtYXRpb24gc2NlbmUtaCA3NjgKanVsaWUgZGlsbG9uCmJ1c3Qgd2l0aCBpbnRyaWNhdGUgZGV0YWlscwo1MG1tIGYxLjQKb3V0ZG9vciBmaW5lIHBob3RvZ3JhcGh5Cmtvbm9zdWJhCnBlb3BsZSBmbGVlaW5nCm9mIGFsaWVuIGFydGlmYWN0cwpzbW9vdGggZGVmaW5lZCBvdXRsaW5lcwpsYWV0aXRpYSBjYXN0YQpsYW1hCmJ1bGwgbmV0Y2ggZmxvYXRpbmcgYXJvdW5kCmFuY2llbnQgYnJhc3MgZHdlbWVyIHJ1aW5zCmJyYXNzIGRlYnJpcwp0aGUgZWxkZXIgc2Nyb2xscyBpdjogb2JsaXZpb24KaGlnaCBjYXN1YWx0aWVzCmJsb29kIGFuZCBkZWFkIHNvbGRpZXJzCmFkb2JlIGlsbHVzdHJhdG9yIGFydApibGluZ2VlCmhhcHB5IG1lYWwgdG95CnNsYXBzdGljawpzdHlsZSBvZiBjYXJyaXZhZ2lvCnN0eWxlIG9mIGJsYWRlcnVubmVyCnBlcmZlY3QgZGFyawpzd2lybGluZyBuYXR1cmUgbWFnaWMKbWFzaGVkIHBvdGF0b2VzCm1hcnZlbCBwb3N0ZXIKbGVvbmFyZG8gZGEgdmluY2kgc2tldGNoCmNhdmVzCmNlaWxpbmdzCmFic3RyYWN0IHBob3RvZ3JhcGh5CnNhaWxvciBtb29uIHN0eWxlCnNub3dnbG9iZQptaW5lcmFsCmN1dGUgcG9ydHJhaXQKbmFkYXYga2FuZGVyCmxpc2JvbgppbnRlcm5hdGlvbmFsIHBob3RvZ3JhcGh5IGF3YXJkcwpzaXggYXJtcwp0b3AgZG93biBzaG90CmV4dHJlbWVseSBoYW5kc29tZQptdXNjdWxhciB0aGlnaHMKc2hhdHRlcmluZyBleHBlY3RhdGlvbnMKZmluZSBsaW5ld29yawpwZXJmZWN0bHkgY2FsbSB3YXRlcnMKbWF5YmUgc21hbGwgd2F2ZXMKaGVhbGluZyBlbmVyZ3kKdWx0cmEgZGV0YWlsZWQgcmFpbiBkcm9wcwpzaG90IG9uIHN1cGVyaWEgNDAwIGZpbG0gc3RvY2sKbHVjYXJpbwp5ZWxsb3cgbGlnaHRpbmcgZnJvbSByaWdodApzdGFuZGluZyBhbG9uZQpsdXggZnJvbSBsZWFndWUgb2YgbGVnZW5kcwptYWQgbWFnYXppbmUgY292ZXIKbWFjaGluYXJpdW0Kc21vb3RoIHN1cmZhY2UgcmVuZGVyCm1hZHJpZApyb21hbmNlIGJvb2sgY292ZXIKY3JlZXB5IGxpZ2h0bmluZwpsYW5kc2NhcGUgdmlzdGEgcGhvdG9ncmFwaHkKbGFuZHNjYXBlIDM1bW0gdmVkdXRhIHBob3RvCndhdGVyIHBpcGUKc3RlcmlsZSBiYWNrZ3JvdW5kCm1heWZpZWxkIHBhcmlzaAptYW4gcmlkaW5nIGEgZ2lhbnQgbW91c2UKZGlzc29sdmluZwooaC5yIGdpZ2VyKQptYW4gd2l0aCB0aGUgc291bCBvZiBhIGRyYWdvbgptYW5tb2hhbiBzaW5naCBmYWNlCm1hbyB6ZWRvbmcKM2QgYXNzZXQKd2VhcmluZyBmZXN0aXZlIGNsb3RoaW5nCmZ1bGwgZi8yMgptYXJpbHluIG1vbnJvZSBwb3J0cmFpdAptYXJrIHp1Y2tlcmJlcmcgYXMgYSBsaXphcmQKZ3JleWlzaCBibHVlIGV5ZXMKYm9rZWggZmlsdGVyCnBvc3RlciBmb3IgdGhlIGZpbG0KbWFycyBiYXNlCmRldGFpbGVkIGFuaW1lIGV5ZXMgd2l0aCBwdXBpbHMKaGFsbyByZWFjaApjb2xvciBodWVzCmluIGEgc3VycmVhbCBkcmVhbSBsYW5kc2NhcGUKZGFyayBwdXJwbGUgYmx1ZSB0b25lcwpmaW5lIGRldGFpbHMgOGsgb2N0YW5lIHJlbmRlcmluZwphbmltYWwgY3Jvc3NpbmcgbmV3IGhvcml6b25zCmJyaWdodCB2b2x1bWV0cmljIHN1bmxpZ2h0Cnt1bmNlcnRhaW4gbG9va30Ke29uIGVkZ2V9CmJlYXV0aWZ1bCBtb2RlbAptZWdhZGV0aApzaXR0aW5nIGF0IGRlc2sKbWV0YWxsaWNhCm1pY2hhZWwgbXllcnMKcGVudGF4IGsxMDAwCmN1bHQgaG9ycm9yCm1qb2xuaXIKbWlkd2VzdCBjb3VudHJ5c2lkZQptaWtlIHN0b2tsYXNhCnNob3Qgb24gMzVtbQpzY2ktZmkgYXRtb3NwaGVyZQpoaXN0b3JpY2FsIHBob3RvZ3JhcGh5CnNlcmVuZGlwaXR5CmZhY2UgZW5oYW5jZW1lbnQKbW9uYXJjaCBidXR0ZXJmbGllcwptb25rZXkgZC4gbHVmZnkKdmlhbHMKdGVhbCBvcmFuZ2UgY29sb3IgcGFsZXR0ZSA4awptb3JvY2NhbiBjaXR5CmNpbmVtYXRpYyBmbGF2b3IKcmljaCBkZWNheWluZyBjb2xvcnMhCnNrdWxsIGxpbWluYWwgdm9pZCBiYWNrZ3JvdW5kCnByZWNpc2lvbiBkZXRhaWwKcmVkIGZsYWdzIGhvbGlkYXkKc2V4eSA6OAp1bHRyYSByZWFsaXN0aWMgcG9ydHJhaXQKYXMgYSBiYWRhc3MgbW9uc3RlciBodW50ZXIKY2lnYXJldHRlIGFkdmVydGlzaW5nCmNsaWNrYmFpdAoyZCBnYW1lIGZhbmFydApiYXR0bGUtc2NhcnJlZApzY2FycyBvZiBiYXR0bGUKZWxlY3RyaWNhbCBhdXJhCmZvcmVzdHJ5Cmh5cGVyIHJlYWxpc3RpYyBkZXRhaWwKZGVwdGggLS11cGxpZ2h0CnN0eWxpemVkIHBvcnRyYWl0IGggNjQwCm91dHRlciB3b3JsZHMKY3lib3JncyB3b3JraW5nCmZ1dHVyaXN0aWMgZG9tZQptb3VudGFpbiBmb3J0cmVzcyBjaXR5CmludGVyc3RlbGxhciBzdG9ybXkgYnJpZ2h0IHNreQpyYXRlZCBlMTAKb3JhbmdlIHRvbmVzCm5hbm9tYWNoaW5lcwpzdHVkaW8gc2V0dGluZwpkcmFtYXRpYyBjaW5lbWF0aWMgcG9ydHJhaXQKaW5kaWdlbm91cwpuYXR1cmUgZHJ1aWQKc3R5bGl6ZWQgaWxsdXN0cmF0aW9uCm1vZGVsIHBob3RvZ3JhcGh5CmVhcmx5IHNjcmVlbiB0ZXN0CnNreSB2aWV3CnNlYSBmbG9vcgp1bm9ydGhvZG94CnNpbmdsZSBob3JuCnN2ZyBpbGx1c3RyYXRpb24Kc21pbGluZyBmb3IgdGhlIGNhbWVyYQpuaWNvbGUgYW5pc3RvbgphYnNpbnRoZQpzbG93CnBsYW5ldCBsYW5kc2NhcGUKbm9ydGggcG9sZQpwYXJhZGlnbSBzaGlmdApncmVnIHJ1dGtvd2tzaSBhbmQgYXJ0Z2VybQpyaXZlcnMuIHNwYWNlIGNvbG9ueQpvbWcKb2JpLXdhbiBrZW5vYmkKaGlnaCBxdWFsaXR5IG5ld3MgZm9vdGFnZQphd2FyZCB3aW5uaW5nIGZpbG0Kd29ybGQgb2Ygd2FyY3JhZnQgYXJ0CjE4MjQKdmVyeSBkZXRhaWxlZCBmYWNpYWwgZmVhdHVyZXMKb2lsIGNhbnZhcyBvZiBsdWNpZmVyCm5hdHVyYWwgYmxvbmRlIGdvbGQgbGlrZSBoYWlyCmF0dHJhY3RpdmUgYW5kIGdvb2QgbG9va2luZwpoZWF2ZW4gYW5kIGhlbGwKbWloYWlsIHNwaWwtaGF1ZnRlcgptYXN0b2RvbmljCmNoYW90aWMgcmlvdHMgaW4gMjAyMgpjbG91ZGxlc3MtY3JlYXItc2t5Cmh1ZApoaXBlciBkZXRhaWxlZApqb25ueSBkdWRkbGUgYW5kIGppbSBrYXkKb3JpIGFuZCB0aGUgd2lsbCBvZiB0aGUgd2lzcHMKZ29vZCBkZXRhaWwKb3Zlcmdyb3duIG1hbGwKb3ZlcmxvcmQgYmlsbGllIGVpbGlzaApoaWdodCByZXNvbHV0aW9uCjg4bW0gbGVuc2UKY2hpbGRyZW4ncyBib29rIHN0eWxlCmxvb2tpbmcgaW4gbWlycm9yCmNpdHkgaW4gdGhlIGRpc3RhbnQgb24gZmlyZQpvdmVyIHRoZSBob3Jpem9uCjFrbSB0YWxsCmFyY2hpdGVjdHVyYWwgZHJhd2luZwpteXN0ZXJpb3VzIGdpcmwKaG9tZSB3aWNjYSBzY2VuZQpwYW5vcmFtYSB2aWV3IG9mIHRoZSBza3kKcGFwZXIgY3V0IGFydApzZWNyZXQgYWdlbnQKcGF0cmljayBzdGFyCnBla2luZyBvcGVyYQpwZW50YXggay0xMDAwCnBzeWNoZWRlbGljIGhpZ2hsaWdodHMKcGVyaW9kaWMgdGFibGUKcGVycnkgdGhlIHBsYXR5cHVzCmJyb3duIGNvbG9yCnBldGVyIHBhcmtlcgoxMjAwIGRwaQpwaG90byBvZiBib3JpcyBqb2huc29uIHJ1bm5pbmcKc2xlZXAgZGVwcml2ZWQKcHV0cmlkCnRhbmdsZWQgd2lyZXMKbGlnaHQgd2F0ZXIKY29sb3JmdWwgYmFja2Ryb3AKZ3VhcmRpYW5zIG9mIHRoZSBnYWxheHktc3R5bGUgNGsKcGhvdG8gb2YgYSBibGFjayB3b21hbgpzdXBlciB6b29tCmVhcmx5IDIwMDBzCmJsdWUgcGVuZ3VpbgpsZWRzIHZpc29yIGhlbG1ldApjb2xvcmZ1bCBwaG90b2dyYXBoCmZyaWVzCmluIGFuIGFyZW5hIHBpdApwaG90b3JlYWxpc3RpYyBkaXNuZXkKYXJ0c3RhdGlvbiBjb25jZXB0IGFydApoYXBweSBhbmQgc3Bpcml0ZWQgZXhwcmVzc2lvbgp3aXRoIGZhc2hpb24gY2xvdGhlCnNrdWxscyBhbmQgYm9uZXMKZGFuaWVsIGNyYWlnCnBpZyBpbiBhIHR1eGVkbwpjcnlwdG9jdXJyZW5jeQpoIHIKcGl6emEgb24gYSB0YWJsZQpkcmVhbXkgY2xvdWRzCnByb2Zlc3Npb25hbCBjYW1lcmEKcGxheXN0YXRpb24gNgpsb3cgcG9seSBtb2RlbApwb2tlbW9uIGFuaW1lIHN0eWxlCndpdGggcmVkIGV5ZXMKYXJ0IGRlY28gYm9yZGVycwpyZWQgYW5kIGN5YW4KaC5yLiBnaWdlciBjaXR5CnF1ZWVuIG9mIHRoZSBkZWFkCnBvcnRyYWl0IHNrdWxsIGNsb3duCm5pZ2h0IHNlYSBzdG9ybQpwb3J0cmFpdCBvZiBhY2hpbGxlcwppbnRlbnNlIGFsYmlubwpwb3J0cmFpdCBvZiBhbGFuIHR1cmluZwp3aG9sZSBib2R5IGhpZ2hseSBkZXRhaWxlZApwb3J0cmFpdCBvZiBjbGVvcGF0cmEKbXVzY3VsYXIgbWFsZQp3aXRoIGJsdWUgaGFpcgpnaWFudCBhbmltZSBtZWNoYQpuYXR1cmFsaXN0aWMgdGVjaG5pcXVlCnB1cnBsZSBtdWxsZXQKcG9ydHJhaXQgb2Yga2FybCBwaWxraW5ndG9uCndlYXJpbmcgYmxhY2sgdmVzdCBhbmQgc2tpcnQKd2hpdGUgd2Fpc3QgYXByb24gYW5kIHVuZGVyc2hpcnQKcG9ydHJhaXQgb2YgbmljaG9sYXMgY2FnZQp0aGUgZmlyZSBnb2RkZXNzCnBvcnRyYWl0IG9mIHdvbHZlcmluZQpwb3J0cmFpdCBvZiB6ZW5kYXlhCndlYXJpbmcgcmVkIHNvcmNlcmVyJ3Mgcm9iZXMKcGhvdG9ncmFwaGVkIGZvciByZXV0ZXJzCm11c2hyb29tIGh1dCBpbiBiYWNrZ3JvdW5kCnJvbWFudGljIGxlYWQKY2hpbmVzZSB3YXRlcmNvbG9yIHN0eWxlCmJhcm9xdWUgZWxlbWVudApjZW50ZXJlZCBjbG9zZS11cApzaG9ydCBzdHJhaWdodCBoYWlyCmZsaXJ0YXRpb3VzCmNyeXN0YWwgY29sb3IKYnJpZ2h0IGdyZWVuIGhhaXIKdG93YXJkIHRoZSBzdW4gcmF5cyBhbmQgY2F1c3RpY3MKYWxvbmUhIQpjcmltc29uIGNsb3RoZXMKYWx0ZXJuYXRpdmUKbm9yd2VnaWFuCnBvcnRyYWl0IG9mIGEgZ25vbWUgY2FsbGVkIGVsZG9uCndpdGggYSBwYXRyaWNpYW4gbm9zZQpoYXJkIHByZWRhdG9yeSBsb29rCnBvcnRyYWl0IG9mIGEga25pZ2h0Cm5hdHVyYWwgbGlnaHQgYmVhbQp0YWxsIGFuZCBzdHJvbmcKc2hvcnQgY29wcGVyIGhhaXIKcHVuY2hhYmxlIGZhY2UKcG9ydHJhaXQgb2YgYSBtdXNldW0gYXJ0IGN1cmF0b3IKYXJvdW5kIDIwIHlvCmpvbGx5CnBvcnRyYWl0IG9mIGEgd2VyZXdvbGYKcG9ydHJhaXQgb2YgYSB3aXphcmQKYmxhY2sgc3RyYWlnaHQgaGFpcgpzaGUgaXMgd2VhcmluZyBhIGJsYWNrIHRhbmsgdG9wCmJlYXV0aWZ1bCBsb29rCm1lbGFuY2hvbGljIGdhemUKcHJldHR5IGFxdWlsaW5lIG5vc2UKc3Vua2VuIGV5ZXMKcG9ydHJhaXQgb2YgYSB5b3VuZyBwaXJhdGUKdHJhbnNsdWNlbnQgbGVhdmVzCm5vcm1hbCBoYW5kcwpjb3dib3kgc2hvdApwb3J0cmFpdCBvZiBiZWRvdWluIGQmZAp0aGljayBiZWFyZCBoaWdobHkgZGV0YWlsZWQKcG9ydHJhaXQgb2YgZXZpbCBnaXJsCnBvcnRyYWl0IG9mIGZlbWFsZSBrb3JlYW4gaWRvbAoxMDAgbW0gbGVucwpwb3J0cmFpdCBvZiBmZW1hbGUgc29yY2VyZXIKc2hvcnQgZ3JlZW4gYm9iY3V0CnBvcnRyYWl0IG9mIHJ1Z2dlZCBtYWxlIHJhbmdlcgpsb25nIGJsb25kZSBvciByZWQgaGFpcgpkZW1vbiB3aW5ncwpibHVlLWV5ZWQgbWFuCmFuYXRvbWljYWxseSBjb3JyZWN0IHByb3BvcnRpb25zCmFuZ3VsYXIgZmFjZQppY2UgY3J5c3RhbCBhcm1vcgpiZWF1dGlmdWwgcHJldHR5IHlvdW5nCnRhcm90IHN0eWxlCmJvYiBkeWxhbgptZWdhLWRldGFpbGVkCm9ybmF0ZSBjcnlzdGFsIGNyb3duIGhvb2QKd2VhcmluZyBiaWtpbmkKcHJldHR5IHNvcmNlcmVzcwphdGxhbnRpcyB0aGUgbG9zdCBlbXBpcmUKMTAwbGIgY2FyZHN0b2NrCnBpeGVsc29ydGluZwpwbGF5ZnVsIGNvbXBvc2l0aW9uCnRoZSBza3kgaXMgYSBuZWJ1bGEgb24gZmlyZQpiYWNrZ3JvdW5kIHdpdGggbmVvbiBsaWdodGluZwpiYXJiYXJhIGNhbmVwYQozZCBoaWdobHkgZGV0YWlsZWQKc2lsdmVyIHdoaXRlIGhhaXIKcHV0aW4gY3J5aW5nCnF1YWludCB2aWxsYWdlCnByb2Zlc3Npb25hbCBwb3J0cmFpdCBwaG90bwpxdWVlbiBvZiB3aW50ZXIKYmx1ZSBleWUKc3RvbmUgY29sb3NzdXMgcmVtYWlucwpzdHJvbmdob2xkIHN0cmF0ZWd5IGdhbWVwbGF5CnJhY2hlbCB3ZWlzegpnb2xkIGFuZCBncmVlbgp3aXRoIGEgYmVhcmQgYW5kIGEgYmxhY2sgc2hpcnQKbGVhdGhlciBqYWNrZXQgYW5kIGRlbmltIHZlc3QKZ3J1bmdlIGFydApmdWxseSByZWQgZXllcyBubyBwdXBpbHMKbG9uZyB3YXZ5IGJyb3duIGhhaXIKcmFnZSBhZ2FpbnN0IHRoZSB3YXNoaW5nIG1hY2hpbmUKcmVhbCBsaWZlIGhvbWVyIHNpbXBzb24KaHVtYW4gbWFsZQpyZWFsLWxpZmUgaG9tZXIgc2ltcHNvbgpiZXN0IGxpZ2h0CmR3aWdodCBzY2hydXRlCmh5cGVyIGN1dGUKc2hlZCBpcmlkZXNjZW50IHNuYWtlc2tpbgpyZWQgZHJhZ29uCnJlZCBmb3gKYmxhY2sgYW5kIHdoaXRlIGJhY2tncm91bmQKYnJvd24gZ3JhdnkKcmljaCBldmFucwppbWd1cgpyZWVzZSB3aXRoZXJzcG9vbgpmdWxsIHJvb20gdmlldwp3aXRoIHZpdmlkIHB1cnBsZSBleWVzCmN1dGUgY2hlY2tlcmJvYXJkIHN1bmRyZXNzCm5lYnVsYXMgc3dpcmxzCmRlZmluZWQgbGluZXMKcmV1bmlvbiBpc2xhbmQgbGFuZHNjYXBlCnJpYXMgZ3JlbW9yeQpyaWMgZmxhaXIKY2VsbCBwaG9uZQpyZWFsIGxpZmUgc2l6ZQpiYWNrZ3JvdW5kIGJsdXJyZWQKbWN1IHBob3RvZ3JhcGgKYXNoIGZhbGxpbmcKdG93YXJkIGEgcGxhbmV0CmZpcmUgYW5kIGZsYW1lcyBhbmQgc21va2UKaWZ1bm55IHdhdGVybWFyawpyeWFuIHJleW5vbGRzIGFzIGEgYm9keWJ1aWxkZXIKc2FiZXJ0b290aApzYWQgY2F0CnN0YXJzIGluIGhlciBleWVzCnRyYWRpdGlvbmFsIHJvbWFuIGFybW9yCmRvcm5lCnBhbGUgc2tpbiBjdXJseSBibG9uZCBoYWlyCnBldGVyIG1vaHJiYWNoZXIgYW5kIGFydGdlcm0Kc3R1ZGlvIGFtYmllbnQgbGlnaHRpbmcKcGhvdG9yZWFsaXN0aWMgYnJ1c2ggc3Ryb2tlcwpubyB0eXBlCnNhc2hhIGdyZXkKc3VidXJiaWEKc2FjcmlsZWdpb3VzIHJpdGUKc2F1bCBnb29kbWFuIQpzY2FybGV0dCBqb2hhbnNzb24gcG9ydHJhaXQKbm9jdGlsdWNlbnQKcXVhbnR1bSBtZWNoYW5pY3MKbW9kZXJuIG1lY2hhIGFuaW1lCnNjb3R0IHRoZSB3b3oKc2NvdHRpc2ggaGlnaGxhbmRzCnBsYXlzIHZpZGVvZ2FtZXMKc2VhbWxlc3Mgd29vZCB0ZXh0dXJlCmx5c2VyZ2ljCmFzIGRvY3RvciB3aG8Kc2VraXJvIG1vdW50YWluCmRyZXNzZWQgaW4gc2FtdXJhaSBhcm1vdXIKYm93cwpwYXN0ZWwgbmVvbgpyZWFsaXN0aWMgZW5naW5lCmdlbmVyYWwgaHVtYW4gZm9ybQpzaGVyeWwgc2FuZGJlcmcKc2hyZWsgYXMgbmVvIGZyb20gdGhlIG1hdHJpeApvdXRzaWRlIGxhcmdlIHdpbmRvdyBvZiBzaGlwCmV4dHJlbWVseSBjbGVhciBmYWNlcyBjb2hlcmVudApncmVlbiBmYWNlCmdyaW5kaG91c2UKZW5kZ2FtZSBib3NzCmFtYXppbmcgc2hhZGluZwpodXJ0aW5nCnNsYXZvaiB6aXplawpyZWFsaXRpYwp3cGFwCnN0YXRzCnNvbGlzIHNhY2VyZG90aWJ1cwpmaWVsZCBiYWNrZ3JvdW5kCnNvbmEKZGV0YWlsZWQgaW50cmljYXRlIGVsZWdhbnQKc291dGggcGFyawpmaWxtIHN0b2NrCnNwYWNlIHNoaXAgaW4gc3BhY2UKc3VycmVhbCBzcGFjZQpsYXplcnRhZwptb25ldCBzdHlsZQpnbG9zc3kgcGFpbnQKbmluamEgdHVydGxlcwpzcGlrZSBzcGllZ2VsCnRpbnkgd2Fpc3QKbmloaWxpc3RpYwpvdXRmaXQgcGhvdG9ncmFwaApzb2Z0IHN0cm9rZXMKYnJ1dGFsaXN0IGRlc2lnbgpoaWVyb255bXVzIGJvc2NoIHN0eWxlCnN0YXJwb3J0CnN0YXR1ZSBvZiBkYXZpZApicmFzcyBjb2xvcmVkIGFybW9yIGNvYXQKdmVyeSBkZXRhaWxlZCBzaGFkaW5nCnRvcCBwcm9kdWN0aW9uCnBlcnNwZWN0aXZlIGZyb20gYmVsb3cKMTEyOHgxOTEgcmVzb2x1dGlvbgpzY2hvb2wgY291cnR5YXJkCmV2ZW5pbmcgYW1iaWVuY2UKZGlnaXRhbCBhcnQgZXh0cmVtZSBkZXRhaWwKc3VidGVycmFuZWFuIGhvbWVzaWNrIGFsaWVuCnN1bnJpc2Ugb3ZlciBzb2xhciBwdW5rIGNpdHkKZ2xvd2luZyBnb2xkZW4gYXVyYQpzdXBlciBzYXlpYW4gZ29rdQpmcmVha2luZyBvdXQKYmxhZGVzCndhcnJpb3IgaW4gc2NpLWZpIGFybW91cgp0cmVuZGluZyBvbiB0ZWVtaWxsCnRlc3QKdHJhbnNmb3JtYXRpb24gc2VxdWVuY2UKZHJhbWVkeQpncmVlbiBnbG93aW5nIGV5ZXMKZnJvbSBkdW5nZW9ucyBhbmQgZHJhZ29ucwpyZWFsaXN0aWMgZGV0YWlsZWQgbWFzdGVycGllY2UKcmljayBiYWtlciBzdHlsZQp0YW5nZXJpbmUgZHJlYW0gYWxidW0gY292ZXIKdGFuamlybyBrYW1hZG8KZWxlY3Ryb24gbWljcm9zY29wZSB2aWV3CnRhcm9uIGVnZXJ0b24gYXMgd29sdmVyaW5lCnNtb2tlIHN3aXJscwpmdWxsIGFydApiYWNrIHRhdHRvbwpnaWFudCBzcGVha2Vycwpsb3VkIG11c2ljCmJsYWNrIHRyb3VzZXJzCmZhbmN5IGNsb3RoZXMKdGVycmFmb3JtZWQgbWFycwpoZWlzZSBqaW55YW8KZ290aGljIGFlc3RoZXRpYwp0aGUgYWRkYW1zIGZhbWlseQphbmltZSBzY2VuZQpjb2xsb3NhbCBtZWNoCm1hZ25ldGljCnJlbGlxdWFyeQp0aGUgZWNvbGFiIGluZHVzdHJpYWwgZGlzaHdhc2hlcgp0aGUgZW1lcmFsZCBjb2FzdAp0aGUgZW1wcmVzcyB0YXJvdCBjYXJkCmVkaXRvcmlhbCBmb290YWdlCmRvbWluaWMgdG9yZXR0bwp2aWJyYW50IGFjY2VudHMKdGhlIGZvb2wgdGFyb3QKbW90aHMKbG93IHBvbHkgc3R5bGUKY2xvY2tmYWNlCnRoZSBpY2UgcXVlZW4KbWlsbyBtYW5hcmEgc3R5bGUKdGhlIHB1cmdlCmN1dGUgY2hhcmFjdGVycwp0aGUgdG93ZXIgb2YgYmFiZWwKc29tZSBwZW9wbGUKYmFja2dyb3VuZCBkZXRhaWxzCmRhcmsgYW5kIGR1c3R5CmluZGlnbyBiYWNrZ3JvdW5kCnJvbGFuZApyb2NrIG1vdmllCmluIG1vdW50YWlucwp0aGUgZW5kIG9mIHRoZSB3b3JkCnNtb290aCByb3VuZCByb2NrcwpleHRyZW1lIHNwb3J0cwptYW5vd2FyIGFsYnVtIGNvdmVyCmxhcmdlIGV4cGxvc2lvbnMKY2lyY2EgMTk4MgphdCB0aGUgdGltZSBvZiBkaW5vc2F1cnMKdGhlIGZseWluZyBzcGFnaGV0dGkgbW9uc3RlcgpzeWNhbW9yZQp0aGUgZm9yZXN0CnRoZSBncmFzcwp0aGUgZ3JpbmNoCmZpZWxkIGpvdXJuYWwKdGhlIGhlYXQgZGVhdGggb2YgdGhlIHVuaXZlcnNlCnRoZSBpbmZyYXN0cnVjdHVyZSBvZiBodW1hbml0eQpsdXNjaW91cyBicnVzaHN0cm9rZXMKdGhlIGxhc3QgaHVtYW4gb24gZWFydGgKc2hhcQp2ZXJ0ZXgKaGFsZiBodW1hbiBoYWxmIHJvYm90CnZlcnkgbG93IGNvbnRyYXN0CnJlbmRlcmVkIGluIGtleXNob3QKbm8gYW5pbWFscwp0aGUgbW9zdCBiZWF1dGlmdWwgbGFuZHNjYXBlCnRoZSBxdWVlbiBvZiB0aGUgc3VuCnRoZSByaXZlciBvZiB0aW1lCmJlYXV0aWZ1bCBkaWdpdGFsIGFydHdvcmsKdGhlIG1hbgp0aGUgc2lnaWwgb2YgdGhlIG1hZmlhCnRoZSBzaW5ndWxhcml0eQpnYXJuZXQKZHJpdmluZwp2b3J0ZXggcml2ZXIKaG9sZGluZyBhIGdsb2NrCnRoZSB0YXJvdCBjYXJkIG9mIGVhcnRobHkgZGVtaXNlCnBsYWNlZCBpbiBhIGx1c2ggZm9yZXN0CnRoZSB0aHJlZSBtb2lyYXMKb24gYW4gZXBpYyBvcm9ib3Jvcwp0cmFpbGVyIHBhcmsgYm95cwpjaHRob25pYwp0aGVuCnRlY2huaWNhbCBtYW51YWwKMzVtbSBtYWNybwp0aGVyZSB3aWxsIGJlIGJsb29kCnRoaXMga2luZCBvZiBzbWFydApiZSBub3QgYWZyYWlkCndpdGhvdXQgZnJhbWUKdGhvbSB5b3JrZSBzaW5nZXIgc29uZ3dyaXRlcgpzdGVhbWJvYXQgd2lsbHkKbWFnaWMgbGFib3JhdG9yeSBzZXR0aW5nCmJsb25kZSBhbmQgYXR0cmFjdGl2ZSBmZWF0dXJlcwpseWluZyBpbiBiZWQKdGltIGphY29idXMgYXJ0CmxpZ2h0LWJsdWUgZXllcwpob2xkaW5nIGEgc3dvcmQgJiBzaGllbGQKZGV0YWlsZWQgb2lsCmNoZXN0IHBsYXRlIHdpdGggZmVycmFyaSBsb2dvCnRvbSBicmFkeQphbXVzZWQgZmFjaWFsIGV4cHJlc3Npb24KY3liZXJwdW5rIGFydCBzdHlsZQp0b21teSB3aXNlYXUKMmQgZHJhd2luZwpleHRlcmlvciBkZXNpZ24Kc2V2ZXJhbCBjb3R0YWdlcwptZWNoYW5pY2FsIGZvcm0gb2YgbGlmZQp0aHVuZGVyY2F0cwp0cmFuc2x1Y2VudCBzcGhlcmUKdHJhdmlzIGZpbW1lbCBhcyBhIGplZGkgbWFzdGVyCnN0YXIgZ3VhcmRpYW5zCmdsb3dpbmcgdGhpbmcgd2lyZXMKdHJpcmVtZQp0cmVuZGluZyBvbiBkZXJwaWJvb3J1CnRyb3BpY2FsIHBhcmFkaXNlCm1hci1hLWxhZ28KaGFuZGN1ZmZlZAp0c3VuYWRlIGZyb20gbmFydXRvCnR3YXMgYnJpbGxpZwpwIGNhdHRhbmVvCmNyZWVweSBzbWlsZXMKZmx1aWQgc2ltCmluIG5hcnJvdyB0b2t5byBhbGxleXdheQpuaWxpYW4gYW5pbWF0aW9uIHN0dWRpbwpvdXRzaWRlIGEgc3Rvcm0gcmFnZXMKZmVlbGluZyBvZiBpbXBlbmRpbmcgZG9vbQp3ZWFyaW5nIGdhcyBtYXNrIGhlbG1ldHMKZ3JlZW4gYW5kIHBpbmsgZmFicmljCnR5cmFubm9zYXVydXMKaW50cmljYXRlIG1ha2V1cApkcmVzc2VkIGFzIGVtcGVyb3IKYWNjdXJhdGUga2xhdXMgc2Nod2FiIGZhY2UKZnV0dXJpc3RpYyByb2JvdCBhbmdlbAp1bHRyYW1hbgpzcGFjZXNoaXAgbmlnaHQKY2FudmFzIG9pbCBwYWludGluZwpicmFuZGlzaGluZyBmdXR1cmlzdGljIHN3b3JkCmZpcmUgYWJvdmUgaGVhZAptZXRhbGljIHJlZmxlY3Rpb24KaGlnaGx5IGRldGFpbGVkIHRleHR1cmVzCmluanVyZWQKbWF0aGV3IGJyYWR5IHBob3RvCmF0bGEKdW5kZXJ3YXRlciB0ZW1wbGUKcm9jayByb29mCnVzIGFybXkKaW5zYW5lbHkKaGF1bnRlZCBzcGFjZXNoaXAgaGFsbHdheQp2aW50YWdlIGNhcgpzaWRlIGZyaW5nZSBoYWlyY3V0CndlYXJpbmcgZGFlZHJpYyBhcm1vdXIKYXJjdGljIGZpc2gKcGVuIGFuZCBwYXBlcgphcm1zIHN0cmV0Y2hlZCB3aWRlCm9ubHkgZmFjZQpuaWdodG1hcmUgcG9ydHJhaXQKc3F1aWRzCmpvdXJuYWxpc3RpYyBwaG90bwphbmltZSBwb3NlCmZlbWluaW5lIGdpcmx5IGRyZXNzCmYvMgp3YWxtYXJ0CndhbHRlciB3aGl0ZSBpbiBmb3J0bml0ZQpob2xkaW5nIGEgYmVlcgpmcmFuY2lzIGZvcmQgY29wcG9sYQp0diBmb290YWdlCndhcnBnYXRlCndpdGggbG9uZyByZWQgaGFpcgpmdWxsbWV0YWwgYWxjaGVtaXN0IGJyb3RoZXJob29kCmRhdmlkIG5vcm1hbC4gcGhvdG9yZWFsaXN0aWMKZmFudGFzeSBiZWF1dGlmdWwKdG9wIGFydC1zdGF0aW9uCndoaWxlIHNtb2tpbmcgYSBjaWdhcgo4Yml0cyBncmFwaGljcwpoaWdoIGNvbG9ycyBjb21wcmVzc2lvbgp3ZWlyZCBzcGFjZQpiw6lsYSB0YXJyCndpbmRvd3MgeHAgYmxpc3Mgd2FsbHBhcGVyCnN0eWxlIG9mIG1vbmV0CmluIGNvdXJ0CmxhdW5kcnkgaGFuZ2luZwpnb25kb2xhcwp3b3Jrc2FmZS4yMDAwcwp1bnJlYWwgZW5naW5lZXIgNQozZCByYXkgdHJhY2luZwp5b3V0dWJlIGxvZ28KeW91bmcgY2FycmllIGZpc2hlcgphbHQgYXJ0CmhvbGRpbmcgYSB0YW5rYXJkIG9mIGFsZQpsaWdodG5pbmcgZXllcwpbIG1ldGFsIF0KWyA0IGsgZGlnaXRhbCBhcnQKdmlldyhmdWxsIGJvZHkgKyB6b29tZWQgb3V0KQpoaWdoIHF1YWxpdHldCmF0IHRoZSB0b3Agb2YgYSByZWQgcm9jayBjYW55b24KZmlyZSBiZWFtCmdvb2QgaG91c2VrZWVwaW5nCm1vZGVsIOOCqOODquOCteODmOOCuSBzIGZyb20gYWNxdWFtb2RlbHMKaG90IGFuZCBkcnkKYmFybiBpbiB0aGUgYmFja2dyb3VuZApib29taGF1ZXIKY3NvayBpc3R2YW4KbmF2eSBibHVlIGNhcnBldAphbiBvbGQgdHYKKCgoKHZvbHVtZXRyaWMgbGlnaHRpbmcpKSkpCnRhYmxldG9wIG1pbmlhdHVyZQpubyBudW1iZXJzCm1hZGUgZnJvbSBwYXBlcgptYWdpY2FsIGZpc2hpbmcgcm9kIHdlYXBvbgpmIC8gMSAxCmFtdWxldApsYWJvcmF0b3J5IGJhY2tncm91bmQKMSA5IDIgNAozIGQgc3R1ZGlvIG1heAo3IDAgbW0uIGRyYW1hdGljIGxpZ2h0aW5nCnNwYWNlIGV4cGxvcmF0aW9uCjMgZCBtYXRlcmlhbAppbiBhIGRhcmsgZ3JlZW4gcG9sbyBzaGlydAp0aGljayBidXNoeSBzdHJhaWdodCBleWVicm93cwp2cmF5IDRrIHJlbmRlcgpmcmVzaCBmcm9tIHRoZSBwcmludGVyCmpheSBsZW5vIHdpdGggZ3JheSBza2luCmFtYXplZAp0cmVlcyBiZW50IG92ZXIgcml2ZXIKd2l0aCBicmFuY2hlcyByZWFjaGluZyB0aGUgc2t5Cm9yYW5nZSBhbmQgb3JhbmdlIHNsaWNlcwprOQp5b2tvIGQnaG9sYmFjaGllCmJhcnJhY2tzCmJyb3duIGhvb2RlZCBjbG9hawphZnRlcm5vb24gaGFuZ291dApnb29kIHRpbWVzIHBob3RvZ3JhcGgKdHJlbmRpbmcgd2FsbHBhcGVyCnRoZSBjYXJldGFrZXIKcmdiIGxlZCBsaWdodHMKZ3JlZW4gZm9saWFnZQp1cHNldHRpbmcKcGl4aWUgdW5kZXJjdXQgYmxhY2sgaGFpcgppbiB0aGUgbW92aWUgbGlmZWZvcmNlICgxOTg1KSA4awpldmFuIGxlZQp4aW50b25nIGNoZW4KZGVlcCBibHVlIG9jZWFucwphIHllbGxvdyBzdW4gc2hpbmluZyBkb3duCnVwcGVyIGJvZHkhIQpbIGFkYW1hbnRseSBkZWZpbmVkIGFicyBdISEKYWN0b24gZmlndXJlCmJhY2tncm91bmQgaXMgd2hpdGUKMyBkIHNvY2lldHkKc2FsYW1pCnNjaSAtIGZpIGF0bW9zcGhlcmUKdmVyeSBsb25nIGJsYWNrL3JlZCBoYWlyCm9uZSB5ZWxsb3cgYW5kIG9uZSBibHVlIGV5ZQpiZW4gbWFpZXIgYW5kIHNha2ltaWNoYW4Kc3VubnkgYXRtb3NwaGVyZQphZ2dyZXNzaXZlIGxvb2sKZ2lhbnQgZXhwbG9zaW9uCnRyYWlsIG9mIHNtb2tlCnBob3RvcmVhbGlzdGljIC0gaCA2IDQgMAptYWRlIG9mIHNpbGsgcGFwZXIKcGhvdG8gcmVhbGlzdGljIDRrCndpdGggY2hpY2tzCnRocmVlIHZpZXdzCm5vIGdyYXNzCndlYXJpbmcgYSBsaW5lbiBzaGlydAplZXJpZSBhbmQgbW9vZHkgcG9sYXJvaWQKc3VyZmluZyBhIGJhcnJlbCB3YXZlCmZlYXR1cmVkIG9uIGJlaGFuY2UgbWFzdGVycGllY2UKZXJvc2lvbgpjdXJ2YXR1cmUKd2l0aCB0aGUgc2t5IGZ1bGwgb2Ygc3RhcnMKdWx0cmFjcmlzcApoZSBoYXMgYm9vdHMKaGVhZCB0aWx0ZWQgZG93bndhcmQKamFiYmEgdGhlIGh1dHQKMSA5IDYgNwozIGQgcmF5dHJhY2luZwphcnRnZXJtIGFuZCBsb2lzIHZhbiBiYWFybGUKbG9uZyBnaW5nZXIgaGFpciB3aW5keQppbnRyaWNhdGUgYXJtb3IgZGV0YWlscwplbGsKY2xlYW4gNCBrCmJvY2FnZQpjYXVsaWNvbGkKZGVudGlscwpyb2NrIHN0YXIKY29uZmlkZW50IGZhY2lhbCBleHByZXNzaW9uCmZveCB0YWlsCmJlYXV0aWZ1bCByZW1icmFuZHQgbGlnaHQKcGV0ZXIgZGVsaWdkaXNjaApoaWdoIHJlc29sdXRpb24gZGVzaWduCnNpbGsgc3RvY2tpbmdzCm1hZ2ljIHdvcmxkLiBjb2xvcmZ1bAppbmZsYXRhYmxlIGZ1dHVyZSBzaG9lcwpzdGFuZGluZyBvbiBhIHJvb2Z0b3AKd2l0aCBoYXVudGVkIGV5ZXMgYW5kIGNyYXp5IGhhaXIKb2xlZyBrb3JvbGV2Cm9yYW5nZSAvIHBpbmsgc2t5CmFydGdlcm1hIGFuZCBncmVnIHJ1dGtvd3NraQpoYWxmIG1hY2hpbmUKdmlzaW9uYXJ5IGFydHMKbW9kZWwgZGVzaWduCm15c3RpY2FsIHRoaXJkIGV5ZQpnb2xkIGFkb3JubWVudHMKd2hpdGUgc3BsZW5kaWQgZmFicmljCmFydGVyeQpwbGFudHMgb24gYmFsY29uaWVzCmVhcmx5IHNwcmluZwpuaWdodCEKYmlyZHMgaW4gdGhlIHN1bmxpZ2h0CnRhbGwgZ29sZGVuIGhlYXZlbmx5IGdhdGVzCmV2aWwgZXllCmluIHN0eWxlIG9mIGFubmEgZGl0dG1hbm4Kc3RhaXJzIGFuZCBhcmNoZXMKZXhjZXB0aW9uYWwKc2lnbWEgNSA1CnZlcnkgdmVyeSB2ZXJ5IGRyYW1hdGljIGxpZ2h0aW5nCnp1bHUKYnJlYXRodGFraW5nIGxpZ2h0cwpzbW9vdGggY3VydmlsaW5lYXIgZGVzaWduCndhdGVyZmFsbCBjYXNjYWRlcwp3ZWFyaW5nIHJlZCBmb3JtYWwgYXR0aXJlCmNhbm5vbiBlZiA2IDUgbW0gZiAvIDIuIDgKcm95YWwgZ2FyZGVuIGJhY2tncm91bmQKc3R5bGUgb2YganVsaWEgcmF6dW1vdmEKc3RhcnMgYXJlIGhpZGRlbiBpbiB0aGUgZXllcwpmb3JtYWwgYnVzaW5lc3Mgc3VpdApyZXRyb3dhdmVzCnBvbGFyaXplciBmaWx0ZXIgOiAxIDAKY3liZXJwdW5rIGJ1cyBzdG9wCmZ1bGwgc3ViamVjdCBpbiBmcmFtZSBhbmQgdmlldwphcXVhc2l4aW8Kc2FwcGhpcmUgYnV0dGVyZmx5IGpld2VsbGVyeQpkb2xsIGZhY2VzIG9uIGEgZHJlc3MKd2FyIHRoZWF0cmUKcmVkIHB1cnBsZSBncmFkaWVudApwZW9wbGUgYXJlIGVhdGluZwpleWVzIGxpZ2h0IHVwCmhhcHBpbmVzcyEKd2F0ZXJpbmcgY2FuCnllYXIgMSA5IDIgMApvcmFuZ2UgYW5kIHB1cnBsZSBjb2xvciBzY2hlbWUKY2luZW1hdGljIHVucmVhbCBlbmdpbmUgNQp5YW4KaG90IHN1bW1lciBzdW4KZ2FsYXhpZXMgdmlzaWJsZQpwbGF5aW5nIHdpdGggdGhlIHdhdGVyCm5vIHRyZWVzIO+8jCBoeXBlciBkZXRhaWxlZApyZXRybyBhbmQgMSA5IDggMCBzIHN0eWxlCndpbmR5IGRheQpibGFjayBhcnQKbG9uZyB3aXNweSB0ZW50YWNsZXMKdGhlIGNvbnRyYSBzcGFjZSB3YXIKbG9va2luZyBvZmYgaW50byB0aGUgZGlzdGFuY2UKZmlzaGVzIHN3aW1taW5nCmF3YXJkLXdpbm5pbmcgc2NpZmkKc3VwZXIgY2xlYXIKZmluZ2VyIG9mIGdvZApicmlhbiBrZXNpbmdlcgooIHZpYnJhdGluZyBjb2xvcnMgKQp0aWxlcyBjdXJ0YWlucwpmdWxsIG9mIGdyYXNzCmtpY2tmbGlwCmxvbmcgZXhwb3N1cmUgcGhvdG8KYXJ0IGdhbGxlcnkgcXVhbGl0eQpiZWFzdGx5CmdyZWVuIG1hdHJpeCBjb2RlCjRrIHBvc3QKaHVtYW4gOiAtIDIKYmx1ciA6IC0gMgpkZXB0aCBvZiBmaWVsZCA6IC0gMgpiZXJzZXJrIG1hbmdhCi0gdyAxIDAgMiA0CmRhcmsgYnV0IGRldGFpbGVkIGRpZ2l0YWwgYXJ0CmdvbGQgbGVhdmVzCmZsb3dlciBibG9zc29tcwpvbiBhIHN0YWluZWQgZ2xhc3Mgd2luZG93CmRzbHIgaHlwZXIgZm9jdXNlZApmcm9udGxpZ2h0CmxhYmVsCnRoZXJlIGlzIHNvbWV0aGluZyB1Z2x5CnN0dWRpbyBwaWN0dXJlCmNlbnRyZWQgY29tcG9zaXRpb24Kc2VyZ2UgbHV0ZW5zCnBlbmNpbCBzdHJva2UKbG9va2luZyBhbmdyeQpmbG93ZXJzIGFuZCBidXR0ZXJmbGllcwpzaG90CnVudXN1YWxseSBhdHRyYWN0aXZlCmJyYWlkZWQgaGFpcnN0eWxlCnNtYWxsIGJsYWNrIGV5ZXMKYmx1ZS1ncmVlbiBmaXNoIHNraW4KZmxvd3kgd2hpdGUgZ3JleSBoYWlyCmNsb2NrIHRvd2VyCnNwZWN0YWN1bGFyIHN1bnNldApzdXJyZWFsaXNtIDhrCmFydCBkZWNvISEKZHlzdG9waWFuIGxpZ2h0aW5nCndhc3BzCndlYXJpbmcgamFwYW5lc2UgdGVjaHdlYXIKd3JlbmNoZXMKc29mdCBiYWNrbGlnaHRpbmcKd2hpdGUgdGlnZXIKc2hlIGlzIGhvbGRpbmcgYSBsb25nIHN0YWZmCmZpcmViZW5kaW5nCmNvbmNlcHQgaW1hZ2UKc3VwZXIgZGV0YWlsZWQgZXllcwpnb3JnZW91cyBkZXRhaWxlZCBmYWNlCnZpYnJlbnQgcmVkIGxpcHN0aWNrCmFtYXppbmcgYmxlbmQgZWZmZWN0CnNwZWFrZWFzeSBiYXIgYmFja2dyb3VuZApzdHlsZSBvZiBnZW9yZ2UgYmVsbG93cwppbGx1bWluYXRlZCBnbG93aW5nIGxpbmVzCmRhcmsgYnJvd24gaGFpciBhbmQgdGFuIHNraW4KcG93ZXJmdWwgcGFpbnRpbmcKZnJhbnMgbGFudGluZwpsaXF1aWQgbWFnaWMKamVyZW15IG1hbm4gYW5kIGFscGhvbnNlIG11Y2hhCmZhaXJ5IGxvb2sKd2l0aCBsb25nIGN1cmx5IGhhaXIKbnljaG9zIGFydCBhZXN0aGV0aWMKYmxhY2sgdmVpbnMKbG9uZWx5IGxhbmRzY2FwZQp0cmlhZGUgY29sb3Igc2NoZW1lCmdvbGQgaGlnaGxpZ2h0cwpqb29uIGFobgppbnRyaWNhdGUgZ2FsYXh5IGlubGF5CndhdGVyIGluIGJhY2tncm91bmQKdGFrZW4gZnJvbSB0aGUgaGlnaCBzdHJlZXQKZmVtYWxlIGZhY2UgZmVhdHVyZXMKZGFyayBtYXR0ZXIgaW5jYXJuYXRlCmVuZ2xpc2ggc3R5bGUKZGFyayBtYW1tYXR1cyBjbG91ZAp2aXZpZCBjaW5lbWF0aWMgbGlnaHRuaW5nCmxhcmdlIHdpbmdzcGFuCnZpZXdlZCBmcm9tIGJlaGluZApyZWFsaXN0aWMgcGVuY2lsIGRyYXdpbmcKcGhvdG8gNCBrCnBsb3R0ZXIKcHJvY2VkdXJhbCBjb2RlCjMgMCBzCmNhbG0gbmlnaHQuIG92ZXIgc2hvdWxkZXIgc2hvdApob2xkaW5nIGEgc2hvdCBnbGFzcyBvZiB3aGlza2V5Cm1heWEgOCBrCmJva2VoISEgd2F0ZXJjb2xvcgpwaG90b2dyYXBoaWMgcHJpbnQKcmltIC0gbGlnaHQKY2xpcGFydCBpY29uCmVsZXBoYW50IHNrdWxsCm9uIGEgZ3JheSBiYWNrZ3JvdW5kCnNhbmp1bGlhbi4gZGV0YWlsZWQgdGV4dHVyZQpyb2FyaW5nIGZpcmUKYWJhbmRvbmVkIGJ1cyBzdG9wCnJlbWJyYW5kdCBleGhpYml0aW9uCmx1cmtpbmcgaW4gdGhlIGRhcmtuZXNzCmRpZ2l0YWwgYXJ0IDQgawpwc3ljaGVkZWxpYyBhbmQgZ2xpdHRlcmluZwplcGljIHZpZXcKcm9ja3kgY2xpZmZzCmNhdGFyYWN0LiBzdWJzdXJmYWNlIHNjYXR0ZXJpbmcKYWxjaGVtaXN0IGdpcmwKcmF5bW9uZApleHRyZW1lIGNocm9tYXRpYyBhYmVycmF0aW9uCnRyaWJhbCBzdHlsZQphc2lhCmphbWVzIGplYW4gYW5kIGZlbmdodWEgemhvbmcKZHJhbWF0aWMgc3RhZGl1bSBsaWdodGluZwpwZW5kYW50cwpjbGF5IGFydApkYXBwbGVkCmF1ZGllbmNlIGluIHRoZSBiYWNrZ3JvdW5kCmFwcHJvYWNoaW5nIGVhcnRoCmN5YmVybmV0aWMgZmFjZXMKbWFueSBwaWVjZXMKdW5yZWFsIGVuZ2luZSBzdHlsZQppZGFobwpyb2NvY28gYXJ0CndpdGggZnJpZXMKYXQgbmlnaHQgd2l0aCBtb29uIGxpZ2h0CmNnaSByZW5kZXJpbmcKY2FtZWxzCmNsb3NlIHVwIGNoYXJhY3RlcgppbmZpbml0ZSBkYXduCndoaXRlIHNhbHQKbWVkaWV2YWwgYm9vayBpbGx1c3RyYXRpb24KZHNsciAxNW1tCm1pZG5pZ2h0IG1pc3Qgc3RyZWV0bGlnaHRzCndhbHRlciBncm9waXVzCmh5cGVyIHJlYWwgb2lsIHBhaW50aW5nCmQgJiBkIGNoYXJhY3RlciBwb3J0cmFpdApjdXRlIGFydCBzdHlsZQpmbHlpbmcgaXNsYW5kIGluIHRoZSBza3kKaW4gdGhlIG1pZGRsZSBvZiBhIGZvcmVzdApnbGl0dGVyIHN0aWNrZXIKd29vZCBjYXJ2ZWQgY2hhaXIKc2xlZXBpbmcgYmFnCmVtaXRpbmcgbXlzdGljYWwgbGlnaHQKc291bmQgb2YgbXVzaWMKZ291cm1ldCByZXN0YXVyYW50CmNoYXV2ZXQKcGVhY2VmdWwgZmFjZQpwZXJmZWN0IGJvZHkgZmFjZSBhbmQgaGFuZHMKOCBrIGhkIGFydHdvcmsKYmVhdXRpZnVsIG9jZWFuCmZyYW5jaXMgZ295YQpvaWwgcGFpbnRpbmcgaHlwZXIgcmVhbApnbG93aW5nIGJhY2tncm91bmQKaGFwcHkgY2hlZgpmb3VyIHdpbmdzCnN1cGVyIHBvd2VyCmdlcmFyZCBicm9tCmFzY2hlciBjbGVtZW5zCnNwZWxlb3RoZW1zCnNjaWVuY2UgLSBmYW50YXN5CmFuaW1lIGFydCBub3V2ZWF1IGNvc21pYyBkaXNwbGF5CmJsZW5kZXIgYXJ0CmFsdGVyZWQgY2FyYm9uIHN0eWxlCjEgMiAwIG1tIGZpbG0Kcm93cyBvZiBkb29ycwptdXNldW0gbGlnaHQKbGl0dGVyZWQgd2l0aCBnYXJiYWdlCmxlZSBtYWRnd2ljayBhbmQgemFjayBzbnlkZXIKZnV0dXJpc3RpYyB2ZWhpY2xlcwooZ3JpbikKaW50cmljYXRlIGRhcmsgYmFja2dyb3VuZAppbiBjbGF5bWF0aW9uCihlbXB0eSBibGFjayB2b2lkKQppbiB0aGUgbW92aWUgZHVuZQpvZiBhbiBvbGQgbWFuCnBlb3BsZSBydW5uaW5nIGluIGZlYXIKcHVscCBtYWdhemluZQptb29ubGlnaHQgZ29kIHJheXMKdHJlZXMuIHdpZGUgdmlldwpncmFkaWVudCBzdHVkaW8gYmFja2dyb3VuZApzdHJpbmdzCmVudmlvdXMgYXRtb3NwaGVyZQpzY3J1ZmZ5IGZhY2lhbCBoYWlyCmZpcmVzISEgaHlwZXJyZWFsaXN0aWMKZGFyay4gc3R1ZGlvIGxpZ2h0aW5nCmZvY2FsIGxlbmd0aCA6IDUgMCBtbQpyaW5nIGxpZ2h0aW5nCnRyYW5jZSBjb21waWxhdGlvbiBjZApsZWFndWUgb2YgbGVnZW5kcyBhcnQgc3R5bGUKaW5kdXN0cmlhbCBzYWxpdmEKZGlnaXRhbCBjYW1lcmEKYmx1ZSBiYWNrZ3JvdW5kIGNvbG91cgpzdHVkaW8gcG90cmFpdApkZWF0aCBhbmQgY29ycnVwdGlvbgp2ZXJ5IGNyaXNwIGRldGFpbHMKY2xvdGggYWNjZXNzb3JpZXMKdHdvIGZhbmdzCmNsZWFyIG5pZ2h0IHNreQpjb2xvcmZ1bCB0cm9waWNhbCBwbGFudHMKbGVvbm9yYSBrYXJyaW5ndG9uCndlbGRlciB3aW5ncwpoZXJ2w6kgc2NvdHQgZmxhbWVudAoyIDAgMSAwIHMKbWFkZSBvZiBsb2xseXBvcHMKYWR2ZXJ0aXNpbmcgc3R1ZGlvIGxpZ2h0aW5nCnBpY2tpbmcgYXBwbGVzIGZyb20gYSB0cmVlCmZvcmVzdCBlbnZpcm9ubWVudApwaW5rIHdoaXRlIHR1cnF1b2lzZQphcHBnYW1la2l0CmVhcmx5IDEgOSAwIDAncwpkZXRhaWxlZCBjb2xvciBzY2FuCmJyb29kaW5nIGNsb3VkcwpkcmF3biBvbiB3aGl0ZSBwYXJjaG1lbnQgcGFwZXIKZmlzaCBzd2ltbWluZyBhcm91bmQKdGhlYXRlciBhY2Nlc3MgY29ycmlkb3IKYnJ1dGFsaXN0IG9mZmljZSBidWlsZGluZ3MKcHN5Y2hlZGVsaWMgaGFpcgpvbiBhIGdyZWVuIGxhd24KM2QgbWF0dGUgcGFpbnRpbmcKaW4gdG93bgpkb3duIHRoZXJlCmZldyBwZW9wbGUKd2hpdGVib2FyZHMKd2FybSBtdXRlZCBjb2xvcnMKZ2lhbnQgYXRoYW5vcgpiZWFrZXJzIGZ1bGwgb2YgbGlxdWlkCm9jdGFuZSByYXkgdHJhY2luZwpuZW9uIHZlcnNpb24gb2Ygc3R5bGUgamltIGJ1cm5zCnppcHBlcnMKcmFscGggbWNxdWFycmllLiBjZW50ZXJlZCBpbWFnZQpyaW5nd29ybGQKaW5zaWRlIHBhZ2Ugb2YgY29taWMgYm9vawp3aGl0ZSB3b29kCmluIDIgMCAwIDIKcGVhY2VmdWwgYW5kIHF1aWV0CmVhdGluZyBzcGFnaGV0dGkKcGVyZmVjdCBzcHJpbmcgZGF5IHdpdGgKaW4gYSBmb2dneSBmb3Jlc3QKd2UgY2FuIHNlZSB0aGUgc2VhCnRoZSBqdXN0aWNlIHRhcm90IGNhcmQKbG93IHBvbHkgb3V0bGluZXMKYmlnIGdyZWVuIHRyZWVzCnNwcmF5IGJydXNoCnN1cnJvdW5kZWQgd2l0aCBmaXJlCnNlY29uZCBlYWdsZSBoZWFkCnRoaXJkIGxpb24gaGVhZAppbGx1c3RyYXRpb24gbGluZSBhcnQgc3R5bGUKZ2hvc3QgY2hpbGRyZW4KZnpkIHNjaG9vbCBvZiBkZXNpZ24KNCBrIGlsbHVzdHJhdGlvbgpjdWRkbGluZwprb2RhayBla3RhciAxIDAgMApnaWdlciBhbmQgamFjZWsgeWVya2EKMyA2IDAgcApvY2VhbiBzcGVjdWxhcgpjeWNsZXMgMyBkIHJlbmRlcgptb29uIHNoaW5lCmluc2lkZSBhIGdsYXNzIGJveAphbmF0b21pY2FsIGNoYXJ0CnNjcmVlbnNob3QgZnJvbSBmb3J0bml0ZQpsZWFndWUgb2YgbGVnZW5kcyBpbnZlbnRvcnkgaXRlbQozIGQgYXJ0aXN0aWMgcmVuZGVyCmdsaXR0ZXIgY3J5c3RhbHMKYW5keSBjYXRsaW5nCm5hdGUgZmFrZXMKd2F0ZXIgcGFyawpuZXcgY2F0cyBtb3ZpZQpzaGlueSBnbGl0dGVyIGNyeXN0YWxzCmN5cmlsIHJvbGFuZG8gYW5kIGdvcm8gZnVqaXRhCnN0eWxlIG9mIGdlb2YgZGFycm93Cmluc2FuZWx5IGN1dGUKc2ltaWxhciB0byBwb2tlbW9uCndlYXJpbmcgYSBoYXdhaWlhbiBkcmVzcwpkYW5jaW5nIG9uIGEgdHJvcGljYWwgYmVhY2gKNCBhcm1zCm1hdXZlIGJhY2tncm91bmQKam9vc3Qgc3dhcnRlCnN0YWRpdW0gbGFuZHNjYXBlCmRyZWFteSBtYXR0ZSBwYWludGluZwpuZnQgc3R5bGUKZ3JlZW4gYW5kIGJsYWNrIGhhaXIKYWJzdHJhY3QgaW1wcmVzc2lvbmlzbQp0ZWEgY3VwCmEgY3V0ZSBzcGlkZXIKZ29hdWNoZSBwYWludGluZwp3aGl0ZSBjdXJseSBoYWlyCnJvZ3VlbGlrZQozZCBvYmplY3QKaG9sZApza3lsaW5lIHZpZXcgZnJvbSBhIHJvb2Z0b3AKdWx0cmFmaW5lIGh5cGVyIGRldGFpbGVkCmN5Ym9yZyByLmEudCA3Cm92ZXJjbG9ja2luZwpiYXVoYXVzIGFydApoZWF2aWx5IGFybW9yZWQKcmVuZGVyZWQgaW4gdW5yZWFsIGVuZ2luZSAzZApyZWFsaXN0aWMgY2xvdGhpbmcKaW5zaWRlIGFuIG9sZCBhcGFydG1lbnQKY3lib3JnIGhhcmR3YXJlCmJsYWNrIG9uIHJlZApoZWF2eSBtZXRhbCBhcm1vcgpzb21lIHJlZmxleGlvbnMKYmlnIGJ1ZGdldCBob3Jyb3IKZHZpYW50IGFydApnaG9zdGx5IGxvdyBsaWdodApjbG9zZWQgbGltYm8gcm9vbQptZXNzYWdlcwpkZXN0cm95ZWQgY2h1cmNoCm1hamVzdGljIGFuZCBmdXR1cmlzdGljCmRlc3Ryb3llZCBjYXN0bGUKc2VydmVycwppbiBhIHdhcmVob3VzZQp3YXJtIGZhbnRhc3kgbGlnaHRpbmcKaGV4YWdvbmFsIHBhdHRlcm4KIyBlIDQgZSA2IDIgMApoeWxpY3MgYXJ0d29yawphbmltZSB2aXN1YWxzCmdlbiB6CnRoZSBza3kgaXMgYmxhY2sKdm9sdW1ldGljIGxpZ2h0aW5nCmJsYWNrIHNob3cgcm9vbQpzaG9ydCBmb2NhbApkcmVzc2VkIGxpa2UgamVzdXMgY2hyaXN0CndlYXJpbmcgYSBkcmVzcyBtYWRlIG9mIHZpbmVzCmFsY29ob2wgaW5rcyBvbiBwYXJjaG1lbnQKZ3JlZW4gc2xpbWUgZXZlcnl3aGVyZQpmbHlpbmcgdHJlZXMgYW5kIHBhcmsgaXRlbXMKZGVzZXJ0IG1pcmFnZQpicm9rZW4gdGlsZXMKaGV4Z2xvdwpyYWluIHB1ZGRsZXMKZmluZSBhcnQgaHlwZXJyZWFsaXNtCmF3YXJkIC0gd2lubmluZyBjcmlzcCBkZXRhaWxzCnl1bQoxIDkgNyAwIGZpbG0gcGhvdG9ncmFwaHkKc21pbGUgY295Cm15dGhpY2FsIGNyZWF0dXJlcwpzdW1tZXIgbGlnaHQKZWF0aW5nIGEgbXVzaHJvb20KaW4gdGhlIG1pZGRsZSBvZiBhIGZpZWxkCnRyYW5zaWVudApzdWJtZWNhbm9waG9iaWEKZ3JlZW4gYW5kIGJsdWUgYW5kIHdhcm0gdGhlbWUKZGVlcCBlbW90aW9uYWwKZGFyayBhbmQgbW9kZXJuCndlc3Rlcm4gZXJhCnJwZyBnYW1lIGVudmlyb25tZW50IGFzc2V0Cm1lZGlldmFsIGFybW91cgo0IGsgaGQgd2FsbHBhcGVyIHZlcnkgZGV0YWlsZWQKc3VwZXJzb25pYyB0cmFpbnMgYW5kIHBhc3NlbmdlcnMKaG9ycm9yIG1vb2QKYnVpbGRpbmdzIGNhcnZlZCBvdXQgb2Ygc3RvbmUKYXJjaHdheXMgYmV0d2VlbiBzdGFsYWd0aXRlcwpkcmlwcGluZyBzdGFsYWd0aXRlcwo1IHBvaW50IHBlcnNwZWN0aXZlCnRoZSBnbGltbWVyaW5nIG9yYW5nZSBkYXduCndldCBwdWRkbGVzIG9uIHN0cmVldApicmlnaHQgaG9wZWZ1bCBhdG1vc3BoZXJlCmxhYiBiYWNrZ3JvdW5kCnJvb2YgYmFja2dyb3VuZAplcmljIGNhcmxlCnRlYXNlciB0cmFpbGVyIGZvb3RhZ2UKY29sb3JlZCBpbmsgZHJhd2luZwppbiBzdHVkaW8gZ2hpYmxpCm1yLiBuaW1idXMgY2hhcmFjdGVyIGRlc2lnbgpjb25jZXB0IGFydCA0awpzd2FtcCBnYXMKbGFyZ2UgdGVldGgKdHJlbmRpbmcgb24gY2dhcnRpc3QKdWx0cmEgZGV0YWlsZWQgOGsKY2Fycnlpbmcgc3Vydml2YWwgZ2VhcgptZXRhbCBsYWNlCmhvbGx5IGJydWNlCm9uIGEgbWluaSB3b3JsZAp2aWFsIG9mIHN0YXJzCnBpbmsgYW5kIGJsdWUgaGFpcgpibG9vbXkKc2Fsc2EgZGFuY2luZwp3ZWFyaW5nIGVsYWJvcmF0ZSBncmVlbiBhbmQgZ29sZAp0cmVuZGluZyBvbiBob2xseXdvb2QgcmVwb3J0ZXIKbWVkaWV2YWwgZmFudGFzeSBsYW5kc2NhcGUKZGFyayBmaWd1cmVzIHdhbGtpbmcKZHJlc3NlZCBpbiB3aGl0ZQpleGFnZ2VyYXRlZCBtdXNjbGUgcGh5c2lxdWUKc3VwZXIgY29tcGxleCBhbmQgaW5zdHJ1Y3QKcmlwcGxpbmcgZGFyayBjaW5uYW1vbiBoYWlyCjggayBoZHIgdWx0cmEgaGlnaCBxdWFsaXR5CjggMCBtbSBwaG90b2dyYXBoeQpydWJpCm1pY2hlbGluIHN0YXIgcGhvdG9ncmFwaHkKYWxpZW4geGVub21vcnBoCnBpdGNoYmxhY2sgc2tpbgo0IGsgbWF0dGUgdGhvbWFzIGtpbmthZGUKZW5jaGFudGVkIHBsYW50cwpnaWFudCB3aW5ncwphbGllbiBmbG9yYQplcGljIGxpZ2h0IHNjZW5lCmV4dHJlbWVseSBlbW90aW9uYWwKZXh0cmVtZWx5IGRyYW1hdGljCmNvcmVsIHBhaW50ZXIKOCBrIGhkciA4IDAgbW0Kc3RlYW1wdW5rIG1ldHJvcG9saXMKbWFjcm8gY2xvc2UgdXAKcG9vbHMgb2Ygd2F0ZXIKdmlld2VkIGZyb20gdGhlIGhhcmJvcgpkdWNrIHNob2VzCnN0eWxlIG9mIGNocmlzIGZvc3MKdmVyeSBleHByZXNzaXZlIGZhY2UKcGxhbnRzIGluIGdsYXNzZXMKY3JhY2tlZCBqYXBhbmVzZSBwb3R0ZXJ5IHZhc2UKbW9vZHkgbW9ybmluZyBsaWdodAptaWtlIG5hc2gKb24gYmFja2dyb3VuZCByZWQgbGFrZSBvbiBmaXJlCmR5c3RvcGlhbiBncmF5IGZvcmVzdCBiYWNrZ3JvdW5kCmZ1bGwgYm9keSBpbiBmcmFtZQp3ZWF0aGVyZWQgb2xpdmUgc2tpbgpmbG93aW5nIHJvYmVzIGFuZCBsZWF0aGVyIGFybW9yCnJlYWxpc3RpYyBzaGFkZWQgcGVyZmVjdCBhbmF0b215CmdvbGRlbiBqZXdlbHJpZXMKcG9pbnR5IGJ1bm55IGVhcnMKem9uZSBvZiB0aGUgZW5kZXJzCmRlc2VydCBzZXR0aW5nCmNvdmVyZWQgaW4gaWNlCm5vcmRpYyBzdW1tZXIKZmFjZXMgY292ZXJlZCBpbiBzaGFkb3dzCmdhbWVjdWJlCnN1YmplY3QgY2VudGVyZWQKaGlnaGx5IGRldGFpbGVkIHNwaWRlciAtIG1hbgpjbG9zZSB1cCBmYWNlIGRldGFpbApzY2FycyBvbiBoaXMgZmFjZQpzdHVkaW8gZ2hpYmxpISEhISEKcHJpbnQhCnRyYWRpdGlvbmFsIGtvcmVhbiBpbnRlcmlvcgpvbmUgaXMgYmxvbmQKb2N0YW5lIHJlbmRlciAvIHNvdXJjZQp2YXVkZXZpbGxpYW4KZnJvbSAxODkwCmJlYXV0aWZ1bCBhbmQgbXlzdGVyaW91cwpzY2hsaWVyZW4gZmxvdyB2aXN1YWxpc2F0aW9uCnZlcnkgZmx1ZmZ5CiggY3liZXJwdW5rICkKY2dzb2NpZXR5IGhkCmNnc29jaWV0eSA0IGsgdWhkCmhpZ2ggcmVzIGVhdXRpZnVsIGxpZ2h0aW5nCmouIGMuIDggawptYWdpY2FsbHkgZGVuc2UKbmVvcmVuYWlzc2FuY2UKbGFycnkgbWFjZG91Z2FsbAphbGxlZ29yaWNhbAppY29uaWMgbG9nbwp3YXRlciBzcGxhc2hpbmcgY2FzY2FkaW5nCmdvbGQgc2tpbgpzdGFyaW5nIHdpZGUgb3BlbiBleWVzCndhbGtpbmcgYXJvdW5kIGluIGZvcmVzdApzbW9vdGggYnJ1c2h3b3JrCmN5YmVyIHdlYXIKYmFuZGFnZQpob3Qgc3VuCm5hdHVyZSBzdHVkeQptZWRpdGF0aXZlIHNhY3JhbCBwb3NlCmNhcnJ5aW5nIGEgZ3VuCmxpZ2h0IGlyaWRlc2NlbnQgY29sb3IKcmVkIGFuZCBibGFjayBzdWl0CmV4dHJlbWVseSBkZXRhaWxlZCBibHVlIGV5ZXMKc211ZGdlcwpub3Qgd2VhcmluZyBtYW55IGNsb3RoZXMKdGhlIGNoYXJhY3RlciBpcyBhIG1hbgpsaWdodCBncmF5IGV5ZXMKZmlzaG5ldCBjbG90aGVzCmd0YSA0IGxvYWRpbmcgc2NyZWVuIGFydHdvcmsKaGFzc2VsYmxhZGUgc2hvdApsYWJjb2F0cwpwZXJzb25hIDUgcGhhbnRvbSB0aGllZiBzdHlsZQpjb21wbGV0ZWx5IG1ldGFsCmFsaWVuIHBsYW5ldCBpbiB0aGUgc2t5IGZhcmF3YXkKdmVyeSBhY2N1cmF0ZSBhbmQgZGV0YWlsZWQKZ3Jvd2luZwp0ZXJyYWZvcm1pbmcKcGVvcGxlIHdhbGtpbmcgaW4gc3RyZWV0Cm9wZW4gc2tpZXMKaGV4YWdvbmFsIHNoYXBlZApuaWtvbiBwaG90b2dyYXBoeQpjaW5lbWF0aWMgYmFjayBsaXQgbGlnaHRpbmcKY2Fub24gNTBtbSBsZW5zCmNvbnRyb2xzCmhpZ2ggZGVwdGggYW5kIGRldGFpbHMKaW4gdGhlIHNub3cgbW91bnRhaW5zCm1vbm9jaHJvbWF0aWMgYmx1ZQpkZW1vbiByYXlzCmhpZ2ggcXVhbGl0eSBwb3J0cmFpdCBwaG90b3Nob290Cmdob3N0ZmFjZQpkdXN0IGNsb3VkcyBhbmQgYnVpbGRpbmcgZGVicmlzCmZ1amkgeCAxIDAgMCBmCm1pY2hlbCAtIGFuZ2UKdWdseSBoaWdobHkgZGV0YWlsZWQKY29zbW9zIGV4cGxvcmF0aW9uCmJsb29vZGJvcm5lCnZpZXcgZnJvbSB3aW5kb3cKbWFkZSBvZiBmbGVzaCBhbmQgbXVzY2xlcwp3ZWVkcyBhbmQgaXZ5IG9uIHRoZSBncmF2ZXMKaHVsbCBpcyBhIG9wZXJhIGhvdXNlCmVuZ3JhdmVkIGhpZ2hseSBkZXRhaWxlZApoZCAzNW1tIHBob3RvZ3JhcGh5CmN1bGluYXJ5IGFydCBwaG90b2dyYXBoeQpyZWQgZ2xvd2luZyB2ZWlucwpiaWcgc2NhbGUKbWFueSBkb29yd2F5cwptaWxpdGFyeSBzdG9yYWdlIGNyYXRlCjQgayBwaG90b3JlbmRlciByZWFsaXR5ZW5naW5lCmh1bW9uZ291cwplcGljIGFyY2hpdGVjdHVyZQpuZXh0IHRvIHNvbWUgYWxpZW4gcGxhbnRzCmluIGZyb250IG9mIHRoZWlyIHNwYWNlIHNoaXAKdmVyeSBtb2Rlcm4gYW5pbWUgc3R5bGUKcGVyZmVjdCBzaG90CmphcGFuZXNlIGNsb3RoZXMKd2VhcmluZyBjeWJlcm5ldGljIGJ1bm55IGVhcnMKaW4gYSBnbG93aW5nIHNraXJ0CnN5bW1ldHJpYyEKZGlnaXRhbCBleHByZXNzaXZlIG9pbCBwYWludGluZwpncmF2aXR5IGZhbGxzCmxvbmcgaGFpciDvvIwgZnVsbCBjb2xvcgpoZXIgbG9vc2UgaGFpcgpoaWdoIGNvbnRyYXQKc3BvcnQgZ2xhc3NlcwpibHVlIGFyY2hpdmUKZmxhdCBwYXN0ZWwgY29sb3JzCnRoZSBnaXJsIGlzIHNjYXJlZAphaXJzb2Z0IGNxYgpicnV0YWwgZmlnaHQKdG9tIHJpY2htb25kIGlsbHVzdHJhdGlvbgptb3J0IGRydWNrZXIgaWxsdXN0cmF0aW9uCmJ1cnJpZWQgaW4gc25vdyBhdCBuaWdodApoeXBlcnJlYWxpc3RpYyAzIGQgcmVuZGVyCmVsdmVuIGFyY2hpdGVjdHVyZQphY3JvbnltCmZhc2hpb24gbW9kZWwgcG9zZQp0ZXh0dXJlZCBpbiBzdWJzdGFuY2UKYnkgdGl0ZSBrdWJvCnRoZSBjcm93bgpoaWdoIHNjaG9vbCBtYXNjb3QKc2hvcnQgaGFpciBvbiBzaWRlcyBvZiBoZWFkCmxvbmcgYnJhaWRlZCBoYWlyIG9uIHRvcCBvZiBoZWFkCmJlYXV0aWZ1bCBncmFkaWVudHMKMyAyIHggMyAyCmJleW9uZCB0aGUgaG9yaXpvbgpleGNlcHRpb25hbCBiZWF1dHkKZmVhdGhlciBoYWlyCndlYXJpbmcgYSBsb25nIGZsb3dpbmcgcm9iZQpzdWJ0bGUgYW5pbWUgc3R5bGUKc3RhcmxpdAp0d2lzdGVkIGdhcmRlbnMKfCBkZW1vbmljIHwgaG9ycm9yIHRoZW1lZAphbHBob25zZS1tdWNoYQpzYWNyZWRuZXNzCmF1dHVtbiBjb2xvcgpjb25zdHJ1Y3Rpb24geWFyZApvbmx5IGhlYWQKY29sb3IgcG9ydHJhaXQKY29udGFjdCBzaGVldApzaGUgaXMgdGhlIGNlbnRlciBvZiB0aGUgZ2FyZGVuCmNpbmVtYXRhdGljIGxpZ2h0aW5nCnJvc3kgY2hlZWtzIHdpdGggZnJlY2tsZXMKaWNlIGFnZQp2YXBvcndhdmUgY2FydG9vbgooKHRhdHN1cm8geWFtYXNoaXRhKSkKc3R5bGUgb2YgYW5keSB3YXJob2wKd2l0aCBmcmFjdGFsIHN1bmxpZ2h0CnBob3RvZ3JhcGhlZCBvbiBjb2xvdXIgZmlsbQpzZXR0aW5nIGlzIGJsaXNzIHdhbGxwYXBlcgpvcnRob2dvbmFsCmdsYW1vcm91cyBjb21wb3NpdGlvbgp3YXJtIGxpZ2h0bmluZwpjYW5vbiBlb3MgLSAxIGQgeCBtYXJrIGlpaQpzdHVkaW8gcGhvdG8gcG9ydHJhaXQKbGFzZXIgYmVhbSA7IG91dGRvb3IKMSA5IDggMCBzIHNjaSAtIGZpCmNoYXJhY3RlciBkcmF3aW5nCmZ1dHVyZSBzY2llbmNlIGZpY3Rpb24uIGdhbWUgY2cKaW5zaWRlIGEgc3VwZXJtYXJrZXQKZmF2aWNvbgpoZSBpcyBpbiBhIGFsY2hlbWlzdCBsYWIKbGF1cmVscyBvZiBnbG9yeQo1IG8nY2xvY2sgc2hhZG93CjIgMCAwIDIgcGhvdG8Kd2lzcHMgb2Ygc21va2UKYmxhY2sgY3VybHkgYmVhcmQKZGlzY292ZXJlZCBpbiBhIHNlY3JldCBnYXJkZW4KZmx5aW5nIGJhdHMKcGFuYXZpc2lvbiBtaWxsZW5uaXVtIHhsIDIKMSA5IDMgMCBzIC0nNCAwIHMgYmFsdGFyIGxlbnNlcwpzb2Z0IGJydXNoIHN0cm9rZXMKZ2xhbW91ciBsaWdodGluZwpoYWRyb24gY29sbGlkZXIgdGVjaG5vbG9neQptZXRhbCBnZWFycwpzd2lybGluZyBiaW9sdW1pbmVzY2VudCBlbmVyZ3kKc2hvdCB3aXRoIGlwaG9uZSAxIDAKcGhvdG9ncmFwaHkgNTBtbSBmMS40Cmhlcm9pYyBmYW50YXN5IGFydApjZW50ZXIgYW5nbGUKdmVoaWNsZSBkZXNpZ24Kc29ueSAyIDQgbW0gZiA4LiAwCndlbGRpbmcgdG9yY2hlcyBmb3IgYXJtcwpoZXhhZ29uIGxlbnMgZmxhcmVzCmR1b2Nocm9tZQplbGVnYW50IGFuZCBvcm5hdGUKaGRyIGxpZ2h0aW5nCnRyYW5zcGFyZW50IGNvcnJ1Z2F0ZWQgZ2xhc3MKc3ViamVjdCBkZXRhaWw6IHdlYXJpbmcgYSBzdWl0CnNpbWlsYXIgdG8gbGVnb2xhcwpraWRzIHRveQpmb3JlaGVhZCBqZXdlbHJ5CnJlZmxlY3Rpb24gbWFwCmYgMi4gOCAzIDUgbW0KaGlnaGRlbnNpdHkKaGlnaHJhZGlvc2l0eQpyb2NvY28gcXVlZW4KaW4gd2hpdGUgY2xvdGhlcwpmbGFtaW5nIHNrdWxsCnNwZWFyIGluIGhhbmQKbW9vbmxpdCBwYXJraW5nIGxvdApwYXVsIGxlaHIgYW5kIGJlZXBsZQptaXN0cwpnb3RoaWMgdGF0dG9vcwoyNwpncmFjZWZ1bGx5IGJlbGx5IGRhbmNpbmcgcG9zZQptb29ubGl0IGNsb3VkcyBiYWNrZ3JvdW5kCmhlcm9pYyBqdW1waW5nIHBvc2UKaHlwZXJkZXRhaWxlZCBwZXJmZWN0IGZhY2UKd2VhcmluZyBoYWthbWEKbGVhdGhlciBwYW50cwpoaWdoIHBvbHkgdnJheSByZW5kZXIKcG9seXBob25pYyBlY3N0YWN5CnJvdW5kIHdpbmRvdwpkYXJrIHNtb2tlIGluIGRpc3RhbmNlCmFlcmlhbCB2aWV3IHRvcCBkb3duCmZpcmUgbGF2YQpqZWFucyBhbmQgdCBzaGlydApsaWdodCBncmF5IGxvbmcgaGFpcgpwaG90b2dyYXBoeSBvZiBjaGFybGluZSB2b24gaGV5bApldmlsIHBvc2UKbG9uZyBlbGYgZWFycwphcm1zIG1hZGUgb3V0IG9mIHNwYWdoZXR0aQpzdGFuZGluZyBpbiBhIGdyYXNzeSBmaWVsZAphd2FyZCB3aW5uaW5nIGRvY3VtZW50YXJ5CmlmdW5ueSBpbXBhY3QgZm9udCBib3R0b20gdGV4dAppZnVubnkKYmxvbmRlIGFuZCBzaWx2ZXIgaGFpcgpwdWthIHNoZWxsIG5lY2tsYWNlCnVuZGVyZXhwb3NlZCBncmV5Cmh1ZXMgb2Ygc3VidGxlIGdyZXkKdmlicmFudCBncmVlbmVyeSBvdXRzaWRlCmluY3JlZGlibGUgbWFzdGVycGllY2UKZ29sZGVuIHllbGxvdyBleWVzCndlYXJpbmcgYmxhY2sgc3R5bGlzaCBjbG90aGluZwoxOHRoIGNlbnR1cnkgZHJhd2luZwp0aGUgbWFuIHJpZGluZyBpcyBvbiB0aGUgbGlvbgp0aGUgd2lzZSBtYW4gaXMgcmlkaW5nIG9uIHRvcApmaWx0aHkgbWF0dGVkIGZ1cgp1bnJlYWxpdHkKaGlnaCBmaWRlbGl0eSBkZXRhaWxzCmplbGx5ZmlzaGVzCnN5cGhvbiBmaWx0ZXIKZmlyc3QgcGxheXN0YXRpb24gZ3JhcGhpY3MKcGl4ZWwgcmFpbgo5IDAgcyBnYW1lcwpjb3p5IDEgOSA1IDAncwpoeXBlcnJlYWwgcGhhbnRhc3RpYyBsYW5kc2NhcGUKb3JhbmdlIHRlYWwgbGlnaHRpbmcKc3dpc3MKZXhhZ2dlcmF0ZWRseSBsYXJnZSBwaHlzaXF1ZQpzaW1wbGZpZWQKY2hhcmljYXR1cmUKc2ViYXN0aWFuIHBldGhlcgphbWF6ZW1lbnQKbWV0YWxsaWMgc2N1bHB0dXJlCnBhcmFkb3hhbAoxIDUgbW0gbGVucwpub3N0YWxnaWMgbWVtb3J5CnN0eWxlIG9mIHJlbmUgbWFncml0dGUKaXMgcmVsYXhpbmcgb24gYSBiZWFjaApmYWRlZCBjb2xvcgpkcmFtYXRpYyBhY3Rpb24gYXRtb3NwaGVyZQptaXRyZQpoIHIgZ2VpZ2VyCmhvcnJvciBzdXJyZWFsaXNtCnBhcGVyIGNyYWZ0CnRpZ2h0bHkgZnJhbWVkCmx1c2ggZm9yZXN0IGZvbGlhZ2UKYmVhdXRpZnVsIGFuZCB0ZXJyaWZ5aW5nCmdvbGRlbiBnb2RkZXNzIGF0aGVuYQpqYXBhbiAxOTgwcwpzdXJyZWFsIHBob3RvCmNvbG9yZnVsIHdpcmVzCnNjaWVudGlmaWMgc3BlY2ltZW5zCnRoZSBtZXQgbXVzZXVtCmV4cXVpc2l0ZSBhcmlzdG9jcmF0aWMKbG9uZyBzd29yZCBpbiBoZXIgaGFuZApkYXJrIGFuZCByZWFsaXN0aWMKZ2FtZSBsb2dvCnJ1YmVkbwpjbGVhbiBwb3N0IHByb2Nlc3MKb2ZmaWNpYWwgcG9zdGVyIGFydHdvcmsKY2F2ZSBwYWludGluZ3MKd2FyaGFtbWVyIDQgMCBrIGZhbnRhc3kKbGlnaHR3ZWlnaHQgYnV0IGltcG9zaW5nCmJyaWdhbmRpbmUKNCBrIG1hbmdhIHdhbGxwYXBlcgpsYW1wcyBvbiBncm91bmQKYW4gYW5ncnkgZXhwcmVzc2lvbgpnb2xkIGR1c3QKaGFsZmJvZHkgaGVhZHNob3QKaGlnaGx5IG1lY2hhbmljYWwKaXMgaG9sZGluZyBhIHRpbnkgcGxhbmV0IGVhcnRoCmluIG9mZmljZQpoZWF0ZWQgY29pbHMKY29uY2VwdCBib2F0CnNjaSAtIGZpIGxvb2sKaHlwZXJyZWFsc3RpYwpsZXZpdGF0aW5nIHNhbmQKd2luZ2VkIHdvbHZlcwpyaXZlcnMgb2YgYmxvb2QKKCAoIGNvbG9yZWQgcGVuICkgKQpwcmlzbWF0aWMgY29sb3JzCm1hcmt1cyB2b2d0CmRpbSBjaW5lbWF0aWMgbGlnaHRpbmcKZmlsbGVkIHdpdGggcGxhbnRzIGFuZCBoYWJpdGF0cwpicm93biB3YXRlcgp2aWJyYW50IHRyaWFkaWMgY29sb3Igc2NoZW1lCndpdGggd2FydApjb250cm9sbGVycwppbiBzdHVubmluZyBkaWdpdGFsIHBhaW50CnVzaW5nIGEgbWFjYm9vawpyZWFsaWF0aWMKYWR2YW5jZWQgZGlnaXRhbCBwYWludGluZwpsaW1pbmFsIHNwYWNlIGFlc3RoZXRpYwppbnNhbmxleSBkZXRhaWxlZApyZXNpZGVudGlhbCBkZXNpZ24KZmxvb3IgLSB0byAtIGNlaWxpbmcgd2luZG93cwppbiBjYXJ0b29uIHN0eWxlCnllYXIgMSA5IDcgMAp0aGUgZW1wZXJvciB0YXJvdCBjYXJkCmRpc3RpbmN0IGZpZ3VyZQpsb25nIHdpbGQgYmxhY2sgY3VybHkgaGFpcgpzdWJ3YXkKdmFuIGNsZWVmICYgYXJwZWxzCmNhcnRpZXIKYm91Y2hlcm9uCmNoYXVtZXQKd2l0aCBrZXJhbGEgbW90aWZzCnN1biByYXlzIGJlYW1pbmcKY29sb3VyIHBvbGFyb2lkIHBob3RvCnJlYWxpc3RpYyBndW4KaGlnaGx5IHRlY2huaWNhbApjcnllbmdpbmUgOCBrCmNocm9tZSBwYXJ0cwpjaGVlc2UgYW5kIHBlcHBlcm9uaQpzdWJ0bGUgZGVwdGggb2YgZmllbGQKZGFtYWdlZCBqYXBhbmVzZSBjbG90aGVzCmZhaXJpZXMgYW5kIHNjaXNzb3JzCmFydCBpbiB0aGUgc3R5bGUgb2YgZGlzbmV5CmphcGFuZXNlIGluc3BpcmF0aW9uCmNyYXp5IGNvbG9ycyAxIDAgJQpwYWxlIHNvYmVyIGNvbG9ycyA5IDAgJQpkcmVzc2VkIGluIGEgZ3JlZW4gcm9iZQpmbG93ZXJzIG9uIGhlaXIgY2hlZWtzCndvcmtzaG9wCmJyb3duIGFuZCBnb2xkCmRlZXAgYmx1ZSBvY2VhbgpmZWF0dXJlZCBpbiBhcnRpc3RhdGlvbgooIGFydCBmaXR6cGF0cmljayApCiggYXNhZiBoYW51a2EgKQooICggYmFyY2xheSBzaGF3ICkgKQpncmFkaWVudCBicm93biB0byB3aGl0ZQojIGZpbG0KaGlnaGx5IGRlZmluZWQgZmVhdHVyZXMKc2NyaWJibGUgc2tldGNoCmdyZWVrIGZhbnRhc3kKZnVyIHNob3VsZGVyIHBhZHMKY3liZXJwdW5rIGhvcnJvciBzdHlsZQpkcmVzc2VkIGluIGEgYmVhdXRpZnVsIHJlZCBjbG9hawpzY2lmaSBjb2xvcnMKZnJhbmNvaXMgc2NodWl0ZW4KcGVvcGxlIGFyZSB3ZWFyaW5nIG1hc2tzCmluIGEgZnV0dXJpc3RpYyBjeWJlcnB1bmsgY2l0eQpoZSBpcyBzbWlsaW5nCndhbGtpbmcgdGhyb3VnaCBhIGZvcmVzdApob2xkaW5nIHNob3RndW4KZGV0YWlsZWQgZmlsaWdyZWUKamFwYW5lc2UgaWxsdXN0cmF0b3IKZWFydGh5IGNvbG9ycwpjb21wcmVoZW5zaXZlIGFydHdvcmsKaWxsdXN0cmF0aXZlIGFydApsYWJlbGVkCnR3byBwdXJlIG1vb25zCmRsc3IgNSA1IG1tCmZsYXNoIG9uIGNhbWVyYQpmdXR1cmUgYXJjaGl0ZWN0dXJlCnZpYnJhbnQgbmVidWxhCnN0b3JtaW5nCmxpZ2h0IHNvdXJjZSBvbiBsZWZ0CmRheWdsbyBwaW5rIGFuZCBibHVlCnJlZCBjbG90aCBhcm91bmQgaGlzIHNob3VsZGVycwpob2xkIHNwZWFyCm92ZXJncm93biBqdW5nbGUKd2llbGRpbmcgdHdpbiBzd29yZHMKc3BlY3R1bGFyIGxpZ2h0aW5nCnJlc3RhdXJhbnQhISEKZnJhbmNpcyBiYWNvbiBwYWludGluZwphZ2dyZXNzaXZlIHJvY29jbwpicmlnaHQgYW5kIHN1bm55Cndhcm1seSBsaXQKZ2lnYW50aWMgdHJlZXMKc2VjcmV0aXZlCnNsb3cgLSBtbyBoaWdoIHNwZWVkIHBob3RvZ3JhcGh5CmJsb29kYm9ybmUgYXJ0CmRldGFpbGVkIGZhbnRhc3kgaWxsdXN0cmF0aW9uCmZvdW5kIGZvb3RhZ2UgdmlkZW8KbW9vbiBpbiBiYWNrZ3JvdW5kIQpoYXBweSBsb29rCmluIHRoZSBzdHlsZSBzYXVsIGJhc3MKc2hvcnQgYmxhY2sgaGFpciB3aXRoIGdlbAp3ZWFyaW5nIGRhcmsgbWFyaXRpbWUgY2xvdGhpbmcKd2VhcmluZyBhIHNrZWxldG9uIGFybW9yCnJlcHJlc2VudGluZyBsaWJlcnR5CnJvcnNhY2ggcGF0aCB0cmFjZWQKZXZpbCBzb3JjZXJlc3Mgd2l0Y2gKdmljdG9yaWFuIG1hbm9yCmV2aWwgc29yY2VyZXNzCnBhc3RyaWVzCnB1cnBsZSBhbmQgeWVsbG93CndvcmtiZW5jaApzdHlsaXNoIGRlY29yCmF3YXJkIHdpbm5pbmcgZ3JhcGhpYyBkZXNpZ24KZXNoZXIKaG9ycm9yIGZhbnRhc3kgYXJ0Cm5lbyAtIG5vaXIKcmV0cm8gMyBkIGdyYXBoaWNzCmxhY3F1ZXIgb24gY2FudmFzCmF0IHRoZSB0b3Agb2YgYSBtb3VudGFpbgphcyB3ZWxsIGFzIHRoZSBoYW5keWJveQprb25hbWkgaHlwZXJib3kKY292ZXJlZCBpbiBzbm93CmRuZCBpbGx1c3RyYXRpb24KZHJhZnQKcnVhbiBqaWEgYW5kIG1hbmR5IGp1cmdlbnMKYWxpbmEgaXZhbmNoZW5rbwphcnRpc3RhdGlvbgpjb21wdXRlciBjZ2kKcGVyZmVjdCBmZWF0dXJlcwp3aGl0ZSBmYWNlIHBhaW50CmxpZ2h0c2FiZXJzCmdyYWZmaXRpIHBhaW50aW5nCnJvbGxlaSAzIDUgY2FtZXJhCnNrdWxsIHByb3RydWRpbmcgZnJvbSBmYWNlCndhcnBlZCBmbGVzaApkYXJrIHNvdWxzIGNoYXJhY3RlcgppbXByZXNzaXZlIGxpbmUgd29yawpibGFjayBhbmQgd2hpdGUgY29sb3Igb25seQpncmlmZmluLWxpa2Ugc3R5bGUKc3RhcnMgYXMgZXllcwpoYW5kIHBhaW50ZWQgc3R5bGUKbXVsdGkgY2hyb21hdGljCm91dHJ1biBjb2xvciBwYWxldHRlCnBlcHNpCmRpcnR5IGFwYXJ0bWVudApzcGVlZHkgYWlyY3JhZnQKYmVuIGFyb25zb24gMTk1MApvbGQgY2FyCmludGVuc2UgZW1vdGlvbnMKZ2xhc3MgbW9zYWljCm9uIGEgc3BhY2Ugc3RhdGlvbgpibHVlIHNreSBiYWNrZ3JvdW5kCnN0eWxpemVkIDMgZApncHUgZmlyZQpwbGFpbiBwdXJwbGUgYmFja2dyb3VuZAptYWRlIGluIHRvbmVzIG9mIHdoaXRlIGFuZCBncmV5CnN1cnJlYWxpc20gb2YgZnJhbmNpcyBiYWNvbgphd3d3d3cKdXRvcGlhbiBhcnQKbW9ycGhvc2lzCnNpbmlzdGVyIG1vb2QKbGlnaHQgY2xvdWQKZm91bnRhaW4gb2Ygd2F0ZXIKc2hpbiAtIGhhbmdhCmNhcmluZyBmYXRoZXJseSB3aWRlIGZvcmVoZWFkCmxpZ2h0IGFuZCBjbG91ZHMKYW4gdWx0cmFmaW5lIHBhaW50aW5nCmpldHMKY3VydnkgYnVpbGQKcHVycGxlcwphZnJvZnV0dXJpc3RpYwpnYWxheHkgZ2FzIGJydXNoc3Ryb2tlcwppbmR1c3RyaWFsaXphdGlvbgp0YWxsIGNvbHVtbnMKZXh0cmVtZWx5IGJlYXV0aWZ1bCBmYWNlCm1vbHRlbgpzdHlsZSBvZiBmcmFuayBtaWxsZXIKc3R5bGUgb2Ygc2ltb24gYmlzbGV5CmJyaXRpc2ggc3RyZWV0IGJhY2tncm91bmQKZHJlc3NlZCBpbiBhIHdvcm4Kc3VidXJiYW4gZ2FyZGVuCnJhZGljYWwKbW9lYml1cyBhbmQgZGFuIGhpbGxpZXIKbGFyZ2Ugc3RvbmVzCmJyYW5kaXNoaW5nIGhhbGJlcmQKaW4gYW4gYXJjdGljIGZvcmVzdApmdWppIDggMCAwIGZpbG0Kd2hpdGUgbmVvbgpibGFjayB3aGl0ZSByZWQKY2FudGVyZWQKYm9keSBkcmFwZWQgaW4gbW9zcwpoZWFkbGVzcwpmaWdodGluZyBkZW1vbnMKb3JiaXRpbmcgYSBnYXMgZ2lhbnQgcGxhbmV0CmJpcmQgLSBleWUgdmlldwpzdW1tZXIgbW9ybmluZyBkZXcKY29zbWljIGhvcnJvciEhCmdlbnVpbmUgc21pbGUKdHJhbnF1aWwgc2NlbmUKbGVlbG9vIG91dGZpdApqYXBhbiBzdHVkaW8gZ2FtZQpncm91bmQgbGV2ZWwgdmlldwpiYWNrIG9mIGhhbmQgb24gdGhlIHRhYmxlCndlYWsKaG9ycmlmeWluZyBncmluLiBob3Jyb3IKaW4gdGhlIHN0eWxlcyBvZiBjYW1lcm9uIGxvb2sKYW5kcmV3IGJlcm5zdGVpbgphbnNlbCBhZGFtcy4gaW50cmljYXRlCmluIHRoZSBtaWRkbGUgb2YgbmV3IHlvcmsKc21va2UgdW5kZXIgdGhlIGNlaWxpbmcKaW50ZXJzdGVsbGFyIHNwYWNlIHN1aXQKYWtzZWxpIGdhbGxlbiBrYWxsZWxhCnN0YW5kaW5nIHVuZGVyIGEgYmVhbSBvZiBsaWdodAphbmltZSBzdHlsZSBjaGFyYWN0ZXIKYmFja2xpdCBiZWF1dGlmdWwgZmFjZQpmdXJyeSBjaGFyYWN0ZXIKdWx0cmEgLSBoaWdoIGRldGFpbApjbGVhciBsaW5lcyBhbmQgc2hhcGVzCnJlYWxpc3RpYyBlbGVtZW50cwpibHVlIG1vbm9jaHJvbWF0aWMKb3J0aG9kb3ggY2hyaXN0aWFuaXR5CmxpZmUgY3ljbGUKYmlsbGJvYXJkCm1lbW9yaWVzCmNvbnRlbXBsYXRpbmcgZXhpc3RlbmNlCnVuZGVyd2F0ZXIgY2F1c3RpY3MKbGlnaHQgc2tpbm5lZCBhZnJpY2FuIHlvdW5nIGdpcmwKIyBtaXN0ICMgaG9ycm9yICMgbWFnaWMgIyBzcGVsbApjeWJlcnB1bmsgMjA3NyByb3NzZHJhd3MKZnJvbSBkb29tIGFuZCBoYWxvCmh1Z2UgbGV2ZWwgc3RydWN0dXJlCmJ1dCBzbG93ZXIgaW4gY2hhbmdpbmcKdmlld2VkIGZyb20gZmFyIGF3YXkKYXdhcmQgLSB3aW5uaW5nLiBsb3ZlY3JhZnRpYW4KYWJzdXJkaXNtCmxvbmcgbHV4dXJpb3VzIGxpZ2h0IGJsb25kIGhhaXIKZmluZSBkZXRhaWxpbmcKZWxkZXIgcmluZwptb3J0aWZpZWQgYXQgaXRzIGV4aXN0ZW5jZQpqb3JkYW4KZ2xvYmFsIHJhZGlhbnQgbGlnaHQKbWlsayBwdWRkbGVzCmZpZWxkIG9mIGZsb3dlcnMgYmFja2dyb3VuZApwdXJwbGUgbGVhdGhlciB3aW5ncwptYWdkYSB0b3JyZXMgZ3VyemEKcGx1bSBibG9zc29tCmZhY2UgaW4gZGV0YWlsCmNvbG9yIGFpcmJydXNoCmZ1amlmaWxtIDUgNiBtbSBmIDEuIDIKbW9kZXJuIHNldHRpbmcKZGllc2VscHVuayBzZXR0aW5nCmZpcmViYWxsIGxpZ2h0aW5nIGhlciBmYWNlCndhcnJpb3IgYXJtb3IgYW5kIHdlYXBvbnMKc3RyZWFrIGxpZ2h0cwpsaWdqdCB0cmFpbApjb2xvciBnZWwKcGhvdG9ndGFwaHkKaGFuZHNvbWUgYW5kIGF0dHJhY3RpdmUKd2VhcmluZyBhZHZlbnR1cmUgZ2Vhcgpnb2luZyBncmF5CnN0YW5kaW5nIGluIGZyb250IG9mIGEgbWlycm9yCnlvdW5nIHdvbWFuIGxvb2tpbmcgdXAKdGhpY2sgd2F0ZXJjb2xvciBicnVzaCBzdHJva2VzCmFuZHJvaWQgam9uZXMgYW5kIGNocmlzIGR5ZXIKZmFudGFzdGljIGxpZ2h0aW5nIGFuZCBzaGFkaW5nCnNob3VsZGVyLWxlbmd0aCBibGFjayBoYWlyCnNwZWN1bGF0aXZlIGZhc2hpb24KaGlnaGx5IGRldGFpbGVkIDhrIHBob3RvZ3JhcGh5CmNyb3duISEgb2lsIHBhaW50aW5nCnNha2ltaWNoYW4gaGRyaQo1MTMzMzA2NzMKNDA3NDI5NDUyNwp2ZWx2ZXQgc3RvY2tpbmdzCmFuZ3J5IGZhY2lhbCBleHByZXNzaW9ucwp5b2ppIHNoaW5rYXdhIDogOiBwb3J0cmFpdApoaWdoIGhhdApzdHVkaW8gbWljcm9waG9uZQpsYXJnZSByZWQgZXllcyEhIQpqYXBhbmVzZSB3b21hbgpqYXBvbmlzbWUKd2hpdGUgYW5kIHBpbmsKcWFwbGEKc3R0bmcKaGFuZHMgY3Jvc3NlZApuaWd0aCBtb29uIGxpZ3RoCm5lb24gbWVnYWNpdHkgaW4gdGhlIGJhY2tncm91bmQKYW5ncnkgYW5kIGJvcmVkCmRyYWdvbiBsZWcKc2F3IHRlZXRoCmZpcm0KcGVyZmVjdCBkeW5hbWljIGZvcm0KZWVyaWUgY29sb3JzCmV5ZSBvZiBzYXVyb24KYmx1cnJ5IGZhY2UKbGFjcXVlcndhcmUKcGVyIHVuIHB1Z25vIGRpIGRvbGxhcmkKd2UKaW4gdW5pZm9ybQpkcmFtYXRpYyBhbmQgbW9vZHkKc2NpIC0gZmkgbGFuZHNjYXBlCmphcGFuZXNlIHZpbGxhZ2UKdmludGFnZSBjYXJzCmNvZ25pdGlvbgpteSBkcmVzcyB1cCBkYXJsaW5nIGFuaW1lCmZhbnRhc3kgdmliZQpjYXN0aW5nIHNwZWxscwpsaWdodCBjb2xvdXJzCm11dGVkIHBhbGV0dGUKY2hhcmFjdGVyIGRlc2lnbiBjb25jZXB0CndpdGggYmlnIGV5ZXMKYmVsbGUKb24gYSB3aGl0ZSB0YWJsZQpmaXJlIHRoZW1lCmRhbmNpbmcgb24gYSBwb2xlCmRlZXAgY3JldmljZXMgb2Ygc3RvbmUKMiAwIDEgNQpjbG90aGVkIGluIGFuY2llbnQgc3VpdApvbGQgdmludGFnZSB2aHMKcmVhbCBhbmltZQpzY2FyIGFjcm9zcyBmYWNlCnN0YXIgdHJlayB2b3lhZ2VyCm9yYW5nZSBjb2xvcnMKd2hpdGUgam9obiBiZXJrZXkgYXJtb3IgcGFuZWxzCmJvZWluZyBjb25jZXB0IGFydCBwYWludGluZwpmdWxseSByZW5kZXJlZCBsaWdodCB0byBzaGFkb3cKcHVycGxlIGVuZXJneQpkcmF3biBpbiBhIG5vaXIgc3R5bGUKd2FybSBzYXR1cmF0ZWQgY29sb3JzCnBpY3R1cmVzIGluIHNlcXVlbmNlCmxvdCBvZiB0cmVlcwpjaW5lbWF0aWMgYmFja2dyb3VuZAp0aG9tYXMga2lua2FkZWdyZWcKZiAxIGRyaXZlciBjaGFybGVzIGxlY2xlcmMKc29jY2VyIHBsYXllcnMgbWFydGluIMO4ZGVnYWFyZApibGFjayBib3cgdGllCjggayBoaWdoIG9jdGFuZQpncmF5IG1lbgpiZWF1dGlmdWwgbW9vbmxpZ2h0CnJlYWxseQptZWRpZXZhbCB0aW1lCmluY3JlZGlibHkgZGV0YWlsZWQgb2lsIHBhaW50aW5nCmluY3JlZGlibGUgZmluZWxpbmUKZmluZSBhcnQgbXVzZXVtIHBpZWNlCnNpZ21hIDU1bW0gZi84CnJlYWR5IHRvIG1vZGVsCm1hdHRlIGJsYWNrIHBhbnRzCmNyYW1lbCBoYWlyCmFvcnRhCmhpZ2ggcmVmbGVjdGlvbnMKaW4gc3R5bGUgb2YgY2hyb21lIGhlYXJ0cwpoYXMgYmxvb2QKcmVhbGlzdGljIGFydCBkZWNvCnJpbSBsaWdodCBzdHlsZSB0aW0gYnVydG9uCmRlZXAgc2FkbmVzcwpmaWVsZCAtIGJsdXIKYXJnYW5kIGxhbXAKMSA5IDAgMCdzIHBob3RvCmxvc2VyCmxpa2UgYW5pbWUKam9obiB3YWxsaW4gbGliZXJ0bwp2ZXJ5IGNyaXNwZWQgY29sb3JzCnN1cGVyIGludHJpY2F0ZSBqZXdlbHJ5CnJ0eCBncmFwaGljcwpzaG90IG9uIGFuYW1vcnBoaWMgbGVuc2VzCmFtYXppbmcgbGlrZW5lc3MKZWEgZ2FtZXMKYmVzdCBwYWludGVyIGluIHRoZSB3b3JsZApjdWJpYyBibG9ja3MKbW9kZXJuIHN0dWRpbyBsaWdodCBzb2Z0IGNvbG91cgp5b3VuZyBhbmQgY3V0ZQpjb3dhcmQKZmVtYWxlIGZhY2lhbCBzdHJ1Y3R1cmUKZmluZSBlZGdlcwpqZWFucyBhbmQgYmxhY2sgYm9vdHMKc3R5bGUgb2YgamVyZW15IG1hbm4KY3JlZXB5IG1vb2QKZmFudGFzeSB0dHJwZyB2aWxsYWluCmhlIGNhbiDigJkgdCBiZWxpZXZlIGhpcyBleWVzCndlYXJpbmcgYSBkYXJrIHN3ZWF0ZXIKZmFpcnkgZm9yZXN0CmJyYW5kbWFyawpwaG90b3Nob3AgcmVuZGVyCmRhbmcgbmdvCnJhY2UgZm9vdGFnZQp3aWNjYSBzeW1ib2xzIGRuZApsdW1pbm91cyB2ZWlucwpnb3RoaXF1ZQpzbGVlayBpbnRlcmNlcHRvciBwcm9maWxlCnB0ZXJvZGFjdHlsIG1lY2hhCmZyb20gYWtpcmEgKCAxIDkgOCA4ICkgc3R5bGUKY29sb3JmdWwhCmRpc2ZpZ3VyZWQgZmlndXJlCmFydHN5IHBob3RvZ3JhcGh5CmV4YWdnZXJhdGVkIGV4cHJlc3Npb24KdGFjaGlzbQpzaGludG9pc20Kc3VwZXJoZXJvIGNhcGUKdmlsbGFnZXJzIGJ1c3kgZmFybWluZwppbiBhIGR1bmdlb24KcHVtYQp3YWxraW5nIGluIGhpZ2ggZ3Jhc3MgZmllbGQKc25vb3AgZG9nZyB0ZW5uaXMgYmFsbCBoZWFkCnJldHJvIGdhbWUKd2hpdGUgcG9ueXRhaWwgaGFpcgpyZWFsaXN0aWMgc2hhZGVkIHJvYm90aWMgcGFydHMKYW50aHJhY2l0ZQpjdWJpYwptYXJpbyBmZW5nCmNvdmVydCBtaWxpdGFyeSBwYW50cwpkb24gYmx1dGghISEKaW5zcGlyaW5nIGJpcmRzIGV5ZSB2aXN0YSB2aWV3Cm9pbCBkaWdpdGFsIHBhaW50aW5nCjE2Yml0cwpob3Jpem9uIHZpZXcKaGlnaGx5IGRldGFpbGVkIGh5cGVyIHJlYWwgcmV0cm8KcGxhemEKZmFtb3VzIG9pbCBwYWludGluZwpzdGVhbXB1bmsgZXJhCm5vbiAtIGh1bWFuCnJlYXIgc2hvdApoZCA0IGsgaGlnaCBkZXRhaWxlZAp2b2d1ZSBtYWdhemluZSBwaG90bwpib2R5YnVpbGRlciBzdXBlcmhlcm8gYmlraW5pCmFtYXpvbmlhbgp2aWRlbyBnYW1lIGNoYXJhY3RlciBhcnQKbm8gcGxhbnRzCmRlbGZ0d2FyZQpncmVlbiBmbG9yYSBmb3Jlc3QKYmx1ZSBwYXJ0aWNsZXMKdHJhbnNsdXNjZW50IG5lb24KYmxpbmtpbmcgbGlnaHRzCnNpbHVldHRlcwpzZWFnbGFzcwpwcmludCBtYWdhemluZQpwb2xpY2UgbGlnaHRzIHNoaW5lIG9uIGhlciBmYWNlCmNsYXNzaWMgY2FyCmRlZXAgY29tcGxleGl0eQpuZW9uIGhvb3Zlcwp3aXRoIGdsb3dpbmcgZXllcwp3aXRoIG1vdW50YWlucyBpbiB0aGUgZGlzdGFuY2UKZmFsbCBsZWF2ZXMgb24gdGhlIGZsb29yCmRlZXAgZGVwdGggb2YgZm9jdXMKbW9vbmxpZ2h0IHNub3cKY3V0ZSBhbmltYWwKdml2aWQgdGVudGFjbGVzCnB1enpsaW5nCmF1Y3Rpb24KZ3JpdHR5IGFuZCBub2lzeQpjb3BwZXIgYW5kIGVtZXJhbGQKaGQgZGlnaXRhbCByZW5kZXIKbmV2ZXIgb25lIC0gdG8gLSBvbmUKb3V0IG9mIGJvZHkgZXhwZXJpZW5jZQptaXJyb3JpbmcKYmxhY2sgaG91c2UKc2Nob29scyBvZiBmaXNoCnNjYWx5IHNraW4KZmxlc2h5IHBlcnNvbiB3aXRoIGV4dHJhIGxpbWJzCmdyZWcgcnV0a293c2sKbmlnaHQgY29sb3IKaW4gYSBiYXRocm9vbQpraW1iZXJseSBhc3N0eW4Kam9zaCBncm92ZXIKZ2FwaW5nIG1hdwpncmF5IGNhbnZhcwpjb25jZXB0dWFsIGluc3RhbGxhdGlvbgpwdW1wa2luIGhlYWQKcGhvdG8gb2YgYSBjYXQKc21vb3RoIG92YWwgaGVhZAp0cmliYWwgbWFza3MKa2F0aGUga29sbHdpdHoKaGQgcmVuZGVyaW5nCnNjaG9vbCBvZiBmaXNoZXMKZmxvYXRpbmcgd29ybGQKbWFnaWNhbCBpdGVtcwpwYWxlIHBpbmsgZ3Jhc3MKcGFzdGVsIHBpbmsgY29uY3JldGUKZ2VybWFueS4gd2lkZSBzaG90CnZlcnkgcmVhbGlzdGljIGNpbmVtYXRpYwpmaWxsZWQgd2l0aCBmYXVuYQpkYXJrIGFuZCBzY2FyeQpjb21wbGV4IHNoYWRpbmcKc2hvcnQgYnJhaWRlZCBjdXJseSBibG9uZGUgaGFpcgpsaWdodCBwaW5rIGJpa2luaQpzaW1vbiBib3NsZXkKc2hpbnkgZ29sZGVuIGJpa2luaQp3YWxraW5nIGF0IHRoZSBnYXJkZW4Kc2t5IHdoaXRoIHBsdW1wIHdoaXRlIGNsb3VkcwptYWMgYW5kIGNoZWVzZQppbiBmaWVsZCBoaWdoIHJlc29sdXRpb24KZGlnaXRhbCBsaW5lcwpvbiBhbiBlbXB0eSBtb29ubGl0IGhpbGwKcG9ydHJhaXQhISEhCmN5YmVycHVuayBidWlsZGluZwppdCBpcyBzdW5zZXQKY2xvc2UgdXAgbWFjcm8gcGhvdG9ncmFwaHkKaGlnaCBjb21wcmVzc2lvbgp0aGUgbW9vbiBpcyBiaWcgYW4gaW4gdGhlIGNpdHkKbWFuZGVsYnVsYiBhcmNoaXRlY3R1cmUKc29tYWxpIGF0dGlyZQpzbmFrZSBhc3Nhc3Npbgp3aXRob3V0IHBlb3BsZQpwcm90ZWN0CmNsb3NlIC0gdXAgb2YgZmFjZQpvIC0geW9yb2kKdHN1dG9tdSBuaWhlaSBndXN0YXYga2xpbXQKZGVzcGVyYQp2aW50YWdlIDYgMCBzIHByaW50CnZpbnRhZ2UgOSAwIHMgcHJpbnQKZGFyayBoYWxsd2F5Cm9tbmlvdXMgYmFja2dyb3VuZApnbGFjaWVyIGNvbG9yaW5nCm1lYW4gbG9vawptZWNoYSBhcm1vcgp3b3JsZCBvZiB3YXJjcmFmdCBhcm1vcgpmdXJzb25hISEhIQpwcyA0IHNjcmVlbnNob3QKNSA1IG1tIHBob3RvCnVwc2hvdApzY2kgLSBmaSBob3Jyb3IKY29tcHJlc3Npb24KZnJvbSB0aGUgYmFjawpjb2xpbiBoYXkKc3Rld2FydCBjb3dsZXkKaW50ZXJpb3Igc2NlbmUKaW5kdXN0cmlhbCBzY2kgZmkKcHVycGxlIHJpYmJvbnMKaW4gdm9sY2FubwpmaXJlZmxpZXMgZ2xvd2luZwpkaXNwbGF5cwp3aXRoIG5lb24gc2lnbnMKYmxvb2R0aGlyc3R5CmFuamFsaSBtdWRyYQpncmV5IHN3ZWF0ZXIKZW1wdHkgY2l0eQpzdGFuZGluZyBuZXh0IHRvIHdhdGVyCmJlYXV0eSBjYW1wYWlnbgptYWxlciBjb2xsaWVyaQpsb3NzIG9mIG1vbGVjdWxhciBjb2hlc2lvbgpxdWVlbiBhbmQgcnVsZXIgb2YgdGhlIHVuaXZlcnNlCnN0dWRpbyBnaGlibGkgYWVzdGhldGljCmJhdHRsZSB3ZWFyeQpnaGlibGkgc3Bpcml0ZWQgYXdheSB2aWJlCmFpcmJydXNoIHBhaW50ZWQKaGVhcnRicmVha2luZwpoYWxmIG1hbGUgYW5kIGhhbGYgZmVtYWxlCnN0eWxlIG9mIGpvZWwgbWV5ZXJvd2l0egppbiBhIGJsYWNrIGJldGNoIGJyYQpzdHlsZSBvZiBiZWF1dGlmdWwgYm9keQpnb2JsaW5zIGFuZCB0cm9sbHMKZmpvcmRzIGluIGJhY2tncm91bmQKbGlrZSBhIGNhdGFsb2cgcGhvdG9ncmFwaApwaGFyb2FoCmZseWluZyBkdXN0IHBhcnRpY2xlcwpvbGQgZnVybml0dXJlcwpvdXRzaWRlIHdpbnRlciBsYW5kc2NhcGUKYWxwaW5lIGNsaW1hdGUKZWFybHkgeHggY2VudHVyeSB0ZWNobm9sb2d5CmxvdyBwb2x5IGdyYXBoaWNzCnN0ZWVwIGNsaWZmcwp1bmRlcmdyb3VuZCBidW5rZXIKdGF0c3VraSBmdWppbW90bwpkZWxpY2F0ZSBwb3Nlcwp0cmVuZGluZyBvbiBhcnRzdGF0aW9uLicKZHJhbWF0aWMgZGV0YWlscwpiZWF1dGlmdWwgY29sb3IgY29tcG9zaXRpb24KZ2lwZiBwcm9qZWN0CnN0ZXBoZW4gYmF1bWFuCmNvbm9yIHdhbHRvbgphZGFtIG1pbGxlcgphbnQgYWxpZW4KZ3JhZmZpdGkgdGhyb3dzCmxhcyBwb3phcwpkZWVwIGJsZWVkaW5nIGRlY2F5aW5nIGNvbG9ycyEKYWJzdHJhY3QgaHVtYW4gYm9keQphcG9waHlzaXMKYWJzdHJhY3QgbWluaW1hbGlzdCBsaW5lIGFydAphYnN0cmFjdCBtaW5pbWFsaXNtIGFydCBwYWludGluZwpjb2xvdXJlZCBtYXJrZXIKYmFzcXVpYXQgc3R5bGUKaW4gc3R5bGUgb2Yga2F0c3V5YSB0ZXJhZGEKYWJzdXJkbHkgbG9uZyBibG9uZGUgaGFpcgomIHRoZSBleWVzICYgbW91dGggYXJlIGNsb3NlZApwb3NpbmcgdG9nZXRoZXIgaW4gYnJhCmFybW9yZWQgY29yZSB2CnR1cm5lci4gcGlyYW5lc2kuIG1hY3JvIGxlbnMKYmF0aGVkIGluIG1vb25saWdodApvZmZpY2VzCmhvcnJvciByZWFsaXR5CmFjcnlsaWMgYW5kIHNwcmF5cGFpbnQKZHJhbWF0aWN0aWMgbGlnaHRpbmcKamFwYW5lc2UgY29sbGVjdGlvbiBwcm9kdWN0CmluIGdpemEKZXBpYyBtYWdlIGdpcmwgY2hhcmFjdGVyCnJlZCBsZWF0aGVyIGphY2tldApzdGlsbCBmcm9tIGxva2kgKCAyIDAgMiAxICkKYWRhbSBhbmQgZXZlIHZlcnN1cyBnb2R6aWxsYQpjbGF5bWF0aW9uIGNoYXJhY3RlcgphZGVwdHVzIGN1c3RvZGVzIGNlbnR1cmlvbgpncmVlbiB2YWxsZXkgYmVsb3cKbHVzaCBhbmQgZ3JlZW4KZ3JlZW4gcGFzdHVyZXMgc3RyZXRjaCBmb3IgbWlsZXMKcmVjb2xvcmVkCmFkb3JhYmxlIGdsb3dpbmcgY3JlYXR1cmUKZmFudGFzeSBwbGFuZXQKbWFnaWMgYW5hdG9teQphcXVhIGdsYXNzIGV5ZXMKYWR1bHQgbWFuCmh5IC0gZ29nZwpyb3NlbiB6dWx1CmFkdmVudHVyaW5nIHBhcnR5Cm9uIHRoZSBjb2FzdAphYmFuZG9uZWQgcG9saXNoIG1hbnNpb24KZ3JhZmZpdGkgb24gd2FsbAphYmFuZG9uZWQgY2FyIGdhcmFnZQpyYW5nZSBtdXJhdGEgYW5kIGFydGdlcm0KY2l0eSBhdCBuaWdodCBpbiB0aGUgcmFpbgpzaXR0aW5nIGluIGEgcHJpc29uCjIgMCAyIDEgYXdhcmQgd2lubmluZyBwYWludGluZwpkaWVnbyA1Cmh5cGVyZGV0YWlsZWQgZGV0YWlsZWQKYWZnaGFuIGdpcmwKaHVtdmVlCmRyb25lcyBpbiB0aGUgc2t5Cm0gMSBhYnJhbXMgdGFuawpkb3ZlcyA6IDogcm9jb2NvCmJyaWdodCBhbmQgY29sb3VyZnVsCnJlZ2FsIHBvc2UKZmlnaHRpbmcgZmFudGFzeSBhcm15CmNvbmNlcHQgYXJ0IHJlbmRlcgpyZXRybyBhcnQgc3R5bGUKZG9uIGxhd3JlbmNlJ3MKYWdoYXJ0YQptYWNoaW5lIHJldm9sdXRpb24KbGFkeSB3aXRoIGdsb3dpbmcgZmxvd2VycyBkcmVzcwphaSBhcnQgaXMgc291bGVzcwpsb25nIHZpbmVzCnNob2pvIG1hbmdhCmFpIGxpbWJvCmFpIHByb2R1Y2luZyB0aGUgcmVhbGlzdApkbmQgZmFudHNheSBhcnQKYWtha2EgZmFsbHMKaGkgLSB0ZWNoIGx1Y2lmZXJpYW4gc3ludGhldGljCm11Z3Nob3RzCmFsIHBhY2lubyBzY2FyZmFjZSBob3QgdHViIHNjZW5lCmFsYmVkbyB0ZXh0dXJlCndpdGggYmlnIHN0YXJmaXNoCmZsb2F0aW5nIHdhdGVyZmFsbHMKc29saWQgbGlnaHQgZ3JleSBiYWNrZ3JvdW5kCmdlb3JnZSBkb3V0c2lvcG91bG9zCmFsdGVyZWQgc3RhdGVzCnJnYiBjcnQgc2NhbmxpbmVzCmNpbmVzdGlsbCA4IDAgMCB0IDUgMCBtbQpqb25hdGhhbiBkdWZyZXNuZQplbmNobyBlbmNoZXYKdHJhZGl0aW9uYWwgcGhvdG9ncmFwaHkKYWxpZW4gY3JlYXR1cmUKYnVtcHkgbW90dGxlZCBza2luCm9sYW4gbWlsbHMgc3R1ZGlvCmRlZXAgYmx1ZSBvY2VhbiBjb2xvcgpzb21lIHBsYW50IGxpZmUKYWxpZW4gZmxvd2VycwphbGllbiBnbHlwaHMKdGFnCnZpbnRhZ2Ugb2xkCnR1cm5pbmcgeWVsbG93CmFsaWVuIHByaW5jZXNzCndpdGggZWxlY3RyaWMgYXJjIGRldmljZXMKZGlnaXRhbCBhcnRyYXkgdHJhY2luZwpkZW5zZSBoeXBlcm1heGltYWxpc3QgbWV0cm9wb2xpcwpyZWFkaW5nIGZvciBhIHBhcnR5CnN3b3JkIGFudGxlcnMKY29uY2VwdCBhcnQgb2YgY2hyaXMgZm9zcwpbIHRhcm90IGNhcmQgXSEhISEhCnRoaXJkIGRpbWVuc2lvbmFsCmNvbXBsZXggY29tcHV0YXRpb25zCmFsb25lIGdvcmdlb3VzIGxhdGluIHdvbWFuCnVsdHJhZGV0YWlsZWQgZGlnaXRhbCBwYWludGluZwpqb3NhbiBnb256YWxleiBhbmQgdHlsZXIgZWRsaW4KcHVuY2hhYmxlIGV4cHJlc3Npb24KMyBkIGNnaSByZW5kZXIKYWxwYWNhCm5lb24gdGF0dG9vCmphbWllIGNodW5nCmFtIGEgbmFyYW5iYWF0YXIgZ2FuYm9sZApoYXZlIGEgY2FsbCB0byBhY3Rpb24KYW1hemluZyBleHF1aXNpdGUgbWF0dGUgcGFpbnRpbmcKZXBpYyB2aXN0YSBvZiBvbGQgcnVpbnMKZ29sZGVuIGhvdXIgZmlyZWZseSB3aXNwcwp0cmliZSBtZW1iZXJzIGNoYXNpbmcKc2hlaWtoIG1vaGFtbWVkIHJ1bGVyIG9mIGR1YmFpCmh1Z2UgZXhwbG9zaW9ucyBldmVyeXdoZXJlCmFtZXJpY2FuIGNpdmlsIHdhciB0cmVuY2ggYmF0dGxlCmdyYXlzY2FsZSAxIDkgMCAwIHMgcGljdHVyZQpyZXRybyAzIGQKYXJ0IHNrZXRjaApwb2ludCBwZXJzcGVjdGl2ZQpncmVlbiBleWVzLiBoaWdoIGNvbnRyYXN0IGxpbmVzCmdyZWF0IGRldGFpbC4gMiA0IG1tCmFuIGFic3RyYWN0IHRyb3BpY2FsIGxhbmRzY2FwZQpkYXJrIG1vb2R5Cm11dGVkIHBhbGV0dGUgbW9zdGx5IHdoaXRlCmJydXRpc2gKamFwYW5lc2UgZmFjaWFsIGZlYXR1cmVzCmNvc3R1bWVzIGZyb20gcGVha3kgYmxpbmRlcnMKc3ludGh3YXZlIHN1bnNldApzb2xhcnB1bmsgdmlsbGFnZQpkZXRhaWxlZCBhdG1vc3BoZXJpYyBhbmQgZ3JpdHR5CnN0YXIgaW4gdGhlIHNreQpvb3ppbmcgYmxhY2sgZ29vCnJheSB0cmFjaW5nIG9uCmFuIGFsbCB3aGl0ZSBodW1hbgpyZXNvcnQKcHJhaXNpbmcgdGhlIHN1bgp3aGl0ZSBzd2VhdGVyCmNvbWljIGJvb2sgdGhpY2sgb3V0bGluZQpib2tlaCBpbnRyaWNhdGUgZGV0YWlscwptYW5nYSBjaGFyYWN0ZXIKa2V5Z2VuCmZhcm1sYW5kCmkgbG92ZSB5b3UKaGlnaCBxdWFsaXR5IHJlZmxlY3Rpb25zCmV4dHJlbWUgcG9zZQptb29ubGlnaHQgYmFja2dyb3VuZAphbiBhcmNoaXRlY3R1cmFsCnVuaXF1ZSBwb3QgbWFkZSBmb3IgaG91c2VwbGFudHMKbmVydmUgc3lzdGVtCmFuIGFybXkgb2YgZXZpbApkcmF3biB3aXRoIGEgc2luZ2xlIGxpbmUKYW4gYXN0cm9uYXV0IHJpZGluZyBhIGhvcnNlCnRyeWluZyB0byByaWRlIGl0CmdvbGRlbiByYXRpbyEhIQpzeW1tZXRyaWMgZmFjZSBhbmQgZXllcwp1cHBlciBib2R5IGZhY2Ugc2hvdAppbXBhY3RmdWwgYW1iaWVudApzb2Z0IGxpZ2h0aW5nIDhrCmNhaXJvCmQgJiBkIGRyYWdvbiBhZ2Ugd2FyY3JhZnQKYW4gZWxlZ2FudCBnb3RoaWMgcHJpbmNlc3MKbWVtcGhpcyBncm91cAphbiBlbGVwaGFudCBpbiB0aGUgc2F2YW5uYWgKYW4gZWxlcGhhbnQga2luZwpzaG90IG9uIGFuIGlwaG9uZQpwaW5rIGFuZCBvcmFuZ2UgbmVvbiBsaWdodHMKaW4gZnJvbnQgb2YgYSBmaXJlcGxhY2UKbXV0ZWQgbGlnaHRzCmxpdGhvcmFwaCBlbmdyYXZpbmcKY2hpbmVzZSBsYW5kc2NhcGUKY3VtdWx1cwphbiBlbm9ybW91cwpiZWRyb29tIGludGVyaW9yCmhvcnJpZmljIGNpbmVtYXRpYyBsaWdodGluZwp3YWxsIHN0cmVldApjbG91ZCBvZiBzbW9rZQpsb25nIGZpcmUgaGFpcgpoaXMgZnJpZW5kcyBhcmUgYW5ncnkKd2l0aCBwYXN0ZWwgcGluayBoaWdobGlnaHRzCndpdGggZmV3IHZpdmlkIHB1cnBsZSBoaWdobGlnaHRzCmpld2VsZWQgb3JuYW1lbnQgb3ZlciBmb3JlaGVhZApzaWZpCmxvbmcgZ3JleSBiZWFyZAoyIDAgJSBwZWFybGVzY2VudCBkZXRhaWxpbmcKbWFqZXN0aWMgaG9yc2VzCmp1bmdsZSBmcnVpdApyYXJlIHBob3RvZ3JhcGgKc21pdGhzb25pYW4KYW4gZXh0cmVtZWx5IGRldGFpbGVkIGJ1aWxkaW5nCnRpZWZsaW5nIGZyb20gZCAmIGQKY2Ftb3VmbGFnZWQgZ2VhcgpqdW5nbGVzIG9mIHZpZXRuYW0gYmVhdXRpZnVsCm5vYWgncyBhcmsKaGVyb2ljIGNoYXJnZQo0ayBwb2x5bWVyIGNsYXkgZm9vZCBwaG90b2dyYXBoeQpzb2xlbW4gZ2VzdHVyZQpmbGF0IHN1cmZhY2UKdmlldyBmcm9tIGRpc3RhbmNlCnRyYWlkaWMgY29sb3Igc2NoZW1lCmlzb21ldHJpYyBwcm9qZWN0aW9uCnN1cGVyIGxvbmcgc2hvdApjaGF0ZWF1IGRlIGNoZXZlcm55Cmh5cGVyZGV0YWlsZWQgaW50cmljYXRlCmhlcm1ldGljCm92ZXJjYXN0IGxha2UKcG9vbHMgb2YgYmxvb2QKZXhwcmVzc2l2ZWx5CnNoZSBob2xkcyBhIGdsYXNzIG9mIHdpbmUKcHJlZGF0b3IgMgp2aXNhIHBvdXIgbCdpbWFnZQpzY2kgLSBmaSBmaWxtIGNvbG9yIHBhbGV0dGUKeWVsbG93IGFuZCBibGFjayB0cmltCmFuIGludmVudG9yCnRoaW4gYmVhcmQKYW4gaXNsYW5kIG1hZGUgb2YgZm9vZApsZW1vbiBzbGljZXMgZmxvYXQgb24gdGhlIHdhdGVyCm5leHQgZ2VuCnBhc3R1cmVzCnN1bmxpZ2h0cwpvbiBhIHRocm9uZSBvZiBjcnlzdGFscwpwZXJzcGVjdGl2ZSB3aWRlIGFuZ2xlIHZpZXcKYW4gb2N0b3B1cyBsb3N0IGluIGEgZ2FyYWdlCml2YW4gc2hpc2tpbgplbmlnbWF0aWMgYW5kIGVjdG9wbGFzbWljIGZpZ3VyZQppbnRyaWNhdGUuIGRldGFpbGVkCmFuIG9sZCBlbHZlbiB3b29kCm5pZ2h0IHRpbWUgbG93IGxpZ2h0CnNwb29reSBhbmQgc2NhcnkgYXRtb3NwaGVyZQp3aGl0ZSBzdGVhbSBvbiB0aGUgc2lkZQpkeW5hbWljIGFuZ2xlZCBzaG90CnNtb2tpbmcgYSB3ZWVkIHdpdGggc25vb3AgZG9nZyEhCmF1dHVtbiB0cmFucXVpbGl0eQpmb3JnZXRmdWxuZXNzCmNvbG9yZnVsIG5lYnVsYQplcGljIG1vdW50YWlucyBpbiB0aGUgYmFja2dyb3VuZAphbiBvbWlub3VzIGhhemUKaGlnaCBkZXRhaWwhIQphbiBvcGVuIGZpZWxkCmVwaWMgaGlnaGxpZ2h0cwpwb3AgbW90aWZzCnVsdHJhIGluc3RpbmN0CnBhc3RlbCBzaGFkZXMKYW4gb3V0ZG9vciBmZXN0aXZhbCBzdGFnZQpyZWQgc2hvcnQgaGFpcgpwaG90b3JlYWxpc3RpYyBoaWdoIGRldGFpbAppbnNwaXJpbmcgZ290aGljIGFyY2hpdGVjdHVyZQpsb29taW5nIHRyZWVzCnZvbHVtZXRyaWMgbGlnaHRpbmcgaXJpZGVzY2VuY2UKb2N0YSA4awpvZiBhIHlvdW5nIHdvbWFuCmZpbmUgd2luZApzb21iZXIgY29sb3JzCndhcm0gZ29sZGVuIGJhY2tsaXQKZGF3biBtY3RlaWd1ZQp6ZW5lc2NvcGUKZmxhbWVzIGFyb3VuZCBib2R5CnVucmVhbCBlbmdpbmUgNSBxdWFsaXR5CmNpbmVtYXRpYyBwYWludGluZwpjb3VydCBpbWFnZXMKYW5hbG9nIGRhdGEgcHJvY2Vzc2luZyBwbGFudAptb25vY2hyb21lIGFuZCByZWQgY29sb3IgYmxlZWQKbGlnaHQgdGhyb3VnaCB3aW5kb3dzCmNsb3VkcyB2aXNpYmxlCnBob3RvZ3JhcGhlZCBvbiBla3RhY2hyb21lIGZpbG0Kb3JuYXRlIHBvcnRyYWl0CmRldGFpbGVkIDogY29ybmVhCmJsb29kYm9ybmUgZGlhZ3JhbXMKYW5jaWVuY3QKbGlnaHQgY2F1c3RpY3MgZWZmZWN0CnRoaWNrIGJyYWlkZWQgYmVhcmQKcGhvdG9yZWFsaXN0aWMgLTIwCmVsZWN0cmljIHNreQphbmNpZW50IGFsaWVuIHBvcnRyYWwKbm9pc2UgZWZmZWN0cyBmaWx0ZXIKY29sb3IgcmljaApkYXJrIG1vdW50YWluCmFuY2llbnQgY3JlYXR1cmUKb24gZGlzcGxheSBpbiBhIG11c2V1bQpkZXNydApuaW50ZW5kbyBjbG91ZHMKaW4gYmxhY2sgYmx1ZSBnb2xkIGFuZCByZWQKZ29kIHJheXMgaW4gdm9sdW1lcyBvZiBmb2cKbG9va2luZyB1cCBwZXJzcGVjdGl2ZQppcmlkZXNjZW50IGFuZCBvcGFsZXNjZW50CmZlYXRoZXIgaGFpciBvcm5hbWVudHMKcmVkIGNsb3RoCnJ1dGtvdnNraQpob3JuZWQKYW5jaWVudCBqYXBhbmVzZSBzYW11cmFpCmFuY2llbnQgbWFnaWNhbCBvdmVyZ3Jvd24gcnVpbnMKaGVtbG9ja3MKc2lnbWEgOCAwIG1tCmFuY2llbnQgcnVpbnMgaW4gdGhlIGZvcmVzdAphbmNpZW50IHNpbHZlciB0b3dlciBvZiB0aGUgbW9vbgppY2UgZmlzaCBzaGFwZQppbmZpbml0ZSBza3kKaGVybyB3b3JsZCBuaW50ZW5kbwplbGRyaXRjaCBiZWluZwphcmNoaXZhbCBxdWFsaXR5IGltYWdlCm9pbCBwYWludCBzdHlsZQphbmRyb2lkIGdpcmwgaW4gZWd5cHRpYW4gcnVpbnMKc3VwZXJwb3AgdWx0cmFicmlnaHQKZ29hdCBib2R5CmFuZHkgbWlsb25ha2lzIGFzIGEgZ29hdApzaW1vbmUgZ3JhY2kKZGlnaXRhbGlsbHVzdHJhdGlvbgphbmdlbCB2ZXJzdXMgZGV2aWwKaGlnaGx5IGludHJpY2F0ZSB3aW5ncyEKcGFsZSBmYWlyIHNraW4KbWV4aWNhbiBzdGFuZG9mZgpjaGFyYWN0ZXIgaGVhZHNob3QgcG9ydHJhaXQKYW5ncnkgYWxpIGtoYW1lbmVpCmNsZWFuZXN0IGltYWdlCmRlbGV0ZSBkdXBsaWNhdGluZyBjb250ZW50CmFuZ3J5IG1hbgpsaWdodCBzb3JjZXJlcgp0dXJudGFibGVzCnN0eWxlIG9mIHN0ZXBoZW4gYmxpc3MKaW50cmljYXRlIGRldGFpbHMgcGhvdG9ncmFwaAp3ZWFyaW5nIGEgbGVhdGhlciB0cmVuY2ggY29hdAphbmltYXRyb25pYyBtYXJrIHp1Y2tlcmJlcmcKYmVhdXRpZnVsIGFuY2llbnQgZ2FyZGVuIGJlaGluZApreW90byBhbmltYXRpb24gcHJvZHVjdGlvbnMKaW5mZXJuYWwgYXJ0IGluIGdvb2QgcXVhbGl0eQpzY2FyeSBwaWN0dXJlIGluIGNvbG9yCmxhcmdlIGhhbGwKam95b3VzIHdpZGUgbWVtb3JhYmxlCmhlZWxzIG9uIGhlciBmZWV0CnBvaW50eSBoYXQKc3VidXJiYW4gbmVpZ2hib3Job29kCmdyZWV0aW5nIGhhbmQgb24gaGVhZApnaGlibGkgaW5zcGlyZWQKZHVyYXJhcmFyYQpnb2t1IGZpZ2h0aW5nIGplc3VzCnNhdHVyYXRlZCBwYXN0ZWwgY29sb3JzCmFuaW1lIGdpcmwgb2YgdGhlIGZ1dHVyZQptYWdpYyBsb25nIGhhaXIKdW5kZXJncm91bmQgZmFjaWxpdHkKd29ybGQgb2YgZmlyZSBhbmQgYmxvb2QKd2l0aCBhIGJyaWdodCBzbWlsZQpvbGQgYm9sdCBhY3Rpb24gcmlmbGVzCmF0c21vc3BoZXJpYwphbmltZSBtYW4KYnJpZ2h0IG5lb24gY29sb3IgcGFsZXR0ZQpzb25pYyBoZWRnZWhvZwpmYW50YXN5LiBnb25kb2xhIGJvYXQKZmluZSBkZXRhaWxlZCBmZWF0dXJlcwpkeW5hbWljIHBvc2UgcGVyc3BlY3RpdmUKbWVkaXVtIGxvbmcgYm9iCndoaXRlIGhhaXIhISEhIQpmcmVuY2ggYm9iCnB1cnBsZSBleWVzISEhCndoaXRlIGhhaXIgY29sb3IKc2t5IGxpbmUKYXRtb3NwaGVyaWMgYW5pbWUKYW5pbWUgc2t5CnZvbGxleSBjb3VydCBiYWNrZ3JvdW5kCnRoaW5rIGluIDMgZApmdXR1cmlzdGljIGdsYXNzZXMgbGVuc2VzCmZsYXQgbXVjaGEKaGVhZCBmdWxseSB2aXNpYmxlCmFuaW1lIHdvbWFuIGhlYWRzaG90IHByb2ZpbGUKc3BvcnRzIGJyYQpjeWJlcnB1bmsgd29tZW4KZmx5aW5nIGJvb2tzCnN0dWRpbyBnaGlibGkgbW92aWUgc2NlbmUKZ2lybCBpbiBhIGRyZXNzCmFuamEgbWlsbGVuCjIgZCBhbmltYXRpb24KYWxlbmEgYWVuYW1pIGFuZCBhcnRnZXJtCmcgNyBzdW1taXQgcHJlc3MgcGhvdG9zCmFub3RoZXIgcGxhbmV0Cmh5cGVycmVhbGlzdGljIGFuYXRvbXkKYW50IGxpZmUKbG93ZXIgYmFjawpkb24gYmx1dGghIQpkaXNuZXkhIQpoaWJiYXJ5ISEKZnVyYWZmaW5pdHkgY29tbWlzc2lvbgphbnRocm9wb21vcnBoaWMgY2F0IG5pbmphCm1lZGlldmFsIGhvbHkgY3J1c2FkZXIga25pZ2h0Cm9jZWFuIHNwcmF5CnNhbHR3YXRlcgp3YXRlciB0ZW1wbGUKaWNvbmljIGRlc2lnbgpjaGluY2hpbGxhIGFuaW1hbApmb3hnaXJsCmZvb2xpc2gKY3Vpc2luZQp3ZXN0ZXJuIGd1bnNsaW5nZXIKY3JvdWNoaW5nIGh1bWFub2lkCmhpcHBpZSBmYXNoaW9uCm1hdHRlIHBhaW50aW5nIGluIGZhbnRhc3kgc3R5bGUKcG9yayBwaWUgaGF0CnJldG91Y2hlZCBpbiBwaG90b3Nob3AKZGlzY28gbGlnaHQKc3R1bmluZyBmYW50YXN5IDMgZCByZW5kZXIKdG9tYnMKYW50aHJvcG9tb3JwaGljIHNsb3RoCnNzYW8gOCBrCmJhZCB2aHMKYW50aWdyYXZpdHkKY3JhenkgZXllcyB3aWRlIG9wZW4KYW50aXRoZXNpcwpzcGFya2xlcyBhbGwgYXJvdW5kCmRvdHMgYWJzdHJhY3QKcmVhbGlzdGljLiA0IGsKYW9jCmFwYXJ0bWVudCBvZiBhbiBhcnQgc3R1ZGVudApza3lsaW5lIHNob3dpbmcKYXBvY2FseXB0aWMgd29ybGQKb21pbm91cyBtaXN0CnJvYiBqYW5vZmYKaXZhbiBjaGVybWF5ZWZmCmFyYW1ha2kgc2hpbmppCmxvbmUgd29sZgp0b3duIGhhbGwKY29sb3JzIHdpdGggZ29sZCBhbmQgZGFyayBibHVlCmJsYWNrIG9uIHdoaXRlIGJhY2tncm91bmQKZmllcnkgZXhwbG9zaW9uCmFyY2FuZSBzdHlsZSB2aWtpbmcgYmF0dGxlc2hpcAp2aW9sZXQgc3Bpa2Ugc21va2UKZGFyayBzb3VsIGNvbmNlcHQKcmVhbGlzdGEKZGlmZmVyZW50IGNsb3NldXAgdmlldwp1bHRyYSByZWFsaXN0aWMgOCBrCjggayAzIGQgb2N0YW5lIHJlbmRlcgpmdWxsIG9mIGNsZWFyIGdsYXNzIGZhY2FkZXMKbWFjcm8gaGVhZCBmYWNlCmFyY2hpdGVjdHVyYWwgbWFzdGVycGllY2UKc2luZ2xlIHBsb3QKYXhvbm9tZXRyaWMKdW5yZWFsIGVuZ2luZSA1IGxpZ2h0aW5nCmtleXNob3QgbGlnaHRpbmcKYXJjcyBvZiBmbGFtZQpsaWdodHNob3cKbWlsdGFyeQpob2x5IHJheXMgb2Ygc3Bpcml0dWFsIGxpZ2h0CmdlbW1hIGNoYW4KYXJpZXMgZmllcnkgcmFtIHRhcm90CmJyb3duIHJlZCBibHVlCjEgOCBjZW50dXJ5Cm1hcmJsZSBzbGFicwptb2R1bGFyIGdyYXBoZW5lCm1ldGFsIGhhbG8KYXJtb3JlZCBjb3JlIDQKbWVkaWV2YWwgcG9zdGVyCmlsbSBhbmQgZGlnaXRhbCBkb21haW4KYW5hcmNobyAtIGNvbW11bmlzdCBob3JkZXMKaGUgaGFzIGEgYmVhcmQgYW5kIGdyYXlpbmcgaGFpcgpuaWNlIGFydAphbmltZSEgNGsKaW50cmljYXRlIDggayByZW5kZXIKYXJ0IGRlY28gYm93bGluZyBhbGxleQp1bHRyYSBoZCA4ayBvY3RhbmUgcmVuZGVyCnJvYWQgdG8gcGVyZGl0aW9uIHN0aWxsZnJhbWUKc3RyYW5nZSBhbmltYWxzCmFydCBtYXN0ZXJwaWNlCnN0b25lcHVuawpjbHViCmZhZGVkIGNvbG9yIHBhbGV0dGUKYmxpenphcmQgd2FyY3JhZnQgY2FyZCBnYW1lCmhlYXJ0aHN0b25lIGNhcmQgZ2FtZQp3YXRlciBmYWlyeQphcnRib29rIGFydHdvcmsKZnVsbCBib2R5IGN1dGUgeW91bmcgbGFkeQp6ZXJnIHN0YXJjcmFmdAp1bHRyYSBkZXRhaWxlZCBjb250ZW50CnZpZXcgZnJvbSB0aGUgZ3JvdW5kCmxvdyB0b25zIGNvbG9ycwpmcm9nZ3kKc2NpZW5jZSBiYWNrZ3JvdW5kCmZsb3dlciBhcnR3b3JrcyBzb2NpZXR5Cm9uZSBjZWlsaW5nIGZhbgpza3kgbXVyYWwgb24gdGhlIHJvb20gY2VpbGluZwpzaG9ydCBnb2F0ZWUKYW5kcm9neW5vdXMgZmFjZQpmdXR1cmlzdGljIGVsZWN0cmljIGd1aXRhcgpuaWdodCBibGFjayBza3kgYmFja2dyb3VuZAphcnR3b3JrIG9mIGEgcGhvZW5peApzdGFuZGluZyBvbiBzaGlwIGRlY2sKc2hvdCBmcm9tIGdhbWUgb2YgdGhyb25lcwpjbG9zZSB1cCBib2tlaCBoaXBlcnJlYWxpc3RpYwpjaHJpc3MgZm9zcwppbiBhIHdvb2RsYW5kIGdsYWRlCmhpa2luZyBpbiByb2NreSBtb3VudGFpbgpoeXBwZXJyZWFsaXN0aWMgMyBkIHNjdWxwdHVyZQpkb3dud2FyZCBnYXplCmxpcXVpZCBnb2xkZW4gYW5kIGJsYWNrIGZsdWlkCmFzaWFuIG1hbgphc2lhbiBvbGQgc2tpbm55IHNjaWVudGlzdAphc3NlbWJsZWQKYmx1ZSB0cmFuc3BhcmVudCBqZWxseQpzdGVwcGUKWyBidWJibGVzCnN0cmFpZ2h0IGdyZXkgaGFpcgpyZWFsaXN0aWMgc29mdCBsaWdodGluZwpwYXluZSdzIGdyZXkgYW5kIHZlbmV0aWFuIHJlZAphc3Ryb25hdXQgY2F0CnJvYiBhbmQgaGlsZGVicmFuZHQKYXN0cm9uYXV0IHN1aXQKcHJlIHJlbmFpc3NhbmNlIGFydApkaWFibG8gMwphbnRhcmN0aWMgbW91bnRhaW5zCnBob3RvIGZyb20gdGhlIG9seW1waWMgZ2FtZXMKc21va2UgZmlyZQphdG1vc3BoZXJpYyBuaWdodApwb3N0LXdhcgpob2xvZ3JhcGhpY3MKc3VwZXIgaGlnaCBkZXRhaWxzCmtpbGwgbGEga2lsbCBpbGx1c3RyYXRpb24KamFwYW5lc2UgZGMgbGl2ZS1hY3Rpb24gbW92aWUKaW5zaWRlIGEgY3Jvd2RlZCBzcGFjZSBzdGF0aW9uCnNpdHRpbmcgYXQgdGhlIGJlYWNoCnNreSB3aXRjaApwaWVyY2VkCmR1c3R5IGxpYnJhcnkKY2FzdGluZyBkZW1vbmljIG1hZ2ljCmluIHRoZWlyIG5vYmxlIG1hbnNpb24KNSAwIHMgYWVzdGhldGljCmJsYWNrIGxhY2UKc291bmR3YXZlCnR3byBsb25nIGJyYWlkcyBibHVlCnB1cnBsZSBqYWNrZXQKYXVndXN0YSBuYXRpb25hbApvdXRiYWNrCnByb2Zlc3Npb25hbCBjb3NwbGF5CnN1cnZlaWxsYW5jZSBjYW1lcmEKbWlkd2VzdCB0b3duCmZsb29kZWQgc3dhbXAKeSAzCmRvbmtleQphdm9jYWRvIGJlaW5nIHN0b2xlbgpwYXJpZXRhbCBhcnQgc3R5bGUKaHVtYW5vaWQgZmlndXJlCmFzIHNlZW4gb24gZ2V0dHkgaW1hZ2VzCmhvbGRpbmcgYSBzd29yZCBhbmQgYSBjaGlzZWwKZHluYW1pYyBhbmdsZXMKZGV0YWlsZWQgc2thdGVib2FyZAp0YXN0ZXMKY3JhZnRzIGFuZCBtb3JlCndlYXJpbmcgYW4gb3JhbmdlIGp1bXBzdWl0Cndhcm0gc3R1ZGlvIGxpZ2h0aW5nCmdyZWcgcnV0a293c2tpIG9jdGFuZSByZW5kZXIKc3RyYWlnaHQgc2hvdAppbiBwcmFpc2Ugb2Ygc2hhZG93cwptZWRpdW0gYmxvbmRlCnNjYXJyeSBidXQgYmV3aXRjaGluZwpsYXJnZXIgdGhhbiBlYXJ0aApmb29kIHN0eWxpc3QKbmVvbiBsaWdodGluZyBhbmQgc3BvdGxpZ2h0cwpyZWQgbW9ub2Nocm9tZQozNW1tIGZpbG0gcGhvdG8KaWxmb3JkIHhwMiBzdXBlcgp3ZWxsIC0gZGVzaWduZWQgZGlnaXRhbCBhcnQKcGhvdG8gMTk5OApvcGVuaW5nIGRvb3IKZGVlcCBkYXJrIHVuaXZlcnNlCnR3aW5rbGluZyBhbmQgc3BpcmFsIG51YmVsYQp3YXJtaG9sZQp6YXJhZ296YSBnaWxiZXJ0byBzb3JlbgpiYWNrZ3JvdW5kIHBhc3RlbApvd2wgd2VhcmluZyBibGFjayBiaWtlciBqYWNrZXQKYmFja3lhcmQgZ2FyZGVuCmVsZWN0cm9uIG1pY3Jvc2NvcGUgaW1hZ2UKY29tcHJlc3NlZApwbGF0aW51bSBwcmludGluZwpjb21meSBjaGFpcnMKZmFtaWx5IGZyYW1lZCBvbiB0aGUgd2FsbApqdW5qaSBpdG8gNCBrCnBzeWNoZWRlbGljIGNvbG9yIHRoZW1lCmFuY2llbnQgc2NpIC0gZmkgY2l0eQppbnRlcnN0ZWxsYXIgaW5maW5pdHkgcG9ydGFsCmdsYXNzIHNrdWxsCndpdGggZ3JleSBza2luCmNvbG9yIHN0dWRpbyBwb3J0cmFpdApiYW5kb2xpZXIKcmVhbGlzdGljIGNvbnRlbnQKY29mZmVlIGFuZCBtdXNpY2FsIGluc3RydW1lbnQKaG9ycm9yIHdhbGxwYXBlciBhZXN0aGV0aWMKYmFwdGlzdGUgZnJvbSBvdmVyd2F0Y2gKYmVhdXRpZnVsIGFuaW1lIHN0eWxlCmNpbmVtYXRpYyByaW0gbGlnaHRpbmcKbWljaGFlbCB2aWNlbnRlCmJhcmNlbG9uYSBpbiAxIDkgMSA4CmJhcmdlbGxvIHBhdHRlcm4KZW5ncmF2ZWQgdmVjdG9yCmFsYnVtIHBob3RvCmNoaXJvcHRlcmEgbm9zZQpsaXphcmQgdG9uZ3VlCmppbSBjYXJyZXkKb3JuYXRlIGdlb21ldHJpYyBwYXR0ZXJucwpibGFjayBzd2FuCmdhcmRlbiB3aXRoIGZsb3dlcnMgYmFja2dyb3VuZApmaW5hbCByZXN1bHQKYmFzaWMgc3RlZWwgc3dvcmQKY2xvc2UgLSB1cCBwcm9maWxlCmxlZHNwYWNlCmZhc2hpb24gb2YgdGhlIHllYXIKYmx1cnJ5IHBob3RvZ3JhcGh5CmZyYW5rIG1pbGxlciBzdHlsZQpjdXQtYXdheQpkcmlmdHdvb2QKcGxhbmV0IGluIHNwYWNlIG92ZXIgdGhlIGhvcml6b24KcG9yY2VsYWluIG9yZ2FuaWMKbmllbGUgdG9yb25pCmRpbSBjb2xvcgpsb3ZlbHkgd29tYW4Kc2VlbiB0aHJvdWdoIGEgbWljcm9zY29wZQpiYXRoaW5nIGluIGEgd2F0ZXJmYWxsCnJlYWxpc3RpYyBhbmltZSBmYWNlCmluIGRldGFpbGVkIHN0ZWFtcHVuayBkcmVzcwpiZWF1dGlmdWwgaGltYWxheWFuIHdvbWFuCmVtbWEgc3RvbmUgZmFjZQpkaWFtb25kcyBhbmQgc2Npc3NvcnMKdmlzaWJsZSByYWluCmJlYXV0aWZ1bCBhZXJpdGggZ2FpbnNib3JvdWdoCmNvcm5yb3dzCm1pZ3VlbCBhbmdlbApzaG9ydCBzcGlreSBibG9uZGUgaGFpcgp3ZWFyaW5nIGEgd2hpdGUgc3dlYXRlcgp0YWdzOiBibG9uZGUgaGFpcgpzYWlsb3IgbW9vbiEhISEhISEhCmxvZ2FuCmN1cmUKY29yYWwgYnJvd24gaGFpcgpyb2xsaW5nIGdyZWVuIGhpbGxzCmJlYXV0aWZ1bCBhc2lhbiBnaXJsCmdsb3dpbmcgLSBpbnN0cnVtZW50cwpncmVlbiBvb3ppbmcgcG9vbCBwaXQKY2xlYW4gbGluZWFydCBhbmQgZmxhdCBjb2xvcgpvY2VhbnNpZGUKZXllIHRhdHRvbwpiZWF1dGlmdWwgYmx1ZSBoYWlyZWQgZ2lybAp3aGl0ZSEgdGFuayB0b3Agd2l0aCBhIHByaW50CmRyZXNzIGxpa2UgdGFsaWJhbgpyaWZmbGUgb24gY2hlc3QKYmFsbGV0IHBvc2UKc2VycGVudGluZSBwb3NlCnVsdHJhIC0gZGV0YWlsZWQgYW5kIGludHJpY2F0ZQpiZWF1dGlmdWwgd2hpdGUgZ2xvd2luZyBleWVzCmJlYXV0aWZ1bCBjaXR5IGJsYWNrIHdvbWFuIG9ubHkKc2FjcmVkIHNrdWxscwpjb21iYXQgYXJtb3IKZmlzaGluZyBib2F0CmFuZ2lld29sZgphbWJpZW50IGRpZmZ1c2lvbgppbnRlcnN0ZWxsYXIgaHlwZXIgcmVhbGlzbQpjdXRlIHNtaWxpbmcgZmFjZQphdHRyYWN0aXZlIGZhY2UgYW5kIGJvZHkKNCBjb2xvcnMKY3V0ZSBoYXBweSBmYWNlCmNlbGwgc2hhZGluZy4gYnV5IG5vdyEgKCByYiA2IHMKYmVhdXRpZnVsIGN5Ym9yZyBwcmllc3Rlc3MKNCBrIGNpbmVtYXRpYyBwYW5vcmFtaWMgdmlldwpmdWxsIG9iamVjdCBpbiBtaWRkbGUKY29sb3VyZnVsIGxvbmcgaGFpcgp0cmF2ZWxsaW5nIHRocm91Z2ggbWlzdHkgcGxhbmVzCmNhcHliYXJhIHBpcmF0ZQptaW5pbWFsaXN0aWMhISBzaW1wbGUKY29uY2VwdCBhcnQgc2tldGNoCndlYXJpbmcga2ltb25vIGFybW9yCnNob3VsZGVycyB1cApmdXR1cmlzdGljIHZlaGljbGUKaWxsdXN0cmF0aXZlIHN0b3J5IHRlbGxpbmcKbWlzdHkgYWxsZXl3YXkKYmxhY2sgc2hpbnkgZXllcwp3aGl0ZSBzYXJvbmcKYmVhdXRpZnVsIGZlbWFsZSBhc3Nhc3NpbgpibGFjayBsYXRleAphcnQgbm92ZWF1IHBhaW50aW5nCmNvdmVyZWQgaW4gZnVsbCBsZWF0aGVyIGFybW9yCmV5ZWJyb3dzCmF0ZWxpZXIKZ29sZGVuIHRyaW1zCmZpbGlncmVlIGpld2VsbGVyeQphc2NlbmRpbmcgZm9ybSB0aGUgc2t5CmRhdWdodGVyIG9mIGRlYXRoCjMgZCByZW5kZXIgYmVlcGxlCmdob3N0YnVzdGVycyB0cmFwCmZpbmUgbGluZSBkZXRhaWwKaWNlIGNyZWFtIGNvbmVzCnRhcGVzdHJpZXMgaGFuZ2luZyBmcm9tIGNlaWxpbmcKdmVzcGVyIGx5bmQgZnJvbSBjYXNpbm8gcm95YWxlCnNvZnQgZmVhdGhlcgpiZWF1dGlmdWwgZnJvZwpzdGVhbXB1bmshIGZpY3Rpb24KZ2xvd2luZyBtZWNoYW5pY2FsIGV5ZQpjZWxhZG9uIGdsYXplCmV4dHJlbWVseSBjbGVhbiBsaW5lcwpzeW50aGV0aWMgcG9seW1lciBwYWludCBvbiBsaW5lbgpibGFjayBtaXN0CnZlcnkgY3V0ZSBmZWF0dXJlcwptb2JldXMKZGV0YWlsZWQgY2hhcmFjdGVyIGFydAp1bmRlcndhdGVyIGdsaXR0ZXJpbmcgcml2ZXIKY3liZXJwdW5rIGNpdHkgaW4gYmFja2dyb3VuZAptYWxpY2lvdXMKY2FyIHdyZWNrCmxpZ2h0IHBpbmsgaGFpcgpsb25nIGhhaXIgd2l0aCBmdWxsIGJhbmdzCmZ1bGwgaGVhcnQgLSBzaGFwZWQgZmFjZQp0ZW1wbGF0ZQp0ZWFsIGFuZCBwaW5rCmJlYXV0aWZ1bCBqdW5nbGUgbGFuZHNjYXBlCnVsenphbmcKYmVhdXRpZnVsIGxha2UKYmFyZSBiYXJrCmJlYXV0aWZ1bCBsaXR0bGUgZ2lybApiZWF1dGlmdWwgbWFsZSBmYWNlCnBlcmZlY3QgcG9ydHJhaXQgY29tcG9zaXRpb24KZnVsbCAtIGJvZHkgdGF0dG9vcwpsYXZhbmRlciBhbmQgeWVsbG93IGNvbG9yIHNjaGVtZQpibHVlIGZhY2UgdW5yZWFsIGVuZ2luZQpsdW1pbm91cyBibGFjayBob2xlIHBvcnRhbApkcmFtYXRpYyBzdW5yaXNlCnRlbGVraW5lc2lzCnNwbGFzaCBzY3JlZW4Kc2l0dGluZyBhY3Jvc3MgdGhlIHJvb20KZHJpbmtpbmcgYSBzdHJhd2JlcnJ5IGljZWQgbGF0dGUKYnVmZmFsbwpweXJhbWlkcyBpbiB0aGUgZGVzZXJ0CnBldGVyIG11cmJhY2hlcgpzeW1ldHJ5ISEKcmFpbmluZyBhdCBuaWdodApzZW5zZSBvZiBwZXJzcGVjdGl2ZQpoaXMgYXJtcyBzcHJlYWQKZmFjZSBsb29raW5nIHNreXdhcmQKcmVhZHkgdG8gZmx5CndoaXRlIHdpdGggYmxhY2sgc3BvdHMKamV3ZWwgZmlzaGVzCnRlZXRoIGJhcmVkCndoaXRlIGFuZCBibGFjayBjbG90aGluZwp0aHVuZGVyICYgbGlnaHRuaW5nCmxhc3QgcGhvdG8gZXZlciB0YWtlbgphcG9jYWx5cHRpYyBldmVudApvbmUgZ3JlZW4gZXllIGFuZCBvbmUgYmx1ZSBleWUKc2hpbmluZyBzaWx2ZXIga2F0YW5hIHN3b3JkCmh1Z2Ugb3ZlcnNpemVkIHN3b3JkCmFuaW1lIHNldCBzdHlsZQptb2Rlcm4gc3RyZWV0CnBlcmZlY3QgZXllCmJlYXV0aWZ1bCBwaW5rIGxpdHRsZSBnaXJsCm1hcnkgamFuZQpvbGl2ZSBncmVlbiBzbGFja3MKc29mdCBzaGFwZXMKdGhlIDUgdGggZWxlbWVudAp0ZWNobm9sb2dpY2FsIHNpbmd1bGFyaXR5Cm5lZ2F0aXZlIG5vIG5vdCBtb25hIGxpc2EgcG9zZQplcGljIHJwZyBwb3J0cmFpdAphbmtoIHN5bWJvbCBhcm91bmQgdGhlIG5lY2sKb2xkIGJvb2sgY2hhaW5lZCB0byB0aGUgd3Jpc3QKbmV1cm8gd2ViCm5lb24gYmFyIGxpZ2h0cwp5ZWxsb3cgYmFja2dyb3VuZCBiZWFtCm5lYXRseSBjb21pbmcgb3V0IG9mIGhlciBoZWFkCmdsb3Jpb3VzIHN1cGVybmF0dXJhbCBwb3dlcgpteXN0aWNhbCBwdXJpdHkKbGFyZ2UgZWxlY3RyaWNhbCBnb2xkIHNwYXJrcwpuYXR1cmFsIGluZG9vciBsaWdodGluZwp3ZWFyaW5nIGEgbWVsb24KdGl6aWFubyB2ZWNlbGxpCm1hbmdhISEhCm1hamVzdGljIGR1bmVzCmRlYWQgc29sZGllcnMKcmFpbnkgY3liZXJwdW5rIGNpdHkKYmVhdXRpZnVsIHNjYXJ5IGZlbWFsZSB2YW1waXJlCmhhdmUgYSBzZW5zZSBvZiBkZXNpZ24KcGVhc2FudCBkcmVzcwpiZWF1dGlmdWwgc21pbGluZyBmYWNlCnJldHJvIG5pbnRlbmRvIGJpdG1hcCBwaXhlbCBhcnQKZHJhbWF0aWMgYmFja2xpdCBsaWdodGluZwp2b2x1bWV0cmljIGxpZ2h0aW5nIGVmZmVjdApiZWF1dGlmdWwgdGFuIG1leGljYW4gd29tYW4Kc3RlcGhlbiBraW5nIGF0bW9zcGhlcmUKYW50YXN5IGNoYXJhY3Rlcgp3b21hbiBib2R5CmdsYXNzIGhlbG1ldHMgYW5kIGRvdmUgd2luZ3MKb24gbWFob2dhbnkgZGVzawpqZWFuIGdpcmFyZAptYXR0ZSBmcmVzY28KYmxhZGUgcnVubmVkIGNvbG9yIHBhbGV0dGUKdm9sZWdvdgpyb3VuZGVkIGZhY2UKbW9zcXVlIGludGVyaW9yCmZldyBuZW9uIHNpZ25zCmJlYXV0aWZ1bCB5b3VuZyBtYW4Kc2lnbmlmaWNhbnQgcGViYmxlcyBib3VuZGFyaWVzCnNob3dpbmcgYSBzY3JlZW4gcGxheWluZyB0ZXRyaXMKaW4gYSB1bmRlcndhdGVyIGhvcnJvciBzY2VuZQpnbGl0dGVyeSBzaG9ydCBibGFjayBoYWlyCmZ1dHVyaXN0aWMgbWVjaGFuaWNhbAp0cmFuc2Zvcm1lcnMgdGVjaApiZXJyeSBqdWljZQp2YXNlIHdpdGggZmxvd2VycwptYWdpY2FsIHNwYXJrcwpmb2N1cyBvbiBmdWxsIC0gYm9keQpwaW5vY2NoaW8gbm9zZQpiZWhvbGRlcgpiZWxsYSB0aG9ybmUgYW5kIG1lZ2FuIGZveApoaWdoZXIgZGV0YWlsZWQKY3liZXJuZXRpYyBjaXR5IGJhY2tncm91bmQKYmVuZWF0aCB0aGUgc3RhcnMKdW5kZXJ3b3JsZCBib3NzCmFydGdlcm0gYW5kIGJyaWFuIGZyb3VkCnNlcnBlbnRpbmUgY3VydmUhISEKbWFyaWp1YW5hIG9yZ2FuaWMgcGFpbnRpbmcKZ2FtZXBsYXkgc3RpbGwKYmVyc2VyayBza3VsbGtuaWdodCBibGFjayBhcm1vcgpiZXN0IHdlYXRoZXIKYm9obyBuZXV0cmFsIGNvbG9ycwpncmVnIHJ1dGtvd3NraS4gY2luZW1hdGljCnNlcmVuZSBvdmVyY2FzdCBhdG1vc3BoZXJlCm15IHNvbiEgdGhlIGphd3MgdGhhdCBiaXRlCnJveWFsIGludGVyaW9yCmFsaWVuIHN0eWxlCnN0dWRpbyBnYWluYXggaWxsdXN0cmF0aW9uCjQgayBjaW5lbWF0aWMKc21hbGwgc3RhcnNoaXAgbmVhcgp0ZXJyaWZ5aW5nISEhCm1vbm9jaHJvbWUgbG9tb2dyYXBoeQpob3JyaWZpYyBzZW50aWVudCBtZWF0bG9hZgpmaWxtIGNvbG9yCm5vIGdyaWQgbGluZXMKZGFkZHkgZW5lcmd5CmhpZ2ggcXVhbGl0eSBtb3ZpZSBzdGlsbAoxIDkgNyAwIHNjaWVuY2UgZmljdGlvbiBtb3ZpZQp3ZWFyaW5nIGZ1bGwgcGxhdGUgYXJtb3IKZnJvbnQgb24KZnVsbCBibG9vZHkgbW9vbgpiaWxsIGdhdGVzIGluIG92ZXJ3YXRjaApvdmVyd2F0Y2ggZmFuYXJ0CmJhdGhpbmcgc3VpdApzcGhpbnggY2F0CmRpZmZlcmVudGlhbCBncm93dGgKaW50cmljYXRlIGNvbG9yZnVsIG1hc3RlcnBpZWNlCmdob3VscwpiaW9tZWNoYW5pY2FsIGNvcmFscwpiaW9tZXRyaWMgaHVtYW5vaWQgcm9ib3QKamltaSBoZW5kcml4IGZ1bGwgYm9keSBzaG90CmZpc2ggc2tpbgpvbGQgZGhha2EKYmFkIHBob3RvY29weQpiYWQgcHJpbnQKbW9ub3JhaWwgc3RhdGlvbgp1bmZvcmdpdmVuCnVub2JzdHJ1Y3RlZCByb2FkCmRlbW8gc2NlbmUKYmx1ZSBvciByZWQKYmxhY2sgbWFya2VyCm1hemUtbGlrZQptaWNyb2NoaXAgbGVhdmVzCmZyYW5rIG1pbGxlciBjcmVhdGl2ZSBkZXNpZ24Kb3Zlcmdyb3duIHdpdGggZnVuZ2hpCmJsYWNrIGFuZCB3aGl0ZSBwYWludApsb3RzIG9mIGxlYXZlcwpsZXZpdGF0aW5nIHR3aW4gbnVucwp3cmVzdGxlciBodWxrIGhvZ2FuCmx1c2ggYnJvb2tseW4gdXJiYW4gbGFuZHNjYXBpbmcKZGFwcGxlZCBnb2xkZW4gc3Vuc2V0CmdyZWNvIHJvbWFuIHN0YXR1ZQpyZWQgZ3JpZApoZWFydGhzdG9uZSB3ZWFwb24gYXJ0CmZpCmNoaWFyb3NjdXJvIHBvcnRyYWl0CmZhbnRhc3kgYW5kIGNvc21pYyBob3Jyb3IgbW92aWUKZ29sZGVuIGNvbGxhcgp3aXRoIGhlYWRwaG9uZXMKbG8tZmkgaWxsdXN0cmF0aW9uIHN0eWxlCmJsYWNrIGdsb3NzeSB4ZW5vbW9ycGgKYmxhY2sgZ29sZCBzaWx2ZXIKY3JvdyBwb3J0cmFpdCEhISEhCmJsYWNrIGluayByb3VnaCBza2V0Y2gKdG9vdGggd3UgOiA6IHF1aXhlbCBtZWdhc2NhbnMKb2xpdmlhIGtlbXAKc2hvZG8Kc3R5bGl6ZWQgbGlxdWlkIHNtb2tlIHR3aXN0aW5nCnN0aWxsIGluIHBhY2thZ2UKaW50ZW5zZSBibGFjayBleWVzCnRoaW4gY29ycHNlCnJpZ2lkCm1pbmltYWxpc3QgKSApICkgKSApCmRyYW1hdGljIGJsYWNrIHNtb2tlIGV2ZXJ5d2hlcmUKZGFyayBmdXR1cmUgYXRtb3NwaGVyZQppbmRpdmlkdWFsCmdyZXkgZm9yZXN0IGJhY2tncm91bmQKdml0b3J1Z28KYmxlbmRlciBkb251dAp1c2VkIHRhcGUKZnJhbmNpcyAtIGJhY29uCmJsb25kZSBhbmltZSBnaXJsIHdpdGggbG9uZyBoYWlyCnNpdHRpbmcgaW4gZGVhbidzIG9mZmljZQpudWNsZWFyIGZhc2hpb24KYmVuamFtaW4gdm51awpibG9vZCB0ZW1wbGUKbW92aWUgZmlsbSBzdGlsbAphcnRvYXN0OHAKdmlld3MgZnJvbnQgc2lkZSBhbmQgcmVhcgpzbmFrZSBib2R5LiBtYW55IGxhcmdlCmJsdWUgbGlxdWlkIGFuZCBzbm93CnNoaWtpc2hpCmRvdWJsZSB2ZXJ5IGxvbmcgYnJhaWRzIGJsdWUKZXZpbCBjcmF6eSBsYXVnaApmbG9hdGluZyBzaWdpbHMKc3Vic3RhbmNlIDMgZAo0IGsgYXN5bW1ldHJpY2FsIHBvcnRyYWl0CmphbWllIGhld2xldApwcmVjaXNlIGxpbmVzCmludHJpY2F0ZSBnb2xkIGhlYWRkcmVzcwpwYW56ZXIKZGFyayBibHVlIGFuZCBibGFjawptb29keSBncmluZGhvdXNlCmJvYiByb3NzIGRyZXNzZWQgYXMgYSBzdXBlcmhlcm8KY29uam9pbmVkIHR3aW5zCmJvZHkgbW9kaWZpY2F0aW9uCm5lb24gYXJtb3IKcG9saWNlIG9mZmljZXIKc292aWV0IHByb3BhZ2FuZGEgcG9zdGVyIHN0eWxlCnZpY3RvcmlhbiBhbGNoZW1pc3RzCndldGEgZGlzbmV5Cm5lb24gY2l0eXNjYXBlIGJhY2tncm91bmQKb3Zlcmdyb3duIGl2eSBwbGFudHMKYm9yYXQgaXMgYSBjaGltcAoxOTc4IGNvbG9yIGZlbGxpbmkgZmlsbQoxOTgyIGNvbG9yIGZlbGxpbmkgZmlsbQpjb2xvcnMgd2hpdGUhIQpib3JvbWlyIGluIGFuIDgwJ3MgYW5pbWUgd29ybGQKYm9zdG9uIGNlbHRpY3MKbm9iZWwgcHJpemUKYmlvbWVjaGFuaWNhbCByYWlscm9hZAppbiAxIDcgNiA3CmF0aGxldGljIHRhbGwgaGFuZHNvbWUgZ3V5cwphcmNod2l6emFyZCBpbiBhIGhhdApib3lzCmZpc2ggZmFjZQpjYXVnaHQKcmVhZGFibGUKYnJhaW4gaW4gYSB2YXQKYnJhaW5ib3cKOCAwIHMgZmlsbQpiYWtpbmcgZnJlbmNoIGJhZ3VldHRlCnN1cnJlYWwgZXhpc3RlbnRpYWxpc20KYnJlYWtmYXN0IGF0IGxhcyBwb3phcwp0aGUgbmV3IGxvdmUKYnJlYXRodGFraW5nIGhpbWFsYXlhbiBsYW5kc2NhcGUKYm9va3MgZmx5aW5nIGFyb3VuZApicm93bnkKY2hhaW5zIGJyb2tlbiBvbiBoYW5kcwpzaG9ydCBwZXJzcGVjdGl2ZQpicmlkZSBvZiBmcmFua2Vuc3RlaW4KaWNlIGJsdWUgZXllcwp3YXgKb2xkIGFwYXJ0bWVudAphYnVzZWQKZXBpYyBza2llcwp0d28gbW9kZWxzIGluIHRoZSBmcmFtZQpibGluZyBhaXJwb2RzCmNvbHVyZnVsCmZhbW91cyBwYWludGluZwpibGFjayB0YW5rdG9wCmJ1bm55IHN1aXQKYnJpdHRsZS4gaGlnaGx5IGRldGFpbGVkCmlycmVndWxhcgpicm9rZW4gaGVhcnQKbW91bGluIHJvdWdlIQpkeW5hbWljIGFuZCBkb21pbmFudApicm93biBiZWFyCmJyb3duIGFuZCBnb2xkIGNvbG9yIHBhbGV0dGUKZW1icm9pZGVyZWQgc2hpcnQKZ2FycnVsdXMgZ2xhbmRhcml1cwp0aWdodCBibHVlIGplYW5zIGFuZCBjb29sIHNob2VzCndhbGtpbmcgaW4gYSBjYXN0bGUKMjEgeWVhcnMgb2xkCjE2NSBjbSB0YWxsCmdpcmwgd2l0aCB3aGl0ZSBleWVzCnJ1bmRvd24gYnVpbGRpbmdzCmF0cml1bQpidWJibGUgYmF0aApob2JiaXRzCmRldGFpbGVkIHRyZWVzIGluIGJsb29tCmpld2VsZWQgb3JuYXRlIGxlYXRoZXIgYXJtb3VyCmNvbW1pbmlzbQpiaW9zaG9jayBpbmZpbml0ZSBzdHlsZQp0aGUgdmljdGltIGlzIGluIHRoZSBjZW50ZXIKc29mdCBhbmQgZmx1ZmZ5CmJ1bmtlcgpvY3RhIGNvcmUKY29sb3JmdWwgaGQgcGljdXJlCm5ld3MgZmVlZApmYXNoaW9uYWJsZSBmdXR1cmlzdGljIHdvbWFuCnVuaXF1ZWx5IGJlYXV0aWZ1bApidXR0ZXJmbGllcyBpbiB0aGUgZm9yZWdyb3VuZApzdW5mbG93ZXJzIGluIHRoZSBiYWNrZ3JvdW5kCjM1bW0gOGsgcHJvZHVjdCBwaG90bwpibG9vZCBzbWVhcgptb251bWVudGFsIGdpYW50IHBhbGFjZQpjbG9zZSB1cCBkc2xyIHN0dWRpbyBwaG90b2dyYXBoCndpbGxvdyB0cmVlIGFuZCBoaWxsCmZvcmVib2Rpbmcgc2VhCmFsaWVuIHNwYWNlIGtuaWdodApzdWNoIGFzIGJhY3RlcmlhCmZvb2QgcGFydGljbGVzCiYgZXZlbiBhIGxpdHRsZSBtb3VzZQp3aGljaCBhcmUgYWxzbyBza2VsZXRhbCAmIGZyYWlsCmRldGFpbGVkIHBhdHRlcm5lZCBiYWNrZ3JvdW5kCm9wZW4gcGFsbQpndGEgNSBsb2FkaW5nIHNjcmVlbiBwb3N0ZXIKYWlyYm5iCnNpZGUgb2YgaGVhZApjeWJlcmRlY2sgY29tcHV0ZXIgdGVybWluYWwKa2lkcyBkcmF3aW5nCmJsdWUgYW5kIHJlZCB0b25lcwprb2RhayBla3RhY2hyb21lIGUgMSAwIDAKMSA5IDYgMCBzIHNvdmlldCBwb3N0ZXIKYW5pbWFsIC0gc2hhcGVkIGNha2UKcmVhbGlzdGljIHJlc3RvcmVkIGZhY2UKaW5zYW5pdHkgOjcKc2lsaG91ZXR0ZSA6NwpzdHlsZSBvZiB0YWthc2hpIG11cmFrYW1pCmNhbXAgaGFsZi1ibG9vZAphbGNvaG9sIGluayBwYWludGluZwpqZXQgZmlnaHRlcnMKbG9uZyBzaG90IGRyYW1hdGljIGxpZ2h0aW5nCnZvbHVtZXRyaWMgZm9nIHJlc29sdXRpb24Kc2hhZG93IHJlc29sdXRpb24KdGV4dHVyZSBxdWFsaXR5IGhpZ2gKbW9vZHkgZW1vdGlvbmFsIGNpbmVtYXRpYwpjYW5uYWJpcyAtIHNhdGl2YSAtIGZpZWxkCmdvdXJtZXQgbWljaGVsaW4gcmVzdGF1cmFudApjb250cmUgam91cgpiaXJkIGZseWluZyBvdXQgb2Ygd2F0ZXIKYmxvdGNoIG9mIHNwcmF5IHBhaW50IGluIGNvcm5lcgpjb2xkIHRvbmUKZXllYmFsbHMgaW4gdGhlIHdhbGxzCnBob3RvcmVhbGlzdGljIGNnaQpha2lyYSB0b3JpeWFtYSBzdHlsZQpvIHBhdHRlcm4KY2FyIGNyYXNoIHRlc3QKY2FyIGVuZ2luZSBjb25jZXB0CmNvbWljIGNhcmQgc3R5bGUKY2FyIGdhcmFnZQpjYXIganVtcGluZwpjYXIgb24gaGlnaHdheQpjcm93bmVkCmxhdXJlbCB3cmVhdGggb24gaGlzIGhlYWQKY3V0IG91dCBvZiBjYXJkYm9hcmQKc2ViYXN0aWFuIGtydWdlcgpjYXJtaWxsYSB2YW1waXJlCmNhcm5pdm9yZSBkaW5vc2F1cgpjdXRlIHN0eWxlIGdhcmRlbgpiZWVmCmNhcnRvZ3JhcGh5IG1hcCBhcnQKdmludGFnZSB0eXBvZ3JhcGh5Cmh5cGVycG9wIGFlc3RoZXRpY3MKc3dlZXQgY29sb3Igc2NoZW1lCmNhcnRvb24gc3RyaXAKb2N0YW5lIHJlbmRlciAtYXIgMTY6OSBoIDEwMjQKZGFtaWFuIGtyeXp3b25vcwplZGUgbGFzemxvCmZ1bGwgYm9keSBjZ3NvY2lldHkKMyBkIGxvZ28KYmxhY2sgb24gd2hpdGUgcGFwZXIKY2Fzc2FuZHJhIGNhaW4gaW4gc2F0aW4Kd2VhcmluZyB0YW5rIHRvcApncmVlayBub3NlCmVsYWJvcmF0ZSBkaWdpdGFsIGFydApibGFjayBmb2cKY2F0IC0gc3VwZXJtYW4KY2F0IFsgcGxheWluZyBhIHBpYW5vIF0KWyBzeW50aHdhdmUgYXJ0IHN0eWxlIF0hIQoocGluayBjb2xvcnMpCnZvbHVtZXRyaWMgZnVyCmNhdCBwaG90bwpjYXQgZ2lyYWZmZSBoeWJyaWQKY2F0IGluIHNwYWNlCmNhdCBwbGF5aW5nIGx1dGUgaW4gdGhlIGdhcmRlbgpjYXQgcG9ydHJhaXQKY2FwaXRhbCBwbGF6YQpiYXNpYwphbGwgcmlnaHRzIHJlc2VydmVkCmNhdGUgYmxhbmNoZXQKYmx1ZSBzaWJlcmlhbiBmb3Jlc3QgY2F0CmRlc3BlcmF0aW9uCnZvZGthCnRyYWRpdGlvbmFsIGNoaW5lc2UgaW5rIHBhaW50aW5nCmN1dGUgZWFycmluZ3MuIGhpZ2hseSBkZXRhaWxlZApsdW5jaCB0aW1lIG9uIHVyYW51cwpicmlnaHQgY29sb3JzIHVsdHJhd2lkZSBsZW5zCmxvbmdib3cKY2xlYXIgc3ltbWV0cmljYWwgZXllcwpkZXNlcnQgd2l0aCBjaXR5IGluIHRoZSBza3lsaW5lCmhhbGYgLSBjbG9zZWQgZXllcwpjZWxsIHNoYWRlZCBhZHVsdCBhbmltYXRpb24KY2VudGVyZWQgZWx2ZW4KYXR0cmFjdGl2ZSBzY2kgLSBmaSBmYWNlCjhrIGhkciBkdXNrIGxpZ2h0CmxpZ2h0IGJvaG8gY2FycGV0CmZvcmVncm91bmQKaGFubmFoIGFmIGtsaW50Cmh1bnRlciBleWVzCmNoYW9zIG5pZ2h0bWFyZSDinYTvuI8gYW1vdXIKZGFya25lc3Mg4p2E77iPIO+/ve+4jyB0YXhpZGVybWV0cm9pZApjaGFvcyBuaWdodG1hcmUg4p2E77iPIGFtb3VyIHZlbm9tCjQgayAtIGggNiA0IDAKa2FueWUKbWFsZSBoZXJvCmhhaXIgdGllZCB1cCBpbiBhIGJ1bgp3ZWFyaW5nIGJvb3RzCmh5dW5nIC0gdGFlIGtpbQp3ZWFyaW5nIGEgcGluayByb21hbnRpYyB0dXR1CnN1cGVyLWhlcm8gZ2lybAp0b3AgZG93biBjYW1lcmEgYW5nbGUKYXQgYmVhY2ggYXQgc3Vuc2V0CmNvbWJhdCB2ZXN0CjIgZCBjb25jZXB0IGFydCBoZWFkIG1hY3JvIHNob3QKc2hhcGVzaGlmdGVyCmNoYXJhY3RlciBjb25jZXB0IG1vZGVsCm1lZGlldmFsIGQmZCBtb29kCmZlbWFsZSBsb3JkIG9mIGNoYW5nZQpwaWVyY2luZyBicmlnaHQgYmx1ZSBleWVzCnRyYW5zZm9ybWVycyBmYWxsIG9mIGN5YmVydHJvbgpyb2JvdCBtYWRlIG9mIHRydWNrIHBhcnRzCnNjb3JuCndpdGggZ29yZ2VvdXMgZGV0YWlsZWQgZXllcwp0cmVuZGluZyBvbiBwaXhhcnQKbWluaW1hbCBjbG90aGluZwpibHVlIHNraW50aWdodCBjbG9zZWQgbG9uZ2NvYXQKdW5iZWF0YWJsZSBxdWFsaXR5CmNhbmR5IGdpcmwKc2tvdHRpZSB5b3VuZwp2aHMgZGlzdG9ydGlvbnMKc2NyZWVud3JpdGVyCmZ1bGxib2R5IGR5bmFtaWMgcG9zZXMKd2lkZWxlbnMKYXZhbnQgZ2FyZGUgc3VwZXJtb2RlbAp2ZW50cmlsb3F1aXN0IGR1bW15Cm1lZGlldmFsIHdlYXBvbgpjaGVlc2VidXJnZXIKaHViYmxlIHNwYWNlIHRlbGVzY29wZQpmYXVzdG8gZGUgbWFydGluaQpjaGVmIHNhaXRhbWEgb25lIHB1bmNoIG1hbgpkcmVzc2VkIGFzIGEgcGFzdHJ5IGNoZWYKYmlvcHVuayBzdHlsZQpzYWFkYW5lIGFmaWYKY3liZXJwdW5rIGNvbWljIGNvdmVyIGFydApmdXR1cmlzdGljIHBhbGFjZQpjaGVzdCB1cCBidXN0IHNob3QKY2hpY2tlbiBkcmVzc2VkIGFzIGFuIGlubWF0ZQpjb2xvdXIgcHJpbnQKc2hpZ2Vub3JpIHNvZWppbWEgaWxsdXN0cmF0aW9uCmNoaWVmIGtlZWYKZXJuc3QgaGFla2wKY2VsZWJyYXRpbmcgYSBiaXJ0aGRheQpjeWJlcnB1bmsgZWxldmF0ZWQgdHJhaW4KcmVhbGlzdGljIHdvb2Qgc3dhbXAKcG9tcG91cwpzdGlja2VyIC0gc3ZnCmNocmlzIGV2YW5zIHBlZWtzIG91dCBvZiBhbiBlZ2cKYnViYmxlcyDigJ0KYmxhY2sgcmVkIHdoaXRlIGNsb3RoZXMKc2hhZG93IGhhcnNoIGxpZ2h0cwpnYW1lcGxheSB2aWRlbwpvcGVuZWQgZHJlc3MKcnVubmluZyBzZXF1ZW5jZQpoZWF2eSBncmVlbgpiaWcgbGVhdmVzIGFuZCBsYXJnZSBkcmFnb25mbGllcwpwcm9tZXRoZXVzIGFsaWVuIGVuZ2luZWVyaW5nCmJlYW1pbmcgc2hpbmluZyBsaWdodApkb2xsYXIgYmlsbHMgZmxvYXRpbmcKbGFyZ2UgZm9yZWhlYWQKZWxlZ2FudCBzbW9vdGggc2lsdmVyIGFybW9yCmtpc3NpbmcgdG9nZXRoZXIgY3V0ZWx5CjIgNCBtcApkcmFtYXRpYyBncmV5IHNreQpncm91cHMgb2YgaGFwcHkgcGVvcGxlCmxlZCBnbG93aW5nIHB1cnBsZSBleWVzCmJlYXV0aWZ1bCBvY3RhbmUgcmVuZGVyCmNpbmVtYXRpYyBtaW5lY3JhZnQKd29ybGQgZW5kaW5nIG51a2UKYnVzdGxpbmcgd2l0aCBwZW9wbGUKbW9za3ZpY2gKY3J0IHR2IG1vdW50ZWQKaW4gY2xhc3NpYyBkaW5lcgpvbmUgY2FyCm1pZCBmYWxsCmxhbmRmaWxsCmZvcmVzdCBwaW5rIGZvZyBwbGFuZXQKaHlwZXIgZGV0YWlsZWQgYW5kIGludHJpY2F0ZQoxMG1tIGZpc2hleWUKaGFuZHNvbWUgc3R1bm5pbmcgcmVhbGlzdGljCndhcmZyYW1lIGhvdW5kIGFydApibGFjayBvdmVyc2l6ZWQgY2xvdGhlcwpzdG9ybXkgY2xvdWRzIG91dGRvb3IKc29mdCBibHVyIG91dGRvb3IgYmFja2dyb3VuZApzd2lybHkgYm9rZWgKbG9zdCBoaWdod2F5CnRpbnRlZCBjb2xvdXJzCmdyYXBoZW5lCmxlYXRoZXIgc3RyYXBzCmFuYXRvbWljYWxseSBjb3JyZWN0ISEKcGhvdG9ncmFwaHkgYXdhcmQgcGhvdG8Kc2lkIG1laWVyCnRlcnJhY290dGEKdmFtcGlyZSB0aGUgbWFzcXVlcmFkZQp2aXZpZCBzdHVkaW8gbGlnaHQKc21vb3RoIGhhaXIKd2luZCBpbiBsb25nIGhhaXIKbGVnZW5kYXJ5IGl0ZW0KZ3JhaW55IGJsYWNrIGFuZCB3aGl0ZSBmb290YWdlCmN5YmVyIGZ1dHVyZSBqYWNrZXQKY2xlYW4gYmxhY2sgYW5kIHdoaXRlIHByaW50CndpbGQgd2VzdCBzZXR0aW5nCmF1dG8gYW5kIGRlc2lnbiBtYWdhemluZQpjYXIgc2tldGNoCmluIHN0eWxlIG9mIGFwZXggbGVnZW5kcwpjbGVhciBwb3J0cmFpdCBvZiBlbW1hIHdhdHNvbgpjbGltYmVyCmRhcmtzaWRlcnMgc3R5bGUKbWluaW1hbGlzdGljIGlsbHVzdHJhdGlvbgppbiBzdHlsZSBvZiBwb3AgLSBhcnQKcHVibGljIGNvbmRlbW5lZApyb2FtaW5nIGVudGVydGFpbmVycwpqYXBhbiBtb3VudGFpbnMKYmx1ciBjaW5lbWF0aWMKc2hvcHBpbmcgY2FydHMgZnVsbCBvZiBncm9jZXJpZXMKMSA5IDMgNAp0cmkgLSB4IDQgMCAwCmNvbG9yZWQgbWFya2V0IHN0YW5kCnN1biAtIHJheXMgYmVhbXMKYWxleGFuZHJpYSBvY2FzaW8gLSBjb3J0ZXoKMSA4IDQgOApuZXV0cmFsIHNreQpwbGFpbiB1bmlmb3JtIHNreQpwdXJwbGUgdG9wCjUgNCBzCmdsb3dpbmcgcmV0aW5hcwpjbG9zZSB1cCBmYWNlIGZlbWFsZSBwb3J0cmFpdApzYW5kIGRlc2VydAplZGl0b3JpYWwgb2YgZGlvciBtYWdhemluZQpzaGFycCBkZXRhaWxlZCByZWZsZWN0aW9ucwpjbG9zZSB1cCBoZWFkIHNob3QKeW91IGxvb2tpbmcgaW50byB0aGUgbWF3CnRoaW4gZG9mCnd3IDIgaGlzdG9yaWNhbCBwaG90b2dyYXBoeQphbWJpZW50IG9jY2x1c2lvbiByZW5kZXIKZmFsbC13aW50ZXIgMjAxNS0yMDE2CmNpdHkgbGlnaHQgcmVmbGVjdGlvbnMKZGFyayBibHVycnkgYmFja2dyb3VuZApmYWludCByZWQgbGlwcwp3aXRoIGEgY3VybHkgcGVybQp3aXRoIHNtYWxsIHN0dWRkZWQgZWFyaW5ncwp0b3dlcmluZyBhYm92ZSBhIHNtYWxsIHBlcnNvbgpzeWx2YWluIHNhcnJhaWxoIGFuZCBpZ29yIG1vcnNraQpsb25nIGJsYWNrIHBvbnl0YWlsCnBhaW50aW5nIGluIHRoZSBzdHlsZSBvZiBlZCBtZWxsCmN1bHRpc3RzIHdhdGNoaW5nCnJlZCBob29kcwpjbG9zZSB1cCBwb3J0cmFpdCBvZiB3b21hbgpkcmFtYXRpYyBsaWdodGluCmRlYWQgcmVkZW1wdGlvbgptYWQgc2NpZW50aXN0IHdvcmtpbmcKbG9uZyBicmFpZGVkIHdoaXRlIGhhaXIKdGFsbCBhbmQgc21hbGwKd2F0ZXIgcGFpbnQKdHdvIGFybXMgdGhhdCBoYXZlIHNoYXJwIGNsYXdzCndpbnRlcnkgc2NlbmUKcG9uZCB3aXRoIGZyb2dzIGFuZCBsaWx5cGFkcwpibGFjayBzdHVkaW8gYmFja2dyb3VuZApjbG9zZS11cCBwb3J0cmFpdCBmaWxtIHN0aWxsCm92ZXJmbG93aW5nIGVuZXJneQp0ZXh0dXJlZCBicnVzaCBzdHJva2VzCndpdGggYmxhY2sgcGlndGFpbHMKd2l0aCBzbWFsbCBub3NlCmhpZ2ggZGV0YWlsZWQgZGVlcCBkaXNoIHdoZWVscwpnYWxheHkgbmVidWxhCndpbmRvdyAoIHJhaW4gKQpvZmZpY2lhbCBwcm9kdWN0IGltYWdlCnRoaW5ncyBoYW5naW5nIGZyb20gY2VpbGluZwozIDUgbW0gZiAxLiA0Cm9wIGFydCB3aXRoIGJpZyBib2xkIHBhdHRlcm5zCmRyb3Agb2Ygd2F0ZXJzCmluc2lkZSBkYXJrIG9pbApkYXJrIGNhYmxlcyBoYW5naW5nIGZyb20gY2VpbGluZwpjbG9zZXVwIG9mIHN3ZWF0aW5nIGZvcmVoZWFkCnNob3VsZGVyIGxvbmcgaGFpcgpyZWQgZ3JlZW4KYnVybnQgZm9yZXN0CmNsb3NldXAgcG9ydHJhaXQgb2YgYW4gYXJ0aWZpY2VyCmNsZWFuc2hhdmVuIQpvcHRpY2FsIGxlbnMgZmxhcmUgZngKdGhlIGxvcmQgb2YgcGVzdGlsZW5jZQp0aGUgcGxhZ3VlZmF0aGVyCmdyZWF0IGNvcnJ1cHRlcgp0aGUgZmFpcnkgcXVlZW4Kcm9ndWUgYmFyZApydWdnZWQgZGV0YWlscwpodWdlIHJvc2UgZmxvd2VyIGhlYWQKY2xvdWQgdm9ydGV4CnJvbWFudGljaXNtIGFydHdvcmsKaGlnaGx5IGRldGFpbGVkIGNoYXJhY3RlcnMKbmlnaHQgY2x1YnMgYW5kIG5lb25zCmNvYWNoZWxsYQpndGEgY2hpbmF0b3duIHBvcCBhcnQgc3R5bGUKYmlvc2hvY2sgcG9wIGFydCBzdHlsZQpwYXBlcmN1dAp2aW5lcyBoYW5naW5nIGZyb20gdHJlZXMKaWwKdWx0cmEgZnV0dXJpc3RpYwp0ZXh0dXJlIG1hcApzbWFydCBhd2t3YXJkIGFuZCBzZXh5CndlYXJpbmcgd2hpdGUgc25lYWtlcnMKZXh0cmVtZSBsb3cgYW5nbGUgbG9uZyBzaG90CndpdGggYSByb3VuZCBmYWNlCmdyYXkgc2hvcnRzIGFuZCBibGFjayBzb2NrcwpqYXBhbmVzZSB0diBzaG93CnN3aXJsaW5nIHNjZW5lIGluIGZvcmVzdAphbGllbiBza3VsbHMKaW1wZXJpdW0gc3BhY2UgbWFyaW5lcwpicm93biBleWVzIHdpdGggcmVkIGV5ZSBtYXJrZXJzCmNvbG9yZnVsIGNoYXJhY3RlciBmYWNlcwpjb2xvcmZ1bCBraXRzdW5lIGNpdHkKY29sb3JmdWwgbWVkaWNhbCBlcXVpcG1lbnQKdWx0cmEgd2lkZSBhbmdsZSBpc29tZXRyaWMgdmlldwpiZWQgb2YgZmxvd2VycyBvbiBmbG9vcgpjb2xvcmZ1bCEgY2hhcmFjdGVyIGRlc2lnbgptY2Jlc3MgcG9zdGVyCmNvbG9zc2VvCnBsYXlpbmcgZ3VpdGFycwplbmQgb2YgYW4gZXJhCmhlYXZlbiEhISEhISEhCmxvb2sgYXQgdGhlIGZyb250IGhvcml6b250YWxseQpjb21tZXJjaWFsIHN0dWRpbyBsaWdodGluZwpoeWFrdS4gZGV0YWlsZWQKZ3JleSBza2llcyB3aXRoIHR3byByYWluYm93cwpjbGVhbiB2ZWN0b3IgYXJ0CmN1cmx5IGRpcnR5IGJsb25kZSBoYWlyCmRyYWdvbiBjeWJvcmcKZGlzdHJpYnV0ZWQgY29uc2Npb3VzbmVzcwpsdW1pb2wKbGlnaHQgc2hhZG93cwptYXJpbmUKa2xlZS4gbWF0aGVtYXRpY2FsIHBhcmFkaXNlCm1vZGVsZWQgaW4gMyBkCndldCBtZXRhbCByZWZsZWN0aW9ucwptb3VsZHkganVpY2UKd2F0ZXIgZXllcwpzb21lIHllbGxvdyBhbmQgYmx1ZQpzb21lIGdyZWVuIGFuZCBwdXJwbGUKc29tZSBvcmFuZ2UgYW5kIGJsdWUKd2hpdGUgaGVhZApzb21lIHB1cnBsZSBhbmQgb3JhbmdlCmVhcnRoIGV5ZXMKem9tYmllcyBhcG9jYWxpcHNpcwpuaWdodCB1bmRlciB0aGUgc3RhcnJ5IHNreQpoZWFkcGllY2VoaWdoIHF1YWxpdHkKcG9ydHJhaXQgb2YgZGVhZHBvb2wKamFtZXMgY2x5bmUKZW1wZXJvciBzZWNyZXQgc29jaWV0eQp3aXRoIG5hbWVzCmZvbGxvd3MgdGhlIGdvbGRlbiByYXRpbwpncmFkaWVudCBibGFjayB0byBwdXJwbGUKIyBtZWNoYW5pY2FsIGRlc2lnbgojIG1lY2hhCiMgY2hhcmFjdGVyIGRlc2lnbgpkZXRhaWxlZCBoaWdoIHJlc29sdXRpb24KZnV0dXJpc3RpYyB2ciBoZWFkc2V0CmluIGJsdWVwcmludCBmb3JtCnNrCnNoaWVsZCBkZXNpZ24KZmFudGFzeSBzaGllbGQKZnJhY3RhbGl6YXRpb24Kc2N5dGhlIGRlc2lnbgpmYW50YXN5IHNjeXRoZQpnYW1lIGNoYXJhY3RlcnMgaGVhZCBkZXNpZ25zCmdsb3dpbmcgYmx1ZSBtdXNocm9vbXMKZ2lhbnQgcml2ZXIKaG9ybmVkIHNrdWxsIG1hc2sKZmxvb3IgbGFtcHMKNiAwIHMgY29sb3VyIHBhbGV0dGUKbW9vZCBwYWludGluZwpnbG93aW5nIGltcGVyaWFsIG1vdGlmcwp0dXhlZG8gY2F0CnVsdHJhIC0gd2lkZSB2aWV3CmhlYXZ5IHR3byB0b25lIHNoYWRpbmcKdHJhaWxzIG9mIGluayBmb2xsb3cgbW92ZW1lbnRzCmxvdmVjcmFmdGlhbiBiYWNrZ3JvdW5kCmRlYXRoIGdyaXBzCnN1cnJlYWxpc3QgYWVzdGhldGljCnNoYW1hbmljIGRtdCBob3Jyb3IgYXJ0CmJlYXV0aWZ1bGx5IG9yZGluYXRlZApjb29raW5nIHNob3cKY29wcGVyIHdpcmUKZGFuZ2Vyb3VzIHN3YW1wClsgcmVhbGlzdGljIHBob3RvIF0hIQpjb3JnaSB3aXRoIFsgYW5nZWxpYyB3aW5ncyBdISEKZXZpbCBndWl0YXJzCmFuIGV4cHJlc3NpdmUgb2lsIHBhaW50aW5nCmNvc21pYyBjYXRhY2x5c20Kd2luZG93IHNpbGwgd2l0aCBwbGFudHMKdmluZXMgb24gdGhlIHdhbGxzCmh1bmNoZWQgb3Zlcgpjb3VudCBvZiBtb250ZSBjcmlzdG8Kd2FybSBsaWdodGluZyBpbnRlcmlvcgpjb3VwbGUgd2Fsa2luZyBoYW5kIGluIGhhbmQKaGlnaCByZXNvbHV0aW9uIGltYWdlCndpdGggdHJpbW1lZCBtdXN0YWNoZQpoZCBzY2FuCmh1Z2UgZmxvd2VyCmluIHRoZSB0cm9waWNhbCB3b29kCnByb3NhaWMKcHVscCBub2lyCmNvd2JveSBwb3J0cmFpdCBtYWxlCmVtcHR5IGJhdGhob3VzZSBoaWRkZW4gaW4gYSBjYXZlCnNvbG8gcGVyZm9ybWFuY2UgdW5yZWFsIGVuZ2luZQpibGFjayBuaWdodCBza3kKc3R1ZHMKcGx1cyBzaXplIHdvbWFuCmZ1dHVyaXNtIHBhaW50aW5nCm1hcmJsZSByb29tCnN0dWRpbyByb29tCmluIHN0eWxlIG9mIHN0ZXZlIGhlbmRlcnNvbgpsYXJnZSBsb25nIHBvaW50eSB0ZWV0aApjb25zaXN0IG9mIHNoYWRvdwpjcmVlcHkgYmFja3Jvb21zCnJ1c3R5IHBpcGVzCnBvc2Vzc2VkCmxvbmcgZmluZ2VycwpqYXp6IGFsYnVtIGNvdmVyCmh5cGVyIGRldGFpbGVkISEKYWRyaWFuIHdpbGtpbnMKY3JvY29kaWxlIGdvZCBsYWlyCmNyb3cgc2t1bGwga25pZ2h0IGhlbG1ldAphdG1vc3BoZXJpYyBjb2xkIGxpZ2h0aW5nCmJhcm9xdWUgbGFuZHNjYXBlIHBhaW50aW5nCnBpbmJhbGwgbWFjaGluZSBwYXJ0cwpjcm93ZGVkIHBsYWNlCmRlcHJlc3NpbmcgaW1hZ2UKY3J1ZWwga29yZWFuIGdvdGggZ2lybAp3aGl0ZSBtYXJibGUgd2FsbHMKZHJhbWF0aWMgd2hpdGUgYW5kIGJsdWUgbGlnaHRpbmcKMmQgdGV4dHVyZQpob2xvCmRldGFpbGVkIGxldHRlcnMKY3Rob25pYyByZXNvbmFuY2UKc2hlIGlzIHRhbGwKdmVyeSBmaXQgYW5kIGV4dHJlbWVseSBtdXNjdWxhcgpnb2xkZW4gY29tcHV0ZXJzCmRhcmsgdmludGFnZSBzY2kgZmkKZXZpbCB3YXJwIGVuZXJneQpkZW5zZSB2b2x1bWV0cmljIGZvZwpjb2xvcmZ1bCBsZW5zZXMKYmxhY2sgZHJlc3Mgd2l0aCBiZWx0CmJsYWNrIGNob2tlciBuZWNrbGFjZQpsZWF0aGVyIHN0b2NraW5ncwp3YXRlciBzdGFpbnMKYmxvb2Qgb24gdGVubmlzIGNvdXJ0CmJsZWVkaW5nIGF1ZGllbmNlCmF3d3cgYXNwaXJpbmcKbGFyZ2UgcHJvcHMKY3V0ZSBhbmltZSBjYXRnaXJsCm5hdHVyYWwgcmVmbGVjdGlvbnMKY2FtcGF1IG1pa2Ugc3R5bGUKY3V0ZSBiYWtlcnkgc2hvcApjdXRlIGNhdCBwaG90bwpjdXRlIGNoaWJpIHJhdCB3aXphcmQKb2xkIHdpemFyZCByb2JlCm5lb3RyYWRpdGlvbmFsIG1vZGVybiBtaW5pbWFsaXN0CndoaXRlIHRyYWNpbmcKdmlueWwgcmVjb3JkcwpicmlnaHQgbGVkIGxpZ2h0cwrwn6eSIPCfk7gg8J+OqAp3ZWFyaW5nIHZyCnNvbWJyZXJvCnRhdHRlcmVkIGdyZWVuIGRyZXNzCnRhdHRlcmVkIGdvdGhpYyBob3Jyb3IgbWFpZGVuCmxvc3QgaW4gdGhlIG1pbGt5IHZvaWQKdm9sdW1ldHJpYyBmb2cgYW5kIHNtb2tlCmNoaWJpIG1vbnN0ZXIgZ2lybAphbmltZSBlYXJzCmdvdGhpYyB3cmFpdGggbWFpZGVuCmFzeW1tZXRyaWMgYmVhdXR5CmdvdGhpYyBtYWlkZW4gc2hhbWFuCnBhZ2FuIGdvZGRlc3MKaW52ZXJzZSBjb2xvcgpnb3RoaWMgcmVnYWwKZ290aGljIHJlZ2FsIGFuZCB0YXR0ZXJlZCBibGFjawpicm9rZW4gaGVhcnRzCnRyYWdpYyB3cmFpdGgKY3V0ZSBmdW5ueSBnaG9zdAp3aGl0ZXNtaXRoCm1hcmlqdWFuYSB0cmVlcwpkcmlua2luZyBjb2NrdGFpbAp3ZWFyaW5nIG9mZiAtIHdoaXRlIHN0eWxlCnBob3RvcmVhbGl0aWMKdmVjdG9yIGdyYXBoaWNzIGljb24KdmlvbGV0IGFuZCBibGFjawpqYXBhbmVzZSBhbmltZSBhcnRpc3QgZHJhd24KZHJlYW0gYW5pbWFsIGN1dGUgZXllcwp1c2VkIHNjaWZpIHN0eWxlCmdhbWUgY2hhcmFjdGVyIGFydApweXJhbWlkcyBvZiBnaXphCmluIGFuIGFsbGV5IGF0IG5pZ2h0IGJhY2sgbGl0CmN5YmVycHVuayBhc3Nhc3Npbgp2ZXJtb250IGZhbGwgY29sb3JzCmdhdGV3YXkKY3liZXJwdW5rIGNoYXJhY3RlciBkZXNpZ24KY3liZXJwdW5rIGNpdHkgbGFuZHNjYXBlCmN5YmVycHVuayBjb25jZXB0IGluc3BpcmVkIGpldApleHRyZWFtbHkgZGV0YWlsZWQgZGF0YSBjZW50ZXIKNCBrIGhkIHBob3RvCmlyaWRlc2NlbnQgZnJhY3RhbApjeWJlcnB1bmsgZ2Vpc2hhCm5lby1leHByZXNzaW9uaXN0Cmd1bnNsaW5nZXIKcm9ib3RpY2FsCmN5YmVycHVuayBoZWxtZXQKY3liZXJwdW5rIGhvbWVsZXNzCmZ1bGwgLSBsZW5ndGgKbmFub3RlY2hub2xvZ3kKcnVhbiBqaWEgYW5kIGFydGdlcm0Kdml0YWxpeSBib25kYXJjaHVrCnVsdHJhIHNoYXJwIGxpbmVzCndpdGggd2hpdGUKc2lsdmVyIGN5YmVyIGFybW9yCjkgawp1bHRyYSBoZCByZW5kZXJlZAp3aW50ZXIgaW4gdGhlIHNub3cKZXZpbCBhcnRpZmljaWFsIGludGVsbGlnZW5jZQptZWNoYW5pY2FsIC0gcGFydHMKY3lib3JnIGNhdGUgYmxhbmNoZXR0CndoaWxlIGl0J3MgcmFpbmluZwptZWNoYSBhc3RoZXRpYwpmbG93ZXIgZGVjb3JhdGlvbnMKY3lib3JnIGhpbmR1IGdvZGJvZHkKY3lib3JnIGphY2thbG9wZSBjeWJlcnB1bmsKY3lib3JnIG1vdXNlCm1pbmltYWwgZ2VvbWV0cmljCm9uZSAtIGV5ZWQgbWFuCmRhY2hzaHVuZApyaWZ0ZW4gY2l0eSBpbiB0aGUgYmFja2dyb3VuZAp0aGUgZWxkZXIgc2Nyb2xscyB2IDogc2t5cmltCmdpcmwgd2F0Y2hpbmcgc3Vuc2V0CmVtcHR5IHdoZWF0IGZpZWxkCmhvbGRpbmcgZGFpc3kKcGFsZW9saXRoaWMgY2F2ZSBhcnQKZGFuaWVsYSB1aGxpZwpsaWdobmluZyBzdG9ybQp3b2x2ZXJpbmUgYWN0aW9uIHBvc2UKY29zbW9zIGJhY2tkcm9wCm1hcnZlbCBtb3ZpZSBzdGlsbApzb2Z0cGxheQpsaWdodCBwYWludApvcmdhbmljIDhrIGFydGlzdGljIHBob3RvZ3JhcGh5CnJlYWNoaW5nCm5lb24gY29sb3JlZCBoYXplCnJvc2V0dGUKbW92aWUgcG9zdGVyIGZyb20gMTk2MHMKcG9sYXIKbmVjcm9tYW5jZXIgc2l0dGluZyBhdCB0YWJsZQpkYXJrIGdvZCBzaXQgb24gdGhlIHRyb24KYXdhcmQgd2lubmluZyBkYXJrCmNvbGQgbWlzdCBibGFjayBiYWNrZ3JvdW5kCmRhcmsgbWFnaWNpYW4gZ2lybCBmcm9tIHl1LWdpLW9oCndpdGggZ3JlZW4gY2FubmFiaXMgbGVhdmVzCnRoZSBraW5nIG9mIHJvb3N0ZXIKcnVnZ2VkIGFuZCBkaXJ0eQo0ayB0cmFpbGVyCmhpZGRlbiBoYW5kcyBhbmQgZmFjZXMKZGFyayBxdWVlbiBvZiBzbmFrZXMKYnJvYWQgYnJ1c2ggc3Ryb2tlcyEKb3JhbmdlIGVsZWN0cmljaXR5CmdlbGF0aW5vdXMgc3ltbWV0cmljYWwKOCBrIC0gcmVzb2x1dGlvbiEhCmN1cmwgbm9pc2UKOiA1IHN0eWxpc2gKc3RyZWV0IGFydCA6IDQgbWFzdGVycGllY2UKYW1ldGh5c3Qgb3BhbCBjaXRyaW5lCm1hcGxlIHN0b3J5CnN0dWRpbyBoZHJpIHNvZnQgbGlnaHRpbmcKZGVhZCBhbGl2ZSAoMTk5MikKcGlyYXRlIGZsYWcgaW4gaGlzIGFybXMKZGVhZCByaXZlcgpwZXJmZWN0bHkgcG9pc2VkCnNrZWxldG9ucyBvbiBhIHBpcmF0ZSBzaGlwCmRldGFpbGVkIHByb2plY3Rpb25zCmhpZ2ggLSBpbnRyaWNhdGUgLSBkZXRhaWwKZHJpZWQgZmxvd2VycwpzaGluaW5nIGxpZ2h0cyBvbiBjbGlmZiBzaWRlCmVhcmx5IG1vcm5pbmcgbGlnaHQgZm9nCnN1YnRsZSBjb2xvciB2YXJpYW50aW9ucwpkZWVwIGluIGEgamFwYW5lc2UgYmFtYm9vIGZvcmVzdApsYWtlIGZvcmVncm91bmQKZGVlcCBpbnNpZGUgdGhlIGZvcmVzdApwb2x5Y2hhZXRhCndldCBhc3BoYWx0CnN1biB0aHJvdWdoIHRoZSB0cmVlcwpzb3JlcwpzdHlsaXplZCBiZWF1dHkgcG9ydHJhaXQKdmFudGFibGFjayBnaQpkaWdpdGFsIGRyZWFtcwpvbWlub3VzIHNwYWNlIGJhdHRsZSBiYWNrZ3JvdW5kCnZvb2RvIGRlY29yCndpbnRlciBjb25jZXB0IGFydApkcmVhbXdvcmxkCmJyb3duIHJlc2luCnRyaXN0cmFtCndvcnRobGVzc25lc3MKc2hhZG93cyBvZiB6b21iaWVzCmhhbmRndW4KYW1uZXNpYQppbnRlcmVzdGluZyBjb2xvciBzY2hlbWUKaGFyZCByYWluCmFyY2hlcnkKaW4gdGhlIGFuaW1lIGZpbG0KbmVvbiBvcGVyYXRvcgpsaWJyYXJ5IG9mIGZvcmV2ZXIKYXMgYW4gZWxlZ2FudCBub2JsZXdvbWFuCnN0ZWxsYSBhbHBpbmEgZmxvd2VyCm9mZmljaWFsIHBob3RvcwpmaXJlIGJyZWF0aGluZy4gYm93c2VyCmRldGFpbGVkIGRlc2lnbgpkZXRhaWxlZCBzdHJpbmcgdGV4dAp0cmFuc3BhcmVudCBkcm9wbGV0cwpmcmFnaWxlIGxvb2tpbmcKaGFuZHNvbWUgZGV0YWlsZWQgZmFjZQpnaWxkZWQgZ29sZCBoYWxvIGJlaGluZCBoZWFkCndpbmdzIGdyb3dpbmcgb3V0IG9mIGFybXMKY2FzdGluZyBhIHByb3RlY3Rpb24gc3BlbGwKdmFyaW91cyBhY3Rpb24gcG9zZXMKdmludGFnZSB0aGVtZQptYWRlIG9mIHN0b25lIGFuZCBjb25jcmV0ZQp2ZXJ5IGRldGFpbGVkIGRhcmsgc3VwZXIgc3Rvcm0KZG9uYWxkIHRydW1wIGFzIGFuIG9vbXBhIGxvb21wYQpwcm9kdWN0IHN0dWRpbyBsaWdodGluZwp2YXJpb3VzIGxhY2l2aW91cyBzZWR1Y2luZyBwb3NlcwpsaWdodCBncmV5CndoaXRlIHN0cmFpZ2h0IGhhaXIKd2VhcmluZyBkYXJrIHJvYmUKaGFrYW1hIGtpbW9ubwpsb29raW5nIHN0cmFpZ2h0IGZvcndhcmQKZnVsbCBkZXZpY2UKY2hhcmNvYWwgYW5kIGNoYW1wYWduZQpzaWduYXR1cmUgb24gdGhlIGJvdHRvbQp3b2xmZ2lybApob3JyaWZpYyBzdXJyZWFsIG5pZ2h0bWFyZQpsaXZpbmcgc3BvcmUgbWljcm9vcmdhbmlzbXMKbGFyZ2UhISEhISEgZXllZ2xhc3NlcyEhIQp3aXRoIGxhYmVscyBhbmQgbm90ZXMKZm9yIGEgYmVhdXRpZnVsCnVwc2lkZWRvd24KZGVsaWNhdGUgZGV0YWlsaW5nIGdvbGRlbiBzdHJva2UKY292ZXJlZCBpbiBmZWF0aGVycwpzdGFuZGluZyBvbiBzdXJmYm9hcmRzCmhpZ2ggZGV0YWlsZWQgY29sb3JzCndpdGhvdXQgZHVwbGljYXRlIGltYWdlCmZhbWlseSBjcmVzdApkZXZvdGlvbiB0byB0aGUgc2NhcmxldCB3b21hbgpqb255IGl2ZXMKY2xhc3NpYyBwcm9kdWN0IGRlc2lnbgpzdHlsZSBvZiByYXltb25kIHN3YW5sYW5kCmRpYWJvbHVzIGluIG11c2ljYQpkaWNlcyBmcm9tIGNvbG9yIGdsYXNzCmRpZXNlbHB1bmsgc29sZGllciBnaXJsCnJlZCBtZWNoIGFybXMgYW5kIHJlZCBtZWNoIGxlZ3MKaGlnaCBkZXRhaWwgY2hhcmFjdGVyIG1vZGVscwptb3ZpZSBxdWFsaXR5IGJhdHRsZQpnaWxkZWQgYmxhY2sgdW5pZm9ybQphcmN5bGljCmFzdHJvbmF1dCB3YWxraW5nCmZsb2F0aW5nIGxpcXVpZApzdHJldGNoaW5nIHRvIHdhbGxzCnNhbmRhbHMKcmVtYXJrYWJsZSBqb2tlciBtYWtlIHVwCmxvbmcgZnJlZSBibGFjayBzdHJhaWdodCBoYWlyCnZpdmlkIGZsb3dlciBjcm93bgpkcmVzc2VkIGFzIGEgd2l6YXJkCmluIGEgY2FiaW4Kc21vb3RoIGJvZHkKaXJpZGVzY2VudCBhbmQgZ29sZCBhbmQgY3J5c3RhbApiaXJkcyBvbiBza3kKd2VhcmluZyBhIHRhbmsgdG9wIGFuZCBzaG9ydHMKaW4ganVua3lhcmQgYXQgbmlnaHQKd2VhcmluZyBhIHRpZ2h0IGJsYWNrIGRyZXNzCnZlcnkgZmFzaGlvbgpkaXNwbGF5ZWQgb24gdGhlIHdhbGxzCmdsYXNzIGFuZCBtZXRhbCA6IDogcGV1Z290IG9ueXgKc3VicmVkZGl0IC8gciAvIHdoYWxlCnN0dWRpbyBnaGlibGkgY29sb3IgcGFsbGV0dGUKZGlnaXRhbCBwYWludGluZyBvZiBxdWV0emFsY29hdGwKaGVyIGdhemUgaXMgZG93bmNhc3QKb2xkIHJ1aW5zCmRpZ25pdHkKc3VuIHNoYWZ0CmRpbm8gbW91c2UKZWRkaWUgYWRhbXMKZG9sbCBob3VzZQpncmlkIGFycmFuZ2VtZW50CmJsb29kIHJlZCBjb2xvcmVkIHNreQpmYW5jaWZ1bCBmbG9yYWwgbWFuZGVsYnVsYgozIGRtYXgKdW5yZWEgNQpwb2ludCBvZiBubyByZXR1cm4KZGlzbmV5IGFydCBzdHlsZQpkaXNuZXkgd2V0YSA4IGsKd2l0aCByZWQgaGF6ZSBhbmQgYSBtYXNzaXZlIGdyaW4Kd2hpdGUgcmVkCnRpcmVkIGhhbGYgY2xvc2VkCmRpdmluZSBpbnRlcnZlbnRpb24KdHdpc3RlZCB3YXRlcndheQpzcGlyZQpmcmVxdWVuY3kKYnJhaWRlZCBiZWFyZCByZWRoZWFkIGRyZWFkbG9ja3MKbW9uc3Ryb3VzIG1hc2sKYmFyZWZlZXQKZG5kIHBvcnRyYWl0IG9mIGEgdGllZmxpbmcKcmFnaW5nIGJ1Z2JlYXIKcGhpbGlwIGsgZApmbGV4aXNlYWwKaGQgcmVtYXN0ZXJlZApkb2cgZWF0aW5nIGNyb2lzc2FudHMgaW4gcGFyaXMKem9vdG9waWEgY29uY2VwdCBhcnQKM3JkIHBlcnNvbiBzaG9vdGVyCmRvbHBoaW4gc3dpbW1pbmcKZG9scGhpbnMgc3dpbW1pbmcKY29uY2VwdCBob3VzZQpub3J0aCBoZW1pc3BoZXJlCm1hdGhzCmRvbWluYXRyaXggYXNzYXNzaW4gcm9ib3QKc3VycmVhbCBkcmVhbQpkb25hbGQgdHJ1bXAgYXMgdGhlIGh1bGsKd29uYmluIGxlZQpkb25hbGQgdHJ1bXAgaW4gcHJpc29uCmFwIG5ld3MgcGhvdG9ncmFwaApvcmllbnRhbGlzbSBwYWludGluZwpob2xkaW5nIGEgc3BlY3RhY3VsYXIgYnJvYWRzd29yZApkb25rZXkga29uZyBjb3VudHJ5CmRvbiBwdW5jaGF0egpkb29tIGRlbW9uIGdpZ2VyIHBvcnRyYWl0CnJlYWxpc20gdGF0dG9vIHNrZXRjaApkb3VibGUgZXhwb3N1cmUgcGhvdG9ncmFwaHkKc2VsZWN0aXZlIGNvbG9yIGVmZmVjdApzaW5nbGUgc3Ryb2JlIGxpZ2h0CmJydXRhbGlzdCBjb3VydHlhcmQKd2VhcmluZyBzaW1wbGUgcm9iZXMKdGhlIG1la2F2ZXJzZQpkcmFnb24gZGVzaWduIGxhbmd1YWdlCnNpbHZlciBsaW5pbmcKbWVkaXVtOiBibGFjayBwZW5jaWwKZHJhZ3dhZHMKYnJpdGlzaCBkcmFnb25zCnVsdHJhdGVycmVzdHJpYWwgZHJhZ29ucwp3ZWFyaW5nIGEgc2lsayBrdXJ0YQpyYXl0cmFjZWQgcmVhbGlzdGljCmNvbG9yZnVsIGdsb3cKZmlnaHRzCmNob3BwaW5nIGhhbmRzCmRpZnJhY3Rpb25zIG9mIGxpZ2h0CmljZSBkdXN0Cmdsb3dpbmcgb21pbm91cyBjbG91ZHMKZ2lhbnQgdG93ZXJpbmcgcGlsbGFycwpzZW5zYXRpb25hbApvbmx5IGZpdmUgZmluZ2VycwpvdXRzaWRlciBhcnQgc3R5bGUKdmVyeSBzaWxseSBsb29raW5nCmh1Z2UgbXVzdGFjaGUKKCgoZGFyayBjb2xvcnMpKSkKKCgoKGRpcnQgYnJpY2sgcm9hZCkpKSkKZ2xvd2luZyBzdHJlZXQgc2lnbnMKZHJlYW0gb24Kbm92ZWwgY29sb3Igc2NoZW1lCjEgOSA4IDAgcyBmbG93ZXIgcG93ZXIgaGlwcHkKZm9sZGVkIGdlb21ldHJ5CmRyZWFtd2Fsa2VyCmNvbXB1dGVyIG5ldHdvcmsKdXBwZXIgYm9keSB2aXNpYmxlCnJlYWwgcm90dGVuIGZsZXNoCmJsb29kIGFuZCBib25lcwpkcmVzc2VkIHNlbm9iaXRoCmdvdWYgZXZhbmdlbGlvbgpyYWlueSBuaWdodCBjaXR5IHN0cmVldApibHVlIGdsYWNpZXIKcHJheWluZyBhdCB0aGUgc3VuCmNhZmUgbGlnaHRpbmcKZHNsciBwaG90byBvZiBhIHZhc2Ugb24gYSB0YWJsZQo1IDIgbW0gZiAxLiA4CnJpeW9rbyBpa2VkYQoxIDkgOCAyIGhvcnJvciBmaWxtCnNhaWxib2F0CnNvZnQgYW5kIHdhcm0KZnJhbmsgZnJhemV0dGEgZGFhcmtlbgpsaXphcmQgaGVhZApzdGFycnkgc3BhY2UgbmVidWxhCmZyb20gdGhyZWUga2luZ2RvbXMKb2lsIHBhaW50aW5nIHBob3RvIHJlYWwKc3R5bGlzaCBjeWJvcmcgYXJtb3IKcmFpbiEgc3Rvcm0Kd2lkZWFuZ2xlIHBvdiBjbG9zZXVwCmR5c29uIHNwaGVyZSBpbiBzcGFjZQpkeXNvbiBzcGhlcmUgcHJvZ3JhbSBwaW5rIHBsYW5ldAptaW5hcmV0cwpnbGFzcyBzcGFjZXNoaXAKdGFsbCBzdHJ1Y3R1cmVzCmdvbGRlbiByYXRpbyEhISEKY2VudGVyZWQhISEhCmFyY2hpdGVjdHVyZSBhd2FyZCB3aW5uZXIKai4gdy4gZ29kd2FyZApjdXRlIG1pbmlhdHVyZSByZXNpbmUgZmlndXJlCndpZGUgYW5nbGUgbGVucy4gOCBrCmZlYXRoZXJzIGFuZCBwYWludAooICggZGFyayBncmVlbgpzbmFrZSBmcm9tIG1ldGFsIGdlYXIKZWRvIHN0eWxlCm1lZ2FjaXR5IHN0cmVldHMgc2VlbiBmcm9tIGFib3ZlCmRpb2F4aXppbmUgcHVycGxlCnNwb29uCmRpYXJ5IG9uIGhlciBoYW5kCmRyZXNzZWQgaW4gYmxhY2sgbGFjZQplZ3lwdCBnb2QKbGlnaHQgY2lyY2xlcwpsb29zZSBsaW5ld29yawprb2RhY29sb3IKcmVhbGlzdGljIGFuZCBjb2hlcmVudAplbGRyaXRjaCBhYm9taW5hdGlvbiBnYXJmaWVsZApicmVha2luZyB0aGUgd2F2ZXMKZ29kbHkgZmlndXJlcwplbGVnYW50IGZsb3dlcnMKYWJzb2x1dGVseSBvdXRzdGFuZGluZwpjdXJscyBhbmQgY3VydmVzCmZsZXNoIGFuZCBib25lcwp0ZXRocyBhbmQgdGVudGFjbGVzCndpdGggYW4gaGFycAphZnJvIHNhbXVyYWkgc3R5bGUKZWxlcGhhbnQgaGVhZAp3ZWFyaW5nIGEgY2FyZGlnYW4KY2FyZGlnYW4KZWxsaW90IGFsZGVyc29uCmVsb24gbXVzayBhcyBzbGlteSBtb2xsdXNrCnBoYW50YXN5IHN0YXIgb25saW5lCmVsdmVuIHNwaXJpdCBtZWRpdGF0aW5nIGluIHNwYWNlCm5vcmRpYyBub2lyZQpkYXZpZCBiYWxkZW9uCndlYXJpbmcgbGlnaHQKc2lsdmVyIGFybW9yIGFuZCByZWQgY2xvdGhpbmcKc3Vuc2V0IGFuZCBiaWcgY2xvdWRzIGJlaGluZCBoZXIKbSAmIG0gbWFzY290Cm0gJiBtIGZpZ3VyZQpiYWQgdGVldGgKZnVsbCEhIGJvZHkhIHNob3QKdGhlIGdydWRnZQppcmlkZXNjZW50IHNoaW55IHNoZWVyIGxpbmdlcmllCmhhaXIgaW4gYSBwb255dGFpbAo4IDAgcyBtb3ZpZQpwb3NzaWJseSBleHRyYSBsaW1icwptYWNybyA4IG1tCnNpZXJyYSBnYW1lcwpvcGVuIHNoaW55IGZsb29yCmVuY2hhbnRlZCBtYWdpY2FsIGZhbnRhc3kgZm9yZXN0CmVuZGxlc3MgZm9yZXN0IG9mIGhpZ2ggYnVpbGRpbmdzCmluIG1lZGlldmFsIGFybW91cnkKZW50aXJlbHkgYmxhY2sgZnVsbCBwYWdlIGJsYWNrCmludGVyZXN0aW5nIHRleHR1cmVzCmNyYWlnIG11bGxpbnNoeXBlcgpzeW1tZXRyeSBmcmFjdGFsCmRldGFpbGVkIHJlYWxpc3RpYyA4IGsKd2l0aCBiZWF1dGlmdWwgbW9zcXVlcwpyZWFsaXN0aWMgcGhvdG8gZnJvbSBuYXNhCmludGVyZXN0aW5nIHNob3QKaHlwZXJyZWFsIG1vdmllIHNob3QKc2FjcmVkIGFyY2hpdGVjdHVyZQpkYXJrIGhhaXJzCndvb2RzIG9uIGZpcmUKM3JkIHBlcnNvbiBjYW1lcmEKYmxhY2sgbGVhdGhlciBjb3N0dW1lCnB1bXBraW4gcGF0Y2gKY29tcGxleCBkZXRhaWxlZCBlbnZpcm9ubWVudApicm9jYWRlCnZpYnJhbnQgYnV0IG11dGVkIGNvbG9ycwpibHVlIGZpcmVmbGllcwp3aWxsb3cgMSA5IDggNQptYWplc3RpYyB2aWV3CmlnbmFjaW8gcmlvcwpmYWludCBhdG1vc3BoZXJpYyBsaWdodGluZwp3ZWFyaW5nIGEgcHVycGxlIHN3ZWF0c3VpdApsYXJnZSBzdG9uZSBzdGF0dWVzIG9mIGhlcm9lcwptb3ZpZSBwYWNpZmljIHJpbQpvdmVyY2FzdCBkdXNrCmhhbW1lciBhbmQgc2lja2xlcwpvbmUgcG9pbnQgbGlnaHRuaW5nCmVwaWNpbGx1c3RyYXRpb24KZXJhZGljYXRpb24KZXJvc2lvbiBjaGFubmVscyByaXZlcgpsb3dyaWRlcnMKZXN0cmFuZ2UgY2FsbGlncmFwaHkKZXRlcm5hbCBlY2xpcHNlCmludHJpY2F0ZSBkZXZpbGlzaCBkZXNpZ25zCnJhaW5ib3cgbXljZWxpdW0Kc2VlZGxpbmdzCmluIGF2aWxhIHBpbmV3b29kCmV1cm9wZWFuIHVuaW9uIGZsYWcKZ29kbGlrZSBkZXNpZ24KZXZpbCBhbGNoZW1pc3QgZ25vbWUKd2l0aCBkZXRhaWxlZCB3b29kCmV2aWwgZ29kZXNzCmdyb3dzIHVwIHRvIHRoZSBza3kKY29sZCBzY2VuZQpldmlsIHN0ZWFtcHVuayBweXJvbWFuY2VyIHdvbWFuCnRpZ2VyX2JlYXN0CnNvbGlkIGdyZXkKcGlja2F4ZQpsb3RzIG9mIGNvdHRvbiBwbGFudHMKYnVmZiBwYWludGluZwpleHByZXNzaXZlIGFuZCBkcmVhZGZ1bGwKdW5pcXVlIGFuZCBpbnRyaWNhdGUgcGFpbnRpbmcKZ29sZGlsb2Nrcwpjb2xvdXJmdWwgbW92aWUgYXJ0CnRoZSBwbGFuZXQgaXMgd2FybSB3aXRoIGNhbnlvbnMKaW4gc3R5bGUgb2YgcmVuIGhhbmcKbm9uIGh1bWFuCnNwb3RsaWdodCBsaWdodGluZwpzb2Z0IGFlc3RoZXRpYwpjb29sIHBhbGxldApuYWdpdG8ga29tYWVkYQpiZWF1dGlmdWwgc2hhcGUgb2YgZmFjZSBhbmQgYm9keQpjb3N5IHZpYmVzCnZlcnkgZmF0CmV4dHJlbWVseSBkYXJrCndhcm5pbmcgbGlnaHRzCnRyYW5zbHVjZW50IG9yYnMKYnVpbGRpbmdzIGNvdmVyZWQgd2l0aCBncmVlYmxlcwp0b3dlcmluZyBvdmVyIHlvdXIgdmlldwp0aGljayBzbW9vdGggd2FyZnJhbWUgbGVncwpleHRyZW1lbHkgZGV0YWlsZWQgZ2lhbnRlc3Mgc2hvdApkZXRhaWxlZCBob3QgbWF3CmV4dHJlbWVseSBzaGFycCBmYWNlcwo4IDAgMCBtbSBsZW5zCnRoaW4gaGVhbGluZyBnbG93aW5nIGRldmljZXMKdHN1cnVtYWtpIGthenV5YQpvcm5hdGUgc2lsdmVyIGFybW91cgpmYWNlIG9mIGFuIGFybW9yZWQgdmlsbGlhbgp0aGljayBkYXJrIGhhaXIKbmV3IGJhcm9xdWUKY293bAptYWNobyBwb3NlCnNwaXJpdCB3YXJyaW9yCnNvdWwgZWF0ZXIKYXJ0IGRlY28gZmxvd2VyIHNoYW1hbgoxIDkgMCA5CjEgNyA4IDAKcGV0dGluZyB6b28KcHVycGxlIHRyZWVzCmludHJpY2F0ZSBtdXJhbApmYWlyeSB0YWxlIHBsYWNlCnZlbm9tZmFuZwptdXJreSBsaWdodGluZwpmb2cgZ29sZGVuIGhvdXIKZmFsbG91dCA1IDogbWlhbWkKdGVjaG5pY29sb3VyIDEKdmVybWlsaW9uIGFuZCByZWQgbGFrZQp0b3NhIHNjaG9vbApmYW4gYmluZ2JpbmcKeWVhcidzIGJlc3QgYXdhcmQKY29sb3JmdWwga2lkcyBib29rIGlsbHVzdHJhdGlvbgpmYW50YXN5IHJwZyBzeW1tZXRyaWNhbCBwb3J0cmFpdApjZW50ZXJlZCBzaG91bGRlcnMgdXAgdmlldwp5b3VuZyBibG9uZGUgd29tYW4KYmlnIHNob3VsZGVycwpzY3VsZHVnZ2VyeQpicm9hZHNob3VsZGVyZWQKZmFudGFzeSBmb29kCmNsb3NlIC0gdXAgZmFjZSBwb3J0cmFpdApiYWdzaGF3IGFydCBzdHlsZQpmaW5lbHkgbWFza2VkCmZpbHRlcmVkIGxpZ2h0Cm5lbyAtIGdvdGhpYyBhcmNoaXRlY3R1cmUKYXJ0IG5vdXZlYXUgY3liZXJwdW5rISBzdHlsZQpnb2xkIGJyb2NhZGVkIGRhcmsgYmx1ZSBjbG90aGVzCmZpbmVseSB0ZXh0dXJlZApzcGFjZSBwb3J0IGNpdHkKaW50cmljYXRlIGJhcm9xdWUgYXJtb3VyCm1vaXN0IGZvZ2d5CmV5ZWJyb3cgc2Nhcgpob2xkaW5nIGhvbHkgc3ltYm9sCmtheSBuaWVsc2VuIGFuZCB3YWRpbSBrYXNoaW4KbWluaWF0dXJlIGZvcmVzdApmYW50YXN5IHRyZWUKbG9uZyBoYWlyIGdpcmwKdmludGFnZSBhZXN0aGV0aWMKc2xpbSBmZW1hbGUgZmlndXJlCmJpZyBjb2xsYXIKbG9va2Jvb2sKZ2xvd2luZyBjeWJlcm5ldGljIGF1Z21lbnRzCnN5bW1ldHJ5IDsgcGhvdG9yZWFsaXN0aWMKc3R5bGlzaCBoYWlyc3R5bGVzCnNtb2tlIGZpbGxzIHRoZSByb29tCm5vIGNvbGxhZ2UKZ2FyZmllbGQgY29taWMKY29taWMgcGFuZWxzCmZhdGUgLyBzdGF5IG5pZ2h0CmZlbWFsZSBjYW1pbGEgbWVuZGVzCm9ybmF0ZSBjeWJlcnB1bmsgYXJtb3IKc3Bpa2VkIGNvbGxhcgoxIDkgOCAwIHMgaGFpcnNwcmF5ZWQgaGFpcgptZWRpZXZhbCBoaWdoIGZhc2hpb24Kdm9yb25vaSBwYXR0ZXJuCmZlbWFsZSBkd2FydmVuIHdhcnJpb3IKbWFwbGUgc3RvcnkgaW5kaWFuYSBqb25lcwpmZW1hbGUgZ25vbWUgYXJ0aWZpY2VyCmxpZ2h0bmluZyBmYW50YXN5IG1hZ2ljCmRlZXAgYmx1ZSBza2luCndoaXRlIGNsb3VkIGhhaXIKZmVtYWxlIG1lZGlldmFsIGtuaWdodApjbG91ZGVkCnN3ZWVwaW5nIHdpbGQgYmxvbmRlIGhhaXIKZ3JleSB0YXJuaXNoZWQgbG9uZ2NvYXQKc29waGlzdGljYXRlZCBhcm1vcgpjbG9zZSAtIHVwIHNob3RzIG9mIGZhY2VzCnNtb2tpbmcgcGlwZQpmZW5jZXIKY29uY2VwdCByb2JvdApkcmVzcyBvZiBsZWF2ZXMKY2FsbSBhbmQgY29udGVudGVkIHBhaW50aW5nCnBvc3Qgcm9tYW50aWNpc20KZ3JhY2tlZApyaWNoIGRyYXBlcnkKZmlsbSBwaG90b2dyYXBoeSBmcm9tIDcgMCBzCmdtIHNjcmVlbgpkaWNlcyBtYXAgYm9vayBtaW5pYXR1cmVzCmFkYW1hbnRpdW0KamFzb24gbW9tb2EgYXMgY29uYW4KZmlsbSBzdGlsbCBmcm9tIHN0YXIgdHJlawo0ayByZXN0b3JhdGlvbgpmb2N1cyBvbiBmYWNpYWwgLSBkZXRhaWwhISEhISEKc2ltaWxhciB0byB0aGUgYmlmcm9zdApkb2xjZSAmIGdhYmJhbmEgY2FtcGFpZ24KdHJhbnNwYXJlbnQgbGlxdWlkCmhpZ2hseSBkZXRhaWxlZCBmYWNlIGFuZCBleWVzCmluc3BpcmF0aW9uYWwgdG9uZQpzdXNwZW5zZWZ1bCB0b25lCmJsZWFjaCBibG9uZGUgaGFpcgpoaWdobGV5IGRldGFpbGxlZCBmYWNlCndlYXJpbmcgbG9uZyB3aGl0ZSByb2JlCmZyb20gcG9saWNlIGFjYWRlbXkgMiAoMTk4NSkKZXBpYyBjb3Ntb3MKbGlxdWlkIHNjdWxwdHVyZQphc3RyYWwgY2xvY2t3b3JrCndldGEgZngKcnlhbiByZW5vbGRzIGFzIGJhdG1hbgpyeWFuIHJleW5vbGRzIGFzIGJhdG1hbgpyZWQgY2luZW1hIGNhbWVyYQptYXJ0aW5uZSBqb2hhbm5hCmdpbGRlZCBzaGlueSBhcm1vdXIKZmluYWwgZmFudGFzeSAxNCBzaGFycAprbmlnaHQgd2VhcmluZyBoZWxtZXQKc2hlIGlzIGFycml2aW5nIGhlYXZlbgpiYWNrZHJvcApwZXRlciBndXRocmllCmZpcmUgYnJlYXRoaW5nIGRyYWdvbgpzdHlsZSBvZiBhbGJlcnQgYmllcnN0YWR0CmZpcmVmbGllcyBmbHlpbmcgaW4gdGhlIGZvcmVzdApwZWFjZWZ1bCBzY2VuZQpzaG90IGNvbXBvc2l0aW9uCnVucmVhbCBlbmdpbmUgNCByZW5kZXIKY2F0aG9kZSByYXkgdHViZQpzaW1wbGUgYWlycGxhbmUgY29ja3BpdApzZWNyZXQgcm9vbSB1cHN0YWlycwphbCBuYXR1cmFsCnRpZSAtIGZpZ2h0ZXIKbWVtYnJhbmUKZmxvYXRpbmcgYXdheQpnbGl0Y2ghIGFydApkaWFib2xpYwppbiB0aGUgZHJ5IHJvY2sgZGVzZXJ0CnN0ZWVsIGFuZCBtZXRhbApzb255IGEgNiAzIDAgMApnaXJsIHN0YW5kaW5nIGluIGZsb3dlciBmaWVsZAp3YXJoYW1tZXIgZm91cnR5IGsKaXJvbmljIHN1cnJlYWxpc20KYnVzaHkgdGFpbAp6ZXBwZWxpbiBkb2NrCmZseWluZyByb2NreSBpc2xhbmQKY3liZXJwdW5rIGluIGZvbGlhZ2UKZ3JvdW5kIHZlcnkgZGV0YWlsZWQKZm9yayBmb3JrCmZvcmVzdHB1bmsgYmFja2dyb3VuZApwcnVzc2lhbiBibHVlIGFuZCBhem8geWVsbG93CmdlaGVubmEKZm9ydHVuZSB0ZWxsZXIKZ2xvcmlmaWVkIGltYWdlCnBhdyBwYWRzCmFybXBpdApob3Jyb3IgdmlkZW8gZ2FtZQppbnRlZ3JhbCBwYWludGluZwpmcmFjdGFsIGF1dG9tYXRvbgppbnZlcnRlZCBjb2xvciBzY2hlbWUKZnJhY3RhbCBodW1hbiBzaWxob3VldHRlCm1hc3NpdmUgd2lkZSB0cnVuawpjb250cmFzdCBwaWN0dXJlCmh1bWFuIGRlc2lnbgpkaWFsb2d1ZQprcG9wIGFtaW5vCmZ1bGwgZmlndXJlIGNlbnRlcmVkIGluIHBvcnRyYWl0CmNlbnRlcmVkIGluIHBvcnRyYWl0CmN5YW4gbWlzdAp2aWJyYW50IHBvd2RlciBwYWludHMKbG9va2luZyByZWdhbCBhbmQgY2xhc3NpYwpmcmllbmRseSBodW1hbm9pZCBjeWJlciByb2JvdApmcmllbmRseSBodW1hbm9pZCBpbnNlY3Qgcm9ib3QKdG9ueSBzYW5kb3ZhbC4gcmVhbGlzdGljCmhhbmRsZWJhciBtdXN0YWNoZQpmcm9udCBmYWNpbmcgcG9ydHJhaXQgb2Ygc2FtdXJhaQpiaWcgYmVhawpoZWFydGhzdG9uZSBjb25jZXB0IGFydAppbnRyaWNhdGUgc3RlYW1wdW5rIGltYWdlcnkKc3BvaWxlcgpicm93biBoZWF2eSBhcm1vcgp3aXRoIGEgdHdvIGhhbmRlZCBheGUKbm92ZWwgY292ZXIKcmVuYWlzc2FuY2UgcGFpbnRpbmcgb2YgYSBrbmlnaHQKZnVsbCAtIGJvZHkgLSBmcm9udCAtIHNob3QKd2hpdGUgYW5kIG9yYW5nZSBicmVhc3RwbGF0ZQpoeXBlcnJlYWxpc3RpYyBleWVzCmJpZyBldmlsIGdyaW4KZ2FtYnJlbCByb29mCmF0IGNhbGlmb3JuaWEgYWR2ZW50dXJlCmJsdWUgYW5kIGdyZXkgY29sb3Igc2NoZW1lCnRva3VzYXRzdSBzdWl0IHZhcG9yd2F2ZQpwaW5rIHJvbWFudGljIHR1dHUKY2xhbXAgc2hlbGwgbGlnaHRpbmcKbWVjaGEgbGltYnMKcm9wZXMgYW5kIGNoYWlucwpwbGFuZXQgbWFycyBpbiB0aGUgYmFja2dyb3VuZApjaXJjbGUgZm9ybXMKZ29sZCBkZXRhaWxlZCBjb2xsYXIKaGFpciBkb3duIHRvIHdhaXN0CmdyZWVuIGFuZCBwdXJwbGUgc3R1ZGlvIGxpZ2h0aW5nCmRlZXAgZW1vdGlvbnMKbGVjb3VmZmUgZGVoYXJtZQpob2x5IHRoZW1lZApmcm9udCBvZiB0aGUgdHJlYXN1cmUgYm94CmV4dGVybWluYXRlIG1vbnN0ZXJzCmJsYWNrIHBpeGllIHVuZGVyY3V0IGhhaXJjdXQKZmlyZSByZWQKdGFvaXN0IG1hc3Rlcgptb25rZXkgZHJlc3NlZCBhcyBhIHNjaWVudGlzdAp1cmJhbiBob3Jyb3IKY2hhcmFjdGVyIGlsbHVzdHJhdGlvbnMKZmFudGFzdGljIGJhY2tncm91bmQgbGFuZHNjYXBlCnNoZSBodWxrCjYgcGFjayBhYgp2YW1waXJlIHF1ZWVuCmJsb25kIGhhaXIuIHBvbnl0YWlsCmJhY2tncm91bmQgaXMgZGF0YSBzZXJ2ZXIgcm9vbQpmdWxsIGJvZHkgc2F2YWdlIGRldmlsbWFuCmZ1bGwgYm9keSBzaG90IG9mIGR1a2UgbnVrZW0gM2QKc3ltbWV0cnkgZmVhdHVyZQpmcmVuenkKZnVsbCBib2R5ISEhISEhCndpdGggdmVyeSB0aGluIGxpcHMKZHJlc3NlZCB3aXRoIGxvbmcgZmx1ZW50IGNsb3RoZXMKcGFydGlhbGx5IG1hbGUgaGFpcnkgdG9yc28KZnVyIGNvdmVyZWQgbGVncwpncmFkaWVudCByZWQgdG8gYmxhY2sKaW4gZnJvbnQgb2YgYSBmb3Jlc3QgYmFja2dyb3VuZApiaWcgZGV0YWlsZWQgZXllcwpibHVlIGFuZCByZWQgY29sb3IgcGFsZXR0ZQpzZXZlbiBzdGFycyBpbiByaWdodCBoYW5kCmxpdGhvZ3JhcGhpY3MKc3RpbGwgZnJvbSBob3Jyb3IgbW92aWUKcG9zaW5nIGxpa2UgYSBmYWxsaW5nIG1vZGVsCmNyb3duIG9mIGJsdWUgZmxvd2VycwpyaWNrIGdyaW1lcyBsaW5lIGFydApnbG93aW5nIHJlZCBsYXNlciBleWVzCmdsb3dpbmcgbWFnZW50YSBsYXNlciBleWVzCnJhcHRvcnMKZGlnaXRhbCBsaW5lLWFydAptYWxlIHdpdGggaGFsbwpmbG93ZXkKcnVzc2lhbiB3dyAxCnNpbXBsZSBmdXR1cmlzdCBjeWJvcmcgZW1wcmVzcwpzbW9vdGggaW50cmljYXRlCmhhaXIgYm93CmZ1bGx5IGJvZHkgcG9ydHJhaXQKKCBiZWtzaW5za2kgKQpyaWNoYXJkIGdhcnJpb3R0CnB1bGxpbmcgdGhlIG1vdmUndGhlIGJhbnNoZWUgJwp1bHRyYSBodW1vcm91cyBpbGx1c3RyYXRpb24KaGlnaGx5IHJlbmRlcmVkISEKZnVyaW91cyBkYXJrIGhhaXJlZCB3b21lbgpmdXJpb3VzIGdvZCB6ZXVzCmZ1cm5pdHVyZSBkZXNpZ24gc2hlZXQKd2Vhc2VsIC0gZmVycmV0IC0gc3RvYXQgKQozIGQgc2hhZG93cwpmdXR1cmVwdW5rIGR1bmdlb24KZnV0dXJpc3RpYyBhciBnbGFzc2VzCm90aGVybGFuZAp0b29uIC0gc2hhZGluZwptb3VudGFpbnMgYW5kIG9jZWFuCm11bHRpcGxlIG1vb25zCm1vbnRyZWFsCmhpZ2gtZW5kIG9uc2VuCmludGVyaW9yIGFyY2hpdGVjdHVyZSB2aWV3Cm9wcG9zaXRlIG9mIHVyYmFuIHNwcmF3bAplcGljIGJ1aWxkaW5ncyBpbiB0aGUgY2VudGVyCmZ1dHVyaXN0aWMgZmFzaGlvbiBzaG93CnNlcGFsIGhlbG1ldApyYXkgb2YgbGlnaHRzCmZ1dHVyaXN0aWMgaGFsbApibGF6aW5nIGZpcmUgdG9ybmFkb2VzCnllbGxvdyBjbG91ZHMKYW4gZXBpYyB3ZXN0ZXJuCmNsZWFuIHN5bW1ldHJpY2FsIGZhY2VzCmZ1dHVyaXN0aWMgbGFzZXJzCmV5ZSBjYXRjaGluZyBjb21wb3NpdGlvbgpmdXR1cmlzdGljIG1vdG9yY3ljbGUKdm9sdW1pbm91cyBsaWdodCBhbmQgbGlnaHQgcmF5cwp2aWN0b3IgZWlucmljaAppbiB0aGUgc3R5bGUgc3RhciB0cmVrIDggawpibGFkZXJ1bm5lciBjYXIKc2xlZWsgd2hpdGUgYXJtb3IKc2hhcnAgcmVkIGV5ZXMKcGxhbmV0cyBvcmJpdApzYWQgc2NlbmUKdHJhc2ggY2FuCnN0dWRpbyBqdW5pbyBjb2xvciBwYWxldHRlCnN0dWRpbyBqdW5pbyBibGFjayBpbmtpbmcKc3BvcnQgZ2FtZQpiZWVzIGNvdmVyaW5nIHdob2xlIGJvZHkKZ3RhIGNoaW5hdG93b24gYXJ0IHN0eWxlCmJsb25kIGJlYXJkCmhvdy10bwpkaXN0YW50IHNob3QgYmlyZHMgZXllIHZpZXcKZ2FycnVzIHZha2FyaWFuIGZyb20gbWFzcyBlZmZlY3QKaGFsbG93ZWVuIGNlbGVicmF0aW9uCmFtYXpvbiBpbmRpYW4gcGVvcGxlcyBpbiBicmF6aWwKZ2VvbWV0cmljIDMgZCByZW5kZXIKbWFkZSBlbnRpcmVseSBmcm9tIGdyYWRpZW50cwpmb2N1cyBzdGFja2VkCm1peWF6YWtpIG1vdmllIHNjZW5lCnN0eWxlIG9mIHRoZSBmaWZ0aCBlbGVtZW50CmdpYW50IGNvcm4gZmxvd2VyIGhlYWQKbWFueSB0ZWV0aApnaWFudCBkYWhsaWEgZmxvd2VyIGhlYWQKZ2lhbnQgZGFpc3kgZmxvd2VyIG92ZXIgaGVhZApzeW1tZXRyaWNhbCBkcmFnb24gd2luZ3MKcGVvcGxlIGRyb3duaW5nCmdpYW50IHJlZCBjYXJuYXRpb24gYWZybyBoZWFkCnBsYW5ldCBlYXJ0aCBpbiB0aGUgZm9yZWdyb3VuZApnaWFudCBzcXVpZHMgYmF0dGxpbmcgaW4gdGhlIHNreQpnZW50bHkgY2FyZXNzaW5nIGVhcnRoCmhvbGRpbmcgdGhlIGVhcnRoCmdpYW50IHdoaXRlIGRhaXN5IGZsb3dlciBmYWNlCmxvLWZpIHJldHJvIHZpZGVvZ2FtZQpzbW9rZSBhbmQgdGhpY2sgZHVzdCBpbiB0aGUgYWlyCmdpZ2FudGljIGNhc3RsZQptYXR0ZSBicmlnaHQgY29sb3JzCnN1cnJlYWwgcHN5Y2hlZGVsaWMgZGVzaWduCmhhZ3JpZApnaXJhZmZlIHN0YW5kaW5nIG9uIHRoZSByb29mdG9wCmJlYXV0aWZ1bCB1cHBlciBib2R5CmNpdHkgbW9ybmluZwphcm1zIGJlaGluZCBiYWNrCnBob3Rvc2hvcCBicnVzaApnaXJsIHN0YW5kaW5nCmluIHN0eWxlIG9mIGZpcmVmbHkgbW92aWUKaGVhdnkgbGluZWFydApoaWdoIHNob2VzCnN0YW5kaW5nIGluIGEgZmllbGQgd2l0aCBmbG93ZXJzCmRhcmsgc2VwaWEgdG9uZWQgc2hhZGluZwpnaXJsIHdpdGggcGxhaXRzCnNpbGljb25lIHBhdGNoIGRlc2lnbgp3ZWFyaW5nIDogdGFua3RvcApoYWlyIDogbG9uZyBicm93bgpnaXJsYm9zcwpnbGFicm91cwptYW55IHRyZWVzCmluIHRoZSBoaWxsc2lkZQoxNG1tIHdpZGUgYW5nbGUgbGVucyBmOCBhcGVydHVyZQpnbGFzcyBzY3VscHR1cmUKZ2xhc3Mgc3BoZXJlcyBvbiBhIHJlZCBjdWJlCmJlYXV0aWZ1bCBjb2xvcmZ1bCB0aWxld29yawpnbG93aW5nIGNyeXN0YWwgY2F2ZQpzcGlyaXR1YWwgZWVyaWUgY3JlZXB5IHBpY3R1cmUKd2lnZ2x5IGV0aGVyZWFsIGJlaW5nCmN5YmVyZ29kcwpnbG93aW5nIHNwaGVyZQp2ZXJ5IGxvdyAtIGFuZ2xlCmhvcm5lZCBnb2QKdWx0cmEgcmVuZGVyCmdvZCBraW5nIG9mIGFpIGFydAphbnRocm9wb21vcnBoaWMgc2lsaG91ZXR0ZQpnb2Qgb2YgbW9vbgpmYW50YXN5IGRyYXdpbmcgbWFkZSBvZiBmcmFjdGFscwpnb2Qgb2YgdGhlIG9jZWFuCmNoZWNraW5nIGhlciBwaG9uZQpnb2RkZXNzIG9mIGRlYXRoIGluIGEgZ3JhdmV5YXJkCmdyZWcgcnV0a293c2tpIGFuZCBlZGdhciBtYXhlbmNlCmdvZGRlc3Mgb2YgdGhlIGh1bnQKZ29kZGVzcyBvZiB0aW1lCmZ1bGwgYm9keSB3aGl0ZSBkcmVzcwpub3V2ZWF1IGFydApmZWV0IGluIHdhdGVyCmNyb3NzaGF0Y2gKc2VhcmNoIGxpZ2h0cwpzbW9vdGggMyBkIGlsbHVzdHJhdGlvbgpyb2NvY28gYXJ0IHN0eWxlCmdvbGRlbiBlbGVtZW50cyBhdCBib3JkZXJzCnJlaW5hc3NhbmNlIHN0eWxlCmNvbXB1dGVyIHJlbmRlcgpnb29kIHZpYnJhdGlvbnMKYXJ0IHdvcmsgYXQgbW9tYQpyYWluIGFuZCBtdWQKd2V0IHNocmVkZGVkIHJlZCBtZWF0CmJsYWNrIGFtYmllbnQgYmFja2dyb3VuZApkeW5hbWljIHBvc2UgZnVsbCBib2R5CnN5bW1ldHJpY2FsIHB1cGlscwpzeW1tZXRyaWNhbCBub3N0cmlscwpjcmVlcHkgZXZpbCBzbWlsZQpnb3JnZW91cyBmZW1hbGUgcGFsYWRpbgpkYXJrIGdvbGRlbiBoYWlyCmNydXNhZGUKY2hvY29sYXRlLiBoaWdobHkgZGV0YWlsZWQKOCBrIDEgMCA4IDAgcApiZW50IC0gb3ZlciBwb3N0dXJlCmFuZ2Vtb24gbCBzaXR0aW5nIGF0IHRoZSB0aHJvd24KZ290aCB3b21hbgpnb3RoaWMga25pZ2h0Cm1vbGVjdWxhciBnYXN0cm9ub215CmdyYW5ueSB3ZWF0aGVyd2F4CmlsbHVzdHJhdGl2ZSBhbmQgYWJzdHJhY3QKZ3JhcGhpYyBvZiBlbmNoYW50ZWQgdGVycmFyaXVtCnRocm91Z2ggY2xvdWRzIGJsdWUgc2t5CmdyZWVibGUgdGV4dHVyZQpjYXZlIGNyeXN0YWxzCmtvZGFrIHZpc2lvbiAzIDUwMHQKZ3JldGEgZ2FyYm8KZ3JpbWRhcmsgZmFudGFzeSBmb3J0cmVzcwp3aWRlIHNob290Cm11bHRpIGNvbG91cgpibG9vZHkgKyBjb25jZXB0IGFydApkc2xyIHBob3RvZ3JhcHkKZ3JvdXAgb2YgcGVvcGxlIGluIGFuIGVsZXZhdG9yCmRvcmEgbWFhciBhbmQgcmVuZSBtYWdyaXR0ZQo4NW1tIHBlbnRheAp3ZXQgdC1zaGlydApncnlmZmluZG9yCmJvbGQgaW50cmljYXRlIGluayBpbGx1c3RyYXRpb24KaW5rIGJsb2NrIHBhaW50aW5nCmd1eSB3aXRoIGhvcnNlIGhlYWQKbWVhbndoaWxlIGluIGEgcGFyYWxsZWwgdW5pdmVyc2UKcnVhbiBqaWEgYmVhdXRpZnVsIQpjb2xvcmZ1bCBnbGFzcyB3YWxsCnBvcnRyYWl0IG9mIG5vcm1hbCB0ZWVuYWdlIGdpcmwKaGFsZiAtIGRlbW9uIGhvcm4KbXlzdGljIHVuaXR5CnNoYXJwIGFuZ3VsYXIgZmVhdHVyZXMKdmFuIGxpZXZlbgppbnRyaWNhdGUgYW5kIHdldCBvaWwgcGFpbnQKaGlnaCAtIGZpZGVsaXR5CnN0YW5kaW5nIGluIHRoZSBzYXZhbm5haApkZXRpbGVkCmhhbGYgdHVydGxlCmJyaWxsaWFudCByb3lhbCBibHVlCmhhbXN0ZXJzCnBpY3RvZ3JhbQppc2FhYyBhc2ltb3YgYW5kIG1hcmMgc2ltb25ldHRpCnNjcmF0Y2hpbmcgaGVhZApnb2xkZW4gc2hpbmluZyBleWVzCmx1c2ggZ2FyZGVuIHN1cnJvdW5kaW5ncwpoYW5kc29tZSB3ZWFzZWwgZnVyc29uYSBwb3J0cmFpdApoYW5kc29tZSB5b3VuZyBtYW4gZmFjZQphbmNob3IgZ29hdGVlCmxhcmdlIGdsYXNzIGNlaWxpbmdzCndoaXRlIHRzaGlydAp0aGUgZ29kIG9mIHByb3BhbmUKaGFwcHkgY2F0CnN0cmVhbSBvZiB3YXRlcgpzaGFyZHMgYW5kIGZyYWN0YWwgb2YgaW5maW5pdHkKY2VudGVyZWQgdGhpbiByaW5nIGlyaXMKa2l0YmFzaGluZyBjb21wb25lbnQKYWtpbWlubyBrYW1panlvCjE1dGggY2VudHVyeQpoYXJtb255IG9mIGJ1dHRlcmZseQpyYWluYm93IG92ZXJsYXkhIGJlYXV0aWZ1bGx5IGxpdApoYXJtb255IG9mIHRoZSB1bml2ZXJzZQpoYXJtb255IG9mCm91dHN0cmV0Y2hlZCB3aW5ncwprZXZpbiBob3UKbW9yZG9yIGFzIGEgYnVzdGxpbmcgY2l0eQptb3VudCBkb29tCmhhc3NlbGJsYWQgcGhvdG9ncmFwaHkKd2V0IGRyaXBwaW5nCnN0YWluZWQgZ2xhc3MhIQpoYXVudGVkIHdvb2RzCmhhdW50aW5nIGJlYXV0aWZ1bCB5b3VuZyB3b21hbgpkaXJ0eSBhcm1vcgpnbGF6aW5nCmdvcmdldApzeWx2YW4gZ2xhZGUKaGVhZCBtYWRlIG9mIGNhcm5hdGlvbnMgZmxvd2VyCnJlcHRpbGlhbiBleWVzCmluIGhpc3RvcmljIGNsb3RoaW5nCnB1cnBsZSByb2JlcwpkYXJrIHB1cnBsZSBza2luCmJsYWNrIGFuZCB3aGl0ZSB3YXRlcmNvbG9yCjEgOSAyIDAgcyBmaWxtIGFjdG9yCmVvcyAtIDEgZAp3ZWFyaW5nIGEgYmxhY2sgbGVhdGhlciBqYWNrZXQKZ2lvdmFubmkgcGFvbG8gcGFuaW5pIHN0eWxlIGVwaWMKaGVkb25pYyB0cmVhZG1pbGwKaGVpZGkKZ2lybCBvZiB0aGUgYWxwcwp3aXRoIGNpZ2FyCm52aWRpYSBydHggcmVmbGVjdGlvbnMKb2N0YW5lIHJlbmRlciAxIDIgOCBrIHJlc29sdXRpb24KaGVucnkgY2F2aWxsISEhCnRoaW4gZ29sZCBkZXRhaWxzCmdpZ2FjaGFkIG11c2N1bGFyCnBvc2luZyBhbmQgZmxleGluZwpoZXJvIHdvcmxkIGF0YXJpCmhleGFnb25zIGluIHRoZSBza3kKa2l0YmFzaGluZwpoZWF2eSB1bmRlciBwYWludAptdXRlZCBjb2xvci4gbWluaW1hbGlzdApsdW1pbm91cyB3YXRlciBlbGVtZW50YWwKcHVycGxlIGxlYXRoZXIgZHVuZ2VvbiBiZWRyb29tCmhpZ2ggZGV0YWlsIHBob3RvIG9mIGEgZGVzZXJ0ZWQKYmFsYW5jZSBjb21wb3NpdGlvbgp2ZWdldGFibGUgZm9saWFnZQpoaWdoIGZhc2hpb24gbW9kZWwKc3p1a2Fsc2tpICYgYmxhZGUgcnVubmVyCnN6dWthbHNraSByYXZpIHZhcm1hCiEhIWFudGhyb3BvbW9ycGhpYyEhIQpiZWF1dGlmdWwgYWdlZCBhbmQgcnVzdGljIGZpbmlzaApwb3J0cmFpdCBvZiBpcm9uIG1hbgpwb3J0cmFpdCBvZiB0ZXJtaW5hdG9yCnBvcnRyYWl0IG9mIHRvbSBjcnVpc2UKcmVkIHdvb2RzIGNhbm9weSBsb3ZlCmJhY2tncm91bmQgc3BhY2UKZHJlc3NlZCBpbiBiaWtpbmkKZmlzaGxpa2UKc2NhbGVzIHNraW4gZG9nCmludHJpY2F0ZSB3aWNjYW4gc3BlY3RydW0KY29udG91cmxlc3MKYWRhbSBsZWUgYW5kIHdhbHQgZGlzbmV5CnRvbWF0byBzcGxhdHRlcgpzdHlsZSBvZiBhc2hsZXkgd29vZApoaWdobHkgZGV0YWlsZWQgY2hhcmFjdGVyIHNoZWV0CnRhcnRhbiBjbG9hawpiZWtzaW5za2kgc3R5bGUgcGFpbnRpbmcKYmFja2dyb3VuZCBhdG1vc3BoZXJpYyBlZmZlY3RzCnogZWQKZ3JleSBjb2xvcmVkIGV5ZXMKc2NpIC0gZmkgaG9ycm9yIGFydApwYXBlciBkcmF3aW5nCnBvc3RlciBwYXBlciB3aXRoIG5vdGVzCm1lZCBiYXkKbWVkaWNhbCBtYWNoaW5lcnkKbmVja2xhY2Ugb24gZGlzcGxheQpib2xkIGNyaW1zb24gb3JuYXRlIHJvYmVzCmluIGEgY2l0eSBwYXJrCnZpYnJhbnQgcGluawpibG9uZGUgY3JlYQpmZWF0aGVyZWQgaGVhZGRyZXNzCmluIHRoZSBqdXN0aWNlIGxlYWd1ZQppbiBhc3Nhc3NpbidzIGNyZWVkIDMKd2VsbCBkZXNpZ25lZCBmZW1hbGUgZHJhZ29uIGhlYWQKaXJvbiBhZ2UgOiBsZW9uYXJkbyBkYSB2aW5jaQpwb2x5cGhvbmljIGJpbyAtIGNvbW11bmljYXRpb25zCmFyY2FuZSByaXR1YWwKZW50YW5nbGVkIHZpYnJhdGluZwpoYXBweSBiaWcgY2h1bmd1cwpleHByZXNzaXZlIGVtb3Rpb25hbCBwaWVjZQplbW90aW9uYWwgZXhwcmVzc2lvbgpmbHVvcmVzY2VudCBjZWlsaW5nIGxpZ2h0cwppa2VhIHN0eWxlCjEgOCA3IDAgcyBlcmEgY2xvdGhpbmcKamRtCnRlYWNoaW5nCnBpeGVsIHNvcnRlZAp3YWtpbmcgdXAKbWV0YWwgbmVjayByaW5ncwpmcml0eiB3YWduZXIKb2xnYSB6YWtoYXJvdmEKYmx1ZSBjbGVhciBza3kKaG9saWRheSByZXNvcnQKaXQgaXMgdmVyeSBodWdlCnJlZGRpc2ggYmVhcmQKY2FyZGJvYXJkcyA7IG1lc3MKbmlnaHQgdG9reW8gbWV0cm9wb2x5Cm1hZGUgaW4gemJydXNoCmhvb2RlZCBza3VsbAp3ZWFyaW5nIGEgcm95YWwgcm9iZQpkYXJrIGp1bmdsZQplbGV2YXRvciBkb29ycyBsb29rIGxpa2UgYSBtb3V0aAp3aXRoIGEgdGVudGFjbGUgLSBzaGFwZWQgdG9uZ3VlCmxpY2tpbmcgb3V0CmhvcnNlIHJhY2luZyBza2V0Y2gKZ3J1bmd5OyBjb2xvcmZ1bApob3QgcGV0aXRlIHRlZW4gZ2lybAp1cCBjbG9zZSBpbWFnZQoxIC8gMSA2IHRoIHNjYWxlCmxpc3RpbmcgaW1hZ2UKaG90cm9kcyBkcml2aW5nIGRvd24gYSBzdHJlZXQKY29sb3JmdWwgaGlnaCBjb250cmFzdCBoZAplbmRsZXNzIHdhcgpzaW1wbGlmaWVkIHplbnRhbmdsZQpyZWFsaXN0aWMgdGV4dHVyZXMgZnJvbSBwaG90b3MKaG96aWVyCmRyZWFteWFydAptYXR0ZXkKcm9jb2NvIGVsZW1lbnRzCmljeSBsYW5kc2NhcGUKdmVyeSBodWdlIHdhdmVzCmh1bWFjaGluZSBodW1hbml6ZWQgZXhwZXJpbWVudAptb250YWdlIG9mIGdyaWQgc2hhcGVzCnZzeApweXJvZ3JhcGh5CnBhaW50IGRyaXBwaW5nCmh1bWFub2lkIGFuaW1hbApiYXJjb2Rlcwpsb3ZlIGFuZCBkZWF0aAptZWNoYW5pY2FsIGhhbmRzCnZvbHVtZXRyaWMgb2N0YW5lIHJlbmRlcgpjZW50ZXJlZCByaW0gbGlnaHRpbmcKbWl4ZWQgYXJ0Cmh1bnRlciBhbG9uZSBpbiB0aGUgd2lsZGVybmVzcwppbnRyaWNhdGUgY2xvd24gY29zdHVtZQpodW50cmVzcwpzdWl0IG9mIGFybW9yCmhhbGYgaG9yc2UgLSBoYWxmIG1vdXNlCnNlcnBlbnRpbmUgd2F0ZXIgbW9uc3RlcgptYW5zaWsgeWFuZwpsb25nIGJydXNoIHN0cm9rZXMKcmVhY3Rpb24tZGlmZnVzaW9uIHBhdHRlcm4KYmxhY2sgaW50ZW5zZSBleWVzCm1vZGVybiB3YXIgcGhvdG9ncmFwaHkKZGVlcCBjeWJlcnB1bmsgbWVjaGFub2lkCnNoYW1hbnB1bmsKbGFyZ2UgdG9uZ3VlCmxvbmcgZmxvd2luZyBibHVlIGhhaXIKcmVhbG0gb2YgdGhlIG92YXJpYW4gbWFjaGluZQpjeWJlcnB1bmsgdXRvcGlhCmx1c2ggZm9saWFnZSBjeWJlcnB1bmsKYW4gYXVzdHJhbGlhbiBzdW1tZXIgbGFuZHNjYXBlCnNvcmF5YW1hIGFuZCBtb2ViaXVzLiBvY2N1bHQgYXJ0CmVtZXJnaW5nIGhhbmRzCnByb2R1Y3QgZGlzcGxheQppbnRpbWF0ZSBob2xkaW5nIGNsb3NlCmludGltYXRlbHkgaG9sZGluZyBjbG9zZQpwbGF0ZWQKcmVhbCB0ZWV0aAptdXBwZXQgc2hvdwpkciBzdHJhbmdlIGFuZCBkciBzZXVzcwphbGwgb3Zlcmx5IGV4Y2l0ZWQKYWxsIHRlZXRoCmNodW5rIHRlZXRoCmVwaWNhbnRoYWwgZm9sZApuaWdodCBpbiB0aGUgZm9yZXN0CnByaXN0aW5lIHNraW4KcG9ydHJhaXQgYmlnIGRhcmsgZG9nCmxvZ29zCndlYXJpbmcgYmxhY2sgc2lsayByb2Jlcwp3ZWFyaW5nIGZ1Y2hzaWEgc2lsayByb2JlCm51biBmYXNoaW9uIG1vZGVsIGxvb2tpbmcgdXAKZ3JhZGllbnQgbWl4ZWQgd2l0aCBuZWJ1bGEgc2t5CnNwYWNlc2hpcCBzYW5rCnNwcmluZyBibG9vbWluZyBmbG93ZXJzIGdhcmRlbgpibHVlIGdyYXNzCmVyaWMgemVuZXIgY2FtIGRlIGxlb24KZ2lybCBpbiBzdHVkaW8Kbm9tYWQgbWFzdGVycGllY2UKaHlwZXJyZWFsaXN0aWMgamVmZiBnb2xkYmx1bQpvYmplY3QgY2VudGVyZWQKcmVhbGlzdGljIGZsZXNoCndpdGggc3F1YXJlIGdsYXNzZXMKbWlycm9yIGRyaXBwaW5nIGRyb3BsZXQKd2hpdGUgYm9yZGVyIGZyYW1lCm9ybmF0ZSBzdXByZW1lIGRlbW9uIG92ZXJsb3JkCmludHJpY2F0ZWx5IHByb3BvcnRpb25hbAp0cmVuZGluZyBhcnN0YXRpb25ocQpzZWUgZmlzaGVzIHN3aW1taW5nCmkgc2FpZAppY2VsYW5kIGFzdHJvcGhvdG9ncmFwaHkKaWNvbiBmb3Igd2VhdGhlciBhcHAKMiA1IDYgeCAyIDUgNgpwZXRlciBtb3JiYWNoZXIgc3R5bGUKaWxsdXN0cmF0ZWQgbG9nbwp3ZWFyaW5nIGZpc2huZXRzCnN1cnJlYWxpc3RpYyByb21hbiBhcmNoaXRlY3R1cmUKZGlnaXRhbCBwYWludGluZyB8IGludHJpY2F0ZQptYXJrIHp1Y2tlbmJlcmcKb2xnYSBrdXJ5bGVua28KY2xvdWRzIHN3aXJsaW5nCnNreSBzZXR0aW5nCmRpc3RhbnQgdG93biBpbiB2YWxsZXkgYW5kIGhpbGxzCndlYXJpbmcgYmxhY2sgY2xvdGhlcyBhbmQgY2FwZQpmdXJ5IHJvYWQKb3JhbmdlIGFuZCB5ZWxsb3cgY29zdHVtZQpzaG9ydCByb2J1c3Qgd29tYW4KYWRvYmUgaWx1c3RyYXRvcgppbnNpZ2h0ZnVsCmx1bWlub3VzIG11dGVkIGNvbG9ycwpwb3J0cmFpdCBtYWRlIG9mIHBhaW50CmF0bW9zcGhlcmUgb2YgYmxvb2R5IHJhaW4KaW4gYSBkcmVhbQpzY2VuaWMgcHJhaXJpZSBpbiBiYWNrZ3JvdW5kCmZsb3dpbmcgYmx1ZSBza2lydAp5MmvigJ0KYmFjayBsaXQgdmVydGlnbyBmZWFyIG9mIGhlaWdodHMKem9tYmllIHJlYWNoaW5nIG91dCBvZiBhIGdyYXZlCnJvYm90IGFybSBza2VsZXRvbgpiaWcgcm9ib3QgaGFuZApicmlja3MgZmx5aW5nCm1ldGFsaWMgcmVmbGVjdGlvbnMKcGlwZSBqdW5nbGUKYXRhcmkgbG9nbwpiYWNrbGl0IHNob3QgZ2lybCBpbiBwYXJrYQp2ZW5vbSBmYW5ncwpjYXJuYWdlIGZhbmdzCmNhcmJvbiBmaWJlcnMKaW5kaWFuIG1hc3RlcgppbmRpc3RpbmN0IG1hbiB3aXRoIGhpcyBoYW5kIHVwCnVsdHJhIC0gd2lkZSBzaG90CndhciBhY3Rpb24KZmFzdCBoZWxtZXQKdHJpcAppbm5lciB3YXJkIG9mIGEgbWVkaWV2YWwgY2FzdGxlCmdyZWVuIGxpZ2h0IGR1c3QKd29vZGVuIHNpZGUgdGFibGUKYXdhcmQgd2lubmluZyBjb250ZW1wb3JhcnkKaW50ZXJpb3IgZGVzaWduIGxpdmluZyByb29tCnJ1c3NpYW4gbmVvY2xhc3NpY2lzbQppbnNpZGUgYSB0b21iCmluc2lkZSB0aGUgY3VybCBvZiBhIHdhdmUKaW5zaWRpb3VzCnBpZXJjaW5nIGNsZWFyIGV5ZXMKaW5zdGFudCBwaG90b2dyYXBoIG9mIHRoZSBza3kKaW50ZWxsZWN0dWFsIGhlZGdlaG9nCnNtYXJ0IGhlZGdlaG9nCmhlZGdlaG9nIHdpdGggZ2xhc3NlcwpoZWRnZWhvZyB3aXRoIHBpcGUKaW4gYSBmYW5jeSBlbGFib3JhdGUgZHJlc3MKdmlkZW9nYW1lIHN0eWxlCnNvbWUgc2FuZHkgeWVsbG93IHBpbGxvd3MKaW50ZXJpb3Igb2YgYSBzdGFyIGRlc3Ryb3llcgpkYXJrIHRlYWwKdmlicmFudGx5IGNvbG9yZnVsCmludGVyc3RlbGxhciBjaXZpbGlzYXRpb24KaW50byBnbG9yeSByaWRlCnJ1dGtvd3NreWkKd2hpdGUgYW5kIHBhbGUgYmx1ZQplYXJ0aCBnb2RkZXNzIG15dGhvbG9neQppbnRyaWNhdGUgY3lib3JnCnZlcnkgdGlyZWQKd2VhcmluZyBzZWFzaGVsbCBhdHRpcmUKZ29sZCBib2R5CmxhcmdlIHBvcmUgZnVuZ2kgZW1icm9pZGVyZWQKdW5pdHkgb2YgbW9vZAptYXRlcmlhbCBpcyEhISB3YXRlcm1lbG9uISEhCm1hbmRlbGJ1bGIgdGV4dHVyZXMKY2xlYW4gbWVkaWNhbCBlbnZpcm9ubWVudApwdXJlIHNraW4KZmlzaCBzcXVpZCBhbmQgamVsbHlmaXNoCmJsZXNzaW5nCndvb2QgYnVybgpkcmVhbXkgZmxvcmFsIGJhY2tncm91bmQKaW52aWNpYmxlCmludmlzaWJsZSBtYW4KbmVvbiBqZWxseWZpc2gKaXBlcmRldGFpbGVkCnNhbnRhCjMgZCBhbmltYXRlZCBtb3ZpZQp2aXN1YWxseSBzdHVubmluZyBzY2VuZQppbmtpbmcgZXRjaGluZyBzY3JlZW4gcHJpbnQKNCBjYW5uYWJpcyBwb3RzCmRpYWdyYW0gc3BlY2lmaWNhdGlvbnMgbm90YXRpb25zCnJlbSBrb29saGFhcwpibGFkZSBydW5uZXIgY29sb3IgcGFsZXR0ZQpzYWxlbXMgcmV2ZW5nZQoxIDUgNiA2Cml0J3MgeW91IGFuZCBtZQpqIC0gbG8KamFjayB3aGl0ZQoxIDkgMyAxCmphbWllIGxlZSBjdXJ0aXMKZHluYW1pYyBwcm9wb3J0aW9uCnNlcGlhIHN1bnNoaW5lCnRva3lvIC0gZXNxdWUgdG93bgpkaXN0YW5jZSEhISEhISEgc2hvdAptb2NhcApqYXBhbmVzZSBzY2VuZXJ5IGluIGVkbyBwZXJpb2QKamFzb24gbW9tb2EgYXMgYXNzeXJpYW4KaG9sZGluZyB0aGUgbGFycnkgbydicmllbiB0cm9waHkKdHJpdW1waGFudCBmYXRlCnRoZSBiaWcgbGVib3dza2kKamVsbHlmaXNoIHdlYXJpbmcgZ2xhc3NlcwprcmFtZXIKaW4gY2xvdWRzIG9mIHNtb2tlCm1pY3Jvc2NvcGljIHZpZXcKZ29sZGVuIHN1bgpleHVkZXMgdGVycm9yCm15c3RlcmlvdXMgYnJlYXRoCmpld2VscnkgZGlzcGxheQpwaW50ZXJlc3QgcG9zaW5nCmFzIGEgY2xheW1hdGlvbiBjaGFyYWN0ZXIKam9lIGJpZGRlbgplbnZpcm9ubWVudGFsIGFydHdvcmsKcGhvdG8gZXBpYyBvZiB0aGUgeWVhcgphcnRpc3RpYyBsaXRob2dyYXBoeQpodWdlIGJsb25kIG1vdXN0YWNoZQpvY3RhbmUgcmVuZGVyIGhkIDQgawpqb3VybmV5IHRvIHRoZSB3ZXN0LiBwb3AgYXJ0CmFzIGEgbWFuZ2EgcGFuZWwKbWFuZ2Egc2NhbnMKYmlnIGdyYXZleWFyZCBncmF2ZXN0b25lcwpqdWRnZSBqdWR5Cmltb2dlbiBwb290cyBkJmQgcGFsYWRpbgpqdXh0YXBvc2l0aW9uIGR5c3RvcGlhbgprYW1lbG90IGFsYnVtIGNvdmVyCmthbWVuIHJpZGVyIGFjdGlvbiBwb3NlCm9uIHRva3lvIGN5YmVycHVuayBuaWdodCByb29mdG9wCmdvcmdlb3VzIGJlYXV0aWZ1bAprYXRlIGJlY2tpbnNhbGUgd2VhcmVkIGFzIHRoaWVmCndlYXJpbmcgc3dlYXRlcgprYXR5IHBlcnJ5IGZpeGluZyBhIGxlYWtpbmcgc2luawprZWFudSByZWV2ZXMgYXMgZ2VyYWx0IG9mIHJpdmlhCmtldGFtaW5lIGRyZWFtcwprZXZpbiB0aWdoZSB3aXRoIHJhbmR5IG1hbnRvb3RoCmZpbmVseSBkZXRhaWxlZCBleWVzCmNsZWFuIGFuaW1lIGFydApraGFtZW5laQp0b3kgY29tbWVyY2lhbCBwaG90bwpraWxsdWEgem9sZHljayBwb3J0cmFpdApyb3NlIGhhaXIKdHJhbXBsZWQKdmF0aWNhbiBpbiBiYWNrZ3JvdW5kCmNsb3VkIG9mIHNhbmQKYmx1ZSBncmF5Cmtpbmcgb2YgdGhlIGRlc2VydApzZXJ2ZWQgd2l0aCBwYXN0YQpnb2xkZW4gZGV0YWlsaW5nCndpZGUgYmVsdCBzY2FiYmFyZApwYWxtCmluZHVzdHJpYWxwdW5rIHBhcGllciAtIGNvbGxlCmludGVyaW9yIG9mIGEgYmF0aHJvb20KaGFsZiB3b29kZW4gcGlub2NjaGlvCjEgOSAyIDAgcyBoYWlyc3R5bGUKY29sb3VyZWQgaW4gb3JhbmdlIGZpcmUKc2tlbGxldG9uCnRlYWwgYW5kIG9yYW5nZSBjb2xvdXJzCnNhY3JlZCBudW1iZXJzCm5pa29uIDEwbW0Ka29yZWFuIG11c2NsZSBib3kgMiAxIHllYXJzIG9sZApwaG90b2dyYXBoIG9mIGRyYWtlIHRoZSByYXBwZXIKa3VudGlsYW5hayBvbiBiYXlhbiB0cmVlCmt1cmlzdSBtYWtpc2Ugc3RlaW5zIGdhdGUgYW5pbWUKa3lsbyByZW4KeW91dHViZSB2aWRlbyBzY3JlZW5zaG90CmdpYW50IHN0YXIKbGFkeSBwYWx1dGVuYQp2ZXJ5IGxhcmdlIGJvc3VtCnN3ZWx0ZXJpbmcgaGVhdApmbG9yYQpoYXp5IHN1biBhbmQgbXlzdGljYWwKYmlnIHRvd2VycwppcmlkZXNjZW50LiBmYW50YXN5CmFydCBvZiBrcnlzc2FsaWFuCnNwcmluZyBldmVuaW5nCiggZmV3IGNsb3VkcyApCmxhbmd1YWdlIGxlYXJuaW5nIGxvZ28KbGFyYSBjcm9mdCBtZWRpZXZhbApzdHJlZXQgcGhvdG9ncmFwaApncmF5IGNvbmNyZXRlCnJ1YW4gamlhbgpqYXBhbmVzZSBrYXdhaWkgc3R5bGUKaG9yaXpvbiB6ZXJvIGRhd24gYWVzdGhldGljCm1hbnkgZ2xvd2luZyBsaWdodHMKYWxsIHNrZWxldG9ucwpwdWxwIHNjaWZpCnN0aXRjaGVzCmxlYWRlciBvZiBmYXNjaXN0IGh1bmdhcnkKYmlnIGxvbmcgY2xvdGggb24gdGhlIHdpbmQKbGVicm9uIGphbWVzIHNvbGVtbiBhdCB0ZWEgcGFydHkKd2l0aCBodWdlIHJwZwppbWRiIHBvc3RlciBzdHlsZQp0YWJsZSB3aXRoIG1pY3JvcGhvbmVzCnJlbmFpc3NhbmNlIGVyYQpsZXR0ZXIgYQpleGNoYW5nZSBsb2dvCnNvbGFyIGVjbGlwc2UgaW4gdGhlIHNreQpyZWQgbGVmdCBleWUKZjQyCmNvbm5lY3Rpdml0eQpoaWdobHkgZGV0YWlsZWQgemVuIG5lb24KaGlnaCBkZXRhaWxlZCBmYWNlISEhCnJlZCBoZWFydHMKYXVtCmNvc21pYyB3ZWFwb25zCnN0cmVldCB3ZWFycwpkdW90b25lIQp3b29kIHByaW50CmxpdHRsZSBhbmdyeSBnaXJsIHdpdGggYmx1ZSBoYWlyCmJsYWNrIGFuZCB3aGl0ZSBhcnR3b3JrCmhpZ2hseSBzaGFycCBkZXRhaWxzCmxpdHRsZSBnaXJsIHdpdGggbWFnaWNhbCBwb3dlcnMKbGl2aW5nIHJvb20gaW50ZXJpb3IgZGVzaWduCm5pZ2h0dGltZSEhISEhIQpzdHVkaW8gZ2hpYmxpISEhCnN0ZWFtcGFuayBzdHlsZQpnb256YWxvIGZ1ZW5tYXlvcgpiaWcgcmVkIHN1bgpsb2dvIGZvciBhIHNvY2lhbCBuZXR3b3JrCmV2ZXJ5dGhpbmcgZW5jbG9zZWQgaW4gYSBjaXJjbGUKbmF0dXJhbCBzaG9ydCBoYWlyCmhlaWFuCmJsYWNrIHdoaXRlIGdvbGQKc2FhYiAzOSBncmlwZW4KaGVhdnkgaW5rISEhISEhISBtaWtlIG1pZ25vbGEKd2FybSBhaXIKY2xvdWR5IGF0bW9zcGhlcmUKcmVkIGdyZWVuIGNvbG9yIHBhbGV0dGUKcHJvcG9ydGlvbmFsIGltYWdlCmFycm93ZWQgbG9uZ2JvdwpmYW50YXN5IHJwZyB3ZWFwb24gYXJ0CmZlbWluaW5lIGZlbWFsZQpsb29rZWQgYXQgYmlnIHdpbmRvdwpzdW5ueSBkYXkgdGltZQpjb25uZWN0ZWQgd2l0aCBoYW5naW5nIGJyaWRnZSEhCmxvb2tpbmcgZG93biByb2FkCm9uZSBzaW5nbGUgbGFtcApkb29yIHRvIGxhYgpsb3N0IGluIGEgZm9yZXN0Cmxvc3Qgc291bHMgc2VhcmNoaW5nIGZvciBub3RoaW5nCmxpZ2h0Ymx1ZSBhY3J5bGljIHBhaW50ZHJpcCB0YXIKZWR3YXJkIGhvcHBlciBmaWxvbm92CnN1bW1vbmluZyB0ZXJyaWJsZSBvZGRzCmZhaQpsb3ZlbHkgZGV0YWlsZWQgZmFjZXMKbG92ZXJzIG1lbHRpbmcgaW50byBiZWQKc2xlZXBlcnMKaW5zaWRlIGFuIGFsaWVuIGp1bmdsZQppbW1lcnNlZApzcGFjZXNoaXBzIGZseWluZyBpbiBiYWNrZ3JvdW5kCm1vb2R5IG5pZ2h0IHRpbWUgc2NlbmUKY29sb3JmdWwgc3dpcmxzIG9mIHBhaW50CmZhdCBjaGliaSBncmV5IGNhdApiYWNrIGNhbWVyYQp1bmRlcndhdGVyIHN0YXR1ZXMKNCAyIDAgMCBrCmxvd3JpZGVyIGNyYXNoIHRlc3QKOCBrIGNoYXJhY3RlciBjb25jZXB0IGFydAp4IHdpbmcgc3RhcmZpZ2h0ZXIKbHV4YW5uYSBjcm93bmd1YXJkCnN0cm9uZyBiZXNwb2tlIHNoYXBlIGxhbmd1YWdlCnByb2R1Y3QgZGVzaWduIHNob3QKbHZpdgpnaW50YXMgZ2FsdmFuYXVza2FzLiBzaGFycCBmb2N1cwp1bHRyYSBhY2N1cmF0ZQpkaWdpdGFsIHBhaW50aW5nIHBob3Rvc2hvcAp1bHRyYSBkZXRhaWxlZCBoZHIgOCBrCndpZWxkaW5nIGFzc2F1bHQgcmlmbGUKdmlicmFudGx5IGx1c2gKbWFnaWNhbCBmb3Jlc3Qgd2l0aCBmaXJlZmxpZXMKa2l0IGJhc2gKcGFpZCBhcnQgYXNzZXRzCm1hZ2ljYWwgc3dvcmQKamFwYW5lc2UgYWtpaGFiYXJhIGNhZmUKbWFpZGVuIHdpdGggY29wcGVyIGhhaXIKdmlydHVhbCBpbnN0YWxsYXRpb24KbXlyaWFkCm1ham9yYSBtYXNrCm1hbGUgYmFyZAp2ZXJ5IGJlYXV0aWZ1bCBsaWdodGluZwpwaWxlcyBvZiBib2RpZXMKY2hhcmFjdGVyIHBvcnRyYWl0IGNsb3NldXAKbHVrZSBldmFucwpleWVzIHByb2plY3RlZCBvbnRvIHZpc29yCmludHJpY2F0ZSBhc3Nhc2luIG1lY2hhIGFybW9yCmludHJpY2F0ZSBhc3Nhc2luIGFybW9yCnlvdW5nIGRhdmlkIGJvd2llCnRydXNzIGJ1aWxkaW5nCmdlb2Rlc2ljIGJ1aWxkaW5nCmVudHJhbmNlIHRvIGEgZGFyayB0dW5uZWwKemRpc2xhdiBiZXhpbnNraQo1IGZlZXQgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhCjggZmVldCBmcm9tIHRoZSBjYW1lcmEKbWFuIGluIGZ1dHVyaXN0IDYgMCDCtCBzIGxhYgptYWNoaW5lcyBhbmQgZnV0dXJpc3Qgcm9ib3RzCm1hbiBpbiBzaWx2ZXIgc3BhY2Ugc3VpdAptYWdpYyBhcm1vcgpzZXJ2YW50IG9mIGRhcmsgbW90aApwb3NlIHJlZmVyZW5jZQpwbGFpZCBza2lydAppbiBhIGtpdGNoZW4KYmlnIHNuYWtlcyBoZWFkcwpmYWJ1bG91cyBpbGx1c3RyYXRpb25zCm1hcmEgamFkZSBza3l3YWxrZXIKZ2lsdCBtZXRhbApyaWNoIG1hcmJsZXMKd2V0IGJvb2R5Cm9pbCBvbiBib2FyZAptYXJpbiBraXRhZ2F3YQpteSBkcmVzcy11cCBkYXJsaW5nCm1hcmlvIGFzIHRoZSB3aXRjaGVyCm1hcmlvIGthcnQKaW5oYWxpbmcgdGhlIHNvdWxzIG9mIGh1bWFuaXR5Cm1hcmtldCBpbiBqYXBhbgptYXJ5IGxvdWlzZSBicm9va3MgMiA1IHllYXJzIG9sZApkcmVzcyBtYWRlIHdpdGggY2lyY3VpdCBib2FyZApkZXNuYQptYXN0ZXJwaWVjZSBjb250cml0ZSBjb251bmRydW0KZHJhZ29uIGNlbnRlcmVkCm1heWEgYWxpIGFzIGQmZCBtYWdlCmNvd2JveSBoYXQgYW5kIGdsYXNzZXMKb24gdGhlIGFsdGFyCnZvaWd0bMOkbmRlciBsZW5zCm9uZSBoZWFkIHBvcnRyYWl0CmNvbXBsYWludHMKbW9ub2dyYW0KNCBrIF0KY29sb3JmdWwgd2FyY3JhZnQgYXJjaGl0ZWN0dXJlCm5lbyBjbGFzc2ljYWwgYXJjaGl0ZWN0dXJlCmJsb25kZSBicml0aXNoIG1hbgppbnRyaWNhdGUgY2luZW1hdGljIGxpZ2h0Cm1hdXNvbGV1bSBydWlucwpkZXRhaWxlZCB3b29kY3V0IGFybW9yCndhcm0gaHVlCndhdGNoaW5nIHRoZSBzdGFycwpmb3N0ZXJzCm1jbGFyZW4KbWVjaGEgYW50aHJvcG9tb3JwaGljIHBlbmd1aW4KY2luZW1hdGljIGJlZXBsZQptZWNoYW5pY2FsIHJvYm90aWMgb2N0b3B1cwptZWRlaXZhbCBmYW50YXN5IHRvd24KbWVkaWV2YWwgY290dGFnZSBpbnRlcmlvcgptaWxscwpzdG9uZSBwYXRod2F5cwpnYXplYm9zCm1lZGlldmFsIGZhbnRhc3kgYmF0dGxlCm1lZGlldmFsIGtuaWdodCBwb3dlciBhcm1vdXIKb3ZlciBhIGNhbGFucXVlCmNocm9tYXRpYyBhYmJlcmF0aW9ucwoyMjIzMTk0MDA5CmdydW5nZSBzdHlsZQpzdXBlciByZXZvbHV0aW9uCmJlYXV0aWZ1bCBmZW1hbGUgZ29yZ29uCnVrcmFpbmlhbiBuYXRpb25hbCBjbG90aGVzCmFzc2FtZXNlIGFlc3RoZXRpYwptZWx0ZWQgcGFpbnQKZHJlc3NlZCBpbiByZWQgcGFwZXIgYmFncwpmcmFjdGFsIGFtYWxnYW1hdGlvbgpib3R0aWNlbGxpIHN0eWxlCnljYmNyCm9yYW5nZSB0byBibHVlIGdyYWRpZW50CmJsdWUgc2lsayBkcmVzcwptZXRhbGxpYyBhc3Rlcm9pZApzbW9vdGggZGVzaWduCmNvdXJ0ZXN5IG1iYXJpCmFuaW1hbCBza2lucwpzbWFsbCB3aWRlIHNtaWxlCm1hbmRlbCBleWVzCnNtYWxsIHBsdW1wIGxpcHMKcmVtYnJhbmR0IGFydCBzdHlsZQpzb2Zpc3RpY2F0ZWQKbWlrZSB0b21saW4gYXMgZG9jdG9yIHdobwp3aXRoIHBsYXNtYSBndW5zCmJydXRlCm9jdGFuZSByZW5kZXIgcGhvdG9yZWFsaXN0aWMKYmxhY2sgb2N0YW5lIHJlbmRlcgp2aXZpZCBwc3ljaGVkZWxpYyBjb2xvcnMKbW91bGluIHJvdWdlCm1pbGxlbml1bSBmYWxjb24KY2FmZSBmb3IgbWljZQpqZWxseW1lYXQKY3RoeWxsYSdzIGxhYm9yYXRvcnkhCnRpbWUgZXhwb3N1cmUKbG9vc2VseSBkZXRhaWxlZApvZGlzc2V5Cm1pbmltYWxpc3RpYyBsb2dvCm1pbm90YXVyIGluIGFuY2llbnQgYXJtb3IKcGV0ZXIgY2h1bmcgKyBtb2ViaXVzICsgbG9pc2gKd2F0ZXJmYWxsISEhISEKaGF6eSBmb2cKbW9iaWxlIGdhbWUgYXNzZXQKdHJpcHB5IG1vb2QKb24gYSBncmVlbiBoaWxsIGJldHdlZW4gdHJlZXMKd2hpbGUgaG9sZGluZyBhIHN3b3JkCnN2ZyBhcnQKbW9kdWxhciBpdGVtCm1vZ3VsCnZpYnJhbnQgbW92aWUgcG9zdGVyCnJpY2sgZGFpCnlvbGllIGxlaWYKYWRhbSBtb29yZQptb25zdGVyIGdyYXZleWFyZCBjaGFpcgpzbm93IGJsaXp6YXJkCmNvbnRyYWN0aW5nIGNvbG9ycyBtb29kCmhhbmQgZ2xhemVkIHBvdHRlcnkgc2hhcmRzCm1vc3QgZXBpYyBsYW5kc2NhcGUKaW50cmljYXRlIGFuZCBmaW5lbHkgZGV0YWlsZWQKbW9zaHJvb21zIG9uIGdyb3VuZApicmlnaHQgbGFuZHNjYXBlCnRlYWwgbGFuZHNjYXBlCnRhbGwgcm9vdCB0cmVlIGJhY2tncm91bmQKZmFudGFzeSBmb3JyZXN0IGJhY2tncm91bmQKdGVhcG90cwpibG9vZGVkCmJlcm5pZSBnb2VzIHRvIHZlZ2FzCmRyZXcgc3RydXphbiBzdHlsZSBhcnQKam9obiBjaG8KNCBrdWhkCmJsZWVkaW5nIGluIHRoZSBiYXRoCmRjIHZzIG1hcnZlbCBmYXNoaW9uCmRldGFpbGVkIHNtaWxlZCBmYWNlCnBpeGFyIGFuZCBpbHlhIGt1dnNoaW5vdgp0YW1hZ290Y2hpCnJlZCBtZXNoIGluIHRoZSBmYWNlZGUKZGVzaWNjYXRlZApwYWludGVkIG9uIGEgZ2lhbnQgd2FsbAp0aHVuZGVyIGluIHRoZSBmb2dneSBqdW5nbGUKd2Fsa2luZyB0aGUgd2lsZCB3ZXN0IHdhc3RlbGFuZHMKaGlyb3lhIG9rdSBwYWludGVybHkKY2xheW1vcnBoaXNtCmRyYW1hdGljIGlsbHVzdHJhdGlvbgpwZWFjZWZ1bCBjbG91ZHMKaW50cmljYXRlIGNyeXN0YWwgamVsbHkgb3JuYXRlCmhnIGdpZ2VyIGZsb3JhIGJvcnNpCmx1bWluZXNjZW50IHdpc3BzCndhcmhhbW1lciBuYWdhc2ggaGF1dGUgY291dHVyZQpoYXBweSBmZW1hbGUgYWxpZW4KY2luZW1hdGljIGNoYXJhY3Rlcgp0aHJlZSAtIHF1YXJ0ZXIgdmlldwpjaGluZXNlIGJsdWUgYW5kIHdoaXRlIHBvcmNlbGFpbgoyIDQgbW0gbGVuc2VzCm1pc3QgbG93IG92ZXIgZ3JvdW5kCnNvdXRoIGFmcmljYW4gY29hc3QKZmlsbSBjaW5lbWF0b2dyYXBoeQpkYXJrIGJsb25kIGxvbmcgaGFpcgphbiBhcmNod2F5CmJsYWNrIHdoaXRlIHBhc3RlbCBwaW5rCnNsaWdodGx5IGhvbG9ncmFwaGljCmNhbm9uIHdpZGUgLSBhbmdsZSBsZW5zCnVucmVhbCA1IDggayBkZXB0aCBvZiBmaWVsZApzdGFycnkgc2t5IDggawpuaWdodCBza3kgZnVsbCBvZiBmbG93ZXJzCmluIHNhbnRvcmluaSBpc2xhbmQKcm9hZCBiZXR3ZWVuIHRhbGwgdHJlZXMKbmluYSBkb2JyZXYKbWVyY2VkZXogYmVuegpiZW50bGV5Cm5vIGZ1dHVyZQpnb2xkc3JjCmRhcmsgY29ybmVycwpkZWZvcm1hdGlvbnMKbG91CmhzdgphaXJwbGFuZXMgYm9tYmluZyB0aGUgYmVhY2gKbnVyc2UgdW5pZm9ybQpvY3RvcHVzIHNpbGhvdWV0dGUgYXQgZGVwdGgKYmxhY2sgbWF0dGUgZmluaXNoCmJsdWUgYW5kIHdoaXRlIGFuZCBnb2xkCndpdGggYWNpZW50IGNoaW5lc2UgY2xvdGhlcwp0ZWNoIGhlbG1ldAp0YWxsIHRoaW4gYnVpbGQKaGUgaGFzIGJpZyBrbml2ZXMgb24gaGlzIGJlbHQKcGhvdG8gc3R1ZGlvIGNvbXBvc2l0aW9uCmRlZXAgdW5kZXIgd2F0ZXIKaXRhbGlhbiBiZWFjaCBzY2VuZQp0cmFuc3BhcmVudCBnbGFzcyB2YXNlCmF2YW50ZSBnYXJkZQp3ZWFyaW5nIHJlZCBmdXIgY2xvYWsKZWxlZ2FudCBhbmQgcmVmaW5lZCBwYWludGluZwp0b2t5byBpbnNwaXJlZApzbWFsbCBlbG9uZ2F0ZWQgcGxhbmVzCm9pbCBwYWludGluZyBvZiBhbiBvdmVycG9wdWxhdGVkCmZpbGlncmVlIGFybW91cgpvbiBrbmVlcwpvaWwgcGFpbnRpbmcgb2YgZHJhZ29uCnNpdHRpbmcgaW4gZmFuY3kgY2hhaXIKc3RhbmRpbmcgaW4gYWJhbmRvbmVkIGJ1aWxkaW5nCm9pbCBwYWludGluZyBvZiBwcmluY2VzcyB2dWx2aW5lCndlYXJpbmcgY29sbGFyIG9uIG5lY2sKc3VyZ2ljYWwgbWFzayBjb3ZlcmluZyBtb3V0aApzY2ktZmkgY2xhc3NpYwpnbG93aW5nIHRocmVhZHMgb2YgZHJvcApjaHJ5c2FudGhlbXVtcwppcmlzZXMKd2F0ZXIgamV0cwpmaXJlZmx5IGxpZ2h0cwp0d2lsaWdodCBqdW5reWFyZApjeWJlcnB1bmsgZ2FyZGVuCm9sZCBjb3dib3kgaW4gdGhlIGFyY3RpYwpvbGQgZ2lnYWNoYWQgd2l0aCBncmV5IGJlYXJkCm1hZ2ljYWwgZ2xvd2luZyB0aW1lIHBvcnRhbApvbGQgbGFkeSBzY3JlYW1pbmcgYW5kIGxhdWdoaW5nCnNpdHRpbgozIGQgc3R5bGl6ZSBzY2VuZQppbiBhbiBhbWVyaWNhbiBzdWJ1cmIKZHViYmVsIG5lZ2F0aXZlIGV4cG9zdXJlCmZvY3VzZWQgb24gbmVjawphdHRyYWN0aXZlIHNwb3J0eSBwaHlzaXF1ZQpvbWJyZSBmaXNobmV0IGdvd24Kc3VwZXIgZGV0YWlsZWQgb2N0YW5lIHJlbmRlcgpvbWlub3VzIHJlZCBjdW11bG9uaW1idXMgY2xvdWRzCndlYmdsIHJlbmRlcgphbmltZSBpbGx1c3RyYXRlZApmYW50YXN5IHBvcnRyYWl0IGFydApkZXNlcnQgb2FzaXMgYmFja2dyb3VuZApiYWNrZ3JvdW5kIGJhc2lsaWNhISBzYWNyZSBjb2V1cgp5YW15IHlhbXkKaW4gdGhlIG1pZGRsZSBvZiBkYXJrIGZvcmVzdApmdWxsIGZhY2UgZnJvbnRhbCBjZW50ZXJlZApvbmlvbiBtYW4gcG9ydHJhaXQKY3Jvd2QgaGFpbHMgaGltCmluIGEgcmVkIGRyZWFtIHdvcmxkCm9ubXlvamkKb3ZlcmZsb3dpbmcgZmVhc3QgYnVmZmV0IHRhYmxlCmdlbnRsZW1hbidzIGNsdWIgbG91bmdlCnN0dWRpbyBnYWluYXggYXJ0CndoaXRlIGhvbG9ncmFwaGljIHBsYXN0aWMKZWxlY3RyaWMgaGFpcgp0aGUgdW5kZXJ3b3JsZApicnV0YWwgc2hhcGVzIGhpZ2ggZGV0YWlsIDhrCm1hbGV2b2xlbnQgc21pbGUKYmV0cmF5aW5nIGVkZW4KZGVmeWluZyBnb2QKZW1tYSBicmlkZ2V3YXRlciBhbmQgcGFwZXJjaGFzZQpmbG93ZXJzIGNvdmVyaW5nIGV5ZXMKc3RvcCBmcmFtZSBhbmltYXRpb24KZnVsbCBmaWd1cmVkCm91dCBpbiB0aGUgZGFyawpoZWF2eSBjb21wcmVzc2lvbiBmaWx0ZXIKcHJldHR5IGJsdWVleWVzCm1hbnkgdmFyaWF0aW9ucyBvZiB0aG9tIHlvcmtlCnRyZWUgYW5kIHBsYW50cwpmYWxjb24gYm1zCnBhZ29kYSB3aXRoIGEgbG90IG9mIHdpbmQgY2hpbWVzCmxpZ2h0IGVmZmVjdC4gbW9kZXJuIGZhbnRhc3kKZGl2aW5lIGdvZApwYWludGVkIHBvcnRyYWl0IG9mIG1vcmRla2Fpc2VyCmlsbHVzdHJhdGlvbiBkZXRhaWxlZAo4IGwKd2V0IGdyYXNzIGFuZCBzdG9uZXMKc3Vuc2V0IHN1bnJpc2UKdCBhcnRmdWxseSB0cmFjZWQKcGFpbnRpbmcgb2YgbWVocmFuZ2FyaCBmb3J0CnBhaW50aW5nIG9mIGEgY2F0CmZyYW5rIGZyYXpldHRlCm11dGVkIGNvbG9ycyEKcGV0cmEgY29sbGlucyBhbmQgbWMuIGVzY2hlcgpqZXJlbXkgYmVubmV0dApjaW5kZXIgYmxvY2tzCmJ1YmJsaW5nIGNhdWxkcm9uCmh1Z2Ugd2hpdGUgdGVldGgKcGFpbnRpbmcgb2YgYW4gdW5kZXJjb3ZlciBjdXAKcGFpbnRpbmcgb2YgYyAtIDMgcCAwCnRhbmdlbG9zCnBhaW50aW5nIG9mIGZsb29kIHdhdGVycwpwYWludGluZyBvZiBnb2xpYXRoCm11bGhvbGxhbmQgZHJpdmUKcHVycGxlIGZpbHRlcgpyYWNlIHN0eWxlCm5hdHVyZSBhbmQgY2xvdWRzIGluIGJhY2tncm91bmQKcHVua3Mgbm90IGRlYWQhISEhCndvb2RsYW5kIHZpbGxhZ2UKdW5yZWFsIGVuZ2luZS4gZmlsbSBzdGlsbApwZWVyaW5nIG92ZXIgZnJvbSBoaXMgaGVhdnkKbGFjcXVlcmVkIG9hayByZWNlcHRpb24gZGVzawpwYWxtIHRyZWVzIG9uIHRoZSBiZWFjaApmIDMgNQplcGljIHBob3RvZ3JhcGgKcGFydHkgaW4ganVuZ2xlcwphdXRob3IgemltYSBibHVlCmRyYXcgd2l0aCB3YWNvbSB0YWJsZXQKaW4gc2NvdGxhbmQKbWlsZCBjb2xvcnMKcGVhc2FudCBib3kgYW5kIGdpcmwgZmlyc3Qga2lzcwpmaWdodGluZyBmYW50YXN5IHN0eWxlIGltYWdlCmZlbWFsZSBwaG90b2dyYXBoeQpzdHlsZSBvZiBtaWNoYWVsYW5nZWxvCnBlcmZlY3QgaGFuZApob2xsaXN0ZXIgcmFuY2gKb2Zmc2hvcmUgd2luZHMKaXNsYW5kcyBvbiBob3Jpem9uCnBlcmZlY3QgaHVtYW4gZmVtYWxlIHNwZWNpbWVuCmYgMiAwCnNpbXBsZSBwYXRoIHRyYWNlZApiaWcgZnJlbmNoIGRvb3Igd2luZG93CndpbmRvd3NpbGwKYW5hbW9ycGhpYyBzaG90IGxlbnMKaW4gam9obiBzYWx0IHN0eWxlCmdhbWVzIDMgZApsb2NhdGlvbiAoIGZhdmVsYSBfIHdhbGwgKQptYWdpY2FsIGJhdHRsZWZpZWxkIGJhY2tncm91bmQKb24gYSBmdXR1cmlzdGljIHNob3BwaW5nIG1hbGwKZmVhdGhlciBuYXRpdmUgYW1lcmljYW4gaGVhZGdlYXIKcGhvdG8gb2YgYSB2aWN0b3JpYW4gZG9sbGhvdXNlCnBob3RvIG9mIGEgZHlzb24gc3BoZXJlCnNob3Qgd2l0aCBhIGdvcHJvCmNvbG9yZnVsIGltcGFzdG8gYnJ1c2ggc3Ryb2tlcwpjYW5keSBob3NwaXRhbCByb29tCmJpZyBzaGFycCByb2NrCnByaW1vcmRpYWwKcGhvdG8gb2YgYSBtZWNoYW5pY2FsIGJ1dHRlcmZseQpyZWZsZWN0aW9ucyBzbW9vdGgKYXQgdGFyZ2V0Cnlvc2hpbXVyYSBleGhhdXN0CjEyMG1tCnBob3RvIG9mIHBvb3IgY29uZGl0aW9uCnBob3RvIG9mIHNoaXByb2NrCmx5aW5nIG9uIGJvbmVzCnJvY2sgYXJ0CnBob3RvIG9mIHRoZSBjaW5lbWEgc2NyZWVuCnNtYWxsIGxlZCBsaWdodHMKc2NpLWZpaXNoIGxhbmRzY2FwZQpidXN0IHdpdGggYSBiZWF1dGlmdWwgbmVjawpzeW50aCAtIHdhdmUKYnJpZ2h0IGFtYmllbnQgbGlnaHRpbmcKc3VubnkgZGF5IGluIGEgcGFyawpiaWcgb3BlbiBmbG9vciA4IGsKcGhvdG8gc3R5bGUgb2Ygc2hhd24gcGF1bCB0YW4KaW4gZHVzdHkgb3BlbiBwaXQgbWluZQpoZHIgZGV0YWlsCmJvaGVrCmNhbm9uIGVvcyByZWJlbApzdGFuZGluZyBpbiBhIGhpbmR1IGtvdmlsCmNvbGxlZ2Ugc3R1ZGVudHMKZnVsbCBmcmFtZSBwaG90b2dyYXBoeQptaW5kLWJvZ2dsaW5nIGNvc21pYyBnZW9tZXRyeQpwaG90b2dyYXBoIG9mIGEgdGVjaHdlYXIgd29tYW4KcmVhbGlzdGljIGludHJpY2F0ZSBkZXRhaWwKcGhvdG9ncmFwaCBvZiB0aHJlZSByYXZlcnMKYm9rZWguIGNocm9tZSBhY2NlbnRzCnNtb2tlIGZvZyBkdXN0CnNlYSBxdWVlbgppbiBhbiBhbGllbiBwbGFuZXQKZ3V5IGJvdXJkaW4KaG9yc3QgcC4gaG9yc3QKcGhvdG9ncmFwaHkgb2YgYmlsbCBicmF1ZXIKbWFzdGVycGllY2UgY29zdHVtZQpjYW5vbiBlb3MgZWYgNSAwIG1tCnZlcnkgZGFyayByb29tCmdsaXR0ZXJpbmcgc2tpbgpwaG90b3JlYWxpc3RpYyBwcmludCBvZiBleG90aWMKcGllY2VzIG9mIGEgcmlwcGVkIGZsYWchISEKZ29yZ2VvdXMgeW91bmcgbW9kZWwKdGhlIGZ1cnJ5IGZ1cnN1aXQgaXMgcnVubmluZwpldGhlcmVhbCBhYnN0cmFjdApibGFjayByYXkgLSBiYW5zCmJ1dHRlcmZseSBqZXdlbHJ5CmZyaWVuZGx5IGV5ZXMKcGl4ZWwgYXJ0IGlzb21ldHJpYyBkcmF3aW5nCnJldHJvIGdhbWUgMSA5IDggMCBzdHlsZQpzY3JlZW5zaG90IG9mIHBpeGVsIGdhbWUKY29uY2VwdCBwaXhlbGFydApwaXp6YSBhZHZlcnQKc29sZGllciBwZW5ndWlucwp3aXRjaCdzIGhhdApvbGQgYm9va3MgYW5kIGRpcCBwZW4KZGV0YWlsZWQgc3RlYW1wdW5rIGlsbHVzdHJhdGlvbgpvdmVyIHNhdHVyYXRlZCBjb2xvcnMKZGFyayBnb3RoaWMgZHJlc3MKc3RhbmRpbmcgaW4gYSBiYXJyZW4gZmllbGQKd2FydGltZSBmb290YWdlCndlaXJkIHBva2Vtb24KbXlzdGVyeSBwb2tlbW9uCmJvb3QgY2FtcAptYWludGFpbiBhc3BlY3QgcmF0aW8Kb2JzaWRpYW4gYWNjZW50cwpiZXN0IG9uIGFkb2JlIHN0b2NrCnBvcmNlbGFpbiBjeWJvcmcKcG9ydHJhIDgwMCBzdHJlZXQgcGhvdG9ncmFwaHkKcG9ydHJhaXQgNiAwIC0geWVhciAtIG9sZCB3b21hbgpzZXZlcmUgLSBsb29raW5nCndpdGggZGFyayBoYWlyIHRpZWQgdXAgaW4gYSBidW4KYmxhY2staGFpcgpicm93bi1ibG9uZC1oYWlyIHByZXR0eSBmYWNlCmdpcmwgY3V0ZS1maW5lLWZhY2UKcm9zc2RyYXdzIHBvcnRyYWl0CnBvcnRyYWl0IGEgMSA1IC0geWVhciAtIG9sZCBib3kKZ2xvdyBhcm91bmQgaGVsbWV0Cm1ldGFsbGljIGdyZWVuIGFybW9yCmZlYXRoZXJzIHBsdW1hZ2UKb2YgYmFtYm9vCmJsYWNrIGFuZCByZWQgcmVmbGVjdGVkIGFybW9yCnJpdmVyc2lkZQo2IHNwb3RsaWdodApwb3J0cmFpdCBmZW1hbGUgZWxmIHdpemFyZAptYWdpYyBzdGFmZgpzZXJpb3VzIGNhcnRvb24KaW4gZnV0dXJlIGFpcnBvcnQgcm9vZnRvcApwb3J0cmFpdCBncmFjaW91cyBzYWludApibG9zc29taW5nIHBhdGggdG8gaGVhdmVuCmluIHJ1aW4gYWdvcmEgb2YgYXRoZW5zIHN1bnNldApwb3J0cmFpdCBuby4gMQp0ZWFyIG9uIGZhY2UKYmFsZWZ1bCB5b3VuZwpiYWxlZnVsCnNsZWVrIGJsb25kIGhhaXIKY2hhcmFjdGVyIHdpdGggYSBoYXQKcG9ydHJhaXQgb2YgYXJ0ZW1pcwpwb3J0cmFpdCBvZiBhdWRyZXkgaGVwYnVybgp3aXRoIGEgbW9oYXdrCnN0ZWFtcHVuayBjaXR5IG9uIHRoZSBiYWNrZ3JvdW5kCnBvcnRyYWl0IG9mIGZyZWRkeSBmYXpiZWFyCnBvcnRyYWl0IG9mIGdhcmZpZWxkCmRyZXNzZWQgaW4gc2hha28KcGVsaXNzZQpkb2xtYW4Kc3VycmVhbCBhbmQgYWxsZWdvcmljYWwKcG9ydHJhaXQgb2YgamVmZiBiZXpvcwpqaW1pbidzIHBsdW1wIGxpcHMKamltaW4ncyBncmVjaWFuIG5vc2UKcG9ydHJhaXQgb2YgcHJpbmNlc3MgZGlhbmEKcG9ydHJhaXQgb2YgcHJpbmNlc3MgemVsZGEKcG9ydHJhaXQgb2YgdGlmYSBsb2NraGFydAplZXJpZSBnbG93aW5nIGV5ZXMKaW5rIG9uIHBvc3QgaXQgbm90ZQptdWx0aXZlcnNhbCBoYWlyCnBvcnRyYWl0IG9mIGEgbWVjaGFuaWNhbCBnaXJsCnRhbiBzaG9ydHMKY2EuIDE5OTAKd2l0aCBhIG9yaWVudGFsaXN0IHNtaWxlZnVsIGZhY2UKZHJlbmNoZWQgY2xvdGhpbmcKd2lyZSBtYW5hZ2VtZW50CnRoaW4gbGlnaHQgcGluayBsaXBzCmRldGFpbGVkIGxpZ2h0aW5nIGhkIDRrCnVwd2FyZCBmbG93aW5nIGxvbmcgaGFpcgp1bmRlcndhdGVyIHdpdGggY29yYWwgYW5kIGZpc2gKc2hlIGhhcyBlbGYgZWFycyBhbmQgZ29sZCBleWVzCnRvdWNoZXMgb2YgZ29sZCBsZWFmCmJvZHkgbWFkZSBvZiBnbGFzcwpncmlteSBzdHJlZXRzIGJhY2tkcm9wCnNwYWNlIHdhcnBpbmcgYW5kIHR3aXN0aW5nCmdsaXR0ZXJpbmcgaGFpcgptdWx0aWxheWVyZWQgb3V0Zml0CndlYXJpbmcgYSB5ZWxsb3cgaG9vZGllCnBvcnRyYWl0IG9mIGEgY3liZXJwdW5rIG1hY2hpbmUKaGlnaCB0ZWNobm9sb2d5IGlucGxhbnRzCm1hcnRpbmEgZmFja292YQphbnRvaW5lIGNvbGxpZ25vbgpmdWxsIGNvbG9yIG1hbmdhIHZpc3VhbCBzdHlsZQp3ZWFyaW5nIGEgYmxhY2sgcm9iZQptdXNjdWxhdGVkCmhpc3RvcmljIHBvcnRyYWl0CnN1YnN1cmZhY2Ugc2NhbmRlcmluZwpwb3J0cmFpdCBvZiBhIGdlb21ldHJpYyBvd2wKYW5jaWVudCB3b29kIGVudmlyb25tZW50CmludHJpY2F0ZSBhcnR3b3JrLiBuZW9uIGV5ZXMKaGlnaGx5IGRldGFpbGVkIGJhY2ttb3V0aAp0cmlhbmdsZXMgaW4gYmFja2dyb3VuZApjYWluCmJsdWUgdW5kZXJnYXJtZW50cwpwb3J0cmFpdCBvZiBhIGhlYXZlbmx5IGdvZApkcmlmdHdvb2Qgc2N1bHB0dXJlCmVnb3Rpc3RpY2FsCmJsYWNrIHNoaXJ0IHdpdGggcmVkIHN1c3BlbmRlcnMKZmx1ZmZ5IG5lY2sKcmVhbGlzdGljIGxhbmNlCnBvcnRyYWl0IG9mIGEgam9rZXIKZmFjaWFsIHN0cnVjdHVyZQoxOTIwJwpwb3J0cmFpdCBvZiBhIGxpc2EgZnJhbmsKd2VhcmluZyBzcGlrZXMgYW5kIHBpZXJjaW5ncwpoZSBpcyBhYm91dCAyIDUgeWVhcnMgb2xkCnNoZSBpcyBhYm91dCA3IDAgeWVhcnMgb2xkCnJpY2hseSBkZWZpbmVkIGZhY2UKZ2lyYXVkISEKYWtpaGlrbyB5b3NoaWRhIDggawpwb3J0cmFpdCBvZiBhIG1lbGFuY2hvbGljIGxhZHkKKCByZWRoZWFkCnJhaXNlZCBoYW5kCndpZWxkaW5nIGEgd3JlbmNoCnBvcnRyYWl0IG9mIGEgbXlzdGljYWwgZ2lhbnQgZXllCnN1cGVyIC0gZmxhdApwb3J0cmFpdCBvZiBhIHBhdGNod29yayBib3kKa2F3YWFpCmJpcmQgbWFzawpwb3J0cmFpdCBvZiBhIHJlZCBzb3JjZXJlcgpwb3J0cmFpdCBvZiBhIHJvYm90IHNoYW1hbgpkZXRhaWxlZCByZWFsaXNtIGluIHBhaW50aW5nCnBsYWluIHJlZCBiYWNrZ3JvdW5kCnJ1c3NpYSBpbiAyIDAgMiAxCmFtYXppbmcgbGFuZHNjYXBlIGluIGJhY2tncm91bmQKbG9uZyBoYWlyIGFuZCByZWQgc2hpcnQKcG9ydHJhaXQgb2YgYSBzcGFjZSBhbGllbgpzbGlteSB1bnJlYWwgZW5naW5lCnNpdHRpbmcgb24gaWNlIHRocm9uZQpiZWF1dGlmdWwgZnJhY3RhbCBpY2UgYmFja2dyb3VuZApleHBlcmltZW50YWwgc3R1ZGlvIGxpZ2h0CmlyaWRlc2NlbnQgaGFpcgpmaWxvbm92Cm1vcm5pbmcgZHJhbWF0aWMgY2luZW1hdGljIGxpZ2h0CmRyZXNzZWQgaW4gYSBibGFjayBjbG9hawpwcm91ZCBzbWlyawpwb3J0cmFpdCBvZiBhIHlvdW5nIHdpdGNoCnBvcnRyYWl0IG9mIGFsZXhhbmRlciBhYmR1bG92CnBvcnRyYWl0IG9mIGFuIGFsY29ob2xpYwpyZXB0aWxlIGZhY2UKZXZlcmdyZWVuIGZvcmVzdApwb3J0cmFpdCBvZiBhbnRocm9wb21vcnBoaWMgYmVhcgpkZXRhaWxlZCBuby4gMSAwIGRvd25pbmcgc3RyZWV0CnBvcnRyYWl0IG9mIGFyY2hpZSBhbmRyZXdzCndlYXJpbmcgcGluayBoYWlyIGJvdwpwb3J0cmFpdCBvZiBiZW4gc3RpbGxlcgpleHRyYSBiYWNvbiBsZXR0dWNlIGFuZCB0b21hdG9lcwpwb3J0cmFpdCBvZiBjaGVlY2ggYW5kIGNob25nCnZlcnkgc2hvcnQgY3VybHkgaGFpcgpwb3J0cmFpdCBvZiBjb21iYXQgZGFuY2VyCndpZGUgb3BlbmVkIGV5ZXMKdGhydXN0bWFzdGVyIHRzIHBjIHJhY2VyCmRvd25oaWxsIGxhbmRzY2FwZQptb3VudGFpbiBiaWtlIGhlbG1ldApyZXRybyBjYXJ0b29uCnBvcnRyYWl0IG9mIGRlbWlnb2QgaGVyY3VsZXMKdG9nZXRoZXIKZGNzIHdvcmxkIGZhbGNvbiBibXMKZGlzbmV5IHN0eWxpemVkIGZ1cnJ5Cmx5aW5nIGR5bmFtaWMgcG9zZQpyb3NlIGNyb3duCnNvbWUgcmVkCmJhY2tncm91bmQgb2YgaW52YWRpbmcgYXJteQptYWRvbm5hIGdlbmRlcmJlbmQgZWxlZ2FudAptYXNjdWxhcgpwb3J0cmFpdCBvZiBqb3NzaSBvZiBibGFja3BpbmsKcG9ydHJhaXQgb2YganVnaGVhZCBqb25lcwpwb3J0cmFpdCBvZiBsYWR5IG1hcmlhCmdyYWRpZW50IGdyZWVuIGJsYWNrCnRlcnJlbmNlIG1hbGljayBzY3JlZW5zaG90cwpnaGlibGkgc2NyZWVuc2hvdApwb3J0cmFpdCBvZiBtYXJpbHluIG1vbnJvZQphcnQgc3R1ZGlvIGdoaWJsaQp3aGl0ZSBmYWNlIG1ha2V1cApzbGF2ZSBjb2xsYXIKcG9ydHJhaXQgb2YgbWVybWFpZAplbmlnbWF0aWMhIQpwb3J0cmFpdCBvZiBtb3JuaW5nIGNvZmZlZQpsaWtlIGJlYm9wCm11ZGR5IGNvbG9ycwptb2Rlcm4gaGlnaCBzaGFycG5lc3MgcGhvdG8KcG9ydHJhaXQgb2YgcXVlZW4gb2YgbGlnaHQKcG9ydHJhaXQgb2YgcXVlZW4Kb3JuYXRlIGdvdGggZHJlc3MKcG9ydHJhaXQgb2YgcmF2ZW4KcG9ydHJhaXQgb2YgcmVhbCBsaWZlIHRvdG9ybwp3aXphcmQgY2xvYWsKbWFyb29uIHJlZAp1bmZvcmdpdmFibGUKcG9ydHJhaXQgb2Ygc21hbGwKaHVnZS1leWVkCm1vdGhlciBvZiBwZWFybCBqZXdlbHJ5CnBvcnRyYWl0IG9mIHRlZW5hZ2UgZW1tYSBzdG9uZQpnbG93aW5nIHBvcmNlbGFpbiBza2luCmNyb3duIG1hZGUgb2YgZmFicmljCmNyb3duIG1hZGUgb2YgZmVsdAp3ZWFyaW5nIG5ld3Nib3kgY2FwCmJhc3QKY3JpbXNvbiBwZWVrCmJsYWNrIHRlZW5hZ2UgZ2lybAphbWVyaWNhbiBleGNlcHRpb25hbGlzbQpwb3J0cmFpdCBvZiB2YW5lc3NhIG1vcmdhbgphZmZhYmxlIO+8jCB3ZW5qdW4gbGluCnBvcnRyYWl0IHBhaW50aW5nIG9mIGEgcHJpbmNlc3MKc29mdCBncmFkaWVudHMuIGJhcm9xdWUgcGVyaW9kCnBvcnRyYWl0IHBhaW50aW5nIG9mIGhlIC0gbWFuCmdvbGQgYW5kIGJsYWNrIG1ha2V1cApleWVzIGFyZSBncmVlbiBsaWdodHMKc2NvdHRpc2ggZm9sZAoxIDMgNSBtbSBuaWtvbiBmIC8gMgpib2tlaCEhISEhCm1hZ25ldGljIHdhdmVzCmdyaW5uaW5nIGxhc2NpdmlvdXNseQpwb3J0cmFpdCB5b3VuZyBnaXJsCmFudGhyb3BvbW9ycGhpYyBmZW1hbGUgZGVlcgpzaGlydGxlc3MgOjogaGlnaCBkZXRhaWwKZ29vc2VzCmdsYXNzeSBmcmFjdHVyZQp3aG9sZXNvbWUgdGVjaG5vIC0gc2hhbWFuIGxhZHkKcGl4YXIgZGlzbmV5CndvbWFuIGluIGEgc2hlZXAgY29zdHVtZQpsdXNoIGphcGFuZXNlIGxhbmRzY2FwZQpoZCBwaG90b2dyYXBoeSBzdHJlZXQKbnVjbGVhciBleHBsb3Npb24gb24gdGhlIGhvcml6b24KcG9zdCAtIGFwb2thbHlwdGljCmxpemFyZCBraW5nIC8gcXVlZW4gZm9yZ2l2ZWluZwpwb3N0IG1hbG9uZQpydWlucyBhcm91bmQKdmlraW5nIHN0eWxlCmJsYWNrIGhhaXIgd2l0aCBwdXJwbGUgc3RyZWFrcwpkaWdnZXIgbGFuZAptaXlhemFraSBtb3ZpZQpwb3N0ZXIgZm9yIHNob3J0IGZpbG0gYmxpbmQKYm90dGxlIG9mIHZvZGthCm1hbmRhYmxlcwpwcmVnbmFudCBmZW1hbGUgY3lib3JnCnRoaW4gYWdlZCAyIDUKc3RlYWtwdW5rCnRlY2hubyBteXN0aWMgZ29kZGVzcwp3aXRoIGFxdWEgbmVvbiBkcmVhZGxvY2tzCnN0YXIgLSBnYXRlIG9mIGZ1dHVyaXNtYQpjZW1lbnQgYnJpY2sgd2FsbCBiYWNrZ3JvdW5kCnRyZWUgc3R1bXBzCnNtb3VsZGVyaW5nIGNoYXJyZWQgdGltYmVyCmZsYXQgdG9wIGhhaXJjdXQKd2hpdGUgYmFja2dyb3VuZCA6IDMKY2Fub24gOCA1IG1tCm1hZ2F6aW5lIHNhbGVzCmRhcmsgcHVycGxlIGNsb3VkcwpzaGFycCBjZW50cmVkIGZvY3VzCnByb2Zlc3Npb25hbCBpcGhvbmUgcGhvdG8KZmxhdCBuYXR1cmFsIHRvbmVzCm1hbmdhIHN0eWxpbmcKYmVhdXRpZnVsIGNvaGVyZW50IHByb2Zlc3Npb25hbApiZWZvcmUgYSBzdHVjY28gd2FsbAphayAxIDIKcHJvZmlsZSBwb3J0cmFpdCBvZiBhIHdvbWFuCmx1Y2EKbWFqZXN0aWMgYWN0aW9uCnNvZnQgZmFjZSBmZWF0dXJlcwpleWVwYXRjaGVzCm5vIG1lZGFscwpoaXMgYXJtcyBhcmUgYmVoaW5kIGhpcyBiYWNrCnBzeWNoZWRlbGljIGZyYWN0YWxzCnBzeWNoZWRlbGljIG9yZ2FuaWMgY3lib3JnCm1vbm9jaHJvbWUgYXJ0d29yayEhCnB1ZGdlIGZyb20gZG90YSAyCnB1ZmZ5IHBlYWNlZnVsIGNsb3VkcwpwdW5rIGdyaW0gcmVhcGVyCmZ1bGwgcGFnZSBibGFjawpwYW5lbCBvZiBibGFjawpsYXZhISEhCnB1cnBsZSB0b3JuYWRvCnZpZXdzIHRvIHRoZSBvY2VhbgpweXJyaGljIHZpY3RvcnkKcXVha2UgKCAxIDkgOSA2ICkgcGMgZ2FtZQpxdWFudHVtIGR5bmFtaWNzCnF1ZWVuJ3MgY29sbGVjdG9yCnF1aW5uCmNhbGwgbm93CnJhYmJpZHMgYXQgYSBtZXRhbCBjb25jZXJ0CmJpZyBzdW5nbGFzc2VzCnJhY29vbiBob2xkaW5nIGEgbGFzZXIgZ3VuCnJhbmRvbSB0aGluZ3MKcmF0ZmluawpqZW5uaSBwYXNhbmVuCm1lZGl1bSAtIGxvbmcgY3VybHkgYnJvd24gaGFpcgp3ZWFyaW5nIGdsYWNrIGdsYXNzZXMKcmVhbGlzdGljIGJ1aWxkaW5nCm1pbmltYWwgZGVzaWduIGFybW9yIHN0eWxlCnN0b3J5IGJvb2sgZGVzaWduCjMyMzczMTU5MTMKaGlnaCBxdWFsaXQgOCBrCm1pYSBraXNjaG5lcgppbiB0aGUgZmllbGQgb2YgaW5uZXIgaHlwZXJzcGFjZQpjb3kgZXhwcmVzc2lvbiB3ZWFyaW5nIGludHJpY2F0ZQp3ZWFyaW5nIGJsYWNrIGNhbWlzb2xlIG91dGZpdApmbG93ZXIgZnJhbWUKY2F0c3MKaW4gYSBob3RlbCBoYWxsd2F5CnJlYWxpc3RpYyByZWZyYWN0aW9uCmdyZXlzY2FsZSBncmFpbiAxIDkgNiAwCndpdGggd2hpdGUgZmx1ZmZ5IGZ1cgp3ZWFyaW5nIHdoaXRlIHRpZ2h0cwpyZWFsaXN0aWMgcGhvdG8gb2YgZGVsaWNpb3VzIHBobwpzb2Z0Ym94IGtleSBsaWdodAppbiBsaXF1aWQKbW9kZWwgd2VhcnMgYSBwdWZmZXIgamFja2V0CmJyaWdodCB3aXRjaApzaGlubmluZyBzd29yZAptZWRpZXZhbCBsZWF0aGVyIGFybW91cgppcmlkaXNjZW50IHJpbSBsaWdodApyZWFsaXN0aWMgc3R1ZGlvIHBvcnRyYWl0CnB5cmFuZWVzCnBob3RvIGluIHN0eWxlIG9mIHBhb2xhIGt1ZGFja2kKcGlrZXMKcmVhcGVyIGZyb20gb3ZlcndhdGNoCmFzc2FtIHRlYSBnYXJkZW4gc2V0dGluZwpkYXogc3R1ZGlvIGdlbmVzaXMgaXJheSB1bHRyYSBoZAp3aGl0ZSB0YWJsZWNsb3RoCmdsYXNzIHRhYmxld2FyZQp1bmRlYWQgbWFnZQp0aGUgbGFzdCBndWFyZGlhbiBza2lubnkgdG93ZXJzCnRvdGFsbHkgcmFkaWNhbApyZXRybyA5IDAgcyBqYXBhbmVzZQp3b29kIGdyYWluCmppYSB6aGFuZ2tlCnJldnkgYmxhY2sgbGFnb29uCnJleWxvIGtpc3NpbmcKbWFueSBleG90aWMgaGlnaCBlbmQgZmVhdHVyZXMKcmljYXJkbyBtaWxvcwpjaXR5IHNub3dpbmcgd2l0aCBhIGxvdCBvZiBzbm93CnRlcnJpZnlpbmcgYXRtb3NwaGVyZQpyaXZlbiBmcm9tIGxlYWd1ZSBvZiBsZWdlbmRzCm11c2NsZSBjYXJzCmNoYXJjb2FsIGFuZCBzaWx2ZXIgY29sb3Igc2NoZW1lCnJvYm90IGJpc2hvcCBndWFyZHMKcm9ib3Qgd2l0aCBodW1hbiBmYWNlCndvbWFuIGh1bWFuIGZhY2UKaHVtYW4gZmFjZSByZWFsaXN0aWMKcm9ib3QncyBoZWFydC1zaGFwZWQgZmluZ2VycwpibG9vZGx1c3QKZW5lcmd5IG1vdGUKcm9ja2FiaWxseSBiYW5kIDE5NTBzCnJvbmFsZG8gZmVub21lbm8Kcm9zYW11bmQgcGlrZSBhcyB0aGUgZG9jdG9yCmZyaWVuZHMgOSAwIHMgc2l0Y29tCnJwZyBnYW1lIGl0ZW0KcnBnIG1ha2VyIHN0eWxlIGJlZHJvb20KZ2FicmllbCBoYXJkbWFuCmdsb3dpbmcgYnV0dG9ucwpncmVlbiBjcnQgbW9uaXRvcnMKc2FpbnQgbWljaGFlbCB0aGUgYW5nZWwKd29ybGQgY2hhbXBpb25zaGlwIGZpZ2h0Cmdsb3ZlcyBvbiBoYW5kcwpzYW11cmFpIGpldHN0cmVhbSBzYW0Kc2FuIGZyYW5jaXNjbyBwc3ljaGVkZWxpYyBwb3N0ZXIKc2FuZHJvIGJvdHRpY2VsbGkuIHZlcnkgc29mdApzYW8gcGF1bG8gaW4gdGhlIHllYXIgMiAwIDcgMApzYXJkaW5lIGluIGEgY2FuCnN3YXNoYnVja2xlcgpsYXZhIHdhdGVyZmFsbHMKb2xkIGx1bWJlciBtaWxsIHJlbWFpbnMKdmVyeSB2ZXJ5IHNhdWwgZ29vZG1hbgpzY2FyeSBkYXJrCmJlYXRpZnVsIGxpZ2h0cwpzY2FybGV0dCBqb2hhbnNzb24gYXMgdGhhbm9zCmluc2lkZSBpdHMgYm94Cmxvb2tpbmcgYXQgdXMgZnJvbSBhIHBvcnRob2xlCndhcG9yd2FyZQpmb2N1c2luZwpzY2kgLSBmaSBmYXZlbGEgc2N1bHB0dXJlCmR5c3RvcGlhbiBib3VudHkgaHVudGVyCmNvbmNlcHQgYXJ0IQpzY2kgZmkgZmVtYWxlIGNoYXJhY3RlcgpkaWdpdGFsIGJpbGxib2FyZCBpbiB0aGUgbWlkZGxlCm9jdGFuZSByZW5kZXIgcGludGVyZXN0CmtleXNob3QgcHJvZHVjdCByZW5kZXIgcGludGVyZXN0Cm11bHRpcGxlIGNvbG9ycwpub3N0YWxnaWMgdmliZXMKZ3VuIGF0IGJvdHRvbSBvZiBzY3JlZW4KZGV0YWlsZWQgZXhwcmVzc2l2ZSBmYWNlcwpkZXNlcnQgYWxpZW4gcGxhbmV0CmJlYXV0aWZ1bCBwb3J0cmFpdHMKdGFpbHMgd29ybgpzY3VscHR1cmUgbWFkZSBvZiBwaWxlZCBzdG9uZXMKY2FycmFyYSBtYXJibGUKc2N1bHB0dXJlIG9mIHBlcnNlcGhvbmUKc2hvd2luZyBhbmdlcgpzZWFtbGVzcyBwYXR0ZXJuIGRlc2lnbgpkb29ycyB0byB2YXJpb3VzIGJlZHJvb21zCnNlY3JldCBlbnRyYW5jZQpzZWNyZXQgdGVhIHNvY2lldHkKc2VkdWN0aXZlIGFuaW1lIGdpcmwKZmxhbWUgYW5kIGZpcmUKd2VhcmluZyBkYXJrIGJsdWUgc3VpdApyaW0gbGlnaHQgYW5kIGhpZ2hsaWdodHMKbG9va2luZyBzZWR1Y3RpdmUKZHJpcHBpbmcgY2FuZGxlcwpzY2FyeSBob3JyaWZ5aW5nIHNhdGFuaWMgcml0dWFscwpiYWNrZ3JvdW5kIG9mIHBvaXNvbiBhcHBsZXMKc2VxdWluIHRvcApiZW5kaW5nIGRvd24gc2xpZ2h0bHkKc2V4eSBwYWludGluZyBvZiBnYWwgZ2Fkb3QKZGFyayBzY2kgLSBmaSBob3Jyb3IKZmxvYXRpbmcgc3BpcmFsIHNhbmQKZWFzdGVybiBhcnQgc3R5bGUKcmVmbGVjdGl2ZSBmYWNlcwo4ayBmaWxtCndlYXJpbmcgcm9iZXMgYW5kIG5lY2t0aWVzCnNldCBpbiAxIDggNSAwCmljZWJlcmdzIGluIHRoZSBiYWNrZ3JvdW5kCmZyYW1lIGFyb3VuZCBwaWN0dXJlCnNpbWlsYXIgdG8gdGhlIG1vbmEgbGlzYQp3aGl0ZSBmbG93ZXIgY3Jvd24KbGVnb2xhcyBhcyBhbiBlbGYgcmFuZ2VyCmdvbGQgaGF6ZWwgZXllcwpibGFjayBqYWNrZXQgfCBzaGlueQphY2NlbnQgbGlnaHRpbmcgOiA6IHBldWdvdCBvbnl4CnNpbGhvdWV0dGUgb2YgbWFuCnZpbiBkaWVzZWwgaGVhZCBpbiBlZ2cgY3VwCnRhY3RpY2FsIHZlc3QKc2V2ZXJhbCBjb250aW5lbnRzCnNpbXBsZSBwcmltaXRpdmUgdHViZSBzaGFwZQptYW5kYWxhIHdoaXRlIGJvbmVzCmNsZWFuIGdsb3cKY29sZCB0ZXh0dXJlCm1hc3NpdmUgcm9ib3QKbWVjaGFuaXplZCBhcnQgY29uY2VwdApqb3lmdWwgbG9vawpza2VsZXRvbiBnaXJsCmxpbmVkIHBhcGVyCnNraW5ueSBtYWxlIG1hZ2UKc2t1bGwgYnVzdApmZWF0aGVycyB0ZXh0dXJlIG92ZXJsYXlzCnNtYWxsIGFuZCBkZW5zZSBpbnRyaWNhdGUgdmluZXMKd29vZCBibG9ja3MgYm90dG9tIGhpcHBvIGJvZHkKYmx1ZSBjaHJvbWUgdG9wIGhpcHBvIGJvZHkKc3VraG90aGFpIGNvc3R1bWUKemR6aWRhdwpzbmFrZSBodW1hbiBoeWJyaWQKZm9ybWxlc3MgYnJlc3RzCmFyY2FuZSBjb2xvcnMKc25vb3AgZG9nZyBkb2N0b3Igc3RyYW5nZQpjeWJlcnB1bmsgdHJlZSBob3VzZQpzb2xpZCBzbmFrZSBidXN0IHBvcnRyYWl0Cmxvb3BlciBhcnRpZmFjdHMKbG93IHNob3QgY2FtZXJhCnNpbmdsZSBwYWlyIG9mIGhhbmRzCnNvbiBnb2t1IGFzIHRoZSBpbmNyZWRpYmxlIGh1bGsKc29uZyBvZiB0aGUgd2luZApyYXkgdHJhY2luZy4gZnJhY3RhbCBjcnlzdGFsCmFuaW1hbCAtIHNoYXBlZCBicmVhZApzb3ZpZXQgYXBhcnRtZW50IGJ1aWxkaW5nCnNwYWNlIGFsaWVuCnNwYWNlIGRyZWFtCnNwYWNlIHF1YW50dW0gZGVhdGguIGRlZXAgc3BhY2UKZXBpYyBzY2lmaSBtb3ZpZSBzdGlsbAptYWNhYnJlIHNwZWN0YWNsZQpza2VsZXRhbCBmaWd1cmVzCnNwbGFzaGVzIG9mIG5lb24gY2xvdWRzCmRyaWVkIGFxdWFyaXVtCnNxdWlkd2FyZCBhcyBhIGRhcmsgc291bHMgYm9zcwpzdGF0dWUgb2YgYSB3b21hbgooICggKCAoICggZGFuIG11bWZvcmQgKSApICkgKSApCnNtb2tlIGluIHNreQpzdGVhbXB1bmsgcmF0CnN0ZWFtcHVuayByb2JvdCBhbnQKc3RlYW1wdW5rIHN0eWxlIHdlYXBvbnMKc3RlYW1wdW5rIHdpemFyZAphdmFudGdhcmRlIDRrIHdhbGxwYXBlcgpjIDQgZCDigJ0Kc3RpbGwgZnJvbSBhIGZhbnRhc3kgbW92aWUKY2FzdGxlcyBmbG9hdGluZyBpbiBtaWQgYWlyCm92ZXJ0dXJuZWQgY2hhbGljZQpiZWF1dGlmdWwgdHJvcGljYWwgZmxvd2Vycwp3aGl0ZSBhbGllbiBzcXVpZApzdGlsbCBsaWZlIG9mIHJvdHRlbiBmbGVzaApiaWJsaWNhbCBhY2N1cmF0ZSBhbmdlbApoZW5yaSBzZWxpY2sKbGFpa2EgZmlsbXMKYXMgYW4gb2ZmZXJpbmcgdG8gemV1cwpvbGQgamFwYW5lc2Ugc3RyZWV0IG1hcmtldApsYXlpbmcgZG93biB3aXRoIHdyaXN0cyB0b2dldGhlcgppbnF1aXNpdGl2ZS4gZGV0YWlsZWQgZXhwcmVzc2lvbgpib25nb3MKY29uZ2FzCnlvdW5nIHNlbnN1YWwgZ3JhY2VmdWwgd29tYW4Kc3R1bm5pbmcgM2QgcmVuZGVyIG9mIGEgZmFpcnkKbGF5aW5nIGJhY2sgb24gdGhlIGJlZApwdXJwbGUgZmlyZSBwb3dlcnMgZmlyZSBzd2lybGluZwpvY2VhbiBiYWNrZ3JvdW5kIHNldHRpbmcKd2VhcmluZyB1cmJhbiB0ZWNod2VhcgpzdW1tb25pbmcgc3BlbGwKcGFsbGFkaWFuCnVuZGVybHlpbmcgc2Vuc2Ugb2YgZHJlYWQKZ2FtZSBhcnQhIQpmaXNobWVuCnN1cGVyIGhpZ2ggZGV0YWlsIHBpY3R1cmUKc3VwZXIgc2FpeWFuIHNvbmljIG1vdmllIHBvc3Rlcgo4ayBzY2VuZQpnb2xkZW4gcHlyYW1pZHMKZnJhY3RhbCBidWlsZGluZ3MKc3VwZXJtYW4gaXMgaGlnaApzdXBlcm1vZGVsIGluIHNpbGVudCBoaWxsCnJlZCB5ZWxsb3cgYmxhY2sKYW5jaWVudCBvY2hyZSBwYWxldHRlCm1lY2hhIGZsb29yCmluIHRoZSBnYWxsZXJ5CnN0aXBwbGUgYnJ1c2gKZnJlbmNoIGZyeSBwYXR0ZXJuIGFtYmllbmNlCnN1cnJlYWwgbmV1cm9uIGNpdHkKZnV0dXJpdGljIGhpZ2ggdGVjaCBhcmNoaXRlY3R1cmUKdW5jYW55IGJ1dCBmYXNjaW5hdGluZwpzdXJyZWFsIHdhaWl6aSBmbG93ZXJzCnNlZ2EgZ2VuZXNpcyBib3ggYXJ0CnBlbm55d2lzZSB0aGVtZQpzeW1ib2wgZm9yIHRoZSB3b3JkIGVyc2F0egpyYW5kb20gbWV0YWxsaWMgY29sb3JzCmFydGVtIGRlbXVyYS4gYWxwaG9uc2UgbXVjaGEKd2F0Y2ggcGhvdG8KcHJvZHVjdHMgc2hvdApjaW5lbWF0aWMgc3R1ZGlvIGxpZ2h0ISB3aW5keQphbmltZSBrZXkgdmlzdWFsIG9mIGVsZWdhbnQKYnJvd24gc2tpbiBtYW4gZWd5cHRpYW4gcHJpbmNlCnN5bW1ldHJ5ISEgY29uY3BldCBhcnQKc3ltbWV0cnkhISBmdWxsIHNob3QhIQptaWRzb21tYXIgc3R5bGUKc2NhcmYhCm1heGltYWxpc3QgZGV0YWlscwpncmVlbiBpcmlzCmRlY29yYSBpbnNwaXJlZAp0LXBvc2Ugb2Ygd2l6YXJkCmJpZyBncmV5IGJsdWUgZXllcwp0YWxsIGZlbWFsZSBhbmdlbAptb25rIGNsb3RoZXMKdGFsbCB0aGluIGJlYXV0aWZ1bCBnb2RkZXNzCmZsb3dpbmcgc2lsdmVyIGhhaXIKZmxvd2luZyB3aGl0ZSByb2JlcwpzaWx2ZXIgaGFpciBzbyBsb25nCnZhbmFyYQphcGVsaW5nCmJvZHkgdHJhbnNtb2dyaWZ5CnRhcm90IGNhcmQgb2YgYSBzaGlydGxlc3MgY293Ym95CmNyZWF0aXZlIG1hc2ggdXAKY2xlYW4gYmxhY2sgcGVuIGRyYXdpbmcKc2V4eS1zIDEwMApvbiBhIHllbGxvdyBjYW52YQpzbWFsbCBhbmQgc2hhcnAgcHVwaWxzCmJsYWNrIGFuZCB3aGl0ZSB2ZWN0b3IKbWFya2luZyBsaW5lcwptYXNrZWQgaGVyb2VzCmlycmFkaWF0ZWQgaHVtYW5zCmplbGx5Y2F0CiggKCAoIGFxdWFyaXVtIGJlZCApICkgKSApCnRlcnJpZnlpbmcgbW9uc3Rlcgp0ZXV0b25pYyBrbmlnaHQKdGhhbm9zIHdvcmtpbmcgYXQgc3RhcmJ1Y2tzCnRoZSAxM3RoIGRvY3RvciByZWdlbmVyYXRpbmcKdGhlIGNpdHkgaWFjb24gY3liZXJ0cm9uCnJvdW5kZWQgc2hhcGVzCmJsZWFjaGVkIGNvbG9ycwptYWRlIG9mIGdsb3dpbmcgd2F4IGFuZCBjZXJhbWljCm1hZGUgb2YgZ2xvd2luZyB3YXgKbWFkZSBvZiB3YXggYW5kIG1ldGFsCnRoZSBjdXJlIGZvciBoYXRlCmJveGNhciBvbiB0aGUgcmFpbHJvYWQKZGlzbmV5bGFuZCBhcyBiYWNrZHJvcApleHF1aXNpdGUgcGFpbnRpbmcKdGhlIGVtZXJhbGQgaGVyYWxkIGluIHRoZSBnYXJkZW4KdGhlIGVtcHJlc3MKdGhlIGVuZCBvZiBhbGwgdGhpbmdzCnRoZSBlbmQgb2YgZGF5cwpkcmVhbXB1bmsgcm9tYW50aWNpc20gYXJ0d29yawp0aGUgZmFsbCBzZWFzb24KaG9yc2UgaXMgdXAgb24gaXQncyBoaW5kbGVncwp0aGUgZm9vbCB0YXJvdCBjYXJkIHJpZGVyIHdhaXRlCnRoZSBnb2RkZXNzIGhlcmEgbG9va2luZyBhbmdyeQpiZWF1dGlmdWwgaGlnaGx5IHN5bW1ldHJpYyBmYWNlcwp3YWl0aW5nIHBhdGllbnRseQpwYXJrZWQgc3BhY2VzaGlwcwp0aGUga2luZyBvZiBkcmVhbXMKbWFkZSBpbiAxIDkgOSAwCnRoZSBsb29rIG9mIGFuIGVsZGVybHkgcGVyc29uCnRoZSBsb3ZlcnMgdGFyb3QgY2FyZAp0aGUgbWF5byBtYW4Kc2hhZGVkIG91dCBleWVzCnRoZSBtaWxreSB3YXkgZ2FsYXh5CnNlbnNvcnkgcHJvY2Vzc2luZyBvdmVybG9hZApzbm93Y3Jhc2gKdGhlIG1vc3QgYmVhdXRpZnVsIHN1bnNldApnaWFudCBwaW5rIGZ1bGwgbW9vbgpkcmEgdGhlIGRyYWdvbgp0aGUgbW90aCBjcm93bgpzdW5nbGFzc2VzIGFuZCBhIHNjYXJmCmRldGFpbGVkIHJlYWxpc3RpYyBjb2xvcnMKdGhlIG9yYiBvZiBldGVybml0eQphbmRyZXcgZGlja3NvbgpmcmVlemluZyBibHVlIHNraW4KdGhlIHBpZXJjaW5nIHN0YXJlIG9mIHl1a2kgb25uYQp0aGUgcG9ydHJhaXQgb2YgYSB5b3VuZyBtYW4Kc2lnbWEgODUgbW0gZiAxLjQKdGhlIHNhY3JlZCBjdXAgb2YgdW5kZXJzdGFkaW5nCmFuIGFsY2hlbWljYWwgYXJ0IGlsbHVzdHJhdGlvbgptZWRpZXZhbCBtYW51c2NyaXB0IGlsbHVzdHJhdGlvbgp0aGUgc2hhbWFuIG9mIHRoZSBzdWJ3YXkKdGhlIHNtYWxsIGhvdXNlIGluIHRoZSBmb3Jlc3QKdGhlIHNtb290aCBibGFjayBqYWd1YXIKcGVhcmxzIGFuZCBnb2xkIGNoYWlucwptZXRhbGxpYyByZWZsZWN0aXZlIHN1cmZhY2VzCmdvbGQgYmxhY2sgYW5kIHJhaW5ib3cgY29sb3JzCnRoZSBzcXVpcnJlbCBraW5nCnRoZSB0YW9pc3QgdGVtcGxlcyBvZiBodWFuZ3NoYW4KdGhlIHRocmVlIG1hcnlzIGF0IHRoZSBzZXB1bGNocmUKdGhlIHVuZGVmZWF0YWJsZQo4IGsgZGVwdGggb2YgZmllbGQKdGhlIHdhbGtpbmcgbWFuCnRoZSB3YXIgbXVsdGl2ZXJzZQpyaWRpbmcgaW4gdGhlIHNreQp0aGluIG1hbGUgYWxjaGVtaXN0CndlYXJpbmcgaGFpcgphY2NpZGVudGFsbHkgdGFraW5nIGEgc2VsZmllCnRocmVlIGV5ZWQgZ29kZGVzc2VzCnJlZCBuZW9uIHJvc2VzCmFuY2llbnQgZ3JlZWsgb3JuYW1lbnRlZCBhcm1vcgp0aWdlciBmYWNlCm1hc3NpdmUgYXJjaGl0ZWN0dXJlCnRodW5kcmEgdWZvIGNyYXNoIHNpdGUKcHJvbW90aW9uYWwgcG9zdGVyIGFydAp0aW55IGV2aWwgYWxjaGVtaXN0IGdub21lCjEgMyA1IG1tIG5pa29uIHBvcnRyYWl0CnN1YnRsZSBnbGl0Y2hlcwp2ZWt0cm9pZCBhbGJ1bSBjb3Zlcgp0b2FzdGVyIGluIHRoZSBzdHlsZSBvZiByMmQyCmNsZWFyIHNoYXJwIGZhY2Ugb2YgdG9kZCBzb2xvbmR6CmhvbGRpbmcgYSByb2NrZXQKc2luZ2xlIHBlcnNvbiB3aXRoIHVtYnJlbGxhCnNvZnQgZmFjaWFsIHRyYWl0cwpyYW5kb21seSBsdXN0cm91cyBkeWVkIGhhaXIKbXl0aGljYWwgc2hyaW5lCnN5bW1ldHJ5IGFjY3VyYXRlIGh1bWFuIGZlYXR1cmVzCmFuaW1hdGlvbiBjaGFyYWN0ZXIKdG9tIGhhbmtzIGFzIHRvbWF0byBoYW5rcyBtYXNjb3QKdG9tIGhhbmtzIHNtaXJrCnRvbWNhdCByZXBsaWNhCnRvbnkga2hhbiB3ZWFyaW5nIGEgaGVhZHNldAp0cmFjZXIgZ2FtZSBjaGFyYWN0ZXIKdHJhZGl0aW9uYWwgY2hpbmVzZQpoeXBlciBjb250cmFzdCB3ZWxsIGRyYXduCmluIG1ldGFsIGh1cmxhbnQKaW4gcGlsb3RlCmluIHBpZgp0cmFucXVpbGl0eSBvZiB0aGUgZW5kbGVzcyBzdGFycwp0cmFwcGVkIG9uIGEgaGVkb25pYyB0cmVhZG1pbGwKdHJlZS1saW5lZCBwYXRoIGF0IHN1bnNldAp0d2lkZGxlIGEgcGxvcHBsZQpnaG9zdCBpbiB0aGUgc2hlbGwgYXJ0IHN0eWxlCmFraXJhIGFydHN0eWxlCmFjY3Vyc2VkCm9mZmljZSBjbG90aGVzCmhhdW50aW5nIGFuZCBzcG9va3kKdHdvIGZpbm5pc2ggbGFwcGh1bmRzCmRyYXBlZCBpbiBmbGVzaHkgZ3JlZW4gYW5kIHBpbmsKZmx5aW5nIGluIGZvcm1hdGlvbgpnYW1lYm95IGFkdmFuY2VkCmh5cGVyZGV0YWlsZWQgY29sb3VyZnVsCmZvb3RiYWxsIGhvb2xpZ2FucwpvbiBhIGJpcmRnZQp1Z2x5IG1vbnN0ZXIKcG93ZXJpbmcgdXAuIGh5cGVyZGV0YWlsZWQKZGFyaXVzeiB6YXdhZHogbWFzdGVycGllY2UKdWtyYWluaWFuIGdpcmwKZGlhIGRlIGxvcyBtdWVydG9zISEKdXBwZXJjYXNlIGxldHRlcgp1bHRyYSBwcmVjaXNlCmJvcmlzIHZhbGxlam8gYXJ0c3R5bGUKZmFudGFzeSBpdGFseQp1bWEgdGh1cm1hbiBpbiBraWxsIGJpbGwKdW5ib3JuIHNvdWwKaG9sZGluZyBhIHNhY3JpZmljaWFsIGRhZ2dlcgpzdWJtYXJpbmUgY2FtZXJhIGltYWdlcnkKY3J5c3RhbCB3YXRlcgpmaXNobmV0cyBhbmQgYSBsb25nIHRhcnRhbiBza2lydAp2YXBvcndhdmUgbWFuc2lvbgp3YXZlcyBjcmFzaGluZyBpbiB0aGUgc2VhCndhcmNyYWZ0IGFydHdvcmsKd2l0aCBtaXJyb3JzaGFkZXMgc3VuZ2xhc3Nlcwp2ZXJ0aWNhbCBleWVzCnZlcnRpY2FsIG1vdmllIGZyYW1lCnZlcnkgYW5ncnkgc3F1aWQKdmVyeSBiZWF1dGlmdWwgYW5nZWxpbmUgam9saWUKcGF3IHBvdgpmZWV0IGFydCBwb3YKZnVycnkgcGF3IHBvdiBhcnQKc2xlZWsgbGVncwpvcnRob2RveCBzeW1ib2xpc20gZGllc2VsIHB1bmsKc2NyZWVuIHRvbmVzCnBhaW50IHRvb2wgc2FpISEgYmx1ZQp0b2t5byBrb3dsb29uCnZpc2libGUgZm9yZWhlYWQKZGV0YWlsZWQgcmVhbGlzdGljIHNtaWxpbmcgZmFjZXMKaW4gaGFybW9ueSB3aXRoIG5hdHVyZQpyb3VnaCB3YXRlcmNvbG9yIHBhaW50aW5nCnNoZXJpZmYgYW5kIGNvd2JveQpsZWFwaW5nIGludG8gdGhlIGFpcgpuYXR1cmFsIGdyaXp6bGVkIHNraW4KdmZ4IG1vdmllCjEgOSA3IDAgcyBhbmFsb2cgdmlkZW8KdGltb3RoeSBrb25nCm1hcmluYSBmZWRlcm92bmEKdmljdG9yaWFuIGJyaXRhaW4gMSA4IDMgNQp2aWN0b3JpYW4gYnJpdGFpbiAxIDggMyA2Cmxvb2tpbmcgb3V0IGF0IGEgc3Vuc2V0CnZpZ28gdGhlIGNhcnBhdGhpYW4KaGlnaGx5IGRldGFpbGVkIHdpbmtpbmcgZmFjZQp2aW50YWdlIDcgMCBzIGFuaW1lIHdhdGVyY29sb3IKZ2xhaXIKYXp1cmUgY29sb3IgYmxlZWQKbG9jYWwgZ3ltCnZvaWQgbWFuaWZvbGQKdHdvIGxpdHRsZSBob3JuIG9uIHRoZSBoZWFkCnZ1bGNhbm8Kd2Fsa2luZyBvbiBhbiBvbGQgd29vZCBicmlkZ2UKcnVpbmVkIGVtcGlyZSBvbiB0aGUgYmFja2dyb3VuZAp3YXJyaW9yIGNoYXJhY3RlciBkZXNpZ24Kb2xkIHNpZ25zCmxheWVyZWQgdGV4dHVyZQp3ZWxjb21lIHRvIHRoZSBjaXJjdXMKbGluZGVuIHRyZWVzCmF0IHRoZSBzaXR0aW5nIGNvdWNoCndlYXJpbmcgZ3JlZWsgcGFsbGEKYXJtcyBzcHJlYWQgd2lkZQpjb3p5IGNhbG0hIGZhYnJpY3MgdGV4dGlsZXMKaHVnZSBnYXJnYW50dWFuIHNjYWxlCnRpbnkgc2hpcHMgZG9ja2luZwptb3VudGFpbm91cyBqdW5nbGUgc2V0dGluZwpiZWF1dGlmdWwgdHJhbnF1aWwgZGF5CndpbGQgb2NlYW4gc3Rvcm0gYXQgbmlnaHQKd2lsbGlhbSBzaGFrZXNwZWFyZSBjcnlpbmcKd2lubmlwZWcgc2t5bGluZQp3aXNlIG9sZCBpbmRpYW4gZ3VydQp3aXphcmQgc2h1ZmZsaW5nIGNhcmRzCnNjcCAzMDA4CnBhcnQgZGVhbiBjb3Jud2VsbCBzdHlsZQpwYXJ0IGxleWVuZGVja2VyIHN0eWxlCndvbWFuIGluIGJsYWNrIHJvYmVzCndvbWFuIGluIHN0cmVldHdlYXIKd29tYW4gc21va2luZyBjaWdhcmV0dGUKOCBpbnRyaWNhdGUgZ29sZGVuIHRlbnRpY2xlcwpwbGFjZSBvZiBiYXR0bGUKdGFyYW50aW5vIG1vdmllIHBvc3RlcnMKNCBrIGdsYW1vdXIgcGhvdG9ncmFwaHkKd29vZGxhdGhlCmVsdmVzIHNpdHRpbmcgb24gdGhlIGNvdWNoCmd1ZXJpbGxhIHNvbGRpZXIKb2YgYSBzY2hvb2xnaXJsIHBvc2luZwp3YXIgYmxhZGUgd2VhcG9uCnllbGxvdyBjcnlzdGFsIGdlbQp1cCB0byB0aGUgZWxib3cKeW91IGNhbiBzZWUgaW4gdGhlIHBpY3R1cmUKeW91IHdvbid0IGJlbGlldmUgaXQKY2hyaXN0b3BoIHdvaGxnZW11dGgKd2hpdGUgYW5kIGdvbGQgcHJpZXN0ZXNzIHJvYmVzCmZ1bGwgY3liZXJuZXRpYyBjb21iYXQgc3VpdAppbiBzdHlsZSBvZiBsdWlzIHJveW8Kc2hlIHdlYXJzIGxlYXRoZXIgamFja2V0CmxvdyBhbmdsZSBmYWNpbmcgc2t5CnlvdW5nIHdvbWFuIHdpdGggYW50bGVycwpAIHpicnVzaAojIGR5c3RvcGlhbiBhcnQKIyByb2NvY28Kc29saWQgY29sb3VyIGJhY2tncm91bmTigJ0Kbm8gZ3Jhc3Mgb3IgdHJlZXMKYXJ0d29yayDigJ0KZ3JlZW4gbWFnZW50YSBhbmQgZ29sZCDigJ0KdWx0cmFmaW5lIGRldGFpbCDigJ0Kb2lsIHBhaW50aW5nIOKAnQpwaG90b3JlYWxpc20g4oCdCuKAnCBhbmltZQpocSDigJ0Kd2VhcmluZyBhIGJhbmRhbmEgYW5kIGNoYWluCnN0YW5kaW5nIG9uIGEgZGVzawpnZW9tZXRyaWMgYXJ0IGRlY28Kbm8gZmluZSBkZXRhaWxzCmxlaWNhIG0gLSBhCmx1eCAzIDUgZmxlCmRhcmsgYmFja2dyb3VuZCDigJ0K4oCcIHNjYXJsZXR0IGpvaGFuc3NvbiBwb3J0cmFpdAo4ayByZW5kZXLigJ0KZHJhbWF0aWMgbGlnaHRpbmfigJ0KaXJvbiBhbmQgYXNwaGFsdApjeWJlcnB1bmsgMjA3N+KAnQp2ZXJ5IGRldGFpbGVk4oCdCnBob3RvZ3JhcGh54oCdCmlsbHVzdHJhdGlvbuKAnQpmYXNoaW9uIHBob3RvZ3JhcGh54oCdCm1hcmtlcuKAnQrigJxoeXBlciByZWFsaXN0aWMKcGhvdG/igJ0KYm9rZWjigJ0K4oCcbmF0YWxpZSBwb3J0bWFuCmdvbGRlbiBob3Vy4oCdCuKAnHB1ZmZ5IGNsb3Vkc2NhcGUKMzUgbW0gcHJvZHVjdCBwaG90b+KAnQpidXQgdmVyeSBnb29kIGxvb2tpbmfigJ0K4oCcdG90b3JvCm1hdHRlIHBhaW50aW5n4oCdCnBvcHMgb2YgY29sb3IKdm9sdW1ldHJpYyBsaWdodGluZ+KAnQpkaXNwbGF54oCdCmZyb3plbiBsaWtlIGEgc3RhdHVlCmluIGthcnVpemF3YQrigJxhbmltZSBnaXJsCm5lb2V4cHJlc3Npb25pc3QKYWJhbmRvbiB0aGUgZWdvCmludHJpY2F0ZeKAnQptb2Rlcm4gdG9uZXMKbG90cyBvZiBuZWdhdGl2ZSBzcGFjZeKAnQpwaG90byBrb2RhayBsZW5zClsgbW9pc3QKW2Jpb2x1bWluZXNjZW5zZQrigJ11bHRyYSByZWFsaXN0aWMK4pyo8J+VjPCfjJkK4p2k8J+UpfCfjYTwn4yqCvCfkIsgYXMg8J+QmCBhcyDwn6SWIGFzIPCfkb0gYXMg8J+Qswrwn5Cd8J+Rl/Cfkb4KdGhlIGpvdXJuZXkgb2YgbGlmZQpsb25nIGJyb256ZSBicm93biBoYWlyCmJpZyBwdWZmeSBsaXBzCmdvbmRvbGEKZ2hvc3RseSBmaWd1cmUKc3R5bGl6ZWQgdXJiYW4gZmFudGFzeSBhcnR3b3JrCnNjaSAtIGZpIHNjZW5lCnpvb20gc2hvdApsb3cgYXBlcnR1cmUgc3RyZWV0IGxldmVsCmJ1aWxkaW5ncyBjb2xsYXBzZWQKc3Ryb25nIGFuZCBpbXBvc2luZwppbXBpc2ggc21pbGUKcmliIGNhZ2UKcmVtYXJrYWJsZQp0cmVuZGluZyBvbiBsb2dvc3RhdGlvbgpqcGVnIGFydGlmYWN0CmJlYXV0aWZ1bCBuYXR1cmFsIGJhY2tsaWdodApsb3JkIG9mIHJlZ2VuZXJhdGlvbgp2b2xjYW5pYyBsYW5kc2NhcGUKc29waGllIGNvdmVyIGFsYnVtCmV4cGVyaW1lbnRhbCBhcnQKcmVuZGVyZWQgb24gdW5yZWFsIDMgZApzdGVlbCB3aW5kb3cgbXVsbGlvbnMKc2N1dG9pZAp3ZWFyaW5nIGEgd2V0IHdoaXRlIHNob3J0IGRyZXNzCmhvb2RlZCBjbG9ha2VkIHNpdGggbG9yZApjcnVpc2UgY29udHJvbAppbXBvc3NpYmx5IGxpZmVsaWtlIGNvbXBvc2l0aW9uCnN0dW5uaW5nISEKc3R5bGUgb2Ygd2lsbGlhbSBtb3JyaXMgcHJpbnQKYnV0dGVyZmx5IHBvcCBhcnQKISEhIHZlcnkgY29oZXJlbnQhISEgdmVjdG9yIGFydApudWtlCnNxdWFyZSBqYXctbGluZQonZ3Jvb3Z5Jwp3aXRoIHN0YWxpbmlzdCBzdHlsZSBoaWdocmlzZQpyZWFsaXNtIGRyYXdpbmcKaGlkZGVuIGFuaW1hbHMKc29tZSBmYWxsZW4gdHJlZXMKd2VhcmluZyBhIHNjYXJsZXQgaG9vZGllCnJpZGluZyBhIHNrYXRlYm9hcmQgaW4gYmVybGluCmFuaW1lIG1hZ2F6aW5lIGNvdmVyCnBob3RvZ3JhbW1ldHJ5CnVuaXRlZCBzdGF0ZXMgYWlyIGZvcmNlCndpdGggbG90dXMgZmxvd2VycwpiYXJyeSBxaW5kc29yLXNtaXRoCmFiYW5kb25lZCBuaWdodCBoYW5nYXIKdGhlIGdvZCBvZiBtaXNjaGllZgpjb25jZXJ0IHBob3RvZ3JhcGh5IGZyb20gdGhlIDcwcwpkZXNlcnQgaGlnaHdheQp3ZWFyaW5nIGNhdmUgbWFuIGNsb3RoZXMKbnBjIHdpdGggYSBzYWludCdzIGhhbG8KZHVuIG9yIGdyZXkKb3IgYmxhY2sKdGlnaHQgZ2lnYW50aWMgcGluayBjdXJscwp3YXJtIGZlYXR1cmVzCnZpbnRhZ2UgNzBzIGNvbWljIGNvdmVyCnRyYW5zcGFyZW50IGNyeXN0YWxzCndlYXJpbmcgbWlycm9yZWQgc3VuZ2xhc3Nlcwpjb21wcmVzc2VkIGpwZWcKd2hpdGUgc2lsa3kgb3V0Zml0CjUwbW0gYm9rZWgKcGFyb2R5IG1vdmllIGJsb29wZXJzCnBlcnNwZWN0aXZlIGRlcHRoCnZlcnkgZGV0YWlsZWQgY2l0eWNhcGUgYXQgbmlnaHQKaW1hZ2luZngKdWtpdW8tZSBhbmQgc3R1ZGlvIGdoaWxiaSBzdHlsZQovci9waXhlbGFydAoxOTMyCmJydXRhbGlzdCBzcGFjZSBzaGlwCm9jdGFuZSByZW5kZXIgLSBuIDkKdHJvcGljYWwgbGlnaHRpbmcKbWFueSBzYWt1cmEgb3JpZ2FtaSByb3NlcwpteSBzb3VsIGRyaWZ0ZWQgYXdheSAnCmJvbGQgY29tcGxpbWVudGFyeSBjb2xvcnMKcmVhbGlzdGljJycKOGsnJwpkaWdpdGFsIGFydCcnCmVwaWMgcG9zdGVyCmtleSBmcmFtZQpuZW9saXRoaWMgc3RhbmRpbmcgc3RvbmVzCmdvbGQgZW5jcnVzdGF0aW9ucwpnb2xkIGFkb3JuZW1lbnRzCmlzdHbDoW4gc8OhbmRvcmZpCmluZGllZ3JvdW5kCmFscGhvbnNlIG11Y2hhJycKd2hpcmxpbmcgcGxhc21hCmF0bW9zcGhlcmljIG1vdGVzCnJlZCBhbmQgZ29sZCBzdW1wdHVvdXMgZ2FyYgpnaWx0IHNpbGsgZmFicmljCmFydGlzdCB1bmtub3duCmZ1bGwgYm9keSBhbmQgZmFjZSBhbmQgaGVhZAptYXNzaXZlIHRlZXRoCnN3YW1wIHRoaW5nCm5lb24gY29sb3JpbmcKZmxvd2VyIGdhcmRlbiBzdW1tZXIgbW9ybmluZwpyb2JlcnQga2lub3NoaXRhCnRoZSBkYXduIG9mIG1hbgooICggKCAoICggamFndWFyIGUgLSB0eXBlIGNhcgpidWxsZXQgcHJvb2YgdmVzdApzdHJpbmcgcHVwcGV0CmphY2tzb24gcG9sbG9jayBwYWludGluZwpzb3VuZHMgaW4gdGhlIGdyYXZleWFyZApseWluZyBkb3duCmxvdmVseSBsYW5ndWlkIHByaW5jZXNzCmJyZWFzdHBsYXRlICkgKSApCnZpc29yIGNvdmVyaW5nIGV5ZXMKcml2ZXIgZmxvdyB0aHJvdWdoIGJvcm5lbyBqdW5nbGUKYW1hemluZyBwcm9mZXNzaW9uYWwgcGljdHVyZQpjeWJlcndhcnMKMSA5IDggOSBkaXNuZXkKKCAoIGdsaXRjaCBhcnQgKSApCmZpcmV3YXRjaAooICggaXNvbWV0cmljICkgKQooICggdW5yZWFsIGVuZ2luZSApICkKc3Ryb25nIGdyYWluCnN0cm9uZyBzaGFkb3cKZGV0YWlsZWQgcGl4ZWwgYXJ0d29yawooICggZ29kIGtpbmcgb2YgYWkgYXJ0ICkgKQpzb3VuZCB3YXZlCnBlcmZlY3QgYW5pbWUKZ2lhbnQgbGVncwoxIDggNiAwIHMKKCBkb2cgKSBqdW1wcyBmcm9tIG1vdW50YWluCmRvZyBsb29rcyBsaWtlIGVsZXBoYW50CjMgZCA0IGsKaW4gbXkgYmVkcm9vbQpoZWF2eSBmaXJlIG9uIHRoZSBiYWNrZ3JvdW5kCmluIGEgZmlnaHRpbmcgcG9zZQooIHNhc3F1YXRjaApiYWNrIC0gbGl0CmdyZWVuIGJyaWdodCByZWQKcGhlbm9tZW5hbGx5IGFlc3RoZXRpYwpyaWNoIGFuZCBnYXVkaWx5CmJsb29keSBiYXR0bGVmaWVsZApzdGFyayBzaGFkb3dzCmRhcmsgb3JhbmdlIGJsYWNrIHdoaXRlIHJlZAooKChuZW9uIHBhbGV0dGUpKSkKb3V0bGluZSBza2V0Y2gKKCgoKG9jdGFuZSByZW5kZXIKbnZpZGlhIHJheXRyYWNpbmcgZGVtbykpKSkKMi41ZApsdXNoIHZlcmRhbnQgcGxhbnRzCmZyb3N0eQpoYXBweSBzdW5ueSBkYXkKaW50cmljYXRlIGxpZ2h0CnRoZQpzdW5zZXQgbGlndGhpbmcKZm9yZXN0IGFuZCBmZWFyCmNvbXB1dGVyIG1hZGUgb3V0IG9mIGh1bWFuIGZsZXNoCnJpY2ggZGV0YWlsCmhhbmRjcmFmdGVkIHBhcGVyIGJhY2tncm91bmQKcGluayBhbmQgYmx1ZSBjb2xvdXIKdHNoaXJ0IGRlc2lnbgp3aGl0ZSBoaWphYgpsaWdodCBiZWFyZApteXN0IG9uIHRoZSBhaXIKY2hhc2luZyBhIGthbmdhcm9vCjIwNzAKZXRoYW4gdmFuIHNjaXZlcgo1IGZpbmdlcnMpLiBmdWxsIGJvZHkgcmVhbGlzdGljCnRyaS14IDQwMCB0eAoyLWRpbWVuc2lvbmFsCnZlY3RvcmlhbAovci9lYXJ0aHBvcm4KMSAwCjEgMCBtbQptb3NzIGFuZCBmZXJucwpyb3VuZCBnbGFzc2VzIHBvdHRlcgoxIDcgLSB5ZWFyIC0gb2xkIGdvdGggZ2lybApmbHlpbmcgdGhyb3VnaCBza3kKOCBrIGhkIGRldGFpbGVkIG9pbCBwYWludGluZwoxIDcgdGggY2VudHVyeSBkdWNoZXNzCmFub24gNSAwIG1tCjEgOCA1IDQgY3JpbWVhCjEgOCA4IDcKYXJ0IGR1IG1vbmRlCmJpZyBibG9uZGUgaGFpcgpiZWF1dGlmdWwgc2hvdApnZXJtYW5pYwpoaXRjaGNvY2sKZmlzaGV5ZSEhISEhISBsZW5zCmRvbGwgcGhvYmlhCmphY3F1ZXMgbG91aXMgZGF2aWQgc3R5bGUKaHlzdGVyaWEKY2FycGVudGVyCmJyYWRidWlsZHMKcGVyc2lhbiBydWdzCnNjYXJmb2xrCm5lb24gY29sb3IgYmxlZWQKZGllIC0gY2FzdCBtZXRhbApzaXQgLSBjb20KZnVua2FkZWxpYwphcnQgb2YgYWxlc3NhbmRybyBwYXV0YXNzbwpkYXJrIGdyZXkgd29sZgpkYXJrIGdyZXkgd29sZiBvJ2Rvbm5lbGwKY29vbCBwYWxldHRlCnBob3RvZ3JhcGh5IGNpbmVzdGlsbApyZWZyYWN0ZWQgY29sb3IgbGluZXMKaGUgbWFuCm9sZCBob3VzZQptdXNldW0gYmFja2dyb3VuZApzbWFsbCBjcmVlawp0aGUgZmFidWxvdXMgY2l0eSBvZiBsb25kb24Kc3RlcmlsZSBjb2xvdXJzCmZ1dHVyaXN0aWMgeWVhciA0IDAgMCAwCm51bWVyb2xvZ3kKaG9seSBjZXJlbW9ueQpmbGlrcgpkc2xyIDUwbW0KcmVkIGxlYXZlcwoxMDAKZGFtYWdlIHBhcGVyCnN0YW5kaW5nIG9uIGEgc2hlbGYKMTIgZmlndXJlcwpyZXByZXNlbnRpbmcgdGhlIDQgc2Vhc29ucwooMyBhcmUgd2ludGVyCjMgYXJlIHNwcmluZwozIGFyZSBzdW1tZXIgYW5kIDMgYXJlIGF1dHVtbikKcm9sbGVpZmxleCB0bHIKMTIzNDU2Nzg5CjE0IHlvIGJlcmJlciBib3kKYm91Z3VlcmVhdSBhbmQgYm93YXRlcgpzdGFyayBzdW5yaXNlIGxpZ2h0aW5nCjE1MDgxOTU5IDIxMTIxOTkxIDAxMDEyMDAwIDRrCndvbmRlcmZ1bCBsaWdodGluZwprYXJtYQp0dXJidWxlbnQgd2F2ZXMKYm9hcmQgZ2FtZSBjb3ZlciBhcnQKZnJvemVuIHNlYQptb2ViaXVzIGFuZCBtb2hyYmFjaGVyCnNpdHRpbmcgaW4gZnJlbmNoIGFwYXJ0bWVudApzaXR0aW5nIGluIG9mZmljZQpmdXR1cmlzdGljIGdhZGdldHMKcHJvdG8tbWV0YWwKbGlnaHQgcmF5cyBpbGx1bWluYXRlIGR1c3QKbmV4dCB0byBhIHBsYW50CjE5MzUgYm13IG0xIHN0cmF0b3MKa2ltIGpvbmctaWwKY2F0YWxvZyBwcmludApmdWxsIGNvbG9yIGRyYXdpbmcKZWxvbiBtdXNrIGFzIGEgY3lib3JnCmRlZXAgc2VhIGFtYmllbmNlCmp1Z2VuZHN0aWwgZHJhd2luZ3MKZGVlcCBqdW5nbGUgdGV4dHVyZQpjbGFzc2ljIG1heWFuIG15dGhvbG9neQpkZWVwIGp1bmdsZSBjcmVhdHVyZXMKaW4gYW4gYXR0aWMKaW4gZnJvbnQgb2YgdGhlIGVpZmZlbCB0b3dlcgoxOTc2IHNjaWVuY2UgZmljdGlvbiBwb3N0ZXIKMTk3OCBjdXQgb3V0IGNvbGxhZ2UKYW5jaWVudCBwbGFudHMKZGVjYXlpbmcgZGFwcGxlZCBzdW5saWdodApsYXJnZS1mb3JtYXQgcGhvdG9ncmFwaHkKYmlnIGJyb3RoZXIKOjE0IGZsY2wgKyBqZXQgZ3JpbmQgcmFkaW8KdGFjdGljYWwgc3F1YWRzIDo5CmFlcmlhbCB2aWV3IGNpbmVzdGlsbCA4MDB0IDE4bW0KbGF2YSBsYW1wcwptdXNpY2FsIGluc3RydW1lbnRzCmRhcmsgc3Rvcm15IGNsb3VkcwoxOjEgYWxidW0gYXJ0d29yawpzaGFycCBlZGdlcyBjYXJ0b29uCmdvb2Z5IGNhcnRvb24Kb3JuYXRlIGZsb3dlciBkZXNpZ24KZ2lybCdzIHJvb20Kc2xpcGtub3QKbG9va3Mgc2FkIGFuZCBzb2xlbW4KaGVhZGxpZ2h0cyBhcmUgb24Kc2hpb3JpIHRlc2hpcm9naQptZWd1bXUgb2thZGEKdG9ydSBmdXJ1eWEKY29sb3VyIHNoaWZ0CmJlYXV0aWZ1bCBzdW5zZXQgZ2xvdwp0cmFkaXRpb25hbCBjaGluZXNlIHdhdGVyY29sb3IKcm9sbGluZ3N0b25lIG1hZ2F6aW5lCmNvc21pYyBzdXJ2aXZhbApzYXBwaGlyZSBibHVlIGV5ZXMKbmVhbmRlcnRoYWwgcGVvcGxlIGVhdGluZyBzdXNoaQp3ZWFyaW5nIHYgLSBuZWNrIHRvcApkYW5jZWZsb29yCnNpbmdlciAtIHNvbmd3cml0ZXIKdG9wIDQgMApyeWFuIGhld2V0dApkaWUgYW50d29vcmQgKCB5b2xhbmRpIHZpc3NlciApCnBpbnVwIG1vZGVsCnBldCBiaXJkCmhlYXZ5IHJhaW4gYW5kIG1pc3QKZnJvbSB0aGUgbW92aWUgcXVlc3QgZm9yIGZpcmUKaW4gYW4gYWJhbmRvbmVkIG1hbGwKbWFueSBhbmdsZXMKYXdhcmQgd2lubmluZyBjb25jZXB0IGFydGlzdApjcmFja2VkIG11ZApwYWludGVybHkgdGV4dHVyZQptYXJibGVkCnBhbGV0dGUKbGlnaHQgZm9nZ2VkCm1hcmsgaGFtaWxsCmhheWRlbiBjaHJpc3RlbnNlbgpibHVlIG5lYnVsYQpiZm10dgpvbmUgLSBsaW5lIGRyYXdpbmcKd2l0aCBhIHJvYm90aWMgYXJtCndvb2RsYW5kIHNldHRpbmcKMi4gc2lnYXJhIGHFn8Sxcm1hawpzbW9raW5nIHdvbWFuCnJpY2ggbW9vZHkgZGFyayBhdG1vc3BoZXJlCm1lZ2FzdHJ1Y3R1cmUgYmFja2dyb3VuZApkYXJrIG9taW5vdXMgY2xvdGhpbmcKZ3JpdHR5IHJlYWxpc3RpYyBzbW9rZQpsb25nIGJyb3duIHB1ZmZ5IGN1cmx5IGhhaXIKYXRobGV0aWMgc2hvcnRzCmFlcmlhbCBwaG90byBuaWdodCB2aXNpb24Kd2hpdGUgc3R1ZGlvIGJhY2tncm91bmQKeW93b3JsZApzdHlsaXplZCAzZCByZW5kZXIKMjA0MApsaWwgd2F5bmUKc2NydWJzCmd0YSB2IHBvc3RlciBzdHlsZQoyYgp3YXJtIG9yYW5nZSBsaWdodGluZwpzaG11cApuZXR0aW5nCmJsdWUgYW5kIHNpbHZlciBjb2xvcnMKd2VzIGFuZGVyc29uIG1vdmllCnNsYXZlCm1hbGUgdmFtcGlyZQphY2lkIGNvbG9ycwp1cmJhbiBzdXJyb3VuZGluZ3MKZnV0dXJpc3RpYyBhdHRpcmUKZGV0YWlsZWQgZmFzaGlvbiBpbGx1c3RyYXRpb24KbWFydmVsIGNvbWljcyBoIDYgNCAwCmphbWVzIGRlYW4KMyAvIDQgdmlldyBvZiB3b21hbiB3aXRoIHdpbmdzCmFkbWlyaW5nIGhlciBvd24gcmVmbGVjdGlvbgozIDUgbW0gY29sb3IKbWFyaW8gY2FydApsb25nIGJsb25kZSBoYWlyIGFuZCBiaWcgZXllcwphbnRpcXVlIHBob3RvCmlyb25tYW4KaGlnaGx5IGRldGFpbGVkIC0gbiA0CnNrYXRlYm9hcmRlciBzdHlsZQp0ZWxsaW5nIGpva2VzCmlsbGlub2lzIHZhcG9yd2F2ZQozIGZpZ3VyZXMgYXMgd2ludGVyIHNwaXJpdHMKbmVvbiBiYXNlbWVudApleHBhbmRlZCBzdXJyZWFsaXNtCmRhcmxpbmcgaW4gdGhlIGZyYW5rCndpdGggZ2xpdGNoIGFuZCBzY3JpYmJsZSBlZmZlY3RzCmxvbmcgd2luZGJsb3duIGJsYWNrIGhhaXIKcmVkIGJvb3RzCmVuaGFuY2VkIGZhY2UKZ2xhbW9yb3VzIGZhc2hpb24gcG9zZQo3IDAgbW0gcGhvdG9ncmFwaHkKb3JuYXRlIGRldGFpbGVkIGhhaXIKMyBkIGdpYW50IG9yY2hpZCBmbG93ZXIKZmFsbCBsZWF2ZXMKZHJpZWQgcGxhbnRzCm1lY2ggYm9keQp3aXJlcyBmcm9tIHRoZSBtYXRyaXggbW92aWUKbGFjZXkgYWNjZXNzb3JpZXMKZ3VtYmFsbCBtYWNoaW5lCmxpcXVpZCBsaWdodApmdWxseSBpbiBmcmFtZQp0ZW5kcmlscyBvZiBjb2xvcmZ1bCBsaWdodAphc3RvciBhbGV4YW5kZQpiaWJsaWNhbGx5IGFjdXJhdGUgYW5nZWwKcGMgZ3B1IGZvdiBzZXR0aW5ncwpqYWNlayB5ZXJrYSBhbmQgdmxhZGltaXIga3VzaApjaW5lbWF0aWMgZm9vdGFnZQpjb3J5CmJlYXV0aWZ1bCBzcGFjZSBzdGFyIHBsYW5ldApjb2xvdXJmdWwgYXJ0d29yawp0aGUgc3VuIG9uIHRoZSBob3Jpem9uCmpvc2VwaCBsZXllbmRlY2tlcgpwZXRhbHMgZmFsbGluZwozIGQgcHJpbnQKZmFzaGlvbmFibGUgd29tYW4KbW9iaWxlIGFwcApjb29raW5nIHBpenphCmxpZ2h0IHBpbmsgYmFja2dyb3VuZApubyBjb2xvcnMKaW5uYXRlIHN0dWRpbwozIGQgcmVuZGVyIG9mIGEgc2hhbWFuCnZpYnJhdGlvbgpuZW9zdXJyZWFsaXNtLiBkaWdpdGFsIGFydAplZ3lwdG9sb2d5CnBsYWNlZCBpbiBhIGJsb29keSBoYWxsCm1hY2hpbmUgLSBwdW5rIQphbmltYWwgY3Jvc3Npbmcgc3R5bGUKc3R5bGUgb2Ygem9vdG9waWEKaW4gYSBtYXhpIHdoaXRlIGRyZXNzCmhpZ2ggZGV0YWwKYmVhdGxlCmZ1cmxlc3MKcGVuIGFuZCBpbmsgZG9vZGxlcwpzYXhvcGhvbmVzCmRyaXZpbmcgYSBjYXIKYnV0dG9uIHBvdGVuY2lvbWV0ZXJzCnNpZGUgdmlldyBvZiBoZXIgdGFraW5nIHN0ZXBzCmZsZWtzCmNpdHkgc3F1YXJlCmJyaWdodCBtb29kCmhhcHB5IGZhc2hpb24gbW9kZWwgZmFjZQpjb3BwZXIgYW5kIGRlZXAgdGVhbCBtb29kCmFybW9yIGZvY3VzIG9uIGZhY2UKcmVhbGlzdGljdGljCmNvbnRlc3Qgd2lubmVyIDIwMjEKc3RhdHVzIGljb25zCmxpZ2h0IGJlbmRzIHRvIGl0CmluIGEgcm93CmVkdSBzb3V6YQpwYWludGVkIGFzIGEgZ2FtZSBjb25jZXB0IGFydApkb2cgZWFycwpwYWxtdHJlZXMKbGlnaHQgc21pbGUKd2hpdGUgY2FwCmZ1bGwgYm9keSBhbmQgaGVhZCB2aWV3Cm9jZWFuIHNob3JlbGluZSBvbiB0aGUgaG9yaXpvbgozZCBhbmltZSBnaXJsCmNvbm5lY3RlZCB0cm91Z2ggd2lyZWQKeW9nYSBtZWRpdGF0aW9uIHBvc2UKZ3JhZmZpdGkgaW4gdGhlIGJhY2tncm91bmQKc3RhbmRpbmcgb24gYSBza3lzY3JhcGVyIHJvb2Z0b3AKcmVndWxhciBidWlsZAphbmF0b215IHBvcnRyYWl0CndlYXJpbmcgYSBkdXN0ZXIgY29hdAozZCByZW5kZXIgb2YgaW50cmljYXRlIHdhc3AKNzAncwpob3VkaW5pIDNkCmNocm9tYXRpYyBtYXRlcmlhbApwcmVmZWN0IGJvZHkKYmVhdXRpZnVsIGJvZHkgYW5kIGZhY2UKc3ByaW5nIHRoZW1lCnRoZSBwYWxtcyBjb21lIGZyb20gdGhlIGdyb3VuZApncmlkIGFuZCB3ZWIKM2QgYW5pbWUgcG9zdGVyCjNkIGZlbWFsZSBjaGFyYWN0ZXIgbW9kZWwKcnVuZSBmYWN0b3J5IDUKaGFuZCBwYWludGVkIHRleHR1cmVzIG9uIG1vZGVsCmxvbmcgcGxhdGludW0gaGFpcgpwc3ljaGVkZWxpYyEKc3BpcmFscyB0dWJlcyByb290cwpwc3ljaGVkZWxpYyEhCmRtdCEhISEhISEhCigoKCgoKChubyBnbG93KSkpKSkpKQozZCBnZW9tZXRyaWMgc2hhcGVzCmZsYW1pbmdvCnJldHJvd2F2ZSAoKHN5bnRod2F2ZSkpCmJsdWU6IDAuNQozZCBpc29tZXRyaWMKM2QgbWluaW1hbGlzdGljIGFydApjb250cmFzdGluZyBsaWdodGluZwpqYXBhbmVzZSBtZWNoYQpyaXZlciBmbG93aW5nIGJlc2lkZSB0aGUgcm9ib3QKb2N0YW5lIHJlbnRlcgplZG0KMTZrIHVoZAo0IDAgLSB5ZWFyIC0gb2xkCmZyZW5jaCBtYW4gZnJvbSBsb3Vpc2lhbmEKY2F0YWNseXNtaWMKc21pbGluZyBidXQgaGFzIGEgdGVtcGVyCmtlawpwYWludGVkIGJsYWNrCmFtYXppbmcgZ3JhcGhpY3MKYW1iZXIgZ2xvdwpyZXB1bHNpdmUKMSAzIG1tIGZpbG0gY29sb3IgZ3JhZGluZwpiYWNrZ3JvdW5kIGluIHNwYWNlCm1lZ2FidWlsZGluZ3MKZGFyayB3YXJtIGxpZ2h0Cmx1bWlvbiByZW5kZXJpbmcKcHVycGxlIGNvbG9yLXRoZW1lCmFsZXhhbmRyaWEgb2Nhc2lvLWNvcnRlegpicm9seQpkZWVwIGp1bmdsZQpjYW1lcmEgYmxvb20KYmVhdXRpZnVsIGFsaWVuIGxhbmRzY2FwZQpwbGFpbiBzdHJldGNoaW5nIGludG8gZGlzdGFuY2UKc3BhY2VoaXAgbGFuZHMKd2VsY29taW5nIGdyaW4KdGhvbWFzIHJpdmVyCnNlbnRpZW5jZQpzcGF0aWFsaXNtCnZhcG9yd2F2ZSBsaWdodHMKcm91bmQgYnVsYm91cyBub3NlCmNpbmVzdGlsbCA4MDB0IGFnZmFjb2xvcgo2IDYgNgphcyBmYXIgYXMgdGhlIGV5ZSBjYW4gc2VlCmNpbmVzdGlsbCA4MDB0IGVhc3RtYW5jb2xvcgpwcm9wYWdhbmRhIGFydApmbGFzaGVzCmxvdWlzIHN1bGxpdmFuCmhvbGRpbmcgYSB3aGl0ZSBmbGFnCndvcm4gYmxhY2sgY29hdAp3aGl0ZSBmb250IG9uIGJsYWNrIGNhbnZhcwpiaWtpbmkgKyB0YXR0ZXJlZCBtaWxpdGFyeSBnZWFyCjggMCBzIGFzaWFuIG5lb24gbW92aWUgc3RpbGwKcG9saWNlbWFuCndhbmVlbGxhCmN5YW5nbW91CmZvb2wgYW5kIHBpeGVsIGplZmYKZXhhbWluaW5nIHJ1aW5zCmh5cGVyIHVsdHJhIGRldGFpbGVkCmh5cGVyIGRldGFpbGVkIGZhY2VzCm1hc2NvdCBwb3AgZnVua28KYXdhcmQgd2lubmluZyBtb2Rlcm4gZGVzaWduCnJlbGF0YWJsZQpkb2Ygd2lkZQppbXByZXNzaW9uCmZsYW1lIGZyYWN0YWwKaGlnbHkgcGhvdG9yZWFsaXN0aWMgZGV0YWlscwpoZXIgaGVhZCByYWlzZWQgaW4gcmFwdHVyZQpiYWNrZ3JvdW5kIGx1c2ggdmVnZXRhdGlvbgppbnNlY3RzIGFuZCBiaXJkcwpjb21tYW5kZXIgc2hlcGFyZAo4IG1tIGZpbG0gc3RpbGwKcXVlZW4gb2Ygd2FyCndoaXRlIGNsb2FrCnRpZ2h0cyBza2luCmNsb3RoZWQgaW4gd29ycmllciBhcm1vcgplYXIKbGVhdGhlciBib290cyBhbmQgY2FwZQpjaW5lIHN0aWxsCmljZSBtb3VudGFpbnMgYWZhcgpza3VsbHMgYW5kIHNrZWxldG9ucwphYmFuZG9uZWQgd2VhcG9ucwpzY2VuZSB3aGVyZSBzaGUgaXMgaW4gcml2ZW5kZWxsCmZlYXR1cmVkIGluIGRldmlhbnRhcnQKZ3VzdGF2ZSBkb3JlIHN0eWxlCmZ1bmdhbCBncm93dGgKZnJlbmNoIGFyY2hpdGVjdHVyZQpoYXMgZmlyZSBwb3dlcnMKZCZkIGRhcmsgc3VuIGNoYXJhY3RlciBhcnQKZ3JlZW4gYW5kIGJyb3duIGNsb3RoZXMKY3Jvd2RlZCBpbm4gaW4gdGhlIGJhY2tncm91bmQKd2VhcmluZyBhIHR1dHUKYW5jaWVudCBwZXJzaWFuIGNpdHkKOSAwIGRlZ3JlZXMgZm92CjkgMCBzIGJlZHJvb20KY2hpbGRyZW4ncyB0b3kKYXJ0Z2VybSA0IGsKOS8xMQpjYXZlIGRyYXdpbmdzCjhrIGZpbG0gc2Nhbgpjcm93ZGVkIGJlYWNoCm1pZHN1bW1lcgpzb21lIGNsb3VkcwpoaWdobHkgc3ltbWV0cmljYWwKd29tYW4gaGlzIGhvbGRpbmcgYSBzaWduCnRyYW5jZSBtdXNpYwpkcmVzc2VkIGluIGEgZnJpbGx5ICgobGFjZSkpCnZlbHZpYSAxMDAKZGlzdG9ydGVkIHBlcnNwZWN0aXZlCmhpcyBhcm1zIGFuZCBsZWdzIGFyZSBoYW5naW5nCmluIHBhc3RlbCBjb2xvcnMKY3J5c3RhbCBjbGVhciBzZWEKYSBiZWF1dGlmdWwgeW91bmcgd29tYW4KbmVpbCBibGV2aW5zIGFuZCBqb3JkYW4gZ3JpbW1lcgpkZWNvcHVuawpnb29kIHNtaWxlIGNvbXBhbnkKMy1kIDhrCmhvbGRpbmcgYSB3aGl0ZSBmbHVmZnkga2l0dGVuCmNoYXBwaWUgaW4gYW4gYWRpZGFzIHRyYWNrIHN1aXQKZmxvYXRpbmcgaW4gdGhlIGRlc2VydCBuaWdodAphIGdlb3JnZSBtaWxsZXIgZmlsbQp3aGl0ZSB0aWdodHMgY292ZXJlZCBpbiBzdGFycwp6b21iaWUgZXZlcnl3aGVyZQpidWlsZGluZyBkZXN0cm95ZWQKaG9yZGUgb2Ygem9tYmllcwp3aGl0ZSBsaWdodHMKLXN0ZXAgNTAKYSBodW1hbiBtYWxlIHBhbGFkaW4KaWxsdXRzdHJhdGlvbgpoZWRpIHNsaW1hbmUKbGlmZSBzaXplCjIwNzBzCnJpbmcgZmxhc2ggY2xvc2V1cCBwaG90b2dyYXBoCndhdGVyY29sb3IgZGV0YWlsZWQgYXJ0CnBhbmluaQp0aGUgZ3V5IGZyb20gYSBjbG9ja3dvcmsgb3JhbmdlCnRoZSBza3kgaXMgZGFyawppbiBmb3JtYXRpb24KYmxhY2sgcG9pbnRlZCBoYXQKc2hhdHRlcgpqdXJhc3NpYwphIHdoaXRlIHdvbGYKbGF2YSBmbG93cwpzcGlyYWxsaW5nCmNpbmVtYXRpYyBjaGFyYWN0ZXIgY29uY2VwdCBhcnQKYXdhcmQgb24gY2dzb2NpZXR5CmRpY3RhdG9yc2hpcApwYXRyaWNrCnVwZGF0ZQp3YXRlcm1hcms6LTEKcGhvdG8gcmVhbGlzdGljIHBhaW50aW5nCm1hZCBtYWdhemluZSBhZXN0aGV0aWMKZXhhbHRlZApyYWlubnkKbG90cyBvZiBvY2Vhbgp1cHJpZ2h0CnJlbmUgbWFyZ2l0dGUgaWxsdXN0cmF0ZWQKYnJpZ2h0dmlicmFudApzaGUgaXMgZWFzdGluZyBhIHBlYWNoCjQgZXllcwpiZWF1dGlmdWwgc3ltbWV0cmljYWwgZmVhdHVyZXMKdG9tIGJhZ3NoYXcgYW5kIHRvbSByaWNobW9uZApncmVlZAphbWF6aW5nIGZsb3dlciB0aWFyYQp6ZXR0YWkgcnlvdWlraQpkYXJrIGNvYXQKM2RleGNpdGUKYm9iIGN1dCBoYWlyCmxhY2UgdmVpbApkcmFtYXRpYyBsaWdodGluZyBhbmQgY29sb3JzCmh5cGVyIHJlYWwgaGlnaGx5IGRldGFpbGVkCnR1bmdzdGVuCnNlcnZpbmcgZnJpZXMKbWFubWFkZQpzcG9udGFuZW91cwphIGJlYXV0aWZ1bCBraXRzdW5lIHdvbWFuCmhpZ2ggZGVmaW5pdGlvbiByZW5kZXIKamFwYW4gdG9reW8gc2t5dHJlZQp3YXRlcmNvbG9yIGV4cHJlc3Npb25pc3QKYnJpZ2h0IGRpdmluZSBsaWdodGluZwp1bmlmb3JtIGJhY2tncm91bmQKY2xlYXIgZ2xhc3Mgd2FsbApleHRlcm5hbCBzdGFpcmNhc2VzCmdvbGQgdGhyb25lCmdyZWVuIGJ1bGdpbmcgZXllcwp0aGUgcml2ZXIgaXMgZmxvd2luZyBpdHMgd2F5CmNvbG9zc2FsIGRyYWdvbiBhcyBiYWNrZ3JvdW5kCmV3YSBqdXN6a2lld2ljegphaSB3ZWl3ZWkgYW5kIGdyZWdvcnkgY3Jld2Rzb24Kdml2ZAplZmZlY3QKZGF2aWQgbm9yZW4KYSBiZWF1dGlmdWwgcG9sZSBkYW5jaW5nIGZhaXJpZQpmYXNoaW9ud2VlayBiYWNrc3RhZ2UKbmVvbiBzdW5nbGFzc2VzIQooKChhbHBob25zZSBtdWNoYSkpKQonMjAKdWx0cmF2aW9sZXQgYW5kIG5lb24gY29sb3JzCndoaXRlOiAwLjUKbG9va3MgbGlrZSBlYnJ1IMWfYWhpbgpsb29rcyBsaWtlIGZhYml1bGEgbmFzY2ltZW50bwpsb29rcyBsaWtlIGxhdXJhIGJhcnJpYWxlcwphIGJlYXV0aWZ1bCBzb3JjZXJlc3MKcGluZWFwcGxlcwp3aGl0ZSBhbmQgcmVkIHJvc2VzCmFkZXB0dXMgYXN0YXJ0ZXMKZmxhdCBpbWFnZQptYXNraW5nCm9jdGFuZSByZW5kCmZvbGlhZ2UgY2xvdGhpbmcKcnViYmVyeS1sb29raW5nIGJvZHkKYmxhY2sgYW5kIHdoaXRlIHBhbGV0dGUKdGhyZWUgbWFzdHMKd2l0aCBlYXJ0aCBpbiB0aGUgYmFja2dyb3VuZApldGhub2dyYXBoeQp1bnJlYWwgZW5naW5lIDUgZnVsbCByZW5kZXJpbmcKdGhlIHJhYmJpdCBoYXMgcGluayBmdXIKeTJrIHN0eWxlCnJvY2t5IHNlYXNob3JlCnZvbHVtZXRyaWMgbGlnaHRpbgphd2FyZC13aW5uaW5nIHBhaW50aW5nCm5lb24gc3RhdGljCmEgYnJpZ2h0bHkgY29sb3JlZApwb2x5bWVyIGNsYXkKYSBicmlnaHRseSBjb2xvdXJlZApoaWdobHQgZGV0YWlsZWQKZ3VtZHJvcHMKYWN0aW9uIHBhY2tlZApmdXR1cmVpc3RpYwp3aXRoIGxvdHMgb2YgZGV0YWlscwpkYXduIHNldHRpbmcKY2hpbmVzZSBsYW50ZXJucwpwcnVzc2lhCnBhc3RlbCBnbGF6ZQptb3JiaXVzCmFyYWtpIHN0eWxlCmEgcHVycGxlIGFuZCB3aGl0ZSBkcmVzcyB1bmlmb3JtCmhlIGhhcyBhIHJlZCBoYXQKcmlua28ga2F3YXVjaGkKYSBjaXR5IGluIHRoZSBjbG91ZHMKeWVhciAxNTA2CjhrIHVoZCBvZmZpY2lhbCBzY3JlZW5zaG90CnNreXNjcmFwZXJzIGluIHRoZSBkaXN0YW5jZQphIGNsb3NlIHVwIHNob3QKcGxhbnRzIGV2ZXJ5d2hlcmUKYmFja2dyb3VuZCBpcyBhIHNsdW0KcGFpbnRlZCBpbiBvaWwgY29sb3Vycwrwn6WlIPCfjZUgaHlicmlkCm92ZXItdGhlLXNob3VsZGVyLXNob3QKbGliZXJ0YXMKdGFrZW4gb24gYSAyMDAwcyBjYW1lcmEKbmFycm93IHRpcmVkIGJsdWUgZ3JleSBleWVzCm5ld3MgcGhvdG9ncmFwaApxdWV0emFsCmh5cGVyY29tcGxleAp3ZWxsIGxpdCBza3kKdW5uYXR1cmFsCmouIGxlc2FmZnJlCm5lYXIgZmFybQpiYWxkaW5nIGhhaXIKaW50cmluY2F0ZSBkZXRhbGllZAphIGNyeXN0YWwgcGFsYWNlCnN1cnJvdW5kZWQgZmxvd2VyCmEgY3V0ZSBzdGVhbXB1bmsgY2FsaWNvIGNhdApzdGFuZGluZyBvbiBhIG1vdW50YWluIHRvcApjaGFybGVzCnNtb2t5IGNoaW1uZXkKdG9wIGRvd24gYW5nbGUKb2N0YWluIHJlbmRlcgpjcmF5b24gZmFjZQptYXR0IGJldHRla2VyCmZyb20gZHVuZ2VvbnMgJiBkcmFnb25zCmdvdGhpYyBiYWNrZ3JvdW5kCmhvcnJvciBmb290YWdlCmFpciBjb25kaXRpb25lcgpzb25pYyBib29tCm1lbHRlZCBjaGVlc2UKZnVsbCBib2R5IGdyYXlzY2FsZSBkcmF3aW5nCmZyb20gZmY3CmZyb20gbmNzb2Z0CmNhbWVyYSBsb29raW5nIGRvd24gdXBvbgp0b28gc2hhcnAKZnVsbHkgYXJtb3JlZApkaWdpdGFsIGNoYXJhY3RlciBwYWludGluZwp1c2luZyBhIG1hZ2ljYWwgdGFibGV0Cmhvb2RlZCBmaWd1cmVzCnRlZCBuYWlzbWl0aApzY2llbnRpZmljIHBhcGVyCnByb2Zlc3Npb25hbCBwb3J0Zm9saW8KYmF0dGxlZmllbGQgNQphIGRpdmVyIGlzIHVuZGVyIHRoZSBzZWEKaGUgaGFzIGEgdHJlYXN1cmUgd2l0aCBoaW0KaGlnaCBjb250cmFzCmRyYWdvbiBoZWxtZXQKaW1tZXJzaXZlCmEgZHJhZ29uIHdpdGggYSBoYXQKcGVyZmVjdCBtdXNjbGUgc3RydWN0dXJlCnZhc3QgcG93ZXIKZW1vdGlvbmFsIHJlbGVhc2UKZHVuY2FuIGZlZ3JlZG8Kc3RvaWNpc20KbG93IGlzbwpyZWQgdW1icmVsbGEKYSBkcmFtYXRpYwpyb2FsZCBkYWhsCmEgZHJ1aWQKZW1pdHRpbmcgZXZpbCByZWQgYXVyYQp6LWJydXNoCmNyZXdkc29uCjE5NzBzIHBob3RvCmEgZXh0cmVtZSBsb25nIHNob3QKOGsgaGRyIGhpZ2ggcXVhbGl0eQpob3RzcHJpbmcgaGlkZGVuIGluIGEgY2F2ZQphcmNoZXIgYm93CmFteSBhZGFtcwpyYWNoZWwgbWNhZGFtcwptb2Rlc3QgbGlnaHQgYXJtb3IKY2hhcmFjdGVyIGNvaGVzaW9uCmNvZ25pdGl2ZSBjb2hlc2lvbiBjb2hlcmVuY2UKY3Jpc3AgaGQgcmVzb2x1dGlvbgp0aGVvcGhhbmljIGF0bW9zcGhlcmljIHZpdmFyaXVtCnJlZHdvb2RzCmhpZ2ggcmVzb2x1dGlvbiBwcmludCA6MSByZWQKcGluayBtb2hhd2sKaW4gdGhlIHN0eWxlIG9mIGNsaW50IGNlYXJsZXkKdGFrYWRhIGFrZW1pCnZlbGx5IGRpc3RhbnQgZm9yZXN0Cmxvbmcgc2hvdCB3aWRlIHNob3QgZnVsbCBzaG90CmVtcHR5IG1ldHJvcG9saXRhbiBzdHJlZXQKYW1iaWVudCBmb2cKZm9yayBsaWdodG5pbmcKd2Fyc2hpcHMKb25seSB0aGUgaGVhZApqdW5nbGUgdmluZXMgYW5kIGZpcmVmbGllcwpjaGVtaWNhbHMKZXBpYyBzY2lmaSBjaGFyYWN0ZXIgYXJ0CmxlZSBncmlnZ3MgYW5kIGphc29uIGNoYW4KaW4gcmFwdHVyZQp0cmVuZGluZyBvbiBtYXJ2ZWwKYnVzeSBidXQgbG9uZWx5CnRyZW5kaW5nIGFydHN0YWlvbgpsb3N0IGluIGEgY2F2ZQpnYW1pbmcgdGFibGUKaW5mcmFyZWQgaGFpcgpuZXcgeW9yayBoYXJib3VyCjNkIGFuaW1hdGVkCmV2YW5nZWxpb24gY29uY2VwdCBhcnQKZmlsbSBzdGlsbCBmcm9tIGF2ZW5nZXJzIGVuZGdhbWUKYmFybmV0CmNyYXNoZWQgaW4gdGhlIGdyb3VuZAp2aWV3ZWQgZnJvbSB0aGUgc2lkZQpibGVuZGVkCm5lby1jbGFzc2ljaXNtCmFyZSBidXJlIGJva2UKc3R5bGUgb2YgZ3VvIGh1YQphIGdpcmwgcGxheWluZyB0ZW5uaXMKcHJhZ3VlCjIwMTMKZ29ibGluIGFydAoxOTYwcyBjYXJ0b29uCmV4dHJlbWUgZ3VuZGFtCnZpbmUgYW5kIHBsYW50cyBhbmQgZmxvd2Vycwp0ZXJyaWZ5aW5nIGZhY2UKY29uY2VwdCBhcnQgOGsgcmVzb2x1dGlvbgpjaGVzdCBoaWdoCnByb2plY3Rpb25zIG9mCnZpbnRhZ2UgY29taWMgYm9vayBzdHlsZQphIGhhbmQKcG9ydHJhaXQgaW1hZ2VyeQpicmFuZG9uIHNhbmRlcnNvbgpqLnIuci4gdG9sa2llbgpibGVuZGVyM2QKaW50cmVjYXRlIGxpZ2h0CnRyZWUncwp0ZWFyeSBleWVzCmhlYXZ5IGF0bW9zcGhlcmljCndpZGVzY3JlZW4gc2hvdApncmF5c2NhbGUgcGhvdG8gd2l0aCByZWQgZHJlc3MKcGxhdGUgYXJtb3VyCmltcHJlc3Npb25pc3RpYyBicnVzaHdvcmsKaGlnaCBkZXRhaWxlZCB0aGluIHN0YWxhZ21pdGVzCm9sZCBjb3VjaAppbiBhIHRyb3BpY2FsIGFuZCBkeXN0b3BpYyBjaXR5CmluIGZyb250IG9mIGEgZ2FyYWdlCndpdGggc2NhcnMKcG9wdWxhciBpc2VrYWkgYW5pbWUKZGlzY28gZGlmZnVzaW9uCmZseWluZyBidXR0cmVzc2VzCmhpZ2ggcXVhbGl0eSBwcm9kdWN0IHBob3RvZ3JhcGh5CmRlbW9saXRpb24KdGhlIHN1biBpcyBzZXR0aW5nCmJsYWRlIHJ1bm5lciBtb3ZpZQppbiBzdHlsZSBvZiBsYXVyaWUgZ3JlYXNsZXkKZm9jdXMgb24gdGhlIG1vb24KZGFyayBjbG91ZHMgYWJvdmUKYSBoeXBlci1kZXRhaWxlZAphd2FyZC13aW5uaW5nIGFydHdvcmsKZjExCmZvY3VzIG9uIHRoZSBlbGVwaGFudApzb2Z0IGN1cnZ5IHNoYXBlCmFyZS1idXJlLWJva2UhISEhISEhIQppbiBhIGx1bWluaXN0IHN0eWxlCnNub3cgaXMgZmFsbGluZwp2aW5lcyBoYW5naW5nIG92ZXIgdGhlIHdhdGVyCmJpc29uIGdvZAphcG9jYWx5cHRpYyA4awpuZXh0IHRvIHRoZSBkaW5vc2F1ciBhcmUgY2F2ZW1lbgpibGVhayB0b25lCmdyZWVrIHNldHRpbmcKc3BvdC1saWdodGluZwpraW5nZG9tIGhlYXJ0cyB3b3JsZHMKYWN0aW9uIHJwZyB2aWRlbyBnYW1lCnNvcmEgd2llbGRpbmcgYSBrZXlibGFkZQpjYXJ0b29ueSBzaGFkZXJzCndpdGggYSBidXNpbmVzcyBzdWl0IG9uCmNsb3NlLXVwISEhISEKbWFjcm8gaW1hZ2UhISEhIQppbiBhIHBpdGNoIGJsYWNrIHJvb20KY2hyaXMgdmFuIGFsbHNidXJnCmFyaWFuCnN0eWxlIG9mIGJvcmlzIHZhbGxlam8KZGlzdGFudCBmb3Jlc3QKcmFpbnkgYWZ0ZXJub29uCm1pZC1kYXkKbm8gZ3JlZW4KYXdhcmQgd2lubmluZyB0YXR0b28Kc3Vubnkgc3VtbWVyIGRheQphbmdyeSBmYWNpYWwgZXhwcmVzc2lvbgpqb3VybmFsaXN0aWMgcGhvdG9ncmFwaApibGFjayBiYWNrZ3JvdW5kISEhISEKdmlld2VkIGZyb20gdmVyeSBmYXIgYXdheQpydXhpbmcgZ2FvCm92ZXJncm93biB3aXRoIGx1c2ggcGxhbnRzCmhpZ2hseSBkZXRhaWxlZCBjYXJ2aW5ncwp3ZWFyaW5nIGEgYmFzZWJhbGwgY2FwCmNvbGxhcmVkIHNoaXJ0CmZldyB3cmlua2xlcwp3ZWFyaW5nIG9ybmF0ZSBhcm1vcgpjb29sIHR3aWxpZ2h0CmNvYmFsdAphIG1pbm90YXVyIHdvbGYKcXVldHphbCBhbmQgc3Rhci1ub3NlZCBtb2xlCnRpbnkgY3JpbXNvbiBwZXRhbHMgZmFsbGluZwpkaXNjYXJkZWQgbWVjaCBpbiBiYWNrZ3JvdW5kCmRyaWVkIGJsb29kCmhndHYKeWVsbG93IGNsb3RoZXMKa29kYWNocm9tZSA2NAp0cmlwdHljaApqYW1lcyBndW5uCm52aWRpYSBhbmQgYmVoYW5jZQphY2FkZW15IGF3YXJkIHdpbm5pbmcKd2VhcmluZyBzcGlreQpjYXJyeWluZyBhIGd1aXRhcgpoYWxmIGZpc2gKcmVkZGl0IG1vZGVyYXRvcgpmdWxsIHJlZCBtb29uCnN5bW1ldHJpY2FsIGFuZCBkZXRhaWxlZApkYXJrIGFuZCBob3JyaWZ5aW5nCmp1ZHkgYm95bGUgaW50cmljYXRlCmplZmYgZWFzbGV5IGNpbmVtYXRpYwpvY3RhbmUgOAptYXJqb3JpZSBjYW1lcm9uCmJyZWF0aHRha2luZyByZW5kZXIKd2lsbGlhbSBnb2R3YXJkCmJ1cm5pbmcgYnVpbGRpbmdzCmNhbWVsIGdvZApqZWxseWZpc2ggc2hyaW5lIG1haWRlbiA4awptYWdlbnRhIGFuZCBjcmltc29uIGFuZCBjeWFuCmJ1dCByZXNvbHV0ZQphIHBhbmRhIGluIHNwYWNlCndpdGggYSBzcGFjZSBzdWl0IG9uCmdyZWcgc2lta2lucwpzb2Z0IGNvbG9yIHNjaGVtZQpicmlnaHQgc2NlbmUKc2NhcnkgcGluZXMKcG9ydGFsIG1hZGUgb2Ygcm9zZXMKdmljdG9yaWEKdGhlIG1hdHJpeCBzZXJ2ZXJzIG9uIGZpcmUKaGluZ2VkIGphdwpoYXZpbmcgYSBnb29kIHRpbWUKZmlyZSBmcm9tIHNreQpibHVlIGxpZ2h0bmluZ3MKZHJhbWF0aWMgcHVycGxlIHRodW5kZXJzCmdvbGRlbiBtZXRlb3JzCjE5MzQKc21hbGwgcmVlZHMgYmVoaW5kIGxha2UKc2lnbWEgMjAwbW0KZWF0aW5nIGdhcmxpYyBicmVhZApncmF5aW5nIGhhaXIKc2l0dGluZyBvbiBhIG1vY2hhLWNvbG9yZWQgdGFibGUKYXJjaGl2YWwgcGhvdG8KYSBwaG90byBvZiB0aGUgb2NlYW4KMjAxMQpob2xkaW5nIGEgbWFydGluaQp0YWtlbiBpbiB0aGUgbWlkLWxhdGUgMTgwMHMKdGFrZW4gaW4gdGhlIGVhcmx5IDE5MjBzCm5hdmlnYXRvciBnbGFzc2VzCmlsbHVtaW5hdGluZyB0aGUgYXJlYQpyZWQgdmVsdmV0IGZ1cm5pdHVyZQpwaG90b3NjYW5uZWQKb3JhbmdlIHN1bnNldAphbGJ1bSBjb3ZlciBkZXNpZ24KZGlnaXRhbHBhaW50aW5nCnRhaWwgcmFpc2VkCmluIGEgcmVkIGRyZXNzCmEgcGlnCmZsb3JlbnRpbmUgc2Nob29sCmEgcGludCBvZiBiZWVyIHNpdHRpbmcgb24gYSBiYXIKY2l0eSBsZWQgbGlnaHRzCnZyYXkgcmVuZGVyZXIKYm9hdHMgaW4gdGhlIHdhdGVyCm1hZGhvdXNlIHN0dWRpbwotaCA3NjgKbWlzdHkgYXRtb3NwaGVyaWNzCmNvbGxlZ2UKZmlzaCBuZXQgc3RvY2tpbmdzCjE4dGggY2VudHVyeSBvaWwgcGFpbnRpbmcKZGVlcCBibGFjayBza2luCmVtYW5hdGluZyBkaW1lbnNpb25hbCBtYWdpYwp3ZWFyaW5nIHR1bXVsdHVzIGZsYW1lcwpiZWF1dGlmdWwgbG9uZyB3aGl0ZSBoYWlyCmhpcm95dWtpLW1pdHN1bWUgdGFrYWhhc2hpCmdvdG8gZnVqaXRhCuWliOiJr+e+juaZugpwaXhhciBjYXJ0b29uIHN0eWxlCnN1YmplY3Q6IGRvZwpicmlnaHQgZ2xvd2luZyBleWVzIGFzIGxlZHMKYWx0ZXJuYXRlIGRpbWVuc2lvbgpncmVlbiBhcmNoaXRlY3R1cmUKYSBxdWFpbnQKYSByYWJiaXQgZnVsbCBvZiBob3BlCnN1bnNldCB3aXRoIGZhbGxpbmcgbGVhdmVzCmEgcmFjY29vbiB3ZWFyaW5nIGZvcm1hbCBjbG90aGVzCmJ1c3kgY3Jvd2RzCmV4cGxvZGVkIGJlbGx5CnJlZCB0cmVlcwpuZW9uIGZvZwpibHVlIHN1bm55IHNreQpsaWdodCBwYXJ0aWN1bGVzCnNuYWtlIHNraW4Kcm9zZSB0YXR0b28KYnJvd24gbWVkaXVtIGxlbmd0aCBoYWlyCnVsdHJhIGRldGFpbGVkIHRleHR1cmVzCmZpdmUgcGxhbmV0cwpzdXBlciBjb29sIHJvY2tldApyw6l1bmlvbiBkZXMgbXVzw6llcyBuYXRpb25hdXgKd2FybSBhbmQgY2FsbQpzdHJvYmUgbGlnaHQKd29vZCBlbmdyYXZpbmcKcGl4YXIgZGlnaXRhbCBtb3ZpZXMKc2hvdCBpbiB3aWRlIGFuZ2xlCmJsdWUgc2t5IGFuZCB3aGl0ZSBjbG91ZHMKYmx1ZSBhbmQgZ3JleQptb25zdGVyIGh1bnRlciB3b3JsZApmYWxsIGd1eXMKYnVybmluZyBzaGlwcwpraHl6eWwgc2FsZWVtCmZ1dHVyaXN0aWMgY2FycyBhbmQgbWVjaGEgcm9ib3RzCnRpbnkgcGVvcGxlIHdhbGtpbmcgYmVsb3cKYm9zdG9uIGR5bmFtaWNzIHJvYm90cwpmaXNoZXllIGxlbnMgcGhvdG9ncmFwaHkKYSBzZXh5IG1haWQgaW4gYSBtYWdpY2FsIGZvcmVzdApkZWVwIHJlZCBiYWNrZ3JvdW5kCmEgc2hpcCBvbiBhIGRlc2VydGVkIGlzbGFuZAphIHNpbHZlciBoYWlyZWQgbWFkCnNvbGl0YXJ5CmZsYXNoaW5nIG5lb24gbGlnaHRzCmFiYW5kb25lZCBjaXR5IHdpdGggZ3JhZmZpdGkKZmxvYXRpbmcgbGlnaHRzCmRpZ2l0YWwgaWxsdXN0cmF0aW9uIHBvcnRyYWl0CmNvZ3MgYW5kIHdoZWVscwptZWNoYW5pY2FsIGh5ZHJhdWxpY3MKYSBzdGVhbXB1bmsgc3RvcmUKc3RpY2sgZmlndXJlCmVsZWdhbnQgYXJ0IG5vdXZlYXUgc3R5bGUKZ2xhc3Mgd2luZG93CmMzcG8KKChza3VsbCkpCihzbm93KQpzaGVkCmEgc3RpbGwgbGlmZSBvZiBhIHJvYm90CmNhc3NldHRlIHRhcGUKZ290aGFtIHNldHRpbmcKZnJvbnQtdmlldwpsYXRlIDIwMDDigJlzCm5ldyBtZXhpY28gd2l0aCBhIHllbGxvdyBmaWx0ZXIKd2l0aCBtYW55IHRyYXZlbGVycwpodXN0bGVycwpmbG9hdGluZyB2ZWhpY2xlcwpzbGVhenkgZGFyayBmdXR1cmUKc3VubnkgcmFpbmJvdyBnYWxheHkgc3Rvcm15IHNlYQp3aGl0ZSB3YXRlcgphIHN0dW5uaW5nCnNob3QgZnJvbSByb29mbGluZQpzb2xkIG91dCBwaWVjZQphIHN1bm55IGJlZHJvb20KNDBtbSBmLzIuOAp2YXBvcndhcmUgc3R5bGUKYSBzdXJyZWFsIGRyZWFtIGxhbmRzY2FwZQozMi1iaXQgcGl4ZWwgYXJ0CmVhcnRoIHRvbmUgY29sb3JzCmEgc3VycmVhbAppbnRlcmxvY2tlZApvd28KdGhlIGJhY2tncm91bmQgaXMgYmx1cnJlZApiZXJsaW4gcGFyawpoaWdoIGNsb3VkcwpoeXBlciByZWFsaXNtIDRrCndhdGVyIGZhbGxzCm5lb24gcGlsbGFycwpncmVlbiBncmFzc2UgdHJlZXMgYW5kIHJpdmVyCmJpZyBwbGFuZXQgb24gYmFja2dyb3VuZAptaXN0eSBlbnZpcm9ubWVudAphbmltYXRlZCBmaWxtIGt1Ym8KZGV0YWlsZWQgc3R5bGUKZHJhbWF0aWMgbG93LWtleSBsaWdodGluZwpvbiBmbGlja3IgaW4gMjAwNwphbmF0b21pY2FsIG5vdGVzIHdpdGggbGFiZWxzCmphdyBhbmQgdG9uZ3VlCm1hbiBpcyB0ZXJyaWZpZWQKYXN0aGV0aWNzCmRhcmsgZmFpcnl0YWxlCmFic3RyYWN0IHN1cnJlYWxpc3QKZGFyayBmYW50YXN5IGNvbG9yIHNjaGVtZQphIHdhbmRlcmluZyBtaW5kCmh1Z2ggZGV0YWlsZWQKZmVubmVjIGVhcnMgb24gdG9wIG9mIGhpcyBoZWFkCmludG8gdGhlIHZvaWQKaG93bGluZyBhdCB0aGUgbW9vbgpjb2hlc2l2ZS42OToxCmF0IHBhbXVra2FsZQphIHdpZGUgb3BlbiBjb3VydHlhcmQgaW4gYW4gZXBpYwpoeXBlci1kZWZpbml0aW9uCm5peGllIHR1YmUKd2llbGRpbmcgZGFnZ2VycwpjbG9zZXVwISEhISEKZGF6emxpbmcgZGFwcGxlZCBsaWdodGluZwpsaWdodCByZWZyYWN0aW9ucwo4ayEhISEhCmltcHJlc3Npb25pc20gc3R5bGUKcmFpbnk7IDkwJ3MgcGhvdG9ncmFwaApjdXRhd2F5CndlYXJpbmcgYSBzdGVhbXB1bmsgc2FyaQpwaXhpdiB0cmVuZGluZwpoZWFkc2hvdCBwaG90b3Nob290CmEgeW91bmcgZmVtYWxlIHdpemFyZAppbnNpZGUgYSBncmFuZCBvcm5hdGUgcm9vbQpjbG90aCB3cmFwcwphaSBzZWxmIHBvcnRyYWl0CnZpdmlkIGNvbG9yLmRpZ2l0YWwgMmQKcmV0cm9zY2lmaQpqdW55YSB3YXRhbmFiZQphYW5nCmVwaWMgYXJtb3IKZXBpYyBycGcgYXJ0d29yawpyYWRpYW50IG1vcm5pbmcgbGlnaHQKc2lnbWEgMTAwbW0KYWJpZ2FpbCBmcm9tIHN0YXJkZXcgdmFsbGV5CnZvbHVtZXRyaWMgY2xvdWRzIGFuZCBmb2cKY2l2IGdoYW5kaQpkaXJ0eSBza2luCmFjdGl2ZSB2b2xjYW5vCnBpbnVwIHN0eWxlCmFkYW0gZHJpdmVyIGFzIGEgY2VudGF1ciB3YXJyaW9yCmdhbGxvcGluZyB0aHJvdWdoIHRoZSBmb3Jlc3QKaC0gMTAyNApyb2Igc2NobmVpZGVyCnBhdWxpZSBzaG9yZQp0diBzaG93IHN0aWxsCnNraSBtYXNrcwpnYW5nIGZsYWdzCmJlc3Qgb2YgYXJ0c3RhdGlvbgp3ZWFyaW5nIGphY2tldApvdHRvbWFuIGVtcGlyZQphd2FyZCBwaG90b2dyYXBoeQptYWRlIG9mIGxlZ28KbmV3dHMKc2hhcnAgZWRnZXMgYW5kIGZvY3VzCm9ic2lkaWFuIGdsb2JlCm5vIGltcGVyZmVjdGlvbnMKYWZyaWNhbiBhbWVyaWNhbiB3b21hbgpmdW1lCmFmcmljYW4gZ29kIG1hc2sKZ3JlZyBydXRrb3dza2kgd2xvcAp2aWV3IGZvciBtaWxlcwpha2FsaSBmcm9tIGxlYWd1ZSBvZiBsZWdlbmRzCmJhZGFzcyBjbG90aGluZwptZW1lIGZvcm1hdAonZW11bGFkb3InCmRyYWNvCm5ldyByZWxlYXNlCmFsYnVxdWVycXVlCnNtb2t5IGxpZ2h0aW5nCnVuYmx1cgpoaWdobHkgZGV0YWlsZWQgOGsgcmVzb2x1dGlvbgp0ZWFyIGdhcyBhbmQgc21va2UKbG93IGRlZmluaXRpb24KcGVyY3kgamFja3Nvbgpjb3ZlcnQgYXJ0Cm1pZCBhY3Rpb24KdmljdG9yaWFuIGxhY2UKbXV0ZWQgYW5kIHBhc3RlbCBzaGFkZXMKdGhpbiBmaWxtCmRyZWFtcHVuawptYXJibGVkIHN3aXJscwpkcmFtYXRpYyBteXN0ZXJpb3VzIGxpZ2h0aW5nCm1pY2hlbGxpbiBzdGFyCmF3YXJkIHdpbm5pbmcgZGlzaApsb29raW5nIHRvd2FyZHMgdGhlIGhvcml6b24Kd2lkZS1hbmdsZSB2aWV3CmFsaWVuIHBsYW5ldCBsYW5kc2NhcGUKc3RyYW5nZSBmcnVpdHMKYWxpZW4gbW92aWUgc2NyZWVuc2hvdAp3aGl0ZSBsaWdodCBzaGluaW5nIG9uIGhlcgpyZWRkaXNoCmFsbCByb2FkcyBsZWFkIHRvIHJvbWUKZ3JlYXQgc2Vuc2UgZm9yIGNvbXBvc2l0aW9uCmhhbGZ0b25lcwpsaWdodCB5ZWxsb3cgaGFpcgpzdGFuZGluZyBjb25maWRlbnRseQptYW5kZWxicm90IGZsb3dlcnMgYW5kIHRyZWVzCnN0ZWFtcHVuayBkZXNlcnQgYmFja2dyb3VuZApwb3J0cmFpdCBvZiBtYW4KaW4gcHJpc29uCmFtZXJpY2FuIGRyZWFtCmdyZWVuIGxhbnRlcm4KbWlsaXRhcnkgcGhvdG9ncmFwaHkKcHVsaXR6ZXIgcHJpemUgd2lubmluZyBwaG90bwpjb21tZXJjaWFsIHBob3RvIHNob290Cmh1bGsgY29zdHVtZQpodWxrIGJvZHkgdHlwZQpzdXNzeSBpbXBvc3RlcgpmdWxsIHZpZXcgb2YgZmFjZSBhbmQgYm9keQppbiBpbnRlcmdhbGFjdGljIGphcGFuCnBlbmRhbnQKYW15IHBvbmQKc21lbGx5CjhrIHJlc3RvcmVkIGFuZCByZW1hc3RlcmVkCmVtZXJnZW5jeSByb29tCm9wcGFpCnJlZCBjcm9zcwpoYXJwCmdyZWVuIGhhdApzaGFycCBzb2Z0IGZvY3VzCihoZWFydCkKKGZpcmUpCmFuIGFsaWVuIGp1bmdsZQphbiBhbGllbiBwbGFuZXQKYmx1LXJheSB0cmFuc2ZlcgptaXN0IGFtaWRzdCBsaWdodG5pbmcKZGFyayBlbmVyZ3kKZGlydHkgZ29sZAphbmRyw6kgbGUgbsO0dHJlCmhvcnJvciBtb3ZpZSBsaWdodGluZwpsb3dyaWRlciBzdHlsZQpjYXQgZWFycyBhbmQgdGFpbApmdWxsIGJvZHkgc3ByaXRlCndlYXJpbmcgYSBzd2VhdGVyCmJyZWV6eSBiYWNrZ3JvdW5kCm9yZGluYXJ5CmxhbmRzY2FwZSBwaG90by1yZWFsaXR5CmxhbmRzY2FwZSBwaG90by1pbWFnZXJ5CmFuIGF2b2NhZG8gYXJtY2hhaXIKY2hhcmFjdGVyIGFydCBjbG9zZXVwCmdlb3JnZSBrYW1pdGFuaQphbiBlbmNoYW50ZWQgZm9yZXN0CnRoZSB3b3JsZCB0cmVlCm1hZ2ljIGJhcnJhZ2UKbmVvbiBsaWdoCmNvc21vcyBpbiB0aGUgYmFja2dyb3VuZApzaG9ydCBwaWd0YWlscyBoYWlyCndpbmdlZCBhcmNoZXIKYXdlLWluc3BpcmluZy4gYXdhcmQtd2lubmluCm5lYnVsb3VzIGJvdXF1ZXRzCmNoZXJyeSBibG9zc29tIHJhaW4gZXZlcnl3aGVyZQpubyBmYWNlIG1hc2sKcmVhbGx5IHNob3J0IGRhcmsgZ3JheSBoYWlycwohIW5vIGdsYXNzZXMKZGFyay1za2lubmVkCmZsYXQgZmFjZQpibHVlIGplYW5zLiB1bnJlYWwgNQpibHVlIHNob2VzCmRhcmstYnJpbmdlcgp6b29tb3JwaGlzbQphd2Vzb21lbmVzCnN1c3RhaW5hYmxlIGFyY2hpdGVjdHVyZQoxOTYwcyBzdHlsZQpzdHVubmluZyBkaWdpdGFsIHBhaW50aW5nCnBpZ2VvbgpzcGFjZXNoaXBzIGluIHNreQpoaWdoIHByZWNpc2lvbgprb2RhayBla3RhciAxMDAKbWlycm9yIGxha2UKcm9ib3QgcG9ydHJhaXQKYXJ0IGRlY28gZXJhKQpob3VyZ2xhc3Mgc2hhcGVkIGV5ZSBpcmlzZXMKcGxheWluZyBhdCBzd2ltaW5nIHBvb2wKZ2FtZSBwcm9tb3Rpb25hbCBwb3N0ZXIKMTkyMHMgc3BlY3VsYXRpdmUgZnV0dXJpc20Kcm9jayBhcmNoZXMKYW4gaW50ZXJpb3Igb2Ygcm9vbQp5dXVrYSBrYXphbWkKd2VhcmluZyBhIHJlZCBwbGFpZCBkcmVzcwooKCgoZXhvdGljIGFydGlmYWN0cykpKSkKbmVvbi15ZWxsb3ctaG9sb2dyYXBoaWMgd2luZ3MKbG9va2luZyBpbnRvIGEgbWlycm9yCmhpZ2gtcmVzb2x1dGlvbiBwaG90bwoxOTUwJ3MKYW4gb3Zlcmdyb3duIGxpYnJhcnkKc3Rvcm15IGRheQpyZW5kZXJlZCBpbiAzMmsgaHVoZAptb29ubGl0IGZvcmVzdCBlbnZpcm9ubWVudAp3aGl0ZSBjbG91ZApicmlnaHQgZm9yZXN0CmJsdWUgYmlyZApzbW9rZSByaXNpbmcgaW4gdGhlIGJhY2tncm91bmQKYW5jaWVudCB0ZW1wbGUgcnVpbnMKaXRzIGhvdXIgY29tZSByb3VuZCBhdCBsYXN0CjE3dGggY2VudHVyeSBkdXRjaCBhdHRpcmUKZnVsbCBjaGFyYWN0ZXIgYm9keQpzdWJqZWN0IGNlbnRlcmVkIGluIHRoZSBmcmFtZQpuYXNhIHRydWUgY29sb3IgOGsgaW1hZ2UKYW5mYXMgcG9ydHJhaXQgb2YgYSBtZWNoIHdhcnJpb3IKYW5nZWwgZ2lybAp6ZGlzbGF2IGJla3NpbnNrIC0gaDc2OApkaWdpbW9uIGtleSBhcnQKYW5nZWxpbmEgam9saWUgcG9ydHJhaXQKdGhlIGdsb3cgb2YgdGhlIG1vb25saWdodAphbmdrb3Igd2F0CmludHJpY2F0ZSB3b29kIGNhcnZpbmcKYW5ncnkgY2F0Cm5pZ2h0dGltZSBtb29ubGl0CmhhdHN1bmUgbWlrdSBmYWNlCmdsaXR0ZXIgZ2lmCmZ1bGx5IHJvYm90aWMhISBnaXJsCmN1dGUhISBjaGliaSEhISBzY2hvb2xnaXJsCmFuaW1lIG1hbmdhIHJvYm90ISEgY2F0IHRhdHRvbwpmdWxseSByb2JvdGljISEgY2F0CmRpZ2l0YWwgc3RpbGwKZ2lybCBpbiB3aGl0ZSBkcmVzcyBkYW5jaW5nCnNoZSBpcyBkYW5jaW5nCndhaXRpbmcgYmVoaW5kIGEgd2FsbApoaWdoIHZpZXcKbGVzYmlhbiBraXNzCmxsYW1hIHBvcnRyYWl0CnRtbnQKYW50aHJvcG9tb3JwaGljIHRpZ2VyCmtpbnUgbmlzaGltdXJhCmRhaWdvIGlrZW5vCmJyZXdpbmcgcG90aW9uIGluIHdpdGNoIGh1dAphbnRvbgphbnl0aGluZwptYXJrIGJyb29rcyBkZXRhaWxlZAo4ayBwb3N0cHJvY2Vzc2luZwpjaGluZXNlIGdpcmwKcmVuZGVyIGluIHZyYXkKZXF1ZXN0cmlhCmJsdWUgY2xvdGhpbmcKYXJhYiBtYW4KZ2xhcmUgZmFjZQpleHF1aXNpdGUgYW5kIHNtb290aCBkZXRhaWwKYXJjaGFuZ2VsCmFyY2hpbWVkZXMKYXJjaGl0ZWN0dXJlIGJsdWVwcmludCBjb3B5CmFyY2htYWdlCnJlbmRlciBhbWF6aW5nCmF6dGVjIG15dGhvbG9neQpicnV0YWwgZGVwaWN0aW9uCmJsb29kYmF0aCBiYXR0bGVmaWVsZAphYnN1cmRyZXMKYXJnb25pYW4Kam9zZXBoIGpvZXN0YXIKcGxlYXNlbnQgY29tcG9zaXRpb24KYXJrIHN1cnZpdmFsIGV2b2x2ZWQKd2FzaGVkIHVwCmhlYXZ5IGJhdHRsZQpjYXIgdnMga25pZ2h0CmRvdWdsYXMgc21pdGgKYWNjdXJhdGUgcm9hZHMKZnVsbCBmaWd1cmVkIG1vdGhlciBlYXJ0aApjeWJlcm5ldGljIGZlYXR1cmVzCmRpZmZlcmVudCB0ZXh0dXJlcyBhbmQgbWF0ZXJpYWxzCnJheXRyYWNlZCAzZCBzZXQgZGVzaWduCndpbGQgd2VzdCBiYWNrZ3JvdW5kCndyaXRpbmdzCm1hc3RlciBvZiBpY2UKYXMgd2UgZmFkZSBpbiB0aGUgZGFyawpibHVlIGV5ZXMhCmFzbW9kZXVzCmNvbWJvdmVyCmFzcmllbCBkcmVlbXVycgpoaWdobHkgaW52ZW50aXZlIHBhdHRlcm4gY3V0dGluZwptb2Rlcm4gc3R5bGlzaCBnbGFtb3VyIHR1dHUKaGVsbWV0cwphc3Ryb2xhYmUKYXN0cm9uYXV0IGhlbG1ldApicm93biBqYWNrZXQKYXQgdGhlIHRlcnJhY2UKZGV2b3RlZAp3ZWFyaW5nIGNyeXN0YWwgZnJhY3RhbCB0aWFyYQpmYW50YXN5IGxvbmcgaW50cmljYXRlIGdvd24KaG9tZXdvcmxkIHN0eWxlCm9mZi13b3JsZAptYXggcGF5bmUgKHBjKSAoMjAwMSkKY3JhY2tlZCB3aW5kb3dzCmRhcmsgY3liZXJwdW5rCmFjaWQgcmFpbnMuIHRoZSBzYWNyZWQgbmlwcGxlCmhpZ2ggZGVmaW5pdGlvbiBwaG90bwphdXRvbW90aXZlIGRlc2lnbiBhcnQKZ29yZG9uIG11cnJheQpzaWx2ZXIgd2luZ3MKY3J5c3RhbGl6ZWQgdGltZSB3YXJwcwp0cmVuZGluZyBvbiA4awpjYWxsZWQgJ3RoZSBsYXN0IHN1cHBlcicKZXJtaW5lCmtvZGFrIGQtNzYKcGVyZm9yYXRlZCBtZXRhbApsYXNlciBjdXQgdGV4dHVyZXMKaGFsZi1sZW5ndGggcG9ydHJhaXQKaGlnaC1mYXNoaW9uIHBob3Rvc2hvb3QKY29sb3VyIHBvcnRyYWl0IHBob3RvZ3JhcGgKYXd3CnJkciAyIG1vZApkYXJrZXN0IGR1bmdlb24gYXJ0IHN0eWxlCm1lZGlldmFsIHdvb2RjdXQKODBzIGFuaW1lIG92YSBzdHlsZQpiYWNrIHZpZXcgb2YgdGhlIGdyaW0gcmVhcGVyCmJhZCBidW5ueQpldmlsIGpvZSBiaWRlbgpoeXBlcnJlYWxpc20gcGFpbnRpbmcKYmFsZCBtYW4KY2hlZXN5CmJvdXF1ZXQKZGlmZmVyZW50IHNpemVzCnN1cGVyIHJvYm90IHdhcnMKd29sZiBwZWx0IGhlYWQKNGsgdWhkIHBob3RvCmplYWxvdXMgZmFjZQpzY2lmaSBob3Jyb3IKZmllcnkgd2luZ3MKYXJjYW5lIGdsb3cKZHJ1aWRpYyBydW5lcwphbmltZSBmaWd1cmluZQpiYXJuZXkgdGhlIGRpbm9zYXVyCmJhY2tncm91bmQgYSBneW0KYmFydCBzaW1wc29uIGluIHJlYWwgbGlmZQphd2FyZCB3aW5uaW5nIHNwb3J0cyBwaG90b2dyYXBoeQptaWxhbiBqb3ppbmcKcG91cmluZwpiYXRtYW4gZWF0aW5nIHBpenphCm1pZGNlbnR1cnkgbW9kZXJuCmZlbWFsZSBtYWdlIGNvbmp1cmluZyBhIHNwZWxsCmJlYWtlcgpjYXJhdmFnZ2lvIHN0eWxlCmxvb2tzIGxpa2UgYnJpdG5leSBzcGVhcnMKYmVhdXRpZnVsIDIwMDBzIHBob25lLWNhbWVyYQpkYXJrIGJsdWUgYW5kIHdoaXRlIHJvYmVzCm11bHRpcGxlIGZsb2F0aW5nIHN3b3Jkcwp3aWZlCmJlYXV0aWZ1bCBiZWFjaApjbG9zZSB0byBuaWdodAo0ayBwb3J0cmFpdApzdGVwaGVuIHdheWRhCnBvc2luZyBvbiB0aGUgYmVhY2gKMTkyMHMgZ2Vpc2hhCmhhbGYgYm9keSBwaG90bwp0cmFkaXRpb25hbCBnZWlzaGEgY2xvdGhpbmcKZ2Vpc2hhIG1ha2V1cApnZWlzaGEgaGFpcnN0eWxlCmdvbGRlbi1ob3VyCmFuaW1hCmh1YmxvdApmcm9tIHRoZSBzYW5kbWFuIG5ldGZsaXggc2hvdwpzdHVkaW8gc2hhZnQKbW9iaWxlIGdhbWUgc3R5bGUKaGVkZ2UKbGF3bgpibHVlLWV5ZXMKbm8gdHdvIGJvZGllcwp2ZXJ5IGFuaW1lIHN0eWxlCnRoaW4gZm9nCmxvdHMgb2Ygc2hvcHMKbWFnaWMgbGlnaHRpbmcKdml2aWQgY29sb3IgdG9uZXMKYmVhdXRpZnVsIGFuZCBob3JyaWJsZQp3ZWFyaW5nIGEgZmxvd2luZyBkcmVzcwprbm93bGVkZ2Ugb2YgYW5hdG9teQphbmF0b215IGZvciBiZWdpbm5lcnMKd2l0aCBjdXJseSBibGFjayBhbmQgc2lsdmVyIGhhaXIKaGVyIHNraW4gaXMgbGlnaHQgYnJvd24KYmx1ZSBza3kgd2l0aCBzb21lIGNsb3VkcwptYXJibGUgc3RhdHVlcwpsdWNhcyBncmF6aWFubwpibGFjayBleWVicm93cwpkZWFkIG1hbidzIGNoZXN0CmF0IHdvcmxkJ3MgZW5kCnBpdGNoIHBlcmZlY3QKaGF6ZWwgaXJpcyBleWVzCmxlbmEgb3h0b24KaG9sZGluZyB0aGUgcGludCBvZiBhbGUKd2FybSBsYW50ZXJuIGxpZ2h0aW5nCnZpb2xldCBsaWdodGluZwp6dW4KYWN0aW9uIGFuZCB0cmFnZWR5CjEwJSBzdXJyZWFsCmRlYWQgYnV0IGJlYXV0aWZ1bC4gcG9wcGllcwpyaWNoIGZvcmVzdApvcGFxdWUgZ2xhc3MKYmF1aGF1cyBzdHlsZSBwYWludGluZwpyZWFsaXN0aWNhbGx5CnByYWdtYXRpYwozZCBpbnRyaWNhdGUgc2hhcGVzCm9ybmF0ZSBnaWdlciBiYWNrZ3JvdW5kCndlYXJpbmcgYSB3aGl0ZSBiaWtpbmkKaGUgaXMgd2VhcmluZyBhIGJyb3duIHN3ZWF0ZXIKc2VlbiBmcm9tIGEgcGxhbmUKaW4gdGhlIG1vcm5pbmcgbWlzdAppbiBzdHlsZSBvZiByZWFsaXN0aWMKaGlnaCByZXNvbHV0aW9uIG9jdGFuZSByZW5kZXIKc21vb3RoIGxpZ2h0aGluZwpjaW5lbWF0aWMgY29sb3IgZ3JhZGUKYmV3YXJlIHRoZSBqdWJqdWIgYmlyZApiZXlvbmNlIGFzIHdvbmRlciB3b21hbgpiaWJsaWNhbGx5IGFjY3VyYXRlIGFuZ2VscwpiaWcgY2h1bmd1cyBtZW1lCmJlYXV0aWZ1bCBtYWlkZW4KZGVlcCBpbiB0aGUgb2NlYW4KdGhlIHN0YXR1ZSBvZiBsaWJlcnR5CmhpcCBob3AgYWxidW0gY292ZXIKYmlsbCBjbGludG9uCndpZGUgZnJhbWUKc2l0dGluZyBpbiBhIGNhZmUKdGFibG9pZCBwaG90bwpiaWxseSBtYXlzIGhvc3RpbmcgamVvcGFyZHkKdmhzIHRhcGUgZm9vdGFnZQpiaWxseSB3aWxkZXIKbWVkaWNhbCBib29rCnF1YWRyaWNocm9taWMKc2lsdmVyIGFuZCBibHVlIGNvbG9yIHNjaGVtZXMKYmlvc2hvY2sgYmlnIGRhZGR5CmJhY2tncm91bmQganVuZ2xlCmZpcmUgdG9ybmFkbwpibGFjayBsb3R1cwoxOTEwcyBwYXJpcwpoeXBlciBzdXJyZWFsaXNtCmZyb20gdG95IHN0b3J5CmJydXRhbGlzdCBsaW1pbmFsIGFyY2hpdGVjdHVyZQpmb3JzYWtlbiBzcGlyaXRzCmNpbmVtYXRpYyBsb25nIHNob3QKYnVydG9uZXNxdWUKYmxpcHBpCmdhbGF4eSBjZW50ZXIgcmVtb3RlbHkgdmlzaWJsZQpyb2FyaW5nIG9jZWFuIGluIGZyb250CmNvbWluZyBhc2hvcmUKYmxvb2QgZm9yIHRoZSBibG9vZCBnb2QKb3JhbmdlIHBsYW5ldAphbmFtb3JwaWMgbGVucwpibHVlIHYyIHJvY2tldCBpbiBzcGFjZQp2aXNpYmxlIHBsYW5ldHMgaW4gdGhlIHNreQpibHVlIHNjYWxlZCBkcmFnb24Ka29uZzogc2t1bGwgaXNsYW5kICgyMDE3KQpsb3N0IHNlcmllcwpoYWlycyBmbHV0dGVyaW5nIG9uIHRoZSB3aW5nCmZhbnRhc3kgY3JlYXR1cmUgY29uY2VwdCBhcnQKZHJlYW0gbGlrZSBhdG1vc3BoZXJlIDhrCmltcGVyaWFsIHBvcnRyYWl0CmJvbnNhaSB0cmVlIGhvdXNlCmh5cGVyIGNvbG9yCmFmdGVyIHRoZSByYWluCm5lb24gaGVhcnQgcmVhY3RvcgpidWxsZXRwcm9vZiB2ZXN0CnJlZCBzaGVsbC4gZGlydCB0cmFjawpwaXhhciBjaGFyYWN0ZXIgZGVzaWduCmNpdmlsIHdhciBzdHlsZQpzY3VscHRlZCBvdXQgb2YgY2FuZHkKZ3VtbXkgY2FuZGllcwpndW1teSB3b3Jtcwp0YWtldWNoaSB0YWthc2hpCmZ1dHVyaXN0aWMgZmF2ZWxhCmZyb3plbiB3YXRlcmZhbGwKZGlzcGxheWVkCnJlc2VhcmNoIG91dHBvc3QKYnJ1ZWdlbHMgdGhlIHRvd2VyIG9mIGJhYmVsCmVkZW4gYXQgZGF3bgpmZXkgbWFnaWNhbCBsaWdodGluZwpjcmF6eSB3aGl0ZSBoYWlyCmRlcmFuZ2VkCmRvZyB3ZWFyaW5nIGEgY3Jvd24KOGsgaHlwZXItcmVhbGlzdGljCndpdGggYmx1ZSBsaWdodCBkYXJrIGJsdWUgc2t5CmxvbmcgY2xvdGhzIHJlZCBsaWtlIHNpbGsKbWFuIGlzIHdpdGggYmxhY2sgc2tpbgp0aGUgbWFuIGhhdmUgYSBiYWNrcGFjawp0aGUgbWFuIHN0YW5kcyBvdXQgb24gdGhlIGltYWdlCnRoZSBzdW4gdXAgb24gdGhlIHNreSBpcyBzdHJvbmcKY29sb3JzIGFyZSBzdHJvbmcgYnV0IGNhbG0KYXJhYmljYSBzdHlsZQpoaWdobHkgZGV0YWlsZWQgcGhvdG8gcG9ydHJhaXQKZmx5aW5nIGVtZXJnZW5jeSB2ZWhpY2xlcwpoYWxmIHJvYm90IGhhbGYgYmVhcgpubyBsb2dvCmFpciBicnVzaCBpbGx1c3RyYXRpb24KZmFkaW5nIHJhaW5ib3cgbGlnaHQKcGFydGlhbCBzeW1tZXRyeSBmZWF0dXJlcwpiYWQgdmhzIHF1YWxpdHkKdGhlIHN0b3JlCmxvdyBhcGVydHVyZQpodWQgaW5jbHVkZWQKY3M6Z28gc2NyZWVuc2hvdApzdGVhbSBjb21tdW5pdHkKZmliZXIgb3B0aWMgbmV0d29yawpzbm93eSB0cmVlcwpjYW1teQp2b2xjYW5vIGJhY2tncm91bmQKY2FwdGFpbiBmYWxjb24KY2FwdGFpbiBwaWNhcmQKYmx1ZWlzaCBtb29ubGlnaHQKbG9va2luZyBtYWplc3RpYyBpbiBmb3Jlc3QKbGVucyBkdXN0CmNhcmV5IHByaWNlIGdvYWx0ZW5kZXIKY2FycGUgZGllbQpyZWQgbGVhdGhlciBpbnRlcmlvcgp3ZWFyaW5nIGEgaG9vZCB3aXRoIHBvaW50eSBlYXJzCmNhc3RsZSBpbiB0aGUgZGlzdGFuY2UKY2FzdGxlIG1hZGUgb2YgY2xvdWRzCmNhc3RsZXZhbmlhIHNvdG4KY2F0IHdvbWFuCjgwcyBsb25kb24gY2l0eQpjYXQgaW4gdGhlIGhhdApodW5jaGJhY2tlZAplcGljIGRpZ2l0YWwgcGFpbnRpbmcKY2hhcHBpZSB0aGUgcm9ib3QKYmxhY2sgd2hpc3B5IHNtb2tlCnRyYW5zZm9ybWVycyB0b3kKbG90cyBvZiBjYW5kbGVzCmVjb3B1bmsKbm9ybWFsIHBlb3BsZSB3aXRoIGNvc3R1bWVzCmRpc25leSBhbmltYXRpb24gc3R1ZGlvCnZpYnJhbnQgc2hhZGluZwpvZiBhbnRocm8gbGVvcGFyZCB3YXJsb2NrCnRpbWUgd2FycGluZwpjaGF3aWNrIHRoZSBmYWlsIHdpemFyZApzdHlsZSBvZiBociBnZWlnZXIKY2hpYmkgYW5pbWUgZ2lybApjaGlsZGhvb2QKY2hpbGRpc2ggZ2FtYmlubwpjaGluZXNlIHByZXNpZGVudCB3aXRoIGJhbmFuYXMKY2hpbmVzZSB3b21hbgpzdHlsZSBvZiBhbGV4IGdyZXkKc2V0IHBob3RvZ3JhcGggaW4gY29zdHVtZQpvZmZpY2lhbCB0cmFpbGVyCmJlYXV0aWZ1bCByZWFsaXN0aWMgcGFpbnRpbmcKc3RvbmUgd2FsbApleHRyZW1lIG11c2NsZXMKY2hyaXN0b3BoIHdhbHR6Cm9wZXJhdGluZyBvbiBidXJnZXJzCnN1cmdpY2FsIGdlYXIKYmFja2xpdGUKaW4gYSBzd2FtcApvbiBhIG1vc2FpYyBtYXJibGUgZmxvb3IgZGFpcwpwcmFpcmllIGxhbmRzY2FwaW5nCmNpcm5vCm9wdGljYWwgY2F1c3RpYyBsaWdodGluZwpiZWVyIGFkdmVydGlzZW1lbnQKYmljeWNsZSBpbiBiYWNrZ3JvdW5kCmNvbG9yZnVsIHVtYnJlbGxhCmNsYXNzaWMgZmlsbSBub2lyIHNjZW5lCnNwb3RsaWdodCBvbiB0aGUgc2luZ2VyCnZlZ2EgbWFzawpoaWdoIGRldGFpbCBza2luCmNyeXN0YWwgZW5jcnVzdGVkCml0IGZvbGxvd3MgOjcKbmlwcGxlCmxpbHkgZmxvd2VyCmNvbmNoIHNoZWxsCmNvbGQgbmVvbiBsaWdodGluZwpkZXNvbGF0ZWQgd2FzdGVsYW5kCnN1bmZsYXJlCmJyaXRpc2ggc3RvcG1vdGlvbgpyZWQgcm91bmQgbm9zZQpmLzExIGFwZXJ0dXJlCmtvZGFrIDM1bW0KdHJlbmNoIGNvYXQgd2l0aCBtYW55IHBvY2tldHMKd2VhcmluZyBhIGJhcmNhIGNhcGUKa2F0c3VoaXJvIHRvbW8KdW5zZXR0bGluZyBncmluCnNpZ21hIGFydCAxMzUgbW0gZiAxLjQKYmlvbmljIGFybXMgYW5kIGV5ZXMKaW5zYW5lbHkgaW5mbGF0ZWQgaGlwcwp0aGljayBvaWwgcGFpbnQgZHJpcCB0ZXh0dXJlCndoaXRlIGxpZ2h0IGhhbG8KYWJzdHJhY3QgZGVzaWduLiBwYXJhbGxheC4gYmx1ZQphYnN0cmFjdCBkZXNpZ24uIGJsdWUKY2xvd24gZ2lybApzb2NrcwpwdXJwbGUgYW5kIGJsYWNrCmZsYW1lcyBpbiB0aGUgYmFja2dyb3VuZApwZXRlciBwYW4KcmVkIGV5ZXMgZ2xvd2luZwpzcGVjdWxhcnMKb24gbGliZXJ0eSBpc2xhbmQKaGFubmliYWwgbGVjdGVyCnBhdWwgcnVkZAphcm15IHVuaWZvcm0KZ2lhbnQgY3J5cHRvIHZhdWx0CjE5eHgKbXlzdGVyaW91cyBnYXplCmh1bWFub2lkIHBvcnRyYWl0CmxlYXRoZXIgc29mYQpuaW1ibGUKdXNlcyBjNApzbW9rZSA6NgpleHRyZW1lbHkgaGlnaCBidWRnZXQKZGV0YWlscyBhbmQgdml2aWQgY29sb3JzCm1hbnkgc3RvbmUgc3RhdHVlcwpnb3RoaWMgYnVpbGRpbmcgc3R5bGUKdmVydGljYWwgb3JpZW50YXRpb24gdyA4MzIKc3R5bGUgb2YgaGlyb3NoaSBzdWdpbW90bwpldmVudCBwaG90b2dyYXBoeQpjb25laGVhZHMKY29ub3IgbWNncmVnb3IKY2xpY2tzIG9mIGV5ZWxpZHMKdG9nZ2xpbmcKaW4gdGhpY2sgbGF5ZXJzIG9mIHJoeXRobXMKdGFucwpjb252ZXJzYW5vCmV2aWwgZ29kCmNsb3NpbmcgZXllcwpjb3JnaXMgaW4gbm8gbWFuJ3Mgc2t5CnB2YyBwb3NhYmxlIGZpZ3VyZQpjb3J2ZXR0ZSBjMiAxOTY5CmNvc21pYyBtaWNyb3dhdmUgYmFja2dyb3VuZApkaWdpdGFsIG1hdHRlIGJsYWNrIHBhcGVyIGFydApjb3R0YWdlIGluIHRoZSBmb3Jlc3QKY290dG9uIHRleHR1cmUKYW5keSBzaGF3CmZlYXIgYW5kIGFuZ2VyIGluIHRoZWlyIGV5ZXMKdGVhbCBsaWdodGluZwpjcmFmdGluZyBhIG5pZ2h0bWFyZQp2aW50YWdlIGhvcnJvcgpnb2QtcmF5cwpjcmltc29uIHJhaW4gc291Z2h0IGZsb3dlcgpoaWdobHkgZGV0YWlsZWQgY2hhcmFjdGVyCmZhbnRhc3kgZCZkCnRyZW5kaW5nIG9uIGludGVyZmFjZWxpZnQKc3ByYXkgYXJ0CmNlbGx1bG9pZApjcm9ubyBwb3J0cmFpdAplYXJsCm1hZ2F6aW5lIHBob3Rvc2hvb3QKcG9zdC1hcG9jYWx5cHRpYyBoZWxsc2NhcGUKOTAncyBtdHYgaWxsdXN0cmF0aW9uCnVuZXZlbgpjdXRlIGNvcm9uYXZpcnVzIGNyZWF0dXJlcwptb25nb2wKY3V0ZSBjeWJvcmcgZ2lybApzYW0gbmFzc291cgpjdXRlIHlvdW5nIHdvbWFuCmluIHN0eWxlIG9mIGtlbnRhcm8gbWl1cmEKdmVyeSBiZWF1dGlmdWwgcG9ydHJhaXQKZ2lhbnQgYXp0ZWMgc3BhY2UgY2l0eQpmYWxsb3V0IDc2CmN5YmVycHVuayBhdGxhbnRpcwpoaWdoLXF1YWxpdHkgYXJ0CmJyaWdodCBuZW9uIGhpZ2hsaWdodHMKY3liZXJwdW5rIHNrZWxldG9uCihociBnaWdlcikKY3liZXJwdW5rIGNhcgpjeWJlcnB1bmsgY2h1cmNoCmxlZ28gYmF0bWFuIG1vdmllIGNvbG9yIHNjcmlwdAp2aWJyYW50IGxpZ2h0cwpjeWJlcnB1bmsgam9lIGJpZGVuCmN5YmVycHVuayBzdHJlZXQgYXQgbmlnaHQKc3VucyByYXlzCmFzaWFuIGZlYXR1cmVzCmN5Ym9yZyBjYW1lbApjeWJvcmcgam9lIGJpZGVuCmZ1dHVyaXN0aWMgYXJ0IHN0eWxlCmN5Ym9yZyBzYW11cmFpCm5vdCBvbWlub3VzIGF0IGFsbApubyBkYXJrIHBvcnRlbnRzCmhpZGRlbiBkYW5nZXJzCm9yYyB0aGVtZWQKaGVhdnkgY2F2YWxyeQphc2dhcmQgcmlzaW5nCmRobCB5ZWxsb3cgZGhsIHZhbiBhbmQgdGhlIGxha2UKZ29vZCBtdXNpYwpkYW5jZSB0cmFuY2UgZWRtIGZlc3RpdmFsCnNvbnkgYTNpaWkgY2FtZXJhIHNob3QKZ29vZCBkcm9wCmxpdmUgM2hyIGZlc3RpdmFsIHZpZGVvY2xpcApkbXQgY2l0eQpkbmEgaGVsaXgKc2tlbGV0YWwgbWFsZSBmaWd1cmUKdGhlIGdvZCBvZiBzbWFsbCBzY2lzc29ycyEhCmJlc3Qgc2hvdAp2ZXJ5IGNpbmVtYXRpYwpkYWlzeSByaWRsZXkKbW9ycGggZG5hCnNoaXQgZ3Jvd3MKb2xpdmUgc2tpbm5lZApmb2NhbCBsZW5ndGg6IDE4LjAgbW0Kc2NyZWVuc2hvdCBmcm9tIGd0YSB2CmRhbm55IGRldml0byBhcyBzdXBlcm1hbgoxNiBjb2xvcnMKaGQgNGsgdWx0cmEKaGlnaCBncmFpbgp0cmluaWRhZCBzY29ycGlvbgpoaWdoIHF1YWxpdHkgZmlsbQpub2lyIGRldGVjdGl2ZQpzaGFycCBoaWdoIGRldGFpbCBmYWNlCmhvdWRpbmkgcmVuZGVyaW5nCmluaGVyZW50IHZpY2UKb2x5bXBpY3MgZm9vdGFnZQpzbmVzIHNjcmVlbnNob3QKbW9vbmxpZ2h0IHJheXMKbG9vc2UgZmFudGFzeSBjbG90aGluZwpwaXhlbGF0ZWQgcmFpbgpwcm9tbyBzdGlsbApjb2xvcnVsCmRhcnRoIHZhZGVyIHBvcnRyYWl0CndvcmtpbmcgaW4gYSBjYWxsIGNlbnRlcgp3ZWFyaW5nIGhpIHZpcyBjbG90aGluZwppbGx1bWluYXRlZCBvcmJzCmRhdmlkIGx5bmNoIHBvcnRyYWl0CmJvbm5pZSBtYWNsZWFuCmFsdG9uIGtlbGxleQpmaXJlIGFuZCBsYXZhCndpdGggZ2xvd2luZyBydW5lcyBvbiB0aGUgYm9keQpxdWVlbiBlbGl6YWJldGggaWkKcGVyY2hlZCBpbiBhIHRyZWUKY2VudGVyZWQgZmFjZSBzaG90CnRob21hcyBjb2xlIGFuZCBndXN0YXZlIGRvcmUKdGlsdGVkIGNhbWVyYQpmaWd1cmUgaW4gY2VudGVyCmRlbW9nb3Jnb24gZnJvbSBzdHJhbmdlciB0aGluZ3MKZGVtb24gYmVyc2Vya2VyCnN1Ym1lcmdlZCB0ZW1wbGUgcml0dWFsIHNjZW5lCmJvaGVtaWFuIG15c3RpY3MKZGVzZXJ0IG9mIGRpc3RvcnRpb24KYmlnIHdpZGUgYnJvYWQgc3Ryb25nIHBoeXNpcXVlIHwKY3JlZXBpbmcgZ2xvb20Kd2VhcmluZyBhIHZlc3QgYW5kIGEgdGllCnBob3RvcmVhbGlzbSBwYXN0ZWwKaG9tZSBhbG9uZQpzcGFya2xpbmcgY292ZQp0cm9waWNhbCBsYW5kc2NhcGUKc3dpc3MgYWxwcwpleHRyYSBib25lcwp3YXJ0b3JuCmJlYXV0aWZ1bCBhdG1vc3BoZXJpYyBsaWdodGluZwo1MG1tIHBob3RvZ3JhcGgKcGVyZmVjdCEhIQpkaWFtb25kIHBsYXRlZCBzdXBlcmhlcm8KZWFybHkgMjBzCnZlcmEgd2FuZyBjb3V0dXJlCmdpcmx5IGJlZHJvb20Kdm9ndWUgbWFnYXppbmUgc3R5bGUKZ2lhbnQgYWlyc2hpcHMgaW4gdGhlIHNreQp0aGUgbW90aGVybGFuZCBjYWxscwpleGNpdGVkIGZhY2lhbCBleHByZXNzaW9uCnNsaWd0aGx5IGhhcmQgc2hhZG93cwpkaWdpdGFsIGNvbmNlcHRsIGFydAp3aWxsb3dzCmxpZ2h0IGJsdWUgd2F0ZXIKZGFyayBibHVlIHdhdGVyCmdyZWVuIGxpbHkgcGFkcwp3ZWFyaW5nIGVsZWdhbnQgamV3ZWxsZXJ5CmRldGFpbGVkIGNoYXJjb2FsIHNrZXRjaApkb2N0b3IgZG9vbQpjb3VydCBkcmF3aW5nCmNpbmVtYXRpYyB0b25lCmxhaWNhIGNocm9zZQp1bmRlciBhIHdhdGVyZmFsbApzaW1wbGUgc2hhZGluZwozZCBtYXR0ZSBpbGx1c3RyYXRpb24KZG9uYWxkIHRydW1wIGZ1bmtvIHBvcApzaGFraW5nIGhhbmRzCmRvbmFsZCB0cnVtcCBhcyBjYXB0YWluIGFtZXJpY2EKZG9uYWxkIHRydW1wIGFzIHRoZSBqb2tlcgp5ZWxsb3cgb3ZlcmFsbApkb25hbGQgdHJ1bXAgYXMgYSBtdXBwZXQKc3TDpWxlbmhhZwpkb25hbGQgdHJ1bXAgYXMgYSBqZWRpCmZiaQptaWFtaSBiZWFjaAphcyBhbiBhbmltZSBjaGFyYWN0ZXIKMjAwMgpkb25uaWUgZGFya28KZG9udXQKZG9vZGxlcwphbmRlcyBtb3VudGFpbiBmb3Jlc3QKZWxhYm9yYXRlIGluayBpbGx1c3RyYXRpb24KY2xlYW4gc3RyZWV0cwptY2RvbmFsZHMgaW50ZXJpb3IgYmFja2dyb3VuZApkcmFnb24gcXVlZW4KZHJhZ29uZmx5LWxpa2UKZHJlYW0gYSBsaXR0bGUgZHJlYW0gb2YgbWUKZHJlYW0gb2YgYmV0dGVyIGRheXMKZHJlYW1ib3Rtb3RoZXJzaGlwCmRyZWFtbGVzcyBuaWdodApzbGVlcHkgZmVlbGluZwpjYXN0bGVzIGFuZCB0ZW1wbGUgZGV0YWlscwptYWdlIGR1ZWwKZHJ1aWQgd2FycmlvcgpkdWNrIHNoYXBlZCBzcGFjZXNoaXAKZGlnaXRhbCBhcnQgaGlnaGx5LWRldGFpbGVkCmhvbGRpbmcgZGFnZ2Vycwp0YWNvcwphcnQgbWFzdGVycGllY2UKZHdheW5lIGpvaG5zb24gYXMgc3BpZGVyYmF0bWFuCmR3YXluZSBqb2huc29uIGFzIHNwaWRlcm1hbgpkd2F5bmUgam9obnNvbiBhcyB0aGUgam9rZXIKZHdheW5lIGpvaG5zb24gYXMgYmF0bWFuCmR3YXluZSBqb2huc29uIGFzIGh1bGsKY3ViaXN0IHBhaW50aW5nCmUtZ2lybApzY2VuZSBnaXJsCmdyYWRpZW50IGhhaXIKcG9yc2NoZSAzNTYKZ3JpdHR5IHRleHR1cmVkCmVhcmx5IGluIHRoZSBtb3JuaW5nCnNwYWNlIHNhdGVsbGl0ZXMKYnJpZ2h0IHRoaW4gbGFzZXJzCndlYXBvbnMgYXJyYXlzCmVhcnRoIHNlZW4gb24gdGhlIGRhcmsgc2t5CmVkZWxnYXJkIGZyb20gZmlyZSBlbWJsZW0KZWRnYXIgYWxsYW4gcG9lIGFzIHRoZSByYXZlbgplZGluYnVyZ2gKbG90IG9mIGRldGFpbApidXJ0IHJleW5vbGRzCndhdGVyY29sb3JzIG9uIGNhbnZhcwpnaW1saQptaW5kLWJlbmRpbmcKZmFudGFzeSBjYXJ0b2dyYXBoeQo4ayBtYW5kZWxidWxiZXIgZnJhY3RhbApyZWFsaXN0aWMuIG9jdGFuZSByZW5kZXIKZGVwdGggYmx1cgphbGllbiBza2luCmJsdWUgZWxmCmJsdWUtc2tpbm5lZCBlbGYKaGFpcnNwcmF5CmVsaXphYmV0aCBvbHNlbiBhcyBoYXJsZXkgcXVpbm4KZWxsZSBmYW5uaW5nIGF0IGEgZGluZXIKZmxpY2tlcmluZyBsaWdodHMKZHluYW1pYyBsb3cgYW5nbGUgc2hvdApmZWxpeCBlbmdsdW5kIHN0eWxlCndoaXRlIHdhaXN0Y29hdAppbiB0aGUgcnVpbnMgb2YgbG9uZG9uCmVsbGllIGZyb20gdGhlIGxhc3Qgb2YgdXMKa2lsbGluZyBkZW1vbnMKZWxvbiBtdXNrIGFzIGEgc2t5cmltIGNoYXJhY3RlcgoxNTBtbSBsZW5zCmVsb24gbXVzayBhcyBjYXB0YWluIGFtZXJpY2EKZWxvbiBtdXNrIGVhdGluZyBjcmF5b25zCmVsb24gbXVzayBpbiBndGEgdgplbG9uIG11c2sgaW4gbWluZWNyYWZ0Cmxvb2tpbmcgc3RyYWlnaHQgdG8gdGhlIGNhbWVyYQppbiBzcGFjZXN1aXQKZHJhd24gaW4gZmluZS10aXAgcGVuCmFxdWFyZWwKZG5kKQp0aGUgc2NyZWFtIHBhaW50aW5nCmludHJpY2F0ZSBnb2xkIGpld2xlcnkKcHJvZmVzc2lvbmFsIHBob3RvZ3JhcGh5IGNhbm9uCmRlZXAgYmxhY2sKZW1tYSBzdG9uZSBpbiBzdHJhbmdlciB0aGluZ3MKZW1tYSB3YXRzb24gYXMgYmxhY2sgY2FuYXJ5CmZyYW1pbmcKZW1tYSB3YXRzb24gYXMgZ2lhbnQgbWFuCmhlYWQgYW5kIHNob3VsZGVycyBpbiBmcmFtZQp3ZWFyaW5nIG9ubHkgYSBncmVlbiByb2JlCmh5cGVyLWRldGFpbApzdGVhbXB1bmsgZGlnaXRhbCBhcnQKaG9sZGluZyBhIGJhbGwKdmFyZ2FzCmxpZXMKZ2FtZSBib3ggYXJ0CmRldGFpbGVkIGJvZHkgc2hhcGUKcGV0ZXIgaHVybGV5CmZvciBncQpzZXR0aW5nIGluIG5hdHVyZQpyeWFuIHJleW5vbGRzCmJvaG8gcG9uY2hvIGFuZCBsb25nIG1heGkgZHJlc3MKc3BpZGVyIHdvbWFuCmRsc3IgY2FtZXJhCmVtdWxhdGluZyByZWFsaXR5CmhpZ2hseSBkZXRhaWxlZCByZWZyYWN0aW9uCmFjY3VyYXRlIGlzb21ldHJpYyB2aWV3cG9pbnQKYXJ0IGRlY29yYXRpb24KaGlnaGx5IGFjY3VyYXRlIGxpZ2h0IHJlZnJhY3Rpb24KcmljaCBpbiB0ZXh0dXJlICkKYnVpbGRpbmcgYmxvY2tzCnRpbnkgc3RpY2tzCnRpbnkgaW5zZWN0cwpldXJvcGVhbiBwYWxldHRlCmluIGZpZ2h0ZXIgcG9zZXMKaGVucmkgbW9vcmUKZW52aXJvbm1lbnRhbCBzaG90CmRyZWFtY2F0Y2hlcgp3ZWFyaW5nIGEgcHVycGxlIGZyb2NrIGNvYXQKYWlyIGlzIGJlaW5nIHB1c2hlZCBhcm91bmQgaGltCmNvbmNlcHQgYXJ0IG9mIGEgbW9uawpwb3dlcmZ1bCBleHBsb3Npb25zCmVyaW4gbW9yaWFydHkgYXMgc2NhcmxldCB3aXRjaAppbmZpbml0eSBjb25jZW50cmljIHBvb2wKbWVyZ2VkIG1hY2hpbWEKaW4gYW4gYXJlbmEKZXRoZXJlYWwgY2FyZGluYWwgYmlyZAp1bml0ZWQgc3RhdGVzCjM4IHllYXJzIG9sZAooZGFyayBzaG9ydGVyIGN1cmx5IGhhaXIpCigzOCB5ZWFycyBvbGQpCihnb29kIGxvb2tpbmcgKQpldmEgZ3JlZW4gaXMgbWV0YW1vcnBobwp0aGUgZWxlbWVudCB3b21hbgpjdW11bG9uaW1idXMgY2xvdWRzIGluIHRoZSBza3kKZXZlcnl3aGVyZSBhdCB0aGUgZW5kIG9mIHRpbWUKd2lkZSBleWVkCnNwYXduIG9mIHNhdGFuCm5lZ2F0aXZlCm9mZmljZSBmdXJuaXR1cmUKM2QgcmVuZGVyZWQgbW9kZWwKZ2VvbWV0cmljIHdvb2QgY2FydmluZ3MKc3RlYW1wdW5rIGFpcnNoaXAKZXllcyBldmVyeXdoZXJlCmV6cmVhbCAobGVhZ3VlIG9mIGxlZ2VuZHMKZ2lhbnQgc2NhbGUKaW4gc3R5bGUgb2YgY3l0dXMgYW5kIGRlZW1vCnNsaWdodCBldmlsIHNtaWxlCmxpcHMgd2lkZSBwYXJ0ZWQKaGVhdnkgZ29sZCBqZXdlbGxlcnkKZmFsY29uIGJpcmQgZmFjZQpnaGlibGkgc3R1ZGlvIHN0eWxlCmZpcnN0IHBlcnNvbiBzaG9vdGVyIGdhbWUgaHVkCm1vbnN0ZXJzIGluYwpmYW1pbHkgZGlubmVyCnJ1aW5lZCBjaXRpZXMKYmVqZXdlbGVkCmZhbnRhc3kgYXBvY2FseXBzZSBlbnZpcm9ubWVudApuZWFyIGEgcml2ZXIKYnJva2VuIHBhcnRzCnZlcnkgcHJldHR5IGZhY2UKZmF0aGVyIGhvbGRzIGNoaWxkIGluIHRoZSBoYW5kCnNpbHVldHRlCmxvb2tpbmcgZnJvbSBzaWRlCmxvb2tpbmcgZnJvbSBzaWRlIGFuZCBib3R0b20hCnByZXR0eSBmYWNlIGZlYXR1cmVzCmRhbmlsZSBnZXJoYXJ0egpmaXNoIGV5ZSBlZmZlY3QKbm9yZGljIGxhbmRzY2FwZQpuYXZ5IGJsdWUgYXJtb3IKc3RvbmUgc3RhaXJ3YXkKY291cmFnZW91cwpldmlsIG5hbm9ib3QKYnVkZGhpc3QgdGVtcGxlCm9pbHMKYW5nZWxpYyB3aW5ncyBvbiBoZXIgYmFjawppbnRyaWNhdGUgcGFpc2xleSBmaWxpZ3JlZQpyZWQgY2xvd24gbm9zZQpmaWxtIHN0aWxsIG9mIGJhdG1hbgpmaWxtIHN0aWxsIG9mIGJvYmEgZmV0dApjYXQgZHJpbmtpbmcgbWlsawpmbHlpbmcgc2F1Y2VyCndvb2QgZWZmZWN0CmZ1bGwgdHJlZXMKZXVyb3BlCmZseWluZyBhbmdlbHMKZWxsaWUgdmljdG9yaWEgZ2FsZQptb250YW5hCndhcnJpb3IgcXVlZW4KZml2ZSBuaWdodHMgYXQgZnJlZGR5cwptZWNoYW5pY2FsLWxpbWJzCmpldGZpcmUKZmxvYXRpbmcgcGFsYWNlCm1vb24gcmVmbGVjdGluZyBvbiB0aGUgd2F0ZXIKa2FubGl1NjY2CndpbGRmaXJlCnJhaW5ib3cgY29sb3VycwpyaXZlciByYXBpZHMKaW50ZWxsaWdlbmNlCmN1dGUgZHJlc3MKbG9uZyBzaWx2ZXIgaGFpciBwdXJwbGUgdGlwcwpheGUgaW4gaGFuZApicm93biBsZWF0aGVyIGFybW9yCnNtYWxsIGFuaW1hbHMKYmFja2dyb3VuZCBpbWFnZQpmb3Jlc3QuIHdoaXRlIHRyZWVzCmZvc3NpbCBvZiB5b2RhCmFsdGVybmF0ZSBhbGJ1bSBjb3Zlcgpmb3ggc2NpZW50aXN0CnBhc3RlbCBwaW5rIHNraW4gdG9uZQpqb2pvJ3MgYml6YXJyZSBhZHZlbnR1cmUKZnJlZWZvcm0gZmVycm9mbHVpZHMKdXJiYW4gd2FyZmFyZQpyZWQgZmlsdGVyCmlzby0yNTAKe3BlcmZlY3QgYm9keX0KZnVsbCBhcnQgaWxsdXN0cmF0aW9uCjUgZmluZ2VycykuIGZ1bGwgYm9keQpleWVzKS4gZnVsbCBib2R5Cm5vIGFkaXRpb25hbCBhcm1zCm5vIGFkaXRpb25hbCBsZWdzIQpyZWQgbGVhdGhlciBzaG9ydCBjb2F0CmhpLXRlY2ggaGF0Y2hldAptZXRhbGxpYyBzaGllbGQKdGVjaCBjaXR5IGluIHRoZSBiYWNrZ3JvdW5kCmRyYWdvbnMgZmx5aW5nIGFyb3VuZApiZWFrZWQgbWFzawpibGFjayBhbmQgcGluayBkcmVzcwpzaW5naW5nIGZvciB5b3UKYmVhdXRpZnVsIHNjdWxwdHVyZWQgZmFjZQpraXNzaW5nIHNtaWxlCmNvb2wgZmFjZQpiZWhpbmQgaGVyIGlzIGEgc2NhcnkgYXRtb3NwaGVyZQpoYW1tZXJzCndlYXJpbmcgcmVkCnZlcnkgYnVmZgpjZW50ZXJlZCBpbiBpbWFnZQpzaG9ydCBib2R5CmZ1bGwgcG9ydHJhaXQgb2YgbWFnaWNhbCBrbmlnaHQKc3VwZXItcmVhbGlzdGljCmZ1bGwtY29zcGxheSB3YXJpbwoyMDExIGNvbWljLWNvbgpibG9nLXBob3RvCnVsdHJhIGRldGFpbGVkIHBob3RvZ3JhcGgKaGQgcHJvZmVzc2lvbmFsIHBob3RvZ3JhcGh5Cnd3Mwpjb3ZlciBvZiBndGEgdgpndGF2CmluZ21hciBiZXJnbWFuCnJvYmVydCBzaW9kbWFrCm90dG8gcHJlbWluZ2VyCmdhbCBnYWRvdCBhcyBzdXBlcmdpcmwKb25lIHBhbmVsCmluIHRoZSByb2xlIG9mIGNhcHRhaW4ga2lyawpncmltIGRhd24Kc3BhY2UgcGhvdG8KZ2Ftb3JhCnN0dWRpbyBwb3J0cmFpdCBwaG90b2dyYXBoeQpmdXJuaXR1cmUgcGhvdG9ncmFwaHkKZ2FybmV0IGZyb20gc3RldmVuIHVuaXZlcnNlCmdhcyBtYXNrIGluIHVraXlvLWUgc3R5bGUKZ2F3ciBndXJhCndvdyBjbG91ZHMKZ2VlcnQgd2lsZGVycwpkZWYgb2YgZmllbGQKZ2Vpc2hhIHBob3RvIHBvcnRyYWl0CmdlbmVyYXRpdmUgYWR2ZXJzYXJpYWwgbmV0d29yawpjYXZlIGVudHJhbmNlCmV4cGxvc2l2ZSBjb2xvcnMKcGFpdGluZwphZGFwdGF0aW9uCmdob3N0IG9mIHRoZSBmaXJlIHNwaXJpdApnaWFubmEgbWljaGFlbHMKc3VycmVhbCBjYW5vcHkKaW5rIHBlbiBza2V0Y2gKZmxhc2ggYW5pbWF0aW9uCmdpYW50IHNlcXVvaWEKc2hhZwp2b2x1bWV0cmljIGxpZ2h0aW5nLiBmYW50YXN5Cm1lYXQgd2l0aCB2ZWlucwpleWVzLiBkYXJrIGNvbG9ycwptYW55IGV5ZXMgb24gaGVhZApob3Jucy4gZGFyayBjb2xvcnMKcGFsYWRpbiBnb2xkZW4gYXJtb3IKZ3VpbGR3YXIgYXJ0d29yawpjbAo0Y2hhbgpnaWxkZWQgbG90dXMgcHJpbmNlc3MKd2VhcmluZyBkZW5pbQpjeWJlcnB1bmsgY2hpbmVzZSBhbmNpZW50IGNhc3RsZQp0aWdodCBib25lIHN0cnVjdHVyZQpnbG93aW5nIG5lb24gdnJheQp0cmliYWwgYW5jaWVudCBpbWFnZXJ5CmdsdXR0b255Cmdub3N0aWNpc20KY29udGVtcG9yYXJ5IHBhaW50aW5nCmdvZCBpcyBhIGdpcmwKaGFsZiBkb25lCmZsb3dlciBiYWNrZ3JvdW5kCmdvZGRlc3Mgb2YgbGlnaHRuaW5nCmdvZGRlc3Mgb2YgdGhlIHNlYQpnb2R6aWxsYSB0ZWEgcGFydHkgd2l0aCBiYXJiaWUKZ29qbyBzYXRvcnUKZmFyIGF3YXkgc2hvdApnb2xkIGJhcnMKd2llbGRpbmcgYSBzcGVhcgpkcmFtYXRpYyBuaWdodCBza3kKdGFyYXMgc2hldmNoZW5rbyBzdHlsZQpnb29naWUga2l0c2NoIGFlc3RoZXRpYwp3aGl0ZSBzdG9uZSB0ZW1wbGUgcnVpbnMKb3BlbiByb2JvdGljIGV5ZXMKYXRobGV0aWMgYnVpbGQKZnJhbmsgcXVpdGVseQpibGFjayBsZWF0aGVyIGdsb3ZlcwpzZW5zdWFsIGdsb29teQp2ZXJ5IGNvbnNpc3RlbnQKemRpc2xhdiBiZWtzaW5zawpzdGlsbCBmcm9tIHN0cmFuZ2VyIHRoaW5ncwptYWdpYyBqdW5nbGUKYW5pbWUgY3lib3JnCmh1bWFuIGZpbmdlcnMKbm9zdGFsZ2lhIGNyaXRpYwpncmF5IGFsaWVuCmdyZWF0IGEndHVpbgpiYXR0bGUgbGFuZHNjYXBlCmhlcm1lcwpwbGFuZXRzIG9uIHRoZSBiYWNrZ3JvdW5kCmdyZWVuIG1hbgptYWdpY2FsIGdhcmRlbiBwbGFudCBjcmVhdHVyZXMKY29tcHV0ZXIgZHJhd2luZwo0ayB1bHRyYXJlYWxpc3RpYwpncmltZGFyayBwYWxhZGluCmhvbGRpbmcgZWxlY3RyaWMgZ3VpdGFycwppbiBkZXJlbGljdCBhYmFuZG9uZWQgYmF0aHJvb20KZ3Vlcm5pY2EKdGhlIGxldHRlciB3Cmluc2lkZSBhIHJwZyBnYW1lCmJsdWUgc2NhbGVzLiBwbGF5aW5nIGluIHRoZSBzbm93CnByb3BzIGNvbnRhaW5pbmcgdHJlZXMKZnV0dXJpc3RpYyB1dG9waWFuIGZhbnRhc3kKZnV0dXJpc3RpYyB1dG9waWFuIGFyY2hpdGVjdHVyZQpldGhuaWMgZmFudGFzeQpmbGFtZSBjb25qdXJpbmcKcGxheQp2aW5lcyBvdmVyZmxvd2luZwpwaXhhciBjYXJ0b29uCmhhYnMgbWFzY290IHlvdXBwaSBwb2tlbW9uIHNoaW55CnN1cGVyIGN1dGUgYW5kIGZyaWVuZGx5CmRlbWlnb2QKaGFsZiBsaWZlIDMKaGFsZiBwaWthY2h1CmV0ZXJuYWwgY2l0eQpuZXh0IHRvIGFuIHJ2CmdvbGQgaGVhdnkgYXJtb3IuIGRyYW1hdGljCmJyaWdodCBuZW9uIGNpdHkgbGlnaHRzCmZyZWV3YXkKZ2xvb20gYW5kIGxpZ2h0cwpoYW5uaWJhbApoYXBweSBwZW9wbGUKZmFzdGVyCmdsYXplCmJpcmQgbGVncwpoYXJyeSBwb3R0ZXIgaW4gY3liZXJwdW5rCmludGVuc2UgZmFjaWFsIGV4cHJlc3Npb24KaW50cmljYXRlIGNvYmJsZXN0b25lCm1hZ2ljYWwgc2lnaWxzCmZsb2F0aW5nIHBhcnRpY2xlIGVmZmVjdHMKYmVhdXRpZnVsIHBvc2UKYm90dG9tIHNob3QKc3BhY2UgcG9ydApkcmF3aW5nIGFuIGFycm93IGZyb20gaGlzIHF1aXZlcgp5b3VuZyB3b21lbgp3aWRlIG9wZW4gc3BhY2UKZnJhbmsga2VsbHkgZnJlYXMKaGUtbWFuCnRyYW5zbHVjZW50IG11c2hyb29tcwpnbG93aW5nIGxpcXVpZApoZWFydCBvZiBkYXJrbmVzcwpoZWxsaXF1YXJ5CmhlYXJ0IG9mIHRoZSBpbnRlcm5ldApoZWF2ZW4gcGFyYWRpc2UKaGVhdnkgbWV0YWwgdHNoaXJ0IGRlc2lnbgptZXRhbG9tYW5pYQpraWxsc3Rhcgp0YXR0b28gYXJ0aXN0CmhpZ2ggcmVzb2x1dGlvbiBhdWN0aW9uIHBob3RvCnRmMgpmdWxsIGJvZHkgZXh0cmVtZSBjbG9zZXVwCmZvY3VzIG9uIGRyb3BsZXRzCmN5YmVybmV0aWMgZW5oYW5jZW1lbnQKY2FwdHVyZWQgaW4gYm90dGxlcwpoZWxsYm95CmhyCmhlbGxvIHdvcmxkCmhlbGx1dmEgYm9zcwpoZW5yeSBjYXZpbGwgYXMgYmF0bWFuCnNvZnQgcGFsZSB3aGl0ZSBza2luCmluIHJ1c3NpYQpob2xkaW5nIGEgY3Jvc3Nib3cKYXJ0IGZyb20gaGFycnkgcG90dGVyCmhlcm9icmluZQp1bHRyYSBkZXRhaWxlZCBnYW1lIGFydApibGFjayBhbmQgcmVkIGFybW9yCm5pZ2h0IGZ1cnkKZnJvbSBzb2Z0d2FyZSBnYW1lCndlYXJpbmcgZmFudGFzeSBjbG90aGluZwpoaWdobHkgZGV0YWlsZWQgZHJhd2luZwpiZWF1dGlmdWwgYW5kIHJlYWxpc3RpYyBmYWNlcwpmdWppIHN1cGVyaWEKZmVhdHVyZXMgYmV0d2VlbiBmcmVuY2gKNGsgdHJlbmRpbmcgYXQgYXJ0c3RhdGlvbiBocQphcHBsZSB0cmVlCm5hcnJvdyBmb290cGF0aApyZWQgY29hdApzY2ktZmkgZmFudGFzeSBhcnQKd2VhcmluZyBhIGZhbmN5IGRyZXNzCmdvbGRlbiBmYWJyaWMgYmFja2dyb3VuZApsaWFtIGJyYXppZXIgYW5kIG5pZWxseQpwYWludCBwb3VyIHNtb2tlCnZlcnkgYmlnIHNtaWxlCmhvbWV3b3JsZAphcmNoaXZlIHBob3RvZ3JhcGh5CnNjdWxwdGluZwpwaG90byBrb2RhayAzNW1tIGNvbG9yZWQKaG9sZGluZyBtaW5pYXR1cmUgZWFydGggaW4gaGFuZHMKdmVyeSBjbGVhbiBhcnQKaG9sbyBpcyBhIHdvbGYgZ2lybApob21lc3R1Y2sKY2xlYXIgcmVmbGVjdGlvbgpob3JuZXQgZnJvbSBob2xsb3cga25pZ2h0CmdyYWhhbSBodW1waHJleXMKbWV4aWNhbiBkZXNlcnQKY293Ym95IGJvb3RzCnJhbXBhZ2luZwppbiBhIG9sZCBob3VzZS4gaHlwZXIgcmVhbGlzdGljCmh1Z2d5IHd1Z2d5Cmh1Z2ggbGF1cmllCnNtaWxpbmcgYXQgZWFjaCBvdGhlcgp2YW4gZ29naCBhbmQgbW9uZXQKb2xkIGNhc3RsZQpwb3N0IGFwb2NhbHlwdGljIHRva3lvCjEyMGsgcmVzb2x1dGlvbgpkYXJrIGNsb3VkcyBpbiB0aGUgc2t5CnJlZmxlY3RlZCBsaWdodAp6ZWlzcyA1MG1tIGYxLjgKYXJlYSA1MQpnb2xkIGFybW91ciBzdWl0Cm1hcnZlbCBjb21pYyBib29rIGNoYXJhY3RlcnMKc2l0dGluZyBpbiBoZXIgdGhyb25lIHVuZGVyd2F0ZXIKd2VhcmluZyBhIHBpbmsgYmFsbHJvb20gZ293bgpyZWQgYW5kIHRlYWwgY29sb3Igc2NoZW1lCmZlZWRzIG9uIHRoZSBlbnRpcmUgY29zbW9zCnRoZSBmaXJzdCBhbmQgdGhlIGxhc3QKc2hlIGhhcyBmZWF0aGVycwpiZWF1dGlmdWwgd2l0Y2ggZmVtYWxlCmJlYXV0aWZ1bCB3aXRjaCBzcG9va3kgZmVtYWxlCmxpa2UgdGVhcnMgaW4gcmFpbiB0aW1lIHRvIGRpZQp0dnMKZ2lhbnQgcm9ib3RzCml1IGxlZSBqaS1ldW4gYXMgYSBzdXBlciB2aWxsYWluCmJyaWdodCBhbmQgY29udHJhc3RpbmcgY29sb3JzCmljZSBwcmluY2Vzcwpjb2xkIG1pc3QKYmxhY2sgdGhlbWUKY2dzIHNvY2lldHkKaWxsdXN0cmF0aW9uIG9mIGEgY2F0CmJlaGluZCByZWQgY3VydGFpbnMKYnJpZGdlIGNpdHkKaG91c2UncyBhbmQgc2hvcHMgYW5kIGJ1aWxkaW5ncwppbWFuZSBhbnlzCmltcAppbiBhbiBjYWxsIGNlbnRyZSBvZmZpY2UKY2luZW1hdGljIGJyaWdodCBzdW5ueSBkYXlsaWdodAppbmRpYW4gZ29kZGVzcwpyaXBwZWQgY2xvdGhlcyBob2xkaW5nIHdoaXAKcHN5dHJhbmNlCm1pY3JvIGxlbnMKaGVsbCBzY2hlbWUKdGhlIGFydGlzdApmaXNoaW5nIHRvd24KcGxhbnRzIGFuZCBmbG93ZXJzCnNvbWUgcGVvcGxlIGFyZSBzaXR0aW5nCmluc29tbmlhCmZpbGxlZCB3aXRoIHBsYW50cwp3aW5kb3cgdmlldwpzYW5rYWt1Y29tcGxleCBhbmltZSBpbWFnZQpzaHV1c2h1dSBhbmltZSBpbWFnZQpzYWZlYm9vcnUgYW5pbWUgaW1hZ2UKZGV0YWlsZWQgc3ltbWV0cnkKc2FjcmFsIGNoYWtyYQpzZWEgc3Rvcm0Kw6ljbGFpcmFnZSB2b2x1bcOpdHJpcXVlCmlyaW5hIGZyZW5jaCBhcnQKdmludGFnZSBwdWxwIGFydAptZXRhbCB0ZXh0dXJlCmNvbWljIGFydCBzdHlsZQppc29tZXRyaWMgM2QgZmFudGFzeSBjdXRlIGRvZwozZGNvYXQgaCA2NDgKcm95YWwgcGFsYWNlCml0IHdhcyB0aGUgYmVzdCBvZiB0aW1lcwpwb3J0cmFpdCBvZiBhIGZlbWFsZSBtb2RlbApwYWludGluZyBpdmFuIHNoaXNoa2luCm9sZCBwaG90byB3aWR0aCA3NjgKcmVzaWRlbnQgZXZpbCA3CmJlYXV0aWZ1bCByZW5kZXJpbmcKamFpbmEgcHJvdWRtb29yZQpoaWdoIGRlbGljYXRlIGRldGFpbHMKdmVyeSBzaGFycCB2YW1waXJlIGZhbmdzIHRlZXRoCmphbWllIGNhbXBiZWxsIGJvd2VyCmY0LjAKcHJlbWllcmUKbW9kZXJuIGVkZ3kgZ3JhcGhpYyBkZXNpZ24KamFwYW4gZGVlcGVyIHRyYXZlbCBleHBsb3JhdGlvbgptdXRlZCBkZWVwIG5lb24gY29sb3IKamFwYW5lc2UgZ2Vpc2hhCm1hbmdhIGNvbWljCmluIGFuY2llbnQgamFwYW4KY2hlcnJ5IGJsb3Nzb20gcGV0YWxzCnNwcmF5IHBhaW50ZWQgZ3JhZmZpdGkKdGhpY2sgaW5rIGxpbmVzCmphcGFuZXNlIHdvb2RibG9jayBwcmludCBvZiByMmQyCmhpZ2gtcXVhbGl0eSBwaG90bwptb2RlbGluZyBmb3IgZHVsY2UgYW5kIGdhYmFubmEKamVubmlmZXIgbG9wZXoKamVyZW15IGVsYmVydHNvbgpldmlsIGludGVudApwZXJmb3JtaW5nIG9uIHN0YWdlCnpvbWJpZSBraWxsZXIKcG9sYXJvaWQgY2xlYXIKbWFzc2l2ZSBjb3Ntb3Mgc2NhbGUKamVzdXMgY2hyaXN0IGluIG1hc3MgZWZmZWN0Cmplc3VzIGNocmlzdCBvbiB0aGUgY3Jvc3MKYXdhcmQgd2lubmluZyBzaGFkaW5nCmVkaXRvcmlhbCBpbWFnZQpmcmVuY2ggZ2lybApibGFjayBiZXJldCB3aXRoIGEgcmVkIHN0YXIKYmxhY2sgbGVhdGhlciBzaG9ydHMKamltIGNhcnJleSBhcyB0aGUgam9rZXIKcmVkIGZhY2VkCnBpbmsgdGluZ2VkIGhlYXZlbmx5IGNsb3VkcwphcmNhbmUgZnJvbSBuZXRmbGl4CnBvcnRyYWl0IG9mIHJ1Z2dlZCBhZHVsdCBmZW1hbGUKd2VhcmluZyBhIGdhbWluZyBoZWFkc2V0Cm1hcmxvbiBicmFuZG8gYXMgYmFyb24gaGFya29ubmVuCmpvZSBiaWRlbiBhcyB0aGUgam9rZXIKam9lIGJpZGVuIGZ1bGwgYm9keSBwb3J0cmFpdApqb2UgYmlkZW4gaW4gZ3RhIHYKZXh0cmVtZWx5IHJlYWxpc3RpYyBwaG90bwpzbGVuZGVyIG1hbgpwbGF5aW5nIHNvY2Nlcgpyb2Jsb3ggYXZhdGFyCm1hZ2F6aW5lIGFkdmVydGlzZW1lbnQKaXNtYWlsCmF3YXJkIHdpbm5pbmcgcGhvdG9zCmpvaG4gY2FycGVudGVyJ3MgdGhlIHRoaW5nCnF1YWNrIG1lZGljaW5lCjE0ayBoZCBxdWFsaXR5CmpvbGxpYmVlIGNpdHkKbG91aXMgdnVpdHRvbiBzdWl0Cm5vcm1hbmR5CmhvcnJvciBzeW1tZXRyaWNhbCBmYWNlCmxvbmcgY3VybCByZWQgaGFpcgpvdXRzaWRlIGluIHNub3cgc25vd2luZwpleWUgcGF0Y2ggb3ZlciBvbmUgZXllCmNoYWlucyBhbmQgcmVkIGZsdWlkIGJhY2tncm91bmQKaGlnaGx5IGNpbmVtYXRpYwprYW55ZSB3ZXN0IGFzIGVtcGVyb3IgbmFwb2xlb24Ka2FueWUgd2VzdCBhcyB0aGUgam9rZXIKcnVzc2lhbiBmbGFnCm5hc2Nhcgpjb21pYyBib29rIHN0eWxlIGFydApzdHlsZSBvZiBtYXNhbXVuZSBzaGlyb3cKa2FybCB1cmJhbiBhcyB3b2x2ZXJpbmUKY2hhaXJtYW4gbWFvCmFyc2VuIGx1cGluIGFzIGEgcGFsYWRpbgplbCBjYXBpdGFuCnlvc2VtaXRlIHZhbGxleQprYXdvcnUgbmFnaXNhCmRpZ2l0YWxseSBjb2xvcmVkCm92ZXIgdGhlIHNob3VsZGVyCnVsdGltYSBtb29uZ2F0ZQp3b25kZXJsYW5kIHBvcnRhbApjb2J3ZWJzIGFuZCBkdXN0CmtpbSBrYXJkYXNoaWFuIGFzIGhhcmxleSBxdWlubgpibG9vbSBsaWdodGluZwpncQpraW5ncGluCmtpbmdzbGFuZGluZwpuNjQgZ3JhcGhpY3MKNGsgOGsgaGQKc3Vuc2V0IG9uIHRoZSBiZWFjaApraXlva28gc3V6dWtpCm90aGVyd29yZGx5IGNvbmNlcHQKcm9ib3RpYyBmZWVsaW5nCmZ1dHVyaXN0aWMgaGFpcnN0eWxlCnVua25vd24gdGl0bGUKYmx1ZSBhbmQgcmVkIGdsb3dpbmcgbGlnaHRzCnNvZnQgYmx1ciBiYWNrZ3JvdW5kIGxpZ2h0CmZpbmUgYXJ0IGZhc2hpb24gbWFnYXppbmUgc3R5bGUKa2FzdW1pIGFyaW11cmEgc3R5bGUgMy80CnZvbHVtZXRyaWMgdW5kZXJ3YXRlciBsaWdodGluZwpzcGxpdCBzY3JlZW4Kc3BhY2Ugd2FsayBzY2VuZQozLzQgcG9ydHJhaXQKc3lkIG1lYWQgMy80IGNsb3NldXAgcG9ydHJhaXQKeXV1a2kgaGFndXJlCnNsdW0Ka3J5c3RhbCBmcm9tIHN0YXIgZm94Cmt1cmRpc2ggc2FtdXJhaQpub21hZApzaXR0aW5nIG9uIGNvdWNoCndpdGggcm9ib3RpYyBhcm1zCmFzIGNyaXN0aW5hIGtpcmNobmVyCmNvcnBzZXBhaW50CnJpZnRlbgp0aGUgcmlmdAp3aGl0ZXJ1bgptYXN0ZXJmdWwgdGVjaG5pcXVlCmRpc3RhbnQgYmF0dGxlIG9mIGNhbm5hZSAyMTYgYmNlCnNwYXJzZSB0cmVlcwpwdXJwbGUgc3Vuc2V0CmxhbmRzY2FwZXM6IHRoZSBqb3kgb2YgbGlmZQpvcmlnaW5hbCBzdHlsZQpib3JpcyB2aWxsZWpvCnBhdHJpY2sgam9uZXMKY2VsbC1zaGFkaW5nCndoaXRlIHNwYXJrbGVzIHN1bmxpZ2h0IGJlYW1zCmxhcmEgY3JvZnQgcmVsYXhpbmcKY2FtaWxsYSBsdWRkaW5ndG9uCnBob3RvIG1vc2FpYwpwb2ludGlsbGlzdCBzdHlsZQpsYXZlbmRlciBmaWVsZHMgaW4gZnVsbCBibG9vbQpsaWdodCBzaGluaW5nCmRydW0ga2l0CnJvYmVydCBwbGFudApyYXZpc2hpbmcKY2FydG9vbiBzaGFkaW5nCmhvbGRpbmcgYSBsb25nYm93CmxlZ29zaGkgZnJvbSBiZWFzdGFycwpsaWdodHNhYmVyIGR1ZWwKc3dlYXRpbmcgaW50ZW5zZWx5Cmxlb25hcmQgY29oZW4KbGVvbmFyZG8gZGEgdmluY2kgYW5hdG9teSBzdHVkeQpzb3V0aCBrb3JlYW4gbWFsZQpsaWJyYXJ5IG9mIGJhYmVsCmxlZSBncmlnZ3MKcHN5Y2hlZGVsaWMgbGlnaHQgc2hvdwpsaWwgcGVlcApwb3dlcnB1ZmYgZ2lybHMgc3R5bGUKcm9sbGVyY29hc3RlcgpkcmluawpodW1hbiBleWUKd2Vic2l0ZQpsaW5rIGZyb20gdGhlIGxlZ2VuZCBvZiB6ZWxkYQpwb3Npbmcgc29sbwpsaXNhIHNpbXBzb24gd2VhcmluZyBicmFjZXMKd2l0aCBubyBiZWFyZApsaXphcmRtYW4KbG9maSBnaXJsCjE4NzUKbG9uZSByYW5nZXIKbG9uZ2hvdXNlCmdsYWNpZXJzCmZ1bGwgZGF5bGlnaHQKbG9vawpnaG9zdGx5IHdoaXRlIHRyZWVzCnBvbGljZSBjYXJzCmxvc3QgdGVtcGxlCmludGVydmlldwpjb21wZXRpdGlvbgp1bHRyYSBkZXRhaWxlZCBzdG9ybSBjbG91ZHMKbHVjYXJpbyBmcm9tIHBva2Vtb24KZiAzLjUKbHVya2luZyBpbiB0aGUgc2hhZG93cwpseXNlcmdpYyBhY2lkIGRpZXRoeWxhbWlkZQpzdGFmZiB3ZWFyaW5nIGhhem1hdCBzdWl0cwpwaG90byB0YWtlbiBmcm9tIGFib3ZlCm1mIGRvb20gbWFzawpsb3cgZm9nIGxheWVyCm1pbmlhdHVyZSBmYWtpbmcKY3J1Y2lmaXgKbWFkZWxpbmUgZnJvbSBjZWxlc3RlCm1hZHMgbWlra2Vsc2VuIHNtb2tpbmcgY2lnYXJldHRlCmFydCBtb25ldCBhbmQgbXVjaGEKY2xlYXIgcmVmaW5lZApkaWdpdGFsIGdyYWZmaXRpIGxhbmRzY2FwZQptYWdpYyBteXN0ZXJ5IHdvcmxkCmRpc3BsYXkgaXRlbQptYWdpY2FsIGNyeXN0YWxzCnNpbGsgcm9iZXMKbWFpa2EgbW9ucm9lIGJhdGdpcmwKaWNpY2xlCmFjdGlvbiBoZXJvCm1hbGUgd29vZCBlbGYgcm9ndWUKZGFyayBibHVlIGxlYXRoZXIgYXJtb3IKYmxhY2sgYmFuZGFuYSBtYXNrCmNoZXN0IGd1YXJkCndlYXJpbmcgZmFjZW1hc2sKaXNvOiA0MDAKbWFuIGluIGJsYWNrIHN1aXQKZ29sZCBtYXNrCmZyb20gdGhlIHJvb2YKbWFubW9oYW4gc2luZ2ggYmx1ZSB0dXJiYW4KbWFueSBidWlsZGluZ3MKbG9yZCBvZiB0aGUgcmluZ3MgbWFwCnplbGRhIGJyZWF0aCBvZiB0aGUgd2lsZCBtYXAKMjU2eDI1NgptYXJjIHNpbW9uZXR0ZQpkbHNyIHBob3RvZ3JhcGgKbWFyZ290IHJvYmJpZSBhcyBjYXR3b21hbgptYXJnb3Qgcm9iYmllIGFzIHdvbmRlciB3b21hbgp3b3JraW5nIGF0IG1jZG9uYWxkcwptYXJpbyBkYWJiaW5nCm1hcmlvIGluIHJlYWwgbGlmZQpsaXphcmQgc2tpbgpyYXcgZmlsZQoxOTcwcyB2aW50YWdlIGFydAp3aXRoIHRlYXJzCm1heCB2ZXJzdGFwcGVuCm9sZCBicmljayB3YWxscwpha2loYWJhcmEgc3R5bGUKYmVza2luc2tpCnNjaSBmaSBjaGFyYWN0ZXJzCm5hdnkgYmx1ZQpkcmFtYXRpYyBwaG90b2dyYXBoCmhpZ2ggZGV0YWlsIGRpZ2l0YWwgcGFpbnRpbmcKdHlwaW5nIG9uIGEgaG9sb2dyYXBoaWMga2V5Ym9hcmQKbG90cyBvZiBzbmFrZXMKbWVnIGtpbXVyYQptZWdhIG1hbgptb29uIHN1cmZhY2UKc3Vid29vZmVyCnRvdGFsIGRlc3RydWN0aW9uCm1pY2hhZWwgam9yZGFuCnRocmVhdGVuaW5nIHBvc2UKcHJvbW90aW9uYWwgbW92aWUgcG9zdGVyCmxlYXRoZXIgaW50ZXJpb3IKdG93ZXJpbmcgZ2lhbnQgbWFkZSBvZiB6b21iaWVzCm1pbGEga3VuaXMgd2VhcmluZyBibGFjayBjaG9rZXIKb2lsLXBhaW50aW5nCm1pbmVjcmFmdCBzdGV2ZQptaW5lY3JhZnQgdmlsbGFnZXIKaGlnaCBkZXRhaWxlZCBvaWwgcGFpbnRpbmcKbWluZWNyYWZ0IGluIHJlYWwgbGlmZQptaW5pbWFsaXN0IGFic3RyYWN0IGFydApiaWcgbW9uc3RlcgpjaGVlcmluZwptaW5vcml0eSByZXBvcnQgdGhlIG1vdmllCm1pcmFuZGEgb3R0byBhcyBlb3d5bgp3aGl0ZSBibG9jayBmZW5jZQphcmNoaXRlY3R1cmFsIGRldGFpbAptb2hhd2sgaGFpcnN0eWxlCm1vamF2ZSBkZXNlcnQKbW9sbHkgZnJvbSB0aGUgbm92ZWwgbmV1cm9tYW5jZXIKbW90aGVybHkKZmVhdHVyZWQgb24gYXJ0Z2VybQpncmFpbnkgdHJpLXggcHVzaGVkIHRvIDMyMDAKbW9uc3RlciB0cnVjawpibGFjayBpbmsgaWxsdXN0cmF0aW9uCm5ld3MgcmVwb3J0CmZyYW5rIGZyYW56ZXR0dGEKbW9yZ290aApkZXRhaWxlZCBzY2FuCnN1YmR1ZWQgY29sb3IKYXdhcmQtd2lubmluZyBvaWwgcGFpbnRpbmcKd2VhcmluZyBjb29sIHN1bmdsYXNzZXMKdHJlbmRpbiBvbiBhcnRzdGF0aW9uCm1yLiBiZWFuIChyb3dhbiBhdGtpbnNvbikKbnVjbGVhciBmdW5ndXMKISBob2xkaW5nIGluIGhpcyBoYW5kICEKZW5oYW5jZWQgbm9pc2UKY2hyb21lIGFybW9yCm1lZGl1bS1sZW5ndGggcG9ydHJhaXQKbXVzdGFmYXIKbXkgc2xlZXAgcGFyYWx5c2lzIGRlbW9uCm15c3RpYyBhcnQKNGsgZHNscgpkcwpuYXBvbGVvbiBjcm9zc2luZyB0aGUgYWxwcwpuYXR1cmUgZHJ1aWQgZHJlYW1pbmcKbmVjcm8KaW5zaWRlIGhlciB0ZW1wbGUKc2VyZ2V5IHphYmVsaW4KbWF0dGUgcGFpbnRpbmcgdW5yZWFsIGVuZ2luZQp0aGVybWFsIGltYWdpbmcKbmV2ZXIgZ29ubmEgZ2l2ZSB5b3UgdXAKbmV2ZXIgZ29ubmEgbGV0IHlvdSBkb3duCmxlYWtlZCBpbWFnZQpuZXltYXIganIKbmV6aGEKbWF4IGdyYXBoaWNzIHNldHRpbmdzCmdyZWF0IGVtcGVyb3Igb2YgcnVzc2lhbiBlbXBpcmUKbmljbyByb2JpbgpzZXQgcGhvdG9ncmFwaHkKYXJjaGl2ZSBwaG90b2dyYXBoCm91dGxhdwpuaWdlbCB0aG9ybmJlcnJ5Cm5pZ2h0IG9uIG5hciBzaGFkZGFhCmZvcmJpZGRlbgpuaW5lIHNlcGFyYXRlZCBoZApjb25zb2xlCmFwdGVyeXggbWFudGVsbGkKc3RlbGxhciBza3kKbmVja2JlYXJkCm11bHRpLWRpbWVuc2lvbmFsCnZhdGljYW4KaWR3IHB1Ymxpc2hpbmcKdmFsaWFudCBjb21pY3MKb2N0b3B1cyB3ZWFyaW5nIGEgc3BhY2VzdWl0CmFzIGEgcGFuZWwgb2YgYSBtYXJ2ZWwgY29taWMKZmluZS1kZXRhaWxlZApwdXJwbGUgdGllCndoaXRlIGhvdXNlIGFyY2hpdmVzCjE4NjgKcm9ib3Qgb3ZlcmxvcmQgaW4gdGhlIHllYXIgMzQ5OQpvaCBubwpvY3RhbmUgcmVuZGVyISEhCmxvbmcgZGFyayBwdXJwbGUgaGFpcgoxLjggYXBlcnR1cmUKb2xkIGJ1aWxkaW5nCmF0bW9zcGhlcmljIGFuZCBkZXByZXNzZWQKdmFwb25wdW5rCmluIHRoZSBtaWRkbGUgb2YgdGhlIG5pZ2h0CnJlcHJlc2VudGF0aXZlIHBvcnRyYWl0CmtpbGxlciBib290cwpoaWdoIHNvbGVzCmJhdHRsZSBzaG9lcwpoZWF2eSBtZXRhbCByYXZlIHNob2VzCmdyb3VuZCBsZXZlbCB2aWV3IG9mIHNvdmlldCB0b3duCm9yYyB3YXJyaW9yCm9yZWxzYW4Kb3JsYW5kbyBibG9vbSBhcyBsZWdvbGFzCmdyYWZmaXRpIGNvbmNyZXRlCm90dG9tYW4gc3VsdGFuYXRlCmlsbHVzdHJhdGVkIGluIHdoaW1zaWNhbCBzdHlsZQpnb3VhY2hlIG1hdHRlIHBhaW50aW5nCnN3aXJsaW5nIGdhcmRlbnMKbG9va2luZyBvdXQKZnJlZGVyaWMgY2h1cmNoIGFuZCB2YXNpbHkgcGVyb3YKaGlnaCB0cmFuc3BhcmVuY3kKc3VycHJpc2VkIGV4cHJlc3Npb24gb24gaGVyIGZhY2UKZGFyayBzdG9ybXkgd2VhdGhlcgp2aWJyYW50IGRhcmsgd2F2eSBoYWlyCnF1aW50CmR1ZWxpbmcKcGFsYWNlIGZsb2F0aW5nIGluIHRoZSBza3kKcGFsZS1za2lubmVkIHBlcnNpYW4gZ2lybApsb3RzIG9mIGVtYmVycwpiZWF1dGlmdWwgc291dGgga29yZWFuIHdvbWFuCnNvZnQgYnJpZ2h0IHNraW4Kc29mdCBtYWtldXAKbGFydmFlCnBlYWt5IGJsaW5kZXJzIGdhbmcKYW5pbWF0ZWQgY2hhcmFjdGVyIGRlc2lnbgpza2F0ZSBwYXJrCmhkIGFydHdvcmsKZ29vZ2xlIGFydHMgYW5kIGN1bHR1cmVzCnJlZWRzCnN0cmFuZGluZyBzdHJhaWdodApuZW9uLW5vaXIgYmFja2dyb3VuZApxdWVlbiBvZiB0aGUgdW5kZXJ3b3JsZApkYW4gd2l0egpwZXRlciBncmlmZmluIGhhaXJzdHlsZQpwZXRlciBncmlmZmluIGluIHJlYWwgbGlmZQp2dWxnYXIKYnJva2VuIG1hc2sKd2hpdGUgdmFzZQpnaWFudCBtdXNocm9vbQpzdGVwaGVuIGhhd2tpbmcKc2tpbGxlZCBob21lbGVzcwpwaG90b3JlYWxpc3RpY2sKODIgbW0gc2lnbWEgYXJ0IC0KbmF0dXJhbCBtYWtlLXVwCmlzb21ldHJpYyB2aWV3LiBnYW1lIHJwZwpwaG90byBvZiBzbGltIGdpcmwKY2xlYW4gZGV0YWlsCnBob3RvZ3JhcGggb2YgYXByaWwKdHJpLXggaXNvIDQwMCBmaWxtCjUwbW0gZjEuIDIgbm9jdGlsdXggbGVucwpzaHV0dGVyIHNwZWVkIDEvMTI1CndoaXRlIGJvZHkKcGhvdG9ncmFwaCBvZiB0aGUgY2l0eSBzdHJlZXQKY2F0IG9uIHRoZSB0YWJsZQp3aXRoIGdyZWF0IGRvbWVzIGFuZCBhcmNoZXMKZGFyayBhbmNpZW50IGF0bW9zcGhlcmUKYmlnIGRlc2sKcGluLXVwIHBvc3RlciBnaXJsCnBpY3R1cmUgb2YgYSBtYWxlIGJpa2VyCmZ1bGwgb2Ygd29uZGVycwp3YWxraW5nIHRvd2FyZHMgeW91CmJsYWNrIHNoaXJ0IHVuZGVybmVhdGggYXJtb3IKcmVkIGNvbG9yZWQKY29sb3VycyBvZiB0aGUgc3Vuc2V0CnBpa2FjaHUgaW4gYSBmb3Jlc3QKcGlrYWNodSB0YXJvdCBjYXJkCmRpZ3RhbCBhcnQKb3ZlcnBvd2VyZWQKc3F1aXJ0bGUKcGluZ3UKcGluayBjb3dib3kgaGF0CvCfkI7wn42RCnRyZW1lbGxhLWZ1Y2lmb3JtaXMKdmVyeSBjcmlzcApyYWluaW5nISEhCnNpbXBsZSBsaW5lYXJ0CmJsZXNzZWQKYmFkbHkgZHJhd24KcG9ydGFsIDMKZmlsbSBzdGlsbCBmcm9tIHRvcCBndW4gMTk4Ngp3ZWFyaW5nIGdpbGRlZCByaWJlcwp3ZWFyaW5nIGEgd29ybiBvdXQgc3VpdApyb2JvdCBleWUKd29tYW4ncyBmYWNlCmRyYW1hdGljIG1vb2QgbGlnaHRpbmcKcG9ydHJhaXQgc29waGllIG11ZGQKZ2xpdHRlciBtYWtldXAKYWJzdHJhY3QgcHVycGxlIGxpZ2h0aW5nCnBvcnRyYWl0IG9mIGFyaXN0b3RsZQpwb3J0cmFpdCBvZiBicnVjZSBsZWUKcGVyZmVjdCBmYWNpYWwgc3ltZXR0cnkKY2hpbGQgaHlicmlkCnJlYWxpc3RpYyBmYWNlIGFuZCBib2R5IGh5YnJpZApwb3J0cmFpdCBvZiBkYW5ueSBkZXZpdG8KdGhlIGdyZWVrIGdvZApwb3J0cmFpdCBvZiBlbHZpcyBwcmVzbGV5CmJyb29tc3RpY2sKYnJpZ2h0IGF0bW9zcGhlcmljIGxpZ2h0aW5nCmhpZ2hseSBkZXRhaWxlZCBmYWNpYWwgZmVhdHVyZXMKZ3JhZmZpdGkgYmFja2dyb3VuZApwb3J0cmFpdCBvZiBoYXJyeSBwb3R0ZXIKcG9ydHJhaXQgb2YgaGVsZW4gb2YgdHJveQpwb3J0cmFpdCBvZiBqZXN1cyBjaHJpc3QKcG9ydHJhaXQgb2Yga2ltIGthcmRhc2hpYW4KcG9ydHJhaXQgb2YgbGVvbmFyZG8gZGljYXByaW8KdGVhbCBldGhlcmVhbCB0ZW5kcmlsIHdpbmdzCmZyZW5jaCBmbGFnCmZyZW5jaCBlbXBlcm9yCnBvaW50ZWQgYmxhY2sgd2l0Y2ggaGF0CmFudGlxdWUgcGFpbnRpbmcKaW51aXQKcG9ydHJhaXQgb2Ygc3BpZGVybWFuCm1lZGlldmlsIHNwZWFyCnBvcnRyYWl0IG9mIHZvbGRlbW9ydAo4ayBhcmNoaXZhbCBwcmludApwb3J0cmFpdCBvZiBhIGRuZCBjaGFyYWN0ZXIKcG9ydHJhaXQgb2YgYSBldXJvcGVhbiB3b21hbgppbiB0aGUgYmFja2dyb3VuZCBvZiBnb2xkCmxlc2xpZSB6aGFuZwp6aG9uZyBsaW4KY29yYWwgbGlwc3RpY2sKcG9ydHJhaXQgb2YgYSBsbGFtYQpibHVlIGxpcHN0aWNrCnBvcnRyYWl0IG9mIGEgYmVhdXRpZnVsIGZlbWFsZQpsZWNoZXJvdXMgcG9zZQptaWRqb3VybmV5IQpjcmFja2VkIHBvcmNlbGFpbiBmYWNlCjI0IG1tCnBvcnRyYWl0IG9mIGEgY293Ym95CnBvcnRyYWl0IG9mIGEgY3liZXJwdW5rIGN5Ym9yZwpnb2xkIGFuZCByZWQKZW1hbmF0aW5nIHdpdGggYmx1ZSBhdXJhCmZhY3RvcnkgYmFja2dyb3VuZApwb3J0cmFpdCBvZiBhIGZyb2cKbGlvbidzIG1hbmUKcG9ydHJhaXQgb2YgYSBnb2JsaW4KYSBzYWx0JnBlcHBlciBnb2F0ZWUKY3liZXJwdW5rIG9ybmFtZW50cwpjaGlsZGhvb2QgZnJpZW5kIHZpYmVzCnNob3J0IGJsb25kZSBoYWlyIHdpdGggYmFuZ3MKc29tZXdoYXQgYW5kcm9nZW5pYwptZXNzeSBicm93biBzaG9ydCBoYWlyCnRpcmVkIGFwcGVhcmFuY2UKc2lkZSBwYXJ0ZWQgY29tYm92ZXIgYnJvd24gaGFpcgpoZSBpcyBhYm91dCA1MCB5ZWFycyBvbGQKbXV0dG9uIGNob3BzCmJva2VoIGRvZgpmb2N1c2VkIGFtYmVyIGV5ZXMKc2NvdHRpc2gKc3R1YmJsZSBvbiBoaXMgZmFjZQpwb3J0cmFpdCBvZiBhIHNsaWdodGx5IHJ1c3R5CnBvcnRyYWl0IG9mIGEgc29sZGllcgpjb2dzIGFuZCBzcHJpbmdzIGFuZCBqZXdlbHMKZmluZSBhcnQgb2lsIHBhaW50aW5nCmx1bWluZXNjZW50IGJsdWUgZXllcwpwb3J0cmFpdCBvZiBhIHdoaXRlIGNhdAptdWxhdG8KbWVzc3kgYmxhY2sgYm9iIGhhaXIKaW4gc3F1YXJlLXJpbW1lZCBnbGFzc2VzCmZpc2ggaG9va3MKZ2lvcmdpbyBkaSBjaGlyaWNvCnBhdGNoZXMgb2YgbW9zcwp2ZXJ5IHZlcnkgdmVyeSBwYWxlIHNraW4KaG9uZXljb21iIGJhY2tncm91bmQKYW5ncnkgZmVtYWxlIGN5Ym9yZwpuZW9uIGZhY2UgcGFpbnQKbWFzdGVyIGRyYXdpbmcKYXNzYW0gdGVhIGdhcmRlbiBiYWNrZ3JvdW5kCnNvZnQgcmFpbmJvdwpwb3J0cmFpdCBvZiBzdHJhbmdlCm5hdHVyYWwgc2tpbiB0b25lIDRrIHRleHR1cmVzCnJlbGlnaW91cyBjb21wb3NpdGlvbgplbmVyZ3kgdHJhaWxzCm9jdG9wdXMgdGVudGFjbGVzCnZpb2xpbgpvcmlnaW5hbCBwb3N0IGltcHJlc3Npb25pc3QgYXJ0CmNvbG9yczogeWVsbG93IHN1bmZsb3dlcnMKcm9ib3QgaGVhZCBhbmQgbWFuIGhlYWQKcG9zdCBhcG9jYWx5cHRpYyB3YXN0ZWxhbmQKb2xkIHN0eWxlCnNlcmllcyBvbiBuZXRmbGl4CmtlaXRoIGhhcmluZyBzdHlsZQpmb3JyZXN0IGJhY2tncm91bmQKcG93ZXIgcmFuZ2VycyBmaWxtCmNvbG9yZnVsIGFuZCBkYXJrCjE5MDAncwpqYW1lcyBjb2xsaW5zb24Kbm9tYWRpYwpwcmluY2VzcyAna2lkYScga2lkYWdha2FzaApibG93aW5nIGJ1YmJsZWd1bQpsYXJnZSBzdGFpcmNhc2UKYmFja2dyb3VuZCBqZXQgZ3JvdW5kIHJhZGlvCmdsb3dpbmcgYWNjZW50cwozZCBndW4gbW9kZWwKaGliZXJuYXRpb24gY2Fwc3VsZSBjbG9zZS11cApwcm90b3pvYQpjaGxvZSBiZW5uZXQKcHVlcnRvIHJpY28KcHV0aW4gcmlkaW5nIGEgYmVhcgpweXJhbWlkIGhlYWQKcWxpcGhvdGgKcXVhcnR6IGNyeXN0YWwKZmxvcmVuY2UgaGFycmlzb24KaW1heCBjbG9zZS11cCBvZiBmYWNlCndpcmVzIGZseWluZyBpbiB0aGUgYWlyCnJhZGlvaGVhZCBhbGJ1bSBjb3ZlcgpoYW5kcyB3aXRoIGZpdmUgZmluZ2VycwpleHRyYSBsb25nIGhhaXIKY3V0aWUgbWFyawpyYWlubiB3aWxzb24KdmVyeSB2ZXkgdmVyeSBkZXRhaWxlZCBmYWNlCmRhcmsgY3JvdwptYXppbmdlcgpmZWF0dXJlZCBvbiBkcmliYmJsZQpyZWFsIGxpZmUgcGV0ZXIgZ3JpZmZpbgpyaWNoIGZsb3dlciBjb2xvcnMKZW50ZXIgdGhlIHZvaWQKc2VhIGJ1dHRlcmZsaWVzCmZ1bGwgbGVuZ2h0CnJlYWxtcwpiYWxheWFnZQpnbGltbWVyaW5nCnBhcmsgaW4gYmFja2dyb3VuZApjaGFyaW9zY3VybwppbiBmcm9udApjbGFyb3NjdXJvCnNha3VyYSBwZXRhbHMgYXJvdW5kIGhlcgpicm9uemUgYnJvd24gaGFpcgppbnVpdCBoZXJpdGFnZQpyZW5kZXIgb2YgbWlyYWJlbCBtYWRyaWdhbAp1bnJlYWwgZW5naW5lIDRrIHdhbGxwYXBlcgpkZWZlYXRlZApnaWFudCBhenRlYyBzcGFjZXNoaXAKcmV5IGFuZCBreWxvIHJlbgpyaWNoYXJkIG5peG9uCmNvdmVyIG9mIGxpZmUgbWFnYXppbmUKcmljayBhc3RsZXkKd2lnCnJpbXVydQpnYXBlCmJsdWUgY2xvYWsKZnV0dXJpc3RpYyB3b3JsZApyb2JvdGljIGZhY2VzCnJvY2tldCBzaGlwCmdhcnkgaG91c3Rvbgpyb21hbiBhcm1vcgpyb29tIG9mIGEgc3BhY2VjcmFmdAp3aXRoIGEgYnVuayBiZWQKcm9zZSBxdWFydHoKcnViZW5lc3F1ZQpydW5uaW5nIGF0IHRoZSBlZGdlIG9mIHNwYWNlCmdhbGF4aWVzIGFuZCBuZWJ1bGFlCnJ1c3NpYW4gYXJteSBpbmZhbnRyeSBzb2xkaWVycwpraHJ1c2hjaHlvdmthcwpzdGVybiBibHVlIG5lb24gYXRtb3NwaGVyZQpyeXVrbyBtYXRvaQpjb3NtaWMgc3BhY2UKdGhlIHBsYWd1ZSBkb2N0b3IKc2VhbGVkIHN1cGVyIGpvZSBiaWRlbgpza2F0ZXBhcmsKc3Vzc3kgYmFrYQphbnRpd2FyCmRlZXAgZ3JlZW4KdGFpbCBmaW4Kc2FsYWQgZmluZ2Vycwpsb29raW5nIGF0IGJsb29keSBmaXN0CmFjY3VyYXRlbHkgZGV0YWlsZWQKc2FtIGh5ZGUKc2FtdXJhaSBwb3J0cmFpdApzYW5zIHVuZGVydGFsZQpzaG90IG9uIDM1IG1tCmdyYXBoaXRlIG9uIHBhcGVyCm9jYXJpbmEgb2YgdGltZQpzYXN1a2UgdWNoaWhhCnNhdGFuaWMgY2FybCBzYWdhbgpncmFpbnkgcG9sYXJvaWQKZXBpYyB1cmJhbiBiYWtncm91bmQKc2hvcnQgc3Bpa3kgaGFpcgp2Znggc2hvdApzYXVsIGdvb2RtYW4gaW4gYWNlIGF0dG9ybmV5CmFuaW1lIHN0eWxlIGRyYXdpbmcKc2F1bCBnb29kbWFuIGluIGZvcnRuaXRlCnZpbnRhZ2Ugc2hpcnQKc2NhcmxldCB3aXRjaCBtYXJ2ZWwKc2NhcmxldHQgam9oYW5zc29uIGJsYWNrIHdpZG93Cm5lb24gbm9pcmUKd2VhcmluZyBleWVnbGFzc2VzCmdyZXkgYW5kIGRhcmsgdGhlbWUKaXQncyByYWluaW5nCnNjaHJvZGluZ2VyIGNhdApzY2hyb2RpbmdlcidzIGNhdApzcGFjZSBiYWNrcm91bmQKdmlldyBmcm9tIHRoZSB0b3AKY293Ym95IHRoZW1lZAphcnQgZGVjbyBpbmZsdWVuY2UKdHJpcHB5IHZpYnJhbnQgY29sb3JzCnNtaWxpbmcgc211Z2x5CnNoYWZ0IHN0dWRpbwp2b2xhdGlsZQpzZXZlcnVzIHNuYXBlIGRhbmNlIGluIGEgYmFyCnNoYWRvdyB0aGUgaGVkZ2Vob2cKbW9iaWxlIGxlZ2VuZHMKc2hhaCBydWtoIGtoYW4KYXp1bGVqbwpzaGFybgoxOTY4IHNvdmlldAoxOTY4IHNvdmlldCBqYXBhbmVzZQpkZXJwCnNob2RhbiBmcm9tIHN5c3RlbSBzaG9jayAyCmhlYXZlbmx5IHN5bWJvbHMKYXN0cmFsIHBhdHRlcm5zCnN0cmlwZWQgc2hpcnQKMDAwIGJhdHRsZQpzaWVycGluc2tpIGdhc2tldApmcmFjdGFsIGxhbmRzY2FwZQphdG1vc3BoZXJpYyBkcmFtYXRpYyBsaWdodGluZwpibGFjayBiYWxsIHBlbiBvbiB3aGl0ZSBwYXBlcgpoeXBoYWUKZ3JlZW4gYXJtcwpncmVlbiBsZWdzCmFwb2NhbHlwdGlrIGNpdHkKY2xvdWRlZCBza3kKc3BvdCBsaXQKZGlnaXRhbCBwYW50aW5nCndpdGggYW4gYXhlCmRpZ2l0YWwgYXJ0IHBvcnRyYWl0CjhsCmZyb250IGZsYXNoCnNvY2NlciBwbGF5ZXIKdmlicmFudCByZWQgYW5kIGdyZWVuIGNvbG91cnMKZ29sZGVuIGVuZ2luZXMKY2xlYW4gZGV0YWlsIDRrCnNvbG9tb24ga2FuZQphcnJpCm1vb25saXQgbmlnaHQgc2t5CnByZXNpZGVudCBvZiBicmF6aWwKMTk2MiBzb3ZpZXQKc2NpZW5jZS1mYW50YXN5CnJlZCBkdXN0Cmplc3NpY2Egcm9zc2llciBjb2xvciBzY2hlbWUKZHJpdmUgaW4gbW92aWUgdGhlYXRlcgphY2NyZXRpb24gZGlzawpzcGFjZXNoaXAgZGVzaWduCnNwYWNlc2hpcCBjb25jZXB0IGFydApuZW9uIGVkZ2VzIG9uIGJvdHRvbSBvZiBib2R5CnJoaW5vIHJlbmRlcmVkCnNwaWRlciBnd2VuCndpZGUgYW5nZWwgc2hvdCBmcm9tIGJlbG93CnNxdWlycmVsL3RpZ2VyCnN0IGplcm9tZSB3cml0aW5nIHRoZSB2dWxnYXRlCnN0YWJsZSBkaWZmdXNpb24gc2VsZiBwb3J0cmFpdApzdGFuZGluZyBoZXJlCmh5cGVyZGV0YWlsZWQgcGhvdG8KY3ViaWNsZXMKZXhjZXB0aW9uYWwgbGlnaHRpbmcKaGlnaGx5IHVwdm90ZWQKc3RvbmUgdGV4dHVyZQpncmF5IGNsb3VkcwpzdHJhbmdlciB0aGluZ3MgcG9zdGVyCmFsbCBjYXN0IG1lbWJlcnMKbmV0ZmlseCAhbi05CnRlY2hub2xvZ2ljCnR3byBzdG9yaWVzCnN1bmJhdGhpbmcgYXQgdGhlIGJlYWNoCm91dGRvb3IgcmF2ZQpkcmFnb24gYmFsbCBzdXBlcgpzeW1tZXRyaWNhbCBwb3J0cmFpdCBzY2lmaQpzdXBlcm1hcmlvbmF0aW9uCnR1cnF1b2lzZSBvY2Vhbgp0aGUgc3VuIGdsaXRjaGFydApnbGl0Y2ggZWZmZWN0IHN1bmxpZ2h0CmFsaWVuIGRyZWFtIHdvcmxkcwpyb3R0ZW4gd29vZApzdXNwaXJpYQpjb3VyYmV0CnN3aW1taW5nIGluIGEgcG9vbCBvZiBjb2ZmZWUKbjY0CnN5bHZlb24KcG9ydHJhaXQgb2YgYmFydCBzaW1wc29uCnN5bmRyb21lIGZyb20gdGhlIGluY3JlZGlibGVzCnN5bmVzdGhlc2lhCnJlc2lzdGFuY2UgaXMgZnV0aWxlCjkwJ3MKZGltIG5lb24gbGlnaHRzCmJ1bGdpbmcgZXllcwpoaWdobHkgZGV0YWlsZWQgYW5ncnkgYW5pbWUgZmFjZQpsb25nIGNveW90ZSBsaWtlIGVhcnMKc3RhY2tzIG9mIGJvb2tzCmxvdwp0YXJkaXMgY29uc29sZSByb29tCmVsb3F1ZW50CmhhbGYtZWxmIHRpbWUgd2l6YXJkCnRhdGFydQpiZXN0IGFpIGltYWdlCmZseWluZyBhbmltZSBlc3BlcgpzcG9vbiBwZWFyIHNsaW0gbG9saSBmaWd1cmUKcGhvdG9ncmFwaCBvZiB0YXlsb3Igc3dpZnQKdGF5bG9yIHN3aWZ0IG1vZGVsaW5nCnRheWxvciBzd2lmdCBhcyBhIGJveQpmaW5lIGxpbmVzIGFuZCBncmFwaGl0ZQpsb25nIHNwaWRlciBwYXdzCnRoZSBsYXN0IG1hbiBvbiBlYXJ0aApoaWdoLXF1YWxpdHkgY29tcG9zaXRpb24KYmxhY2tsaWdodCBwb3N0ZXIKdGVybWluYWwKZmxvd2luZyBsYXZhIGFuZCBhc2ggcGlsZXMKbWFueSB3aW5kb3dzCmluIHN0eWxlIG9mIHdsb3AKdWtpeW8tZSBhcnQKcmVuIHh1biBhbmQgbWFydXlhbWEgxY1reW8KYnVkZGhpc3QgYXJ0CnRoZSBjaGVzaGlyZSBjYXQKdGhlIGNpdHkgb2YgYXRsYW50aXMKc3BlY3RhY3VsYXIgZGV0YWlscwp0aGUgZHJlYW0KdmlicmFudCB0aHJlYWRzCnNtYWxsIGRvZwp0aGUgZm9yYmlkZGVuIGNpdHkKdGhlIGdvZCBvZiBtdXNpYwp0aGUgZ29kZGVzcyBvZiBhcnQKYmx1ZSBhbmQgeWVsbG93IHRoZW1lCmxvc3QgcGxhY2UgcGhvdG8KaW5sYWlkIHdpdGggZ29sZAphbGllbiBleWVzCnRoZSBqb2tlciBhcyBiYXRtYW4KYW4gZWFnbGUKcm9tYW5pemVkOiBhbC1rYcq/YmFoCmxpdC7igIkndGhlIGN1YmUnCmFyYWJpYyBwcm9udW5jaWF0aW9uOiBba2HKlS5iYWhdKQphbHNvIHNwZWxsZWQga2EnYmFoIG9yIGthYmFoCmxpdC7igIknaG9ub3JlZCBrYSdiYWgnKQp0aGUgbWFzamlkIGFsLWhhcmFtIGluIG1lY2NhCmNvbG9yIHJlZAp0aGUgbGlicmFyeSBvZiBiYWJlbAppbiBjb2xvcnMKdGhlIG1hbmRhbG9yaWFuIGluIGd0YSB2CnNocm91ZApvd2xzaGlwCndhdGNobWVuCnJwZ21ha2VyCmRlc29sYXRlIGxhbmRzY2FwZQp0aGUgcHJpbmNlIG9mIHRoaWV2ZXMKdGhpbmtwYWQKdGhlIHF1ZWVuIG9mIGhlYXJ0cwp3aGl0ZSBtYXJibGUgaGlnaGx5IGRldGFpbGVkCnRoZSByZWFwZXIgYXMgYSBzY2FyeQp0aGUgdW5jYW5ueSB2YWxsZXkKd2F0ZXJtZWxvbnMKbGlseSBwYWQKYnJpZ2h0bHkgY29sb3VyZWQgc21va2UKZWVyaWUgbHVtaW5vc2l0eQp0aGUgYW5zd2VyIHRvIGxpZmUKZ2FsbGVvbgpkcmVzc2VkIGluIHN0YXJzIGFuZCBwbGFuZXRzCmV4dHJlbWUgaHlwZXIgZGV0YWlsCnRoZSBiZXN0IGxhY2sgYWxsIGNvbnZpY3Rpb24Kc2NpLWZpIGZhbnRhc3kgd2FsbHBhcGVyCnRoZSBjYXQgaW4gdGhlIGhhdApiYWNrZ3JvdW5kIGlzIHBsYW5lIGluIHNwYWNlCnR3aWxpZ2h0IGNpdHkgb24gdGhlIGJhY2tncm91bmQKY2l0eSB0d2lsaWdodCBsYW5kc2NhcGUKdGhlIGNvbG9yIGJsYWNrCmVjbwp0aGUgY3JlYXRpb24gb2YgdGhlIHVuaXZlcnNlCnRoZSBjcmVhdG9yIG9mIHRoZSB1bml2ZXJzZQp0aGUgY3V0ZXN0IGNyZWF0dXJlIGluIHRoZSB3b3JsZAp0aGUgZGFyayBsb3JkCnRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgdW5pdmVyc2UKcGxhbmV0cyBjcmFzaGluZwp0aGUgZWRnZSBvZiB0aGUgd29ybGQKeWVsbG93cwp0aGUgZmxvd2VyIHRvd2VyCmRldGFpbGVkIDg1bW0gZi8xLjQKdGhlIGdhdGVzIG9mIGhlbGwKc2l0dGluZyBpbiBhIGZpZWxkCnJlbWluZGVkIG1lIG9mIHRoZSBncmltIHJlYXBlcgplcm9zIGFuZCB0aGFuYXRvcwp0aGUgZ3JlYXQgbWFyYmxlIHdpemFyZHMgdG93ZXIKYmVhdXRpZnVsIG9pbCBwYWludGluZyBvbiBjYW52YXMKZGV0YWlsZWQgZnV0dXJpc3RpYyBhcmNoaXRlY3R1cmUKd8STdMSBIGZ4CmhpZ2ggc2F0dXJhdGlvbiBjb2xvcnMKcmVhbGlzdGljIGdlb21ldHJ5CnRoZSBtYWdpY2lhbgpmcmVuY2ggbmV3IHdhdmUKcmVhbCBlbmdpbmUKcmVuZGVyZWQgaW4gdW5yZWFsZW5naW5lCmNsYXkgYW5pbWF0aW9uCnRoZSBtb3RoZXJzaGlwCnRoZSBtdXNpYyBndXkKYWR2ZXJ0aXNtZW50CnRoZSBvcmFjbGUgb2YgYW5jaWVudCB3aXNkb20Kd2F0ZXJjb2xvciBtYXN0ZXJwaWVjZQpmb3Jlc3QgZmFpcnkKY29ycG9yYXRlIHBob3RvCmdyZWVrLWVzcXVlIGNvbHVtbnMgYW5kIHJ1aW5zCmV4dHJhIHNob3J0IGJsdWUgcGxhaWQgc2tpcnQKdGhlIHVsdGltYXRlIHF1ZXN0aW9uIG9mIGxpZmUKaGlnaGx5IGRldGFpbGxlZCB0ZXh0dXJlCm1vZGVsIGZhY2UKbmlnaHQgY2l0eSBvbiB0aGUgYmFja2dyb3VuZAp2ZXJ5IGJlYXV0aWZ1bCBhbmQgZWxlZ2FudApuaWdodCB2aWV3CndpdGggYSBsb25nCnRoaWNrIHRhaWwKdGhpY2sgZm9yZXN0CndhbGthYmxlCml0J3MgbmFtZSBpcyBncmVlbnkKaXRzIG5hbWUgaXMgZ3JlZW55CnRoaXMgcGFpbnRpbmcgaXMgYSBsYXJnZSBjYW52YXMKdHlsZXIgZWRsaW4gYW5kIGplYW4gZGVsdmlsbGUKZHJpZnRpbmcgYXJvdW5kIGEgY29ybmVyCm5pa29uIDUwbW0gY2FtZXJhCnBob3RvIHBob3RvCml0IGlzIHJhaW5pbmcgb3V0c2lkZSB0aGUgd2luZG93CnNtYWxsIHNjYWxlCnRpZmEgbG9ja2hlYXJ0CndpdGhvdXQgdGV4dApzdHVkaW8gZ2hpbGJpCndpdGggcG9pbnR5IGVhcnMKaW1wb3J0YW50Cm9jYXJpbmEgb2YgdGltZSBtb3ZpZQp0aW5hIGJlbGNoZXIKY296eSB2aWJlCmJyYXNpbApzdHlsaXplZCBtb3RvcmN5Y2xlIGhlbG1ldAppbXByb2JhYmxlCmZ1bGwgYm9keSBpbiB2aWV3CnNvdmlldCBlcmEgcHJvcGFnYW5kYSBwb3N0ZXIKdG9tIGpvYmltCnNhdXNhZ2VzCnRvbmFsaXN0IGxhbmRzY2FwZQp0b3JuYWRvIG9mIGZpcmUKcGFydGhlbm9uCmNyeXN0YWwgc2t1bGwKbG93LWxpZ2h0CnRyYXZpcyBzY290dAplbGRlcmx5CnRyaWZvcmNlCjkwcyBub3N0YWxnaWEKbHVyaWQKdHVsYQpub3RvcmlvdXMgYmlnCmJlbGxhCnMgYmFyYWxkaQpqYW1lcyBlZG1pc3Rvbgp3ZWFyaW5nIHJyIGRpbmVyIHVuaWZvcm0KaGUncyBhIGhpdG1hbiBpbiBwZWFjb2F0CnJlbmRlcmluZyBvZiBiZWF1dHkgcGFnZWFudApvaWwgc3BpbGwKMjIgbWVnYXBpeGVscwphbnRpLWFsaWFzaW5nCmluIGEgZGVjYXllZCBob3NwaXRhbCByb29tCnlpbnlhbmcgc2hhcGVkCmluc2lkZSBhbiBvcm5hdGUgaG9zcGl0YWwgcm9vbQp0d28gaGFuZHNvbWUgbWVuCmFzeW1tZXRyaWNhbCBzcGlyZXMKZmxlc2h5IGJvbmVzCiEhIWVzYW8gYW5kcmV3cyEhIQp0d28gcGxhbmV0cyBjb2xsaWRpbmcKaW5zaWRlIGEgZGVjYXlpbmcgaG9zcGl0YWwgcm9vbQp0d28gc2tpbm55IGZpZ3VyZXMKdHdvIHNraW5ueSBvbGQgZmlndXJlcwp0aGUgd29ybGQgaXMgaW5zYW5lCnR3byBzdGlsbCBmaWd1cmVzIGZhY2luZyBjYW1lcmEKcG9vcApyZWFkaW5nIGEgbmV3c3BhcGVyCnJlYWxpc3RpYyBjbG93biBtYWtldXAKd2VhcmluZyBiaXphcnJlIGNsb3duIG1ha2V1cAp1biBtZWV0aW5nIGF0IHRoZSBoYWd1ZQp1c3MgZW50ZXJwcmlzZQpiaWJsaWNhbCBhcnQgc3R5bGUKdWx0cmEgcmVhbGlzdGljIGNvbmNlcHQgYXJ0CnN0ZWFtcHVuayBnbGFzc2VzCmZvY3VzIHN0YWNraW5nCnVuY28gY29ycG9yYXRlIGJhbm5lcgpjb3ZlciBvZiBuYXRpb25hbCBnZW9ncmFwaGljCmJlYXV0aWZ1bCB3YWxscGFwZXIKcmVmcmFjdGluZwpvbiBhIGNvZmZlZSB0YWJsZQp2YXN0IGZvcmVzdApyZWQgcG9wcGllcwp2aXN1YWxzCmJlbiBhZmZsZWNrCmNpbmVzdGlsbCA0MDAgdCBmaWxtCnZhbXBpcmUgcG9ydHJhaXQKcHJlc2lkZW50aWFsIGZ1c2lvbgptaXggb2YgYmlkZW4gYW5kIG9iYW1hCmVsZWdhbnQgcG9ydHJhaXQKcmVhbGlzdGljIGFuaW1lIHN0eWxlIGF0IHBpeGl2CmRvY3VtZW50CmdpZ2FudGljIG9pbHkgdGVudGFjbGVzIGFuZCBleWVzCnN0eWxpemVkIGdhbWUgYXJ0CmNvY2twaXQgdmlldwp2aWtpbmcgZmFjZSBpbiBwcm9maWxlCmZhbnMKdmlubnkgdmluZXNhdWNlCnNtb29nZ3kKaGlzIGNsb3RoZXMgYXJlIHRvcm4gYW5kIGRpcnR5Cm9yYml0aW5nIGVhcnRoCndhbGwtZQpzYXNjaGEgc2NobmVpZGVyCnBvbGxvY2sgcGhvdG9yZWFsaXN0aWMKYmVyc2VyayBhcnQgc3R5bGUKYXJhYgpwYW5vcmFtYSB2aWV3CndvbHVtZXRyaWMgbGlnaHRpbmcKcHJvZmVzc2lvbmFsIHByb2R1Y3QgcGhvdG8Kd2FsdGVyIHdoaXRlIGdpZ2FjaGFkCndhbHRlciB3aGl0ZSBpbiBzdXBlciBzbWFzaCBicm9zCndhbHRlciB3aGl0ZSBwb3J0cmFpdAppenVrdSBtaWRvcml5YQp3YXIgdGh1bmRlciBnYW1lCnBob3RvIHRha2VuIGZyb20gZmFyIGF3YXkKd2Fyc2F3CnNpbGsgc3BlY3RyZQp0aGUgbW9zdCBiZWF1dGlmdWwKaGlnaCB3YWxscwpzZncgaHVnZSBicmVhc3RzCndpZGUgaW1hZ2UKbMOhc3psw7Mgc3phYmFkb3MKd2lkZSBzaG90IG9mIGEgc3BhY2VzaGlwIGJhdHRsZQpvdmVybG9va2luZyByaXZlciBhdWZpZGl1cyBpdGFseQppbiB0aGUgc3R5bGUgam9yZGFuIGdyaW1tZXIKd2lsbCBzbWl0aCBwb3J0cmFpdApzZXF1aW5zCm1ldCBnYWxhCndpbGxlbSBkYWZvZSBhcyBhIHNpdGggbG9yZAp3aWxsZW0gZGFmb2UgaW4gcGxhZ3VlIGtuaWdodAp3aW5kb3dzIHhwIGJhY2tncm91bmQKd2luZG93cyB4cCB3YWxscGFwZXIKeXVnaW9oIGNhcmQKd2luc3RvbiBjaHVyY2hpbGwgcmlkaW5nIGEgdC1yZXgKZ2FtZSBzY2VuZSBncmFwaAp0cmFkaW5nIGNhcmQgZ2FtZQp3b2xmIGxpa2UgYSBodW1hbgpzZWFtcwp3b21hbiBob2xkaW5nIGFub3RoZXIgd29tYW4KYXJtIGFyb3VuZCBoZXIgbmVjawpibHVlIHJvc2UKd29tYW4gbWFkZSBvZiBibGFjayBmbGFtZXMKYmxvb2QgZHJpcHBpbmcgZG93biB0aGUgaGVhZAphcnQgbm91dmVhdSBwb3N0ZXIKZmV5d2lsZAp3b3Jrc2FmZS4gY2luZW1hdGljCndvcmtzYWZlLiBkcmFtYXRpYwp3b3Jrc2FmZS4gaWxsdXN0cmF0aW9uCnZpb2xldCBjb2xvcgp3aGl0ZSB3YXJtIGlsbHVtaW5hdGlvbgpjbG90aGluZyBkcm9wCnVucmVsZWFzZWQKeXp5Cnl6eSBnYXAKeWVsbG93IHNjaG9vbCBidXMKZ3JlY28tcm9tYW4gYXJ0CnBsYWluIHdhbGxzIHxzb21iZXIgd2hpdGUgZXllcwpsb25nIGFzaHkgaGFpcgp5b3VuZyBibG9uZGUgYm95IGZhbnRhc3kgdGhpZWYKcGFpbnRlZCBuYWlscwp5dWxpIGJhbgpjYXJ0b29uIGFydHN0eWxlCnNraW5jYXJlCm5pbGUgcml2ZXIgZW52aXJvbm1lbnQKemVybyBzdWl0IHNhbXVzCnpvZSBzYWxkYW5hCmdhbWUgYm9hcmQKZWVyaWUhISEgYXRtb3NwaGVyZQpnbG9vbXkgbGlnaHRpbmchISEKWyBzeW50aHdhdmUgYXJ0IHN0eWxlIF0hISBdISEKYmVuY2hlcwpzbW9vdGghXQpiYWNrZ3JvdW5kKHNvbGlkKQppbiBhbiBhcnQgZ2FsbGVyeV0KYmxvb2Rib3JuZSBjYXRoZWRyYWwKdGVsZXZpc2lvbiBzdW5nbGFzc2VzCm51a2UgZHJvcHBpbmcKbW9ydGljaWEgYWRkYW1zCnNob3J0IHRvIG1lZGl1bSBsZW5ndGggaGFpcgo3IDAgcyBwaG90bwpkYWxlIGdyaWJibGUKYmlsbCBkYXV0ZXJpdmUKam9obiByZWRjb3JuCmJhcmFiYXMgbWlrbG9zIGFuZCBob2xsb3N5IHNpbW9uCmZsb3dlcmluZyB2aW5lcwpwYXN0ZWwgc3R5bGUKYXdhcmQgd2lubmluZyBzZWR1Y3RpdmUKa2F2aXNreQpiaWtpbmkgbW9kZWwKZ3JheSBoYWlyZWQKb2xkIG1leGljYW4gbWFnaWNpYW4gY2xvc2VzIGV5ZXMKc29mdCBnb2xkZW4gaG91ciBsaWdodGluZwprb2RhY2hyb21lIGNvbG91cgppbnRyaWNhdGUgaHlwZXJkZXRhaWwgbWFjcm9waG90bwpzdGFnZSBsaWdodAptYXhvbiBvbmUKcG9wIDMgZCA4IGsgdWx0cmEgZGV0YWlsZWQKc3RlYW0gdHJhaW4KYnV6eiBsaWdodHllYXIgKCBmaWxtICkKcGl4YXIgc3R1ZGlvcwpjbGVhbiBzaGF2ZW4gZmFjZQpibHVlIGplYW5zIGFuZCBncmV5IHNuZWFrZXJzCnZlcnkgc2hhcnAgYW5kIGRldGFpbGVkIHBob3RvCmxvdW5nZSBiYWNrZ3JvdW5kCjI0IG1tIGxlbnMKc2lnbWEgOCA1IG1tIGYgMS4gNApvbGQgZ3JheSBoYWlyCnJlZmxlY3RpdmUgbWF0ZXJpYWwKd2l0aCBzeW1tZXRyeSBpbnRyaWNhdGUgZGV0YWlsZWQKaGFtCmJsdWUgdGhlbWUgYW5kIHllbGxvdyBhY2NlbnRzCmhleCBtZXNoCmFsaWVucyBtb3ZpZQpwaG90byBtb2RlbAp3b3RjCmh1Z2UgdHVza3MKY2ZkCm9yYW5nZSBzbGljZXMKYWxidW0KcGluayBwZXRhbHMKYmxhZGUgYW5kIHNvdWwKcHJheWVyIGZsYWdzCmZpZ2h0aW5nIGEgd2FyCnN0dWRpbyBwcm9kdWN0IHNob3QKeWVsbG93IGFuZCByZWQKaW4gdGhlIHNob3cgd2VzdHdvcmxkCml2YW4gc2VhbAppbG0gb2YgYW4gZXBpYyBzY2ktZmkKbW9ybmluZyBoYXplCm1vdW50IGZ1amkgaW4gdGhlIGJhY2tncm91bmQKY3Jvc3NoYXRjaCBzaGFkaW5nCnRpYmV0YW4gdGV4dCBzY3JpcHQKZGV0YWlsZWQgZGlnaXRhbCBjb25jZXB0IGFydAptaW5pIGNvb3BlciBzCmFwb3RoZWNhcnkKZGVjZXB0aW9uCnBvbnl0YWlsIGJsYWNrIGhhaXIKc3R5bGUgb2YgdGltIGhpbGRlYnJhbmR0CjQgMCA5IDYKYWJvcmlnaW5hbCBlbmdyYXZpbmcKbWVsdGluZyBjaGVlc2UKc3RlYW1lZCBidW5zCmdyaWxsZWQgYXJ0aWNob2tlCnNsaWNlZCBiYW5hbmEKbWlsayBkdWRzCmxpY29yaWNlIGFsbHNvcnQgZmlsbGluZwp3aXRoIHJlZCBnbG93aW5nIGV5ZXMKZGV0YWlsZWQgYXJtb3Igd2l0aCB3aGl0ZSBzY2FyZgpiZWF1dGlmdWwgb3BlbmVkIHdpbmdzCnbDqXJvbmlxdWUgbWVpZ25hdWQKZHJlc3NlZCBsaWtlIGEgY2xlcmljCmVtcHR5IHNub3cgZmllbGQKYW4gdXBzaWRlIGRvd24gdXJpbmFsCm1vbm9saXRoaWMgcmV0cm8gZnV0dXJpc3RpYwpzdXBlcnJhcmUgdHJlbmRpbmcKc2NyYXBib29rIHBhcGVyIGNvbGxhZ2UKcHJvZmVzc2lvbmFsIGNoYXJhY3RlciBkZXNpZ24KZGlnaXRhbHQgYXJ0CmRyYW1hdGljIGFjdGlvbiBwaG90b2dyYXBoeQpnZW50bGUgYm9rZWgKcGF1bCBvdXRlcmJyaWRnZSBtYXN0ZXJwaWVjZQpza3VsbCBhbmQgY3Jvc3Nib25lcwphbmF0byBmaW5uc3RhcmsuIGZyb250IHZpZXcKdHJlZSBwYWxtcyBpbiBiYWNrZ3JvdW5kCnByaWRlIHBhcmFkZQp3aWRlIGV2aWwgZ3JpbgpidXR0b24gdXAgc2hpcnQKZmlsbWVkCmRhbGxlIDIgcmVmZXJlbmNlCnRhdHRlcmVkIGNsb3RoaW5nCnBsYWNlIHNldHRpbmcKY29zbWljIG5lYnVsYWUKcmVkIHNpbGsgZmxvd2luZyBmYWJyaWMKbWFyYmxlIHdoaXRlIGNvbHVtbnMKYmxhY2sgdGFyIHBhcnRpY2xlcwpmcmVlemUgdGltZQphZG9ybmVkIHdpdGggZGVtb24gc2t1bGxzCmNpbmVtYXRpYyBkeW5hbWljIGxpZ2h0aW5nCnJveWFsIGNyb3duCmhpZ2hseSB0ZXh0dXJlZCBsYW5kc2NhcGUKc2N1bHB0dXJlZApjb25kZXNjZW5kaW5nCmhlIGlzIGNvdmVyZWQgd2l0aCBiYXJuYWNsZXMKcmVsYXhpbmcgYXRtb3NwaGVyZQp3aGl0ZSBwZXRhbApyZW1icmFuZHQgbGlnaHRuaW5nCnNvYXAgY2FydmluZwppbiBhIGFuaW1lIG1hc3RlcnBpZWNlCmdvdXJtZXQgc3R5bGUKcGVyc2lhbiBjYXJwZXRzCmFuaW1hbCBjcm9zc2luZyBjaGFyYWN0ZXJzCnNxdWFyZSBzaGFwZXMKZmFjZSBpcyBicmlnaHRseSBsaXQKYWxpZW4gdHJlZXMKdG93YXJkIHRvIHRoZSBjYW1lcmEKZiAxCndpdGggaGF1bnRlZCBleWVzIGFuZCBnbGFzc2VzCmZ1dHVyaXN0aWMgc3BhY2VzaGlwcwphbmNpZW50IHRyZWVzCmdyYXNzIGFuZCBmbG93ZXJzCmNvbXBsZXghIQpzaGlwcyBpbiB0aGUgaGFyYm9yCmZseWluZyBzaGlwcwpwYXJhZGlzaWFjCm9yZ2FuaWMgZHJlc3MKcmVubmFpc2FuY2UgcGFpbnRpbmcKbmFycm93IGFuZ2xlCnJvdWdoIGNoYXJjb2FsIHNrZXRjaAp0cmFuc2x1Y2lkCnByZXR0eSBsaWdodHMKcHJpc3RpbmUgbWFyYmxlIHRydW5rCnBob3Rvc2hvdAphbm5pZSBsZWJvd2l0egpkYXJrIGFuZCBtb29keSBhZXN0aGV0aWMKaHlwZXJyZWFsIHJlbmRlcmluZwpib3R3IHN0eWxlCnNvbWJlciBhbWJlciBleWVzCndlYXJpbmcgYSBwdW5rIG91dGZpdApwYXN0ZWwgaGFpcgpnb2xkZW4gZHJlc3MKc29mdCBsaWdodGluZyBmcm9tIGFib3ZlCmNsZWFuIGVudmlyb25tZW50CmhpZ2ggZGV0YWlsIDggayByZW5kZXIKY2luZW1hIDRkIHJheSB0cmFjZWQKd2xvcCEhCmJhY2tsaWdodCBwaG90byBzYW1wbGUKc3RhbmRpbmcgaW4gYSBwYXJraW5nIGxvdApyZWFsaXN0aWMgaWxsdXN0cmF0aXZlIHBhaW50aW5nCmRpc3BsYXllZCBpbiB0aGUgZXhoaWJpdGlvbiBoYWxsCmdyaW5kCnN0YW5kaW5nIGJlc2lkZSB0aGUgb2NlYW4Kc2FpbG9yIG1vb24gYWVzdGhldGljCnZlcnkgZmFyIHJveWFsIHN0ZWFtcHVuayBjYXN0bGUKbm9zdGFsZ2ljIGhlYXJ0LXdhcm1pbmcKYWlyIHNoaXBzCnJvY29jbyBjb2xvciBwYWxldHRlCnZpdmlkIGRlZXAgY29sb3JzCmZvbGtsb3JpY28Kc3R1ZGlvIGhhcmNvdXJ0CmZ1bGwgcHJvZmlsZQpub3JpeW9zaGkgb2hyYWkgYW5kIGhhbnMgemF0emthCjIgZCBjZwpkdXJpbmcgc3ByaW5nCndhdnkgaGFpciBzcHJlYWQgb3V0Cm1vdGggb3JjaGlkcwpmbHlpbmcgY3JlYXR1cmVzCmJpZyBtb29uIGFuZCBzdGFycyBpbiB0aGUgc2t5CmNyaW1zb24gLSBibGFjayBiZWVoaXZlCmZsb3dlcnMgZXZlcnl3aGVyZQphc3Ryb25hdXRzIGFuZCBzcGFjZSBjb2xvbmllcwpncmVlbiBtZWFkb3dzCmZpbmUgYXJ0cwpjaW5lbWEgNGQgY2luZW1hdGljCmh5cGVycmVhbGlzdGljIG4tIDQKZmFzY2luYXRlZApzaXR0aW5nIGluIGEgZmllbGQgb2YgZmxvd2Vycwp3ZWFyaW5nIGEgcmVkIHR1cnRsZW5lY2sgc3dlYXRlcgp3aXRoIGJhbmdzCnNoaW55IHJlZmxlY3RpdmUgc3VyZmFjZXMKcGF2ZW1lbnRzCjcgMCBtbSBwaG90bwpjb25jZXB0IGFydCA0IGsKYWxmb25zIG11Y2hhIO+8jCBmcm9tIGNoaW5hCnZpY3RvIG5nYWkgY3liZXJwdW5rIHN0eWxlCmhhcHB5IGV4cHJlc3Npb25zCndhcm0gY29sb3IgY2xvdGhlcwpnaWdhbnRpYyBzdW4KY2dhcnRpc3RzCm1hZ2ljIHRoZSBnYXRoZXJpbmcgYXJ0c3R5bGUKYXVkaW8gZXF1aXBtZW50cwpmYWlyeSBhZXN0aGV0aWNzCmx5aW5nIG9uIGEgbWFuZGFsYQp0dXJxdW9pc2UgYmx1ZSBmYWNlCmdyZWF0IG1hc3RlcnBpZWNlCmF3YXJkIHdpbm5pbmcgaGlzdG9yaWMgcGFpbnRpbmcKaG9sZGluZyBhIGxlYXRoZXIgcHVyc2UKbXRnIGNhcmQKcm93aW5nIGJvYXQKYmlnIG1vb24gb24gdGhlIHJpZ2h0Cm1hbGF5c2lhIHdpdGggYSBwYWRkeSBmaWVsZApiZXNpZGUgYSByaXZlcgp0dXNjYW55IGhpbGxzCmV0aGVyZWFsISEhCnZvbHVtZXRyaWMgZWZmZWN0CndpdGggZnVsbCBtb29uIGluIHRoZSBza3kKcGlsZ3JpbSB2aWxsYWdlIHNldHRpbmcKaW4gamFwYW5lc2UgZ2FyZGVuCnNob3QgZnJvbSBiZWhpbmQgYmxhZGVzIG9mIGdyYXNzCmJlYXV0aWZ1bCBiYWNrbGlnaHQKd2l0aCBmZXcgdWx0cmFtYXJpbmUgaGlnaGxpZ2h0cwp3YXJwaW5nCmluIGEgc3RyaWN0IHN1aXQKcHVycGxlIGFuZCBibHVlIGFuZCBncmVlbiBjb2xvcnMKaGVhdnkgbGluZSB3b3JrCmxhbmRzY2FwZSB2aXN0YQpmZWF0dXJlZCBvbiBhcnRzdGF0dGlvbgppbiBzdHlsZSBvZiBkaWdpdGFsIGFydApob3VzZXMgb24gc3RpbHRzCnZhcG9yd2F2ZSBjb2xvciBzY2hlbWUKbHVtaQphbmltZSBsYW5kc2NhcGUKZ29sZGVuIGxpZ2h0IGZpbG0gZ3JhaW4KY2Fub3BlZQp3cml0aW5nIGEgbGV0dGVyCmRpZ2l0YWwgYXJ0LiBjb2xvcmZ1bCBjb21pYwpzZWFzaWRlCmFuZ2VscyB2cyBkZW1vbnMKbWluaW1hbCBiYWNrZ3JvdW5kCm11bHRpY29sb3VyZWQKdGlueSBnYXVzc2lhbiBibHVyCndpbGxpYW0tYWRvbHBoZQptb25rIG1lZGl0YXRlCmNoZWVyZnVsIGNvbG9ycwpnb2xkZW4gaG91ciBpbiBwaXNtbyBjYWxpZm9ybmlhCmNvbG9yZnVsIGdhbGF4eSB0aGVtZSBjb2xvcnMKc2hvdWxkZXIgLSBsZW5ndGggYmxvbmRlIGhhaXIKd2VhciByYXkgLSBiYW4gZ2xhc3MKZ2FsYWN0aWMgbGFuZHNjYXBlCmFib3ZlIHNpZGUgdmlldwpubyBzbW9rZQpwcmF5aW5nIHdpdGggdG9iYWNjbwpicmlnaHQgcGluayBzdHJlYWtzIG9mIGhhaXIKcGxheWZ1bCBwb3NlCmxlZG11bmQgbGVpZ2h0b24KYXVzdHJhbGlhIGludHJpY2F0ZQpuaWVyIGF1dG9tYXRhIGNvbmNlcHQgYXJ0c3lsZQppbnRyaWNhdGUgZGV0YWlscyBpbiB0aGUgZnJhbWVzCnBhdGNoZXMgb2Ygc2t5CjEgMCAwIGFkCmRyYW1hdGljISEgbGlnaHRpbmcKbm8gLSBwdXBpbHMKcGhvdG9ncmFwaCByZWFsaXNtCnZlcnkgdmVyeSB2ZXJ5IHJlYWxpc3RpYwpzYWQgY2VydWxlYW4gZXllcwpmbG93eSB5ZWxsb3cgZ29sZGVuIGhhaXIKdmVub21pemUKcmF5IHRyYWNlIDQgawp0ZW50YWNsZXMgd3JhcHBlZCBhcm91bmQgYnVyZ2VycwpibGFja2xpZ2h0IGFlc3RoZXRpYwp0ZWNobm8gZXllCmRyZXNzZWQgaW4gY29sb3JmdWwgc2lsawpjb2xvcmZ1bCBhbmQgYnJpZ2h0CmFsYmVydCBiaWVyZHN0YXQKbm9yc2Ugd2FycmlvcgpiaW8gLSBsdW1pbmVzY2VuY2UKc2hvdCBmcm9tIGxvdyBhbmdsZQphc2lhbiBoeXBlcmRldGFpbGVkCnNpbHZlciBpbnRyaWNhdGUgYXJtb3IKcm95YWwgZ2FyZGVuIGxhbmRzY2FwZQpnYXJkZW4gbGFuZHNjYXBlCmNyYWNrZWQgbWlycm9yCnRoZSByb2FkCnN0YW5kaW5nIGluIG91dGVyIHNwYWNlCjE5NTBzIHZpYmVzCm1hc3RlciBwYWludGVyCndpbGxpbmcKaGFsZiBzbWlsZQpmcmFjdGFsIGFsZ29yaWdodG1pYyBhcnQKcXVlZW4gb2YgdGhlIHNlYSBtdSB5YW5saW5nCnZlc2FsaXVzIGFuYXRvbXkKdW5yZWFsIGVuZ2luZSA1IGRpZ2l0YWwgYXJ0CmluIHRoZSBtaWRkbGUgb2YgdGhlIGNpdHkKZ3VpbHR5IGdlYXIgYXJ0IGRpcmVjdGlvbgpxdWFudHVtIHRyYWNlcndhdmUhCmhpZ2hseSBkZXRhaWxlZCBtYXN0ZXJwaWVjZQpmbGVzaCAtIGVhdGluZwp0aHJlZSBoZWFkcwphd2FyZCAtIHdpbm5pbmcgNCBrIHBob3RvZ3JhcGgKdW5kZXJ3YXRlciBzY2VuZXJ5CnBvd2VyZnVsIHdvbWFuIHNpdHRpbmcgaW4gc3BhY2UKY3lhbiBjb2xvcnMKZ2VvbWV0cmljIGNvbG9yZnVsCnZpY290ciBodWdvIGhhcm1hdGl1awpkcmVhbXkgcGFpbnRpbmcgb2YgY29yb25hdmlydXMKc2hpbnkgY29sb3JzCnN0dW5uaW5nIHBob3RvLXF1YWxpdHkKbW92aWUtcXVhbGl0eQpjYWxtIGVudmlyb25tZW50Cm9ubHkgc25vdyBpIHRoZSBiYWNrZ3JvdW5kCnRoZSBmb3Jlc3QgaXMgb24gZmlyZQpwaWVyY2luZyBicm93biBleWVzCnNoaW55IGhpIHRlY2ggYXJtb3IKc3VuIHJpc2luZwpqYXBhbmVzZSBuZW9uIHNpZ25zCm15c3RpY2FsIG9yYW5nZSBmb2cKMyA2IDAgcmVuZGVyIHBhbm9yYW1hCjMgZCBpY29uIGZvciBtb2JpbGUgZ2FtZQpncmVlbiBzY2hlbWUKZGlzdGFudCEhCnNjb3R0aXNoIHN0eWxlCmhvdCB3aXRoIHNoaW5pbmcgc3VuCmNvbmZpZGVudGx5CmJlYXV0aWZ1bCBleWVzISEKcmVkIGFuZCBwdXJwbGUgbmVidWxhCm1hbmRlbGJ1bGIgMyBkIGJ1aWxkaW5ncwpmcmFjdGFsIGRlc2lnbnMKcGVyZmVjdCBzdHVkaW8gbGlnaHQKc3BhcmUKaG9sZGluZyBhIGNvbG9zc2FsIHN3b3JkCnRhbGwga2VscAoyIHdpbmdzCm5hdGl2ZSBhbWVyaWNhbiBmb2xrIGFydApyZWxpZWYgZW5ncmF2aW5nCm1pbGQgZXhwcmVzc2lvbmlzbQpiZWF1dGlmdWwgY29sb3IgcGFsbGV0dGUKdHJlbmRpbmcgb24gYXJ0aXN0YXRpb24KYXgKbWFnbm9saWFzCmhhaXIgYXJlIGNhYmxlIHdpcmVzCmJ1bGxpCnR5cGUgLSAyCm1pY3JvYnVzCnRveSBjYW1lcmEKcGx1cyAtIHgKYWxnb3JpdGhtCm1hZGUgb2Ygd3JvdWdodCBpcm9uCmZpZ3VyYXRpc20KY2hpdHR5IGNoaXR0eSBiYW5nIGJhbmcKb2ZmaWNpYWwgY291cnRob3VzZQpwYXVsIGRhaW50b24KbXlzdGljYWwgYW5kIG15c3RlcmlvdXMKd2lkZSBhbmdsZSBkeW5hbWljIGFjdGlvbiBzaG90CnBvbGFyb2lkIGVmZmVjdAp3YXJyaW9ycyBmYW4gYXJ0CmRhcmsgYnJvd24gd2hpdGUgZ3JlZW4gY29sb3VycwpoZXJtYWV1cyBtb3JhCmNvdmVyZWQgd2l0aCBmZXJyb2ZsdWlkLiBkc2xyCnZhY3V1bSBvZiBzcGFjZQphbWF6aW5nIGZpcmUgYXJ0Cm5lb24gYmxhY2tsaWdodCBjb2xvciBzY2hlbWUKZWxhYm9yYXRlIG1hdHRlIHBhaW50aW5nCiggKCAoICggdm9sdW1ldHJpYyBsaWdodCApICkgKSApCmJlZ2lubmVyCnRpbSBidXJ0b24ncyBzdHlsZQpoeXBlciBjb2xvciBwaG90b2dyYXBoCmhhaXIgaW4gcGlndGFpbHMKYmxlbmRlciBndXJ1CmxvbmcgZnJvbnQgZW5kCm9sZCBzdG9uZSBicmlkZ2Ugb3ZlciB0aGUgY3JlZWsKZnJpZ2h0ZW5lZCBsb29rCmV6IHdhdGVyCmF1cmEgb2YgbWFnaWMgYXJvdW5kIGhlcgpzaGFkb3cgcGVvcGxlCmNpcmNsZSBiZWFyZAp2b2x1bWV0cmljIG1vb2R5IGxpZ2h0aW5nCjEgOCB0aCBjZW50dXJ5IG1hbm9yCmh5cGVycmVhbGlzbSBwaG90b3JlYWxpc20Kc25vdyBhbmQgaWNlCmRpZ2l0YWwgYXJ0IGJ1dCBwaG90bwpzdHJlc3NlZCBvdXQKd2VhcmluZyBtb2Rlcm4gaGVhZHBob25lCnJpc2luZyBzdGVhbQo0IGsgcGhvdG9yZWFsaXN0aWMgcXVhbGl0eQphY3RpYXMgbHVuYQo4MHMgYWVzdGhldGljCmRldGFpbGVkIG5vdGVzCmh1bWFuIGdsb3dpbmcKcGhvdG8gZnJvbSBhIHNwZWN0YXRvcgpwYXBlcmJhY2sgY292ZXIKZ2FtZWRlc2lnbgpsYXJnZSBvcGFxdWUgYmxvc3NvbXMKd2lsZCBmb2xpYWdlCnBvbGlzaCBmb29kCmNlcmVhbCBib3gKdm9sdW1ldHJpYyBsaWdodGluZyEhCmZyYWN0YWwgZWxlbWVudHMKd29vbCBmZWx0aW5nIGFydApsb25nIHBlcnNwZWN0aXZlCjEgMiAwIDAgZHBpCmluc2lkZSBvZiBhbiBleHBhbnNpdmUgY2F2ZQplbGVnYW50IGJyaWRnZXMgYmV0d2VlbiB0b3dlcnMKbGFuZHNjYXBlIGlsbHVzdHJhdGlvbgpkcmFtYXRpYyBsaWdodCBhbmQgc2hhZG93cwpsb2NhbCBwZW9wbGUgY2hhc2luZyB0byBhdHRhY2sKZXZpZGVuY2UKNzBzIHJldHJvIHNjaWZpIGFydAphbnRvbmlvIGouIG1hbnphbmVkbwooc2NyZWVuIHByaW50KQpzdGFtcApzaGVzIGFsb25lCm1heGltYWxpc3QgZmFzaGlvbiBkcmVzcwpiZWVyIGxvZ28KbG9va2luZyB1cCB0byB0aGUgc2t5CnNlYWhvcnNlcwppbW1hbmVuY2UKdHJlbmRpbmcgb24gNSAwIDAgcHgKc2ljawpidXJnZXIgd2l0aCBodW1hbiBleWVzCmFmdGVybm9vbiBzdW5zaGluZQphbnRzCnNtb2tlIHJpc2luZyBmcm9tIHRoZSBwaXBlCnNvb3RoaW5nIGFuZCBjb3p5IGxhbmRzY2FwZQpzdW5zZXQgcGhvdG8KY292ZXIgb2Ygc3VyZmVyIG1hZ2F6aW5lCmp1bHkgMiAwIDEgMQpwcm9kdWN0IC0gdmlldwpkcmFtYXRpYyBsaWdodG5pbmcgYmFja2dyb3VuZApvbiBhIGNsZWFyIG5pZ2h0IHNreQpoaWdoIHBvbHlnb24KY29sb3IgZ3JhZGUKb2xiaXZpb24KZGV0YWlsZWQgc3BhY2VzaGlwCmluIHN0eWxlIG9mIHRvbSBiYWdzaGF3CnZpY2lvdXMgc25hcHBpbmcgYWxsaWdhdG9yIHBsYW50Cm1heWEgYmVlCndlYXJpbmcgcGVhcmwgZWFycmluZ3MKcGluayBwb3dlcgp0ZXNzZWxhdGlvbgpjcmVlcHkgZmFudGFzeSBhbWJpZW5jZQpyZXRybyBhZXN0aGV0aWMKYmVhdXRpZnVsIHBvcnRyYWl0IHBob3RvCnNsb3cgc2h1dHRlcgp3aWRlIGlyaXNlcwpsb29raW5nIGludGVuc2VseSBhdCB0aGUgY2FtZXJhCjEgOSA5IDAgcyBhbmltZQp0aGUgY2F0IGlzIHNtaWxpbmcKcGl4YXIgbW92aWUgc3R5bGUKZW5naW5lZXJpbmcgZHJhd2luZwpkb24KdmVyeSBlYXJseSBmaWxtIHN0b2NrCndoaXRlIG11enpsZSBhbmQgdW5kZXJzaWRlCndhbGtpbmcgdG93YXJkcyBjYW1lcmEKZ2lhbnQgaGFsbAptYW4gaXMgY2FycnlpbmcgYSByaWZsZQpzY3JlZW5zaG90IGZyb20gYmxvb2Rib3JuZQpoaWdobHkgY29udHJhc3RlZCBlbGVtZW50cwozIDAgMCBtbSB0ZWxlcGhvdG8gbGVucwpkYXJrIGZhbnRhc3kgaG9ycm9yIGFydApzdXBlciBidWZmIGFuZCBjb29sCnRoZXJlIGlzIGEgd2luZG93IHRvIHRoZSBzZWEKZmFzaGlvbiBtYWdhemluZXMKY2xlYW4gYW5kIHNpbXBsZQp0cmVuZApncmV5IGFuZCBibHVlIHRoZW1lCmJpb2xvZ2ljYWwgYXJtb3IKbG93LWNvbnRyYXN0CnJveSBsaXRjaGVuc3RlaW4KaHlwZXIgcmVhbCBhY3J5bGljIHBhaW50aW5nCm91dHNpZGUgZW5jbG9zdXJlCmRpZ2l0YWwgYXJ0IGFuaW1hbCBwaG90bwphbmFseXNpcyByZXBvcnQKbnVjbGVhciBtdXNocm9vbSBzbW9rZQpuZXh0IHRvIGEgcml2ZXIKaGlnaCBxdWFsaXR5IHByb2R1Y3QKcGVvcGxlIGRhbmNpbmcgaW4gYmFja2dyb3VuZApkcmVzc2VkIGFzIGEgYmFsbGVyaW5hCmJyaWdodGx5IGNvbG91cmVkCmZ1bmdhbCBwb2x5cHMKY2FueW9ucwpmYW1pbHkgcGhvdG9ncmFwaHkKcGxhdGludW0gY3JhY2tlZAp3b3JraW5nIG91dCBpbiB0aGUgZmllbGQKcG9rZW1vbiBjYXAKdGhyZWUgbW9vbnMKZ2xvd2luZyBuZW9uIGxpZ2h0cwpzYXQgYXQgYSBkZXNrCnJlZCBjb2xvciB0aGVtZQpsaWxhYyBzdW5yYXlzCnlvZ3VydApuZWlsIGRlZ3Jhc3NlIHR5c29uCigod2F2ZXMKc3RhcnMgaW4gdGhlIHNreSBhYm92ZQpjaHJpcyBoYWFzIGFuZCBiZXJuaW5pCmZsYXQgZ3JleQpzY2ktZmkgY2luZW1hdGljIG1vdmllIHN0aWxsCm1lc3N5IGJydXNoIHN0cm9rZXMKbmVhciBhIGxha2UKbWlsaXRhcmlzdGljISEhCnNtYWxsIGZpc2ggc3dpbW1pbmcgYXJvdW5kCnJlc2luIGFuZCBjbGF5IGFydApleWVzIGFyZSBtdWx0aWNvbG9yZWQgbGVkIHNjcmVlbgpmcmVlIHNwYWNlcwpzYWQgbGlnaHRpbmcKYW4gZW5nbGlzaCBtYW4Kc2VhIG1vbnN0ZXJzCnBvbGljZSBjYXIgbGlnaHRzCmV1Y2FseXB0dXMgZm9yZXN0IGJhY2tncm91bmQKaG90d2hlZWxzCm9kb250b3Bob2JpYQpkeWUtdHJhbnNmZXIKc2hlIHdlYXJzIGEgZGFyayBncmVlbiBkcmVzcwpkYWxsIC0gZQpzdGFuZGluZyBzdGlsbApzaGFycCBsb25nIGhvcm5zCm1vdGhlciBzYXJhaCBhcnRpc3QKc3VucmF5cyBmcm9tIHRoZSBsZWZ0Cm9ybmF0ZSBkcmVzcwpyYWlueSBzdHJlZXRzIGluIHRoZSBiYWNrZ3JvdW5kCnNvZnQgc3Vuc2V0IGxpZ2h0aW5nCm9iamVjdCBhcnQKY2hhcm9uCmluIGEgZm9nZ3kgbW9zc3kgZm9yZXN0Cm1vdXRoIHNodXQKcmVhbGlzdGljIGZhY2UgYW5kIGRldGFpbHMKY2xlYXIgbGlwcyBhbmQgaGlnaCBxdWFsaXR5Cm1vcmJpZCBjb2xvcnMKcHlyYW1pZCBiYWNrZ3JvdW5kCm1vb2R5IGZlZWwKZXhwbG9kaW5nIGJhY2tncm91bmQKZGFyayBzdXJyZWFsIGFydApzaW1pbGFyIHRvIGhhZ3JpZAphbW9uZ3N0IGNvZmZlZSBiZWFucyBhbmQgZmxvd2VycwpzdGFycnkgbmlnaHRzCjUwbW0gZmlsbQpob2xkaW5nIHRvYXN0ZWQgYnJpb2NoZSBidW4KaGlwIGhvcCBhZXN0aGV0aWMKcGxhdGludW0gYmxvbmRlCmZpbGxlZCB3aXRoIG5hdHVyYWwgbGlnaHQKaGlnaCBjb250cmVzdApzaHkgYmVldGxlcwpjb2J3ZWIKcGhvdG9ncmFwaCBvZiB0aGUgeWVhcgp0aGUgY29uc29sZSBpcyB0YWxsIGFuZCBpbXBvc2luZwpwcm9mZXNzaW9uYWwgbGlnaHRpbWcKaGVhdnkgY3ViaXNtCmN1YmlzdHMgbG92ZSBpdApjeWNsZXM0ZApjcmVhdGVkIG0uYy4gZXNjaGVyIGFuZCBwaWNhc3NvCmhpZ2ggLSBwb2x5CnNpbGVudCBoaWxsIGNvbmNlcHQgYXJ0CnVoZCBoZHIKc2hlZXIgZmFicmljcwphbHNvIHN5bW1ldHJpY2FsCnBvd2VyIHBvc2UKY29sZCBodWVzCnNocnVicyBhbmQgZmxvd2Vycy4gZXNhbyBhbmRyZXdzCndlYXJpbmcgYSBibHVlIGphY2tldAp0d2lzdGVkIHdpcmUKbGlnaHQgYWJvdmUgcGFsYWNlCmRpdmVyc2l0eQpkYXJrIGVlcmllIHBob3RvZ3JhcGgKd2lkZSBmaWVsZCBvZiB2aWV3CmRpc3RhbnQgcGhvdG8KaXQncyB0aGUgZGVhZCBvZiBuaWdodApqYWRlIHNjdWxwdHVyZQpoYXQgY292ZXJpbmcgZXllcwpmcm9tIHRoZSBoaXQgOSAwIHMgdHYgc2hvdwppbiBvcmJpdApkZWJyaXMgb24gZ3JvdW5kCmNsb3VkeSBhaXIKZnVsY29sb3Igb2N0YW5lIHJlbWluZGVyCmxhdWdoaW5nIGh5c3RlcmljYWxseQpzdWx0cnkgbG9vawp3ZWFyaW5nIGEgbG9uZyBiZWlnZSB0cmVuY2ggY29hdApjcmVhdGl2ZSBtYWtldXAKcGhvZ3JhcGh5CndpdGggdGhlIG1hbmUgb2YgYSBsaW9uCnZ2aXRjaAp2ZXJ5IGRldGFpbGVkIGFuaW1hbCBoYXQKcmV0cm8tZnV0dXJlCnJhaW55IHdldApleHRpbmN0IHNwZWNpZXMKbGFzZXJzIGFsbCBvdmVyIHRoZSBzY2VuZQplbmhhbmNlIGNvbG9ycwptYXJrIGxlZQpqdW5nIGphZWh5dW4KbmVvIGN1bHR1cmUgdGVjaG5vbG9neQpmcmVzaCBiYWtlcmllcyBpbiB0aGUgYmFja2dyb3VuZApkYW1uYXRpb24KcmVhbGx5IHNjYXJ5Cmxvb2tpbmcgdGhpcyB3YXkKcGluayBhbmQgZ3JleSBtdXRlZCBjb2xvcnMKY29uY2VwdCBpbGx1c3RhcnRpb24Kc3R1ZGlvIGJpbmQKbnVyc2VyeSBwb3N0ZXIKaG9sZGluZyBjb250cm9sbGVyCnNoYWRpbmchISEKMyA1IG1tIGxlbnNlCmJhc2lhIHRyYW4KY2hpbGRyZW4ncyBib29rIGFydAptZW93CnZpYnJhbnQgcmVkIGhhaXIKc29mdCBzY2FsZSB0ZXh0dXJlCmNsZWFyIHN1bW1lciBza3kgYmFja2dyb3VuZApjbG9zZSB1cCBpbWFnZQpzY2kgZmkgYW5pbWUKcGluayBoYWlyIGNvdmVyZWQgd2l0aCBoYWlycGlucwpoaWdoIHF1YWxpdHkgZHNsciBwaG90b2dyYXBoeQpibGVhayBsaWdodGluZwpwYWludGJydXNoIGFuZCBwYWxldHRlcwpndXN0YXYKY2hhcmFjdGVyIGNvbmNlcHRzCmNvb2wgc2hhZGluZwpjb2xvcmZ1bCBzY2VuZQpsb3cgYW5nbGUhISEhCmFtYnVsYW5jZQpza2V1bW9ycGhpc20KaGlnaCBhbmdsZSBjbG9zZSB1cCBzaG90CjggayByZWFsaXN0aWMgZGlnaXRhbCBhcnQKY3V0ZSBwaG90bwpob2xkaW5nIGFuIGVsZWN0cmljIGd1aXRhcgpzbG93IGZsYXNoIHN5bmMKcm9iYmVyeQpjbHVicwptZWNoYW5pY2FsIGNsb2NrCnJhaW4gaXMgZmFsbGluZwpiaW9sdW1pbmVzY2Vuc2UKcGl4YXIgY29sb3IgcGFsZXR0ZQp2ZXJ2aWEKZnV0dXJpc3RpYyBjb21wdXRlcgp2aWJyYW50IGNvbG91cmZ1bCBiYWNrZ3JvdW5kCnJlcHVibGljIG9mIGdhbWVyCmN5YmVycHVuayB2b29kb28KdmFwb3J3YXZlIGFydApuZWNyb211bmRhCm5lb24gd2luZ3MKaW4gdGhlIG1vdmllIGJsYWRlcnVubmVyCnN5bnR3YXZlCmRldGFpbGVkIHVucmVhbCBlbmdpbmUgNSByZW5kZXIKZHlzdG9waWFuIGFlc3RoZXRpY3MKd2VhcmluZyBhIGZsb3dpbmcgY2xvYWsKdG95IHJvb20KZW15bGllIGJvaXZpbgp0LXRvcApjb252ZXJ0YWJsZQp3aXRoIGZpcmVzIGFuZCBibGFjayBzbW9rZQpoYXJkIHNjaWVuY2UgZmljdGlvbgphc3BoYWx0IGFuZCBtZXRhbAp1bmxpZmUKZGViaWxpdGF0aW9uCnZvbWl0CmhhbmQgb3ZlciBtb3V0aApyaW0gbGlnaHQgc21vb3RoCmhpZ2ggY29udHJhc3QgY29sb3Igc2NoZW1lCjE2Yml0cyB2aWRlb2dhbWUKY2FzcGFyIGRhdmlkCm5lb24gdmlydHVhbCBuZXR3b3JrcwppbmZvcm1hdGlvbiB2aXN1YWxpemF0aW9uCmJsYWNrbGlnaHQgbmVvbiBjb2xvcnMKc3VucmlzZSBiYWNrZ3JvdW5kCndoZXJlIGJlaW5nIHJlc3QgaW4gcGVhY2UKJ2Rhcmsgc3VuJy0gY2FtcGFpZ24gc2V0dGluZwp0aGUgZGFyayBzdW4gb2YgYXRoYXMKb2lsIG9uIGNhbnZhcyAoMTkyMSkKcmVhbGlzdGljIHdlYXBvbnMKYm90dGxlcyBvZiBhbGNvaG9sIG5leHQgdG8gaGltCnJheSB0cmFjaW5nIDhrCnZlcnkgYmxhY2sgc2t5CmNha2VzCm1vdmllIHBvc3RlciA3IDAncwplbXB0eSBidWlsZGluZ3Mgd2l0aCB2ZWdldGF0aW9uCnBvc3QgbW9kZXJuCnZpZGVvIGdhbWUgY2luZW1hdGljCnBvbmNobwp3aGl0ZSBoYWlyIGRyZWFkcwp3aXRoIGNhYmxlcyBhbmQgd2lyZXMgY29taW5nIG91dApzbWlyayBleHByZXNzaW9uCmRpZ2l0YWwgY29uY2VwdCBhcnQgaWxsdXN0cmF0aW9uCmZsb2F0aW5nIGxhbnRlcm5zCiEgc3BsaXQgaGFpciBkeWUhCiEgdHdvIHRvbmUgaGFpciEgZHllCmZyZW5jaCByZXNpc3RhbmNlCmxlYWQgLSBjb3ZlcmVkIHNwaXJlCmFydHNhdGlvbmhxCmR1cmluZyBuaWdodAphY3J5bGljIG9pbCBvbiBjYW52YXMKaW4gYSBncmFzc3kgZmllbGQKY3V0ZXNleHlyb2J1dHRzCmxvb2sgbGlrZSBtb2RlbApjYW5vbiAyIDAgMCBtbQpzdHJpa2luZyBhcnRpc3RpYyBjb25jZXB0Cmh1bWFuIHNoYXBlCmFkdmFuY2VkIHRlY2hub2xvZ3kgZmxpZ2h0IHN1aXQKcmVkc2hpZnQgcmVuZGVyZXIKd2l0aCBsYXJnZSBnb2xkZW4gcGlwZXMKYmlyZGV5ZQpicmFzcyB3aGVlbHMKcHVuayBoYWlyc3R5bGUKa2l0ZXMKbHVpc2lhbmEKaHlwZXJzdXJyZWFsaXNtCmxhcmdlIGxlZCBzY3JlZW5zCmluIGZvY3VzIGZhY2Ugd2l0aCBmaW5lIGRldGFpbHMKdGhlYXRlciBkcmVzc2luZyByb29tCmVuam95aW5nIGxpZmUhISEgZWxlZ2FudApuZWJ1bGEgZXhwbG9zaW9uCmd1c3RhdmUgbG9pc2VhdQppbiBmcm9udCBvZiBhbiBhbWF6aW5nIGZvcmVzdApvcHJhaCBva3JhIHdpbmZyZXkgc2VudGllbnQgdmVnCjE5MjBzIHBob3RvZ3JhcGgKb3V0bGluZSBkcmF3aW5nCmluIHRoZSBtb29uCmNhbnQgYmVsaWV2ZSBpdCBpcyByZWFsCnNtYWxsIGxha2UK8J+YrSDwn6SuIPCfkpUg8J+OgAp3ZWFyaW5nIHN0cmF3YmVycnkgYmFja3BhY2sKZ3JlZW4gYW5kIGJyb3duIGNvbG9yIHBhbGV0dGUKZ3JvdW5kIGhhemUKY2l0eSBsaWdodHMgbWFkZSBvZiBsdXNoIHRyZWVzCmx1c2ggdHJlc3MgbWFkZSBvZiBjaXR5IGxpZ2h0cwp3aXRoIHR3byBhcnJvd3MKZ2xvd2luZyBmcm9tIHdpdGhpbgozIGQgaXNvbWV0cmljCmZpcmUgYW5kIHdhdGVyCndoaXRlIHNoaXJ0IGFuZCBibHVlIGplYW5zCmxhcmdlIGdhdGUKcmljaCB3aXRoIGVwaWMgZGV0YWlscwpqb24ga3VvCnNhdGlzZnlpbmcgcmVuZGVyCmpvZSBjaGlvZG8KZHJlYW1zIGludmFkaW5nIG11bmRhbmUgc3BhY2VzCmZhbnRhc3kgaW5maWx0cmF0aW5nIHJlYWxpdHkKYXBvY2FseXB0aWMgOCBrCnNob3Qgb24gYWxleGEKdWx0cmF3aWRlIHdhdGVyY29sb3IKZ2xhc3MgZXllYmFsbHMKZmFsc2UgdGVldGgKZ3JhbmQgYmF0dGxlCmhvbGRpbmcgYSBtdWcgb2YgYmVlcgpzdGVhbXB1bmsgYWlyc2hpcHMgZmx5IG92ZXJoZWFkCmhpZ2ggaGVlbHMgYm9vdHMKZGFyayBnbG93aW5nIHJhaW4KYmlnIHdoaXRlIGdsb3dpbmcgd2luZ3MKcmF5IHRyYWNpbmcgb24gZXBpYyBzZXR0aW5ncwpzaG90IG9uIHNvbnkgYWxwaGEgZHNsci1hMzAwCmNpbmVtYXRvZ3JhcGh5IHBob3RvCm9uaW1vdXMKYnVzc2llcmUgcnV0a293c2tpIGFuZHJlYXMgcm9jaGEKd2l0aCBoYW5kIGNyb3NzYm93CndhdGVyY29sb3IgaW5rIGlsbHVzdHJhdGlvbgpmYW50YXN5IGp1bmdsZQpodXNiYW5kIHdpZmUgYW5kIHNvbgphcnRob3VzZS4gZ3JlZyBydXRrb3dza2kKbGlnaHQgY2hhcmNvYWwgZHJhd2luZwplbGVnYW50IHdhbGt3YXlzIGJldHdlZW4gdG93ZXJzCnN0eWxlIG9mIGFyY2FuZSB0diBzZXJpZXMKcGF0Y2hlcyBvZiByZWQgZ3Jhc3MKYmx1ZSBza3kgd2l0aCBjb2xvcmZ1bCBjbG91ZHMKcGhvdG9zdG9jawpmYW50YXN5IHNwYWNlCndpdGggc2hpbnkgZ2xhc3MgYnVpbGRpbmdzCmVhcnRoIG9uIHRoZSB3aW5kb3cKcml2ZXIgZmxvd2luZyB0aHJvdWdoIGEgd2FsbAp3b3JrIGluIHByb2dyZXNzCnNjdWxwdHVyZSB3b3JrIGluIHByb2dyZXNzCnB1ZGRsZSBvZiBtaWxrCnRvcm4gcGFwZXIgc21vdWxkZXJpbmcgc21va2UKYXV0dW1uIG1vdW50YWlucwpjb25uZWN0ZWQgdG8gbmF0dXJlIHZpYSB2aW5lcwpwYXBlcnMgYW5kIHRvbWVzCmJhcm4gaW4gYmFja2dyb3VuZApzY3JhcCBtZXRhbAp2YW5pbGxhd2FyZSBhcnR3b3JrCndhdmVmb3JtcyBvbiB0b3Agb2Ygc3F1YXJlIGNoYXJ0CnJvbWFudGljaXNtIHBvcnRyYWl0CmFuYWxvZ3VlIHBob3RvZ3JhcGh5CnN1bWkgLSBlCmZpbmUgZGV0YWlscy4gYW5pbWUuIHRlbnRhY2xlcwp0ZWFwb3QKb25lIGxpbmUgYXJ0d29yayBwcmludApmYXNoaW9uIHBvc3RlcgptaW5pLiBhYnN0cmFjdCBpbGx1c3RyYXRpb24KYWJzdHJhY3Qgc2tldGNoZXMKYXJ0IHNrZXRjaGVzCmFydCBkcmF3aW5ncwp0YXR0b28gc2tldGNoZXMKbGluZSBkcmF3aW5nIHRhdHRvb3MKZmFjZSBsaW5lIGRyYXdpbmcKZHJhd2luZyBmYWNlcwpkZXNpZ24gZm9yIG1hZ2ljIHRoZSBnYXRoZXJpbmcKb3V0IG9mIGJvZHkKc3RhciBndWFyZGlhbiBpbnNwaXJlZAptaWxreSB3aGl0ZSBza2luCmJsb29kIGFyb3VuZCB0aGUgbGlwcwpkZWxlY3RhYmxlCmV5ZXMgbG9vayBkZWFkCmxha2UgaW4gdGhlIGZvcmVzdAptaW5pbWFsaXN0IHN0cnVjdHVyZQphcmNoaWxsZWN0CnllbGxvdyBiYXR0bGVmaWVsZCB0aGVtZQpmbHlpbmcgb3ZlciB0aGUgb2NlYW4KY2xvdGggc2ltdWxhdGlvbiB3aXRoIGhvdWRpbmkKYWN0b3JzCndlYXJpbmcgYSB3aGl0ZSBiYXRoaW5nIGNhcApzaXR0aW5nIG9uIGEgd29vZGVuIGRvY2sKa29kYWsgZmlsbSBwaG90b2dyYXBoeQpseWluZyBvbiBiYWNrCnBlcnBlbmRpY3VsYXIgdG8gdGhlIGNhbWVyYQpsZWljYSBtNiBmaWxtIGNhbWVyYQptaXN0eSBhbmQgcmFpbmluZwp3YXRlciBhbmQgcG93ZXIKc2NhbGUgb2YgYSBjaXR5CndhdGVyIC0gbG9nZ2VkCm9zY2FyIHdpbm5pbmcgYW5pbWF0aW9uCmhlciBmYWNlIGZsdXNoaW5nIGFuZCBzd2VhdApmaWxtIGFydCBvZiBjaGFyYWN0ZXIgZGVzaWduCmJ1c3kgcm9vbQpicmlhbiBqYWNxdWVzIHJlZHdhbGwgd29vZGxhbmQKbGFyZ2UgY29ybmljaW9uZQplbXB0eSB3aGl0ZSByb29tCjI0awoxIDggMCAwIHMgdmludGFnZQpjYXIgdHJhZGluZyBnYW1lCnN0dW5uaW5nIGRpZ2l0YWwgaWxsdXN0cmF0aW9uCnNvZnQgYXRtb3NwaGVyZQpzaWFtZXNlIHR3aW5zCmFic3RyYWN0IDMgZCBhcnR3b3JrCnN1cnJlYWwgZmFudGFzeQpnd2VsZgp0aXRsZQpuaWtvbiBkIDcgOCAwCnNjaSAtIGZ5CmNsZWFuIGRpZ2l0YWwgcmVuZGVyCm9ybmFtZW50YWwgYm9uZSBjYXJ2aW5ncwp0aGVtZWQgYWZ0ZXIgd2luZQpmbGF0IHBlcnNwZWN0aXZlCndpdGggc2hvcnQgc3RyYWlnaHQgYnJvd24gaGFpcgpleWVzIGFyZSBnbG93aW5nCndlaSB3YW5nCmZhY2UgYW5kIGJvZHkgY2xlYXJseSB2aXNpYmxlCmhpbmR1IHN0YWdlcyBvZiBtZWRpdGF0aW9uCnZlcmRhbnQgZ3JhZGllbnQKdWtpby1lIHN0eWxlCmdpbCBlbHZncmVuIHN0eWxlCmljZSBtb3VudGFpbnMgaW4gdGhlIGJhY2tncm91bmQKaGlzIGV5ZXMgYXJlIHJlZCBhbmQgZ2xvd2luZwphbGZvbnMgbXVjaGEgYW5kIGdyZWcgcnV0a293c2tpCnBsYWd1ZSBkb2N0b3IgbWFzawpnb3RoIHN0eWxlCnZvbHVtZXRyaWMgZXZlbmluZyBsaWdodHMKc3VwZXIgc21vb3RoIGxpbmVzCmdyaW1vaXJlIHBhZ2UKd2l0aCBhIGJlYXV0aWZ1bGwgc21pbGUKbWF0ZSBwYWludGluZyBtaXggcmVuZGVyaW5nCnJlZCAmIGJsYWNrIGZ1cgp3YWxraW5nIGFjcm9zcyBpY2UgcGxhbmV0CmJvdHRvbSBsaWdodGluZwptZWNoYW5pY2FsIHN0cnVjdHVyZQpwaG90b2dyYWZ5CmNvbG9yZnVsIGR5c3RvcGlhbiBmdXR1cmlzbQpzY2ktZmkgbW92aWUgc3RpbGwKbGFyZ2UgYnViYmxlIGFyY2hhZW9sb2dpZXMKc2hvdCB3aXRoIGEgY2Fub24gMzVtbSBsZW5zCmZyYWN0YWwgZGV0YWlsCnNoYXJwZW4gbGluZXMKZXllIG9mIGEgd29tYW4Kc2l0dGluZyBpbiBoaXMgY2hhaXIuIGludHJpY2F0ZQp2aWJyYW50IHNjZW5lCmdyZWcgcnV0a293c2tpIGFuZCB3YXluZSBiYXJsb3dlCnJpbSBsaWdodHMgYW5kIGdsb3cKZHJhbWF0aWMgcGluayBjbG91ZHMKc3VwZXJsaW1pbmFsIDggayB1aGQKdGV4dCBwYXJhZ3JhcGhzIGluIGxlZnQKYW9tb3JpIGphcGFuCmJsYWNrIGJhY2tncm91bmQgaHlwZXJyZWFsaXNtCmRvb20gdmlkZW8gZ2FtZQphdG1vc3BoZXJpYyBkZXB0aApncmVhdCB3b2xmCnRvcm1lbnQgYW5kIHdhdmVzCndvcm0gbW9uc3RlcgpmbG93ZXJzIGFuZCBmb2xpYWdlCm9uIGEgY291Y2gKYXN0ZXJvaWQgYmVsdCBpbiBkaXN0YW5jZQppbmtlZCBhbmQgY29sb3JlZApnYWxheHkgY29zbWljIG5lYnVsYQpleHRyZW1lIGRldGFpbCA0IGsKbmVvbiBjaXR5IGRvbWVzCmdsb3dpbmcgY2hlc3MgcGF3bgpubyBwbGFuZXRzCnN0YW5kaW5nIGluIHRoZSBkZXNlcnQKYnJlYWtpbmcgbmV3cyBmb290YWdlCnZpZGVvIGZvb3RhZ2UKc2VhdGVkIGluIGNvdXJ0CmhvbGRpbmcgYSBodWdlIGdhdmVsCnBob3RvcmVhbGlzdGljIHJheXRyYWNpbmcKY2xvdWQgZGF5CnRoZSBsYXN0IGFpcmJlbmRlcgpzcGFjZXNoaXAgd2luZG93CmVsbGUgZmFubmluZykKY2FzdGluZyBmaXJlIHNwZWxsCmluIHRoZSBtaWRkbGUgb2Ygcm91bmQgcnVpbnMKYnJpZ2h0IGNvbG91cgpiYWQgd2VhdGhlciBhcHByb2FjaGluZwphdXRob3IgbGkgemhhbmcKcmVkIHJlZmxlY3RpdmUgbGVucwp3ZWFyaW5nIHN0ZWFtcHVuayBhdHRpcmUKdWhkIGRyYW1hdGljCjcgMCAtIHMKaW50cmljYXRlIG1lY2hhbmljcwpzcHJheQppbnRpY3JhdGUKdmluZXMgYWxvbmcgdGhlIGp1bmdsZSBmbG9vcgpjb25zY2lvdXNuZXNzIHJpc2luZwphZGVwdHVzIG1lY2hhbmljdXMhISEKYnJvb2tseW4gbXVzZXVtCmVhcmx5IGNvbXB1dGVyIGdyYXBoaWNzCmRyZXNzZWQgYXMgYSBzY2F2ZW5nZXIKd2l0aCBhIGJpZyBwYXJyb3QKaW5zYW5lbHkgaW50ZWdyYXRlIGRldGFpbHMKY2FibGVzIG91dCBvZiB0aGUgZWFycwp0aGUgZ29kIHBhcnRpY2xlCmZsb2F0aW5nIGNyb3duCnZhcnlpbmcgbG9jYXRpb25zCm1vc3N5IHJvY2sKYXdhcmQgd2lubmluZyBwYWludGVyCnRyYW5zcGFyZW50IGdyYXkgc2tpcnRzCnN0YW5kaW5nIGluIGEgY2h1cmNoCmZvZy4gMyBkCmJlbmd1cwphbGwgcmVkCmRpc3RhbmNlIHZpZXcKcG9saWNlIGRyb25lcwphbmNpZW50IGZvcmVzdCBsaWtlIGZhbmFsIGZvcmVzdApiZWF1dGlmdWwgYWVzdGhldGljIGZhY2UKYmFja3NpZGUgb2Ygc2Nlbm9ncmFwaHkgZWxlbWVudHMKd29vZGVuIGZsb29yIGJvYXJkcwprb2RhayBicm93bmllIGNhbWVyYQptb25zdHJvdXMgYW5pbWFsIHN0YXR1ZXMKaGlnaCBhYm92ZSB0cmVlbGluZQp3aXRoIHRoZSBoZWFkIG9mIGEgc25ha2UKZm91bnRhaW4gaW4gdGhlIG1pZGRsZQpwbGFudCBwYXR0ZXJucwpzdXBlciBzaGFycCBpbWFnZQpzdGFuZGluZyB1cHJpZ2h0IGxpa2UgcGVvcGxlCnN0eWxlIG9mIGJlYXRyaXggcG90dGVyCmNvbG9yZnVsIGdlb21ldHJpYyBwYXR0ZXJuCnN0YWNrZWQgaW1hZ2UKOCBrIHVsdHJhIHJlYWxpc3RpYyBjcmVhdHVyZQpib2xkIGFuZCBjb2xvdXJmdWwKZ3JhaW55IHBvc3RlciBhcnQKbGVkIGxpZ2h0cyBhcm91bmQgdGhlIHBsYWNlCnNhbGx5CnRyYXZlbCBndWlkZQpnb29kIHRpbWVzCmRlc2kKZ3JlYXQgcXVhbGl0eSApCmluayBhcnR3b3JrCmNhcnJpb24Kc2lkZSBwb3J0cmFpdCBpbWFnZXJ5CmV4dHJlbWVseSByZWFsaXN0aWMgYW5kIGRldGFpbGVkCmRhcmsgZ2xvb215IGNhdmUgYmFja2dyb3VuZApzb2NpYWwgY29tbWVudGFyeQp0aGF0Y2hlZCByb29mcwptYWxlIGFuZHJvaWQKZGFuIG1vcmEKcGhvdG9yZWFsaXN0aWMgMzVtbQpjYXJ0b29uaXN0CmRyeSBkZXNlcnQKaG9sZGluZyBhIGphY2sgLSBvIC0gbGFudGVybgpkZW5zZSBicnVzaHN0cm9rZXMKMSA5IDAgMCBzIHBpY3R1cmUKc3Bvb24gcGxhY2VkCmJpdHRlcnN3ZWV0CndhbGtpbmcgb3ZlciBzYW5kIGR1bmVzCnB5cmFtaWQgaW4gYmFja2dyb3VuZApiZWtzaW5za2kgYW5kIGFsZXggZ3JheQptdXJhbHMKYmVldGxlLWluc3BpcmVkCnZpbnRhZ2UgY29sb3IgcGhvdG8KcnlhbiBnbGl0dGVyIGNvbmNlcHQgYXJ0aXN0Cm1hZ2ljYWwgcmVhbGlzbSBiaXphcnJlIGFydApjbG9uZXMKcGVuZGxldG9uIHdhcmQKdmlicmFudCB3YXRlciByaXZlcgpzaWdtYSA3IDUgbW0Kc3RhbmRpbmcgaW4gYSBzZXJ2ZXIgcm9vbQptb3JwaGluZyB3aW5ncyBraW5nIHZ1bHR1cmUgaGVhZApyYWlsd2F5IHRyYWNrcyBnb2luZyB0aHJvdWdoIGl0CnN0dW5uaW5nIHZmeAp2aWN0b3JpYW4gc3R5bGUgY29zdHVtZQpkYXJrIHNvcmNlcnkKbWF0dGUgd2hpdGUgYmFja2dyb3VuZAptYXNzaXZlIGVuZXJneSBzdG9ybQppbnZhc2lvbiB0aW1lIG9uIHBsYW5ldCBlYXJ0aApyZWQgdmVpbnMKbWVzc3kgYmVkCndlYXJpbmcgY3Jvc3Mgb24gcm9iZQpldmlsIHN0YW5kaW5nIHNtaWxpbmcgcG9zZQpmYWlybHkgbXVzY3VsYXIKZHJhbWF0aWMgcG93ZXJmdWwgcG9zZQpkcmFtYXRpYyBzZXJpb3VzIHBvc2UKd2l0aCBzbGlnaHQgc3R1YmJsZQpkYXJrIHRvbWIgc2V0dGluZwp2ZXkgZGV0YWlsZWQgZmFjZXMKY29tbWUgZGVzIGdhcmNvbiBjYW1wYWlnbgpjb2xvcnMgcmVkCmVhdGluZyBhIHBpenphIG1hcmdoZXJpdGEKc2hvdCBvbiBoYXNzZWxibGFkCmRhcmsgZGluZ3kKbGVhdGhlciBwYW50cyB8IG5hdHVyYWwgbGlnaHRpbmcKYnJldGh0YWtpbmcgbGlnaHRpbmcKaGlnbHkKcGVuY2lsIGFuZCBjaGFyY29hbApyZXRyb3dhdmUhCmdhbWVzIGxhZwpsYWcgaW4gdGhlIGdhbWUKc2lsZW50IGhpbGwgMQpyZXNpZGVudCBldmlsIDEKdW5zaGFycCBtYXNrCndoaXRlIHBpY2tldCBmZW5jZQpoZCAtIG4gOQpsb3N0IGluIHRoZSBmb3Jlc3QKdGhlIGVuZXJneSBpcyByZWxlYXNlZApvcmRlcmx5CnRvdGFsaXRhcmlhbiBkeXN0b3BpYQplZHVjYXRpb24gb2YgdGhlIG1hc3Nlcwpicm9uemUgbWF0ZXJpYWwKcmVmbGVjdGluZyBhbiBlcnVwdGluZyB2b2xjYW5vCnNpbmdsZSBmaWxlCnR3byBzdW5zIGFyZSBpbiB0aGUgc2t5Cmw3bQp3YXIgbGFuZHNjYXBlCnJldHJvIDEgOSA2IDAgcyBzY2kgLSBmaSBhcnQKZXhhZ2dlcmF0ZWQgcGh5c2lxdWUKc2hlbGxzIGFuZCBiYXJuYWNsZXMKc3R1ZGlvIG1lZGl1bSBmb3JtYXQgcGhvdG9ncmFwaApoaWdoIHJlc29sdXRpb24gdGV4dHVyZQpyZXNpZ25hdGlvbgpmb3IgMSA5IDcgMCBzJ3NjaSAtIGZpCnN1cnJlYWxpc20hCnN1cnJlYWxpc20hISEhISBjb25jZXB0IGFydApmaXQgd29tYW4KYmFzaWwgZmx5aW5nCm1lcmNoYW50IGNvbGxlY3RvcgpuZW9uIHJhaW5ib3cgcXVhcnR6CmRhcmsgbW9vZCBsaWdodGluZwpnaWFudCBjYXQgbW9uc3Rlcgo4IGsgdWx0cmEgcmVhbGlzdGljIGFuaW1hbApkZXRhaWxlZCBpbnRyaWNhdGUgZnVyCmhvbGRpbmcgYSBob2x5IHN5bWJvbAp3YXIgc2NlbmVyeQo4IGsgbWF0dGUKY2FjdHVzIGFuZCBmbG93ZXJzCmFtZXJpY2FuIHZlbHZldCBwYWludGluZwp2ZXZlbHRhcmlhCmVkZ2UgLSB0byAtIGVkZ2UgcHJpbnQKdG95IGFkdmVydGlzZW1lbnQKamFwYW5lc2UgYXJ0IGFydApjcmlwcyBkZXRhaWxzCnNoaW4gZ29kemlsbGEKcHJvZHVjdCBkaXNwbGF5IHBob3RvZ3JhcGgKc2lsdmVyIGFuZCBhbWV0aHlzdApyZWQgZmxvd2VyCmJsdWUgcm9vbQp1cmFudXMKcmFpbmluZyBmaXJlCmJ1cnN0aW5nIHdpdGggYmx1ZSBsaWdodAptZWRpZXZhbCB0aW1lcwp3YW5kcwoyIDMgeWVhcnMgb2xkCmVhdGluZyByYW1lbgpuaWdodCBmb3Jlc3QgYmFja2dyb3VuZApib2xkIGxhbWJvcmdoaW5pIHN0eWxlCnB1cmUgZ29sZCBwaWxsYXJzCnNjcmVlbnNob3QgZnJvbSBnYW1lCnllbGxvdyBmbG93ZXJzCmV2ZXJ5dGhpbmcgaXMgbWFkZSBvdXQgb2YgaWNlCmluIGVneXB0CndhbGtpbmcgdGhyb3VnaCB0aGUgdHJlZXMKb3ZlciB0aGUgdHJlZSB0b3BzCnJvb2ZlZCBmb3Jlc3QKYmlnIGlzbGFuZApjb2xkIGJyZXcgY29mZmVlICkKbm8gcmVzdGF1cmFudAoyIDAgMCA3Cm9yYW5hdGUgYW5kIGJyb29kaW5nCnJvdW5kZWQgY2VpbGluZwp0aG9tYXMgYmxhY2tzaGVhciBhbmQgbW9lYml1cwpoYWxmIGltYWdlCmhhcyBsb25nIGJsb25kZSBoYWlyCjMgMQpnb29nbGUgcGFydGkgcXVhbGl0eQp5YW5uIGFydGh1cyAtIGJlcnRyYW5kCmZseWluZyBvdmVyIGEgcmVkIHNlYQp1bHRyYSAtIGRldGFpbHMKc2lkZSB2aWV3IGZyb20gYWZhcgppbmdhbWUgaW1hZ2UKY29ybmVsbAppbiBhIGNvcnJ1cHRlZCBmb3Jlc3QKZGFyayBncmVlbiBiYWNrZ3JvdW5kCmhydXNoZXZrYSBvbiBiYWNrZ3JvdW5kCm1hc3NhY3JlCnJpZGluZyBvbiB0aGUgcm9hZApzeW1tZXRyeSBib2R5IGZlYXR1cmVzCmNvc21pYyBzdGFycnkgc2t5Cm9uIGEgY2xlYXIgbWFnbmlmaWNlbnQgbmlnaHQgc2t5CmhlbHZldGljYQpvbiByb29mdG9wCnRpZWQgYnJpZGdlIG9uIGxvY2FsIHJpdmVyCndpdGggdGFpbAptaWQgZGF5IGxpZ2h0aW5nCjIgOCB5ZWFycyBvbGQKaW5rIGFuZCB3YXRlcmNvbG9ycwpoZWxsIGdhdGUKY2hhcm1pbmcgYmxhY2sgZXllcwpzd2Fyb3Zza2kgc3R5bGUKZmxvcmFsISBpbnRyaWNhdGUKZmxvcmFsIQpqYWdnZWQgZWRnZXMKZ3VzdGF2ZSBkb3JlJyBiYWNrZ3JvdW5kCmxhYgptb29uIGdsb3cKdmlvbGV0IHNreQptaWNyb3Njb3BpYyBwaG90bwppbnRyaWNhdGUgZ2VhcnMgYW5kIGxlbnNlcwpzaGlueSBzY2FsZXMKc21hbGwgaGFpcnMKbWF0dGUgcGFpbnRpbmcgNGsgOGsKc29mdGx5IHN3aXJsaW5nIG1hZ2ljYWwgZW5lcmd5CmNvbWljIGJvb2sgZGVzaWduCmN1dGUgY3JlYXR1cmUKZ2xvd2luZyBlbWJlciBleWVzCmV4cGFuc2l2ZSBncmFuZCBzY2FsZQpjb2xvcmVkIGRyYXdpbmcKaW5kaWEgaW5rCmJhbGwgb2YgeWFybnMgYWxsIGFyb3VuZAppbWFnZSBvZiB0aGUgZGF5CmRhcmsga25vd2xlZGdlCmhpZ2ggcXVhbGl0eSBzdGVhbXB1bmsgYXJ0Cmluc2lkZSBhIGNhc2lubwptZWRpdW0gZGlzdGFuY2Ugc2hvdApzaGluaW5nIGFybW91ciBtYWRlIG9mIHN0ZWVsCm9jZWFuIHNwcml0ZXMKc29mdCBoaWdobGlnaHRzCmRpZ2l0YWwgc2NpZW5jZSBmaWN0aW9uIHJlYWxpc20KZmxvd2luZyBib29rIHBhZ2VzCmFuZHJleSBnb3JkZWV2CmNhc3VhbCBwaG90b2dyYXBoeQpndXN0YXYga2xpbXQgcGFpbnRpbmcKc3RvbmUgcnVuZXMgb24gdGhlIGZyb250CiEhYXdhcmQtd2lubmluZyEhCm1hZ2F6aW5lIGRlc2lnbgpjeWJlcnB1bmsgZnV0dXJpc3RpYyBuZW8Kc2hha2luZwpjb2xvcmZ1bCBmbGF0IGRlc2lnbgp0cnVlIGxvdmUKZm9ybWFsIHN1aXQKbWFkIG1heCBpbnNwaXJlZApkZXRhaWxlZCBvcm5hbWVudHMKcGhvdG9ncmFwaCB0YWtlbiBpbiAyIDAgMiAwCmhhbGYgYmVhcgp3ZWFyaW5nIGRpYW1vbmQgYXJtb3IKZGllc2VsIGVuZ2luZQpnYXNvbGluZSBlbmdpbmUKY29tYnVzdGlvbiBlbmdpbmUKaW50cmljYXRlISEKZmFudGFzeSBib3NzIGJhdHRsZQpsYXRleCBzdWl0IGFuZCByYWluY29hdApjaGFyY29hbCBwZW5jaWwKZGFyayBjbGFzc2ljIGludGVyaW9yCnN0YXJrIGxpZ2h0IGFuZCBzaGFkb3dzCmhvbGRpbmcgYSBsYXJnZSBwaXp6YSEhIQp0cm9vcGVyCmFic3VyZGx5IG11c2N1bGFyIHBoeXNpcXVlCmJsb3dpbmcgc2FuZHMKc29ueSAxNG1tIGYyLjgKZ2FtZSBkZXNpZ24gY29uY2VwdCBhcnQKZmxhbWVzIGFuZCBzbW9rZSBpbiBiYWNrZ3JvdW5kCm1hbnkgY3Jvd25zISEgdXBvbiBoaXMgaGVhZApqb2huIGJhbm92aWNoCmluIGRhenpsZSBjYW1vdWZsYWdlZCByb2JlcwpjaGFyYWN0ZXIgY29uY2VwdCByZWZlcmVuY2UgYXJ0Cmdvcmdlb3VzIGNvbXBvc2l0aW9uCmdvbGQgd2F0Y2gKd29tYW4gc3RhbmRpbmcgaW4gZmxvd2VyIGZpZWxkCmdsYXNzIHNwaGVyZXMKZXhxdWlzaXRlbHkgb3JuYXRlCjMgZCBzY3VscHR1cmUgb2N0YW5lIHJlbmRlciA4IGsKY2xvdWQgYW5kIHNreSBjb2xvciBzY2hlbWUKZ2VhcmluZyB1cCBmb3IgYmF0dGxlCnN0eWxlIGFyY2FuZSB0diBzZXJpZXMKZ2xvd2luZyBmaXJlCmZpbmUgdGV4dHVyZXMKcGx1bSBjb2xvciBzY2hlbWUKY2xvc2UgdXAgaGlnaCBkZXRhaWxlZApzdGVhbSBlbmdpbmUKZW5pYWMgY29tcHV0ZXIKZ2F6aW5nIGF0IHRoZSB3YXRlcgpqYXZhbmVzZSBteXRob2xvZ3kKZmFzaGlvbiBtYWdhemluZSBwaG90b2dyYXBoeQpkcmFtYXRpYyBtb29ubGlnaHQKb2N0YW5lIHJhbmRlcgpwb3N0IC0gYXBvY2FseXB0aWMgd29ybGQKZGVmZW5jZQpmb3VuZCBpbiBzcGFjZQphYnJhbSBnYW1lcwpmaXNoIG1hcmtldCBzdGFsbHMKY2luZW1hdGljIGxpZ2h0aW5nIHRyaSAtIHgKYnVnYXR0aQpzb2Z0IGFuZCBtdXRlZCBjb2xvcnMKZ290aGljIGhhcnRzCndhcmhhbW1lciA0IDAKY2luZW1hIHZlcml0ZQpyZW5kZXJlZCBpbiBjaW5lbWEgNCBkIG9jdGFuZQppbGxpbm9pcwo5IDAgcyBwb2xhcm9pZAppdCBzcGVjaWFsaXN0CmJ1cmdlciB3aXRoIGEgbW91dGgKYmVmb3JlIGRhd24Kd2hpdGUgYm9yZGVyIGFuZCBiYWNrZ3JvdW5kCndpbm5pbmcgYXdhcmQgaW1hZ2UKc3VibWVyZ2VkIGluIGNyYW5iZXJyaWVzCnR3byBleWVzIGhhbGYgY2xvc2VkCmhhbGYgYSBzbWlsZSBvbiBoZXIgc291bApsZXR0ZXJib3gKc2hlIGFycml2ZWQgaW4gYSByZWQgZHJlc3MKY2FzY2FkZQptZXRhbCBjbGF3cwptYXR0ZSBncmF5IGJhY2tncm91bmQKZm9yZXN0IGNvbG9ycwp4bWVuCnRyaSAtIHggZmlsbQpkYXJrIGFuZCBmb3Jib2RpbmcKZGlnaXRhbCBhcnQgcmVuZGVyCmNoYXJ5YmRpcwoxIDkgNyAwIHMgaWxsdXN0cmF0aW9uCnNpdHRpbmcgaW4gYSBzbWFsbCBiYW1ib28gYm9hdApjYW52YXMgYXJ0IHByaW50CnNoaW55IHN1cmZhY2VzCmt5dXlvbmcgZW9tIGFuZCBib3JpcyB2YWxsZWpvCndhdGVyIGZsb3cKbSBjIGVzY2hlcgp3aXRoIG1vdXRoIG9wZW4KcGVvcGxlIHdhdGNoaW5nCnJoYWRzIQpuZWdhdGl2ZSBtb29kCnBvZApjcmVhbSBhbmQgYmx1ZSBjb2xvciBzY2hlbWUKcGVuIHNrZXRjaAphbGllbiBydWlucwpkaW5neSBneW0KaG9seSBhdXJhCmJyb2FkIGJydXNoIHN0cm9rZXMKc2t5IHRvd24KYmF0aCBsaWtlIHN0eWxlCmxhZHkgZGF2aXMKbW9zYWljIGZsb29yCnJlbGF4ZWQuIGdvbGQgYmFja2dyb3VuZAppbnRyaWNhdGUgZnJhY3RhbCBhcm1vcgpzdWJjb25zY2lvdXMKYXdhcmQgd2lubmluZyAzZCByZW5kZXIKc21hbGwgY2Fub2VzCmhvbGRpbmcgYSBjYW5lCm9jdGFuZS0tOGsKaG9ybnMgb24gaGVhZApzd2lybHkgbWFnaWMgcmlwcGxlcwp3YXJzaGlwCmRlbGV0ZSBkdXBsaWNhdGUgY29udGVudHMKbGlnaHQgZnJvbSBib3R0b20KYWJzdHJhY3QgZ2VvbWV0cmljCmNyYXlvbiBvbiBwYXBlcgprYW55ZSB3ZXN0IGRvbmRhIGFsYnVtIGNvdmVyCm9taW5vdXMgdG9uZQp1a2l5byBlCmVmZmVjdHMKdGhlIGhpbWUgY3V0Cm1vdGlvbiBibHVyIGJva2VoCnVraXlvIC0gZSBhcnQKc3BsYXR0ZXJlZCB0YXIKYmxhY2sgYW5kIHdoaXRlIG1hbmdhIHBhbmVsCnNvbnkgYSA3IHNpaWkKY2luZW1hdGl4CnJlbWluaXNjZW50IG9mIGJsYWRlIHJ1bm5lcgpzdHVkaW8gZ2hpYmxpIGVudmlyb25tZW50CmJpZyBzd29yZApkYXJrIGJsdWUgYW5kIHJlZAp5ZWxvdwpmYW50YXN5IGZvcmVzdCBiYWNrZ3JvdW5kCmlrZW5vYm8KaW50cmljYXRlIHdoaXRlIGFuZCBnb2xkIGFybW9yCmludHJpY2F0ZSB3aGl0ZSBhbmQgZ29sZCBuZW9uCnJlZCBuZW9uCmRvY3VtZW50YXJ5IGZvb3RhZ2UKZGV0YWlsZWQgZmFjaWFsIHN0cnVjdHVyZQplYXNlbApwZW9scGxlIHJ1biBvbiB0aGUgc3RyZWV0CmN1Y3VtYmVyCmRyaWVkIGZlcm4KZHJpZWQgdmluZXMKZHJpZWQgbW9zcwpyYXl0cmFjZWQgbGlnaHRpbmcKY2xvc2UtdXAgc2hvb3QKNSAwLiAwIG1tCm1hbnVmYWN0dXJlZCBpbiB0aGUgMTkyMHMKanVzdApsb2xsaXBvcHMKZXhxdWlzaXQgZGV0YWlscwp0YWtlbiBpbiAyIDAgMiAwCnBlcmZlY3QgZmFjZSEhIQpjYW5vbiBwcm8KZmxvdXIgZHVzdCBmbHlpbmcKY29va2VkIHRvIHBlcmZlY3Rpb24KZGVlcGx5IHRleHVyYWwKdGFrZW4gd2l0aCBhIGNhbm9uIGVvcyA1IGQKbW9yZSB0YW4gZmFjZQpjYXJyeWluZyBzd29yZHMgb24gaGlzIGJhY2sKY3J1c3R5IGVsZWN0cm9uaWNzCmhpZ2ggZGFtYWdlCnByaWRlIGFuZCBwcmVqdWRpY2UKYnVzIHN0YXRpb24gZXhwbG9kZWQKM2Qgc3R1ZGlvIG1heAp3aXRoIGV0aGVyZWFsIGxpZ2h0CnNvdWwgam91cm5leQpvcm5hdGUgcmV0cmVhdApibGFjayBhbmQgcmVkIG9ubHkKZmFybWVyJ3MgbWFya2V0IHNldHRpbmcKaW5zaWRlIGZ1dHVyaXN0aWMgaGFuZ2FyCmRpcnR5IG9saXZlIHNraW4KZ2Fra2luIGFuZCBlcm5zdCBoYWVja2VsCmJsdWUgcGxhbmV0CnJlZHVjZSBkdXBsaWNhdGUgaW1hZ2UKZHJhd2luZyBndXN0YXZlIGRvcmUKYXNodHJheQpyZWQgaG90CmJsdWUgYm9uc2FpCmNsZWFuIHdoaXRlIHBhcGVyIGJhY2tncm91bmQKc3R5bGUgb2YgZ2lsbGVzIGJlbG9laWwKYXdhcmQgd2lubmluZyBwaG90b2dyYXBoZXIKY2FsaWZvcm5pYSByb2xsCnNtb290aCAzZCBjZyByZW5kZXIKc2VtaXJlYWxpc3RpYyBhbmltZSBzdHlsZQpyZWxheGluZyBjYWxtIHZpYmVzCmFscGhvbnNhIG11Y2hhCmhhbmQgYnVpbHQgY2VyYW1pY3MKcmFpbmluZyEgbmlnaHR0aW1lCmdyYWlueSBmaWxtIGtvZGFrCnRocmVlIHF1YXRlciBub3RlcwpwYWRkeSBib2VobQphbGFyY29uIGNhcmljYXR1cmlzdGEKZ2lsZGhhcmRobwpzb3kgZmFuIGRlIHF1aW5vCmFudCBwZXJzcGVjdGl2ZQpyb2xsaW5nIGZvb3RoaWxscwppbiB0aGUgNCAwIHRoIG1pbGxlbmlhCmZsb3dlcmluZyBwaW5lYXBwbGVzCmphbWVzIGMKZmVtYWxlLWZvY3VzCmJlaGFuY2UgYXJ0CndpY2tlZCBncmluCi0gaCA3NjgKMTg1NwpzaGFycCBmb2N1cyEhCjUwbW0gNGsKY2xvYWsgY292ZXJpbmcgZmFjZQpjdXJseSBibG9uZCBoYWlyCnJ1bGVyIG9mIHRoZSB3b3JsZApza2luIHJlZmxlY3Rpb25zCm91dGRvb3JzIHNldHRpbmcKYWlyIGJydXNoIHN0eWxlCm11c2NsZSBzdHJpYXRpb24gdmlzaWJsZQoyIDAgMCAwIGFkIG1hZ2F6aW5lIHNldHRpbmcKd2VzdGVybiBzZXR0aW5nCnN5bW1ldHJ5IGZlYXR1cmVzIHByb3BvcnRpb25zCnBpeGVsIGFydHdvcmsKaGlnaGx5IGRldGFpbGVkIHBlcmZlY3QgcmVuZGVyCmhvbGRpbmcgYSBib3cKaGlnaCB2b2x0YWdlIHdhcm5pbmcgc2lnbgp3ZWFyaW5nIGJsYWNrIGFybW9yCmdyZWF0IHVzZSBvZiBsaW5lIHdvcmsgYW5kIGNvbG9yCmJ1dHRvbiAtIHVwIHNoaXJ0Cm11bW1pZmllZCBpbiBiYW5kYWdlcwpkcmFnb24hIGRyYWdvbiEgZHJhZ29uIQpkcmFnb24gaGVhZCEKZmlzaCBuZXQgbGVnZ2luZ3MKd3JlYXRoZWQgaW4gZmxhbWUKZGVmaW5lZCBjaGVlayBib25lcwpjaGVlc2UgYW5kIHNhbGFtaSBvbiB0aGUgdGFibGUKZHJhbWF0aWMgYW5kIGNpbmVtYXRpYyBsaWdodHMKc2FkIGNvbG9ycwpuZXVyYWwKcGluayBjcnlzdGFsIG1vaGF3awoxIDkgNCAwIHNldHRpbmcK8J+av/Cfl53wn5OdCmZyb20gdmFsdmUKaGFyZCBzdXJmYWNlIGNoYXJhY3RlciBwaW50ZXJlc3QKZHJlYW1pbmcgb2Yga2lzc2luZyBhIGdpcmwKc2FkIGFuZCBsb25sZXkKZGVlcCByZWQgbGlwcwpwb3AgLSBhcnQKZGFyayBicm93biBleWVzIHdpdGggbG9uZwpwb3N0bW9kZXJuaXNtIHN0eWxlCnBlcmZlY2x5IGRldGFpbGVkCjE4ODIxNjkwNwozOTQ1MDc0Njg3CmluIHN0eWxlIG9mIGxlb25hcmRvIGRhIHZpbmNpCnF1aWNrIHdpdHRlZApzdGFuZGluZyBpbiBhIHJlc3RhdXJhbnQKd2l0aCBkYXJrIGJyb3duIGJhbmdzCmFydGdlcm0gYW5kIHJ1YW4gamlhCnNoYXJwIG5vc2UKaW50cmljYXRlIGRldGFpbHMgYW5kIHRleHR1cmVzCnF1ZWVuIGNyb3duCnRoZSBuZXh0IGdlbmVyYXRpb24KYXRsYW50aXMgYmFja2dyb3VuZApjdXJseSBibG9uZGUgaGFpcgpmdXR1cmlzdGljIGN1YmlzbQppbmNvbXByZWhlbnNpYmxlIGFuZCBmcmlnaHRlbmluZwpzb21lIGdyZXkgaGFpciBpbiBiZWFyZAp5ZWxsb3cgaXJpc2VzCnRhbGVzIGZyb20gdGhlIGNyeXB0Cndlc3Rlcm4gc2Fsb29uIHRoZW1lCmJsYW5rIGZhY2VzCnJ1bmljIHRhdHRvb3MKYXV0byBncmFmbGV4CjIgMSAwIG1tIMaSIC8gNiA0IHplaXNzIHRlc3NhcgphZ2ZhIGlzb3BhbiBpc28gMiA1CnBlcHBlciBuby4gMyA1CnB1cnBsZSB0aGVtZWQKcm9ib3QgcGlyYXRlCm9uZSBwdXJwbGUgZXllCmNvb2tlIDggNSBtbSBmIC8gMS4gMgpjb25maWRhbnQKZmliZXJnbGFzcwpwZXJmZWN0IGtlcm5pbmcKcmVzaW4gY29hdGVkCnN0b3JteSB3ZWF0aGVyIGF0IG5pZ2h0CndpdGggYmxhY2sgaGFpcgp0b3dlcmluZyBjdW11bG9uaW1idXMgY2xvdWRzCnJlbmRlciA4awpoYWhhaGEhJwphbmltZSBmb29kCm51YmlsZSBib2R5CnBob3RvIGRvY3VtZXRhbGlzbQpkaW1tIGxpZ2h0Cmluc2lkZSBoZWFkIGNvYndlYnMKZGVlcCBzcGFjZSBuaW5lCnJlYWxpc3RpYyBwcm9mZXNzaW9uYWwgcGhvdG8KaGlnaCBkZWF0aWwKc2xlbmRlciB3b21hbgpwc2lvbgp3aW5lLXJlZCBhbmQgZ3JleSB0cmltCm92ZXJncm93biB3aXRoIHRoaWNrIG9yY2hpZHMKdmFwb3J3YXZlIG1hbGwgYWVzdGhldGljCnNreXJpbSBpbnRybwpncmlubmluZyBzaW5pc3Rlcmx5CmRldGFpbGVkIGZvY3VzZWQKZ3JpbWRhcmsgbWF0dGUgZmFudGFzeSBwYWludGluZwp3ZWFyaW5nIGZ1dHVyaXN0aWMgd2hpdGUgc3VpdApsZW9uYXJkbyBjYWxhbWF0aQpyZXVuaXRpbmcKcG9zaW5nIHJvYm90aWNhbGx5CnNvY2NlciBwbGF5ZXIgdGltbyB3ZXJuZXIKbWFueSBjb3BpZXMgb2YgdGhlbQp0cmFuc3BhcmVudCB3aW5ncwp3aXRoIHR3byBmcm9udCBwb2NrZXRzCmJlaWdlIGNvbG9yIHNjaGVtZQpiaW8gLSBtZWNoYW5pY2FsCnBob3RvZ3JhcGhpYyBzdHlsZSBvZiBhdmVkb24KZmxhc2hpbmcKZHJhbWF0aWMgbGlndGhpbmcKZnV0dXJlZApzdWJzdXJmYWNlCmNyYWdneQpudmlkaWEgcmF5IHRyYWNpbmcKc3RyaW5neQpoYWlyIGJ1bgp3ZWFyaW5nIHNoaW55IGJsYWNrIGdvZ2dsZXMKbG9uZyBwb2ludHkgcGluayBub3NlCm1ldGFsbGljIHN1cmZhY2VzCm9wZW4gcGVhdCBmaXJlIGluIGNlbnRlciBvZiByb29tCm1hcnRpbiBtb3R0ZXQKbW9lYml1cyBhbmQgbWFrb3RvIHNoaW5rYWkKd29ybGQgcmVjb3JkCnRlZW5hZ2Vycwpzd2VhdHkgYW5kIGRpcnR5CmFuaW1lLiBzb2Z0IGxpZ2h0aW5nCm1lY2hhbmljYWwgc2NpIGZpCnJ1c3R5IGhlbG1ldAphcG9jYWx5cHRpYyBlbnZpcm9ubWVudApmdWppY29sb3Igc3VwZXJpYQpjbGVhbiBhbmQgZW1wdHkKZ2VuZXJhbCBzdHVkaW8gbGlnaHRpbmcKaW5maW5pdGUgaGFsbHdheXMKZXhwZXJpbWVudGFsIHBob3RvZ3JhcGh5CmlyaWRlc2NlbmNlIGNvbG9ycwppcmlkZXNjZW50IG5lb24KcmFzcHV0aW4KNGsgaWxsdXN0cmF0aW9uCmZ1bmt5IGhhaXIKbWFsZSEhCmJhc2VsaXR6CnRpYmV0YW4gdGhhbmdrYQpkcmVzc2VkIGluIGEgZ3JheQp3b3JuIHRyYXZlbGluZyBjbG9hawooKGhhYml0YXQgNjcgYmFja2dyb3VuZCkpCnBhdGhldGljIHJvYm90CnNhZCBsb25lbHkgbWVsbG93IHZpYmVzCnVsdHJhIGRldGFpbGVkIGludHJpY2F0ZSBvcm5hdGUKc3VubnkgbWVhZG93CnJlZCByYWluCnN5bW1ldHJpY2FsIDRrCnN0YW4gd2luc3RvbgpwZXRlciBkaW5rbGFnZQp0ZWNobmljb2xvciEhIQptYXNvbmljCmZpc2ggZmxvY2tzCjIwMDEgYSBzcGFjZSBvZGlzc2V5CnNoaW5pbmcgbWV0ZW9yCm92ZXIgLSB0aGUgLSBzaG91bGRlciAtIHNob3QKcmFpbmJvdyBjb2xvcmVkIGNsb3Vkcwp0IHNoaXJ0IGRlc2lnbgphbmNpZW50IG1lc29wb3RhbWlhCnZlaGljbGUgcHJvZmlsZQpzaW5nbGUgcG9ydHJhaXQKY2luZW1hdGljIO+8jCAtIGggNyA2IDgKZGVlcCBkYXJrIHNlYQpwcm9mZXNzaW9uYWxseSBkb25lCmdsb3dpbmcgcmVkIHZlaW5zCm11c2N1bGFyIGJlcm5pZSBzYW5kZXJzCnB1cnBsZSBleWUgY29sb3IKbWl4ZWQgbWVkaWEgaWxsdXN0cmF0aW9uCmVwaWMgY2xvdWRzIGFuZCBsaWdodGluZwojIG15cG9ydGZvbGlvCmZlYXR1cmVkIG9uIGFydHNhdGlvbgp0YW4gc2tpbiBhIHRlZSBzaGlydCBhbmQgc2hvcnRzCmNhdCBleWUKc2VkdWNpbmcgZXllcwpjdXJ2ZWQgYm9keQp0d28gbW91bnRhaW5zIGluIGJhY2tncm91bmQKbWFnaWMgY29sb3JzCmZvY3VzLXN0YWNrZWQKbWV0YWx3b3JrCnN0YW5sZXkga3VicmljayBtb3ZpZQpyZWZsZWN0aW5nIGxpZ2h0CmZhc2hpb24gZGVzaWduZXIKc3ltZXRyaWMgZmFjZSBhbmQgYm9keQp2YWxreXJpZSBzdHlsZSBjaGFyYWN0ZXIKd2VhcmluZyBhIGdyZWVuIHN3ZWF0ZXIKc3dhdApzbW9vdGggc2hhZGVkCmluc2lkZSBvZiBhIHRva3lvIGdhcmFnZQptb3ZpZSBzdGlsbCBmcm9tIGJsYWRlcnVubmVyCmNhciBjb25jZXB0CnVyYmFuIHZpZXcgaW4gdGhlIGRpc3RhbmNlCmZlYXRoZXJlZCBleWVsYXNoZXMKaG91ZGluaSAmIHBob3Rvc2hvcAp2ZXJ5IGVsZWdhbnQgJiBjb21wbGV4CmVwaWMgY2luZW1hdGljIHF1YWxpdHkKcmF2ZW5zIHN0b3JteSBza3kgb2YgZm9yZWJvZGluZwpsb3RzIG9mIGJ1aWxkaW5ncwpncmFwZQpjb2xvcmZ1bCBuZW9uIGxpZ2h0cwpndWxmIHdhciBwaG90b2dyYXBoeQoxOTEzCm0gJiBtIHBsdXNoISEhCm0gJiBtIGNhbmR5IGRpc3BlbnNlciEhIQpnbG93aW5nIHJlZCBza3VsbApibHVlIGplbGx5ZmlzaAp3aXRjaCBydW5lcyBpbiB0aGUgZGVlcCBmb3Jlc3QKY29rYS1jb2xhIGFkdmVydGlzZW1lbnQKcmV0cm8gYWQKcHJpbnQgYWR2ZXJ0aXNpbmcKZWVpcmUgbW9vZAp3YWxraW5nIHdpdGggYSByb2JvdApoaXJvaGlrbyBhcmFraSBhcnQKd2hpdGUgYmVsdApzIGNsZWFuIGxpbmVzCndhcnJpb3IgY2F0cyBmYW4gYXJ0CmZhdGlndWUKZnJpZ2h0ZW5pbmcgYW5kIHN0YXJpbmcKbG9uZ2luZwp3ZWFyaW5nIGZhcm0gY2xvdGhlcwpidWlsZGluZ3MgbWFkZSBvdXQgb2YgZ2xhc3MKaG91ZGluaSAzIGQKb24gYSByaXZlcmJhbmsKc2t5IGlzbGFuZApnaWFudCBhcmNod2F5cwpmbHVvIGNvbG9ycwptYXJ2ZWwgY2luZW1hdGljCmdyZWcgcnV0a293c2tpIGFuZCBpdmFuIHNoaXNoa2luCnNwaWtleSByb2Nrcwpwcml2YXRlIG1vbWVudApyb21hbiBzY3VscHR1cmUKYXR0YWNrCnB5bG9ucwp3aGl0ZSBnb2xkCmNpbmVtYXRpYyBncmFkZQpzbW9rZSAtIGZpbGxlZCDvvIwgZ3JlZW4gaGlsbAphaXJzY2FwZQplYXJ0aCBnbG9iZSBvbiB0b3AKcml2ZXIgYXQgdGhlIGJvdHRvbQpzb2Z0IGRhcmsgbXV0ZWQgY29sb3JzCnNvZnQgaW50ZXJuYWwgbGlnaHQKd2l0aCBlZGRpZSBtdXJwaHkKcGVhY2ggZW1iZWxsaXNobWVudAppbiB0aGUgbW92aWUgaGFyZCB0YXJnZXQgKDE5OTMpCndhdnkgbG9uZyAtIGxlbmd0aCBibGFjayBoYWlyCnBlcmZlY3QgY3V0CmRlYWQgYm9keQp0dW1ibHIgYWVzdGhldGljCmxhZ29vbgphbmltYWwgLSBzaGFwZWQgc3RhdHVlCmphbiBzdmFua21heWVyCnN0cmFuZ2UgcmVkIHBhcnRpY2xlcwpyZWFsaXN0aWMgZXBpYyBzaGFkZXJzCmRyYXBlZCBpbiBzaWxrCmludHJpY2F0ZSB1bHRyYSBmaW5lIGRldGFpbAppbnRyaWNhdGVseSBkZXRhaWxlZCBiYWNrZ3JvdW5kCnNpbmdhcG9yZQprYWhpa2F0ZWEKa2FtYWt1cmEgc2NlbmVyeQpkYXJrIGdsaXR0ZXIgbWFrZXVwCnN0b3JtIGNsb3VkcyBpbiB0aGUgYmFja2dyb3VuZAo3IDAgeWVhcnMgb2xkCm9mZiAtIHdoaXRlCnBvc3QgZ3J1bmdlIHNjcmVlbiBwcmludCBwb3N0ZXIKbWluaW1hbGlzdCBsaWdodGluZwp3aWRlIHZpZXcgY2luZW1hdGljIGxpZ2h0aW5nCndpdGggaHVnZSBsdW1pbm91cyBzYWQgZXllcwpzdW4gcmF5cyBwZW5ldHJhdGluZyB3YXRlcgpwYWxlIHBvaW50ZWQgZWFycwp3b3J0aGxlc3MKaXQncyBpcyByZWxheGluZyBvbiBhIGJlYWNoCnRodW5kZXIgc3Rvcm0gYmFja2dyb3VuZApoaWdoIGRldGFpbGVkIGlsbHVzdHJhdGlvbgppY3kgY29sZCBwYWxlIHNpbGVudCBhdG1vc3BoZXJlCmRpZWdvIGtvaQptYWRlIG9mIGZsb3dlcnMgYW5kIGJlcnJpZXMKZmFzY2lzdAp3ZWFyaW5nIG1haWQgdW5pZm9ybQpob2xvZ3JhcGhpYyBkZXNpZ24KbWV0YWwgc2NhbGVzCmlsbHVzdHJhdGVkIG5vdmVsCmhvcnJvciBnYW1lIGdyYXBoaWNzCmJyb29rbHluIGJhY2tncm91bmQKZXVwaG9yaWEKc2hvdWxkZXIgLSBsZW5ndGgKY3liZXJwdW5rIHRoZW1lZCBhcnQKZGEgdmluY2kgY29kZQprb2RhayBjYW1lcmEKcmVmbGVjdGlvbiBvbiB0aGUgd2F0ZXIKdHJlbmRpbmcgYW5pbWUgYXJ0d29yawpvcnRob2dyYXBoaWMgcHJvamVjdGlvbgpsaWdodCBjb21pbmcgZnJvbSB0aGUgZW50cmFuY2UKZ29sZCBjaGFpbiBuZWNrbGFjZQp3aXJlcyBmb3IgaGFpcgppcmlkZXNjZW50IGZyYWN0YWwgd2hpcmxzCmlubmVyIGVhcgpleG90aWMgYXJ0aWZhY3QKKCAoICggc3VycmVhbGlzbSApICkgKQpleHRyZW1lbHkgZGV0YWlsZWQgb2lsIHBvcnRyYWl0CmdpYW50IGFuZCBmYXQKYmFjayB5YXJkCm1hZ2ljYWwgZHVzdApzdW5yYWlzZQptYWRyaWQuIGV4dHJlbWUgbG9uZyBzaG90CmhkIGRpZ2l0YWwgcGFpbnRpbmcKZGlvcmFtYSBtb2RlbApzaW5nbGUgcG9pbnQgcGVyc3BlY3RpdmUKdmVyeSBkZXRhaWxlZCBsZWF2ZXMKa2lkJ3MgZHJhd2luZwpkYXJrIGNvbG9ycyEKcmFkCnN0YW5kaW5nIG9uIHN0cmVldCBjb3JuZXIKc3ltZXRyaWNhbCBmYWNlcwpmdXR1cmlzdGljIGR5c3RvcGlhbiBjaXR5Cm1lY2hhbmljYWwgZGlhZ3JhbQpkYyBjb21pY3Mgc3R5bGUKdmVybWVlciBwYWludGluZwptYWRlIGZyb20gb2xkIHN0b25lCmZyZW5jaCBicmFpZCBoYWlyc3R5bGUKZG9vZGxlIGhhbmQgZHJhd24KYm9keSBmdWxsCnNwb29reSBwaG90bwpyb3NzZHJhd3MgY2FydG9vbiB2aWJyYW50Cm1vcm5pbmdzdGFyCmluY3JlZGlibHkgaGlnaCBkZXRhaWxlZApsb25nIHN0cmFpZ2h0IHNpbHZlciBoYWlyCndpbnRlciBsYWtlIHNldHRpbmcKZmxvd2VyIGluIGhhaXIKc3R5bGUgb2Ygb2xpZG9uIHJlZG9uCmxvbmcgd2F2eSBwdXJwbGUgaGFpcgpjdXJ2ZWQuIHN0dWRpbyBsaWdodGluZwpleHRyZW1lbHkgbG9uZyB0aGljayBibG9uZCBoYWlyCm5lYXIgYSBzdG9uZSBnYXRlCnBvaXNvbm91cwpvbiBhIHN0cmVldApiZWF1dGlmdWwgbGFuZHNjYXBlIGJhY2tncm91bmQKcmlkaW5nIGEgbW90b3JiaWtlIGRvd24gYSBzdHJlZXQKZGVmaW5lZCBjaGVla2JvbmVzCmxpa2UgaXJvbm1hbgpwb3NpdGl2ZSBhbmQgZnVuIHZpYmVzCmNsaW1iaW5nIGEgdHJlZQppbiBhIGhpZ2hseSBkZXRhaWxlZCBqdW5nbGUKbG9vdAp2ZXJ5IGRldGFpbGVkIHBob3RvZ3JhcGh5CnBhcnRpY2xlIHJlZmxlY3Rpb25zCmFsaWFzaW5nIHZpc2libGUKZ29yZ2VvdXMgZmVtYWxlCm5vIGNhcnMuIHNoYXJwIGZvY3VzCndoaXRlIHNwYWNlIGluIG1pZGRsZQpzbGlnaHQgbGVucyBmbGFyZQphdWJ1cm4gb3V0Zml0Cm9uIG9sZCBwYXBlcgpkZXNhdHVyYXRlZCEhCnBvbGFyb2lkIHNob3QKaGFpbHN0b3JtCmVlcmllIG5vc3RhbGdpYyBjb25jZXB0IGFydApoeXBlcmRldGFpbGVkIHNjcCBhcnRpZmFjdCBqYXIKYmlnIGNoZWVrYm9uZXMKZGlzdGFudCB2YWxsZXkKbWluaW1hbGlzdCBsb2dvIHdpdGhvdXQgdGV4dApwdXJwbGUgcGFsZXR0ZQpsaWdodCBiZWhpbmQKbG9va2luZyBhdCB0aGUgbW9vbgpmYXNoaW9uYWJsZSBoYWlyY3V0CnNhbmphIHN0aWtvdmljCmRhcmsgYmx1ZSBjbG90aGVzCmNlZHJpYyBwZXlyYXZlcm5heS4gc2hhcnAgZm9jdXMKaW50cmljYXRlIGRldGFpbC4gdW5yZWFsIGVuZ2luZQpuaWdodCB0aW1lIGxpZ2h0aW5nCmJhY2tncm91bmQgZnVsbCBvZiBicm93biBmbG93ZXJzCnJlYWxpc3RpYyBhbmltZSBhcnRzdHlsZQpicm93biBmbG93ZXJzCm9uIGEgd2V0IGxvbmRvbiBzdHJlZXQKd2Fpc3QgaGVpZ2h0CmdyZWVuIHRvbmUKYXJjaGl0ZWN0dXJhbCB2aXN1YWxpemF0aW9uCnBob3RvZ3JhcGh5IHNob3QgYXQgYmx1ZSBob3VyCmJyaWdodCBzYXR1cmF0ZWQgY29sb3VycwozIDAgMCBtbSBsZW5zCmJlYXV0ZnVsIHZpZXcKaW4gcm9tYW50aWMgc3R5bGUKZ2VtbXkgd291ZCBiaW5uZW5kaWprCmRlY29tcG9zaW5nCm11ZCBhbmQgcnVzdHkgcGlwZXMKaW4gYSB0YWNvIGJlbGwKZWd5cHQgdGhlbWVkIGFydAplY2NoaQprbmVlcyB1cHR1cm5lZApiZWhpbmQgdGhhdCB0dXJxdW9pc2UgbW91bnRhaW5zCnJlZCBjdXJsZWQgaGFpcgoxNTA1CmxheWluZyBvbiBhIGJlZAptaWQtdHJhbnNmb3JtYXRpb24KZ3VzdGF2IGtsaW10IDQgawpkaW1seSBsaXQgc2NlbmUKdG9yY2hsaWdodC4gc2tldGNoIGFydC4gcm9vdHMKaGlnaCBxdWFsaXR5IHBob3RvcmVhbGlzbQpjYW5vbiAyMG1tIGxlbnMKY29tbXVuaXN0IGhhbW1lciBhbmQgc2lja2xlCnNwYWNleCBzdGFyc2hpcCByb2NrZXQgbGF1bmNoCnlhd25pbmcKb3VyIHBsYW5ldApiaXphcnJycnJlCmVhc3kKdmVyeSB0aW55CmNhc3VhbCBtb2Rlcm4gY2xvdGhpbmcKb24gY29zbWljIGNsb3Vkc2NhcGUKb3RzIHNob3QKdGhpcmQtcGVyc29uIHNob3QKZGlzYXBwZWFyCjAgMCBzIG1vdmllCmpwZWcgYXJ0ZWZhY3RzCjQgayBhbmltZQpiYW5hbmEgdHJlZXMKZHJhbWF0aWMgYnJ1c2ggcGFpbnRpbmcKZHJhbWF0aWMgc21va2UKd2l0aCBhIGJydWlzZWQgZmFjZSBhbmQgYnJ1aXNlcwpoYWlyc3R5bGUgcmVkIG1vaGF3awp3YXkgb2Yga2luZ3MKdmljdG9yaWFuIHN0ZWFtcHVuayBjaXR5IHZpc3RhCmJsYWNrIGFuZCB3aGl0ZSBzY2hlbWUKZGFyayBzdHJlZXRzCmFsbW9zdCBzbWlsaW5nCmluIHRoZSBlYXJseSBtb3JuaW5nCmhpcHBpZSBnaXJsCiEhISBoYXV0ZSBjb3V0dXJlISEhCmhlciBoYWlyIGlzIHNpbHZlcgpzdGFyayBjb250cmFzdGluZyBsaWdodGluZwphcm91bmQgZXZlcmxhc3RpbmcgZGFya25lc3MKYWJhbmRvbmVkIGRpcnR5IHRpbnkgcm9ja2V0IHNoaXAKdW5kZXJicnVzaCB3YXNoCm5pZ2h0bWFyZSBjcmVhdHVyZXMKZGFtYWdlZCBjYW1jb3JkZXIgdmlkZW8KZmFsbCBvZiBodW1hbml0eQphYmFuZG9uZWQgbWFsbCBhdCBuaWdodAp0b25lZCBkb3duCnBlcnJ5IHJob2RhbgpvdmVyZ3Jvd24gdmluZXMKYWJhbmRvbmVkIHdhciB0b3JuIHZpbGxhZ2UKc21va2UgaXMgZmxvd2luZwphYmJleSBsZWUga2Vyc2hhdyBhcyBlbW1hIGZyb3N0CmxpYmVyYXRpb24KZHJhbWF0aWMgZXZlcnl0aGluZwp0cmVuZGluZCBldmVyeXdoZXJlCmNvbG9yZnVsIHBhdHRlcm5zCmluIHN0eWxlIG9mIHNhbHZhZG9yIGRhbGkKaW4gc3R5bGUgb2Ygc2FuZHJvIGJvdHRpY2VsbGkKYWJzdHJhY3QgYXJ0IHJlcHJlc2VudGluZyBkYXRhCmRlbHVuYXkKcGhvdG9zeW50aGVzaXMKcmhpem9tYXRpYyBuZXR3b3JrCmRldGFpbGVkIGFuZCBjb21wbGV4CnllYXIgMyAwIDAgMAphYnN0cmFjdCBjb2xvcnMKYnJpbGxpYW50IG11c2V1bSBzY3VscHR1cmUKc3RlbGxhdGlvbgphZ2F0ZQpkYXJrIGFic3RyYWN0IGJhY2tncm91bmQKMyBkIGdyYWZmaXRpIHRleHR1cmUKaHlwZXJlYWxpc3RpYyBmcmVzaCBwYWludApleWVzIGNsb3NlZCBvciBub3QgdmlzaWJsZQphYnN0cmFjdCBmYWNlCmFic3RyYWN0IGZpZ3VyYXRpdmUgYXJ0CnBhdCBzdGVpciBhbmQgaGlsbWEgYWYga2xpbnQKcGFzdG9zZQpzaWx2ZXIgcmVkCnJlY3Rhbmd1bGFyIHBpZWNlIG9mIGFydApjaXJjbGUgcGl0IGRlbW9ucwp2aW9sZW50IHpvbWJpZSBkYW5jZQppbW1lbnNlIGNyb3dkIG9mIHBlb3BsZQp3aXRoIGEgd2hpdGUgbXVnCndoaXRlIHdpbmUgYm90dGxlCmFydCBkZWNvcgpoZWxlbmUgZnJhbmtlbnRoYWxlcgphd2FyZCBwYWludGluZwphYnN0cmFjdCBwYXR0ZXJuCmJsdWUhISB3aXRoIG9yYW5nZSBkZXRhaWxzCmFic3RyYWN0IHdhbGxwYXBlciBkZXNpZ24KbWVsdGluZyBpbnRvIHJpdmVycwptaWNoYWVsIHdoZWxhbiBhbmQgcGl4YXIKYnVpbGRpbmcgaW4gdGhlIGRpc3RhbmNlCmxlYXZlcyBhcyBkb2xsYXJzISEgZ2xvdwpteXN0aWNhbCBiYXJvcXVlCnBhc3RlbCBzeW50aHdhdmUKcmFkaWF0aW9uCnJlYWxpc3RpYyByZWZpbmUgZmxhdm9yCnNjaWVudGlmaWMgcmVzZWFyY2gKdGVjaG5vLXB1bmsKdGV4dHVyZSBvZiBvbGQgcnVzdCBhbmQgdHJhc2gKcmljaCBhenRlYyBqYWd1YXIgYXJtb3IKYWN0aW9uIG1vbWVudApjb21iYXQgYW5kIGFkdmVudHVyZSBwaG90b2dyYXBoeQphY3Rpb24gc3BvcnRzCmxvbmcgZmluZSBoYWlyCmNyYXp5IGFuZ2xlCmZvcmJpZGRlbiB0cmVlCndpbmUgYm90dGxlCmludHJpY2F0ZSBlbWJyb2lkZXJ5CmFkaGQKYW5hbG9nIGZpbHRlcgphcnQgbm91dmVhdSBpbmsgaWxsdXN0cmF0aW9uCmFkdWxhcmlhCmYvMTUKd2VhcmluZyBhIGRyZXNzIG1hZGUgb2Ygd2F0ZXIKYmxhY2sgcm9ja3MKZGVlcCBjYXZlCnB1cnBsZSB3YXRlcnkgZXllcwpkYXJrIG5hdHVyYWwgZ2xvdwpzaGFsbG93IHdhdGVyCjUgMCBzIHN0eWxlCmdyaWQgbGF5b3V0CnJpb3QgaW4gYSBjeWJlcnB1bmsgY2l0eQptYXggcHJlbnRpcwpuZW9uIGJsdWUgY29sb3IKc3R5bGUgb2YgYWVuYW1pIGFsZW5hCnNtZWx0ZXJzCmZvcmdlcwpjaGlzZWxlZCBhcmNoaXRlY3R1cmUKYnJhemllcnMKKCAoIHJhaWxpbmdzICkgKQp2ZW51cyBwcm9qZWN0CmZ1dHVyaXN0aWMgc2t5c2NyYXBlcgoxIDggMCAwJ3MKZGFyayBmYW50YXN5IGNpdHkKZnVyc29uYSB3ZWFyaW5nIHN0eWxpc2ggY2xvdGhlcwptYXR0ZSBiYWNrZ3JvdW5kLiB1bnJlYWwgZW5naW5lCmFlc3RoZXRpYyEhISEhISBmZW1hbGUgZ2VuaWUKZ3JlZW4ganVuZ2xlCmthcmEgd2Fsa2VyIGphbWVzIGplYW4KdmlicmFudCBjaHJvbWF0aWMgY29sb3JzCmJsYWNrIHN1cHJlbWFjeQpsb3Ugcm9tYW5vIGNvbG9yIHNjaGVtZQpzaXR0aW5nIG9uIGFuIHJveWFsIHRocm9uZQpjb2xvdXJmdWwgZGlnaXRhbCBhcnQKZGV0YWlsZWQgLSBpCnRoaWNrIG9pbCBwYWludGluZwpiZWF1dGlmdWwgaW50cmljYXRlIG9pbCBwYWludGluZwppIMOpcyBjb21wbGV4CmFpZGVuIGdpbGxlbgp1bmRlYWQgc29sZGllcnMgaW4gYmFja2dyb3VuZApvdmVybG9yZCEhIQpjaW5lbWF0aWMgZGlnaXRhbCBwYWludGluZwpwZXRlciBwYWxvbWJpCmZ1bGwgc29sZGllciBjbG90aGluZwptb3VudGFpbnMgb2YgbWFkbmVzcwpzY2ktZmkgZGlnaXRhbCBwYWludGluZwphaXJzaGlwIGluIHN0ZWFtcHVuawphayA0IDcKbGl0dGxlIHdpbmRvd3MKYWtpcmEgZnJvbSBjaGluZXNlIG15dGhvbG9neQp3aGlsZSBtYXJibGUKY2FydG9vbiBwb3J0cmFpdAphbGFpbiBkZWxvbiB2YW1waXJlIGh1bnRlcgphYXJvbiBob3JrZXkgc3R5bGUKYWxhbiB0dXJpbmcKdG9wIC0gZG93biBwaG90b2dyYXBoCmFsZ2VicmEKbGltZXN0b25lCmNvbGxlY3Rpb24gb2YgbG91dnJlCnRoZSBhbGJ1bSBpcyBjYWxsZWQgdHJpcG1hY2hpbmUKamFwYW5lc2UgbWFnYXppbmUgY292ZXJzCnBvcHBpbmcgY29sb3JzCmJvbGQgbGluZWFydAphcmNhbmUgYm9va3MKYWxjaGVteSB0YXZlcm4Kc2NhcnkgZGV0YWlsZWQgYXJ0IGluIGNvbG9yCnBob3RvcmVhbGlzdGljLiByZWFsaXN0aWMKOCBrIG9jdGFuZXJlbmRlcgpyb2JvdCBib2R5CnN1cnJlYWwgd29vZGN1dCBlbmdyYXZpbmcKbW9vbmJlYW1zCnBvbHluZXNpYW4gZ29kCm0uIGMuIGVzdGhlcgpjbGFzc2ljIGFsaWVuCmJsdWUgYW5kIHZpb2xldCBjb2xvciBzY2hlbWUKaGFybW9uaW91cyBjb2xvcnMKc292aWV0IGFwYXJ0bWVudAphbGllbiB3aWxkbGlmZQpzaGFycCBmb2N1cyAtIGMgMSA1LiAwCmFsaWVuIHdhcnJpb3IKc3VwZXJib3dsCmJpby1sdW1pbmVzY2VuY2UKdmVjdG9yIHN0eWxlIGRyYXdpbmcKcmFzdGEKaGlzdG9yaWNhbCBkb2N1bWVudGFyeQpnb3RoaWMtZnV0dXJpc3QgYXJjaGl0ZWN0dXJlCmFsaWVuIHRlbXBsZQphbGllbiB0cnVtcApncm91bmQgbGV2ZWwgY2FtZXJhIHZpZXcKb3JnYW5pYyBhcm1vcgpjbG90aGVzIG1hZGUgb3V0IG9mIGZsb3dlcgphbGllbiB3cml0aW5nCmNyb3duIG9mIGJvbmVzCmZyb3N0ZWQgdGV4dHVyZQpjb2xvciBvdXQgb2Ygc3BhY2UKYWxpZW5zIGludmFkaW5nIGVhcnRoCmRhcmsgKCBzcGFjZXNoaXAgKQpyZXN0b21vZApzcGVsbGphbW1lcgpjeWJlcnB1bmsgc2hhZGluZwptaWNoYWVsIGFuZ2VsbwphbGxlZ29yeSBvZiBtZXRhbW9ycGhvc2lzCjMgZCBzdHJ1Y3R1cmUKbWFyayBrb3N0YWJpCmxvdmVseSBkYXJrIGF1dHVtbiBwcmluY2VzcwphbHBob25jZSBtdWNoYQppbnRyaWNhdGUgcmVuZGVyCmZhY2UgY2VudGVyZWQKbWluaW1hbGlzdCBzdmcKYWx3YXlzIHRoZSBzdW4KZ3JhZmZpdGkgbW9uc3RlcgpldmlsLiB2aWJyYW50IGNvbG9ycy4gY3V0ZQpnb2xkIGRldGFpbGVkIGxpbmUgd29yawpwaW5rIGNvbG9yIHBhbGV0dGUKaGFzIHR3byBhZG9yYWJsZSBibHVlIGV5ZXMKZ3JhY2VmdWwgYXJtcwp3ZWFyaW5nIGEgdGllLWR5ZSBzaGlydAp3aXRoIHNob3J0IGhhaXIgd2l0aCBiYW5ncwpuaXRpZCBhbmQgZGV0YWlsZWQgYmFja2dyb3VuZApmb3Jlc3QgZHJhd2luZyBlbGVnYW50CmNpbm5hbW9uIHNraW4gY29sb3IKb2JqZWN0cyB3ZWxsIGxpdAp2aXJ0dWFsIGVuZ2luZSA1CmFtZXJpY2FuIHNvbGRpZXJzIGludmFkZWQgbWFycwpyYWlzZWQgYSBibG9vZHkgYW1lcmljYW4gZmxhZwphbWVyaWNhbiB2ZXRlcmFuIGdpCmFtb2xlZCB3YWxscGFwZXIKZXZpbCBtYWdpYwpyZXRybyBwYyBncmFwaGljcwpncmVlbiB0aWFyYQp2b2xjYW5pYwpyZXNvbHZlCnRlbGVwaG9uZSB3aXJlcwprZW5vcHNpYQpuaWd0aAphbiBhYmFuZG9uZWQgcm9jb2NvIHNhbG9uCmljZWxhbmRpYyBsYW5kc2NhcGUKc29sIGxld2l0dAptZWRpYSBmYWNkZQp0cmFuc3BhcmVudCB3YXRlcgpvZ3JlLWlzaCBqb24gdGFmZmVyISEhIGluIGEgYmFyCmh1bGtpc2gKWyB0aGVhdHJpY2FsIF0KYW4gYWVzdGhldGljIQpoeXBlciBkZXRhaWxlZCA4IGsKY2hpcXVlCm9uIGEgc3VwZXIgeWFjaHQKYW4gYWxpZW4gZHJpbmtpbmcgaG9yY2hhdGEKd2VpcmQgYWxpZW4gdHJlZXMKc3RyYW5nZSBjbG91ZHMKYW5hdG9taWNhbCBkaWFncmFtCmVkaXRvcmlhbCBtb2RlbAphbiBhbWF6aW5nIGxhbmRzY2FwZSBpbWFnZQplcGljIGZyYW1pbmcKcG9ydHJhaXQgY29sb3IgZ2xhbW91cgoxOTEwIHBob3RvZ3JhcGh5CmNvbG9tYmlhbiBqdW5nbGUKYW4gYW5jaWVudCBncmVlayBzdGF0dWUKYmxhY2sgYW5kIHRlcnJhY290dGEKbW91bnRhaW5vdXMgYmFja2dyb3VuZApodW5jaGVkIHNob3VsZGVycwphbiBhbmdlbCBvZiB0aGUgZGF3biBsaWdodApwaXhpdiBzdHlsZQphbiBhbmdlbCB3aXRoIGJveGluZyBnbG92ZXMKbmV0ZmxpeCBhbmltYXRpb24KbGFyZ2UgbW9vbgpmcmFuayBjaG8KZ2xvd2luZyBqZWxseWZpc2gKZGlzY28gYmFsbCBpbiBiYWNrZ3JvdW5kCmFuIGFudGhyb3BvbW9ycGhpYyBjeWJlcnB1bmsgZm94CmJydWNlIHBlbmluZ3RvbgozIGQgb2N0YW5lIHJlbmRlciA4IGsKeWFybgpyb3VuZCBkZXNpZ24KMyBkIHByaW50aW5nCmFuIGFybW9yZWQgY29yZSB2CmludHJpY2F0ZSBkZXRhaWxlZCBiYWNrZ3JvdW5kCmVsZWN0cm9uaWMgYnJhaW4KYW4gYXJ0aXN0aWMgcG9zZQpmaW5lIHBhaW50aW5nClsgZGlnaXRhbCBhcnQKc3ludGh3YXZlIGFydCBzdHlsZSBdISEKc2FrdXJhIHBpZ21hIG1pY3JvbgpyaW5nZWQgcGxhbmV0IGluIHRoZSBza3kKcmVhbGx5IHRyeWluZyB0byByaWRlIGl0CmN1dGUgYWRvcmFibGUKd2VhcmluZyBhIGNvY2t0YWlsIGRyZXNzCmxvb2tpbmcgb3V0IGF0IGEgcmVkIG9jZWFuCmdyZWF0IGhpZ2ggZGV0YWlscwpuYW9taSBjYW1wYmVsbApwYWxlIG11dGVkIHBhc3RlbCBtb29keSBjb2xvcnMKd2l0aCBhIHNub3d5IG1vdW50YWluIGFuZCBpY2UKZGF6emxlIGNhbW91ZmxhZ2UhIQp3ZWFyaW5nIGEgaG9zcGl0YWwgZ293bgp0ZWVuYWdlIGZlbWFsZSBzY2hvb2xnaXJsCm15c3RpY2FsIGFuZCBuZXcgYWdlIHN5bWJvbGlzbQp0YWtlbiBvbiBpcGhvbmUgMSAzIHBybwo0IGsgc2NhbgpiZXlvbmQgdGhlIGtub3duIHVuaXZlcnNlCjcgMCBzIHBhbGV0dGUKc3RyYW5kcyBvZiBmb2cKaW4gYSBkYXJrIGR1c3R5IHBhcmxvcgpncmV5IGhhaXJzCmNvb2wgZ2xhc3Nlcwo4IGsgdGV4dHVyZQpsb3cgZG9mCnNpeWEgb3VtCm91ZApjcnllbmdpbmcgOCBrIHVoZApwaWxscwpjYXRhY29tYiBpbiBiYWNrZ3JvdW5kCm9uZSBnaWFudCBvYWsKc3R5bGUgb2Ygc3RhciB3YXJzCmJ1YmJsZSBoZWFkCmF0IHN1bnNldCBpbiBhdXR1bW4Kc2t5c2NhcGUKc3ViamVjdCBtYWRlIG9mIGNyYWNrZWQgY2xheQpmb3JiaWRkZW4gYmVhdXR5CnJlZmxlY3RpdmUgdmlzb3IKbWFnaWNhbCBhdXJhIG9mIGluc2FuaXR5CjggayBoZwpkcmVhbSBwb29sCnN0cm9uZyBhdXJvcmEgb3ZlcmhlYWQKaW4gdGhlIGNvdW50cnlzaWRlCmluayBzcGxhc2gKZWVyaWUgdmlicmFuY3kKYW4gZXZpbCB2aWxsYWluJ3MgbGFpcgp2aXZpZCBzdGVhbXB1bmsgY29uY2VwdApvbWJyZQpzZWF0ZWQKaW5zaWRlIGEgZ3JhbmQgc3R1ZGlvCjgwbW0gbWFjcm8gbGVucwppbiBoZXIgZWFybHkgMjBzCmYyLjIKd2VhcmluZyBoZWVscyBhbmQgd2hpdGUgZHJlc3MKc3RyZWV0c2NhcGVzCmdpb3JnaW8gdmFzYXJpCmdsb29weQpzdXJyZWF1dGlzdGljCmxpZ2h0IGNvbWluZyB0aHJvdWdoCm1vbHRlbiBnbGFzcwpnZW9tZXRyaWMgZm9ybXMKaGlnaGx5IGRldGFpbGVkIHN5bW1ldHJ5CnRoZSBmaWZ0aCBzZXJpZXMKYXBvY2FseXB0aWMgY2l0eSBiYWNrcm91bmQKYnVybmluZyBjYXJzCndlYXJpbmcgZmxvcmFsIGNoaXRvbgp3aGl0ZSBiZWF1dGlmdWwgaGFpcgphbiBpY2VsYW5kaWMgbGFuZHNjYXBlCmRhcmsgb3JhbmdlIG5pZ2h0IHNreQpzYWx2aWEKZmxhdCBzeW50aHdhdmUgYXJ0IHN0eWxlCnByb2Zlc3Npb25hbCBjb29wZXJhdGUKcHVycGxlIGxpZ2h0bmluZwphbiBleG9za2VsZXRvbgppbiB0aGUgbWlkc3Qgb2YgaGlnaCBtb3VudGFpbnMKZG9vbSBldGVybmFsIGFydCBzdHlsZQptaWNyb24gcGVuIGRyYXdpbmcKaW5zaWRlIGEgZ3JhbmQgbWVzc3kgc3R1ZGlvCnNwYXJrbGluZyBibHVlIGV5ZXMKb2N0c25lIHJlbmRlcgpwaW5rIGZvZyBiYWNrZ3JvdW5kCnR3byBibHVlIGJyYWlkcwpsYXNlciBibGFzdHMKZGF2aW5jaSBza2V0Y2gKc2NpLWZpIGZpbG0gY29sb3IgcGFsZXR0ZQpzdGFyIHdhcnMgaW5zcGlyZWQKYmFjayAtIHZpZXcKYW5pbWUgY29sb3IgcGFsZXR0ZQpmYW50YXN5IGNvbG9yIHBhbGV0dGUKbW9lYml1cyBhbmQgYW5kcm9pZCBqb25lcwpwb2NrZXQgd2F0Y2gKYmxhY2sgYW5kIHdoaXRlIHBhaW50aW5nCm1ldGFsIHNraW4gd2l0aCBzb21lIHNjcmF0Y2hlcwpzeW50aHdhdmUgY29sb3VycwpyZWFsaXN0aWMgZmFudGFzeSBpbGx1c3RyYXRpb24KYW4gaXNvbWV0cmljIGZhbnRhc3kgbWFwCmV4cXVpc2l0ZSBsaWdodApjaW5lbWF0aWMhCmNsaW1iaW5nIHVwIGEgY2xpZmZzaWRlCnNhbnNrcml0CnNlZW4gdGhyb3VnaCBhIGthbGVpZG9zY29wZQpkdXNrIGF0bW9zcGhlcmUKc3BhcmtseSBkZXRhaWxlZCBjYXQgZXllcwpkcmFtYXRpYyBpbXBhY3RmdWwgY29sb3JzCnVzaW5nIHRoZSBkZWdyYWRlIHRlY2huaXF1ZQp3aGl0ZSBzbm93Cmluc3BpcmUgYW5kIG92ZXJjb21lCjE1MDAKY292ZXJlZCBpbiBkaXJ0CmFuIG9sZCBiYWxjayBhbmQgd2hpdGUgcGhvdG8KZm9nZ3kgcmFpbnkgZGF5CndoZXJlIHRoZSBwbGFuZXRzIGFyZSBjYW5keQpzb21lIHJheXMgb2YgbGlnaHQKZGVlcCBpbiB0aGUgZm9yZXN0Cm9sZCBjb2xvciBwaG90b2dyYXBoCmhlYWRsaWdodHMgc2hpbmUgd2l0aCBuZW9uIGxpZ2h0CmhpZ2ggcmVzb2x1dGlvbiEhCnN0dWRpbyBnaGlibGkgbGFuZHNjYXBlCmJsdWUgc2t5IHdpdGhvdXQgY2xvdWRzCnBlb3BsZSBhbmdsaW5nIGF0IHRoZSBlZGdlCmNyeXN0YWxsaW5lIHJvY2sKcGFydHkgaW4gZnJvbnQKcGFpbnN0YWtpbmcgZGV0YWlsCmJsYWNrIGxhY3F1ZXIKZ2xvc3N5IHNoaW55IHJlZmxlY3RpdmUKc3BsYXNoZWQgd2l0aCBncmFmZml0aSBhcnQKZ2lhbnQgbG90dXMgbWFuZGFsYQp0aXRhbml1bSBtZWNoYW5pY2FsIHBhcnRzCmJhbmRhZ2VzCml0YWxpYW4gcmVuYWlzc2FuY2UgYXJjaGl0ZWN0dXJlCmtpbGxpbmcgdGhlIGdyZWF0IG9uZXMKZWRvIGphcGFuCmFuIHVsdHJhIHJlYWxpc3RpYyA4ayBvY3RhIHBob3RvCm9mIGFuIGV2aWwgdHJlZSB3aXphcmQKb2YgYW4gZXZpbCBlbGYKbHVya2luZwpvb3ppbmcgYmxvb2QKY29tcG9zZWQgb2YgcmFuZG9tIGxpbWJzCmF1dHVtbiB3aW5kCm9sZCBncm93dGggZm9yZXN0Cm9uIHRoZSBtb3VudGFpbgphbiB2aWN0b3JpYW4gY2l0eQptaXJrYSBhbmRvbGZvCm9jdGFuZSByZW5kZXIgKyB1bnJlYWwgcmVuZGVyCmJsYWNrIGxhdGV4IHN1aXQKeW9sbwphbmFjb25kYQpyZXZlbmdlIG9mIHRoZSBzaXRoCnBvbGFyb2lkIHBob3RvIG9mIHRyYWlsZXJwYXJrCmdhbGF4aWVzIGFuZCBzdGFycyB2aXNpYmxlCmZpc2ggc3dpbW1pbmcKc2NyYXBib29rCmdlb21ldHJpYyBwYXR0ZXJucyBvcm5hbWVudHMKYXp1cmUgYmx1ZSBza3kKamlnc2F3CmV4Y2VlZGluZ2x5IGluc2FuZWx5IGludHJpY2F0ZQp3aXRoIG9yZ2FucyBsYWJlbGVkCjggZmVldCBmYWxsCnF1YWRydXBlZApleGFjdCBhbmF0b215CmFuYXRvbWljYWxseSBjb3JyZWN0IGhlYXJ0CnQgMSAwIDAKWyBmb3JnZXRmdWwgXQpib3RhbmljYWwgYXJ0d29yawpyb21hbmVzcXVlIHN0eWxlCmdsb3dpbmcgdGhpcmQgZXllCmFuY2llbnQgYXNpYW4gZHluYXN0eSBwcmluY2VzcwphbGV4IGdyZXkgYW5kIGd1c3RhdmUgZG9yZQphbmNpZW50IGJsYWNrc21pdGggZ29kCmFuY2llbnQgY2F2ZQptdXNldW0gaW5rIHBhaW50aW5nCnN5bW1ldHJpY2FsLiBzY2kgLSBmaQpjb2FzdGFsIGNsaWZmcwptYXJrZXRzCmFuY2llbnQgZGVtb24gc3VtbW9uaW5nCm9uIGRpc3BsYXkgaW4gYSBmb3NzaWwgbXVzZXVtCm15c3RlcmlvdXMgbWlzdApmbG93ZXJmaWVsZAphbmNpZW50IHdyaXRpbmcKb2l6eXMKdHJhdmVyc2UKYW5jaWVudCBsaWJyYXJ5CmFuY2llbnQgbWFndXMKYW5jaWVudCBtZWRpdGVycmFuZWFuIHZpbGxhZ2UKYW5jaWVudCBuZW9uIG1vbnN0ZXIgcG9ydHJhaXQKbm9zdGxhZ2lhCnNvbGlkIGFuYXRvbXkKd2l0aCBlbGVjdHJpYyBhcmMgZGV2aWNlCmJlYXV0aWZ1bCBtb3RocwptYWdpYyBlbmVyZ3kKcGl4ZWwgc29ydApyb2JlcnQgaHViZXJ0Cmdlb21ldHJpYyBsaW5lcyBpbiB0aGUgc2t5CmdpdGl0YWwgYXJ0CmJ1ZmZhbG8gY2hhc2UKYXJ0IG5vdXZlYXUgZmxvb3IgcGF0dGVybgpzY2lmaSBpbnNwaXJlZAphbmRyb2d5bm91cyBtYWxlCmFuZHJvZ3lub3VzIHBlcnNvbgppbiBzdHlsZSBvZiB0ZXJyeSByaWNoYXJkc29uCmFuZHJ6ZWogc3lrdXQKZm9nZ3kgbW9ybmluZwozZCBjZwphbmdlbCBmYWxsaW5nIHRvIGFuZHJvbWVkYQp0c3VndW1pIG9oYmEKbWF0ZXJuYWwKZXhwb3NlZCBnb2xkIHdpcmVzCmJydWlzZWQgZmFjZQpwb3N0YXBvY2FseXB0aWMgd29ybGQKYW5ncnkgZ29kIGFudWJpcwphbmdyeSBoaWdoIG1vcmFsIHNleHkgd2VyZXdvbGYKdmlkZW8gZ2FtZSBjaGFyYWN0ZXIgY29uY2VwdAphbmdyeSBzY2FybGV0dCBqb2hhbnNzb24KY3V0ZSBkZWNhcG9kaWZvcm1lcwpzcGlreSBibGFjayBoYWlyIGFuZCBkYXJrIHNraW4Kc2xhbnRlZCBhbWJlciBleWVzCnRhbGliYW4Kcm95IGtyZW5rZWwKY2hpbGRyZW4ncyBjYXJ0b29uCnJvdWdoIGJydXNoIHN0cm9rZXMKaGlnaCBhbmdsZSBjbG9zZXVwIHBvcnRyYWl0CmJsYWNrIGhhaXIgYW5kIGxhcmdlIGV5ZXMKYnJvd24gaGFpciBhbmQgbGFyZ2UgZXllcwp2aW50YWdlIHJldHJvIGNvbG9ycwphbm5veWVkIGV4cHJlc3Npb24KY29sb3JlZCBtYW5nYQpzb2Z0IGJsdXIgYW5kIGdsb3cKc2hvdW5lbiBqdW1wCmhvcm9yCm5vb2RsZXMKZ3VzdGF2IGtsaW10IHlvaCB5b3NoaW5hcmkKc2Nob29sIGN1cnJpY3VsdW0gZXhwZXJ0CnByb3BhZ2FuZGEgbWV0YWNlbnRyaXN0Ci1oIDk2MAp5YW5kZXJlIGludHJpY2F0ZQpub2lzZSByb2NrIGFsYnVtIGNvdmVyCnNwb3J0IHQtc2hpcnQKc3BvcnQgc2hvcnRzCjIgLSBiaXQKcm9sbGVyYmxhZGVycwp0b2t5byBiYWNrZ3JvdW5kCmZlbWluaW5lIGluIHBhc3RlbCBzaGFkZXMKZGFyayBibGFjayBkcmVzcwp3aGl0ZSBjbG90aGluZwp3aGl0ZSBzaG9ydHMgYW5kIGhpa2luZyBib290cwp0YXRhbWkgZ2FsYXh5CjNkIG1vZGVsaW5nIGNvbmNlcHQgc2hlZXQKdG9reW8gc3RyZWV0IGNpdHlzY2FwZQp1bnJlYWwgZW5naW5lOiAuMgpsYXJpZW5uZWNoYW4KYW9rYW1laQpva2l0YSBzb3Vnbwpicm93biBza2luLiBsaWdodCBtYWtldXAKZGFyayBsb25nIGhhaXIKd2hpdGUgZnJlbmNoIGJvYiBoYWlyc3R5bGUKc2hpcmUKcGhvdG8gOCBrCnJlZCBicm93biBhbmQgYmx1ZSBjb2xvciBzY2hlbWUKYW5pbWUgc3R5bGUgY2l0eXNjYXBlCnN1biBoaWdoIGluIHRoZSBza3kKdG9reW8gamFwYW4KZmxlZXRpbmcgZHJlYW0KbGF1bmNoaW5nIGEgc3RyYWlnaHQgYmFsbApiYXNlYmFsbCBiYXQKY2xhc3N5IHl1a2F0YSBjbG90aGluZwpoYXBweSBleWVzCnZvbHVtZXRyaWMgbW9kZWxsaW5nCmlra2kgdG91c2VuCmluIHRoZSBzdW5zZXQKYnJpZ2h0IGRheWxpZ2h0IG1vb2R5CmNlbCBzaGFkZWQhISEKYW5pbWUgc3RpbGwgaW1hZ2UKYW5pbWUgc2NyZWVuY2FwCnN0eWxpc2ggc3VpdAphaXJwbGFuZSBoYW5nZXIgYmFja2dyb3VuZAo4IDggbW0gbGVucwp3YWxraW5nIGF3YXkKcmVhbGlzdCBwcm9wb3J0aW9ucwp3b29kIGJyaWRnZXMKd2VhcmluZyBhbiBlbGVnYW50IG91dGZpdAphbmltb3JwaHMKYmVzdCBwaG90b2dyYXBoeSBvZiAyIDAgMiAxCmZpbmUgcHJvcG9ydGlvbmF0ZQphbm5hc29waGlhIHJvYmIgYXMgam9hbiBvZiBhcmMKZWNydSBjbG90aAphbm5pZSBmcm9tIGxlYWd1ZSBvZiBsZWdlbmRzCjUgMCBtbSBzb2Z0IGZvY3VzCmpvaG4gY2FwbGUKamVubmEgYmFydG9uCnJlYWxpc3RpYyBwYXJhbGxlbCBjb250ZW50CmxpZmUgc3RvcnkKcGlwYm95IGFydApmZWV0IGFuZCBoYW5kcwpzcHJhd2xpbmcKYW50ZWxvcGUgY2FueW9uCmFudGhvbnkgaG9wa2lucwpjdXRlIGFuZCBmcmllbmRseSBleWVzCmFudGhybyBnZWNrbwp3ZWFyaW5nIGEgc2NhcmYKaGF1bnRlZCBleWVzCm5ld3NwYXBlci4gc3RvY2sgY2VydGlmaWNhdGUKc2F1bmEKa25pY2trbmFja3MKc3R5bGUgb2YgbW9ydGFsIGtvbWJhdApoaWdoZXIgZGV0YWlsZWQgaWxsdXN0cmF0aW9uCmJhZGFzcyBjb21wb3NpdGlvbgphbnRocm9wb21vcnBoaWMgY2FjdHVzCnNhc2FpIHVrb24gbWFzYW5hbwpmZXVkYWwgamFwYW4gYXJ0CmRldGFpbGVkIGZlYXRoZXJzIGFuZCBmdXIKYW50aHJvcG9tb3JwaGljIGZlbWFsZSBjYXQKc3RhbmQKY2xvdWRzIGFyb3VuZApsYWRpc2xhcyBzdGFyZXZpY2gKMTkxMHMgZmlsbSBzY2VuZQoxOTMwcyBmaWxtIHN0aWxsCndlYXJpbmcgYSBjaGFpbgphbnRocm9wb21vcnBoaWMgaG9yc2UKYmVhdXRpZnVsIG5hdHVyYWwgcmltIGxpZ2h0CmVlcnkgbGlnaHQKa2Vtb25vCmRhcmtuZXNzIGF1cmEKaHVnZSBzcGlrZXkgdGVldGgKc3R5bGUgb2YgZGVuaXMgdmlsbGVuZXV2ZQpzbm93IGNhdmUKcG9zdCBhcG9jYWx5cHRpYyBiYWNrZ3JvdW5kCmFudGhyb3BvbW9ycGhpYyB3YXJyaW9yIHBpZ2xldApibGFjayBidWxsIHNhbXVyYWkKd2VhcmluZyBzdGVhbXB1bmsgdG9wIGhhdApjeWJlciBzdGVhbXB1bmsgOCBrIDMgZAphbnViaXMgaGVhZApsdXhvcgpuYXN1cwpiYWxhY2xhdmEgbWFzawphYnN0cmFjdGlvbiBjaGVtaWNhbHMKaWRlYWwgcGl4YXIgY2hhcmFjdGVyCmRldGFpbGVkIHBlbmNpbCBza2V0Y2gKYXBhcnRtZW50IGhhbGx3YXkKZXZlcnl0aGluZyBpcyBkZWFkCnBvc3QgYXBvY2FseXB0aWMuIG1ha290byBzaGlua2FpCmFwb2NhbHlzZQphcHBsZSBzdG9yZQphcXVhbWFuCmludHJpY2F0ZSBtYW5nYSBkcmF3aW5nCnNpbXBsZSB3aGl0ZSB2ZWlsCmFyYWJlbGxhIG1pc3RzcGxpdHRlcgptYWduaWZpY2VudCBvdmFsIGZhY2UKYXJhZ29ybiBtZWRpZXZhbCBhcm1vcgphcmNhZGUgY2FiaW5ldAphcmNhbmUgc3R5bGUgYm9tYgphcmNhbmUgd2l6YXJkIHggYm9iYSBmZXR0CmFyY2ggZW5lbXkKYmxhY2sgJiB3aGl0ZSBwaG90bwpnbG93aW5nIHNwaXJhbCBiYWNrZ3JvdW5kCnJvY2sgYXJ0IGRyYXdpbmdzCm1hbmltYWxpc3QKeWVsbG93IGFuZCBvcm5hZ2UgY29sb3Igc2NoZW1lCmluIGNodXF1aWNhbWF0YQphcmNoaXRlY3R1cmFsIHNrZXRjaApiZWF1dGlmdWwgZHJlYW15IGJyZWF0aHRha2luZwooKG92ZXJzYXR1cmF0ZWQpKQpjYW5keSBzaG9wIGluIGEgbWFsbApzaW11bGF0aW9uIG9mIHdhdGVyIHNwbGFzaGVzCmxlZ28gYXZhdGFyCmludHJpY2F0ZSB3aXJpbmdzCmJlYXV0aWZ1bCBhbmQgZ3JhY2VmdWwKbWVnYSBkZXRhaWxlZCA4awpmdW5ueSBjYW1lcmEgc2hvdAp3YXIgbWVjaHMgZmlnaHRpbmcKZGVzb2xhdGUgZ2xvb215IHBsYW5ldAp0ZWFycyBydW5uaW5nIGRvd24gZmFjZQpyb3VuZGVkIGFyY2hpdGVjdHVyZQphcm1vcmVkIQpndW5wb3dkZXIgc21va2UKbWFydG9uIGNzb2thcwphcm15IHBhcmFkZSBnbG9yaW91cyBtYXJjaApzY3JlZW4gc2hvcnQgZnJvbSBtYWZpYSAyCjEgOSAzIDAgc3R5bGUKZGluZXIgY2FmZmVlCnNvZnQgY3V0ZSBjb2xvcnMKYXJyZW5kYWpvIGluIGF2aWxhIHBpbmV3b29kCmRpYXRvbXMKc3VwZXJtb2RlbCBib2R5CnRoZSB5ZWxsb3cgY3JlZXBlcgpzbm93eSBwZWFrCmxha2Uga2F3YWd1Y2hpCmFtYXppbmcgYXdlc29tZSBhbmQgZXBpYwptb2JpdXMgc3RyaXAgc2hhcGVkIHBsYW5ldApwb3J0cmFpdCBjdXRlLWZpbmUtZmFjZQp0ZWFsIHRvbmVzCmFydCBkZWNvIG9mIGEgc3BhY2Ugd29tYW4KY3VydmUKb25seSBhcnQKaGVsbCBmaXJlCmlyb25wdW5rCnNrdWxsIGZhY2VzCmxvbmcgY3VybCBoYWlyCmZsb3dpbmcgZm9ybXMKYW5vbWFseQpyZWQgc2VsZWN0aXZlIGNvbG9yaW5nCmV2aWwgbWFzdGVybWluZApydXN0aW5nCmRhcmsgY2FzdGxlIGJhY2tncm91bmQKZ2lhbnQga2FpanUgZHJhZ29uIG1vbnN0ZXIKd2lkZS1zaG90cwpnaW5vcm1vdXMKNSBkYXJrIHRvbmUgY29sb3JzCnNoYWRlcyBvZiBwdXJwbGUKdnN0CnZpc3VhbCBwZXJjZXB0aW9uCmFydGlzdHMgcmVuZGl0aW9uCmN1YmUgc2hhcGVkCnNsaWdodCBjdXRlIHNtaWxlCnNpbHZlciBnYXJtZW50CnNtb290aCBjaGluZXNlIGRyYWdvbgpzY2ktZmkgc2tpbgpmbG9yYWwgcmVuZXdhbAp3ZWFyaW5nIGxhYnJhZG9yaXRlIHZlaWxzCmZ1dHVyaXN0aWMgc3BvcnQgYXJlbmEKd2xvcCBhbmQgcmhhZHMKbWF4IGJlZHVsZW5rbwpjYWJsZXMgYW5kIG1vbml0b3JzCmF3ZXNvbWUgY2F0CnBvcnRyYWl0IG9mIHNub29wIGRvZ2cKdGhlIGZlZWxpbmcgb2YgYm9yZWRvbQp0aGluIHJvdW5kIGdsYXNzZXMKcmVkIGFuZCBncmVlbiBob3VyCmRhcmtuZXNzIGRyYW1hdGljCmhhbGZ0b25lIHBhdHRlcm4KYnJpZ2h0IG1pY3Jvc2NvcGljIHZpZXcgcmVhbGlzbQp6b29tIGluCm1hbGNvbSBsaWVwa2UKNiAwIHMgZnJlbmNoIG1vdmllIHBvc3RlcgptYXN0ZXJwaWVjZSA7IGJlaGFuY2UgaGQKbGlxdWlkIHBhaW50aW5nCmdvbGRlbiBib2R5cGFpbnQKd29ybGQgYmVzdCBwaG90b2dyYXBoeQpzaWxrIGZsb3dpbmcgaW4gd2luZApkYXJrIGRyZXNzCnN5bW1ldHJpY2FsIGZyb250IHZpZXcKZWxpemFiZXRoIGphbmUgZ2FyZG5lcgp0b255IHJvYmVydCAtIGZsZXVyeQpmcmFuY29pcyAtIGVkb3VhcmQgcGljb3QKanVzdGluIHRvZGQKbWFwIGtleQpzdWdhciBzbm93Cmluc3RhZ3JhbSBwaG90byBhbWF6aW5nIHZpZXcKY3liZXIgbWVjaApqaW54IGZhY2UKamlueCBleHByZXNzaW9uCnN1Ym1hcmluZSBpbiBiYWNrZ3JvdW5kLiBkYXJrCm5vIGZsYWcgcGF0Y2gKYXN0cm9uYXV0IHJpZGluZyBhIGhvcnNlCmV4cGxvZGluZyBwbGFuZXQgaW4gYmFja2dyb3VuZAphc3Ryb25hdXQgc3RyYW5kZWQgb24gcGxhbmV0CmNyYXNoIGxhbmRpbmcKc3RhbmRpbmcgaW4gdGhlIGlzbGUgb2YgaGFycmlzCmF0dGFja2VkIHN1Ym1hcmluZSBpbiBiYWNrZ3JvdW5kCjQgayBodW1hbiBkZXRhaWxlZCEhIQpndGEgaXYgYXJ0IHN0eWxlCnN5bW1ldHJpY2FsIGZ1bGxib2R5IHJlbmRlcmluZwpmcm9tIGhlciBhbmtsZXMgdG8gaGVyIG5lY2sKY3JlZXB5IGR1bmdlb24KdG9ycmVudApjaGlzZWxlZCBmb3JtYXRpb25zCmJpZyBidWlsZGluZ3MKcm9ib3QgZG9nCmNhbXBzaXRlcwpoZWxpY29wdGVyIGZvb3RhZ2Ugb3ZlciBjaXR5CnJheWd1biBnb3RoaWMgc3R5bGUKYXRvbXMgY29sbGlkaW5nCmF0cm9waHkKcHJvdGV1cyB2dWxnYXJpcwpwaW5rIGFuZCB0ZWFsIGFuZCBvcmFuZ2UKcHMgMyBncmFwaGljcwpjcmF6eSBzZWR1Y3RpdmUgc21pbGUKdGhpZ2hzIGNsb3NlIHVwCnJlZCBkcmVzcyBhbmQgaGF0CmtuZWVsaW5nIGF0IHRoZSBzaGlueSBmbG9vcgprbmVlbGluZyEhCndyZW5jaAphdHRyYWN0aXZlIG1hdG9pIHJ5dWtvCnRoZXkgYXJlIGNsb3NlIHRvIGVhY2ggb3RoZXIKb3JuYXRlIGxvbmcgYmxvbmQgaGFpcgpmYWNlIGRvd24Kd2V0IHN3aW1zdWl0CmF0dHJhY3RpdmUgZ2lybCB0b21ib3kKYmxvd3Mgc21va2UKY2FzdGluZyBsaWdodCBtYWdpYwp0cm91Z2ggdGhlIG5pZ2h0CmJyb2Fkd2F5CmluIGEgcHViCnBvaW50aW5nIGhpcyBib3cKYXR0cmFjdGl2ZSB5b3VuZyB3b21hbgpjcmVzY2VudCBtb29uIGluIGJhY2tncm91bmQKdXBzaWRlIGRvd24gc3RyYW5nZXIgdGhpbmdzCmF1Y2tsYW5kIHNreSB0b3dlcgphdWRyZXkgaGVwYnVybiBpbiBhIGhvcnJvciBub3ZlbAphdXJpbAphZGQgdGV4dDogYXV0byByZXBhaXIKem9tYmllcyBhdHRhY2sKaW5kdXN0cmlhbCBkZXNpZ24gY29uY2VwdApmdXR1cmlzdGljIHBzeWNoZWRlbGljIGhpcHB5CnN0aWxsIGZyb20gbW92aWUgZHVuZQpjaW5lbWF0aWMgb3V0Zml0IHBob3RvCnJlYWxpc3RpYy4gZGV0YWlsZWQgZnVyCnN3ZWV0IG5pZ2h0IGFtYmllbnQKMzAwbW0gbGVuc2UKYmx1ZSBhbmQgcGluayBjb2xvcnMKaW4gdGhlIDE5ODYgdmVydCBjb250ZXN0CmluIGZyb250IG9mIGEgbGFyZ2UgY3Jvd2QKZHJhZ29uIHNoYXBlZCBoZWxtZXQKZHJhcGVkIGluIHNoaW55IG9pbApob3Jpem9udGFsbHkgbGVhcGluZyEhIQpuYXRpb25hbCBnZW9ncmFwaGljIHBob3RvZ3JhcGhzCmphcGFuIGhhcnZlc3QKYXJjaGl0ZWN0dXJlIGFuZCBtb3JlCmdyaW0gY29sb3JzCnBob3RvZ3JhcGggbWFnYXppbmUKd2VhcmluZyB0cmFuc2x1Y2VudCB2ZWlscwptYXN0b2RvbgpkcmFwZWQgaW4gc2hpbnkgZ29sZCBhbmQgc2lsdmVyCmRyYXBlZCBpbiB2ZWx2ZXQgYW5kIGZsb3dlcnMKa2luZyBjcmltc29uCmJ1eG9tIGNoZXN0ZWQKY2VsdGljIHN5bWJvbHMKem9vbSBpbiBvbiBmYWNlCm1lY2hhbmljYWwgZmFudGFzeQpsb3Vpc2UgZGFsaCAtIHdvbGZlCmNyb2NvZGlsZSByZXB0aWxpYW4gbW90aWZzCmF6dGVjIGVtcHJlc3MKYi4gYiBraW5nCndpdGggdmVyeSBoaWdobHkgZGV0YWlsZWQgZmFjZQpiYWJvb24gd2VhcmluZyBhIHN1aXQgYW5kIHRpZQpzdGFuZGluZyBpbnNpZGUgb2YgYSBjaHVyY2gKY2hpbGwgb3V0CmNvbmNlcHQgYXJ0IGggOCAwIDAKdmlldyBmcm9tIGEgbmV3cyB0cnVjawpnb29kbmVzcwpzdHVkaW8gYXJ0CmZpbG1lZCBpbiB0aGUgc3R5bGUgb2Ygam9obiB0b2xsCm1hZ2ljIHVuaWZvcm0gdW5pdmVyc2l0eQpmYWNpbmcgYXdheSBmcm9tIGNhbWVyYQp3aXRoIGEgc2xlZWsgc3BvaWxlcgpnZXJtYW4gZm9yZXN0CnBlcmV6IGZhYmlhbgpoZWxtZXQgaW5zdGVhZCBvZiBhIGhlYWQKaW5zaWRlIGEgY2FzdGxlIGxpYnJhcnkKc2luZ2xlIHNpbGhvdWV0dGUgZmlndXJlCmJhY2tyb29tcyBvZmZpY2Ugc3BhY2UKcG9vbHJvb21zCnJlZmVyZW5jZSBtb2RlbCBzaGVldApiYWRtaW50b24Kd2hpdGUgc2FuZHkgYmVhY2gKYWlyYnJ1c2ggZGlnaXRhbCBvaWwgcGFpbnRpbmcKc2NpIC0gZmkgY2l0eQpwc2lvbmljCmNoYXJhY3RlciBjbG9zZSB1cApzdW1tb25pbmcgdW5kZWFkIGZyaWVuZHMKbGlnaHQgY29sb3IgcGFsZXR0ZQpvcHRpY2FsIGlsbHVzaW9ucwpicmVhdGh0YWtpbmcgcmVhbGlzdGljCm1lc2ggcm9vdHMuIGNsb3NldXAKYmFuZCBvZiBicm90aGVycwpiYW5pc2ggZmljdGlvbiBhbmQgaWxsdXNpb24KZ3Jvc3MgYWxpZW4Kc2VzYW1lIHN0cmVldCAxIDkgNyA4CnN0eWxlIG9mIGRhIHZpbmNpCmJhcmJhcmlhbiBjbGFzcwpsYXN0IGRheSBvbiBlYXJ0aApzdGVhbSBwaXBlcwpnb3RoaWMgcXVhcnRlcgptb2Rlcm5pc3QgYnVpbGRpbmdzCnN5bW1ldHJpY2FsIGJlYXV0aWZ1bAphbmNpZW50IHZpa2luZyB3YXJyaW9yCnN3aXJsaW5nIHJlZC1jb2xvcmVkIHNpbGsgZmFicmljCndpdGNoY29yZSBjbG90aGVzCmluc2lkZSBhIHJ1aW5lZCBhYmJleQp2aWJyYW50IGxpZ2h0CnN1bnJheXMgYnJlYWtpbmcgdGhyb3VnaCBjbG91ZHMKd2l0aCBtdXN0YWNoZQphbmltZSBtYWlkIG5hemkgc3MgbWlsaXRhcnkKYmxhY2sgaG9sbG93IGV5ZXMKYmFyb3F1ZSBwb3J0cmFpdApodW1hbiBtYWNoaW5lIGludGVyZmFjZQp3ZWFyaW5nIGJhc2tldGJhbGwgamVyc2V5Cm51Y2xlYXIgd2FzdGVsYW5kCnNpdHVhdGlvbmlzdCBpbnRlcm5hdGlvbmFsCmJsYWNrc21pdGggcHJvZHVjdCBkZXNpZ24KY2Fub24gb24gY2hlc3QKbWluaW1hbGlzdCBpbnRlcmlvciBkZXNpZ24KZXZlcnlvbmUgaGF2aW5nIGZ1bgpmZW1lbmluZSBib2R5Cmx1eHVyeSBpdGVtIHNob3djYXNlCnN1cGVyIHZpbGxhaW4KbmVjcm9ub20gdgp3aW1tZWxiaWxkZXIgcHV6emxlIGJvb2sKaHVtYW4gYWN0cmVzcwpzdGVyaWxlIG1pbmltYWxpc3RpYyByb29tCnNoYWZ0IG9mIGxpZ2h0CmluIC0gZ2FtZQpiYXR0bGUgb2Yga2luZ3MKc2VnbWVudGVkIGFybW9yIGFuZCBzYXNoaW1vbm8KdW5mYXRob21hYmxlCnJlZCBnb2xkIGNvbG9yIHBhbGV0dGUKYnJva2VuIHJvYWQKZGVzZXJ0cHVuawpiYXVoYXVzIGFyY2hpdGVjdHVyZQpjaGF1dmV0IGNhdmUgYXJ0Cmhpc3RvbG9naWNhbAphbGV4IGdyZXkgYW5kIHRpbSBoaWxkZWJyYW5kdAppbmZpbml0ZSBjb25zY2lvdXNuZXNzCndhcmhhbW1lciA0MDAwMCBpbiBpc2xhbQptYXJqYXJ5YXNhbmEgYW5kIGJpdGlsYXNhbmEKYmVhdXRlb3VzIHN1bXB0dW91cwpuZWFyIGxha2UgYmFpa2FsCmxhc2VyIGNhbm5vbgpidXQgYXMgYSByZWFsIGxpZmUgcGhvdG9ncmFwaApiaWcgcGVhci1zaGFwZWQgaGVhZApuaW5qYSB3aXRoIGthdGFuYSBvZiB3YXRlciB3YXZlCmRlbGljYXRlIGFuZCBwcmVjaXNlIGJydXNod29yawpiZWF1dGlmdWwgYWxpc29uIGJyaWUgbWFnaWNpYW4Kam9zZXBoIGZhcnF1aGFyc29uCmJlYXV0aWZ1bGx5IHBhaW50ZWQKZ2xvd2VyaW5nIGp1ZGdpbmcgZXllcwpoeXBlcnJyZWFsaXN0aWMgYm9uZSBzdHJ1Y3R1cmUKd2FybSBjb2xvciB0byBtb3ZlCmFzIGFuIGFudGhyb3BvbW9ycGhpYyBkcmFnb24KZWxlZ2FudCBwaG90b3JlYWxpc3RpYyBjaW5lbWF0aWMKZ29sZCB3aW5ncwp2aWxsYWdlIGluIHRoZSBiYWNrZ3JvdW5kCnN0YXIoc2t5KSBzdGFycnlfc2t5CmJlYXV0aWZ1bCBhbmltZSBnaXJsIHNxdWF0dGluZwpzaWJsaW5ncwp3ZWFyaW5nIGxhYiBjb2F0IGFuZCBnbGFzc2VzCmhvbGRpbmcgYSBjbGlwYm9hcmQKdGlnaHQgYmxhY2sgdGFua3RvcAp0b3JpaQpuZW9uIGxpZ2h0cyBvdXRzaWRlCmJlYXV0aWZ1bCBhbmltZSBzY2VuZXJ5CmxvbmcgZmxvd2luZyBmYWJyaWMKY2FyYXZhZ2dlc3F1ZSBzdHlsZQpnaW92YW5uaSBiYWdsaW9uZQpnZXJhcmQgdmFuIGhvbnRob3JzdApiZWF1dGlmdWwgYXV0dW1uIHNwaXJpdAp0aHJleWRhCm1vdmllIHBvc3RlciBjaGFyYWN0ZXIKbW9yb2NjYW4gdGlsZSBhcmNod2F5cwpiZWF1dGlmdWwgYmxhY2sgYmx1ZSB5ZWxsb3cKd2F2eSBoYWlyIGNvbWJlZCB0byBvbmUgc2lkZQpoaWdobHktZGV0YWlsZWQgYW5kIGludHJpY2F0ZQpmb3Jlc3QgZmFlCndoaXRlIHdpdGNoCmJhcnJ5IHNtaXRoCmhhbmRsaW5nIHJpZmZsZSBvbiBjaGVzdApzaG9vdGluZyBwb3NlCnN5bW1ldHJpY2FsIHBhdHRlcm5zCm9jdGFuZSByZW5kZXIgYWVzZXRoaWMKYmVhdXRpZnVsIGNlbGVzdGlhbCBtYWdlCmJhbGxldCBzdHlsZSBwb3NlCnRyZWFkaW5nIGFib3ZlIGNhbG0gd2F0ZXIKdHJlYWRpbmcgb24gY2FsbSB3YXRlcgpmb2N1cyBvbiBnaXJsCmluIGZvcmJpZGRlbiBjaXR5IHJhaW5uaW5nCmZsb3dlcnMgc2VhIGV2ZXJ5d2hlcmUKYmVhdXRpZnVsIGNpbmVtYXRpYyBwb3N0ZXIKYnJpbGxpYW50IGJsdWUgZmxvd2luZyBoYWlyCnF1YWxpdHkgY2luZW1hIG1vZGVsCmh5cGVyZGV0YWlsZWQgb2lsIHBhaW50aW5nCnNuYWtlIHNjYWxlcwpleWViYWxsCmFsbCAtIHNlZWluZyBleWUKbWF6em9uaSBtYXJjbwpiZWF1dGlmdWwgaGlnaCBjb250cmFzdCB3b29kY3V0CmFic3RyYWN0IHBzeWNoZWRlbGljCnNtaWxlZWVlZWVlCmJyYWlkZWQgaGFpciB3aXRoIHJvc2VzCmVsIGRpYSBsb3MgbXVlcnRvcyEKYmVhdXRpZnVsIGN1cnZ5IGZlbWFsZQpidXJzdCBvZiBwb3dlcgpnaWFudCBnbGFzcyBkb21lIGluIHNwYWNlCmNvbG9yZnVsIHJlZmxlY3RpdmUgZXllcwpmdWxsIHJvdW5kIGZhY2UhCm9sZCBhYmFuZG9uZWQgY2FyIHNpbmtpbmcKc2t1bGwgb24gdGhlIHNjcmVlbgpmb3VyIGxlYWYgY2xvdmVyCnRyYWRpdGlvbmFsIHRhdHRvbwpyYWRpYWxseSBzeW1tZXRyaWNhbApoYXdrIHdpbmdzCmFlc3RoZXRpYyBhd2FyZCB3aW5uaW5nIGFuaW1lCndlbGwgY2VudGVyZWQKY293b3JrZXJzCnN0YXJidWNrcyBhcHJvbnMgYW5kIHZpc29ycwphdCB0aGUgY291bnRlcgpleHF1aXNpdGUgbWFyYmxlIGRldGFpbHMKY293Ym95IHBsYWd1ZSBkb2N0b3JzCm1hcmJsZSBzY3VscHR1cmVzCmJlYXV0aWZ1bCBkcmF3aW5nIHN0eWxlCm9jdGFuZSBzaGFycCBjaW5lbWF0aWMKaGlnaGxpZ2h0IHNjZW5lIG9mIHRoZSBtb3ZpZQpwaXhpZSBoYWlyY3V0IHdsb3AKZmVsaWNpYSBkYXkKY29udHJhc3RlZCBjb2xvcgpsb3RyIGZhbmFydApkYXJrIHJpdHVhbCBteXRoCnB1ZmZzIG9mIHRoaWNrIGJsYWNrIHNtb2tlCmJsaW5rCmlzb2xkZQpzdXBlciBicmlnaHQgY29sb3JzCmNvbG9yZWQgc3BvdHMKcGFpbnRpbmcgY29tZSB0byBsaWZlCmJlYXV0aWZ1bCBmYWNlIHdvbWFuCnN0dW5uaW5nIGVsZWdhbnQgcG9zZQpiaXRjaGVzIGJyZXcKbWlsZXMgZGF2aXMKbGlxdWlkIHJlZnJhY3Rpb24Kc3ByYXlpbmcgYmxvb2QKbGFzZXIgYmVhbSBleWVzCmJvZHkgcGFpbnRlZCB3aXRoIGJsYWNrIGZsdWlkCmxpcXVpZCBtYXJibGUgZmx1aWQgcGFpbnRpbmcKY292ZXJlZCBpbiBmdWxsIHNpbHZlciBhcm1vcgpzZWR1Y2luZyBleHByZXNzaW9uCmJlYXV0aWZ1bCBmZW1hbGUgcHVuawpiZWF1dGlmdWwgZmVtYWxlIHNvcmNlcmVzcwptb2RlbGxpbmcKaGFuZHMgcmVhY2hpbmcgZm9yIGhlcgpiZWF1dGlmdWwgZmVtYWxlIHdpY2tlZCB3aXRjaApiZWF1dGlmdWwgZmVtYWxlIHdpdGNoCnZlbml6aWFuIGVyYQpzbW9rZSByaXNpbmcKcGxhbm5lciBzdGlja2Vycwp2aXZpZCBwYXN0ZWwgY29sb3JzCmhhbmRzIHJhaXNlZApodW1hbiBib2R5IGFuZCBoZWFkCmdsb3dpbmcgd2hpdGUgbWVjaGFuaWNhbCBleWUKYmVhdXRpZnVsIGZ1dHVyaXN0aWMgaGltYmEgd29tYW4KaG9sZGluZyBib29rcwp2b2x1bWV0cmljIGZvZyBhbmQgbGlnaHRpbmcKYmVhdXRpZnVsIGdpcmwgb24gdGhlIGhvcml6b24KYW5pbWUgYW5kIG1hbmdhIHN0eWxlCnJhZGlhdGluZyB3aXRoIHBvd2VyCmhhbmQgZHJhd2luZwpyb2NrIGNsaW1iZXIKaW4gYmVyc2VyayBtYW5nYQpmZWF0dXJlZCBpbiBhcnQgbWFnYXppbmUKc3RhbmRpbmcgb24gYSBsb3R1cwpzY3JhcHlhcmQgYXJjaGl0ZWN0dXJlCmxpc3RlbmluZyB0byBnb2RseSBtdXNpYwpvdmVyZ3Jvd3RoIG9mIGdyYXNzCm5vIHNwZWVjaCBidWJibGVzCmxvbmcgd2hpdGUgaGFpciBhbmQgYmFuZ3MKaGVhcnQgLSBzaGFwZWQgZmFjZQpjYWtlIGluIGhhbmQKYmxhY2sgZ29sZCBjb2xvciBzY2hlbWUKdGhlIHN0eWxlIG9mIGFuZHJlYXMgcm9jaGEKYmVhdXRpZnVsIGlzb21ldHJpYyBnYXJkZW4KdHJlZXMgYW5kIHBsYW50cwpwYXN0ZWwgY29sb3IgZ3JhZGllbnRzCmxvbmVseSB0cmVlCndlYXJpbmcgaG9uZXkKcGVyc29uYQpzdGVpbnMgOyBnYXRlCnBsdW1lcmlhCmxvb3NlIHdoaXRlIGJyYWlkCnRvd24gY2VudGVyIGJhY2tncm91bmQKbm8gaG9ybnMKYmFja2dyb3VuZCBoZWF2ZW5seSBza3kKaGQgZGlzcGxheQpmYW50YXN5IHB1ZmZ5IHNreQptYXR0ZSBwYWluaW5nCnZlcnkgZWxlZ2FudCBmZWF0dXJlcwpiZWF1dGlmdWwgbWV4aWNhbiB3b21hbgpwaWdneQpsdXNoIHRyZWVzIGFuZCBmbG93ZXJzCmRhdGUgdHJlZXMKZW1tYSByb2JlcnRzCmJlYXV0aWZ1bCBuZWNyb21hbmNlcgpibHVlIHNoYXJrCmNvbG91cmZ1bCBhcHBsZXMKYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UgZ29kCmJsYWNrIHBlb25pZXMKaGlnaCBkZXRhaWwgMTAyNAp0d28gbWFnbmlmaWNlbnQgamVsbHkgZmlzaApyZWR3b29kIGZvcmVzdApjb21ldApiZWF1dGlmdWwgcGFpbnRpbmcgb2YgYSB0YWxsCnN0cm9uZyBmYW50YXN5IGtuaWdodApsb3ZlY3JhZnRpYW4gZWxkcml0Y2ggaG9ycm9yCnRydWNrZXIgaGF0CmluIHN0eWxlIG9mIGxvcmQgb2YgdGhlIHJpbmdzCndpdGggYSBjcm93biBvZiBza3VsbHMKaXJpcyBodW1hbidzIGV5ZSBwaG90bwptYWRlIG9mIGJvdWxkZXIgb3BhbApyaWdodCBzaWRlIHByb2ZpbGUKYmVhdXRpZnVsIHBpY3R1cmUgb2Ygc3RyYXkKa2FpIHZlcm1laHIKc3RlZmZlbiBzYXVlcnRlaWcKc3ZlbmQgc21pdGFsCigoKGZsb3dlcnMgb24gaGFpcikpKQpjb250b3VyIGhhdGNoaW5nCnBpZXJjaW5ncyByZXNlbWJsaW5nIHBsYXNtYSBqZXRzCiggd2FpdHJlc3MgKSBnaXJsCmdvdGggcHVuayBjbG90aGVzCnN1YmR1ZWQgdG9uZXMKY2hhb3RpYyBzd2lybGluZyBmZXJyb2ZsdWlkcwpyaWRpY3Vsb3VzIHNtaWxlCmNhYmxlIHdpcmVzIGFzIGhhaXIKd2l0aCBodW5kcmVkcyBvZiBuZXR3b3JrIGNhYmxlcwpnbG93aW5nIGxpZ2h0ZW5pbmcKaW4gYSBjb2ZmZWUgc2hvcApzdHVubmluZyBzdW5zZXQKYmVhdXRpZnVsIHJlbmRlciBvZiBhIGZhaXJ5dGFsZQpodW50ZXJzCmJlYXV0aWZ1bCByZW5kZXIgb2YgdGFuZyBkeW5hc3R5CmNvbWljIGJvb2sgZHJhd2luZwpwYWxsYWRpdW0gdmVpbnMKbGF5aW5nIG9uIHJvc2VzCmNvenkgbGl2aW5nIHJvb20gaW50ZXJpb3IKYmVhdXRpZnVsIHNleHkgd29tYW4gcGhvdG8Kd2V0YSBzdHVkaW9zCmVuZCBvZiBkYXkKd2hpdGUgc2hpbnkgc2tpbgp3aXRoIGEgd29vZGVuIHN0dWZmCmtpZHMgcGxheWluZwprYWNwZXIgbmllcG9rb2xjenlja2kKYmVhdXRpZnVsIHN1cnJlYWwgcGlzdG9sCm1pbmlhdHVyZSBvcmlnYW1pIGZpZ3VyaW5lCmhlciBmYWNlIGlzIGEgbWF1dmUgZmxvd2VyCmJlYXV0aWZ1bCB2YW1waXJlIGZlbWFsZSBxdWVlbgphd2FyZGluZyB3aW5uaW5nCmxpZ2h0IHJheXMuIHJlZnJhY3Rpb24Kd2luZGluZyBicmFuY2hlcwpnbG93aW5nIGZpcmVidWdzCnN3ZWVwaW5nIG9tYnJlIGJsb25kZSBoYWlyCm1hZ2ljIGFtdWxldApkbXQgZ29kZGVzcwpiZW5kb3ZlciBwb3N0dXJlCmJsdWUgYmlraW5pCmFsZnJlZCBoaXRjaGNvY2sKY3VybHkgcGl4aWUgaGFpcgpzcGFyc2UgZnJlY2tsZXMKcXVlZW4gb2YgdGhlIGdob3N0cwpzcXVpc2gKY2xvc2V1cCEhISEhIQptYWNybyEhISEhIQozIDUgbW0hISEhISEgbGVucwppbmRpc3Rpbmd1aXNoYWJseSB1bmlxdWUKYmVhdXRpZnVsIHlvdW5nIGFzaWFuIHdvbWFuCmhvbHkgaW1hZ2VyeQp3ZWFyaW5nIGxvbmcgZ293bgpyZWQgaGFpcmJhbmQKYmVhdXRpZnVsIHlvdW5nIGdpcmwKYmxhZGVydW5uZXIgY2l0eSBsYW5kc2NhcGUKc2V4eSBob3QgYm9keQpiZWF1dGlmdWwgem9tYmllCnN0dWRpbyBsZXZlbCBxdWFsaXR5CmRlZXAgYW5kIGRlbnNlIGNvbG9yYXRpb24KbXlzdGVyaW91cyBjb2ZmZWUgc2hvcCBnaXJsCmhhbGYgZWxmIHdvbWFuCndpdGggdGhlIGJvZHkgb2YgYSBnb2RkZXNzCm1peGVkIHJhY2Ugd29tYW4KbG9uZyBsdXh1cmlvdXMgZmxvd2luZyBnb3duCnNpc3RlcnMKeWFzdXNoaSBuaXJhc2F3YQpzY2kgZmkgc2V0dGluZwpkcmV3IGJhcnJ5bW9yZQpiZWF1dHkgd29tYW4gaW4gaG9sb2dyYW1zCnRyYW5zZm9ybWVycyBtb3ZpZSBzdHlsZSB0ZWNoCjEgMyA1IG1tISEKY3liZXJuZXRpYyBnbG93aW5nCmR5bmFtaWMgbGluZXdvcmsKdGl0YW5pdW0gYnVmZgpkZW5zZSBsaW5ld29yawpiZWRyb29tIGV5ZXMKamFwYW5lc2UgdmFzZQpmbG9vciB0byBjZWlsaW5nIHdpbmRvdwpiZWRzIG9mIHNoYWRvd3MKaHlwZXJyZWFsIC0gaCA2IDQgMApiZWlzdGxlIGhhbGxvd2VlbiBkZWNvcgpndWNjaSBnbGFzc2VzCnBvcnRyYWl0IGhkCmJlbiBzaGFwaXJvCmZ1bGwgc2hvdCBwaG90bwplbWJlZGRlZCB3aXRoIGdlbXN0b25lcwpiZW5qYW1pbiBuZXRhbnlhaHUgc2t5ZGl2aW5nCmJlcmxpbiAxIDkgOCAyCmZpcmUgZW1ibGVtIHRocmVlIGhvdXNlcwpiZXN0IGZyaWVzCmJlc3QgbWF5b25uYWlzZQpkYWZ0IHB1bmsgc3R5bGUKZGV0bW9sZApjaGFybGVzIG1hdXJpY2UKZnJlZGVyaWNrIGp1ZGQgd2F1Z2gKYmV0dWxhIHBlbmR1bGEKNzBzIHBzeWNoZWRlbGljIHN0eWxlCmFuY2llbnQgc29sZGllcgpjbG9zZXVwIGZhY2VzCnN2ZyBjb21pYyBzdHlsZQpiZWF0ZW4gY2l0eS4gbmVvIG5vaXIgc3R5bGUKZHJlZGdlZCBzZWFiZWQKbmlnaHRtYXJlIGRpZ2l0YWwgYXJ0CmJhdWhhdXMgcG9zdGVyCmNvbnRyb2wgdGhlIGdhbWUKaG9sZGluZyBtZWF0bG9hZgptZWF0bG9hZgptb3JhbmRpIGNvbG9yIHBhbGV0dGUKYmlnIGZvb3QKbWFueSBzcGVha2VycwpyYXBlciBhcnRpc3QKOGsgY2luZW1hdGljIGxpZ2h0aW5nCm1hdGVqIOKAmHJldHJv4oCZIGphbgpiaWcganVpY3kgYnVyZ2VyCmZseWluZyBpbnRvIHRoZSBza3kKcG9zdGVyIHRvdXIKZXhxdWlzaXRlIGxpZ2h0bmluZwp3aGl0ZSBmb2FtCnllbGxvdyBvcmFuZ2UKbGlnaHQgYnJvd24gY29sb3JzCmJpZyBvcGVuIGJvb2sKZG9uIHF1aXhvdGUgbGVmdCB0aGUgYm9vawpzcXVhcmUgYmFja3BhY2sKZ2FsYWN0aWMgbmV3cwpza3kgaW4gYSBiYWNrZ3JvdW5kCmJpZyB0cmFpbiBpbiBzcGFjZQpnYW5ncmVsCmNpcmNsZSBvZiB0aGUgY3JvbmUKZ29vZnkgc21pbGUKZ29sZCBkYXBwbGVkIGxpZ2h0Cm1vdGlvbmIgYmx1cgptb2Rlc3QgZmxvd2luZyBnb3duCnNwYXJrbGluZyBuZWJ1bGEKYmlvLWluc3BpcmVkIGRlc2lnbgpwc3ljaGVkZWxpYyBjbG91ZHMKYmVhdXRpZnVsIGludHJpY2F0ZSBtYXN0ZXJwaWVjZQpncmVhdCBvbGQgb25lCmJpb2x1bWluZXNjZW50IGZvcmVzdCBmbG9vcgppbmRpYW4gZ29kCnNlYXJjaGxpZ2h0CnBob2VuaXggaGVhZC4gYnVybmluZyB3YXgKaHlwZXJkZXRhaWxlZCBmYW50YXN5IGNoYXJhY3RlcgpoeXBlciByZWFsaXN0aWMgcmVmbGVjdGlvbnMKYmlyYgp3aWRlIHJvYWRzCmNlbnRyYWwgZmFybQphd2FyZCB3aW5uaW5nIDRrCmJpcmRzIG9uIGNoZXJyeSB0cmVlCnVsdHJhIC0gZnV0dXJpc3RpYyBhcmNoaXRlY3R1cmUKeW91bmcgc2Vuc3VhbCBncmFjZWZ1bAplZ3lwdGlhbiBwcmluY2Vzcwpzd2ltbWluZyBpbiBvY2VhbgpyZWZlcmVuY2UgYXJ0CmJsYWNrIGFuZCB3aGl0ZSBtYW5nYSBwYWdlCmhpZ2hseSBkZXRhaWxlZCBwZW4Kc2hvdWpvIHJvbWFuY2UKc2l0dGluZyBvbiBiZW5jaAoxIDkgNCAwIHMgZmlsbSBub2lyCnN0YW5kaW5nIGluIHRoZSBmb3JyZXN0CnNwb3RsaWdodCBmcm9tIGFib3ZlCmYgNiBhcGVydHVyZQpydXNzaWFuIGNyaW1pbmFsIHRhdHRvb3MKdmFtcApzdHlsaXNlZCBjb21pYyBhcnQKZnJhbmsgZnJhemV0dGEgbWFuZ2Egc3R5bGUKY2ltZW1hdGljCiggKCAoIHNrZWxldG9uICkgKSApCmJsYWNrIGNhbnZhcwpibGFjayBleWVkIGtpZHMKaW4gdGhlIGJlYWNoCmF3YXJkIC0gd2lubmluZyA0IGsgcGhvdG9ncmFwaHkKZWxlY3RyaWMgb3JhbmdlIGdsb3dpbmcgbGlnaHRzCmhpc3RvcnkgZHJhbWEKd2luZG93IHdpdGggcmlvIGRlIGphbmVpcm8gdmlldwpzdHVkeW5nIGluIGJlZHJvb20KZW5kbGVzcyBlbXB0eSBvZmZpY2UgYnVpbGRpbmcKY3liZXJwdW5rIHBlYXJsIGFybW9yCmNvbG9yZWQgc21va2UgY2xvdWRzCmxvb2tzIGxpa2UgYSB0cmVlIHNpbGhvdWV0dGUKanVsaWEgaGlsbApzdGFyc2hpcCBjYXJnbyBiYXkKbmF0dXJlIHNjZW5lcnkKZ25hcmxlZCBmaW5nZXJzCmludGVuc2Ugd2hpdGUgaGFpcgplZ3lwdGlhbiBtdW1teSBraW5nCndoaXRlIG1hcCBsaWJyYXJ5Cndvb2RlbiBjZWlsaW5nCndhdGVyIGJvdHRsZXMKd2hpdGUgYnJvb20gY2xvc2V0CnRoZSBndWl0YXIgcGxheWVyCnRpZWQgd2l0aCBjaGFpcgpnb2xkIGNvbG9yZWQgZXllcwpyYWRpbwppbiBhbiB1bmRlcmdyb3VuZCBwYXJraW5nIGdhcmFnZQppbmRvb3IgbGlnaHQKbGVnbyBzdHlsZQpjaXR5IGxpZ2h0cyBib2tlaApibGFkZXJ1bm5lcjIwNDkKZXllZ2xhc3NlcwpibGFrZSBzdG9uZQpoZXhlbgpkdWtlIDMgZApibGFjayBtb3MgZWlzbGV5CnBvcnRyYWl0IHNob3QgOCBrCnN0cmFpbmluZwpnZW9tZXRyaWMgdHlwZQpib2xkIGZhY2UgdHlwZQpkaXNwbGF5IGZvbnQKa29yZWFuIHR5cG9ncmFwaHkKbWFwcGEgc3R1ZGlvIGFydHN0eWxlCmJsb25kZSBib3kgd2l0aCB5ZWxsb3cgZXllcwpibG9uZGUgZWx2aXNoIGVtcHJlc3MKbnVjbGVhciBmdXNpb24KbW9ubwpzaG91bGRlciB0YXR0b28KYmxvbmRlIGd1eQplYXRpbmcgbWVhdAphbWJpZW50IHJlZmxlY3RpdmUgb2NjbHVzaW9uCmhpZ2ggcXVhbGl0eSB0aGVhdHJlIGNvc3R1bWUKYmxvb2Qga25pZ2h0CnVwYSBzdHlsZQptb25zdGVyIG1hbnVhbCBlbnRyeQpmbG9vciB0ZXh0dXJlCiMgbWljcm8KaG91c2Ugb24gYSBoaWxsCmJsdWUgLSB0dXJxdW9pc2UgZm9nIGluIHRoZSB2b2lkCmJsdWUgYW5kIHllbGxvdyBweXRob25zIGludHdpbmVkCmJsdWUgY2lyY3VsYXIgaG9sb2dyYW0KYmx1ZSBkamlubgpibHVlIGVuZXJneQpzdXBlcnZpbGxhaW5zCmdsb3dpbmcgZmllcnkgYmFja2dyb3VuZAplbGVjdHJpYyB2aW5lcyBhbmQgc3dpcmxzCmZsb2F0aW5nIGNhbmRsZXMKamVhbiBoZW5yaSBnYXN0b24gZ2lyYXVkCmdyYWlueSBsb3cgcXVhbGl0eSBwaG90b2dyYXBoCmhpZ2ggY29udHJhc3QgY2hpYXJvc2N1cm8KY2hhcmFjdGVyIGljb24Kd29tYW4gaW4gZHJlc3MKYmx1ZSB1bmljb3JuCmJsdWUgdmVsdmV0CmQmZCA1ZQoyIGQgYXV0b2NhZApwbGF5c3RhdGlvbiAyIGhvcnJvciBnYW1lCmJsdXJyeSBpbWFnZQp3YWxscyBhcmUgbWFkZSBvZiBkcnkgd2FsbAptYXR0ZWxsCmJtdyBlMzAKY29sb3JmdWwgaWRlYXMKbGlnaHQgZnJhbWUKYWNyb2JhdGljIG1vdmVzZXQKZmFuIGZhdm9yaXRlCnNlcmllcyBvZiBkcmVhbXMKc25hcHNob3QKd2VhcmluZyBhIGxpZ2h0IC0gcGluayBzdWl0CmhvbGRpbmcgYSBwYWludGJydXNoIGluIGhpcyBoYW5kCm4gNiA0IGdyYXBoaWNzCmRldGFpbGVkIGNvbG91cmVkIHBlbmNpbApza2ludGlnaHQgYmxhY2sgY2xvdGhlcwpkYXJrIHB1cnBsZSBjYXBlCnBpbmsgc3RyYWlnaHQgaGFpcgpncm91bmQgcmVkIG1lYXQKZ3JvdHRvCnBhcnR5IGhhdHMKbGlnaHRuaW5nIGJ1cnN0cwpib2lsaW5nIGltYWdpbmF0aW9uIGluIGEgYm93bAphd2FyZC13aW5pbmcKY2FyaWNhdHVyZSBzdHlsZQpkZXRhaWxlZCBjaGVtaWNhbCBkaWFncmFtCmFydCBkZWNvIG1lZGlldmFsIHN0eWxlCmFiYW5kb25lZCB2aWJlcwpnbG9vbXkgbW9vZHkgY2xvdWRzCmdvZCBzdW4gcmF5cwpib25nCnNob3J0IHB1cnBsZSBoYWlyIHdpdGggdW5kZXJjdXQKc2hpbnkgYW5kIHNwYXJrbGluZwpvbGQgYnJpZGdlCm9mZmljaWFsIHNwbGFzaCBhcnQKYm9vayBvZiB0aGUgZGVhZApib29rcyBjYXZlCmZ1bWUgZngKem9tYmllIGluIGhvcnJvciBjb25jZXB0IGFydApib3JlZCBhcGUKcGlsZXMgb2YgcGFwZXJ3b3JrCnN0cnVnZ2xpbmcKOGsgY29tcHV0ZXIgcmVuZGVyCnJlZCBuZW9uIGV5ZXMKbWFnaWMgYW5kIGxpZ2h0bmluZwpiYXRoZWQgaW4gdGhlIHRoZSBnbG93CmRyYXdpbmcgc2tldGNoZXMgb24gaGlzIG5vdGVib29rCndpdGggdGh1bmRlcnN0b3JtcwpzaGFycCBzbW9vdGgKaGluZHUga292aWwgc2NlbmUKcHJvZmVzc2lvbmFsIGNvbWVyY2lhbCB2aWJlCmJyYWluIGNpdHkgYXJ0CmRvY3VtZW50YXJ5IHN0eWxlCmVsZWN0cm9kZQppbWFnZSBzcGxpdCBpbiBoYWxmCm5ldXJvc2NpZW5jZQpicmF6aWxpYW4gcm9uYWxkbwptYW5nYSBib29rIGFuaW1lIHN0eWxlCmNpbmVtYXRpYyB2aWV3IGZyb20gbG93ZXIgYW5nbGUKdGVjaG5pbG9neQpicmVha2luZyBzdGF0dWUgb2YgZ2lybApnYXV6ZSBhbmdlbCBkcmVzcwphY3Rpb24gc2NlbmUgZnJvbSBraWxsIGJpbGwKYW1ldGh5c3Qgc3RhaW5lZCBnbGFzcwpkZXRhaWxlZCBhcnQgaW4gY29sb3IKZnJvbSBmYW1pbHkgZ3V5CjkgMCBtbSBsZW5zCmNoYWlucyBvbiBoYW5kcwpicmlhcmV1cwpzdGV2ZW4gbWVpc2VsIHBob3RvZ3JhcGh5CnBhaW50aW5nIGEgc2VsZiBwb3J0cmFpdApwYXN0YQp0cmVlcyBhbmQgYnVzaGVzCmdyZWVuIGNvbG9yZWQgdGhlbWUKY2FyZCBmcmFtZQpicml0aXNoIHByb3BhZ2FuZGEgcG9zdGVyCmFuZ3J5IHNtaWxlCmFydGlzdCdzIGltcHJlc3Npb24KZmlsbSBuaW9yCmxvc3QgaW4gdGhlIHZvaWQKb3R6aQpjaWdhcmV0dGUgaW4gaGlzIG1vdXRoCmF0bW9zcGhlcmljIGZlZWxpbmcKd2VhcmluZyBwdXJwbGUgc3RyYXBsZXNzIGRyZXNzCm1lZGl1bSBzaG90IGFuZ2xlCm92ZXIgdGhlIHNob3VsZGVyIHBvaW50IG9mIHZpZXcKbG9uZyBmbGF0IGhhaXIKZGFya2VyIHNraW4KYmxhY2sgYnVzaW5lc3Mgc3VpdAp3ZWFyaW5nIGJ1c2luZXNzIHN1aXQKYnJ1dGFsaXN0IGF6dGVjIGFyY2hpdGVjdHVyZQpjb2xvcmZ1bCBuZW9uIGxpZ2h0aW5nCnN1biBhZnRlciBhIHN0b3JtCmJydXRhbGlzdCBmYXNoaW9uIHNob3cKcG9vbHMgYW5kIHN0cmVhbXMKYnVnIGxpZmUgaW5zaWRlIGh1bWFuIGJvZHkKaWx5YSB5ZXZpbW92aWNoIHJlcGluCjEgOSA2IDAgY2FydG9vbiBzdHlsZQpubyBhcm15CmRldGFpbGVkIGxvbmcgYmxhY2sgaGFpcgpidW1ibGViZWUgcHVnCmJpZyBnbG93aW5nIG5ldGZsaXggbG9nbyBiZWhpbmQKZ2VvbWV0cmljIGJhY2tkcm9wOyBsZWQKZnJvbnQgcHJvZmlsZSBzaG90CmFuZHJld3MgZXNhbyBhcnRzdHlsZQpidXJuZWQgZm9yZXN0CnNoYWRvd3kgY3JlYXR1cmVzCndhdGVyIG9uIGxlbnMKZXN0aGV0aWMKZmlyZSBzdGFmZgpmaXJlIHBvaQpnb2RkZXNzIG9mIHNsZWVwCmdvZGRlc3Mgb2YgdHJhdmVsCnNhbmd1aW5hcnkgYmxvb2Qgc3BsYXR0ZXJzCmhpZ2hseSBkZXRhaWxlZCBmaXJlIHRlbmRyaWxzCmNpbmVtYXRpYyB1bnJlYWwgNgpidXJuaW5nIHdyZWNrZWQgbWVyY2VkZXMgMSAyIDQKaGVhdnkgYm9keSBtb2RpZmljYXRpb24Kc2NpZmkgZW52aXJvbm1lbnQKYnVzeSBzbWFsbCB0b3duIHN0cmVldAp2aWN0byBuZ2FpIGZpbmUgdGV4dHVyZQpidXRjaGVyIGFuZ3J5IHJvdHRpbmcgem9tYmllCmJ1dHRlcmZseSBpbiBqYXIKZ3JlZW4gd2FsbHBhcGVyIGJhY2tncm91bmQKd2VsbC1kZWZpbmVkIGFuYXRvbXkKYWJhbmRvbmVkIGphcGFlbnNlIHZpbGxhZ2UKcGVvbnkgZmxvd2VyCiYgaGVyIGV4cHJlc3Npb24gaXMgc29sZW1uCmx1bmcgZHJhZ29uCnRoZSB0aXRhbmljIGlzIHNpbmtpbmcKaHlwZXIgcmVhbGlzdGljIGRldGFpbHMKdGVtcG9yYXJ5IGVtZXJnZW5jeSBzaGVsdGVyCmNvbG9yZnVsIGFyY2hpdGVjdHVyZQpjYWxjdXR0YQpzaG90IHdpdGggYW4gYW5hbG9nIGNhbWVyYQpkZXIgcmllc2UKc2VhIHNwb25nZXMKY2dzb2NpZXR5IGd1c3RhdiBrbGltdCBmcmFtZQpqdW5rdG93bgpzd2lybHkgZXllcwppdmFuIHBsdXNjaCBhcnR3b3JrCmRldGFpbGVkIHBvcnRyYWl0IHNob3QKc29ueSBhN3oKc21pbGluZyBkb3duIGZyb20gYWJvdmUKY2FuZGlkIHBvcnRyYWl0IG9mIGpvZSBiaWRlbgpzb255IGEgNyBzCmxhcmdlIGV5ZXMgYW5kIGZsb3dpbmcgbG9uZyBoYWlyCmNhbmR5IGZvcmVzdAptb2JpbGUgZ2FtZSBiYWNrZ3JvdW5kCmNhbmR5cHVuayBjaGFyYWN0ZXIgZGVzaWduCjEgMCA4IDAgcCBoZCBwaG90bwp3YXIgaW4gYmFja2dyb3VuZAptaWQgcmFuZ2Ugc2hvdApwdXJwbGUgZHJhcGVyeQptb3ZpZSBzdGlsbCBvZiBqYW1lcyBib25kCmJpZyBoYWxsCmNhcmEgZGVsZXZpbmduZSBzdGFuZGluZwphYmR1Y3Rpb24KY2FyZCB0ZW1wbGF0ZQpncmFzcyBtb3VudGFpbiBuaWdodCBsYW5kc2NhcGUKaGVhZHBob25lcyBvbiBoZWFkCmpvc2ggYmxhY2sKMiAwIDAgMCBzIGNhcnRvb24KYm90YW5pY2FsIGJhY2tncm91bmQKc2VycGVudGluZSBtYXplCmV4dHJlbWVseSByZWFsaXN0aWMgZmFjZQppbiBkZXB0aApwb3N0YXBvY2FseXBzZQphdCB0aGUgZ3JhdmV5YXJkIGF0IG1pZG5pZ2h0Cmdob3N0bHkgYXRtb3NwaGVyZQpicmlnaHQ6CnRhdXJ1cwpsb3VybWFyaW4KWyBiaW9sdW1pbmVzY2VudCBjb2xvcnMgXSEhCmVhdGluZyBhIHBpenphCnJ1YmJlciBob3NlCnJhaW55IGNpdHkgYXQgbmlnaHQKZ3JvdXAgb2Ygc2V2ZW4Kcm9jb2NvIHBvcnRyYWl0CmFsZXgga2llc2xpbmcKa2Ftd2VpIGZvbmcKYW50aWJvZGllcwpyZWFsaXN0aWMgY2xvdGggcHVwcGV0Cm5pZ2h0IHRpbWUgcmVuZGVyCmNhdGhlZHJhbCEhISEhCm51Y2xlYXIgcG93ZXIgcGxhbnQKZG9vcndheXMuIHpkemlzxYJhdyBiZWtzaW5za2kKc2hpbnkgbGF5ZXJlZCBnZW9sb2dpY2FsIHN0cmF0YQpncm91bmQgbWlzdCBzd2lybGluZyB2b3J0ZXhlcwpjYXRzIGFuZCBwbGFudHMKY2hyaXN0aWFuIG15c3RpY2lzbQp0cmVuZGluZyBhdCBnaXRtbwp0cmVuZGluZyBhdCBjZ3N0YXRpb24KY2F2YWxyeSBjaGFyZ2UKY2F2ZSBwYWludGluZyBvZiBtb25hIGxpc2EKc3R1Y2sKZWFycmluZ3MuIGhpZ2hseSBkZXRhaWxlZAp0aGljayBhbmQgYm9sZCBibGFjayBvdXRsaW5lcwpzdHlsaXplZCBhbmQgZXhwcmVzc2l2ZQppbiB0aGUgc3RseWUgb2YgbW9lYml1cwo5MHMgbWFrZS11cApza2luIHBvcmUgZGV0YWlsCm91dHNpZGUgaW4gcGFya2luZyBsb3QKYW5jaWVudCBkdW5nZW9uCmluIGFuIGljeSByaXZlcgpqYXBhbmVzZSB0ZW1wbGVzCmJlYXV0aWZ1bCBhZXN0aGV0aWMgZGVzaWduCmNsZWFyIHN1bm55IGRheQpoYXJ0cGVyJ3MgYmF6YWFyCmVsZWdhbnQgcHJvcG9ydGlvbnMKbG92ZWx5IGdyZWVuIGV5ZXMKYmxhY2sgbmVvbiBsaWdodHMKd3JhcHBlZCBpbiBmbG93ZXJzIGFuZCB3aXJlZApzaWdtYSA4IDUgbW0gZiAxLiA4CjhrIGhkciBtb3JuaW5nIGxpZ2h0CndoaXRlIGhhdAppbGx1bWluYXRlZCBibHVlIG5lb24gbGluZXMKc2NpIGZpIGNoYXJhY3RlciBjb25jZXB0CnNvdWxmdWwgaXJpc2VzCmN5YmVycHVuayBjeWJvcmcKcHV6emxlIGFydApzaW5pc3RlciBwb3J0cmFpdApjZ2kgY2xheSBzY3VscHR1cmUKbGludXgKd2lyZWZyYW1lIG1vZGVscwpsYW5kc2NhcGUgb2YgZ2VvbWV0cmljIHNoYXBlcwpiZWF1dGlmdWwgMyBkIGNvbmNlcHQgYXJ0Cm1hdHQgZ3JvZW5pbmcgYXJ0CnBvc3RlciBhcnQgc3R5bGUKZWxpdGVkYW5nZXJvdXMg8J+SmfCfkpwgb3JuYXRlIO+4jgpjaGFvcyBzcGFjZSBtYXJpbmUKdmVoaWNsZXMgb24gZmlyZQpoZWF2eSByYWluIGZyb20gdGhpY2sgY2xvdWRzCmNoYXJhY3RlciBhbGJ1bSBjb3Zlcgpjb21wdXRlciBlcXVpcG1lbnQKY2hhcmFjdGVyIGFydCB0aGUgY29udHJhCmZyb20gdGhlIGF6dXIgbGFuZSB2aWRlb2dhbWUKb3JhbmdlIHNhZmV0eSB2ZXN0CnNjaSAtIGZpISEhIQpibHVlIGFuZCB5ZWxsb3cgcmliYm9ucwpibGFjayBhbmQgdmlvbGV0IGNvc3R1bWUKYXVyYSBvZiBwb3dlci4gZGV0YWlsZWQKKCAoIG1hc2sgKSApCmZvcm1hbCBibGFjayBzdWl0LiBkZXRhaWxlZApyZWRuZWNrIGNvdW50cnkKaGVyb2VzIG9mIG1pZ2h0IGFuZCBtYWdpYyAzCmVsaXRlIHNjaWVudGlzdAp3ZWFyaW5nIG1lZGl1bSAtIHNpemVkIGdsYXNzZXMKY3liZXJwdW5rIHN0cmVldCBnb29uCmNvbmNlcHQgYXJ0IGNoYXJhY3RlciBtb2RlbGluZwpkZXRhaWxlZCBhbmltZSBjaGFyYWN0ZXIgYXJ0CndlYXJpbmcgYmx1ZSBqZWFuIG92ZXJhbGxzCmluZGlhbiBnaXJsIHdpdGggYnJvd24gc2tpbgp3ZWFyaW5nIDMgZCBnbGFzc2VzCnNwYXJrbGVzIGFuZCBnbGl0dGVyCmRyYXdpbmcgc2tldGNoZXMKYXNwZWN0IHJhdGlvCmNvbmNlcnQgcG9zdGVyIHJldHJvCmNyb3duIG9mIHZlcnkgbG9uZyBmZWF0aGVycwpmdXR1cmlzdGljIHllbGxvdyBsZW5zCnRvcnRvaXNlCndlbGNvbWUKd2F0ZXIgY29sb3IgbmVuZG9yb2lkCmJyaWdodCB2b2x1bWV0cmljIGxpZ2h0aW5nCmJhZCBhdHRpdHVkZQpnZWFyIGF1cm9yYQptYXNhbWkgc3VkYQpwaWVyY2luZyB0dXJxdW9pc2UgYmx1ZSBleWVzCm1ldHJvcG9saXMgYmFja2dyb3VuZApyb3VuZCByb2JvdAptYXNzaXZlIHN0ZWFtcHVuayBoYW5kcwptYWxlIGhhbGYtZWxmCmN5YmVycHVuayBzb2xkaWVyCmZvcmVzdCBiYWNrZHJvcApjb3R0b24gY2xvdWQgbWFnZSByb2JlcwptaWQgMiAwJ3MgZmVtYWxlCmNocmlzIGJvbnVyYQpvdXRzaWRlcgpuYXR1cmUgbWFnaWMKYWN0aW9uIGZpZ3VyaW5lIHRveQo0IDAgMCAwIDAgMApsb3cgLSBwb2x5IGFsaWFzZWQKYmVhdXRpZnVsIHNjcmVlbnNob3QKbWFnYXppbmUgYXJ0aWNsZQpwb3dkZXIKY2hlZiBwbGF0eXB1cwptYWdhemluZSBwaG90b2dyYXBoCnJhZmHFgiBvbGJpbnNrIGFuZCBzYWx2YWRvciBkYWxpCjMgNSBtbSBrb2RhY2hyb21lCmNoZSBndWV2YXJhCmtob21laW5pCmNhcm1lbiBrYXNzCmNoZXNzIHRvdXJuYW1lbnQKc3BlY3RhdG9ycwpmbHlpbmcgZHJvbmVzCmNoaWFraSBuYW5hbWkgZnJvbSBkYW5nYW5yb25wYQphcnQgc3RhdGlvbiDigJ0KamVsbG8KcmVhbGlzdGljIHNjZW5lCndlYXJpbmcgdGhhbm9zIGFybW91cgptYWtvdG8gc2hpbmthaSAoIGFwZXggbGVnZW5kcyApCnN0b3JtbGlnaHQgYXJjaGl2ZQpncmFkaWVudCBsaWdodCBwaW5rCmZ1bGwgLSBsZW5ndGggcG9ydHJhaXQKcG9vciBidWlsZGluZ3MKaG9uZyBrb25nIGJ1aWxkaW5ncwpjaGluZXNlIHByaW5jZXNzCmx1c2ggZ25hcmx5IHBsYW50cwpjaGluZXNlIHdhcnJpb3IKY2hyaXMgZXZhbnMgYXMgYSBwb3dlcmxpZnRlcgpjaHJpcyBmYXJsZXkKeWVsbG93IGxpZ2h0bmluZwpjaHJpcyBtYXJ0aW4gZnJvbSBjb2xkcGxheQpjaGFubmVsIDQKY2hyaXMgcHJhdHQgYW5jaWVudCBjb3JzaWNhbgpjaHJpcyBwcmF0dCBhcyBhIHBvdGF0byBjaGlwCnBlcmZlY3QgYW5nbGUKY3Jpc3BzCmNocmlzdGlhbiBob3JuZXIgcG9ydHJhaXQKZGVudCB3dQpjZW50ZXJmb2xkCmV2aWwgc29yY2VyZXIKNCBrIHBvcmVzCmRqaW5nIHdpdGggZGogdHVybnRhYmxlcwpjaHJvbWUgYm9iIGhhaXJjdXQKYmFzZWJhbGwgY2FwCmRvaW5nIGEga2ljawp0aGUgYmx1ZSBwYW50aGVyCnJvc3RvdgpjcmFja2VkLiBiaW9tZWNoYW5pY2FsIGN5Ym9yZwpmaWxtcwpnYWxhY3RpYyBzaXplZCBnb2RkZXNzCnNsZWVrIG1lY2hhIGZlbWFsZSBkcmFnb24gaGVhZApleG90aWMgZ29kIGZlYXR1cmVzCmZyb20gbGVmdApoLnIuZ2lnZXIKdGhhd2FuIGR1Y2hhbmVlCnN1bHRhbgplbWlyCmZ1cnJ5IG1hd3Nob3QgYXJ0Cmdyb3VwcyBvZiBoYXBweSBodW1hbnMKdGV4dCBtb3JwaGluZyBpbnRvIG9iamVjdHMKYW4gZWNsaXBzZQptb3VudGFpbnMgc3Vycm91bmRpbmcKYWVyaWFsIHZpZXcgb2YgYW4gYW5jaWVudCBsYW5kCmdyZXkgbXVzdGFjaGUKZ3JlZW4gdG9uZXMgYW5kIGdvbGRlbiBjaGFybXMKc2xlZWsgaGVhZApzaGFycCBwYXdzCnNjYXJzIG9uIGV5ZQpmZWF0dXJlcwpjb2NrdGFpbCBiYXIKaW50ZXJpb3IgZGVzaWduIGRldGFpbHMKZiB6ZXJvCnN0cmVldCBzY2VuZSB3aXRoIHdhdGVyIHRvd2VyCnNldmVuCndhbGxwYXBlcuKAnQptYWRlIG9mIHdvb2QhISEhIQptZXRhbCBnZWFyIHNvbGlkIHN0eWxlCmNpbmVtYXRpYyBzY3JlZW5zaG90IGd0YSA1CmJpZyB2aWRlbyBzdGF0dWVzCnBvaW50IG9mIHZpZXcgb2Ygdmlzb3Igd2VhcmVyCmRldGFpbGVkIHB1cGlscwpsYXJnZSB3aW5ncyBvbiBiYWNrCnNob3QgZm9yIGltYXgKb3V0IG9mIGJ1c2luZXNzCmRpc25leSBsYW5kCnZvcmUgc3RhdGlvbiBib3JnIGhvdW5kCnZpc29yIGV5ZXMKY3JldyBjdXQgaGFpcgptZWdhIGh1bWFub2lkIG1lY2gKY2luZW1hdGljIHN0aWxsIGluIHdlc3R3b3JsZApiaXBsYW5lcyBmbHlpbmcKbWlyYWN1bG91cyBjbG91ZHkgYmFja2Ryb3AKd2VsbCBhcm1vcmVkIG1lY2ggZHJhZ29uCnBoYWxhbnN0ZXIKZXh0cmVtZWx5IGhpZ2ggZGVmaW5pdGlvbgpzbW9rZSBhdG1vc3BoZXJlCnBsYXN0aWMgc2tpbgpoaWdoIC0gZmFudGFzeQphbmd1bGFyIG1ldGFsIGFybW9yCmdsYXNzIG9sZWQgdmlzb3IgaGVhZApnb29kIGJveSBnaWFudCBtZWNoYSB3b2xmIGhvdW5kCnNwYWNlIHN0YXRpb24gdm9yZSBzdGF0aW9uCmxlbnMgZmxhcmUgc25vdyBzdG9ybQpyZWQgZWVyaWUgc2t5CmNpbmVzdGlsbCBoYXNzZWxibGFkIDggbW0KYnVzaGZpcmUKZ29sZGVuIGhvdXIgc3VuIHJheXMKc3ltbWV0cmljYWwhISEKY2l0eSAxIDcKcGFya3MgYW5kIGxha2VzCmNpdHkgYmF5IGJyaWRnZSBhcXVlZHVjdApjaXR5IGJpcmRzIGV5ZSB2aWV3Cm9yYW5nZSBhbmQgYmxhY2sgdG9uZXMKaHVnZSBjaXR5CmJpb3Nob2NrIHBvcCBhcnQKY2l0eSBpbiBkZXNlcnQKcmljaCBncmVlbmVyeQpkZWVwIGF1cmEKc2xvcGVkIHN0cmVldApiYWxsYXJkCmFzc2V0IHN0b3JlCnNsZWVwd2VhcgpyYXBoYWVsIGhpZ2ggcmVuYWlzc2FuY2UKd2VhcG9uIHNob3AgaW50ZXJpb3IKc2hlbGYKc3VycmVhbCBibGFjayBhbmQgeWVsbG93CnVucmVhbCBxdWFsaXR5Cm5pY2sgcGFyawpjb3ZlciBwYWdlCmhhbmRzIHJldG91Y2hlZAptZXJyeQp1a2l5byAtIGUgc2N1bHB0dXJlCm9saXZlIGdyZWVuIGFuZCB2ZW5ldGlhbiByZWQKdmlkZW8gZ2FtZSB0ZXh0dXJlCnJlZnJhY3RpdmUgY3J5c3RhbCBqZXdlbHJ5CmdvbGRlbiBob3VyIGJhY2tncm91bmQKY2xpZmZzIG9mIGRvdmVyCmxvbmcgYm9uZXkgbGltYnMKbHVya2luZyBob3Jyb3IKY2xvYWtlZCB3b21hbgp3aGl0ZSBoaW1lIGN1dCBoYWlyc3R5bGUKY2hhcmxlcyBvLiBwZXJyeQpjbG9uaW5nIHNwZWxsCmNsb3NlIC0gaXAgc2hvdApzdG9ybXRyb29wZXJzIHNpdHRpbmcgYXJvdW5kIGl0CnNtYWxsIHNjYW5kaW5hdmlhbiEhISBob3VzZXMKbGl0dGxlIHBlb3BsZSEhIQpjYXVsZHJvbnMKbWVkaWV2YWwgY2FzdGxlIG9uIGJhY2tncm91bmQKeW91bmcgYWR1bHQgZmFudGFzeSBub3ZlbCBjb3ZlcgpzaGFycCApCmZhc2hpb25hYmxlIGRhcmsgd2l0Y2gKYW5hdG9taWNhbGx5IGNvcnJlY3QgZmVhdHVyZXMKY2xvc2UgLSB1cCBwcm9maWxlIGZhY2UKYnJvd24gcmVkZGlzaCBoYWlyCmRpcnR5IHRpbGVzIGluIHRoZSB3YWxsCmxvbmcgaG9vayBub3NlCnZlcnkgYnJpZ2h0ZW5pbmcgZXllcwpldmlsIGluc2FuZSBzbWlsaW5nIGxhdWdoCnBpc3RvbCBhbmQgYmF6b29rYQpwdXJwbGUgYnJpZGdlcyB3aXRoIGxlZ2dpbnMKamF2YXNjcmlwdCBlbmFibGVkCmZ1bGwgZnJhbWUgMyA1IG1tCmYgMS8zCmRpdmVyc2UgdGV4dHVyZXMKZGF6IHN0dWRpbyBnZW5lc2lzIGlyYXkKZnJhY3RhbCBkZXRhaWxzIGRpYW1vbmQgc2tpbgpjYW1lcmEgbG9va2luZyBkb3duIGludG8gdGhlIG1hdwpzdW1tZXIgZmVzdGl2YWwgbmlnaHQK4oCYbHVjYeKAmQrigJhyYXlhIGFuZCB0aGUgbGFzdCBkcmFnb27igJkgZXRjCmRyZWFtIGFlc3RoZXRpYwpnbGVhbWluZyBza2luCnN0aWxsIHBob3RvZ3JhcGgKbG93IHF1YWxpdHkgM2QgbW9kZWwKd2l0aCBjb2xvdXJmdWwgaW50cmljYXRlCmNsb3NlIHVwIG9mIGEgYmxvbmRlIHdvbWFuCmdyZWVuIGFuZCBwdXJwbGUgaGFpcgpzbWFsbCBzdHVkZGVkIGVhcmluZ3MKY2xvc2UgdXAgb2YgYSB5b3VuZyBhbmltZSBnaXJsCnNob3J0IHdhdnkgYmxvbmQgaGFpcgphcnQgLSBkZWNvIHN0eWxlCmhhaXJ5IHNob3VsZGVycwp2ZXJ5IHJhaW55CmNsb3NlIHVwIG9mIHNpbmdsZSBzdWdhciBjcnlzdGFsCjUwMDBrIHdoaXRlIHByb2R1Y3QgbGlnaHRpbmcKdW5kZXIgYSBncmF5IGZvZ2d5IHNreQpkcm9wcyBvZiB3YXRlcgplcGljIGxpZ2h0IG5vdmVsIGFydCBjb3ZlcgpjaGluZXNlIGFybW9yCm5lYXQgaGFpciB3aXRoIGJhbmdzCnJlZCBhbmQgYmx1ZSByZWZsZWN0aW9ucwpjbG9zZSB1cCBwb3J0cmFpdCBidXN0IG9mIHdvbWFuCi5lcHMKLmFpCm9sZCBmaWxtIG92ZXJsYXkKZXhvdGljIGxpbHkgZWFycwp0cmFzaCBwb2xrYQpmbG93aW5nIGdsb3dpbmcgaGFpcgpmYWlyIG9saXZlIHNraW4Kc3BpZGVyIC0gdmVyc2UgYXJ0IHN0eWxlCmplc3VzIGFsb25zbyBpZ2xlc2lhcwpicnVuZXR0ZSBib3kgYW5kIHJlZGhlYWQgYm95CmZ1bGwgYm9keSBkeW5hbWljIHBvc2UKY2xvc2UgdXAgdG8gYSBza2lubnkKbmllciAyIGIKd2lyZXMgYW5kIHN0cmluZ3MKZGVlcCB0YW4gc2tpbgpvdmVyZ3Jvd24gYmFja2dyb3VuZAp2ZXJkYW50IGZvcmVzdApjeWJlcnB1bmsgY2l0eSBvbiB0aGUgYmFja2dyb3VuZAplc2NoZXIgbWMKdHJlYXN1cmVzIG9mIGdvbGQKc3RpbGwgY2luZW1hdGljCmZpcmVzIGluIGJhY2tncm91bmQKbWFuIHdpdGggYSBoZWFkIG9mIGJhcm4gb3dsCndpdGggYXJtcyBiYXJlCndpdGggc21hbGwgZXllcwpjb25zdHJ1Y3RlZCB1cG9uIHNhbGFyIGRlIHV5dW5pCmJldHdlZW4gc2VkaW1lbnRhcnkgZGVwb3NpdHMKaGlnaCBkZXRhaWxlZCB3aGVlbHMKZGVlcCBkaXNoIHdoZWVscwpmbHVpZCBlbmVyZ3kKbGlnaHQgYnVsYgpzbGVlcGluZyBiZWF1dHkgZmFpcnl0YWxlCm10ZyBzdHlsZQp2ZXJ5IGRldGFpbGVkIGZlbHQgcGx1c2hpZQpob2xvZ3JhcGhpYyBzcGFjZQpwaG90b2dyYXBoZWQgaW4gZmlsbQpkJmQgYm9zcwp2b2x1bWV0cmljIG5vb24gbGlnaHRpbmcKaHlwZXIgZGV0YWlsZWQgM2QgcmVuZGVyCmNsb3NldXAgb2YgY2FyIGVuZ2luZQpzaGltbWVyaW5nIGlyaWRlc2NlbnQgd2F0ZXIKYmVhZHMgb2Ygc3dlYXQKZGFyayB3YXNoZWQgdGludCBibGFjawptb3ZpZSBwcm9tb3Rpb25hbCBhcnQKbWFuZGVsYnJvdCBwYXR0ZXJuCnN0YW5kaW5nIGluIGEgYnVybnQgZm9yZXN0Cm5vcmQKZmxvcmFsIGdyb3d0aApjaXR5IHN0cmVldCBjaW5lbWF0aWMgbGlnaHRpbmcKZGF1Z2Vycm90eXBlCmdpYW50IHJvc2UgZmxvd2VyIGFzIGEgaGVhZApsaWFuYSB3cmFwIHR3byBmYW50YXN5IGNyZWF0dXJlcwpyb3RhdGlvbmFsIHN5bW1ldHJ5CjEgOSAyIDAgcyBwaG90b2dyYXBoeQptaXhlZCBtZWRpYSBwYWludGVybHkgZGV0YWlscwpuZW9jbGFzc2ljYWwgY29tcG9zaXRpb24KZnV0dXJpc3RpYyBhbGllbiBjaXR5Cm1hc3RlcnBpZWNlIHN1cnJlYWxpc20Kem9jaGkKemVybyAtIGhvdXIKamVhbiBwYXVsIGZpY3Rpb24KdGVudCBjYW1wIGluIGZvcmVncm91bmQKY2lyY3VzIGNsb3ducwpoYm8gc2hvd3RpbWUgYm94aW5nCmluIGEgdmlsbGFnZSBzdHJlZXQKdmlzdWFsIGRlc2lnbiBzY2hvb2wKbWluaW1hbGlzdCBjYXJ0b29uIHN0eWxlCnBhdGhmaW5kZXIgbmVuZG9yb2lkCnJlc2luIHN0YXR1ZQpzbWFydCB0ZXh0aWxlcwoyIGQgZ2FtZSBhc3NldHMKYWJzdHJhY3QgZmxhdCBjb2xvdXIKY29sbGVlbiBtb29yZSAyIDggeWVhcnMgb2xkCnJlbGlnacOzbgpjb2xvbWJvIHNyaSBsYW5rYSBjaXR5c2NhcGUKY29sb21ibyBzcmkgbGFua2FuIGNpdHkgc3RyZWV0CmNvbG9uZWwgc2FuZGVycwpyZXNvdXJjZXMgYmFja2dyb3VuZAp0cmVtb3JzCnVoZCBoeXBlcmRldGFpbGVkCjEvNDAwIHNodXR0ZXJzcGVlZApwYXJrZWQgY2Fycwptb2xvdG93IHByZW1pdW0gY29sb3IgcGFsZXR0ZQoxIDkgOSAwIHBob3RvZ3JhcGggbWFnYXppbmUKZnV0dXJpc3RpYyB3ZWFwb24KZG93bnRvd24gamFja3NvbnZpbGxlIGZsb3JpZGEKMSA5IDkgMCBzIGxpZmUgbWFnYXppbmUKY29sb3IgcGlnbWVudHMgc3ByZWFkIG91dCBpbiBhaXIKd2VhcmluZyB5ZWxsb3cgZmxvcmFsIGJsb3VzZQp2ZXJ5IGZpbmUgYXJ0d29yawpiZWF1dGlmdWwgbmV3IG1leGljbyBzdW5zZXQKYXdhcmQtd2lubmluZyBjb21wb3NpdGlvbgpzb2xpZCBjb2xvcmluZwpubyByZXBlYXQKc2V0IGluIHRoZSBmdXR1cmUgMiAxIDUgMApsb3RzIG9mIGJyaWRnZXMKcmFuZG9tIGNoYXJhY3RlcnMKc3R5bGUgY29tYmluYXRpb24KYnVpbHQgaW50byB0cmVlcyBhbmQgc3RvbmUKZmxvd2VycyBhbmQgYmxvc3NvbXMKY29sb3JmdWwgbWVsdGluZyBodW1hbiBoZWFkCmJpb3B1bmsgZW52aXJvbm1lbnQKYXdhcmQgd2lubmluZyBjb2xvcml6ZWQgcGhvdG8KY29sb3NzYWxlIGludGVyc3RlbGxhciBwb3J0YWwKY2xlYW4gcm9vbQpjb2xvdXJmdWwgYmlvbW9ycGhpYyB0ZW1wbGUKZGlnaXRhbCBhcnQgOCBrCm5pZ2h0IHRpbWUgYXVzdHJhbGlhbiBvdXRiYWNrCmphbWVzIGplYW4gJiBhbHBob25zZSBtdWNoYQphZGVsYWlkZSBsYWJpbGxlIC0gZ3VpYXJkCnN5bW1ldHJpY2FsIGRpZ2l0YWwgaWxsdXN0cmF0aW9uCmJhbmRhaSBib3ggYXJ0LiByZWFsaXN0aWMKbWFzY3VsaW5lIHByb3BvcnRpb25zCnNoYXJwIGZvY3VzIGhpZ2hseSBkZXRhaWxlZApjaW5lbWF0aWMgZnVsbCBjaGFyYWN0ZXIKenggc3BlY3RydW0gY29sb3IgcGFsZXR0ZQp2ZWN0b3IgdHJhY2luZwpzb255IHBpY3R1cmVzCm1hdHRlIGFjY2VudHMKbWFrb3RvIHNoaW5rYWkuIG9jdGFuZSByZW5kZXIKdmlld2VkIGZyb20gdGhlIGdyb3VuZAp0YXR0b29zIG9mIHN0YXIgd2FycyBzeW1ib2xzCnNwYXJrbGVycwpyZWFyIGxpZ2h0aW5nCmNvbW1lcmNpYWwgd2FzaHJvb20gaGFuZCBkcnllcgpjb21tdW5pc3QgY2xvd24gcGFpbnRpbmcKdHJlbmRpbmcgb24gYXJ0c3RhdGlvaW4KcG9ydGxldCBwaG90bwpnb2xkIGFuZCBibGFjayBibHUKZmVycmEgd2hpdGUgbWVjaGEKZGljaHJvaXN0aWMKY2FibGUgZWxlY3RyaWMgd2lyZXMKY29tcGxleCAzZCByZW5kZXIKbWFncml0dGUgcGFpbnRpbmcKYmVhdXRpZnVsIGhhaXJ5CmxhcmdlIGFycmF5cyBkYXRhIGhvbG9ncmFtcwplbnRyb3BpYyBiZWhhdmlvcnMKZXNvdGVyaWMgZXF1YXRpb24gaGVhdmVuCnN5bnRoZXRpYyBjdWJpc20Kc29tZSBwdXJwbGUKc29tZSByZWQgYW5kIHB1cnBsZSBhbmQgeWVsbG93Cm1vcmUgc2NhcnMgYW5kIGZpcmUKc29tZSBvcmFuZ2UgYW5kIHB1cnBsZQpmaXJlZXJzdG9ybQpjb21wdXRlciBnYW1lIGFydApvcmdhbmljIGlzb21ldHJpYyBkZXNpZ24Kd2l0aCBzdG9uZSBoZW5nZSBvbiB0b3AKdW5jYW5ueSBhbmQgc2NhcnkgYXRtb3NwaGVyZQp1bm5hdHVyYWwgbGlnaHRpbmcKcm9hbWluZyB0aGUgY29sb255Cm15c3RlcmlvdXMgY2FueW9uIHN0cmVhbXMKYWlyY3JhZnQKYWx0ZXJlZCBjYXJib24gc2VyaWVzCnpvbWJpZSBjeWJvcmcKcG9ydHJhaXQgb2Ygc2hlcmxvY2sgaG9sbWVzCmN5Ym9yZyBuaW5qYQprdW5nIGZ1IHBhbmRhCndpdGNoIHdvbWFuCnRlbXBsYXIKY3lib3JnIHpvbWJpZQpkamkgdG9wIGRvd24gdmlldwpjb21wdXRlciBtb3VzZQpxdWFydGVyIHZpZXcKbWFkZSBpbiB1bnJlYWwgZW5naW5lCmFydCBzdGF0aW9uIGZyb250IHBhZ2UKcGVuZ3poZW4gemhhbmcKb24gYSBkYXJrIHJvY2sgYmFja2dyb3VuZAptZXRlb3JpdGVzCnNjaG9vbCBnaXJsIGluIGdvdGhpYyBkcmVzcwppbnRyaWNhdGUgdmlicmFudCBjb2xvcnMKdmlkZW8gZ2FtZSBjaGFyYWN0ZXJzIGRlc2lnbnMKdmlrdG9yIGFudG9ub3YgY29uY2VwdCBhcnQKc2VyZ2V5IGtvbGVzb3YgY29uY2VwdCBhcnQKYmxhY2sgYW5kIGdvbGQgd2lyZXMKbGVmdApjb25jZXB0IGFydCBvZiBsb3ZlCmNvbmNlcHQgYXJ0IG9mIG9tZWdhbW9uCmNvbmNlcHQgYXJ0IG9mIHNpbmdsZSBib3kKd2hpdGUgZnJlY2tsZXMKd2l0aCBibGFjayB2aW5lcwpibHVlIGhvb2RpZQpjb25jZXB0IGFydCB6aXBwbyBsaWdodGVyCnNwYXRpYWwgcGhlbm9tZW5vbgpsb3N0IGluIHRoZSBpbW1lbnNpdHkgb2Ygc3BhY2UKdHJhZmZpYyBwb2xpY2Ugd29tYW4KYW50aGVtIGdhbWUgaW5zcGlyYXRpb24KbWlsdCBncm9zcwpzb2Z0IHJlZmxlY3Rpb25zCmRyYWcgbGlnaHQgYm9tYnMKaXQgaXMgZmx5aW5nIHRocm91Z2ggc3BhY2UKdGhpcyBjaGFyYWN0ZXIgaGFzIGNyeW9raW5lc2lzCnVtYnJha2luZXNpcwpsaWdodHdlaWdodApraW5nIG9mIHRoZSBqdW5nbGUKY29uY2VwdCB0YXR0b28gZGVzaWduCnJhbHBoIG1hY3F1YXJyaWUKbGFyZ2Ugc2NyZWVuCm1pZHNvbW1hciBjb2xvciB0aGVtZQp6YWNoIGhpbGwKYW5keSBtb3JpbgpyZWQgaW5rIHNoYXJwIGZvY3VzCmNvbmNyZXRlIGhpdGVjaCBpbnRlcmlvcgpjb25kZSBuYXN0IHRyYXZlbGVyIHBob3RvCmRlc2VydCB3aGl0ZSBncmVlbmhvdXNlCmJsYWNrIGdvbGQgaW5rIGRyaXBwaW5nCmNob2NvbGF0ZS4gcnVnZ2VkCmdhaWEgaHVtYW4gYW5kIGRpZ2l0YWwKc29sYXIgYmVpbmdzCmhpLXRlY2ggc3R5bGUKaXRhbGlhbiBwb3N0ZXIgYXJ0CmNvbnRlbXBvcmFyeSBkaWdpdGFsIGFydApnbGlzdGVuaW5nIGNsb3VkcyBpbiBiYWNrZ3JvdW5kCmltYWdlIGRhdGFzZXQKYWJzdHJhY3QgYmxhY2sgb2lsCmRlZXAgc2VhIGNyZWF0dXJlCmRpZmZ1c2UgZm9nIHZvaWQKY2l0eSBvbiB0aGUgYmFja2dyb3VuZApkeW5hbWljIGxpbmVzCnJhbmRvbSBwb3NpdGlvbnMgZmxvYXRpbmcKY29ybmVyIGFzc2F1bHQgcmlmbGUKY29ycG9yYXRlIGxvZ28gb2YgYW4gZXllCmF3YXJkIC0gd2lubmluZyBicmFuZCBhZ2VuY3kKYW50aHJvcG9tb3JwaGljIGVkaWJsZSBwaWVjaGFydApvZmZpY2lhbCBtdXNpYyB2aWRlbwpjb3NtaWMgYXBvY2FseXBzZQpjb3NtaWMgYnV0dGVyZmx5IG5lYnVsYQpwc3ljaGVkZWxpYyB3YXZlcwpkZW5pcyBmb3JrYXMKY29zbWljIGhvcnJvciBlbnRpdHkgd2l0aCB3aW5ncwpmaXJlIGZsYW1pbmcgc2VycGVudApjZ3JlbmRlcgp1bnJlYWwgZW5naW5lIDsKY29zbW9wb3J0CmNvc3BsYXkgb24gYmxhY2sgaGFybGV5IHF1ZWVuCmNvc3BsYXllciBkcmVzc2VkIGxpa2UgYSBjcmFiCmhpZ2gga2ljawpoYWxhdGlvbnMKY290dGFnZWNvcmUgaGlwcGllCm5pZ2h0IHZpc2lvbiBnb2dnbGVzCmNvdXBsZSBkYW5jaW5nCmZvZ3kKYWdhaW5zdCBhbGwgb2RkcwpubyBmZWFyCnNsaWNrZWQtYmFjayBoYWlyCnBob3Rvc2hvb3QgZm9yIHNraW5jYXJlIGJyYW5kCmNvd2JveSBjYXRzCmNvd2JveSBkcmVhbQpzYWt1cmEgYmxvb21pbWcKYmVhdXRpZnVsIG5ldyBtZXhpY28gbGFuZHNjYXBlCnN1biBpcyBzaGluaW5nCnRoaW4gbG9uZyBmaW5lIGxpbmVzCm9pbCBzbGljayBjb2xvcnMKaGlnaCBzaG90CnVsdHJhLXJlYWxpc3RpYyBzaGFycCBmb2N1cwplc2NoZXIrKwpjcmVhdGl2ZSBjb2RlciB3aXRoIGEgY29tcHV0ZXIKd2VyZWNyb3cKc2x1ZGdlCmNyZWVweSBhc3Ryb25hdXQKc3BpZGVyIGFiZG9tZW4KKCAoIHNwaWRlcndvbWFuICkgKQpoYWxsb3dlZW4gdGhlbWUKbmljZSBzdHlsZSBjdWx0dXJlCmZ1cm5pdHVyZSBtYWdhemluZQpjcmlzdGlhbm8gcm9uYWxkbyBhcyBwb3BlCnN0aWNrZXIgZGVzaWduIHZlY3RvcgpyZXB0aWxpYW4gc2tpbgpsaW9uIGJvZHkKZGFyayBhbmQgaW50cmljYXRlIHBob3RvZ3JhcGgKaW5jcmVkaWJseSBza2lubnkKc2hpcHlhcmQKYm9sZCBzdHJva2VzCnNjZW5lIHZpZXcKcnVzdGVkIHNpbGVudCBoaWxsCnN0cmF3IGhhdCBhbmQgb3ZlcmNvYXQKY2FibGVzIG9uIHdhbGxzCmNsZWFyIHBhcnRzCnRoZSBhbmltYXRyaXgKY3J0IHRlbGV2aXNpb24KbWl5YW1vdG8gYWJkdXplZWRvCm1pbmltYWxpc3QgdmVjdG9yIGFydApqZXN0ZXIgdGhlbWVkCnRoaWNrIGxpbmUgZHJhd2luZwpjcnlzaXMgbmFub3N1aXQKY3J5c3RhbCBkcmFnb24KdmlzdWFsIGNvbnRyYXN0CnRlYW0gaWJ1eXBvd2VyCmNzZ28gdGVhbSBzdGlja2VyCmRpc25leSBtb3ZpZSBwb3N0ZXIgc3R5bGUKbG9uZyBmdWxsIGJvZHkgc2hvdApsb25nIGJsYWNrIHNoaW55IGhhaXIKbW9kZXJuIGRhbmNlIGFlc3RoZXRpYwpzZW5zZSBvZiBob3BlCm1ldGFsIGJyYWluISEKZHJhbWF0aWMgcmVkIHNjYXJ5IGxpZ2h0aW5nCndhcnAgbGlnaHRuaW5nCmRhbmdlcm91cyBtZXBoaXN0byBmcm9tIGZhdXN0CnN0b3J5Ym9vayByZWFsaXNtCndlYXJpbmcgYmxhY2sgZnJhbWUgZ2xhc3NlcwpoaWdoIGN1c3RvbWl6YXRpb24Kd29tZW4ncyBmYWNlcwoxNmJpdApzcG9ydCBicmEgYW5kIHNoaXJ0CmJsYWNrIGdvdGhpYyBsb2xpdGEgZHJlc3MKYmx1ZSBzaGlueSBleWVzCmRpZWN1dAptaW5pYXR1cmUgaHVtYW4gYnJhaW4KYmx1ZSBtZXRhbApjdXRlIGFzdHJvbmF1dCBzdGlja2VyIGFydApnb3JnZW91cyEhIQpvbGQgcGhvdG8gY2FtZXJhCnN0eWxlIG9mIGRpc25leSBhbmltYXRpb24KbmludGVuZG8gZ2FtZSBhcnQKbWFnaWNhbCBjb2xvcmVkIHRoZW1lCmN5YmVybmF0aWMKbWFyaXNjaGEgYmVja2VyCmRpZ2l0YWwgY3liZXJwdW5rIC0gYW5pbWUgYXJ0CnN0aWNrZXIgY29uY2VwdCBkZXNpZ24KcHVycGxlIGdyZWVrIHJvYmUKZG9pbmcgd2l0Y2hjcmFmdApzdW4gZG93biBnb2xkZW4gaG91cgp3aGl0ZSBoYWx0ZXIgdG9wCndoaXRlIGZ1ciBhbmQgZGFyayBza2luCndpdGggcmlmbGUKY3V0ZSBmcm9nCmN1dGUgZnVtbyBwbHVzaCBmb3ggZ2lybApwcm9kdWN0aW9uIHZvbHVtZSByZW5kZXJpbmcKZWVyaWUgZ2xvdwpydWZmbGVzIHRhc3NlbHMgYW5kIHJpYmJvbnMKYW5pbWFsIGVhcnMKdGhlIG9yZGVyIG9mIHRoZSBidXJuaW5nIHNoYWRvdwpiZXlvbmQgdGhlIG1pcnJvcgpzdHlsaXplZCBtYXRlcmlhbCBic3NyZGYKaGFpciBibG9ja2luZyBleWVzCmdvbGRlbiBwYXVsZHJvbnMKbG9uZyB0aGljayBncmFzcwpvdmVyZG9zZQp3ZWIgb2YgdGVuZHJpbHMKYXJhY2huaWQKY3V0ZSBmdW5ueSBmaWd1cmluZSB3b29kZW4KaW4gYSByYXZhZ2VkIGxpYnJhcnkKZWF0cyBiYW1idXMKcGlsb3Qgb3V0Zml0CmN1dGUgbGl0dGxlIGRyYWdvbgp3aXRoIHNwbGF0b29uIHN0eWxlCmN1dGUgbW9uc3RlciBjaGFyYWN0ZXIgZGVzaWduCmN1dGUgbW9uc3RlciBza2F0ZWJvYXJkaW5nCm5vIHRhaWwKY3V0ZSBtb25zdGVycwpjdXRlIG93bAptYXR0ZSBjb2xvcmluZwpjaGlsZGlzaCBsb29rCmRyYXduIHdpdGggcGhvdG9zaG9wCmRvbGxhciBzaWduCmRpc25leSBzdHVkaW9zCmN1dGUgcG9jZWxhaW4gZG9sbAppc2xhbmQgbGFuZHNjYXBlCnBpcmF0ZXMgb2YgdGhlIGNhcmliYmVhbiAoMjAwNikKY3V0ZSEgYmlvbWVjaGFuaWNhbCBheG9sb3RsCmN1dGUhIGM0ZApzdHVkaW8hISBwb3J0cmFpdCBsaWdodGluZwpuaWdodCBmaWxsIGxpZ2h0aW5nCmZpZ2h0aW5nIHN0YW5jZSBlbmVyZ3kKY29sb3JmdWwgc2lnbnMKZmxvYXRpbmcgYm9kaWVzCmhpZ2ggZmFzaGlvbiBqb3VybmFsIGNvdmVyCnN0eWxlIG9mIG1hcmNpbiBibGFzemN6YWsKbWFydmVsb3VzIGRlc2lnbmVyIHN1YnN0YW5jZQozIGQgcGFpbnRlciBwaG90b3Nob3AKOGsgZG9wCnJlbmRlcmVkIGluIGFybm9sZCBlbmdpbmUKdmVsdmV0IGFydApjeWJlcnB1bmsgYmVhdXRpZnVsIGdpcmwKYm9keSBnb2xkZW4gYXJtb3IKYm90dG9tIHZpZXcg77yMIGJsYWRlcnVubmVyCmZsdW9yZXNjZW50IGxlZApuZW9uIGJsdWUgZ2xhc3MgZm9yZWhlYWQKZGlnaXRhbCBkaXNwbGF5cwpjeWJlcnB1bmsgZHVuZ2VvbgphbmNpZW50IGNhdmVzCmRyYXduIHdpdGggY3JheW9ucwppbiB0aGUgeWVhciAzIDAgMCAwCnBoeXNpY2FsIGNvcnJlY3QgbGlnaHQKbG90cyBvZiBmbGFtZXMKc29mdCBhbmltZSBpbGx1c3RyYXRpb24KZ2V0dGluZyByZWFkeSB0byBmaWdodApjeWJlcnB1bmsgZ2xhZGlhdG9yCnR1YmVzIGZ1c2VkIHdpdGggdGhlIGJvZHkKc3RyZWV0IGdhbmcKZmlnaHRlciBwb3NlCmVsIGJvc2NvIGFuZCBkYW4gbXVtZm9yZApidXN5IG1hcmtldApjeWJlcnB1bmsgbmlnaHQgc3RyZWV0CmNsZWFyIGxpbmVzISEKZGlhZGVtIG9uIHRoZSBoZWFkCndoaXRlIHRoaWNrIHNtb2tlCmpvaG4gY2FuZHkKY3lib3JnIC0gZ2lybCB3aXRoIHNpbHZlciBoYWlyCnNpdHRpbmcgb24gYSB3aW5kb3cgc2lsbApwYWludGluZyBieSBoaWVyb255bXVzIGJvc2NoCnJldHJvIGFuaW1lCmZ1dHVyaXN0aWMgc3RyZWV0CmdyaW1kYXJrIGF0bW9zcGhlcmUKbW9ub2Nocm9tYXRpYyBwaG90bwpmcm9udCBwcm9maWxlCnJlZCBiaW9tZWNoYW5pY2FsIGRldGFpbHMKZGFuIG91ZWxsZXR0ZQpjeWJvcmcgcG9ydHJhaXQKYm9keSBvZiBhIHJvYm90CmJsYWRlIHJ1bm5lciAyIDAgNCA5IG1hbnVhbAp0ZWxldmlzaW9uIGhlYWQKZHJhbWF0aWMgZmFudGFzeSBhcnQKYm95aXNoCnBhbGxpZCBza2luCnNvZnQgZm9jdXMgbWF0dGUgcGFpbnRpbmcKd2VhcmluZyBzdHVkZGVkIGxlYXRoZXIKZGFlbmVyeXMKcG9ydHJhaXQgb2YgZ2lybCBpbiBmbG93ZXIgZmllbGQKZmxvd2VycyBvbiBoYWlyCmRhbGwgLSBlIDIKb2ZmaWNpYWwgcG9zdGVyCmRhbXNlbCBpbiBkaXN0cmVzcwphbmltYXRpb24gbW9kZWwKdGhlIGF1c3RyYWxpYW4gZGVzZXJ0Cm1lZGl1bSBzaG90IHRha2VuIGZyb20gYmVoaW5kCmJvdGFuaWNhbCBkcmF3aW5nCnBob3RvIGZyb20gYSBwcm9tbyBzaG9vdApkYW5pZWwgcmljY2lhcmRvCmVnZ3NoZWxsIGNvbG9yCmZyYW5rIHJleW5vbGRzCmZ1bGwgaGVhZCBvZiBoYWlyCnN1bW8gd3Jlc3RsZXIKY3V0ZSBkZXRhaWxlZCBkaWdpdGFsIGFydApjbGVhbiBkZXRhaWxlZCBhbmltZSBhcnQKY292ZXIgc3RvcnkKYmFycmllcnMKaGFpciBhcmUgY3VybGVkIHdpcmVkIGNhYmxlcwpkYXJrIGNob2NvbGF0ZSBwYWludGluZwpkYXJrIGNsb2FrZWQgZmlndXJlCmxlYWtpbmcgb2lsCm5pbmV0ZWVuIGVpZ2h0aWVzCndheW5lIGJhcmxvdmUKbm9ydGhlcm4gc3RhciBhdCBuaWdodApuYWNyZW91cyBsaWdodHMKc3BhY2VlbmdpbmUKdm9sdW1ldHJpYyBsaWdodGluZyA4IGsKZGFyayBmYW50YXN5IHdvcmxkCnBvc3RhcG9jYWx5cHRpYyBzdHlsZQpkYXJrIGdvdGggcXVlZW4KcGxhdGludW0gc2tpbgp3aGl0ZSBzY2FyeSBza2luCmFxdWF0aWMgY3JlYXR1cmUKZGlnaXRhbCBtZWRpY2FsIGVxdWlwbWVudAp0aGluIGJydXNoIHN0cm9rZXMKZWxhYm9yYXRlIGlsbHVzdHJhdGlvbgp3aXRoIGJsdW50IGJyb3duIGJvcmRlcgpoaWxscyBhbmQgbW91bnRhaW5zCnBvc3QgaW5kdXN0cmlhbApoZXJvZXMgb2YgbWlnaHQgYW5kIG1hZ2ljCnZpc2libGUgdGV4dHVyZQpkYXJrIHB1cnBsZSBzd2FtcApnb3VhY2hlIGFuZCBpbmsKZGFyayBzcGFjZSBvcGVyYQplcGljIGJlYXV0aWZ1bCBzcGFjZSBzY2lmaQpkYXJrIHdhcnJpb3IKZHJhbWF0aWMgbG93IGxpZ2h0aW5nCmJsb29kIHN0YWlucyBvbiB0aGUgd2FsbHMKbm8gcG93ZXIKcGFydHkgcGVvcGxlIGluIGJhY2tncm91bmQKb3JhbmdlIGFuZCBwdXJwbGUgZWxlY3RyaWNpdHkKY2luZW1hdGljIGRhcmsgbGlnaHRpbmcKc2NlcHRlcgpoaWdoIGRldGFpbCBoeXBlcnJlYWxpc3RpYwpnb2xkIGhvb3AgZWFyaW5ncwpjYXZlIGV4cGxvcmF0aW9uCmouYyBsZXllbmRlY2tlcgpoaWdobHkgZGV0YWlsZWQgZmluZSBhcnQKZmxvd2VycyBncm93IGZyb20gdGhlIGJvZHkKbXVzaHJvb21zIGdyb3cgZnJvbSB0aGUgYm9keQpiYXJvcXVlIGRpZ2l0YWwgcGFpbnRpbmcKZGVhZCBmaXNoCmZpcmUgZnJvbSBtb3V0aApwb3N0IGFwb2NhbHlwdGljIHN0cmVldApkZWF0aCBkcmVhbWluZyBhYm91dCBkZWF0aApzaWx2ZXIgbml0cmF0ZSBwaG90b2dyYXBoeQphY2lkIHdhc2ggbGF5ZXJpbmcKdmVydGlnbyBjb21pYwpleHRyZW1lIGxvdyBhbmdsZSBzaG90Cm15c3RpY2FsIGNhdGhlZHJhbCB3aW5kb3dzCjEgc3Qgd2lubmVyCmNvdHRvbiBjYW5keSBidXNoZXMKbWFuZGVsYnVsYmVyIHZlY3RvciBhcnQKc2FuZCBtaXN0cwpyZWQgc2FuZHN0b25lIG5hdHVyYWwgc2N1bHB0dXJlcwpkZWVwIGZvcmVzdCBpbiB0aGUgbmlnaHQKMS8yIHNlY29uZCBzaHV0dGVyIHNwZWVkCmxpZ2h0IHNoaW1tZXJpbmcKd2F0ZXJmYWxsIGluIGRpc3RhbmNlCm9uZSBnYWxheHkKZGVlcCB1bmRlcmdyb3VuZApjbGFzc2ljIHJlYWxpc20KZGVtb24gZXllcwpkZWxmdAptZWx0ZWQgd2F4CmFlc3RoZXRpYyBjdXRlIHdpdGggZmx1dHRlcgpleHBlcnQgZGVzaWduCmRlbGljYXRlIHJhaW4KZGVsaWNpb3VzIGZvb2QKYmx1ZWJlcnJpZXMgb24gdGhlIHNpZGUKYXJ0IGRlY28gZmFjdG9yeQpzaGFycCBmaW5lLWZhY2UKZGVzdHJveWVkIGNpdHkgaW4gdGhlIGJhY2tncm91bmQKZGVtb24gd2hpdGUgaG9ybnMKbmV1cm9uIGRlbmRyaXRpYyBtb25zdGVyCnVuc2V0dGxpbmcgZm91bmQgZm9vdGFnZQpidXQgbW9uc3RlciBpcyBkZW5kcml0aWMKc3Vuc2V0IHJha2VkIGxpZ2h0aW5nCmRlbnNlIHdlYiBvZiBuZXVyb25zIGZpcmluZwppcmlzaCBmb3Jlc3QKdWx0cmEgOCBrCmRlcHJhdmVkIGN5YmVybmV0aWMgZGVtb24KZGVzZXJ0IG1lc2EKc3VycmVhbCAzIGQgcmVuZGVyCnNpdHRpbmcgYXQgaGlzIGRlc2sKYmxhY2sgLSBhbmQgLSB3aGl0ZSBwaG90b2dyYXBoCnRoZSBkYXJrbmVzcwpicmlnaHQgYmx1ZSBzbW9rZQpyZWQgbGlnaHQgYnVsYnMKc3RhbmQgb24gc3RvbmUgZmxvb3IKbG9uZyB3ZWF2aW5nIGJyb3duIGhhaXIKcGVuIGRyYXcKYmxvb2R5IGtuaWZlCnF1aXhlbCBtaXhlcgpvbGQgY21wdXRlcnMgb24gdGhlIHNpZGV3YWxrCnN0YWdlIHNwZWFrZXJzCm1hc3RlciBzd29yZAppbHlhIHJlcGluIG9pbCBwYWludGluZwpzcGFjZSBuZWJ1bGEgaW4gYmFja2dyb3VuZAp2ZXJ5IGJlYXV0aWZ1bCBsb25nIHNsaW0gbGVncwp2ZXJ5IHZlcnkgdmVyeSBiZWF1dGlmdWwhIQp2aW9sZW50IHdlc3QgKQprZWxwIGZvcmVzdApwaG90b2dyYXBoaWMgam91cm5hbGlzbQpldXJvcGVhbiByaXZlcgpsaWdodCBhbmQgbWVkaXVtIHZhbHVlcwpkZXRhaWxlZCBjaW5lbWF0aWMgc2hvdApoaWdobHkgZGV0YWlsZWQgc2hhcnAgZm9jdXMKdG9reW8gc3RyZWV0IGJhY2tncm91bmQKZGlnaXRhbCBwYWludGluZyBjb25jZXB0IGFydApqYXBhbmVzZSBlbmdpbmVlcmluZwpsaW5kc2V5IGxvb2sKdmVyeSBkZWVwIHNlYQpkaW1lbnNpb25hbCBwb3J0YWwKY3VycmVudHMKdGVjdG9uaWMgY2l0eXNjYXBlCmRldGFpbGVkIGZhY3RvcnkKbWF5IGdpYmJzCmhpbmR1CmhvbGRpbmcgd2luZSBib3R0bGUKdG9wIGFuZCBzaWRlIHZpZXcKcmlkaW5nIGEgZHJhZ29uCnR1cnF1b2lzZSBjb2xvciBzY2hlbWUKa2FzaGluCnN1c3BlbmRlZCBicmlkZ2UhCmtlaXRhIG1vcmltb3RvCnNjcmVlbnNob3QgZnJvbSB0aGUgMTk4MyBmaWxtCnNwaWRlciBsZWdzIGxhcmdlCmRldGFpbGVkIHBob3RvIG9mIGFuIGFsYnVtIGNvdmVyCmthdGUgbW9zcwpzbyAtIHMgMSA0IDggZnQgbGlnaHQKZGlnaXRhbCBjb25jZXB0CmRpc2VscGFuayBhcnQKc3RhY2tlZCBjb21wdXRlciBzY3JlZW5zCm5lc3Qgb2YgdmlwZXJzCndlYXJpbmcgYSBiZWpld2VsZWQgbWFzawp3aXRoIGxvbmcgYmxvbmQgaGFpcgphbmlzb3Ryb3BpYyBmaWx0ZXJpbmcKZ2xvd2luZyBtYWdpY2FsIHNoaW55IHNraW4Kb2xkIHJvbWFuIHN0eWxlCndlYXJpbmcgc2NpIC0gZmkgY2xvYWsgd2l0aCBob29kCnRoaWNrIGJsdWUgbGluZXMKZWd5cHRpYW4gY3lib3JnIGFybW9yCi0gLSBhciA5IDogMSA2CnRoZSBkZXNpZ25lcidzIHJlcHVibGljCmV2ZXJ5dGhpbmcgaXMgbmVhdApzdGFjayBvZiBjb21pY3Mgb24gdGhlIGZsb29yCmZhZGVkIHBhcmNobWVudApkZXRhaWxlZCBzZWEKc2hvdCBvbiBuaWNvbiBjYW1lcmEKc29ueSBuaWNvbiBpcGhvbmUgMSAzIHBybyBtYXgKc3RhbmRpbmcgbGFtcCBsdXh1cnkKZmFtb3VzIGRlc2lnbmVyIGxhbXAKaXMgZXNzZW50aWFsbHkgYXJiaXRyYXJ5CmRldmFjaGFuCnN5bWJvbGljIG1ldGFwaG9yCm1hbmlhY2FsCmRldmlsIHZlcnN1cyBhbmdlbAptZWxsb3Ryb24KaGFyZCBvdXRsaW5lCndoaXRlc3BhY2UgYm9yZGVyCm9yZ2FuaWMgY29sb3IKZGljZXMKLiBpcmlkZXNjZW50IGFjY2VudHMKZGllZ28gZGF5ZXIKcHJlc3NlZCBmbG93ZXJzCnRhbGwgYW5nbGUKZGlnaXRhbCBhbmltZSBhcnQhIQpyZWQgYmlraW5pCnB1cnBsZSBmbGVzaApkZXNlcnQgY29tcG9zaXRpb24KKChzeW50aHdhdmUpKQp2ZXJ5IG1lZGlvY3JlCnRyZW5kaW5nIG9uIGFydHN0YXRvbgpnYW1lIHVpIGFzc2V0IGRlc2lnbgp3ZWFyaW5nIGN5YmVycHVuayAyIDAgNyA3IGphY2tldAplbGVnYW50IGJpb21lY2hhbmljYWwgbWFjaGluZXJ5Cm1hbmRhbG9yaWFuIGRlYWRwb29sCmZlYXRoZXIgYm9hCmRpZ2l0YWwgY29uY2VwdCBhcnQgb2YgZHlzdG9waWFuCmRpZ2l0YWwgY3liZXJwdW5rIGFuaW1lISEKaW4gc3R5bGUgb2YgZGlzbmV5IHpvb3RvcGlhCmRpZ2l0YWwgaGVhbHRoCm1hcmdhcmV0IGtlYW5lIHN0eWxlCnRhY3RpY2FsIHBvbmNobyBsYXRleCByYWdzCnB1cmUgam95CmRvbWUgb2Ygd29uZGVycwpjb2xvcmZ1bCBhbGllbiBmbG9yYQp3YXRlcmNvbG9yIGluayBwYWludGluZwpkaWdpdGFsIGlsbHVzdHJhdGlvbiBwb3N0ZXIKaW4gdGhlIGF1dHVtbiBmb3Jlc3QKdGVlbmFnZSBubwphbGllbiBoZWxtZXQKdGFyb3QgY2FyZCBmcmFtZQpkaWdpdGFsIHBhaW50aW5nIG9mIGEgcGFnb2RhCm51Z2dldApqaW5zdW5nIGxpbQp0dW5nc3RlbSBjb2xvciBiYWxhbmNlCmdsb3dpbmcgZmxvd2luZyBoYWlyCndhdGVyIGRyYWdvbgpuZWFsIGFkYW1zIHwgY2VudGVyZWQKam9obiBzY2hvZW5oZXIKdml2aWQgYXRtb3NwaGVyaWMgbGlnaHRpbmcKZXZpbCBmYWlyaWVzCmRpbWx5IC0gbGl0CnN0ZXBoZW4gc2hvcmUKc2lkZXNob3cgY29sbGVjdGlibGVzCmxvdyBmYXQgbGV2ZWxzCmRhdmlkIGJ1cm5ldHQKbW9vZHkgbGlnaHRzCm11c2V1bSBhcnRpZmFjdAo1IDAgbW0gY2luZW1hIHNob3QKOSAwIHMgcm9tYW50aWMgbW92aWUKYXBvY2FscHlzZQpzdHJlZXRzIG9mIG5ldyB5b3JrCm1peGVkIHRlY2huaXF1ZXMKZGFyayBodW1vdXIKYW5pbWFscyBydWxpbmcgdGhlIHdvcmxkCiggZ29sZGVuIHJhdGlvICkgZGV0YWlscwpkaXNuZXkncyBwcmluY2Vzcwptb25leSBmYWxsaW5nIGZyb20gdGhlIHNreQpkaXNzZWN0aW9uIG9mIGhhcHB5CnNlbnRpbWVudGFsCjMgZCBhciB2ciBhcnQKbWV0YXZlcnNlIGNvbmNlcHQgYXJ0CmNhdmUgbGlrZSB0ZWV0aAp0aGluIGdsb3dpbmcgZGV2aWNlcwpjZW50ZXJlZCBkb3QgcHVwaWwKaGVhbHRoIHN1cHBvcnRlcgpkaXhpdCBjYXJkISEhIQpzdHJhbmdlIHBsYWNlCmRtdCBtYWNoaW5lIGVsdmVzCmxpY2ggZGVtb24gbWFnZSBjbGFzcwpicmFuZGlzaGluZyBjaGFpbnN3b3JkCmh5cGVyIC0gZGV0YWlsCmphbWVzIGJhbWEKZG9jIHNhdmFnZSBpbiB0aGUganVuZ2xlCnVsdHJhd2lkZSBpbWFnZQpjb2JhbgoyNCAzNSBtbQphbGV4YW5kZXIgaGFtaWx0b24gc3R5bGUKc2l0dGluZyBzYWQgaW4gc3BhY2VzaGlwCm9sZCBza2V0Y2gKZmFjZSB3aXRoIHNrdWxsIG1hc2sKb3B0aW11cyBzdW4gb3JpZW50YXRpb24KZ2VvZGVzaWMgYXJjaGl0ZWN0dXJlCmRvbWUgb2YgdGhlIHJvY2sKb296aW5nIHB1c3R1bGVzCmJ1bQpkcnVua2FyZApoeXBlcmRldGFpbGVkIHBhaW50aW5nCmF2ZW5nZXJzIG1vdmllCnN3aXJsaW5nIGZpcmUgZmxhbWVzIGNvc21vcwpkb25hbGQgdHJ1bXAgaW4gZGFyayBzb3VscwpkZXRhaWxlZCBzaGFycCBwaG90bwpuYXRpb25hbGlzdAp3ZWFyaW5nIGNoYWluIG1haWwKc3VubnkgcGFyayBiYWNrZ3JvdW5kCmNhcGl0b2wgYnVpbGRpbmcKZG9uYWxkIHRydW1wIOKAmSBzIGZhY2UKbmV3c3dlZWsKZXZpbCB6b21iaWUKZ3JlZW4gYXJtb3IKcm9zc2RyYXdzIGRpZ2l0YWwgcGFpbnRpbmcKNCBjaGFuCnlvc3VrZSB1ZW5vCmRvdWJsZSBiYXJyZWwgc2hvdGd1bgpjb3NtaWMgc3RhcnMKZG91ZyB3YWxrZXIKc2hpbnkgbWV0YWwgYXJtb3IKaHVnZSBzdXNwZW5kZWQgd29vZGVuIGJyaWRnZQpkcmFnb24gZmx5aW5nIGluIHRoZSBza3kKaW50cmljYXRlIGZyYWN0YWwgYWJzdHJhY3Rpb24KZ3JlYXQgaG9ybnMKZHJhZ29uIHBlYWNvY2suIGludHJpY2F0ZQpiZWFyZGVkIGFuZCBidWlsdApkcmFnb24gc25ha2Ugd2l0aCB3aW5ncwpza2V0Y2ggdGF0dG9vCnBlcmZlY3QgaW50cmljYXRlCmRyYWtlIHRoZSByYXBwZXIgd2VhcmluZyBhIGt1cnRhCmRyYWtlJ3MgZmFjZQpjb2xvciBnbG93CnJlZCBncmVlbiB3aGl0ZSBibGFjawpiaWJsaWNhbCBlcGljIG1vdmllCnN0YW5kaW5nIHBvc2Ugb24gc3RvbmVzCm1hbHQKbmF0aGFuIGZvd2tlcwpkeW5hbWljIHBvc2UgcmVhbGlzdGljCnNhdGlzZmllZCBwb3NlCnNoYXJwIHNwaWt5IHJvY2tzCnNjaS1maSBtb3ZpZSBzaG90CnB1cnBsZSBvdXRmaXQKd2l0aCBwYXJ0ZWQgbGlwcyBhbmQgc3R1bm5pbmcKYW54aW91cyBleWVzCmZvdG9yZWFsaXNtCnZpYnJhbnQgYW5kIGR5bmFtaWMKZHJkaXNyZXNwZWN0IGFzIGEgZ3VuZGFtCmRyZGlzcmVzcGVjdCBhcyBuYXBvbGVvbgphYnN0cmFjdCEhIQpwYXRyaWNrIG5hZ2VsIQpmdWxsIG9mIGNvbG91ciB3IDEwMjQKc3dpcmxpbmcgbGlxdWlkcwphbHBob25zZSBtdWNoYSBmcmFuayBmYW56emV0YQpzY2lmaSBwdWxwCnZpdmlkIGNvbG9ycyBhbmF0b21pY2FsCmRyZWFtd2F2ZQppbiB0aGUgY29zbW9zCmRyZWFteSBjaGluZXNlIHRvd24KaGlnaCB3YXRlcmZhbGxzCmFic3RyYWN0IHNtb2tlIG5lb24KYXN1a2EgYXMgYSBzdXJmZXIgbW9kZWwKcmlzaW5nIGZyb20gb2NlYW4KZHJlc3NlZCBhbnlhIHRheWxvciAtIGpveQpkcmlua2luZyBib2JhIHRlYQpncmV5IHZlZ2V0YWJsZXMKZHJpdmluZyByYWluCmF3YXJkIGFyaGl0ZWN0dXJhbCBwaG90b2dyYXBoeQpkcm9uZSBwaG90b2dyYXBnaHkKZHJvcHMgYXJlIGZhbGxpbmcgZnJvbSBhYm92ZQpleHByZXNzaXZlIGJlYXV0aWZ1bCBwb3J0cmFpdApob2xkaW5nIGEgYm90dGxlCmNhcnRvb24gdHVydGxlcwo4IDUgbW0gZiAxIDYKZnJlbmNoIGZyaWVzIG9uIHRoZSBzaWRlCmRzbHIgcGhvdG8gb2YgYSBwcmV0dHkgdGVlbiBnaXJsCmRyIDggawpkdWtoYXJhIHNjYXZlbmdlcgppbiBhIGdvbGRlbiBzdW5zZXQgc2t5CmludHJpY2F0ZSBvcmdhbmljIHBhaW50aW5nCm1lZ2FmYXVuYQp2ZXN0Cmxvbmdib3dzCmhvb2RlZCBjbG9ha3MKc3RlYW1wdW5rIHRyaW0KZmVhdGhlcmVkIGNhdmFscnkKcGxheWVycyBoYW5kYm9vawpjaGF2CmJsb29kIGRyZW5jaGVkCndyZXN0bGVyCmRlZXAgcmVkIGV5ZXMKdHJhbnNmb3JtZXJzIHRveXMKd2VhcmluZyBvcm5hdGUgZWFycmluZ3MKZHluYW1pYyBwb3N0ZXIKZXZlIG9ubGluZSBtb3ZpZSBzdGlsbAplcGljIGZhbnRhc3kgbGFuZHNjYXBlCm1pY2hhZWwga2lya2JyaWRlCm9mZmljZSBjdWJpY2xlcwpkeXN0b3BpYW4gcmVpY2hzdGFnIGdlcm1hbnkKY2F0d2Fsa3MKZWFnbGUgaGVhZApydWluIGRlc3BhaXIgYXBvY2FseXBzZQplYXN0IGFmcmljYW4gbWFuIHdpdGggY3VybHkgaGFpcgpwaGlsaXBwZSBkcnUKcm9nZXIgZGVhbAplY292aWxsYWdlCmhhbGZ0b25lIHByaW50CmNvdXJ0cm9vbSB0aGUgYmVuY2gKOCBrIGhpZ2hseSBkZXRhaWxlZCBhcnQKbG92ZSBjcmFmdGlhbgpmYWxsZW4gYW5nZWxzCmVneXB0aWFuIHNhbXVyYWkKZWd5cHRpYW4gd2FycmlvcgplaWZmZWwgdG93ZXIgaXMgYnVybmluZwpib2xkIGNvbG9yZWQgd2FsbHMKdGF0dG9vIHBhcmxvciBwaG90bwpnb2xkZW4gZ2xpc3RlbmluZwplbGRhciBzYW11cmFpCmVsZGVuIHJpbmcgY2FwaXRvbAptYXN0ZXJ3b3JrIGNvcG9zaXRpb24Kc3Ryb25nIHByZXNlbnNlCmh1bWFub2lkIHR1cnRsZSBtb25zdGVyCmRhdmUgY2Fyc29uCmpvaG4gY291bHRoYXJ0CmxlZSBicm93biBjb3llCmFya2hhbQpteXN0aWNhbCBmaWd1cmUKZWxkZXJseSBncmVlayBnb2RkZXNzCmVsZGVybHkgd29tYW4KZWxlYW5vciB0b21saW5zb24KeWVsbG93IGFuZCBjeWFuIGNvbG9yIHBhbGV0dGUKc2xpbWUgbW9sZCBmb3Jlc3QgZW52aXJvbm1lbnQKaW5kdXN0cmlhbCBwbGFudCBlbnZpcm9ubWVudAppbiBhIGdyYXZleWFyZAp0aGUgbGFuZCBvZiB0aGUgZGVhdGgKam9vbmd3b24gamVvbmcKZXBpYyBiaWJsaWNhbCBkZXBpY3Rpb24KY29ycHNlcyBhbmQgc2hhZG93cyEKc3RldmUgaHVzdG9uCmVsZWdhbnQgdmljdG9yaWFuIHZhbXBpcmUKZWxlcGhhbnQgbWFuCmVsZXBoYW50aW5lIGFybW9yZWQga25pZ2h0CmhvbGRpbmcgYSBsdXRlCmFydCBzdHVkZW50CmF6dXIgYmx1ZSBleWVzCmJlbGx5IGZyZWUgdGVhbCBkcmVzcwpvcmllbnRhbCBmYWNlCmNyZWF0aW9uIG9mIHRoZSB3b3JsZApsZXQgdGhlcmUgYmUgbGlnaHQKaGF1bnRlZCBmb3Jlc3QKYWV0aGVycHVuayBhaXJicnVzaCBkaWdpdGFsIGFydAplbG9uIG11c2sgYXMgam9rZXIKZWxvbiBtdXNrIGFzIHRoZSBpbmNyZWRpYmxlIGh1bGsKdXNpbmcgYSBzcGFkZQp3b3JsZCBvZiBzbGVlcGVycwpyYWluYm93IGdlb21ldHJpYyBmYWNlCmRlcHRoIG9mIGZpZWxkIDIwbW0KZW1lcmdlbmNlIG9mIHRoZSBwaXp6YSByYXQKc3RhcmluZyBzZWR1Y3RpdmVseQp3aXRoIGRhcmsgcmVkZGlzaCBoYWlyCnJvdW5kIHJlZCBtICYgbSBmaWd1cmUKZGVzb2xhdGUgZGVzZXJ0IGxhbmRzY2FwZQpqYW1lcyB0ZXJyZWxsIGFydAptb25vY2hyb21lIGNvbG9yIHBhbGF0ZQpydXNzaWFuIGRlcHJlc3Npb24KbG96aGtpbgpzdGFuZGluZyBpbnNpZGUgYSBtYWdpYyBsaWJyYXJ5CmVtbWEgd2F0c29uIGFzIGFuIGF2b2NhZG8KZW1tYSB3YXRzb24gYXMgYmxvbmQgYXBocm9kaXRlCmVtbWEgd2F0c29uIGFzIG1vbmEgbGlzYQpwZXJmZWN0IHN5bW1ldHJpY2FsIGZhY2UhCmVtbWEgd2F0c29uIGFzIHNlYSBtZXJtYWlkCndlc3Rlcm4gY293Z2lybAp0YWtlbiB3aXRoIHNpZ21hIDIgMCBtbSBmIDEuIDQKYmx1cnJ5IGZvY3VzCnF1ZWJlYwpvbiBhIHN0cmVldCBhdCBuaWdodApkZXRhaWxsZWQgZmFjZQp2ZXJ5IHNsZWVweSBhbmQgc2h5CjUgbW0KZ3JheSBza2luLiBncnVuZ2UKaW5zaWRlIGFpcnBsYW5lCnBvcmsgbWVhdAppbiBzdHlsZSBvZiB0aGF3YW4gZHVjaGFuZWUKbGlzYSBmcmFuayAmIHNobyBtdXJhc2UKZW1wdHkgb2ZmaWNlCmFlcmlhbCBmb290YWdlCmVtcHR5IHNwYWNlIGJhY2tncm91bmQKbmF0dXJhbCBkdWxsIGNvbG9ycwpwaG9uZSBiYWNrZ3JvdW5kCmppbSBqYXJtdXNjaApmaWxtIHBob3RvIGZyb20gMTk3MHMKZW5kIG9mIHRoZSB1bml2ZXJzZQpnYWludCBibGFjayBtb29uCnNvbGFyIGZpZWxkIHBsYWlucwppbmN1YmF0b3IgbWVkcG9kcwp3YWtlIGN5Ym9yZ3MgZnJvbSBoeXBlcnNsZWVwCnN5bW1ldHJpY2FsIHBhaW50ZWQgZmFjZQpzdG9yeSB0ZWxsaW5nIGFlc3RoZXRpYwpjbG91ZHkgc2t5IGJhY2tncm91bmQKc2t5IQpiaWcgc2t5CmVudmlyb25tZW50IGRlc2lnbiBpbGx1c3RyYXRpb24KZXBpYyAzIGQgb3NodW4KZ29kZGVzcyBvZiBiZWF1dHkKZXBpYyAzIGQgb3hhZ3VpYW4KZXBpYyAzIGQgeWVtYXlhCnJlYWxpc3RpYyBhbmQgdWx0cmEgZGV0YWlsZWQKYWxhaW4gYmVuZXRlYXUKZG1pdHJ5IGJvZ2Rhbm92CmthcmVuIGNhcnIKanVsaW8gbGFjZXJkYQpoLiBreW9odCBsdXRlcm1hbgp2bGFkaW1pciBuaWtvbG92CnNtb2tlIGFuZCBkdXN0CmVwaWMgYXJjYW5lIG1hZ2ljCnNjZW5lIGZyb20gc3RhcnNoaXAKbWF0IGRyYXdpbmcgcGFwZXIKdGVybWluYXRvciBhcnQKZ29kZXMgc2N1bHB0dXJlCndpdGggb3JnYW5zCnN1bW1lciBwcmluY2VzcwpvbGQgZGFyayBmb3Jlc3QKY2luZW1hdGljIHN1bW1lciB2aWJyYW5jeQppbnRlbnNlIHNjcmVhbWluZyBleHByZXNzaW9uCm96IHNlcmllcwpjbG9uZSB3YXJzCmdvbGQgZmxha2UKdGluIGZvaWxpbmcKcG93ZXJmdWwgc2hhZG93cwpyb2JvdGljIG1lY2ggcGFydHMKaG9ycm9yIHNtaWxlCmFwcGxpZWQgdG8gdG9uZQpoaWRhcmkgYW5kIHZsb3AKZXh0cmVtZWx5IGRldGFpbGVkIGJlYXV0aWZ1bAphZGFyIGRhcm5vdgpzaWRuZXkgbHVnbwphbGFuYSBmbGV0Y2hlcgphbnRob255IG1vcmF2aWFuCmZlYXRoZXJlZCBoZWFkCmFtYmllbnQgYW1iZXIgbGlnaHQKY3JvdyBoZWFkCnRhaXdhbgppc2VrYWkgbWFuZ2EgcGFuZWwKaGVhdmVucwp3aW5kaW5nIHJpdmVycwpjZW50ZXJlZCBpbiBwaWN0dXJlCnNoaW55IG1hcmJsZSBmbG9vcgptYXNzaXZlIGNhbm5vbiBtb3VudGVkIG9uIGJhY2sKYmFyb3F1ZSEKZ3JhZGllbnQgZnJvbSB3YXJtIHRvIGNvbGQgdG9uZQpzcGVjaW1lbnMKbW9uc3RlcnMgaW5jIHBpeGFyCmhpZGVzIGluIHRoZSBzaGFkb3dzIG9mIHRyZWVzCmV0aGVyZWFsIHJlYWxtCmNlbnRyYWwgc2hvdApvcmdhbmljIGZvcm1zCnVzc3IgYXJtb3IKYXJ0IGNvbG91cmluZyA6IHJvYmVydG8gYmVybmFyZGkKYXJ0IGZvcmVncm91bmQgOiBlbG95IG1vcmFsZXMKYmFja2dyb3VuZCA6IGRpZWdvIGZhemlvCnN0cnVjdHVyZSA6IGt5bGUgbGFtYmVydApkaXNjb3ZlcmVkIHBob3RvCmRpc2Fzc2VtYmxlZApldmFuZ2VsaW9uIGFuaW1lCndpZGUgYW5nbGUgdWx0cmEgLSB2aXZpZApyZWQgZGlzaApldmlsIGEgaQpnaXZpbmcgZmxhc2tzIHRvIG90aGVyIGdub21lcwpoZXIgZnJpZW5kIHRoZSBjdW5uaW5nIGNveW90ZQonOSAwIHMKYXdhcmQgd2lubmluZyBtYW5nYSBzdHlsZQp0aGV5IHJlYWNoIGludG8gaGlzIG1pbmQKaGQgc3RhciB3YXJzIHBob3RvCmV2aWwgZmlyZSBzb3JjZXJlc3MgaW4gdGhlIHdvb2RzCmxvbmcgd2hpdGUgaGFpciBhbmQgd2hpdGUgYmVhcmQKY29sb3JzIHJlZmxlY3Rpbmcgb24gbGFrZQpzaGFycCBlYXJzCnJlZCBwb3dlcgpjeWJlcnB1bmsgYmxhZGUgcnVubmVyIGFydApleG9wbGFuZXQgbGFuZHNjYXBlCm15c3RlcmlvdXMgbGFib3JhdG9yeQp0ZWFtIGZvcnRyZXNzIHN0eWxlCmRhd24gYW5kIGR1c2sKZXhwbG9zaXZlIGxpZ2h0bmluZyBzcGVsbApsb3cgZWZmb3J0IGdyYWZmaXRpCmdyYWZmaXRpIGJ1ZmYKb2YgaW5kaWFuIHByaW5jZXNzCmJyYXNzIHZpY3RvcmlhbiBnb2dnbGVzCm15c3RpY2FsIGxpZ2h0CmRyaWVkIGhlcmJzCndvb2QgY2hhaXIKdGFibGVzIGFuZCBjaGFpcnMKc3R1bm5pbmcgaXZvcnkgZHJlc3MKb2YgYSBzbWFsbCB2aWxsYWdlIHdpdGggYSBsYWtlCmZlZWQgdHJvdWdocwpib3R0b20gdXAgZ3JlZW4gbGlnaHRpbmcKc3RhcmluZyBpbiB0aGUgY2FtZXJhCmtpdHN1bmUgbWFzawpodWdlIHRvd2VyaW5nIG1hZ2ljYWwgdW5pdmVyc2l0eQphdG1vc3BoZXJpYyA4awpzdGlsbCBmcm9tIHRoZSBtb3ZpZSA4IG1pbGUKd3JhcHBlZCBpbiB3aXJlcyBhbmQgcGlvbmVzCnRlY2huaWNvbG91cgpsb3ZlbHkgdmFsbGV5CnRvbnkgc2FydCBhbmQgYW4gYW5pbWUgYXJ0aXN0CmNhcnJpYmVhbiB3aGl0ZSBzYW5kCmNhcnJpYmVhbiB0dXJxdW9pc2Ugd2F0ZXIKc3VwZXIgc2F5YW4KZ2xvd2luZyBoYW5kcwpjb29sIDNkIHZpc3VhbGlzYXRpb24Kd2l0aCBiZWF1dGlmdWwgdm9sdW1ldHJpYyBsaWdodApzaGFycCByb2JvdCBjYXQgcGF3cwpzaGlueSBzaWx2ZXIgbWV0YWwgYXJtb3IKdmVyeSBsYXJnZSBiYXNpbCBsZWF2ZXMKZHJhbWF0aWMgY2xvc2V1cCBjb21wb3NpdGlvbgplYXRpbmcgc3BhZ2hldHRpIGZyb20gYSBib3dsCnVzaW5nIGZvcmsKZGlydHkgc2hvcnQgc2xlZXZlZCBzaGlydAptYXNzaXZlIHRhbmsKM2QgY2luZW1hdGljIHZvbHVtZSBsaWdodApleHRyZW1lbHkgZHluYW1pYyBwZXJzb24KOSA5IDkgbW0gbGVucwpwdXJwbGUgc2hpbnkgYm9iIGhhaXJjdXQKcHVibGlzaGVkIGFydAp2Z2JmdGsKYXJ0aWxsZXJ5IGV4cGxvc2lvbnMKaGVhdnkgZmlyZQpleHRyZW1lbHkgb3B1bGVudApvcm5hdGUgYXJ0CmV2aWwgZGFyawpmYWNlIG9mIGFuIGxpb24KZmFjZSBvZiBhbiBveApmYWNlIG9mIGFuIGh1bWFuCmdpcmwgaW4gYSBmbG93ZXIgZmllbGQKdG9yY2hlcyBhbmQgZmlyZWZsaWVzCm1hbGUhISEhISEhCnNudWIgbm9zZQpoaWdobHkgZGV0YWlsZWQgaG9ycm9yCmdlb21ldHJpYyBmaWd1cmVzCmhhc2hpbmcKYmFkIHNlbGZpZQpzdWJ0bGUgdGV4dHVyZXMKc3VwZXIgaGVybyBhcnQKZGlydHkgd2luZG93cwp0ZW50YWNsZSBiZWFzdApibGVhayBhcG9jYWx5cHRpYyBzdHlsZQpjb2xvcmZ1bCByYXZpbmUKbXVzaHJvb20gc3RydWN0dXJlcwpmYWlyeSBnYXJkZW4KY2FzdGxlIHRvd2VycwpmYWlyeSBxdWVlbgpmYWlyeWxhbmQgYnJpZGdlCmZhbGxvdXQgbGliZXJ0eSBwcmltZQpmYWxsb3V0IHBvd2VyIGFybW9yCm5pZ2h0IHNreSBmdWxsIG9mIHN0YXJzCm9uIGJleW9uZCB6ZWJyYQpsaWdodHMgaW4gdGhlIGRhcmsKc2hhcnAgcm9vZnMKOGsgcmVzb2x1dGlvbiBoZAp1bmZvcmdldHRhYmxlCmF5YWh1YXNjYSBzaGFtYW4KbXlzdGljIGRhcmsgY2F2ZQp3aXJ5CmxpZ2h0Z3JlZW4KZmVtYWxlIGRhbmNlcgpmbGlydGluZyBzbWlsaW5nCm1vc3RseSBncmV5c2NhbGUKY292ZXJlZCBpbiBzYWx0CnN0cmF3CmFyY2hpdGVjdHVyZSB2aXN1YWxpc2F0aW9uCmZhbnRhc3kgcGFsYWRpbiB3b21hbgpwZXRlciBtb2hyYmFjaGVyLiB1bnJlYWwgZW5naW5lCnNsaWdodGx5IC0gcG9pbnRlZCBlYXJzCnZpYnJhbnQgY29udHJhc3QKbWVybWFpZHMgYW5kIGZpc2gKZmFudGFzeSB3YXJyaW9yIGluIGZ1bGwgYXJtb3IKc3RhbmRpbmcgb24gdG9wIG9mIGEgdmlvbGluCmdyZWVuIGhpbGwKbG9va2luZyBvdXQgd2luZG93Cm9yYW5nZSBncmFkaWVudAphbnRocm9wb21vcnBoaWMgd29sZiBtYWxlCmJvdHRvbSB2aWV3YQpiaWcgc2hvdWxkZXIgcG9sc3RlcgpmYXNoaW9uIGljb24KaGFybmVzc2VzCnRvdGFsIGJsYWNrIG91dGZpdApmYXNoaW9uIHBvcnRyYWl0IHBob3RvCmZhdCBiaXJkCnJlYWwgcGhvdG9ncmFwaCBvbiB0aGUgc3RyZWV0Cm9uIGEgY2hlY2tlcmVkIGZsb29yCmZhdGhlciB3aXRoIGNoaWxkCmZhdGhlcgpmYXZlbGEgaG9uZXliZWUgaGl2ZQptaXNzaW9uIGFydHMgZW52aXJvbm1lbnQKZmMgYmFyY2Vsb25hCnJvbmFsZG8gbmF6YXJpbyBmZW5vbWVubwplbW90aW9uYWwgb2lsIHBhaW50aW5nCjEgMCA4IDAgcwpyZWNrbGVzcyBjb2hvcnQKcGFpbnRpbmcgaW4gbHVtaW5pc3Qgc3R5bGUKZmVtYWxlIHN0b3JtdHJvb3Blcgpob3QgcGluayBoYWx0ZXIgdG9wCmZyb20gYnJhdmVseSBkZWZhdWx0IGlpCmJyaWdodCB2aWJyYW50IGNvbG9yCnBsYW50IHJvb3RzCnRpbW90aHkgcmVlcwpmb3ggbGVncwptZXRhcnQKZmVtYWxlIGFzY2VuZGluZyBpbnRvIHRoZSBza3kKZmVtYWxlIGFzY2VuZGluZwpsdW1pbm9sIGxpZ2h0CmdvbGRlbiEhISBwYWxldHRlCmRlc2VydCB3aW5kCm5lb24gcGluayBhbmQgYmxhY2sgY29sb3Igc2NoZW1lCmZlbWFsZSBjeWJlcnB1bmsgYW5pbWUgZ2lybApsb25lbHkgcmlkZXIKZmVtYWxlIGR3YXJ2ZW4gd29tYW4KZmVtYWxlIGVhcnRoIG1hZ2UKbWVyY2VuYXJ5CmhpZ2ggLSBrZXkKZmVtYWxlIGdvZGRlc3MKZmVtYWxlIGhhaXJzdHlsZXMKc2lsa3kgc3RyYWlnaHQgaGFpcgpoZWF2eSBtYXNjYXJhCmRyYW1hdGljIGxpZ2h0IGRhcmtyb29tCmRhcmsgZmFudGFzeSBsaWdodApnb3JnZW91cyBhdHRyYWN0aXZlIGZhY2UKZGlnaXRhbCBpbGx1c3RhdGlvbgpuZWZhcmlvdXMKZnJvc3R5IGJyZWF0aApnb3duCmRldGFpbGVkIGZ1bGwgYm9keQpncmV5IHRhcm5pc2hlZCByb2Jlcwpnb2xkIHNoaXJ0CmljZSBuZWVkbGVzCnNrdWxsIHBhaW50CmF0dHJhY3RpdmUgbmVjawpsaXNib24gY2l0eSBhdCBuaWdodAphcnQgaW4gdGhlIHN0eWxlIG9mIHBhdWxhIHJlZ28Kd2hpcCBpbiBoYW5kCnRoZSBob2JiaXQgb3JjIGNvbmNlcHQKZmVycmFyaSBmIDQgMApmZXJyZXQgaW4gc3VuZ2xhc3NlcwpmZXJyZXQgd2FycmlvcgpmaWJvbmFjY2kgc2VxdWVuY2VzCmZpZWxkIG9mIGZsb3dlcnMgYXQgbmlnaHQKZmllcmNlIGJlYXJkZWQgZHdhcmYKZmllcmNlIG1lZHVzYQpyb2JvdCBraWxsaW5nIG1hbgpuYXR1cmFsIGxhbmRzY2FwZQpmaWdodCB3dyAxCmZpZ2h0aW5nIGdhbWUgY2hhcmFjdGVyCmZpZ3VyZSBkcmF3aW5nCmVtYm9kaW1lbnQgb2YgY29uY2VwdApzeW1ib2xpemF0aW9uCnR3aW4gcGVha3Mgc3R5bGUKcHVscCBmaWN0aW9uIG1vdmllCnNhbXVlbCBsIGphY2tzb24gcG9zaW5nIGluIGNhZmUKbGl0IHdpdGggY2FuZGxlcwpmdXR1cmlzdGljIGNpdHkgYmFja2dyb25kCmdsYXNzIGhlbG1ldHMKZmlsbSBzdGlsbCBkbmQgbW92aWUKcGxheSBpbiBkbmQKZmlsbSBzdGlsbCBmcm9tIGdvZCBvZiB3YXIKaW1hZ2V3b3JrcwpyaHl0aG0gJiBodWVzCmJsdXIgc3R1ZGlvCnBhdGhlY29sb3IKc2hvdyBmcm9tIGJlbG93CmxpZ2h0cyB0aHJvdWdoIGZvZwpmdXR1cmlzdGljIG91dHBvc3QgYnVpbGRpbmcKd2V0IGx1c2gganVuZ2xlIGxhbmRzY2FwZQpiZWlnZSBhbmQgZGFyayBhdG1vc3BoZXJlCmZ1bGwgbWV0YWwgamFja2V0CnZpc2FibGUgc291bmRzIHdhdmVzCmZ1bGwgYm9keSBwb3YKc3RhbmRpbmcgb24gdGhlIG1hc3QKZmlubiB3b2xmaGFyZApwZXJmZWN0IGZlbWFsZSBib2R5IHNpbGhvdWV0dGUKYXQgOCBrCnRpdGFuZmFsbCBpcmwKZGV0YWlsZWQgcGhvdG9yZWFsCnByZS1yZW5kZXJlZAprbmlnaHQgd2VhcmluZyBwbGF0ZSBhcm1vcgpzcGlkZXIgemVybwpbIG15c3RpYwpmaW5uIGZyb20gYWR2ZW50dXJlIHRpbWUKZmlvcmEgZnJvbSBsZWFndWUgb2YgbGVnZW5kcwpsaWdodCB0cmFuc3BvcnQKdmlicmFudCB2aWFscwpob21lIHBhZ2Ugc2NyZWVuc2hvdApmaXJlbmFkbwplYXJseSAxIDkgY2VudHVyeQpyZWFsaXN0aWMgbWlsaXRhcnkgZXF1aXBtZW50CmhlciBiZWxseSBpcyBmYXQgYW5kIHJvdW5kCmh1bWlkIGV2ZW5pbmcKZ2lsbHMgYW5kIHNjYWxlcwpmaXNoZXIgcHJpY2UgcHVibGljIHBvb2wKZmlzaGVyIHByaWNlIHJlZHdvb2QgZm9yZXN0CmZpc2hleWUgcG9ydHJhaXQKZmlzaGV5ZSB2aWV3CnNoaW4gbWluIGplb25nCmZpdCBtYWxlIGRlbW9uIHdpdGggd2hpdGUgaG9ybnMKZXhoaWJhbnQKZGVzdHJveWluZyB0aGUgd2FsbHMKZmlyZSBhbmQgZXhwbG9zaW9uCmtvcmVhbiBjb3VudHJ5c2lkZQptb2ViaXVzIGFuZCBraWxpYW4gZW5nCmZsYXQgMiBkIHZlY3RvciBhcnQKY2xlYW4gY2VsIHNoYWRlZApmbGF0IGRlc2VydApiZWF1dGlmdWwgbGlnaHRpbmcgY29tcG9zaXRpb24KZHVsbCBmbGFraW5nIHBhaW50CmZsYXQgd2FzdGVsYW5kcwp0aGluIHNwaWtlcwpmbGVzaHkgLSBjeWJvcmcgLSB6b21iaWUKNSAwIG1tIGZlIGYgLyAxLiA4CmluIHRoZSBiYWNrcm9vbXMKbGFyZ2UgcGlsbGFycwooICggKCBhbGllbiApICkgKQooICggKCBiYXVoYXVzICkgKSApCiggKCAoIGFydCBkZWNvICkgKSApCmdhcmRlbiBhdCBob21lCnNtYWxsIGZlbmNlCmZsdWZmeSBjYXQgdCAtIHNoaXJ0IGRlc2lnbgpoeXBlYmVhc3QKZmx1ZmZ5IGViYXkgcHJvZHVjdAp3aXRoIGxpZ2h0bmluZyBib2x0cwptaXN0IGJlbG93IGJ1aWxkaW5ncwpmbHlpbmcgZWxlcGhhbnQKaGlnaCBkZXRhaWwhISEgOCBrISEhIQpwaG90b3JlYWxpc20hISEKc2hhcnAgZm9jdXMhISEgY29oZXJlbnQhISEKaG9uZXlzdWNrbGUKZm9nZ3kgbmlnaHQgc2t5CmNvdHRhZ2Vjb3JlIGZsb3dlciBnYXJkZW4KY29sb3JmdWwgbW9zYWljCmJyZWFrIG9mIGRhd24gb24gbmVwdHVuCm55IHN0eWxlIGdyYWZpdHRpCmZvcmVzdCBndW1wIHRvbWF0byBib2R5CnRvbSBoYW5rcyB0b21hdG8gZmFjZQp0cmVja2luZwpyb21hbnRpYyBpbXByZXNzaW9uaXNtCmFyY2hlb2xvZ2ljYWwgZmluZApoaWdoIHRlbXBlcmF0dXJlCnN0b25lIHNsYWIKc3RhbmRpbmcgb3V0c2lkZSBhIGhvdXNlCnR3byBsYXJnZSBob3JucyBvbiB0aGUgaGVhZApvbiBhbiBpbmRpYW4gc3RyZWV0CmZvdXIgaG9yc2VtZW4gb2YgdGhlIGFwb2NhbHlwc2UKZmx1ZmZ5IHdoaXRlIGZ1cgpmb3ggY2FydmluZyBhcnQKZnJhY3RhbCBmb3Jlc3QKZGFyayBncmVlbiBnbGFzcwpob2xkaW5nIG9yaWdhbWkgcWlsaW4Kc29mdCBtZW1vcmllcwpjb25mbGljdGVkIGVtb3Rpb25zCmVtb3RpdmUgcG9ydHJhaXQKY2hhb3RpYyByZXZlbmdlCmZyYW1lIGZyb20gcHJvbWV0aGV1cyBtb3ZpZQphcnRnZXJtLiBhbmltZSBpbGx1c3RyYXRpb24KZnJhbmNvaXMgbGVnYXVsdApidXNpbmVzcyBvdXRmaXQKb2xkIGVuZ2xpc2ggZ2FyYgpuYXZlciBmYW5wb3AKZnVsbCBib2R5IHByb2ZpbGUgY2FtZXJhIHNob3QKZXBpYyBsaWdodGluZyBmcm9tIGFib3ZlCmVsYWJvcmF0ZSBjbG90aGluZwptdXRlZCBibHVlIGFuZCByZWQgdG9uZXMKYmxvb2Qgb24gdGhlIHN0cmVldHMKdHJlbmRpbmcgb24ga2lja3N0YXJ0ZXIKc2NpIGZpIGVwaWMgZGlnaXRhbCBhcnQKcmVkIGNhcnBldCBwaG90bwpvZGRpdGllcyBldmVyeXdoZXJlCmF1Z21lbnRhdGlvbgp3aXRoIGFwcGxlCmZyaWVuZGx5IGh1bWFub2lkIHJvYm90CmhlYXJ0IGVtYmxlbSBvbiBjaGVzdApmcmllbmRzIHR2IHNob3cgZXBpc29kZQpmdWxsIHRyYWRpdGlvbmFsIGNoaW5lc2UgYXJtb3IKbWFyc2htYWxsb3cKYmFyYmVjdWUKd29vZGVuIGxvZ3MKZnJvbSBtb3ZpZSBibGFkZXJ1bm5lcgpzY2VuZSBmcm9tIGJsYWRlcnVubmVyIG1vdmllCnBhaW50aW5nIGhyIGdpZ2VyIHRlbnQgaW4gYSByb29tCmZyb250IGNvdmVyIG9mIGEgbmV3IHZpZGVvIGdhbWUKaGFuZHMgYmVoaW5kIGhlciBwb3NlIQozIGQgcmVuZGVyIGV2ZW4gbGl0CmJpZyBpbnRlcmlvciBwbGFudHMKb2lsIHNsaWNrIG5lYnVsYQpyZWQgaGVhdnkgYXJtb3IKZnJvemVuIHpvbWJpZSBtYW4gd2l0aCBhIGNyb3duCmZ1amkgNSAwIHIgMyA1IG1tCnVuc2V0dGxpbmcgY3JlZXB5IGxpbWluYWwgc3BhY2UKbm9oIHRoZWF0cmUgbWFzawpmdWxsIC0gYm9keSBwb3J0cmFpdCBvZiBhIHJhbmdlcgpoYXJkd29vZCBmbG9vcgphcyBhIGNoYXJhY3RlciBmcm9tIGd0YXYKc2xpZ2h0bHkgZGFyayBjb2xvcnMKc2hpbnRvIHNocmluZQpzaGVsdmVzIGZ1bGwgb2YgbWVkaWV2YWwgZ29vZHMKd2VhcmluZyBibGFjayBsYXRleCBvdXRmaXQKbWlzdHkgbW9vZAp3ZWFyaW5nIGEgbW9kZXJuIHllbGxvdyB0c2hpcnQKcnVuZwpibGFjayBtYWluIGNvbG9yCmJsYWNrIGFuZCB5ZWxsb3cgY29sb3Igc2NoZW1lCmFpcmJydXNoZWQgcGFpbnRpbmcKZnVsbCBib2R5IGRldmlsIG1hbgpmdWxsIGJvZHkgZGV2aWwgd29tYW4KcGhvdG9zaG9vdCBwb3Nlcwpzd2lybGluZyBmbGFtZXMgaW4gYmFja2dyb3VuZAphcnRnZXJtIGFuZCBiZW4gbG8gYW5kIG11Y2hhCmhvcnJvciBmYWlyeSB0YWxlCmFydXplIGNvbG91ciBhdXJhCmluIHllbGxvdyBiaWtpbmkKaW5zaWRlIHdhdGVyCnFpdSBmYW5nCm1hc3RlcnBpZWNlIHdvcmsgb2YgYXJ0CmJvdW5jeSBiZWxseQpvbiBhIGdhbGF4eSBsb29raW5nIGJhY2tncm91bmQKZXBpYyBmYW50YXN5IG5vdmVsIGNvdmVyIGFydAp3aGFsZSBtb25zdGVycwpoZWFkIG9mIGFuIGVhZ2xlCnJlYWxpc3RpYyBodW1hbiBmZWV0CmNyaW1zb24gaGVhdnkgYXJtb3IKZ2VudGxlIHJvdW5kIGZhY2UKdGhlIG1hc2sgY292ZXJzIGhlciBlbnRpcmUgZmFjZQp3aWRlIHJpYmJvbnMKdWx0cmFtYXJpbmUKbmV4dCB0byBhIHJlZCBiYXJuCnNraW50aWdodCBibGFjayBib2R5c3VpdApzZXZlcmFsIGNoYXJhY3RlciBkZXNpZ25zCnRhb2lzdCByb2JlCndpdGggbmlrb24gY2FtZXJhcwp2YXJpb3VzIHBvc2VzIHNob290aW5nIHBob3Rvcwpza2ludGlnaHQgamV0IGJsYWNrIGxlYWh0ZXIgY29hdApmZXcgdGF0dG9vcwpzb2FraW5nIHdldCBoYWlyCmxvbmcgcG9ueXRhaWwKZ3JlYXQgc291bApkcmFjb25pYyBsb29raW5nIGFybW9yCnN1bWkgLSBlIGxpZ2h0aW5nIHN0eWxlCnVsdHJhIHdpZGUgMSAwIG1tCmxlYXRoZXIgamV3ZWxyeQpmbG9hdGluZyBkdXN0IHBhcnRpY2xlcwpzdGFyIGtpbGxlcgpzY2lmaSBkZXNpZ24KZnVsbCBib2R5IHJvYm90IHdpdGggaHVtYW4gbWFzawpiJncgaGFzc2VsYmxhdHQKcGVyZmVjdCBzeW1tZXRyaWNhbCBpbWFnZQpicmlnaHQgbXVsdGlwbGUgZ2xvd2luZyBleWVzCmhhbmdpbmcgdXBzaWRlIGRvd24Kc29mdCBibHVlIGxpZ2h0CmhvbHN0ZXIKZXBpYyBuaW5qYSBzdWl0CmNyb3duISEhISEhCmJvb3RzISEhISEhCnN1bGZ1cgpla3RhY2hyb21lICggMSA5IDcgNiApCmRhcmRlbm5lIGJyb3RoZXJzCmludGVyaW9yIGRlc2lnbiBiYWNrZ3JvdW5kCmxlYW4gc2xlZWsgc3R5bGluZwpmZW1pbmluZSBjdXJ2ZXMKZ3JhZGllbnQgY3lhbiB0byBibHVlCnVuZGVyd2F0ZXIgYnViYmxlcyBiYWNrZ3JvdW5kCjEgOSAyIDAgcyBicm9va2x5bgpkZXRhaWxlZCB3aGl0ZSBsaXF1aWQKZmVhdHVyZWQgaW4gcGljdG9wbGFzbWEKcmVtaWxpYSBzY2FybGV0IGZyb20gdG91aG91CmZ1bGwgbGVuZ2h0IHNob3QKYWlyIGJydXNoIGFydAoxIDkgNiAyCmJhbmQgb2YgZ29sZCByb3VuZCBoaXMgYnJlYXN0cwplc3R5CnBsYW4gZHJhd2luZwpmaWcuMQpmb3VuZCBwYXBlcnMKdGFyb3QgY2FyZCBkZXNpZ24KZGFuY2UgaGFsbCBiYWNrZ3JvdW5kCnlhZWwgc2hlbGJpYQp3ZWFyaW5nIGdvbGRlbiBjYXQgYXJtb3IKb2YgdGFpd2FuZXNlIGdpcmwgd2l0aCB0YXR0b29zCmdsb3dpbmcgbWludCBmYWNlCmNyb3duIG9mIHJlZCBzdGVhbXB1bmsgbGFzZXJzCmRhcmsgZGltZW5zaW9uIHBvcnRhbAp2b2x1bWlub3VzIHNsZWV2ZXMKMTl0aCBjZW50dXJ5IGZhbnRhc3kKc3RlYW0tcHVuawpjbG9zZS11cCBwZXJmZWN0IGZhY2UKc3VuIGJlaGluZCBoaW0Kc3Vubnkgd2ludGVyIGRheQphbmltYWwgbm9zZQpyZWQgYm93IGluIGhhaXIKd2V0IHQgc2hpcnQKb2Zmc2V0IGFuZCB0YWtlb2ZmCmJpZyBpbnRlbGxpZ2VudCBleWVzCmZpcmUgYmVoaW5kIGhpbQp3YXJtIGlsbHVtaW5hdGlvbgptYWdpY2FsIGRpZ2l0YWwKYW5pbWUhISEhIGtleSB2aXN1YWwKd29uZGVyb3VzIGFuZCBtYWdpY2FsCmluIGFuIHVyYmFuIHNldHRpbmcKbmVvbiBncmVlbiBsYXZhIHN0cmVldHMKaG9seSByb21hbiBlbXBpcmUKbmVvcHJlbmUKdHJlYXN1cmUgY2hlc3QKZ2lhbnQgaGFtbWVyCmNsb3NlZCBlY29zeXN0ZW0KcGhvdG9iYXNoaW5nCnJlZnJhY3RlZApjaW5lbWF0aWMgcGludGVyZXN0IHN0eWxlCnZvbHVtZXRyaWMgbGlnaHRpbmcgcGludGVyZXN0CmZ1dHVyaXN0aWMgYXNzYXVsdCByaWZsZQpyb2JvdGljIGxpbWIKdWx0cmEgbW9kZXJuCm9mZiAtIHJvYWQKZm9nIGFuZCBkaXJ0CmZ1dHVyaXN0aWMgZGllc2VscHVuayBzdHJlZXQKZ29kcyBleWUgdmlldwpkaWdnaW5nCnRhY3RpY2FsIGFzc2F1bHQKY3liZXJwdW5rIGJvZHlzdWl0Cmxhc2VycHVuawplY29zeXN0ZW0Kdm9sdW1ldHJpYyBmb2cgYW5kIGhhemUKZ2xvd2luZyBtZWNoYW5pY2FsIGV5ZSBjYW1lcmEKY3liZXJuZXRpYyBkcmVhZGxvY2tzCmJlYXV0aWZ1bCBjeWJvcmcgZ2lybCBwaW51cApmdXR1cmlzdGljIGxvb2tpbmcgbGl2aW5nIHJvb20KbWlkbmlnaHQgY29sb3JzCmZ1dHVyaXN0aWMgbmZ0IGNhcmQgZ2FtZQpyZWFsIGxpZmUgcGljdHVyZQpnb2xkIGFuZCByZWQgZmlsaWdyZWUKd2VhcG9ucnkgY29uY2VwdCBkZXNpZ25zCmRha2FyIG1vdG9yYmlrZQpmdXR1cmlzdGljIHRheGkKc3BoZXJpY2FsIGJsYWNrIHB1cGlscwp3aGl0ZSBwYW5lbHMKc2VhIGdyb3VuZApwcm9kdWN0aW9uIGlnIHN0dWRpb3MKd2l0aCBoaXMgYmFjayB0byB0aGUgdmlld2VyCnNob3J0IHBsYXRpbnVtIGhhaXIgdG9tYm95CmVsZWdhbnQgbGFkeSB3aXRoIGFsYWJhc3RlciBza2luCmZ1dHVyaXN0aWMgd29tYW4gcG9ydHJhaXQKbWFydGlhbiBhcmNoaXRlY3R1cmUKbWF0dGUgcGluayBhcm1vcgpvcmFuZ2UgZmx1ZmZ5IGJlbGx5CnNoYXJwIG1ldGFsIGNyZXN0CnNtb290aCBnb2xkZW4gc2tpbgpzbmFrZSBhcnQKc21vb3RoIGdvbGQgYXJtb3IKd2FyZnJhbWUgYW5kIGRlc3RpbnkgZmFuYXJ0CmdhbGF4eSBpbiB0aGUgZXllIPCfkYHvuI8KZ2FsaWxlbwpwb3dlcmZ1bCBmYW50YXN5IGVwaWMgbGVnZW5kcwp1bml0eSBzY3JlZW5zaG90CmdhbWUgYXNzZXQgb2NjdWx0CmluZnVzZWQgd2l0aCB6ZXJnIGh5ZHJhbGlzawpjb25zb2xlIGFuZCBjb21wdXRlcgpnYW1lIGNvbmNlcHQgYXJ0IHNwcml0ZSBzaGVldAptYWRlIG9mIGJlZXMKc3VwZXIgbWFyaW8gNiA0CmdhbmRhbGYgYXMgY2hld2JhY2NhCndpdGggcGFsbSB0cmVlcyBpbiB0aGUgYmFjawpwYXJyb3RzCndpdGhvdXQgZHVwbGljYXRpb24gbm9pc2UKZ2FuZ3N0YSByb2JvdAppbnNwaXJlZCBhcnQgZGVjbwpzdGVhbSB3b3Jrc2hvcCBtYXBzCjggMCBtbSBjYW1hcmEKZ2F5IHJpZ2h0cwpxdWlldCBhbmQgc2VyZW5lIGF0bW9zcGhlcmUKb24gYSBkYXJrIHN3YW1weSBic3R0bGVmaWVsZApnZW5lcmljIG1hbGUgbnBjIGZhY2UKZ2VuZ2hpcyBraGFuCnJvYm90IG5pbmphCmdlbnRlbG1hbgp0b3JjaGVzIG9uIHdhbGwKaGFyZCBsaW5lCmNhcmF2YWdpbwpodWdlIGJsYWNrIGNpcmNsZQpodWdlIGJsYWNrIHJvdW5kIGhvbGUKZ3lub2lkIGJvZHkKc2F0YW5pc3RpYyBza3kKc3Bpcml0cyBjb21pbmcgb3V0IG9mIHBvcnRhbApkZXB0aCBvZiBmaWVsZOKAnQpncmVnZyBhcmFraQpqYW1lbCBzaGFiYmF6Cmdob3N0bHkgbmVjcm9tYW5jZXIKbWFnaWMgYW5kIHN0ZWFtIC0gcHVuayBpbnNwaXJlZApvdmVyY2FzdCBib2tlaCAtIGMgNQpvdmVyY2FzdCBib2tlaCAtIGMgOApmaWVsZHMgaW4gZm9yZWdyb3VuZApoeXBlciBjb2xvcnMKZ2lhbnQgZGFobGlhIGZsb3dlciBjcm93biBoZWFkCmdpYW50IGRhaXN5IGZsb3dlciB1bmRlciBoZWFkCmdpYW50IGVsZHJpdGNoIGhvcnJvcgp3YXZlcyBvZiBlbmVyZ3kKZ2lhbnQgbWVjaApneW9rdWdhbgpzdHVubmluZyBzYXNxdWF0Y2gKd2l0aCBkb25hbGQgdHJ1bXAgaGFpcgpkb25hbGQgdHJ1bXAgY3lib3JnCmRpcnQgc3RhaW5zCmdpYW50IHNuYWtlIGNhc3RsZQpkYW1hZ2VkIHZpbmUgYnJpZGdlCmdpYW50IHNwaWRlcgpsb29taW5nIG92ZXIgZWFydGggaW4gc3BhY2UKYmVybGluIDEgOSA0IDUKd2VhcmluZyBraW1vbm8gYXJtb3VyCmluayBhbmQgbXV0ZWQgY29sb3VycyBvbiBzaWxrCmFuaW1lIGtleSB2aXN1YWwgbGlrZSBzYWl0YW1hCmZpcmluZyBsYXNlciByaWZsZQpvbGQgbW92aWUgc2NlbmUKaGVhZHMgYXJlIGFsbCBvdmVyIHRoZSBncm91bmQKZmxhdCBzdXJyZWFsIGRlc2lnbgpyaXNvZ3JhcGghISEKZHJhbWF0aWMgYnVpbGRpbmdzCmpha29iIHJvemFsc2tpCmxhdW5jaGluZyB0byBzcGFjZQptYWplc3RpYyBqYXBhbmVzZSBkcmFnb24KZ2lnYW50aWMgd29tYW4gaGVhZApkcmFnb24gc2NhbGUgd2FsbHMKc3VibGltaW5hbApoZSBpcyB2ZXJ5IHJlbGF4ZWQKZ2lybCBjcmVhdGVzIHNvbWV0aGluZyBncmVhdApnaXJsIGRyaW5rcyBtb25zdGVyIGVuZXJneQppbiBmYW50YXN5IHRhdmVybiBuZWFyIGZpcmVwbGFjZQpvcGVuIGJlbGx5CndhdGVyZmFsbCBjYXZlCmdpcmwgaW4gc3BhY2UKZmxvYXRpbmcgYmVzaWRlIHBsYW5ldHMKcGVuIHBhaW50aW5nCnZsYyBzY3JlZW5zaG90CmdpcmwgbG9va2luZyBhdCB0aGUgb2NlYW4gd2F2ZXMKZ2lybCBtYWtpbmcgYSBwaG9uZSBjYWxsCmJ1c2luZXNzIGNsb3RoZXMKd2F2eSB3YXRlcgpzdHlsZSBvZiBvbGQgbWFzdGVycwpvdmVyIGRldGFpbGVkIGFydApnaXJsIHZlbml6aWFuCmN1cnZhY2lvdXMKbnVyc2UncyBsZWF0aGVyIHN1aXQKZ2lybCB3ZWFyaW5nIHJvdW5kIGdsYXNzZXMKcHVycGxlIGF1cmEKc2Nob29sIGNsYXNzCmluIGEgZmllbGQgd2l0aCBmbG93ZXJzCnNpdHRpbmcgb24gZGVzaWduZXIgY2hhaXIKZ2lybCB3aXRoIHNob3J0IHdoaXRlIGhhaXIKZ2lybHMgcmVzdGluZwpncmVlbiBhcHBsZXMKeWVsbG93IGFwcGxlcwohIW5hdHVyYWwgYmVhdXR5ISEKIXNlZHVjdGl2ZSBleWVzIGFuZCBmYWNlIQpnbGFtb3JvdXMgYW5nZXdvbWFuIGRpZ2ltb24Kc3R5bGUgb2YgZmxhdmllIGF1ZGkKZ2xhc3Mgc2hhdHRlcmluZwpnbGl0Y2ggY29sb3IgcGFsZXR0ZQpuZW9uIGdsaXRjaApwYWNpbmcgaW4gc2VydmVyIHJvb20KcmFkaWFsIGNvbG9yIGRpc3BlcnNpb24KZHNsciA4NW1tCndldCByb2NrcwpnbG93aW5nIG93bApzY2llbmNlIGZpY3Rpb24gbWFnYXppbmUKY3V0IHVwIGNvbGxhZ2UKZ2xvd3dhdmUgZ2lybCBwb3J0cmFpdApoaWdobHkgZGV0YWlsZWQgdmZ4IHNjZW5lCmdub21lCndpdGggd2hpdGUga2FuamkgaW5zaWduaWFzCmFuYXRvbWljYWxseSBjb3JyZWN0IGhhbmRzISEhISEhCmdvbGQgYW5kIHdoaXRlIGV5ZXMKbmV1cm9uCmdvZGRlc3Mgb2YgdGhlIG9jZWFuCmdvZGVzc2VzCmFuaW1lIG1vdmllIGZyYW1lCnByaW5jZXNzIG9mIGxpZ2h0CmNsZWFyIGFuZCBmb2N1c2VkCmNyZWF0aXZlIGJvb2sgY292ZXIKd2lubmVyIG9mIGRlc2lnbiBhd2FyZApnb2xkZW4gbWFtbW90aCBpbiBhIHJ1aW5lZCBjaXR5CmludHJpY2F0ZSBzaGFkaW5nCmhhbmRzIHJhaXNlZCBpbiB0aGUgYWlyCmdvcmdlb3VzIGJlYXV0aWZ1bCB3b21hbgpmcmFtZWQgcGFpbnRpbmcKZGFyayBhbmQgc21va2V5IGJhY2tncm91bmQKZ29yZ2VvdXMgZmVtYWxlIGphZGUgdGFpbG9yCnN5bW1ldHJpY2FsIGV5ZXMgYW5kIGZhY2UKamFjb2IgcmlpcwppbnRyaWNhdGUgZGV0YWlsIGFuZCBjb21wb3NpdGlvbgptZXNzeSBiZWRyb29tCmdvcmdlb3VzIHN0ZWxsYSBtYWV2ZSBtYWdpY2lhbgpnb3JnZW91cyB5b3VuZyBhbGlzb24gYnJpZQpob2x5IGNpdHkgfCBpbGx1c3RyYXRpb24KY2FzdGluZyBhIGZsYW1lIHNwZWxsCnRvb2xzIGZvciBzY2llbmNlIHJlc2VhcmNoCmxhcmdlIGJsYWNrIGV5ZXMhISEKZ290aCBjbG93biBnaXJsCmNocmlzdG9waGVyIGMuIGxlZQpnb3RoaWMgbWFuc2lvbgpoZHIgcmF5dHJhY2luZwpmbG93aW5nIGJsYWNrIGdvd24KaG91cmdsYXNzIHZvbHVtZXRyaWMgbGlnaHRpbmcKbWljaGFlbCBwYW5ncmF6aW8Kd2hvbGUgYm9keSBwaG90b2dyYXBoeQpncmFmZml0aSB3cml0aW5nCmJ1YmJsZSBsZXR0ZXJzCmxvb2tpbmcgdXAgaW50byB0aGUgc2t5CmN5YmVycHVuaykpKSkpCm11Z3Nob3QhISEKY2lyY3VpdCBib2FyZHMpKSkpKQphbiBvbGQgbGFkeQpkYXJrIGNsb3VkeSBza3kKYm9ociBtb2RlbApsb25nIHJhdmVuIGhhaXIKdmlicmFudCBhbmQgbWF0Y2hpbmcgY29sb3JzCmxvdmVseSBhbmQgc3ltbWV0cmljYWwgZmFjZQprYXpha2gKZ3JlZW4gMTk2NyBmb3JkIG11c3RhbmcgZ3QKeXVnaW9oIHN0eWxlCmZvY2FsIGxlbmd0aDogMzVtbQpiZXV0ZWZ1bApjdXRlIHN0eWxlCmxpa2UgYSBzY2lmaSBhY3Rpb24gbW92aWUKZ3JldGEgdGh1bmJlcmcgYXMgZ29sbHVtCndlYXBvbiBkYW1hZ2UKc3Rvcm0gZWd5cHRpYW4gZ29kCmdyaW0gLSB3b2xmCmdyaW1kYXJrIGNoYW9zIGZvcnRyZXNzCnVsdHJhIGZpbmUgZGV0YWlscwpncm90ZXNxdWUgbGFyZ2UgYWxpZW4KaHlwZXJiZWFzdCBkZXNpZ24KaHVnZSBjZW50cmFsIHRyZWUKaG9tZSBzZXR0aW5nCmlwaG9uZSBjYW1lcmEKc3VwZXJjb21wdXRlcgo0IDUgeW8Kd2VhcmluZyBjbG9hayBhbmQgaG9vZApwc3ljaGVkZWxpYyBjb25jZXJ0IHBvc3RlcgpncnlwaG9uCmJhbGRpbmcgb2xkZXIgY3lib3JnIHJlcGFpcmluZwpyZWQgaG90IHNvbGRlcmluZyBpcm9uCmd1bmRhbSBpcyB3aW5kbWlsbCBzaGFwZWQKdmVub20gc3ltYmlvdGUKYW5pbWUgYmVhdXRpZnVsIHBlYWNlIHNjZW5lCmxvb2tpbmcgbm9zdGFsZ2ljCmhvcnNlIHNpdHRpbmcgb24gYXN0cm9uYXV0IGJhY2sKaG9yc2UgbGVncyBhbmQgaHVtYW4gYm9keQpjdXRzY2VuZSBmb290YWdlCmdyYWRpbnMgdmlldwpneXJvIHplcHBlbGkKaC4gci4gZ2lnZXIgaGllcm9nbHlwaHMKbGlnaHQgZ3JhZGllbnQKZ29kIG9mIHdlYWx0aApoYWlyIG1vbnN0ZXIKbWlnbm9nbmEKaGFsZiAtIG9yYwp2b2l0dgpib2R5IGNvdmVycyB3aXRoIG5lb24gY3J5c3RhbHMKd2VhcmluZyBhIGx1eHVyaW91cyByb3lhbCBjbG9hawpoYWxmIGNyb2NvZGlsZQpoYWxmIGxpb24KaGFsZiBsaWZlIDMgKCAyIDAgMiA2ICkKYW1hemluZyBwaG90b3JlYWxpc3RpYyBncmFwaGljcwpyYXkgLSB0cmFjaW5nIHJhZGlvc2l0eQp0ZW1wb3JhbCBzdXBlciByZXNvbHV0aW9uCmhhbGYgdGlnZXIKaGFsZiBtYW4gaGFsZiBiZWFyIGhhbGYgcGlnCnNpdHRpbmcgb24gdGhlIGJlYWNoCmhhbGYgc2hhcmsgYWxsaWdhdG9yIGhhbGYgbWFuCmZsYW1lcyBzdXJyb3VuZCBoZXIKbWlsayAtIGJhdGggZWZmZWN0CnBob3RvIGhpZ2ggZGVmaW5pdGlvbgpoYW5kLXBhaW50ZWQKaG9tZW1hZGUKZmx5aW5nIGFycm93cwpzb21lIG1pc3QgZ3JleSBzbW9rZSBhbmQgZmlyZQpyIC8gYmF0dGxlbWFwcwpvcmdhbmljIGxpcXVpZCB0ZXh0dXJlcwphYnVuZGVudCBpbiBkZXRhaWxzCnVyYmFuIGF0bW9zcGhlcmUKaGVhdnkgZ29sZGVuIGFybW91cgpkYXJrIGF0IGxlZnQgc2lkZQptYWxlIG1vZGVsCnJlZmxlY3RpdmUgd2F0ZXIga29pIHBvbmQKaGFuZHNvbWUgc3F1aWR3YXJkIGFzIG1hbGUKZGlnaXRhbCBmYW50YXN5IGlsbHVzdHJhdGlvbgpoYW5uYSBtb250YW5hCndpZGUgZ3JpbgpoaWdoIHF1YWxpdHkgcGljdHVyZQpoYXBweSBkYWNoc2h1bmQgY2F0Y2hpbmcgYSBiYWxsCmdyaWQgb2YgZXllIHNoYXBlcwppcGhvbmUgc2NyZWVuc2hvdApvbiBjZW50ZXIKYmFzZWQgb24gYnVtYmxlYmVlCnRzdWthc2EgaG9qbwphcnQgc3RhdGlvbiBjZmcgXyBzY2FsZSA5Cmhhcm1vbnkgb2Ygc3dhbXAKc21va2UgaW4gZnJvbnQKc21va2UgYmVoaW5kCnVuZGVyIHNha3VyYSB0cmVlCnNtb2tlIGNvbWluZyBvdXQgb2YgaGVyIG1vdXRoCmZ1bGwgZnJhbWUgc2hvdApoYXVudGVkIGxpbWluYWwgYWJhbmRvbmVkIHJvb20KbWV0YWxsaWMgc2hpbnkgc2tpbi4gaW50cmljYXRlCnJlYWwgcGljdHVyZSB0YWtlbiBpbiB6b28KY2luZXN0aWxsIDUgMCAwCm9jdGFuZSByZW5kZXIgaGRyCnNjcmFwIG1ldGFsIG9uIHdvcmtiZW5jaGVzCmhpcyBmcmFuayBibHVlIGV5ZXMKYW5hIGRlIGFybWFzIGFzIGpvYW4gb2YgYXJjCnZpcmlkaWFuIGFuZCB2ZW5ldGlhbiByZWQKdHVycXVvaXNlIGFuZCB2ZW5ldGlhbiByZWQKZ2xvdyBmaWx0ZXIKc2NhcmFiCmdvbGRlbiBldGNoZWQgYnJlYXN0cGxhdGUKb3Zlcmx5IGRldGFpbGVkIHRleHR1cmVzCnN0eWxpemVkIGZsb3dlcnMKbWFzdGVycGllY2Ugc3RhaW5lZCBnbGFzcwpvcm5hdGUgaGVhdnkgcGxhdGUgYXJtb3VyCm1hdHRlIHBhaW50aW5nIGFyY2FuZSBkb3RhIHBpeGFyCm1haGlyYSBraGFuIGFzIGEgbWFnZQp3dSBsaXUKc2xpZ2h0bHkgcGl4ZWxhdGVkCjQ1IGRlZ3JlZXMgZnJvbSB0aGUgc2lkZQpyYWluYm93IHN0cmlwZSBiYWNrZHJvcApwZW9wbGUgd2l0aCBtb2hhd2tzCmhlbGwgd2l0aCBwZW9wbGUgc3VmZmVyaW5nCmV2aWwgc3Bpcml0cyByb2FtIHdpdGggbGFudGVybnMKZmlnaHRpbmcgZm9yIGxpZmUKbWFydmVsIGNvbmNlcHQgYXJ0CiggKCBmYW50YXN5IHBsYW50cyApICkKaGVyZSdzIGpvaG5ueQpzbW9vdGggY29udG91cnMKd2hpbXNpY2FsIGJlYXZlcgp3ZXMgYW5kZXJzb24gZmlsbSBzY3JlZW5zaG90CmZlbWFsZSBtZWNoYQpzdWkgaXNoaWRhIGFydCBtYW5nYQpzdWkgaXNoaWRhIHdpdGggYmxhY2sgaGFpcgpsYXJnZSBwYXN0ZWwKbXV0ZWQgd2F0ZXJjb2xvci4gbWluaW1hbGlzdApoaWdoIC0gYW5nbGUKZm9yZXN0IHNldHRpbmcgaW4gaWNlbGFuZApob3QgZ2x1ZQpiYXJyZW4gZHJ5IGxhbmQKOCA1IG1tIGFydCBsZW5zCmRpc3RhbnQgaG9vZGVkIGZpZ3VyZXMKZGlmZnVzZSBtYWdpYwpsYXRleCBvdXRmaXRzCjUgMCBtbSBzaGFycCBsZW5zCnN0dWRpbyBiYWNrbGlnaHQKY2luZW1hdGljIGZyYW1pbmcgcnVsZSBvZiB0aGlyZHMKc3VuZGF5CmhpZ2ggZmFudGFzeSBjYXN0bGUKOGsgdWhkIHNjYW4Kc3BhY2UgaGFyYm9yCnNvdmlldCBicnV0YWxpc20KdnJheSBjaW5lbWF0aWMgc21vb3RoCmxlZSBtYWRnd2ljayAmIHl1dG8geWFtYWRhCmxvbmcgc3Bpa3kgZmx1ZmZ5IHNtb290aCBoYWlyCm11bHRpIHBhc3RlbCBjb2xvcnMKc21vb3RoIGluIF8gdGhlIGJhY2tncm91bmQKbWFkaHViYW5pCiEhd2VhcmluZyBnbGFzc2VzISEKcHJvZmlsZSBwaG90b2dyYXBoeQpzaGUgaGFzIHB1cnBsZSBoYWlyCnJhaW55IHVyYmFuIHN0cmVldHMKbWFyaWp1YW5hIGxlYXZlcyBpbiBiYWNrZ3JvdW5kCnBvcnRyYWl0IG9mIGEgdmlraW5nCnNhbnRhIGNsYXVzZQp1bnNldHRsaW5nIGxvb2sgaW4gdGhlIGV5ZXMKem9yYQpmYWNlIGRldGFpbGluZwpjbG90aGVzIGluIHRoZSBzdHlsZSBvZiAxIDkgOSAwCnNpdHRpbmcgb24gdGhlIGJlYWNoIGF0IG5pZ2h0CnJlZCB3b29kcyBjYW5vcHkKc3RhbmRpbmcgbmVhciB0aGUgYmVhY2gKaGlnaCByZXNvbHV0aW9uIGNvYWwgdGV4dHVyZQpiYWNrZ3JvdW5kIHJlbW92ZWQKY2F0IG1lcmdlZCBlbGVwaGFudCBoZWFkIGNvdwpwcml2YXRlIHNjaG9vbApwZXJmZWN0IHByb3BvcnRpb25zIGRlZmluZSBmYWNlCm92ZXJoZWFyZCBjYW1lcmEgdmlldyBvZiBraXRjaGVuCmZpbnRhbiBtYWdlZQpwaG90byByZWFsaXN0aWMgc3ltbWV0cmljYWwKaGlnaCBjb250cmFzdCBiYWNrbGlnaHQKaW5zYW5lIHF1YWxpdHkKZGVzZXJ0cyBhbmQgbW91bnRhaW5zCnZkCmJyYW5jaGVzIGFuZCBmb2xpYWdlCmZseWluZyBsZWF2ZXMgb24gYmFja3JvdW5kCm5vIGN1cnZlcwpsb3cgLSBwb2x5IGhhbmRzCmJsdWUgd2l0Y2ggaGF0CnRhcnRhbiB2ZXN0bWVudHMKcmVhbGx5IGZ1bm55CmxvbmcgZWxlZ2FudCB0YWlsIGJlaGluZApnaWFudCBjbGF3cyBsb29tCm1pY3JvIGV4cHJlc3Npb25zCmh1Z2UgZ2FyZ2FudHVhbiBibGFjayBzdW4Kc2t5IGJyaWRnZQp0ZXJtaW5hbHMKbmF2aWdhdGlvbiBjb21tYW5kIGNlbnRlcgpicmlnaHRseSBsaXQgLSBzdHlsZSBhdG1vc3BoZXJlCnNjYW5zIGZyb20gbXVzZXVtIGNvbGxlY3Rpb24Kc2lsdmVyIGFuZCBjcmltc29uIGluawptYWtvdG8gc2hpbmthaSBhbmQgdG9tIGJhZ3NoYXcKZnV0dXJpc3RpYyBub2lyCmluZHVzdHJpYWwgc3RlYW0KaG9ycmlibGUgcm90dGluZyBmbGVzaAoxIDkgNSA4CnRyYW1wbGluZyBhbiBhbmNpZW50IGNpdHkKc2NlbmljIGNvbG9yZnVsIGVudmlyb25tZW50CmFlc3RoZXRpYyBkeW5hbWljIGxpZ2h0aW5nCndhcmNhZnQgYXJ0CnRyYWRpdGlvbmFsIGNsb3RoZXMKY2FzdGxldmFuaWEgaW5zcGlyZWQKbmVvbiBjeWJlcm5ldGljIGltcGxhbnRzCmluIGJhdG1hbiBjb21pY3MKZ2xvc3N5IG1hZ2F6aW5lIHBhaW50aW5nCm1vbm8gZXllZAptYXN0ZXJwaWVjZSBvbiBhIHNjcm9sbAphd2FyZCB3aW5uaW5nIG1hc3RlcnBpZWNlIHBob3RvCmhpZ2hseSBkZXRhaWxlZCBzY2VuZQpncmVlbiByYWRpb2FjdGl2ZSBnbG93CmhpZ2hseSBkZXRhaWxlZCBzdXJyZWFsIHZmeApmZW5jZSBsaW5lCnBhc3RlbCBmbG93ZXJ5IGJhY2tncm91bmQKZnVqaSBjaG9jbwpiYWNrbGl0ISEKYXF1aWxpbmUgbm9zZSEhCnN1bnNldCBpbiB0aGUgZGlzdGFuY2UKaGlnaGx5IGRldGFpbGVkIGFuZCBvcm5hdGVkCndpdGggc3ltbWV0cmljYWwgZmFjaWFsIGZlYXR1cmVzCjRrIGhkIG1hdHRlIGRpZ2l0YWwgcGFpbnRpbmcKZHV0Y2ggcGFpbnRpbmcKYXBwbGUgYmxvc3NvbXMKZ3Jhdml0YXMKYnViYmxlZ3VtIGZhY2UKdGhlIHdpY2tlciBtYW4KaGlnaHdheSB0byBoZWxsCndlaXJkIGV4cHJlc3Npb25pc3QgcG9zZQpicm9rZW4gdGVldGgKa2lkcyBib29rIGlsbHVzdHJhdGlvbgp3b29kZW4gZGVjb3JhdGlvbgpoYW5kIG1hZGUKd29vZGVuIGhpcHBvCm1hcnRoYSBncmV0YSBrZW1wdG9uCmhpdGxlciBwbGF5aW5nIGJhc2tldGJhbGwKc3VpY2lkZQpob2JiaXQgbW9uYXN0ZXJ5IG9uIGhhd2FpaQpob2ZmbWFuIGJpY3ljbGUgdHJpcAppbnRyaWNhdGUgMyBkIHNjdWxwdHVyZQpob2xvZ3JhcGhpYyBpbnRlcmZhY2UKaG9seSBmaXJlIHNwZWxsIGFydAp2aWJyYW50IGRlZXAgc2F0dXJhdGVkIGNvbG9ycwp2aXN1YWxseSBhcHBlYWxsaW5nCm1hdHRlIHdoaXRlIHBhaW50CmhvbmRhIG5zeApob25kYSByYyAyIDEgMwpyZXBzb2wgaG9uZGEKamVyZXoKY2hhdXZldCBjYXZlCmhvcm5lZCByYW0gZ29kZGVzcwpmYW50YXN5IGFjcnlsaWMgb24gY2FudmFzCmhvcnJvciBhbmltYXRyb25pYwpjeWNsaW5nISEKaG9yc2UgY2xvc2UgLSB1cApyZWRkaXNoIC0gYnJvd24KaG9yc2UgcmFjaW5nIGNvbmNlcHQgYXJ0CmhvcnNlcyByYWNpbmcKbGFyZ2UgbW9zcXVpdG8gd2luZ3MKZXZpbCBzbWlsZSBhbmQgZ2xvd2luZyBleWVzCm1vb24gcmlzaW5nCnN0YXJ5IHNreQpzZWEgY2xvdWQKYmVhdXRpZnVsISEhISEhISEhCmhvdmVyYm9hcmQKbGlnaHQgYmVhbXMgbmlnaHQKZGFtYXNrCmthcnN0IHBpbGxhcnMgZm9yZXN0CmluIHN0eWxlIG9mIGt5cmlsbCBrb3Rhc2hldgp0aWEgbWFzaWMKaHVnZSBiZWx0CmluIHN0eWxlIG9mIGRpZXNlbHB1bmsKaHVnZSBtYWNoaW5lIGNyYW5lcwpuaWdodCBza3kgd2l0aCBtb29uCmFydHdvcmtzCmh1Z2UgbXVzY2xlcyBib2R5YnVpbGRlciB0b2RkbGVyCnZpYnJhbnQgYXRtb3NwaGVyaWMgY29sb3JzCmh1Z2UgdGVsZXNjb3BlIG9uIG1hdW5hIGtlYQpwYXJ0aWFsbHkgc3VibWVyZ2VkCnNvZnQgc21vb3RoIHNraW4KaGVhcnQgbWFkZSBvZiBmbG93ZXJzCmJsYWNrIGNlbnRlcmVkIHB1cGlsCnNlbnNvcnMKaGFwcHkgYWNjaWRlbnRzCmJsdWUgYW5kIHllbGxvdyBncmFkaWVudApodW1hbiBuZWVkIGRlYXRoIGFuZ2VsCmZyYWN0YWwgYmFjZ3JvdW5kCmh5cGVyIC0gcmVhbGlzdGljIG9pbCBwYWludGluZwp0d28gYmxhY2sgZXllcwpwYXNzYWdlcwpodW1wdHkgZHVtcHR5IGluIGZvcm0gb2YgZWdnCnBvcnRyYWl0IG9mIGZhbWlseSBvZiB0aHJlZQpodWdlIGRvd25zbGFudGVkIGV5ZXMKbGFyZ2UgZG93bnNsYW50ZWQgZXllcwpoeWJyaWQgb2YgbW91c2UgYW5kIGNhdAp3YXRlciBwYXJ0aWNsZSBpbiBmcm9udApwZXJmb3JtaW5nCmh5cGVyIGRldGFpbGVkIDMgZCByZW5kZXIKc2lsbHkgZmFjZQpzaWxseSBwbGF5ZnVsIGZ1biBmYWNlCmhpbnRzIG9mIGNvbGVzIHBoaWxsaXBzCmNocm9tZSBza2Vrc2lzCnNpbW9uIGJpc2xleSBhbmQgcGFvbG8gcGFyZW50ZQpzdHJlZXQgYXJ0IDggawpjZ2kgYW5pbWF0aW9uCm9taW5vdXMgY3JlYXR1cmUgaGlkaW5nIGRldGFpbGVkCm0uIGMuIGVzaGVyCmZvdXJ0aCBvZiBqdWx5Cmh5cGVyIHJlYWxpc3RpYyBhYnN1cmQKc3R1bm5pbmcgYXJjYW51bSBiYWNrZHJvcAp1bmxpbWl0ZWQgZGV0YWlsCmh5cGVyIHJlYWxpc3RpYyBjeWJlcnB1bmsgY2l0eQpsYXN0IHN1cHBlciBjb21wb3NpdGlvbgp0aGUgZGFya2VzdCBob3VyCnRva2lvIGZ1dHVyaXN0aWMgaW4gYmFja2dyb3VuZAphbmltYWwgY2FyaWNhdHVyaXN0CnZlcnkgZmluZSBkZXRhaWwgYW5kIHRleHR1cmUKZXhvdHJvcGlhIGV5ZXMKY2h1Y2sgY2xvc2UgYW5kIHJpY2hhcmQgY29yYmVuCm11dGVkIHdhdGVyIGNvbG9yCmxhdWdodGVyIGFuZCBzY3JlYW1pbmcgZmFjZQpkZXRhaWxlZCBzZXQgZGVzaWduCnRoeQpoeXBlciByZWFsaXN0aWMgcG9pc29uIGJvdHRsZQptYWNoaW5lcGFydHMKbWFyaWp1YW5hIGxlYXZlcyApIHdldApncmVlbiBzdWl0IGFuZCBib3d0aWUKcG9yY2VsYWluIHdoaXRlIGZhY2UKbG9ja2VyIHJvb20KY2xlYW5lZCB1cAppbnNhbml0eSBvZiB0aGUgbWluZApzaGFycCBkcmFnb24gY2xhd3MKaHVtYW5vaWQgcGluayBmZW1hbGUgc3F1aWQgZ2lybAp2YXN0dXMgbGF0ZXJhbGlzCmV4Y2VsbGVudCAzZCByZW5kZXIKd2l0aCByaXBwZWQgY3JvcCB0IC0gc2hpcnQKd2VhcmluZyB0aWdodCBzaGlydAppbiByZWQgcGFpbnQKYmxhY2sgcm9zZXMgaW4gaGFpcgpicm9rZW4gbWlycm9ycyBjb21wb3NpdGlvbgpvbmUgbWlsbGlvbiBicm9rZW4gZ2xhc3Mgc2hhcmRzCndhbGwgZnVsbCBvZiBzbWFsbCBhcnQgcGFpbnRpbmcKbmVhciBjcnlzdGFsIHRlbXBsZSBpbiBhdGxhbnRpcwpnbGlzdGVuaW5nIGdvbGQKdGlsdCBhbmdsZSB1aGQgOCBrCm1vdW50IGZ1amkgb24gdGhlIGJhY2tncm91bmQKaHlwZXJyZWFsaXN0aWMgY29tcG9zaXRpb24KZ2xvd2luZyBjZXJlbW9uaWFsIG1hcmtpbmdzCmZ1bGwgYm9keSBkbmQgY2hhcmFjdGVyIHBvcnRyYWl0Cm1vcnJvd2luZCBhcm1vcgpvYmxpdmlvbiBhcm1vcgpza3lyaW0gYXJtb3IKZXNvIGFybW9yCnRyaWJhbCBqZXdlbHJ5Cm5hbm8gcGFydHMKZWVyaWUgbXVzaWMKaGVhZCBwaWVjZQpoeXBlcnJlYWxpc3RpYyBpbWFnZSBvZiB4Cm1lY2hhbmljYWwgZmVhdHVyZXMgYW5kIG5lb24KZG9pbmcgbWFydGlhbCBhcnRzCnBpbmsgb3JhbmdlIGZsb3dlcnMKZXJpYyB6ZW5lciBheWt1dCBheWRvZ2R1CmJiYyBlYXJ0aApzdXBlciBmbHVmZnkKZGlnaXRhbCBzdW5nbGFzc2VzCmZ1dHVyaXNpdGMgc3VuZ2xhc3NlcwpzdXJyZWFsIGN5YmVyc3BhY2UKdGVjaG5vbG9naWNhbCBzdW5nbGFzc2VzCmZpbmVkIGRldGFpbAppbnRyaWNhdGUgYWJzdHJhY3QuIGd1Y2NpIHN0eWxlCnByb2Zlc3Npb25hbCBmb3RvCnN1biBiZWhpbmQgaGVyCnRoZSBtaWxrIHdheSB1cCBhYm92ZQp0aGUgaWRlYQppIGRvIG5vdCByZW1lbWJlciBiZWluZyBib3JuCmFwb2NhbHlwc2Ugd2VkZGluZwpnaXJsIG5leHQgZG9vciBpbm5vY2VudCBsb29rCmljZWQgdGVhIGdsYXNzCmZyb3N0ZWQKdGFsbCBpY2VkIHRlYSBnbGFzcwppY29uaWMgY2luZW1hdG9ncmFwaHkKc3R5bGUgb2Ygc2hvamkga2F3YW1vcmkKc3Ryb25nIGxpbmUgd29yawptaW5pbWFsaXN0IHBhaW50aW5nCmlkeWxsaWMgY290dGFnZQpyYXZlciBnaXJsCmFyIGdsYXNzZXMKZHJlYW1jYXN0CmZ1dHVyaXN0aWMgb3JiaXRhbCBzdGF0aW9uISEhIQooICggc3RpcHBsZWQgZ3JhZGllbnRzICkgKQpzdW1tZXIgbGFuZHNjYXBlIHdpdGggbW91bnRhaW4Kc2t5Y3JhcGVycyAxOTMwcwptaWFtaS4gaWxsdXN0cmF0aW9uCmxlcyBlZHdhcmRzIHBvc3RlciBhcnQKY3Jvc3MgY29udG91ciBkcmF3aW5nCmZsYXQgbGluZXdvcmsKY2hpbGRyZW4ncyBhbmltYXRlZCBmaWxtcwptYXN0ZXJmdWwgZGlnaXRhbCBhcnQKZGV0YWlscyBhbmQgaW50cmljYXRlCmlsbHVzdHJhdGlvbiBvZiBhIHJvb3N0ZXIKcHVycGxlIGJlYXV0aWZ1bCBza3kKc3BpcmFscyBpbiBleWVzCmhhcnNoIG5lb24gbGlnaHRpbmcKIyA3IDMgYyAyIGZiCiMgNiA2IDkgMyBmcwojIDkgOCBmYiA5IDgKIyAwIDEgNyA5IDYgZgpyZWZyaWdlcmF0ZWQgc3RvcmFnZSBmYWNpbGl0eQppbGx1c3RyYXRpb24gb2YgdG8gcG91dApmYWRpbmcgb2ZmIHRvIHRoZSBob3Jpem9uCnNoaXBzIHdpdGggc2FpbHMgdW5kZXJuZWF0aApyb3VuZCBsb2dvCmxhZHkgZ2FnYSBoYXJsZXkgcXVlZW4KaW1hYW4gaGFtbWFtCnBvc3QgLSBhcG9jYWx5cHRpYyBzdHlsZQphY2NpZGVudGFsIHNlbGZpZQppbWcgXyA5IDcgNS4gcmF3CmltbWFjdWxhdGUgcm93cyBvZiBjcm9wcwppbW1vcnRhbGl0eSBmb3VudGFpbgppbiB0aGUganVuZ2xlLiBibG9vbQpwaG9ncmFwaApuZW9uIHllbGxvdyBnbG93aW5nIG11c2hyb29tcwpldGNoaW5nIGlsbHVzdHJhdGlvbgppbiBmb3JlZ3JvdW5kIGJveSB3aXRoIHNob3RndW4KaW4gYSBjaXR5IHdpdGggYSByaWNoIGhpc3RvcnkKaW4gdGhlIGJhY2sgb2YgbXkgbWluZApkZXB0aCBvZiBzaGFycG5lc3MKaW4gdGhlIGRhcmsgZWxldmF0b3IKZGFyayBhcnRzbGFiY29hdHMKZmVzdGl2YWwuIHNjZW5pYyB2aWV3IGF0IG5pZ2h0CmR1dGNoIGdvbGRlbiBhZ2UgcGFpbnRpbmcKcmVkIHBhaW50IHN0cmlwIGFjcm9zcyBleWVzCmRlZXIgc2t1bGwgZmFjZQphY2lkcwpzdHlsZSBvZiBqZWFuIGRlbHZpbGxlCmluY3JlZGlibGUgaGQgZGV0YWlsCmNlbGVicmF0aW9uIG9mIGNvZmZlZSBwcm9kdWN0cwpmYWNlcyBvZiB0b28gbXVjaCBjYWZmZWluZQpjYXVzdGljIHNoYWRvd3MKaW5jcmVkaWJsZSBjcmVhdGl2ZSBzY3JlZW5zaG90CmN1cnZpbGluZWFyIHBlbmNpbCBtYXJrcwpzaW1wbGUgY3VydmlsaW5lYXIgd2F0ZXJjb2xvcgp3YXRlciBjb2xvciBwYXBlcgpkZWF0aCB2YWxseQp0ZXJhZGEKb24gcHM1Cm1hZCBtYXggZHVzdCBzdG9ybQpibGluZGluZyByZWQgb3JhbmdlIHNreQpiYWNrbGl0IGdpcmwgaW4gcmFpbmNvYXQKZ2lhbnQgcm9ib3QgYm9uZXMKcm9ja3kgY2xpZmYKcm9ib3Qgc2hhZG93CmRhcmsgd2V0IHJvYWQKcGVvcGxlIHBhbmljIGluIHRoZSBmb3JlZ3JvdW5kCmVuZXJneSBwdWxzaW5nCnBvd2VyZnVsIHN0YW5jZQptYWluIGNoYXJhY3RlciBjZW50ZXIgZm9jdXMKcmVhbCBwZWFybHMKamVsbHlmaXNoIGdlbGF0aW4KaW5kaWdlbm91cyBtYW4KbG9va2luZyBhdCB0aGUgbW91bnRhaW5zCmluZGlnbyByYWluYm93CnB1bHAgaWxsdXN0cmF0aW9uCmluIHRoZSBhdXN0cmFsaWFuIGRlc2VydAphbWJpZW50IGxpZ2h0aW5nIQppbmZsYXRhYmxlIGJvdW5jZXIgY2FzdGxlCmRhcmsgbGlwcwp2aWV3ZWQgZnJvbSBiaXJkJ3MtZXllCm1hZ2ljYWwgc2Nob29sIHN0dWRlbnQgdW5pZm9ybQpuZWdhdGl2ZSBlbmVyZ3kKY2hyb21lIGJvZHkKbGF0ZSBpdGFsaWFuIHJlbmFpc3NhbmNlCmdyZWVuIHdvcmxkCmluc2liaWRpIHN5bWJvbHMKZnJ1aXQgbWFjaGluZXMKd2FyZnJhbWUgaW5mZXN0ZWQgYXJ0CnNtb2tlIG91dCBvZiBoZXIgZXllcwozNjAgZGVncmVlIHZpZXcKb2xhZnVyIGVsaWFzc29uCnZlbmV0aWFuIGdsYXNzCnJpdnVsZXRzCmxpZ2h0IG1pY3JvZ3JhcGgKaW50ZWxsZWN0dWFsIGNhdApob2xkaW5nIGdsYXNzIG9mIHdpbmUKY29udG91ciBsaWdodCBlZmZlY3QhISA4IGsKc2hpbmluZyBnb2xkIGFuZCBibGFjayBhbmQgcmVkCmludGVyY29ubmVjdGVkIGh1bWFuIGxpZmVmb3JtcwpuZXh0IHRvIGEgdHJlZQpicmlnaHQgd2luZG93IGxpdCBraXRjaGVuCmNvdHRhZ2UgZGVjb3IKd2VsbG5lc3MgcG9vbApjZW50ZXJlZCB3aWRlIGZyYW1lZCB3aW5kb3cKaW50ZXJpb3Igb2YgYSBsaXZpbmcgcm9vbQptZXp6YW5pbmUKaW50cmljYXRlIGNvcHBlciBkZXRhaWxzCnZlcmRhbnQgcGxhbnRzIGdyZWVuIHdhbGwKd2hpdGUgbmVvbiB3YXNoCnBhdHRlcm5zIGFuZCB0ZXh0dXJlcwpsZWZ0IC0gaGFuZCBkcml2ZQpzaW5nbGUgc3RlZXJpbmcgd2hlZWwKb3BlbiB3aW5kb3cgaWIgYmFja2dyb3VuZApnaG9zdGx5IHNtb2tlCmludG8gdGhlIHVua25vd24KaW50cmljYXRlIGFuaW1lIGdpcmwgay1vbiBreW9hbmkKYXV0b2Rlc2sgMyBkIHJlbmRlcmluZwp2IC0gcmF5IGNvbGxlY3Rpb24KdGhlIGNhcmQgcGxheWVyIG1hbgpsaWdodCBicm9uemUgYnJvd24gaGFpcgphbnhpZXR5IGVudmlyb25tZW50CnNpbHZlciBhbmQgc2FwcGhpcmUKZ29kZGVzcyBpbmFubmEKaW5hbm5hCnVuc3BsYXNoIHRyYW5zcGFyZW50IGZyYWN0YWwKb24gY2cgc29jaWV0eQozIDUgbW0gZmlsbSBwaG90b2dyYXBoCmdsYXNzIGFuZCBnb2xkIGFuZCBqYWRlCmZvZ2d5IGR5c3RvcGlhbiB3b3JsZAppbnZlcnNlIGRhcmsgZ2xvd2luZyBwb3dlciBhdXJhCmRhcmsgcnVuZXMKd29vZGVuIGNyYXRlcwppbnZpc2libGl0eQpmaW5kaW5nIHdvcmRzCmlwaG9uZSAxIDMgcHJvIG1heAppcHNlaXR5CmlyZWxpYSBmcm9tIGxlYWd1ZSBvZiBsZWdlbmRzCnRoZSBibGFkZSBkYW5jZXIKamVsbHlmaXNoIHRlbXBsZQp1bmRlcndhdGVyIHNocmluZQpwb2x5Y2hyb21hdGljIHNwZWN0cnVtCnZpcmFsIHBvc3QKaG9uZ2Jzd3MKZmlsbSBzaG9vdGluZwpibGVuZGVyIGVldmVlIHJlbmRlcgppc29tZXRyaWMgZGVhZCBzcGFjZSBnYW1lCm1hZ2ljYXZveGVsCnBhbGUgZ3JlZW5zIGFuZCB3aGl0ZXMKYyA0IGQgc3R5bGUKc3RhciBjaXRpemVuIG9yaWdpbiAxMDBpCmRhbmdlcm91cyBjaGVtaWNhbCBoYXphcmRzCm5pZXIgYXV0b21hdGEgc3BhY2VzaGlwIHN0eWxlCmRldGFpbGVkIGhhdGNoaW5nCnBldGVyIGVpc2VubWFuCmlzb21ldHJpYyBmdXR1cmlzdGljIGJ1aWxkaW5nCmZvcmVsaWdodAooIGNvbmNlcHR1YWwgYXJ0ICkKKCByZWFkeSAtIG1hZGUgKQo0IGsgcG9zdCBwcm9jZXNzaW5nIDggawp3aW5kIGVneXB0aWFuIGdvZAohISB0YWtlc2hpIGFtYW5vISEKamFjZW4gc29sbwpqYWNrIG5pY2hvbHNvbiBhcyBuYXBvbGVvbgpqYWNrIHJ1c3NlbCBkb2cKamFjayBydXNzZWwgdGVycmllcgpraGFraXMKamFwYW5lc2UgY3lib3JnCnN1bm55IGJheSB3aW5kb3cKZmFyISEhISEhISBhd2F5CjEgOSA4IDggbWVsdCBtb3ZpZSBjbGFzc2ljCnNvYW1pCmNpdHkgaHVudGVyCmphcGFuZXNzZSBmYXJtZXIKamFzb24gc3RhdGhhbSBza2lpbmcKdmZ4IGFjdGlvbiBzaG90CnN0cmFuZHMgb2YgYmVpbmcKamVycnkKc2hlIC0gaHVsawpuZWNrIHJpbmdzCmplc3VzIGtpc3NpbmcgYSBtYXJpYSBtYWRkYWxlbmEKbW9uYWxpc2EKamV0IGJsYWNrIGhhaXJlZCBjeWJlcnB1bmsgZ2lybApib2F0IGluIGZvcmVncm91bmQKamltIGNhcnJleSBjYXJpY2F0dXJlIHJlYWxpc20KYmlvcGljCmppc29vIGZyb20gYmxhY2twaW5rCmpvYXF1aW4gcGhvZW5peApsYXVnaGluZyBhbmQgam9raW5nCmRldGFpbGVkIGZ1bGwgYm9keSBwb3J0cmFpdAphbmF0b21pY2FsIGFjY3VyYWN5CjEgLyA4IDAgcwpqb2UgYmlkZW4gaXMgb2JpIC0gd2FuIGtlbm9iaQp0ZW1wZXJhIG9uIHdvb2QKc2hhcmsgLSBodW1hbiBmYWNlCmh1Z2UgbWFuc2lvbgpiYXR0bGUgcmFwCmJhcm9xdWUgb2JqZWN0cwpqb2huIGVnYmVydApqb2huIGdvb2RtYW4gYXMgZG9uYWxkIHRydW1wCnByZXNzIHBhcGFyYXp6aSBwaG90b2dyYXBoCndha2UgdXAgc2FtdXJhaQptb2Rlcm4gZmFzaGlvbiBvdXRmaXQKZXBpYyBncmFuZGlvc2UKbmV3IG11c2ljYWwgaW5zdHJ1bWVudHMKanVkZ2VtZW50IGRheQprb3JlYW4gc3ltbWV0cmljYWwgZmFjZQpmYWNlIHBhaW50IGFyb3VuZCBleWVzCnZpbmUgZHJlc3MKZ3JlZW4gc2VhIHVyY2hpbgprYWlqdSBiYXR0bGUKZ2xvd2luZyBsaWdodHMhIGRpZ2l0YWwgcGFpbnRpbmcKa2FtYSBydXNzaWFuIGVsZWN0cm9jYXIKZmFjZSBsaWtlIGdyYXNzaG9wcGVyCnRyZW5kaW5nIG9uIHNrZXRjaGZhYgprYXJkdXIncyB2aWNpb3VzIHJldHVybgpkaXNjb3JkIGVtb2ppCmFlc3RoZXRpYyEhISEhISEKdGhpYWdvIGxlaG1hbm4Ka2F0YXJhIGZyb20gYXZhdGFyCmthdGFyaW5hCmZ1bGwgZGFya25lc3MKZmFudGFzeSBtb3ZpZSBwb3N0ZXIKb2lsIC0gcGFpbnRpbmcKaW50cmljYXRlIGZvcmVncm91bmQKd2l0aCBhIHllbGxvdyBiZWFrCmthd2FpaSB5b2RhCmhpZ2hseSBkZXRhaWwuIG9jdGFuZSByZW5kZXIKd29ybGYgb2Ygd2FyY3JhZnQKZmFrZWQgdGlja2V0CjggayBzZW5zdWFsIGxpZ2h0aW5nCmtldmluIG1pdG5pY2sgYXMgYSBiYW5rIHJvYmJlcgpraGVkaXZhbCBvcGVyYSBob3VzZQp0YWxhYXQgaGFyYiBzcXVhcmUgY2Fpcm8KZGFwcGxlZCBhZnRlcm5vb24gc3VubGlnaHQKa2lkIHBsYXlpbmcgd2l0aCBzbGltZSBtb25zdGVyCmhhaXIgbWFkZSBvZiBmaXJlCmtpbSBqb25nIC0gdW4KZ29sZCBzd29yZApzb3JhCmtpbmdkb20gb2YgZWx2ZXMKbWFyYmxlIGNvdW50ZXJ0b3BzCjQgNSBtbSBib2tlaApyaW5vCmtuaWdodHMgaW4gYmF0dGxlCmNvcGVyIGNsYWRkaW5nCnNvZnQgY29sb3VyZWQgZ2VsIGxpZ2h0aW5nCmluIHN0eWxlIG9mIHRpbSB3YWxrZXIKZ290aGljIGZhc2hpb24KNyAwIHMgbGl2aW5nIHJvb20KaG93IHJpdmVyCjcgMCdzIGtpdGNoZW4KMSA5IDIgMCBzIG1pbmltYWxpc20gc3R5bGUKZ29sZGVuIDEgOSAyIDAgcwpzdGlsbCBsaWZlIHBob3RvIG9mIGEgYmFja2Ryb3AKZHJlYW0gZGVzaWduCnJlbGllZiBjb25jZXB0CmtvaSBmaXNoZXMKa29yZyBmcm9tIHRob3IgYXMgYSBzb2xkaWVyCmtveWFhbmlzcWF0c2kKd2l0aCBsZXZpYXRoYW4gYXhlCmtyaXN0YW5uYSBsb2tlbgprdW50aWxhbmFrIG9uIHRyZWUKa3VudGlsYW5hawprdXJ0IHJ1c3NlbGwKa3lvdG8gYW5pbWF0aW9uIGtleQpzYW5kcm8gYm90dGljZWxsaSBzdHlsZQpoaWdoIGZhc2hpb24gdGhlbWVkCmFyY2hpdmUgcGllY2VzCnBva2VyIGZhY2UKdmlzY291cyBsaXF1aWQKbGFtYiBhbmQgZ29hdCBmdXNlZCBhcyBvbmUKc2NhcnkgcGhvdG8KcmVhbGx5IGxhcmdlIGJvc3VtCmFtZXJpY2EgMiAwIDkgOApjYW1hcmFkZXJpZQphcG9jYWx5cHMKb3ZlcmFsbHMgYW5kIGEgd2hpdGUgYmVhcmQKaGUgaGFzIGEgZGV2YXN0YXRlZCBleHByZXNzaW9uCmdvbGQgcGlwZWxpbmVzCmNsYXltb3JlIGFuaW1lIGJhY2tncm91bmQKc29sYXIgcHVuayBjaXR5CmFydCBvZiBraXJva2F6ZSBwaXhlbAphcnQgb2YgcmVndWxhciBmaGMKYXJ0IG9mIHBpeGVsIGplZmYgZnJhbmVrCmFydCBvZiBhYXJvbiBoYWluCmxpZ2h0cyBiZWFtaW5nIG91dCBvZiBleWVzCmpld2VsZWQgdGVjaG5vbG9neQpkYXJrIGNhdmUgcm9vbQpsYXJnZSBkaWFnb25hbCBicnVzaCBzdHJva2VzCm92ZXIgdml2aWQgZGFyayB3b29kIHRhYmxlCm1pbGtib3lzCm91dHNpZGVyIGFydCEhIQpza2VsZXRvbiBjbGltYmluZwpsYXJnZSBtb2Rlcm4gcmVzaWRlbmNlCmZsYXJlZCBqYXBhbmVzZSBibGFjayB0aWxlIHJvb2YKd2l0aCBsb3RzIG9mIHRleHQgYW5kIGljb25zCnBlcnNwZWN0aXZlIGFydHdvcmsKeWVhciAyIDggNiA2CnR1bGlwCmxhdWdoaW5nIHlvdXIgaGVhZCBvZmYKbWFycyBhdHRhY2tzCmNocm9tYXRpYyBncmFkaWVudAptYXN0ZXJwaWVjZSBjYW5ub24KYm9rYQpyZWNvbW1lbmRlZApsZWJyb24gamFtZXMgYXMgY2hlIGd1ZXZhcmEKb2N0YW5lIGhkIDRrCnZpdmlkIGRldGFpbGVkIHJlYWxpc3RpYwpvcm5hdGUgZ290aGljIGJhcm9xdWUgc3Bpa2VzCnZlcnkgc2hvcnQgcGFudHMKbGVpY2EgcyBwaG90b2dyYXBoCmxlbmkgcm9icmVkbwpyYW0gc2t1bGxzCmJhdHRsZSBvZiBnZW9ub3NpcwpsaWJlcnR5IHN0YXR1ZSBzaXRkb3duIHBvc2UKcGFyYXJlbApyYW5kb20gY29udGVudApiYWxhbmNlIGFuZCBwcm9wb3J0aW9uYWwKbWluZXJhbCBjb2xsZWN0aW9ucwpyYXJlIG1pbmVyYWwgcmFyZSByYXcgbWV0YWwKZGVzZW5obwptcnQKbGlnaHRlbmluZyB0cmVlCnJwZyBza2lsbApkaWFnb25hbAphZ2dyZXNpdmUgc3Ryb2tlcwpsaW5rIGluIGEgY2F2ZQpsaW9uIHdhcnJpb3IKbGlvbnMKc3RhbXBlZApsaXR0bGUgZWxmIHRvbWJveQp2b2x1bWUgY2xvdWRzCmxpdHRsZSBnaXJsIHdpdGggYmx1ZSBoYWlyCnplbiBpbmsKb2xkIGNpbmVtYQp0ZWFrIHRhYmxlCm1pZCAtIGNlbnR1cnkgc29mYQptYXN0ZXIgcGFpbnRpbmcKZG9jdG9ycyBtaXJyb3IKOCBraGQKem9tYmllIGFybXMgb3V0IGluIGZyb250CnpvbWJpZSBob2xkaW5nIGNvZmZlZSBjdXAKY3V0IHN0eWxlCmxvZ28gZm9yIHJlc2VhcmNoIGxhYgpsYW1hIHdpdGggZHJlYWRsb2NrcwptYyBlc2NoZXIgdGVzc2VsYXRpb24KdmlicmF0aW5nCmxvZG9zcwpwb3N0IC0gYXBvY2FseXB0aWMgd2FzdGVsYW5kCmxvbmUgZ2lybCB3YWl0aW5nIGZvciB0aGUgdHJhaW4KY29zbWljIHN1biBpbiB0aGUgYmFja2dyb3VuZApsdXNoIGdyZWVuIGNhY3R1cwpyb2QgcmF5cwpzdHlsZSBvZiB0b2xraWVuIHdvcmxkCnNlZG9uYSdzIGNhdGhlZHJhbCByb2NrIGJsdWZmCmxvbmcgbGluZS11cCBvZiBzdXNwZWN0cwozIGQgcmVuZGVyIDEgNSAwIG1tIGxlbnMKdWhkIHBob3RvZ3JhcGh5Cm92ZXIgZ3Jvd24gYm90YW5pY2FsIGdhcmRlbgpwaWVyY2luZyBnbGFyZSBpbiB0aGUgZXllcwptYXBwbGV0aG9ycGUKcHJvcG9ydGlvbmF0ZSBib2R5IHBhcnRzCnNtYWxsIHNob3VsZGVycwpsb29rIGRvd24gYSBjZWxsYXIgc3RhaXJjYXNlCmRpZ2l0YWwgY29sbGFnZQppbiBzdHlsZSBvZiBub3JtYW4gZm9zdGVyCmNhciBsaWdodHMKb25lIHNpbmdsZSBnYXMgbGFtcApsb290IGJveApsb3JkIG9mIHRoZSByaW5ncyBtb3ZpZSBwb3N0ZXIKbG9yZGUKdGhleSBtaWdodCBiZSBjcmF3bGluZwpibGFjayBhbmQgd2hpdGUgemlnIHphZyBmbG9vcgp5ZWxsb3cgZ2Vtc3RvbmVzCmljZSBzdW5mbG93ZXJzCm1hbmdldGEgc21va2UgcmVkIGxpZ2h0CnN0YXIgYm9ybgpsb3ZlIG9mIHdpc2RvbQp0b21lICsgY29uY2VwdCBhcnQKcG9zdCAtIGFwb2NhbHlwdGljIGNpdHkKbG92ZWx5IGJyaWdpdHRlIGZyb20gb3ZlcndhdGNoCmluc2lkZSBnb3RoaWMgZG9sbCBtYW5vciBiZWRyb29tCmFsaXphcmluIGN1cnRhaW5zCmRyZWFtaW5nIGJvZGllcwpsb3cgLSBhbmdsZSBnbyAtIHBybyB2aWV3CmNsYXVzdHJvcGhvYmljIHJvb20KbmFub2NhcmJvbi12ZXN0IGdyZWF2ZXMKd2lkZSBhbmdsZSBzaG90cwpzdWIgdHJvcGljYWwKdW5kZXIgd2F0ZXIgZGVlcCBzZWEgbGFib3JhdG9yeQoxIDkgNiA1IGxpZ2h0bmluZwpsb3cgbGlnaHQgbXVzZXVtCnNwYXJzZSByb29tCnRlbCBhdml2IHN0cmVldApjb2xkIHN1bm55IHdlYXRoZXIKbHVtaW9uCmludGVyaW9yIGxpZ2h0CnRlcnJhZm9ybWF0aW9uCmx1eHVyeSBjYXN0bGUKbWFjaGluaWMgZGVzaXJlCmFzcGFyYWd1cwptYXNoZWQgcG90YXRvZXMgYW5kIGdyYXZ5CmxhdGluIHdyaXRpbmcKa29kYWsga29kYWNocm9tZSA0MDAKMyA1IG1tIGYgMS4gOAptb2Rlcm5pc3QgYXJ0IHN0eWxlCmluIG1hdHJpeApwb3J0cmFpdCBvZiB5b3VuZyBtYW4KeW9zaGl0YWthIGFtYW5vIGdyZWcgcnV0a293c2tpCm1hZGVubmluZyBrbm93bGVnZQpteXN0ZXJpb3VzIGVlcmllIHBvcnRyYWl0CnBvdXR5IGxvb2sgOjogb2N0YW5lIHJlbmRlcgpzY2ktZmkgY29uY2VwdCBhcnQgOjogbml4cmkKc3ByaW5nIGZhc2hpb24KbWFnYXppbmUgaWxsdXN0cmF0aW9ucwpoeXBlcnJlYWwgaGlnaGx5IGRldGFpbGVkIDggawptYWdlIGZpZ2h0aW5nIGEgZ2hvdWwKbWFnaWMgY3J5c3RhbCBicmlkZ2UgY29sb3JmdWxseQptYWdpYyBjcnlzdGFsIHJpbmcKcmlkZSB0aGUgd2luZCBhbmQgd2F2ZXMKbWFnaWMgcmluZyB3aXRoIGEgZGlhbW9uZApnbG93aW5nIGZyYWN0YWxzCndpdGNoIGNsb3RoZXMKaW1wb3NpbmcgYXJjaGl0ZWN0dXJlCm1haWEgc2FuZHUgaHlwZXJyZWFsaXN0aWMKc3VidGxlIGxvdmVjcmFmdGlhbiB2aWJlcwozcmQtcGVyc29uIGNhbWVyYSEKYW50aHJvcG9tb3JwaGljIGxhcmdlIG1haW5lIGNvb24KdGVtcGVzdHVvdXMKc3RlYW1wdW5rIGJlYXV0aWZ1bCBhbmltZSB3b21hbgpsYXNlciBleWUKbWFsZSBnb2Qgc3Zhcm9nIHBvcnRyYWl0Cm1hbGUgamVzdGVyCm1hbGUgbWVkdXNhCmRldGFpbGVkIHB1bmsgaGFpcgphcm91bmQgMSA5IHllYXJzIG9sZAptYWxlIHVsenphbmcKcHVycGxlIGNyeXN0YWwgamV3ZWxyeQp5b3VuZyByb2JlcnQgcGxhbnQKYmxhY2sgd2l0Y2ggaGF0IGFuZCBicm9vbXN0aWNrCnJlZCB0cnVzc2VzCnBpbnRlcmVzdCB0YXR0b29zCm1hZGx5IGdyaW5uaW5nCmlzdG9ja3Bob3RvCmNsb3VkIG5lYnVsYQphbiBpbmRpZmZlcmVudCBmYWNlCm1hbiBwb3J0cmFpdCBtYWRlIG91dCBvZiBpY2UKY2lyY3VzIGJhY2tncm91bmQKbWFuIHN0YW5kaW5nIGluIGRlZmVuc2l2ZSBwb3NlCmhpZGluZyBiZWhpbmQgYSBicmljayB3YWxsCnNtb290aCBjb2xvcmluZwp3ZWFyaW5nIHJlZCB0YWludGVkIGdsYXNzZXMKem9pZGJlcmcKc2hhZGVkIGZhY2UKd2VhcmluZyBncmVlbiBzdWl0CndlYXJpbmcgZ3JlZW4gdG9waGF0CndlYXJpbmcgcHVycGxlIHVuZGVyc2hpcnQKbWFuZGFsYSBhcnQKY29sb3IgZWRpdGlvbgpmaXJlIHB1bmNoCm1hbmdhIGZyb250IGNvdmVyCnRoaW4gbGluZSBhcnQKZXZpbCBkZWF0aAptYW55IGN1dGUgZmx1ZmZ5IGNhcmFjYWxzCmludGVyYWN0aW5nIGFuZCBwb3NpbmcKcGFpbnRlZCB3aXRoIGNvbG91ciBvbiB3aGl0ZQpvbiBhIG5vdGVib29rIHBhZ2UKbWVyY2F0b3IgcHJvamVjdGlvbgpibGFjayBlZGdlcwptYXJiZWxsYSBsYW5kc2NhcGUKYmF0aHR1YiB3aXRoIGdvbGRlbiBmYXVjZXQKbGFyZ2UgcG90dGVkIHBsYW50CmRheiBvY2NsdXNpb24KbWFyZHVrCmRlcGxveWVkIHdpbmdzCmxlZ28gbW92aWUgc3RpbGwKc3R1ZGlvIGxpZ2h0aW5nIDUgMCBtbQp2b2x1bWV0cmljIHNtb2tlIGFuZCBzaGFkb3dzCmJsYWRlIHJ1bm5lciBleWVzCmRlc2VydCBhbmQgYmx1ZSBza3kKb3ZlcnNpemVkIHNodXJpa2VuCnN3aXJsaW5nIGZsdWlkIHNtb2tleSBlbmlnbWEKYmFja2xpdCBzdGFpbmVkIGdsYXNzCjggayBkaWdpdGFsIHBob3RvZ3JhcGh5CmJydXRhbGlzdCBhcHBlYXJhbmNlCm1hc3NpdmUgc2NhbGUgY29zbWljIGJlaW5nCm1hc3NpdmUgdmVydGljYWwgZ3JhbmQgcHJpeCByYWNlCmV4dHJlbWUgY2xvc2V1cCBzaG90CmVsZiBmb3Jlc3QgYmFja2dyb3VuZAptYXN0ZXJwaWVjZSBnb2RkZXNzIG9mIHNvcnJvdwpibGl6emFyZCBoZWFydGhzdG9uZSBjb25jZXB0IGFydApzdHJhaWdodCBmcmluZ2UKcGx1c2ggbGVhdGhlciBwYWQKc21vb3RoIHRlY2hub2xvZ3kKYmlvcHVuayBjbG90aGVzCmV0aGVyZWFsIGFuZ2VsaWMgYmVpbmcgb2YgbGlnaHQKcmVkIHBhaW50ZWQgbWV0YWwKZGFyayBncmV5IGNhcnBldAphcmNoaXRlY3R1cmFsIGZpbmlzaGVzCjIgMCAxIDUgbGl2ZSBtdXNpYyB2aWRlbwphdCBkdXNrIQp3YXJjcmFmdCBhcmNoaXRlY3R1cmUKM2QgY2VsbCBzaGFkZWQKZmxvYXRpbmcgc2t5c2NyYXBlcnMKYXNpYW4gaW50ZXJpb3IgZGVjb3JhdGlvbgpiYWNrZ3JvdW5kIGlzIGRpc25leWxhbmQgY2FzdGxlCnRoZSBiZXN0IGNvbXBvc2l0aW9uCm1heGltYWxpc20gZGlnaXRhbCBhcnQKY2hlZXJmdWwgZXhwcmVzc2lvbgpsb2ZpIHRlY2hub2xvZ3kKMSA5IDYgMCdzIHNjaSAtIGZpCm1lZ2FuIGZveCBtYWRlIG91dCBvZiBtYXlvbm5haXNlCmN1dGEgYW5pbWUKc3BhY2UgY293Ym95CnN0eWxlZCBsaWtlIGdob3N0IGluIHRoZSBzaGVsbAp0cmV4Cm1lY2hhbml6ZWQgc29sZGllciBnaXJsCmtvbmFtaSBtZWNoYQpiZWF1dGlmdWwgZHVzayBza3kKbWVkaWV2YWwgY2l0eSBtYXAKbGFua2htYXIKdHdpc3Rpbmcgc3RyZWV0cwptZWRpZXZhbCBjb2luIHRleHR1cmUKdG9vbCBiYW5kIGFydApoYWxmIHR1cm5lZCBhcm91bmQKbWVkaWV2YWwgZmVhc3QKbWVkaWV2YWwgZmVtYWxlIHdhcnJpb3IKZGFyayBmb3JiaWRkZW4gZm9yZXN0Cm1lZGlldmFsIGhvdXNlCm1lZGlldmFsIGplc3RlcgptZWRpZXZhbCBtYXAgb2Ygc21hbGwgdG93bgpiYXRzIGZseWluZyBhd2F5IGZyb20gY2FzdGxlCmdyaXp6bGVkIGJlYXJkCmNsb3VkbGVzcyBibHVlIHNreQpjZ3NvY2lldHkgc2F0dXJhdGVkIGNvbG9ycwptZWRpdGVycmFuZWFuIGZpc2hlciB2aWxsYWdlCndlYXJzIGEgbG9uZyByb2JlCmZyb20gZG9jdG9yIHdobyBzZXJpZXMKZiAvIDEgMS4gMAo5ODU1MzA5MDIKdGhpY2sgcmVkIGxpcHMKZHV0Y2ggY2FtZXJhIHZpZXcKYmxvbmQgaGFpciBncmVlbiBleWVzCjggMCAtIHMKc2F1c2FnZSBoYWlyCmJhdHRsZSBhY3Rpb24gc2hvdAp3aXRoIHNuYWtlcyBmb3IgaGFpcgptZWV0aW5nIG9mIHRoZSBjYXRzCm5lYXIgZnV0dXJlIDIgMCAzIDAKbWVnYWxvZG9uCmlua3kgaWxsdXN0cmF0aW9uCm9uIGRlc2sKcXVpY2sgc2tldGNoCm1ldHJvaWQgZHJlYWQKZ2hpYmxpIGFuZCBkaXNuZXkgYW5pbWF0aW9uCnBvc3NlIGZlYXR1cmVzCmNvbG91cmVkIGJhY2tncm91bmQKYmVhdXRpZnVsIGxhbmRzY2FwZSBib2tlaAp6YnJ1c2ggY29udGVzdCB3aW5uZXIKbWljcm8gLSBodXJyaWNhbmUKem9kaWFjIHNpZ24KbWljcm9waG9uZSBzaWxsdWV0dGUKd2luZG93IGxpZ2h0aW5nCm1pZCBwb3J0cmFpdApnaWxsIGVsdmdyZW4Kd2l0aCB3aXJlcyBhbmQgYmFuZGFnZXMKd2VsbCB0cmltbWVkIGJlYXJkCm1pZGRsZS1hZ2VkIHdpdGNoCmFjZSBhdHRvcm5leSBzdHlsZQptaWxpdGFyeSBkcm9uZQptaW5kIGV4cGxvcmF0aW9uCmhvbGRpbmcgYSBjYWR1Y2V1cyBzdGFmZgptaW5lY3JhZnQgbG9yZHMKcmFpbCB0cmFja3MKY2FmZSBmb3IgZmVsdGVkIGFuaW1hbHMKbWludXRlbHkgZGV0YWlsZWQKZGlvcmFtYSBwaWN0dXJlCmZha2UgM2QgbWVzaGVzISEKbG9uZyBwYWludCBicnVzaCBzdHJva2VzCmJsYWNrd29yawptaW5pbWFsaXN0IGxpbmUgYXJ0Cm9mIGEgcml2ZXIKcmVncmV0cwphYnNlbnQgZmF0aGVyCndhbmRlcmluZyBpbiB0aGUgY2l0eQpjaGFvdGljIHB1bmsKcG9saXNoIG1vdmllIHBvc3RlcgptaW5pbWFsaXN0aWMgaG91c2UgaW4gdGhlIHdvb2QKd2hpdGUgb3V0bGluZSBib3JkZXIKbWlyYW5kYSBvdHRvCmluc2lkZSBtaXJyb3IKZ2VvbWV0cmljIGRyaXBwZWQgaW5rIGJhY2tncm91bmQKY2hhcmNvYWwgc211ZGdlcwpzdWJzdXJmYWNlIHNjYXR0ZXJpbmcgbGlnaHQKc3RpbGxmcmFtZQp1aSBhbmQgdXgKdGVtcGxhdGUgc2hlZXQKYnJpZ2h0IGl0IGludGVyaW9ycwpzbm93eSBoaWxsIGF0IHN1bnJpc2UKZXhwb3NlZCBiYWNrCm1vZGVybiBsaXZpbmcgcm9vbQpsYW1lbnRlZApicmlnaHQgYXJ0Cm5mdCBwb3J0cmFpdAp2ZXJ5IGRldGFpbGVkIGJsYWNrIGZlYXRoZXJzCm1vbW1hIGFuZCBwYXBhCmZyb20geGVub2JsYWRlIGNocm9uaWNsZXMKc2FuamkKbW9ua2V5IG5hdnkgc2VhbHMKcHVuayB4ZXJveApibGFjayBzZWEKMSA5IDQgMCBwaWN0dXJlCm1vbnN0cm91cyBhbnQKMiAyIDAgZmlsbQptb29ubGl0IGZvcmVzdAptb29uc2hpbmUgY3liaW4KbHVuYXIgYnVzeSBzdHJlZXQKbW9yZ2FuYQptb3JvY2NhbiBuZXcgeW9yayBjaXR5IHN0cmVldApzdW1tZXIgMjAxNgpwdXJwbGUgb21uaW91cyBza3kKJDEwMDAwMDAwMAptb25hY28Kb24gZXhvcGxhbmV0CnNvZnQgbGlnaHQgb2Ygd2ludGVyCm1vdmluZyBwb2V0cnkKbGl2aW5nIG5hdHVyZQp2b2x1bWV0cmljIGVmZmVjdHMKemFjaGFyeSBxdWludG8Kbm8gbWFuIHNreQpsZWljYSBzbCAyIDUgMCBtbSBiICYgdwp0YWxraW5nIGFuaW1hbHMKY2hyb21hdGljIGlyaWRlc2NlbmNlCnRoaW4gaG9yaXpvbnRhbCBuZWJ1bGEKaGFwcHkgdG9lcwptYWdlIHRvd2VyIGZhciBhd2F5Cm1ycyBtaWxscwptdCBlbGJydXMgYXQgbmlnaHQKd2VhcmluZyBzaGluaW5nIHBsYXRlIGFybW9yCmNhdmVzIQp0cmVlcyEhCm11bWJhaSBpbiB0aGUgZnV0dXJlCm11c2NsZWQgbWlsYSBrdW5pcwpnb29kIHBvc3R1cmUKbXVzY3VsYXIgZmVtYWxlIGRydWlkCmVsZWdhbnQgYmlraW5pCm11c2N1bGFyIGdpZ2FjaGFkIGJlbmVkaWN0aW9uCmZ1bGwgYm9keSBodW1hbiBsZWdzCm11c2N1bGFyIG1lbgpsYXJnZSBleG90aWMgZmxvd2VycwptdXNjdWxhciBjaGFyYWN0ZXIKdGhleSBhcmUgdmVyeSBzZXJpb3VzCnNlcmlvdXMgYnVzaW5lc3MKbGlnaHRuaW5nIHNwYXJrcwpjaGVxdWVyZWQgY2FwZQpzdHJhbmdlIHdlaXJkbmVzcwpncmVhdCBfIGhhaXJzdHlsZQo4IGsgYXJ0aXN0aWMgbGl0aG9ncmFwaHkKbXl0aGljYWwgZ2lnYW50aWMgc3BhY2UgY2F2ZXJuCndhcm0gY29sb3JlZCBmdXJuaXR1cmUKbmFzY2FyIHJhY2UKaGFycnkgcG90dGVyIG1vdmllIHNjcmVlbnNob3QKbmF0dXJhbCBjYXZlIHdhbGwKZWxhYm9yYXRlIG9ybmF0ZSBqZXdlbGxlcnkKaHlwZXIgcmVhbGlzdGljIGJhY2tncm91bmQKbmVyZCBlbW9qaQpiaWcgcmVkIGFmcm8KbmV3IGFnZSBhbGJ1bSBjb3ZlcgphdWd1c3RhIHNhdmFnZQpnb2xkIHdpbmdzIG9uIGhlYWQKY2hvcmVvZ3JhcGhlZCBmaWdodCBzY2VuZQprbmVlcyB0dWNrZWQgaW4KYmxhY2tzIGFuZCBibHVlcwpmbG9yYWwgbW90aXZlcwp3aWRlIGxlYXRoZXIgYm9vdHMKc3RyaXBlZCBzb2NrcwpnbGFzcyBiYWxsIGF0IHRoZSB3YWlzdApiYWcgb3ZlciB0aGUgd2Fpc3QKYW5hdG9taWNhbCBjdXRhd2F5Cm5pZ2h0dGltZSBuYXR1cmUgbGFuZHNjYXBlCm5pa28gb25lc2hvdCByaWRpbmcgYSByb29tYmEKcm9zc2RyYXdzIDEuIDAKMSA4IHRoIGNlbnR1cnkgamFwYW5lc2UgcGFpbnRpbmcKZ29sZGVuIGhvdXIgaW50cmljYXRlCmNvbWnRgSBzdHlsZQptaW5pIGNvb3BlcgpoaWdoIHRyYWZmaWMKcGVyZWR2aXNobmlraQpubyBtYW4ncyBza3kgbGFuZHNjYXBlCmhhbGYgLSBsaWZlIGVuZ2luZQpub2lyIG1vdmllIHNjZW5lCmhpZGRlbiBhcmVhCnVua25vd24gc3BhY2UKbWVsdGluZyBpbnRvIGxpbGxpZ2FudApub3J3ZWdpYW4gbWFuCmNoYW9zISEhCm51Y2xlYXIgYmxhc3QgbW9vbiBlY2xpcHNlCm51bgpudXJzZSBnaXJsCmNvbmR1Y3RvcgpwbGFzdGljIHdhc3RlCmdsb3dpbmcgZ29kIHJheXMKZG10IHdhdmVzCmluZHVzdHJpYWwgbGlnaHQgbWFnaWMKc2t5ZHNnYWFyZApwaXhlbHMgaHVoCmhhbGYgb2N0b3B1cwp0aGUgb2R5c3NleQp1bHRyYSBzaGFsbG93IGRlcHRoIG9mIGZpZWxkCm9mIGEgYmVhdXRpZnVsCm9mIGEgZnVsbCBib2R5CmV0aGVyZWFsIGRyZWFteSBsaWdodApqLmouIGFicmFtcwppbiBtaWxpdGFyeSB1bmlmb3JtCm9ncmUgY2hlZiBpbiBhbiBhcHJvbgpsb3RzIGJsdWUgY29sb3VycwpyYWxwaCBob3JzbGV5IHZpdmlkIGNvbG9yCnJvc2VzIGluIGNpbmVtYXRpYyBsaWdodAp0cmFuc2x1Y2VudCBncmFwZXMKbWFnaWNhbCBydW5lcyBmbHlpbmcKd2VhcmluZyBncmVlbiBjbG9hawptYWdpY2FsIGJhdHRsZWZpZWxkIGJhY2tyb3VuZAp0cmVlcyByZWZsZWN0aW5nIG9uIHRoZSBsYWtlCmdhbGF4eSBpbiBleWVzCnNpbmdsZSBhcmVhIG9mIGF0dGVudGlvbgp3ZXN0ZXJuIHRvd24KY29yZHMgYW5kIHdpcmVzCnRyYW5zbHVjZW50IGdyYXBlcyBjbG9zZXVwCjEgNyA5IDUKdGFsbCBiYWNrbGl0IHdhdmVzCndpbGQgd2F0ZXIKaG9sZGluZyBnb2xkIHdhdGNoCmZyYW5zIGhhbHMgc3R5bGUKdW5kZXJncm91bmQgc2NlbmUKc29saXR1ZGUgdW5kZXIgYSB3YXRlcmZhbGwKc3BhY2UgZmxvd2VyIGZhaXJ5CmRlY29yYXRlZCB3aXRoIGZsb3dlcnMKYmVhdXRpZnVsIGZhbnRhc3kgY2F2ZSBzY2VuZQp3ZWFycyBhIGxpZ2h0IGdyZXkgY3Jvd24Kc2hhdmVuIHN0dWJibGUKZGFyayByZWQgY29sb3IKYW1hemluZyBza3kKdW5kZXIgd2F0ZXIgc2NlbmVyeQpyZXRybyBhdG1vc3BoZXJlCm9sZCBqZWRkYWggY2l0eSBzdHJlZXQKb2xkIG1hbGUgd2FybG9jawpvbGQgbWFuIGRvaW5nIHdpdGggbWFzawp2ZXJ5IGRldGFpbGVkIGZhY2lhbCBzdHJ1Y3R1cmUKdG8KZGlmZnVzZWQgYmFja2xpZ2h0CmJsYWNrIGFuZCB3aGl0ZWhpZ2hseSBkZXRhaWxlZApwaXJhdGVzIHRyZWFzdXJlIG1hcApza3VsbCBpc2xhbmQKb21hciBzaGFudGkgaGltYWxheWEgdGliZXQKb3ZlcmxhaWQgd2l0aCBhcmFiaWMgdGV4dApob2xkaW5nIGtob3Blc2gKa2FybCBzcGl0endlZy4gdW5yZWFsIGVuZ2luZQpzb21lb25lIHNpdHMgaW4gYmVkCm9uZSBhbmdlbApsYXNhZ25hCmdpZ2VyIOKAmSBzIHhlbm9tb3JwaAppbiB0aGUgbWlkZGxlIG9mIGFuIGFyZW5hCm9uZSBwaWVjZSBzaGlwIHNhaWxpbmcKb25lIG9uaW9uIHJpbmcKZWxlZ2FudCBoYW5kCmNocmlzdGluYSBrcml0a291CmNpbmVtYXRpYy4gZnV0dXJpc20Kb25saW5lIGNhc2lubyBsb2dvCmRhbmdlciBsdXJraW5nIGluIHRoZSBuaWdodApyZWQgY2FzdGxlIGluIGJhY2tncm91bmQKbWF0dGUgYmxhY2sKaGlnaCBjb2xvcmF0aW9uCmxvb2sgdHdpY2UKbmF2YWwgYmF0dGxlcwp0eXJlIG1hcmsKcGhvdG8gdGFrZW4gZnJvbSBmYXIKb3RoZXJ3b3JsZGx5IHRlY2hub2xvZ3kKc2lnaHQKaG9sb2dyYXBoaWMgcGxhc3RpYwpwaG90b3JlYWxpc3RpYyBoeXBlcmRldGFpbApyYWluIGFuZCB0aGljayBzdHJhbmRzIG9mIG11Y3VzCm9yZ2FuaWMgc2VkdWN0aXZlIGdlaXNoYQp0d2lubW90aW9uIHJlbmRlcgpvcmlnaW5hbCBjaGliaSBidW5ueSBnaXJsCmZ1bGwgb2YgcGFpbnRpbmdzIG9mIGFuZ2Vscwp0aGUgZ29kIG9mIHRoZSBmb3JnZQp2aW9sZXQgYW5kIGFxdWEgbmVvbiBsaWdodHMKMyA1IG1tIGYgMS4gNCBkaWdpdGFsIHBob3RvCnZvbHVtZXRyaWMgc2hhZG93CnJnYiBkaXNwbGFjZW1lbnQKZmx5aW5nIGJsYWNrIG1hcmJsZSBiYWxscwpwbGFpbiB2aWV3CnNwYW5uZXJzCndlYXJpbmcgYW4gYWNhZGVtaWMgZ293bgppbiBjaHVyY2gKbG90cyBvZiBkZWNvcmF0aW9uIGFuZCBmdXJuaXR1cmUKc2hvcnQgYW50bGVycwpwaG90byBvZiB3YXIKcGFpbiBmcm9tIG5hcnV0bwpwYW9sbyB2ZXJvbmVzZSBzdHlsZQp3ZWFyaW5nISEhIGNsb3RoZXMhISEKc3RhbmRpbmcgbmV4dCB0byByb3lhbCBjYXN0bGUhISEKcGhvZW5peCByaXNpbmcgZnJvbSB0aGUgYXNoZXMKZWxlZ2VuY2UKdWx0cmFzdGF0aW9uIGhxCnNjaWZpIGdhZGdldHMgaW4gYSBwb25kCnN0cm9teSBjbG91ZHMKcGFpbnRpbmcgb2YgYXJpYW5hIGdyYW5kZQpwaWNzIHRoYXQgZ28gaGFyZAptdXRlZCBjb2xvcnMhISEKc2Vuc2Ugb2YgbW92ZW1lbnQKc3BhcnNlIGNoZXN0IGhhaXIKY2FsaWNvCmluIGEgYmVhdXRpZnVsIGNyeXN0YWwgY2F2ZXJpbmUKYmFzcXVpYXQhIQpwYWludGluZyBvZiBhIGRyZWFtc2NhcGUKY29sb3JmdWwgZW5lcmdldGljIGJydXNoIHN0cm9rZXMKaGlwc3RlciBkYWQKaHVnZSBvZmZpY2UKZGlhZ29uYWwgc3Ryb2tlcwpyb2NrIGRldGFpbHMgam9pbnRzCnJhdGNoZXQgc3RyYXBzCmJvdHRpY2VsbGkgYW5kIHZpY3RvIG5nYWkKdGlueSBiaWtpbmkKdmVybWlsbGlvbiBhbmQgY3lhbgpkcmVzc2VkIGFzIGFuIG9yYWNsZQpmb3Jlc2VlaW5nIHRoZSBmdXR1cmUKcGFpbnRpbmcgb2Ygc3BsYXNoaW5nIHdhdGVyCmZsaWdodCBzdWl0IGFuZCBnbG92ZXMKZnVrYXlhIHl1aWNoaXJvCmljeSBleWVzCnBhaW50aW5nIG9uIGEgYmFkZ2UKd2FybSBsaWdodGluZy4gbW92aWUgcG9zdGVyCmphbiBkYXZpZHN6b29uIGRlIGhlZW0KYmx1ZSBleWVzIGFuZCBhIHdpZGUgZmFjZQpmdW5ueSBhcnR3b3JrCmJyaWdodCBmbGFyZQpwYWxlcm1vIGNpdHkgc3RyZWV0CnB1bGl0emVyIGF3YXJkIHdpbm5lcgphYm9yaWdpbmFsIGF1c3RyYWxpYW4gaGlwc3RlcgpwYWxtIGxlYXZlcyBvbiB0aGUgYmVhY2gKY29sb3JmdWwgdGlsZWQgYXJjaGl0ZWN0dXJlCnBhbm9yYW1hIG9mIGNyb29rZWQgYW5jaWVudCBjaXR5CmFyY2hpdGVjdHVyYWwgZGlnZXN0ISEhCnJhZGlvYWN0aXZlIHBhcnRpY2xlcwp3aXRoIHJhcCBjYXAgb24gaGVhZApwYXJ0eSBhdCBtaWRuaWdodAp2ZXJ5IGVsb25nYXRlZCBsaW5lcwp3YXNpbHkga2FuZGluc2t5CmFkdWx0IHN3aW0gc3R5bGUKbWlsaXRhcnkgZmxhZ3MKdGF0dG9vIGdyYXBoaWNzCnBhdGggdGhyb3VnaCBhIGRlbnNlIGZvcmVzdAp0aGUgaGFycG9vbiBpcyBzaGFycApoZSdzIG9uIGFuIG9sZCBzYWlsaW5nIGJvYXQKYXF1YXJlbGxlIHBhaW50aW5nCmZhZGVkIGFuZCBsaW1pdGVkIGNvbG9yIHBhbGV0dGUKZ2xvdyBsaWdodHMKc3BlYWtlYXN5CnNsaW15IHNoaW55IHJlZmxlY3RpdmUgam95CnNlYSBncmVlbiBjb2xvciB0aGVtZQpjeWJlcnB1bmsgYXJ0IHVsdHJhcmVhbGlzdGljIDhrCmRhcmtlciBpbnRlbnNlCnByZWNpc2lvbmlzdApwb3NpdGl2ZSBhdG1vc3BoZXJlCmNvb2wgdmliZXMKcGVyZmVjdCBhbmRyb2lkIGdpcmwgZmFtaWx5CnRyaXNzIG1lcmlnb2xkCnBlcnNlcGhvbmUgYXMgZ29kZGVzcyBvZiBkZWF0aApuYXZpZCBuZWdhaGJhbgpwZXJzaWFuIHByaW5jZXNzCnBlcnNvbiB3ZWFyaW5nIGdhcyBtYXNrCmpldCBlbmdpbmVzCnlvc2hpdGFrYSBhbWFubyB2aWJlCmxvY2F0aW9uIGlzIGluc2lkZSB0aGUgdGFyZGlzCm9mZmljaWFsIHJlbmRlcgpsaWdodCByYXkgZnJvbSBhIGJsdXJyeSB3aW5kb3cKYXJ0IGJ1bmRsZQpwaGFudG9tIGxpc3QKcGhvbmUgd2FsbHBhcGVyIGhkCmNvbmNyZXRlIF8gd2FsbCApIF0KbG9jYXRpb24gKCBmYXZlbGEgKQpiYWNrZ3JvdW5kICggZGFyayBfIHNtb2tpbmVzcyApCm1lZGl1bSBbIGdyYWZmaXRpIF0KYW50aHJvcG9tb3JwaGljIF8gaHVtYW5vaWQKcGhvdG8gLSByZWFsCmluIGxha2UKcGhvdG8gZnJvbSBiZWhpbmQgb2YgYSBjb3dib3kKc2l0dGluZyBhdCB0aGUgdGFibGUKbmVhdCBiYWVyZApob3Jyb3Igc3VycmVhbCBhcnQKcmVhbCBjYXVzdGljcwpoZHIgc21vb3RoCnBob3RvIG9mIGEgYmVhdXRpZnVsCnllYXIgMzAyMgphcGVydHVyZSBmMTEKMS8xMDAgb2J0dXJhdGlvbiBzcGVlZApzdGFyIGluc2lkZQpwaG90byBvZiBhIGdob3N0bHkgcGlyYXRlCmsgaGlnaCBkZWZpbml0aW9uCmNsb3VkIGdvZGRlc3MKaW4gYSBjaW5lbWEKY2FuZHkgdHJlYXRtZW50cwpiaXJkIG9uIGhpcyBzaG91bGRlcgpnbG93aW5nIGRhcmsgcmVkIGV5ZXMKdGh5bGFjaW5lCmlubmVyIHBlYWNlCmF3YXJlbmVzcwpoaWdseSBkZXRhaWxlZCBkYXJrCmdyZWcgcnV0a293c2tpIGFuZCBhbmRlcnMgem9ybgpoaWtpbmcgdHJhaWwKaGVsbGVuaXN0aWMgc2N1bHB0dXJlcwpmdWxsIGxlaWdodApwaG90byBvZiBkZW1vbiBnb2xsdW0KcGhvdG8gb2YgZG9uYWxkIHRydW1wCnJlYWwgaHVtYW4gZmFjZSB3aXRoIHNraW4KaW4gbGFjZSBicm93biBkcmVzcwpoZWF2aWx5IGFybW91cmVkCnBob3RvIG9mIGdob3N0IG9mIGFudWJpcwpwaG90byBvZiBtb25zdHJvdXMgdG9ybmFkbwo0IDUuIDcgbXBsZW5zCmNpcmN1cmFsCmNhbm9uLSA3MC0yMDBtbSBsZW5zCnBob3RvIG9mIHNvcGhpYSBsb3Jlbgpzd2VhdHkgc2tpbiBkcmlwcGluZyBkb3duIGZhY2UKYnJpZ2h0IGNpdHkgbGlnaHRzCnBob3RvIG9mIHRoZSBnaXJsCnBob3RvIG9mIHRoZSBzdGF0dWUgb2YgbGliZXJ0eQpsaWUgZGV0ZWN0b3IgdGVzdAp2YXJpb3VzIHBvaW50IG9mIHZpZXcKbG92aW5nbHkgbG9va2luZyBhdCBjYW1lcmEKaW4gYSBsb25nIHdoaXRlIGRyZXNzCmxvdHMgb2Ygd2VpcmQgYWxpZW4gcGxhbnRzCmRyIHNldXNzIGluc3BpcmVkCnBob3RvIHN0aWxsIG9mCmJhY2tncm91bmQgbWFkZSBvZiBiaWcgY3VydGFpbnMKc3VibGltZSBzdWJzdXJmYWNlIHNjYXR0ZXJpbmcKY2xvc2UgdXAgc2hvdHMKbW9uY2xlciBqYWNrZXQKY2lyY3VsYXIgc3VuZ2xhc3Nlcwp3aGl0ZSBsaW1ibwplYXRpbmcgaW5zaWRlIG1jZG9uYWxkcwp0cnVjawpwb3NpbmcgaW4gZGlzZ3Vpc2UgYW1vbmcgaHVtYW5zCmV4dHJlbWVseSBncmFpbnkKaGFzc2VsYmxhZCA1MDBjCmZ1amkgcHJvdmlhCm1pZGRsZSBhZ2VkIGJhbGRpbmcgc3VwZXJoZXJvCndlYXJpbmcgYSByZWQgbHVtYmVyamFjayBzaGlydApiYWNrZ3JvdW5kIGlzIGEgbG93IGxpZ2h0IG11c2V1bQpzaW5ndWxhciBsaWdodCBzb3VyY2UgZnJvbSBiZWxvdwp3b21hbiB2ZXJ5IHRpcmVkCmZsb3dlcnMgd2l0aCBpbnRyaWNhdGUgZGV0YWlsCmJsdWUgcml2ZXIgaW4gdGhlIG1pZGRsZQpjb3JvdAoxIDkgOCAwJ3Mgc2NpIC0gZmkgc3R5bGUKZXh0cmVtZWx5IGVwaWMKaHlwcGVyZWFsaXR5CmRlYmFkZ2VkCndpdGggYSBkYXJrIGZyaW5nZQpjeWJlcm5ldGljIGNvbXBvbmVudHMhIQpwaG90b2dyYXBoeSBvZiBhbGJlcnQgd2F0c29uCmV4dHJlbWVseSBpbnRyaWNhdGUgaGlnaCBkZXRhaWwKcGF0aCBiYXNlZCB1bmJpYXNlZCByZW5kZXJpbmcKaHlwZXIgcmVhbGlzdGljIHNjaSBmaSByZWFsaXN0aWMKcGhvdG9yZWFsaXN0aWMgYW5pbWUgZ2lybCByZW5kZXIKY2luZW1hdGljIHVucmVhbCA1Cm5hdGlvbmFsIGdlb2dyYXBoaWMgcGhvdG8gc2hvb3QKbWluaW1hbCBibGFjayBza3VsbCB3YXJwYWludApzbm93aW5nIGluIHRoZSBmb3Jlc3QKOSBicmlsbGlhbnQgcGVhY29jayB0YWlscwppc2xhbmQgd2l0aCBjYXZlCmYgLyAyLiA4IGwgY2Fub24gZWYgaXMgbGVucwpjYW5vbiBlb3MgLSAxIGQgbWFyayBpaQp2ZXJtZWVyIGxpZ2h0aW5nCm1vdG8gZ3AgYWRzIGluIDEgOSA5IDAgcwpzdGFyaW5nIGRpcmVjdGx5IGF0IGNhbWVyYQpwb3YgcGhvdG8KdG9ybiBmYWJyaWMKcGlhbm8gZ3VpdGFyIG11c2ljIG5vdGVzIGtleQpwaWN0dXJlIG9mIGEgbG9mdCBpbiBtb3JuaW5nCmZvZ2d5IGRheSBvdXRzaWRlCmJyYXNzIHBsYXRlZAp3b3JrIGNsb3RoZXMKc3RlcmVvZ3JhbQpwaW5ndSBzaXR0aW5nIGJlaGluZCBhIGNvbXB1dGVyCnBpbmhvbGUgcGhvdG8gOiBkcmVhbQptb3Jyb2NhbiBsYW1wCm5hdHVyYWwgZ2VvZ3JhcGhpYyBwaG90b2dyYXBoeQpzb2Z0IGxpZ2h0IHRocm91Z2ggYmxpbmRzCnBpbnVwIG9mIHRyYWNlciBmcm9tIG92ZXJ3YXRjaAp0aWdodCBibGFjayB0YW5rIHRvcCBhbmQgc2hvcnRzCmh5cGVycmVhbGlzdGljIGZsaWNrcjo1Cm1pbGl0YXJ5IHRhbmsgZnVyeSByb2FkCmlyb24gc21lbHRpbmcgcGl0cyBzcGFjZSBtYXJpbmVzCnNtb2tpbmcgYW5kIGJpY2tlcmluZwp1bmRlYWQgY3lib3JnIGhlYWQKcGl6emEgdGhlIGh1dApwbGFuZXQgZWFydGggZnJvbSBzcGFjZSBvbiBmaXJlCmJsdWUgbWFyYmxlCmdyZWVuIG5lb24gc2lnbnMKc3VidGxlIGFuZCBjb21wZWxsaW5nIGxpZ2h0aW5nCnBsYXRvbmljIGlkZWFsIHN0YXIgd2FycwpwbGF5YmlsbCBvZiBwcmltYSBiYWxsZXJpbmEKb3JpZW50YWwgc2NlbmUKd29rCmNyYXp5IGhpZ2ggZGVmaW5pdGlvbgppbiBzdHlsZSBvZiBvbGQgcGFpbnRpbmcKc2V3ZXIgYmFja2dyb3VuZApwb2lzb24gaXZ5IGZyb20gYmF0bWFuCmhkIDhrIGltYWdlIGhpZ2ggZGV0YWlsCnBvbGFuZCBmbGFnCndlYXJpbmcgZ2lhbnQgcGFwZXIgbWFza3MKYXVndXN0IDE5NjgKZnJhbmNlc2NhIHdvb2RtYW4gc3R5bGUKZGF5IHNldHRpbmcKdmVyeSBsaWdodCBzbm93CmRvZyB3YXRjaGluZyB0aGUgY2FyCnBvbnkKdHJlZXMgYW5kIHBpbmVzIGV2ZXJ5d2hlcmUKYm9keSBoYXJuZXNzCmJhcm9xdWUgaGFpcgpibHVlIHNvZnQgYmFja2dyb3VuZApzaXggZXllcwozIC8gNCBsaWdodGluZwpza2lucwpkaWFtb25kIHNoaW1tZXJpbmcgZHJlc3MKb3JuYXRlIGludHJpY2F0ZSBjcm93bgpleHF1aXNpdGUgaGVsbWV0IGRldGFpbApiYXJuIG93bCBmYWNlCnVzc3IgcG9zdGVyCndlYXJpbmcgYSBuYXRpdmUgYW1lcmljYW4gY2hva2VyCmNlbHRpYyBnb2xkZW4gc3ltYm9scwpkcnVuayBjb3dib3kgcmVkaGVhZCBsb25nIGhhaXIKd2l0aCBhbiBleHBsb3Npb24gb24gdGhlIGJhY2sKbGFxdWVyIGFuZCBzdGVlbApwb3J0cmFpdCBkYW5ueSBkZXZpdG8gYXMgZ2FuZGFsZgpwb3J0cmFpdCBkZW1pIHJvc2UKYmxhY2sgZmlyZSBjb2xvciByZWZsZWN0ZWQgYXJtb3IKaWNlIC0gY2FydmluZwpkdWxsIGJsdWUgY2xvdWR5IGJhY2tncm91bmQKKCBpdm9yeSBibGFjayApCm5vdGljZWFibGUgdGVhciBvbiB0aGUgY2hlZWsKd2VhcmluZyBpbiBzaGlydApzdHJvbmcgc3Bpcml0CnBvcnRyYWl0IG9mIGJlbmphbWluIG5ldGFueWFodQpib2tlaCBwYXJpcyBpbiBiYWNrZ3JvdW5kCnBvcnRyYWl0IG9mIGNodW4gbGkKbGlnaHQgZ3JleSBiYWNrZHJvcApwb3J0cmFpdCBvZiBlbXBlcm9yIHBhbHBhdGluZQpwb3J0cmFpdCBvZiBlcmVuIHllYWdlcgpwb3J0cmFpdCBvZiBlcm5lc3Qga2hhbGltb3YKcG9ydHJhaXQgaW4gY2VudGVyCnBvcnRyYWl0IG9mIGpvaG4gd2ljawpkcmVhbXkgYW5kIGV0aGVyZWFsIGFuZCBkYXJrCnBvcnRyYWl0IG9mIGtpbSB3ZXhsZXIKcG9ydHJhaXQgb2YgbWVpIGZyb20gb3ZlcndhdGNoCnBvcnRyYWl0IG9mIG5pY29sZSBhbmlzdG9uCmN1cmlvdXMgZXllcwpwb3J0cmFpdCBvZiBzYW0gaHlkZQpwb3J0cmFpdCBvZiBza2VsZXRvcgpwb3J0cmFpdCBvZiAndGhleSBsaXZlJyBtb3ZpZQpuYXR1cmFsIHN0cmFpZ2h0IGJsYWNrIGV5ZWJyb3dzCmFjdGluZyBoZWFkc2hvdAp3YWxsIGhhbmdpbmcgdHJvcGh5IHRheGlkZXJteQp3ZWFyaW5nIGJsYWNrIHNpdGggdW5pZm9ybQptYW55IHNjYXJzLiBjaW5lbWF0aWMgbGlnaHRpbmcKdGhpY2sgYnJvd24gYmVhcmQKcG9ydHJhaXQgb2YgYSBhbGllbiBpbnNlY3QKd2VhcmluZyBhIGplYW5zIGphY2tldHMKbWF4aW1hbGlzdCBzY3VscHRlZCBkZXNpZ24KcmlvdCBiYWNrZ3JvdW5kCmNoYWxrIHRleHR1cmUgb24gY2FudmFzCmdsb3dpbmcgbGlnaHRzIGluIGFybW9yCmFsdmluIHNjaHdhcnR6CmFydHN0eWxlIG9mIG1pY2hlbGFuZ2VsbwpmYWNlbWFzawptYWdpY2FsIGNvbG9yZnVsIGZsb3dlcnMKb3V0aGVyIHdvcmxkbHkgY29sb3VycwprYXRhbmEgc2NhYmJhcmQKb3JnYW5pYyB0cmFuc2lzdG9ycwpkYXduIGJhY2tncm91bmQKZnJ1aXQgYW5kIGZlYXRoZXJzCmluIG1vZGVybiBlcmEKMSA2IG1tIGZpbG0gdmlnbmV0dGUKcG9ydHJhaXQgb2YgYSBjcnlpbmcgYWkgYXJ0aXN0CnNraW5ueSB3YWlzdCBhbmQgdGhpY2sgaGlwcwpwZXJmZWN0IHZpYnJhbnQgZ3JlZW4gZXllcwpwb3J0cmFpdCBvZiBhIGN5YmVycHVuayBtYW4KY3Jpc3RpIGJhbGFuZXNjdQpkYXJrIHRleHR1cmVkIGJhY2tncm91bmQKbXVsdGlwbGUgbGlnaHRzCnllbGxvdyBvY3JlIHRpbnQgZG9taW5hbnQKaGF1bnRlZCBiYWNrZ3JvdW5kCmZ1ciBhdHRpcmUKcGl4YXIuIG9jdGFuZSByZW5kZXIKd2VhcmluZyBiaWcgYmxhY2sgY2lyY2xlIGdsYXNzZXMKcG9ydHJhaXQgb2YgYSBmZW1hbGUgYW5pbWUgaGVybwpkeXN0b3BpYW4gdGVycm9yCmZyYWN0YWwgY2xvdWQKcG9ydHJhaXQgb2YgYSBmZW1hbGUgZHJ1aWQKd2VhcmluZyBsZWF0aGVyIGFybW9yZWQgdmVzdAp0aGUgZnJvbnQgb2YgYSB0cmFkaW5nIGNhcmQKaGFwcHkgd2l0aCBoaXMgbW91dGggb3BlbgptZXRhbCBzaG91bGRlciBwYXVsZHJvbnMKbWFkZSBmcm9tIG1pbGxpb24gcG9pbnQgY2xvdWRzCmZ1bGwgYm9keSBtYWRlIG9mIHdoaXRlIGZlYXRoZXJzCml0cyBkZXRhaWxlZCBpbnRyaWNhdGUKamVhbnMgcGFudHMKaGludHMgb2YgY3JvbmVuYmVyZwpwaW5rIGZsb3dlcgppbiBhIHNpbGsgcm9iZQpncmVlbiBhbmQgcmVkIHBsYW50cwpwb3J0cmFpdCBvZiBhIGh1bWFub2lkIGFsaWVuCnBvcnRyYWl0IG9mIGEgamFwYW5lc2UgdGVlbgpibGFjayBpcm9uIHN1aXQgb2YgYXJtb3VyCm1vbm9jaHJvbWF0aWMgZ3JlZW4KYXJtb3IgbWFkZSBvZiBiYXJrCndpc2UgYXBwZWFyYW5jZQphZnJvYW1lcmljYW4KZXBpYyBiZWFyZApncmV5IGhhaXIgYW5kIGEgY293Ym95IGhhdAp0aGljayBhcm1vcgptYWtvdG8gc2hpbmthaSEhCndlYXJpbmcgZ3JlZW4gYmF0dGxlIGFybW9yCnBvcnRyYWl0IG9mIGEgbnVyc2Ugb24gYSBzdG9vbApzY2kgLSBmaSBhcm1vdXIhIG11c2N1bGFyCm5vdCBzY2FycnkKaW4gYSB2ZXJkYW50IGdhcmRlbgpjb3Jwb3JhdGUgYnVzaW5lc3MKdmVyeSBzcGFyc2UgZGV0YWlsCnJlZCBhbmQgd2hpdGUgc3RyaXBlcwpwb3J0cmFpdCBvZiBhIHNhbXVyYWkgd2FycmlvcgppbmsgYW5kIHdhdGVyY29sb3Igd2FzaApwb3J0cmFpdCBvZiBhIHNoYXJwIGV5ZWQKd2VhcmluZyBhIGNyb3duIGFuZCBzdWl0CnBvcnRyYWl0IG9mIGEgc21va2luZyB3b21hbgpzd2VldCBhcnRwaWVjZQp2YXJ5aW5nIGRldGFpbGVkIHNraW4KcG9ydHJhaXQgb2YgYSBzcXVpZCB3aXphcmQKZWxlZ2FudCBjb3JzZXQKdGhpY2sgc2hpbmluZyBibGFjayBoYWlyCmJpZyBnYXNoIG9uIGZhY2UKYW4gZWFycmluZwpwaGlsaXAgdGFhZmZlCmouIGMuIGxleWVuZGVja2VyLiBibGFjayBoYWlyCnBvcnRyYWl0IG9mIGEgdmljdG9yaWFuIGR1a2UKdml2aWQgY29sb3JmdWwgY29taWMgc3R5bGUKbGluZSBzbGVlawpwcmluY2VzcyBnaXJsCmZ1bGx5IG9wZW4gc2t5CnRvcCBkb3duIHNwb3RsaWdodCBsaWdodGluZwpjb3ZlcmVkIGluIHRyYW5zcGFyZW50IGNsb3RoCmNsb3NpbmcgaGVyIGV5ZXMKcG9ydHJhaXQgb2YgYSB5b3VuZyBpdGFsaWFuIG1hbGUKZnVsbCBib2R5IGluIGNhbWVyYQp3ZWFyaW5nIGEgbmVvbiBncmVlbiBkcmVzcwppZGlhbiBkcmVzcwpnaWRkeSBzbWlyawpyZWQgY3JpbXNvbiBjcmltc29uIGhhaXIKcGFzdGVsIGNsb3RoaW5nCnBvcnRyYWl0IG9mIGEgeW91bmcgd29tZW4KY29sb3VyIGJsb2NraW5nCmNhcnRvb25pc2ggZ3JhcGhpYyBzdHlsZQpzaWxrc2NyZWVuIHBvcCBhcnQKbXVzY3VsYXIhIHdoaXRlCnBvcnRyYWl0IG9mIGFsYW4gd2F0dHMKd2l0aCBhIHJlZCBleWVzCm5ldGZsaXggdHJlc2UKa2FqbyBiYWxkaXNpbW8gYW5kIGNyYWlnIG11bGxpbnMKcG9ydHJhaXQgb2YgYWxpY2UgaW4gd29uZGVybGFuZApoaWdoc2Nob29sIGJhY2tncm91bmQKZWxkZXIgc2Nyb2xscyBjb2xvdXJpc2VkCnBvcnRyYWl0IG9mIGFuIGFuZHJvaWQKZmlpYm9uYWNjaQpsaWdodG5pbmcgbWFzdGVyCnBvcnRyYWl0IG9mIGFuIGVsZiBxdWVlbgpsb29raW5nIGxpa2UgYSBiaXJkCmxvbmcgYnJvd24gd2F2eSBoYWlyCnNtb290aCByZWZsZWN0aW9ucwphc3NhbWVzZQpzeW1tZXRyaWNhbCBmYWNpYWwKYmFuZGFnZWQgbm9zZQpwcm9jZWR1cmFsIHJlbmRlcmluZwpzaGFkZXMgb2YgYmx1ZSBhbmQgZ3JleQp0ZWNobm8gcGFydHkKb3JuYXRlIGJpa2luaSBhcm1vcgpwb3J0cmFpdCBvZiBiZWF1dGlmdWwKcG9ydHJhaXQgb2YgYmVuZGVyIGZyb20gZnV0dXJhbWEKcG9ydHJhaXQgb2YgYmVuZWRpY3QgY3VtYmVyYmF0Y2gKcG9ydHJhaXQgb2YgYmxhY2sgbGFicmFkb3IKc2N1bHB0dXJlISEKd2VhcmluZyBzcGFuZGV4IGJpa2luaQpwb3J0cmFpdCBvZiBjYXRlIGJsYW5jaGV0dApmaXJlISEgZnVsbCBib2R5CmluIGEgd2hpdGUgdGFuayB0b3Agc2luZ2luZwpwb3J0cmFpdCBvZiBjaHVuIC0gbGkKd2VhcmluZyBwZWFybCBuZW9uIGJpa2luaQplcGljIDggawpzaG91bGQgZXllcwpoYXJkIGNsYXkKZ2xvd2luZyBleWVzISEgaW50cmljYXRlCm5lb3RyYWRpdGlvbmFsIHRhdHRvb3MKbG9uZyB3YXZ5IGF1YnVybiBoYWlyCnBvcnRyYWl0IG9mIGRvYyBzYXZhZ2UKcG9ydHJhaXQgb2YgZHJhZ29vbgplbGRlciBzY3JvbGxzIGFydApwb3J0cmFpdCBvZiBlbWlseSBibHVudCBhcyBxdWVlbgpzZWR1Y3RpdmUuIGhpZ2hseSBkZXRhaWxlZApwb3J0cmFpdCBvZiBmYWlyeSBwcmluY2VzcwppbiBlbGVnYW50IGRlY29sbGV0ZQpkYXJrIG1ha2UgdXAgb24gaGVyIGZhY2UKaG9sb2dyYW0gaG92ZXJpbmcgYXJvdW5kIGhlcgpzdGVhbSBhbmQgY3liZXJwdW5rCnN0dW5uaW5nIGRyZXNzCnN0eWxlIG9mIGd1aWRvIGNyZXBheApzaGlua2lybyB0b3NoaWFraSBtb3JpCmZyb3duaW5nIGV4cHJlc3Npb24KcG9ydHJhaXQgb2YgZ3JlZWsgZ29kIGFyZXMKeWVsbG93IHJlZCBzY2hlbWUKcG9ydHJhaXQgb2YgZ3JpbSByZWFwZXIKd2VhcmluZyBsZWF0aGVyIGNvYXQKb255eCBicmFjZWxldHMKc3BhcmtsaW5nIGRhcmsgamV3ZWxyeQptb2xseSB3ZWFzbGV5CndpZWxkaW5nIG1hY2hldGUKcHJlcmFwaGFlbGl0ZQpwYXRjaHdvcmsgZG9sbAptb3VudCBmdWppIGJhY2tncm91bmQKc2hpbmluZyBtZXRhbCBwb3dlciBhcm1vcgpwb3J0cmFpdCBvZiBrYXR5IHBlcnJ5CmZhbnRhc3RpY2FsbHkgZWVyaWUKcG9ydHJhaXQgb2YgbGVicm9uIGphbWVzCmN5YmVycHVuayBpbGx1c3RyYXRpb24KcG9ydHJhaXQgb2YgbWFkIGxhZHkgc2NpZW50aXN0CnBvcnRyYWl0IG9mIG1hbidzIHRlcnJpZmllZCBmYWNlCmNoYW9zIGNvbWljcwpjb2ZmaW4gY29taWNzCnBvcnRyYWl0IG9mIG1lcmxpbgpwb3J0cmFpdCBvZiBtaWNrZXkgbW91c2UKcG9ydHJhaXQgb2YgbW9uawplcGljIHN1bnJpc2UKYnJlYWQgdHlwZSBwb2tlbW9uCnJlZCBsaWdodGluZyBvbiB0aGVpciBmYWNlcwpwb3J0cmFpdCBvZiBuaWNrIG9mZmVybWFuCnBvcnRyYWl0IG9mIG5pY29sZSBraWRtYW4Kc3Bpa2VkIG1ldGFsIGFybW9yCm9ybmF0ZSBhbmQgaW50cmljYXRlIGJhY2tkcm9wCnllbGxvdyBwdXJwbGUgZ3JlZW4KcG9ydHJhaXQgb2YgcHJpbmNlc3MKcG9ydHJhaXQgb2YgcHJvZmVzc29yIHNpbmlzdGVyCmJsdWUgYW5kIHJlZCBsaWdodHMKZGV0YWlsZWQgaHVtYW5vaWQKcGl4YXIgZG9sbCBkZWVwIGZvY3VzCm5pY29sZSBkZSBib2VyCnBhdHJpb3RpYyEKZGVwdGggb2YgZmllbGQgaW5zYW5lbHkgZGV0YWlsZWQKc2NpZmkgbmFub3dpcmVzIG9uIHNraW4KcmV0cm8gdmludGFnZSBzY3JlZW5zCjMgZCBhbmltZSByZWFsaXN0aWMKd2VhcmluZyBoYWlyIGJvdwpnb29kIHNtaWxlIGNvbXBhbnkgYW5pbWUgc3R5bGUKcG9ydHJhaXQgb2YgdGhlIGFuZ2VsIG9mIGRlYXRoCndvbWFuIC8gY2F0IGh5YnJpZApwb3J0cmFpdCBvZiB0aGUgZGVhdGggYW5nZWwKcG9ydHJhaXQgb2YgdGhlIGV4aWxlZCBnb2QKYWxiaW5vIHdoaXRlIHBhbGUgc2tpbgpwb3J0cmFpdCBvZiB0aW1vdGhlZSBjaGFsYW1ldApwb3J0cmFpdCBvZiB0b20gaGFua3MKcG9ydHJhaXQgb2YgdWx0cmEgcmVhbGlzdGljCnBvcnRyYWl0IG9mIHZlcnkgYmVhdXRpZnVsIGVsZgp3aXRoIHllbGxvdyBjbG90aHMKYWxpc29uIHdpbGxpYW1zCndpbGxpYW0gd2FyZWhvdXNlCnRlYWwgY29sb3IgZ3JhZGVkCmV4cGVuc2l2ZSBtYXN0ZXJwaWVjZQpob2xkaW5nIHVwIGEgcGl6emEKcHJlc2VudGluZyBhIGxhcmdlIHBpenphCjMgNSBtbSBsb21vZ3JhcGh5CnBvcnRyYWl0IHBpeGVsIGFydCBkcmF3aW5nCmFuZHJvaWQgZXllcwpjaGluZXNlIGNvc3R1bWUKcmVkIHJvc2VzIGF0IHRoZSB0b3AKcGxvd3MKcmFnZ2VkIGNsb3RoZXMKYW4gZXZpbCBudW4KcmVkIGJpb21lY2hhbmljYWwgZHJlc3MKZGFyayBicm93biBjb2xvcmVkIGxvbmcgaGFpcgpzbW9raW5nIGEgbWFnaWNhbCBib25nCnJlYWRpbmcgdW5kZXIgYSB0cmVlCmJpZyByb3VuZCBnbGFzc2VzCmNlbnRlciBwYXJ0ZWQgYnJvd24gaGFpcgpjdXRlIHlvdW5nIG1hbgpibGFjayBncmVhdGNvYXQKc2lsdmVyIGFuZCBlbWVyYWxkIGJyZWFzdHBsYXRlCmdpYW50IHB1cnBsZSBkYWhsaWEgZmxvd2VyIGhlYWQKYW4gZGVsaWdodGZ1bGx5IGNyYXp5CmN5Ym9yZyBub2JsZW1hbgpjaGluZXNlIHRocmVlIGtpbmdkb21zCnZpb2xldCBhbmQgcGluayBwYWxldHRlCnN0YXIgd2Fsawpwc3ljaGVkZWxsaWMgZnJhY3RhbHMKcG9zdCAtIGFwb2NhbHlwdGljIGNhciBibHVlcHJpbnQKcG9zdCAtIGFwb2NhbHlwdGljIGNvd2dpcmwKcG9zdCAtIGFwb2NhbHlwdGljIGVwY290IGNlbnRlcgpkcnkgYXJjaHdheXMKdG9wIGRvd24gZXh0cmF0ZXJyZXN0aWFsIHZpZXcKYmFycmVsIGZpcmVzIGFuZCB0ZW50cwpiZXJiZXJpYyBjbG90aGVzCnllbGxvdyBzcGFjZSBzdWl0CmNob3Jlb2dyYXBoZWQKZGlnZ2VyIGxhbmQgYW11c2VtZW50IHBhcmsKYXJ0IGZvciB0aGUgZmlsbSBpbiBjb2xvcgpwb3dlcmZ1bCBtYWxlIHNjYXJlY3Jvdwp3aWxsZW0gZGFmb2UgYXMgc2NhcmVjcm93CnBvd2VyZnVsIG1hbGUgdGluIG1hbgpzcXVhcmUgbWFzY3VsaW5lIGphdwp3aXRoIGFjY3VyYXRlIGZlYXR1cmVzCnByZWx1ZGUgdG8gdGhlIGVzb3RlcmljCmZyYW1lZCA0IGsKdGhpcmQgdHJpbWVzdGVyCmRyYXduIGluIHRoZSBzdHlsZSBvZiBhcnRnZXJtCnByZXR0eSBnaXJsIHN0YW5kaW5nIGluIHRoZSByYWluCnByZXR0eSBnaXJsIHdpdGggYmx1ZSBoYWlyCmRpcnR5IHJlZCB3YXZ5IGhhaXIKaGlkZWFraSBhbm5vIGFuaW1lCnNoYXJwIGJlYXV0aWZ1bCBmYWNlCnByaW5jZXNzIG9mIGFtZXRoeXN0CmJyb2NhZGUgcm9iZXMKZWxhYm9yYXRlIGZsb3JhbCBvcm5hbWVudApicmlsbGlhbnQgcGluayBiYWxsIGdvd24KY2xlYXJlZCBmb3Jlc3QKcHJpdmF0ZSBhY2FkZW15IGVudHJhbmNlCmZ1dHVyaXN0aWMgYXZhdGFycwphd3d3CnN1cGVyIGN1dGUgcm9ib3QgZmFjZQpmIC8gMi4gMgpyZXBsaWNhIG1vZGVsCmNpbmVtYXRpYyBsaWdodGluZyBhbmQgc2hhZG93cwptaWNyb3Njb3BpYyBwaWN0dXJlCm1pbmltYWxpc3Qgc3R5bGl6ZWQgY292ZXIgYXJ0CmJvaG8gY2hpYwptb3JlYXJlYQpzdHJlZXRhcnQKYXVyb3JhIGRpZ2l0YWwgcGFja2FnZQpleHRyZW1lIGZsdWZmeSBjbG91ZHMKbGFkeWJ1ZyByb2JvdHMKYm9uc2FpIHNrZWxldG9uIGFuYXRvbXkgYXRsYXMKd2hpdGUgbW9vbiBhbmQgYmxhY2sgYmFja2dyb3VuZApwcm9wYWdhbmRhIGxvZ28KYnJ1c2hlZCByZWQgYW5kIGJsdWUgcGFpbnQKcHMgMiBnYW1lIGJveCBrZXlhcnQKZGl2aW5pdHkgZGV0YWlsZWQKcmVkIGFuZCBncmVlbiB0b25lcwp3ZWFyaW5nIHNoaXBpYm8gdGF0dG9vcwpwc3ljaGVkZWxpYyBza2kgcmVzb3J0CnByb2Zlc3Npb25hbCBiYWNrZ3JvdW5kCnBzeWNob3NsYXllcgp2YWxlCnB1cnBsZSBjYXQKdmljdG9yaWFuIGVyYe+8jGplbGx5ZmlzaCBlbGVtZW50CnB1cnBsZSBmbG93ZXIgdHJlZXMKcHVycGxlIG1hZ2ljCmluIGEgbGFyZ2UgaGFsbAp0aGUgc2t5IGZhbGxzIHRvIHRoZSBncm91bmQKcWl5YW5hCmRlZXAgZGFyayBibHVlCnJlZmxlY3RpdmUgY2hlc3Nib2FyZApxdWlldCBmcm9tIG1ldGFsIGdlYXIgc29saWQKcXVpZXQgZnJvbSBtZXRhbCBnZWFyIHNvbGlkIHYKcXVpZXQgdG9reW8gYWxsZXkgYXQgbmlnaHQKZ3JhcGhpY3MgJCA5IDkgY2FsbCBub3cKcmFiYml0IGZhY2Ugb25seQo4IGsgdmVyeSByZWQgY29sb3JzCnJhY2hlbCB3ZWlzeiBwb3J0cmFpdAptb25vbGl0aGljIGdyYW5pdGUgc3Bpa2VzCnJhaWRlbiBmcm9tIG1ldGFsIGdlYXIgcmlzaW5nCndpZGUgc2NlbmUKcmFuZG9tIGRldGFpbApkYW1hZ2UgY2xhc3MKcHN5Y2hlZGVsaWMgaGlwIGhvcApyYXBwaW5nIG9uIHN0YWdlIGF0IGZlc3RpdmFsCm92ZXJzaGFkb3dpbmcga2ltIGpvbmctaWwKdmFuaWxsYSBzbW9vdGhpZSBleHBsb3Npb24KYmVhdXRpZnVsIGluc2FuZWx5IGRldGFpbGVkCnJlYWwgbGlmZSBiaWcgbW9tCmFuYXRvbXkgZmVhdHVyZXMKcmVhbCBsaWZlIGNoYXJtYW5kZXIKYnJvd24gd2F0ZXJ5IGV5ZXMKc2VyZW5lIGZpZWxkIHNldHRpbmcKamltaW4ncyByaWdodCBleWVsaWQgc3dvbGxlbgpyZWFsIHBob3Rvc2hvb3QgcXVlZW4gb2Ygb2NlYW5zCnJlYWwtbGlmZSBicm9vawpza3lzY3JhcGVycyBvbiB0aGUgYmFja2dyb3VuZApsZWljYSBzbDIgMzVtbSBibGFjayBhbmQgd2hpdGUKcmVhbGlzdGljIGFuaW1lIGNhdAptYW4gd2l0aCB0aGluIGxpbmVzIG9uIHRoZSBmYWNlCnNhaXlhbiBnaXJsCnZlcnkgaW50cmljYXRlIG1hc3RlcnBpZWNlCnZhbXBpcmVzIGluIHNwYWNlLiBtb2ViaXVzCjQyMzc1NDkzNDgKZXh0cmVtZWx5IHBhbGUgYmxvbmQgaGFpcgp0YXJvdCBzd29yZHMKZGFuIGhvd2FyZApjaW5lbWF0aWMuIGJla3NpbnNraSBwYWludGluZwplbGl6YWJldGggZXJpY2tzb24Ka2Vubnkgc2NoYXIKcm9iZXJ0IGNvbGVzY290dCBwYWludGluZwpkeW5hbWljIGNsb3NldXAgY29tcG9zaXRpb24KaW4gc3R5bGUgb2YgbmFkaW5lIGlqZXdlcmUKaGF6eSBtb3JuaW5nIGZvZ2d5CmNhdHNjYXRzY2F0cwppbiBmdXR1cmlzdGljIGxhYm9yYXRvcnkgcm9vbQpkZXNwZXJhdGUgcG9zZQpyZWFsaXN0aWMgbGFuZHNjYXBlCm1vdXRoIGluIG1vdXRoCmNyYXdsaW5nIGluIGEgd2V0IHNld2VyIHBpcGUKcXVhbGl0eSBkcmF1Z2h0bWFuc2hpcAptYW4gcmF5IDEgOSA5IDAKY2xlYW4gcGhvdG8KYXJ0IG9mIGdyZWcgcnV0c293c2tpCndoaXRlIGZsdWZmeSBjb3R0b24gc2hvcnRzCnVnbHkgbWFkZQppbiBzdHlsZSBvZiBkYXZleSBhZGVzaWRhCmd1c3RhdmUgZG9yZSBhbmQgZ3JlZyBydXRrb3dza2kKd2VhcmluZyBhIGZpc2hlciDwn6elCmJsYWNrIGlyb24gYXJtb3VyCmxvY2F0aW9uIGluIGEgYXBhcnRtZW50CmhlbGxiYXJkcwpydW4gZm9yIHlvdXIgbGlmZQpyZWFsbHkgYmVhdXRpZnVsIGZvcmVzdApsb29raW5nIHRvIGhpcyBsZWZ0CnRyYXBwZWQgZWdvcyBpbiBwaHlzaWNhbCByZWFsaXR5CnRyYXBwZWQgZWdvCmV4Y2x1c2l2ZQpyZWQgZm9yZXN0CnJlZCBoYWlyIGdpcmwKZHJhZ29uIGZseWluZyBpbiB0aGUgYmFja2dyb3VuZApyZWRoZWFkIGZlbWFsZSBjeWJlcnB1bmsKd2lkZSBnb2xkZW4gZXllcyBhbmQgcmVkIGxpcHMKcmVuYWlzc2FuY2Ugb2lsIHBvcnRyYWl0CnN0cmFuZ2UgY2FtZXJhIGFuZ2xlCmludGVyZXN0IGZhY2UKcmVuYWlzc2FuY2UgcHJpbmNlCnJlcGVhdGluZyBmYWJyaWMgcGF0dGVybgpkICYgZCBsaWNoCnBvZ3JvbQplZGdlIG9mIG5vdGhpbmduZXNzIGxvdmUKc2l0dGluZyBpbiBhIGxvdW5nZQp0ZWFsIHBhbGV0dGUuIGhvcnJvcgpyZXRybyA5IDAgcwpyZXRybyBhbmltZSBnaXJsCnJvY2tldCBsYXVuY2hpbmcKcmV0cm8gc2NpLWZpIHNwYWNlc2hpcApjb2xvbmlhbCBob3VzZSBpbiBiYWNrZ3JvdW5kCmNydCBzY3JlZW4KcmV0cm9mdXR1cmlzbSBvbGQgcmN0IHNjcmVlbgpmYW5jeSBtZWRpZXZhbCBhcmNoaXRlY3R1cmUKcmhpbm9jZXJvcyBwbGF5aW5nIGJhZG1pbnRvbgo2IDAgbW0gbGVucyBpbiBmdWxsIGFybW9yCnlvc2hpdGFrYSBhbWFubyBhbmQganVuamkgaXRvCnJpbyBkZSBqYW5laXJvIGluIGFuIGFuaW1lIGZpbG0Kcml2ZXIgaW4gYSBmb3Jlc3QKcml2ZXIgaW4gdGhlIHdvb2QKZ2VtbWEgY2hhbiBiZWF1dGlmdWwgZ2lybApyb2JlcnQgZGUgbmlybyBhcyBtZWRpZXZhbCBqb2tlcgpwaG90b3JlYWxpc2NpYyBmYWNlCnJvYm90IGluIGNvbnN0cnVjdGlvbgpyb2JvdHMgZHJpbmtpbmcgYWxjb2hvbApkZWF0aCBhbmQgcm9ib3RzIHR3byBpbiB0aGUgdm9pZApyb2NrIGNsaW1iZXJzIGNsaW1iaW5nIGEgcm9jawpyb2NrIG1vbnN0ZXIKZG9ybWFudCBpbiBjaGFpbnMKcm9nZXIgbW9vcmUgYXMgamFtZXMgYm9uZApyb2d1ZSBhbmltZSBnaXJsCmhpZ2ggY29udHJhc3QgcG9ydHJhIDQwMApyb21hbiBjZW50dXJpb24Kc3R5bGUgb2YgdG9ueSBoYXdrIHBybyBza2F0ZXIKcGluayByb3NhCmd5cHNvcGhpbGEKc3ltbWV0cmljYWwgaGVhZCBhbmQgYm9keQpoZWFkIGluIGEgamFyCnJvb20gb2YgdGhlIG5hbWVsZXNzIHBhaW50ZXIKcGVhY29jay4gaW50cmljYXRlCnJvc2FsaWEgdmlsYSBpIHRvYmVsbGEKcm9zZWFubmUgcGFyayBvZiBibGFja3BpbmsKcm95YWwgcGFsYWNlIG5lYXIgdGhlIGxha2UKd2FybSB5ZWxsb3cgbGlnaHRpbmcKcnVnZ2VkIHNoaXAgY2FwdGFpbgpydW5uaW5nIGFuZCBmYWxsaW5nIG9uIGNsb3Vkcwpzd29yZCBhdHRhY2sKc2FjcmVkIHZhbXBpcmUKbWVsYW5jaG9seSBzY2VuZXJ5CnNhZ2UgKCB2YWxvcmFudCApCndlYXJpbmcgYSBidW5ueSBzdWl0CndpdGggYm9vayBvZiBzY2llbmNlCm9uIGhpcyByaWdodCBoYW5kCm9uIGhpcyBsZWZ0IGhhbmQKdHN1YmFzYSBjaHJvbmljbGVzCmRyYWdvbiBiYWxsIHN0eWxlCnNhbWFya2FuZApzYW1pcmEgZnJvbSBsZWFndWUgb2YgbGVnZW5kcwpzYW11cmFpIGNoYW1wbG9vCnNhbXVyYWkgamVkaQpzYW11cmFpIG1hbiB3cmFwcGVkIGluIGNoYWlucwp3ZWFyaW5nIGFsbCBibGFjayBtZW1wbyBtYXNrCnNhbXVyYWkgd2l0aCBhZnJvCnNhbXVyYWkgd2l0aCBkZW1vbiBtYXNrCmFsc28gdG9tYXRvCnNhdWwgYmV0dGVyIGNhbGwgc2F1bAp2ZXJ5IHZlcnkgdmVyeSBzYXVsIGdvb2RtYW4KdmVyeSBzYXVsIGdvb2RtYW4KeW91IGcgZmFjZQplY3N0YXRpYyBjcm93ZAptaXQgdGVjaG5vbG9neSByZXZpZXcKbmF0dXJlIGpvdXJuYWwgY292ZXIKZGVwdGhzIG9mIGZpZWxkIGVmZmVjdApzb3JlcyBhbmQgc2NhcnMKdW5kZWFkLiBoaWdobHkgZGV0YWlsZWQKY3liZXIgc2tlbGV0b25zCnNjZW5lIGZyb20gYSBkaW5uZXIgcGFydHkKc2NlbmUgZnJvbSBiYWNrIHRvIHRoZSBmdXR1cmUKc2NlbmUgZnJvbSBzdXBwbGl6aWEKZHNsciArCmhpZ2ggcXVhbGl0eSB0b3BpY2FsIHJlbmRlcgpiZWF1dGlmdWxseSBkYXlsaWdodApzY2kgLSBmaSBiaW9tZWNoYW5pY2FsCnJlbmRlcmVkIGluIG1heWEgYW5kIGhvdWRpbmkKbW9kZWwgcGFpbnRpbmcKYXJ0d29yayBpbiBzdHlsZSBvZiBzaGVuZyBsYW0Kd2FsbCBzdHJ1Y3R1cmUKY29udGVtcG9yYXJ5IGFlc3RoZXRpYwptYXRyaXggZmlsbSBjb2xvcgpoaWdoIGNvbnRyYXN0IHBsYXN0aWMKdHJhbnNwYXJlbnQgY2FyYXBhY2UKZHVsbCByZWQgZmxha2luZyBwYWludApzY29iaWxseWZsdXAKc2NvdXQgYm95CmJyb2tlbiB0b3lzCnZhcmlvdXMgaGFpciBjb2xvcnMgYW5kIHN0eWxlcwpyZW5kZXJlZCBpbiB0aGUgdW5yZWFsIGVuZ2luZQppY29uaWMgc2NlbmUgZnJvbSBzdGFyIHdhcnMKc3RyYW5nZSBsaWdodGluZwppbiBhIHNjaS1maSBzaGlwcGluZyBwb3J0Cm1vb2R5IGhhenkgbGlnaHRpbmcKa29kYWsgY29sb3Igc3RvY2sKbWFzc2l2ZSBiYXR0bGVmcm9udApzdHVubmluZyBncmFwaGljcwpoZXJvZW5naW5lCnNjcmVlbnNob3Qgb2Yga2luZ2RvbSBoZWFydHMgMwplYSBzdGFyIHdhcnMgYmF0dGxlZnJvbnQgMjAxNQpiZWF1dGlmdWzigJ0Kc2N1bHB0dXJlIG1hZGUgb2YgZ29sZAptYXJibGUgYnVzdAptYWRlIG9mIHNwYWdoZXR0aQpzY3VscHR1cmUgb2YgbW9sb2NoCnNlYSAtIGRvbyBndHgKYWxsdXJpbmcgYW5kIHRlcnJpZnlpbmcKc2VhZ3VsbApzcGFjZSBzaGlwIGdyaWJibGUKc2Vhc2lkZSB2aWN0b3JpYW4gYnVpbGRpbmcKYXdmdWwgZXhwZXJpbWVudHMKcGxhbnRlcnMKY2VudHJhbCB0cmVlCmFib3ZlIHRoZSBmYW1pbHkgcm9vbQpzZWNyZXQgc2hhZHkgbGFib3JhdG9yeQpzZWdtZW50ZWQgMmQgbGFzZXIgY3V0IGVhcnJpbmdzCnNlaW5mZWxkIGZhbmN5IHRlYSBwYXJ0eQpzbWFydHBob25lIHJlc29sdXRpb24Kb2ZmaWNpYWwgZ292ZXJubWVudCBwaG90bwp3ZWFyaW5nIHdoaXRlIHJvYmUKaWNlZCBsYXR0ZQp0aW0gYnVydG9uIHN1cGVyc2FtcGxlZApzZXh5IGdpcmwgd2l0aCBsb25nIGJsb25kZSBoYWlyCnRyaWFkaWMgY29sb3JzCnNoYWRvdyBmaWxsZWQgcm9vbSB3aXRoIGdsb29teQpubyBsaWdodCBwZW5ldHJhdGVzIHRvIHJvb20KZnVsbCBib2R5IHdvcm4gb3V0IHRvcm4gY2FwZQp5b3VuZyBzb3BoaWEgbG9yZW4Kc2hhcmsgYW50aG9ueQpzaGFycCBkZXNpZ24gc3BhY2VzaGlwIHNrZXRjaGVzCmNoaW5lc2UgYXJ0aXN0Cmdvb2QgY2luZW1hdGljIGxpZ2h0aW5nCmV4dHJlbWVseSBoaWdoIHF1YWxpdHkgc2NhbgptYWdpYyBzcGVjaWFsIGVmZmVjdHMKYWNyb3NzIGFuIGFsaWVuIGxhbmRzY2FwZQp0cmlsbGlhbnQKc2hhdHRlcmVkIGVhcnRoCmJyaWdodCBuZW9uIHNvbGFyIGZsYXJlcwpidXQgd2hhdCBkbyB5b3UgbWVhbgpzaGliYSBpbnUgZG9nCnNwYXJrbGluZyBpbiB0aGUgc3VubGlnaHQKbGF3IGFsaWduZWQKbGF3IC0gYWxsaWduZWQKZ2xvd2luZyBlbmdpbmVzCnYgd2luZwpmcmFtZSBhcm91bmQgcGNpdHVyZQpjYWdlCnNob2NrZWQgZmFjZSBvZiBwdXRpbiBkZW1vbgpzaG9wcGluZyBncm9jZXJpZXMKdW4gYW5kIG1pY2hhZWwgd2hlbGFuCnZlcnkgZGV0YWlsZWQgY2luZW1hdGljCnNocmlua2luZyBzcGVsbApmbGFzaCBwaG90b2dyYXBoeSA0IGsgaGRyCmJlaWdlIGhvb2RpZQpzaWRlIHBvcnRyYWl0IHJ1Z2dlZCBnaXJsCmVsbGllIGJhbWJlcgpmZW1hbGUgdHJvbGwgc2hhbWFuCmltb2dlbiBwb290cyBhcyBob2x5IHBhbGFkaW4KbWF5YSBhbGkgYXMgYSBsaWdodG5pbmcgbWFnZQptaWxlcyBqb2huc3RvbmUKaW50cmljYXRlIG1ldGFsIGFybW9yCmNyeXN0YWwgbWFpZGVuCnBhbGUgZ3JlZW4gZ2xvdwpjb2F0IGRlY29sbGV0ZSBqb2RocHVycwpmYW50YXN0aWMg77yMIG1pa2Vjb3cKc2NpIC0gZmkgbW92aWUgcG9zdGVyCnNpZ21hIGZyb20gb3ZlcndhdGNoCmJlZGF6emxlZApzcGVjdGFjbGVkCnNpbGVudCBlY2hvCnNpbGVudCBoaWxsIGluIHJlYWwgbGlmZQp0b3JpaSBpbiB0aGUgYmFja2dyb3VuZApjZW50ZXJlZCBpbiBhIGZyYW1lCnNpbHZlcnkgc2tpbm5lZCBtYWxlIGVsZgpwdXJwbGUuIHNtb290aCBzaGFuawpzaW1wbGUgbWFnaWMgcmluZyBvZiBwb2lzb24KbXVzY3VsYXIgZWxkcml0Y2ggY2xvY2t3b3JrCnNpbmdsZSBmbG9vZGVkIHRvd2VyCmdyYWlueSB2aW50YWdlCmJsdWUgaW5rIHBlbgpzaXggc2lkZWQKc2tldGNoIG9mIGEgY2F1Y2FzaWFuIGZhY2UKc2tpbm55IGJyZWFraW5nIGJhZApkZW5pcyB2aWxsZW5ldXZlIG1vdmllIHN0aWxsCmRpc3Bvc2FsIG11bW15Cndvb2QgdGV4dHVyZSBvdmVybGF5cwpzdGFycnkgdGF0dG9vcwpzbGF2aWMgb3JjcyBpbiB0aGUgc3RlcHBlCm5vIGJsb29tCnNsb3RoIHN0b25lZCBhZgpzbWFsbCBhbmQgY29zeSBzdHVkZW50IGJlZHJvb20KdnNldm9sb2QgaXZhbm92CnNtYWxsIGJvYXQgaW4gZm9yZWdyb3VuZApzbWFsbCBjb3R0YWdlIHdpdGggcmVkIHNodXR0ZXJzCnRpbnkgaG91c2UKcmVuZGVyIDMgZApkcmFtYXRpYyBhbWJpZW50IGxpZ2h0CiEhISBjb2xvcmVkIHBob3RvZ3JhcGh5CnNtb2wgZmx1ZmZ5IGNhdCB3ZWFyaW5nIHNtb2wgaGF0CnNtb290aCBkZXNpZ24gc3BhY2VzaGlwIHNrZXRjaGVzCnNuYWlsIGluIHRoZSBzdHlsZSBvZiBuZmwgbG9nbwpzbmFpbCB2cyBrbmlnaHQKc25ha2Ugd29tYW4gaHlicmlkCnNuZWFrZXIgZGVzaWduCnNuZWFrZXIgbWFkZSBvdXQgb2YgbGVnbwpzbm9vcCBkb2dnIGFuZCBkb25hbGQgdHJ1bXAKc29hcCBidWJibGUgbWluZAp1bmRlciBvdXRlciB3b3JsZCBqdW5nbGVzCnRvbSBiYWdzaGF3IGluc3BpcmVkCnN3ZWF0eSBmYWNlCnRlYWwgc2lsdmVyIHJlZApzb2xhcnB1bmsgY2FudGluZQo0IGsgcGhvdG9ncmFwaHkgaGRyCm9mZmljaWFsIGFydHdvcmsgaGRyCnNvbGlkIHNuYWtlIHBvcnRyYWl0CnNvbWFsaSB3b21hbgpzb25nIGpvb25nIC0ga2kgcG9ydHJhaXQKY2FydG9vbiBuZXR3b3JrIHN0aWxsZnJhbWUKZG91Z2ggc2N1bHB0dXJlCndhbHRlciB3b21hY2thCmN6ZXNsYXcgem5hbWllcm93c2tpCnZsYWRpbWlyIHBjaGVsaW4Ka3V6bWEgcGV0cm92IC0gdm9ka2luCmlnb3IgYmVyZXpvdnNreQpjYXZlIGxpZ2h0aW5nCmdhbGF4eSBzaW11bGF0aW9uCnNwYWNlIHNoaXAgYWJvdmUgYW4gaXNsYW5kCnNwYWNlc2hpcCBpbiBkYXJrIHNwYWNlCnN1YmxpbWUgYnV0IGludHJpY2F0ZSBkZXNpZ24KaW50cmljYXRlIGFuZCBkZWNvcmF0ZWQKd2ludGVyIGxhbmRzY2FwZSBvdXRzaWRlCmdyZWVuIGp1bmdsZSBiYWNrZ3JvdW5kCnVsdHJhd2lkZSBsYW5kc2NhcGUKZHJlYW15IHNlcXVlbmNlCmVwaWMgc21vb3RoIGlsbHVzdHJhdGlvbgpzcGlkZXIgc2l0dGluZyBpbiBjaGFpcgp3b25kZXJmdWwgc2NlbmUKZGV0YWlsZWQgd2l0aCBoaWdoIHF1YWxpdHkKc3BvY2sgaGFpcmN1dApsaW5lbiBjYW52YXMKc3Bvb2t5IGNhcnRvb24gc2t1bGwKbWFnbWEgcG9vbApoaWdobHkgZGV0YWlsZWQgaGlnaCByZXNvbHV0aW9uCmFpciBzdXBwb3J0CmouIGouIGFicmFtcwpidXR0ZXJmbHkgcm9sbGVyIHNrYXRlcwptYXJzIGNhbmR5IGJhcnMKZ2VuZXRpYwpzdGF0dWUgb2YgdGhlIHBlcmZlY3Qgd29tYW4KYmlnIHRpdGFuIGNyZWF0dXJlIGluIHRoZSBjZW50ZXIKemVwcGVsaW4KbHVjYXNmaWxtIGplc3BlciBlanNpbmcKc3RlYW1wdW5rIGN5YmVycHVuawpzdGVhbXB1bmsgZmVycmV0IC0gc2hhcGVkIG1lY2gKc3RlYW1wdW5rIHJvYm90IHNjb3JwaW9uCnN0ZWFtcHVuayBzcGlkZXIKc3RlYW1wdW5rIHN1cGVyaGVybwpzdGVhbXB1bmsgdHJpYmFsIG1hc2sKbW91dGFpbiBpbiBiYWNrZ3JvdW5kCnN0ZXJuIGxvb2tpbmcgZm94IGluIGEgbGFiIGNvYXQKYmlvbWVjaGFuaWNhbCBnYWlhCmhhdmluZyBhbiBhd2t3YXJkIGRpbm5lciBkYXRlCnRoZSBiYWNrZ3JvdW5kIGlzIHVuc2FmZQpzaG90IG9uIDMgNSBtbSBmaWxtCnNwcmF5cGFpbnRlZCBib2R5cGFpbnQgZ3JhZmZpdGkKc3Rhbmx5IGt1YnJpY2sKZW1waXJlIHN0cmlrZXMgYmFjawptb29keSBnb2xkIHBsYW5ldApwZWVsZWQgbGVtb25zCmdsb3NzeSBtZXRhbGxpYyBodW1hbiBzcGluZQphbGllbiBzcXVpZApzdGlsbCBsaWZlIG9mIHdoaXRlIHhlbm9tb3JwaApwZWVsZWQgb3JhbmdlcwpzbGljZWQgZ3JhcGVmcnVpdApzdGlsbCBvZiByYWluYm93IG9waGFuaW0KbW92aWUgbGVha3MKZHJlc3NlZCBpbiBhIFsgWyAxIDIgdGggY2VudHVyeQooICggKCBpbiBhIGRhcmsKY29sb3JmdWwgY2xlYXIgc2hhcnAgZm9jdXMKc3Rvcm0gYXQgc2VhCmNyeXN0YWwgd2F0ZXJzCm1hcnkgZWxsZW4gbWFyawpmYWNlIGFzIG9mIGR3YXluZSBqb2huc29uCnNpdHRpbmcgd2l0aCB3cmlzdHMgdG9nZXRoZXIKaW50cmljYXRlISEhISEgcHJvZmVzc2lvbmFsCnJlYWwgc2F4b3Bob25lcwpyZWFsIHNvdXNhcGhvbmVzCnJlYWwgYm9uZ29zCnJlYWwgY29uZ2FzCnJlYWwgcGlhbm9zCmFudG9uaSB0YXBpZXMgYW5kIGN5IHR3b21ibHkKZnJhbmNpcyBiYWNvbiBhbmQgY3kgdHdvbWJseQp1bHRyYWZpbmUgaHlwZXJyZWFsaXN0aWMgZGV0YWlscwphcyBpZiBsaXNhIHNpbXBzb24gY2FtZSB0byBsaWZlCnlvdW5nIHByZXR0eSBncmF2dXJlIGlkb2wKc2NyYXRjaGVkIG1ldGFsCndlbGwgbGl0IHByb2Zlc3Npb25hbCBwaG90bwphbmltZSBsaWtlCnN0dW5uaW5nIGFmcmljYW4gcHJpbmNlc3MKZ2xvc3N5IHdoaXRlIGFybW9yCmNyeXN0YWwgYW1iZXIgZXllcwptaWxpdGFyeSBnaXJsCmFybXkgZ2lybCBvdXRmaXQKc29sZGllciBoZWxtZXQKc3R1bm5pbmdseSBteXN0ZXJpb3VzCnRheWxvciBzd2lmdCB3aXRoIGdyZWVuIGRyZXNzCmV2ZW4gc2tpbiB0b25lCnNvZnQgc2hhZG93cyBvbiB0aGUgZmFjZQppdnkncwpzdHlsaXplZCBzdG9uZSBjbGFkZGluZyB0ZXh0dXJlCmJsaXp6YXJkIGVudGVydGFpbm1lbnQgOCBrCnN1YnNwYWNlIGVtaXNzYXJ5CmdvbGRlbiBvcmJzCnRvYWQgc2FtdXJhaQpzYW11cmFpIGRlaXR5IHdpdGgga29pIGFybW9yCnlpbmcgYW5kIHlhbmcKZmxvd3kgZ29sZGVuIGhhaXIKbWFkZSB1cCBvZiBtYW55IGJpdHMgb2YgbWV0YWwKc3Rvcm15IGNsb3VkcyBvbiB0aGUgaG9yaXpvbgpmZWF0dXJlZCBvbiBhcnRzdGF0aW9uIGhkCmthd2FpaSByZWFsaXN0aWMgcG9ydHJhaXQKZ290aGljIHJpY2ggZGVlcCBjb2xvcnMKaGFzc2VsYmxhZCBxdWFsaXR5CnN1cGVyIG1hcmlvIGJyb3MgMSA5IDggNQptYXJpbyBzcHJpdGUgc2hlZXQgd2FsayBjeWNsZQpzdXBlciBtYXJpbyBwb3J0cmFpdApibHVlIGFuZCByZWQgdGF0dG9vCnZvZ3VlIGlzc3VlIGphbnVhcnkKc3VwZXIgcmljaCBoYXBweSBwZXBlCnN1cGVyIHdpZGUgdmlldyBvZiBhIGNpdHlzY2FwZQpkYXJrIGdyZWVuIHRpbnQKY3JheW9uIGFuZCBjdXQgdXAKcHVuayBmYW56aW5lIDEgOSA2IDcKc3VycmVhbCBiZWF1dGlmdWwgeW91bmcgd29tYW4KY3VybGVkIHNpbHZlciBoYWlyCmluIHRoZSBzdHlsZSBkb3JhIG1hYXIKc3VycmVhbCBnZWRpbWluYXMgcHJhbmNrZXZpY2l1cwpkaiBtaXhlcgpjb250cm9sbGVyIGRlY2sKYWNjdXJhdGUgZ2VvZ3JhcGh5CmJyaWdodCBkaWZmdXNlIGxpZ2h0aW5nCnRob21hcyBraW5rYWRlIHNoYXJwIGZvY3VzCjggMCdzIHZpbnRhZ2Ugc2NpIC0gZmkgc3R5bGUKcGFsZSBhcyBtYXJibGUKYmlvbWVjaGFuaWNhbCBhbmQgaW50cmljYXRlCnRoZSBjb25qdXJpbmcgc3R5bGUKZnVsbCBiaWcgbW9vbgpzd2FnZ2VyISBsb3dyaWRlciBjdWx0dXJlCmNnaSBzcGVjaWFsIGVmZmVjdHMKc3dpcmx5IHR1YmVzCnBhbnRoZW9uCmNyZWVweSBzaWdtYSA3NW1tCmRyZWFteSBrb2RhayBjb2xvciBzdG9jawpwZW5uZWQgd2l0aCBibGFjayBvbiB3aGl0ZQpzeW1tZXRyeSEgZnV0dXJpc3RpYyByb2JvdGljCmRldGFpbGVkIC0gZmFjZSEhCnRyYWRpdGlvbmFsIGluayEKZ2xvd2luZyBsaWdodHMhISBoaWdobHkgZGV0YWlsZWQKd3J5IHNtaXJrCmdvbGQgYW5kIHdoaXRlIGNsb2FrCmNvdHRhZ2Vjb3JlISEgZml0bmVzcyBib2R5CmFubmEga292YWxldnNrYXlhCnBhYmxvIGh1cnRhZG8gZGUgbWVuZG96YQptYXJ0b24gZ3l1bGEga2lzcyAoIGtpbWFndSApCnN5bW1ldHJ5ISEgcG9ydHJhaXQgb2YgYSB3b21hbgpzeW1tZXRyeSEhIHBvcnRyYWl0IG9mIGhhZGVzCnNwYXJrcyBhbmQgdGh1bmRlcnMKY3liZXJuZXRpYyBjb21wb25lbnRzCmV4cHJlc3NpdmUgcmVhbCBleWVzCm9iamVjdHMgbGV2aXRhdGluZwppbiBjaGlwcGVuZGFsZSBzeWRuZXkKc2hhcnAgbm9zZSB3aXRoIHJvdW5kZWQgZWRnZXMKdGFsbCBnaXJsCnZpb2xldCBjb2xvdXJlZCB0LXNoaXJ0CnlvdW5nIHdhbiBhbmdlbAp3ZWFyaW5nIHNpbHZlciBoYWlyCnZhc3RheWFuCmJhbmtub3RlcyBmbHlpbmcgZnJvbSBiYXJyZWwKdGFyZGlncmFkZSBzdGF0dWUgaW4gdGhlIGZvcmVzdAphYnN0cmFjdCBlZGdlcwp0YXR0b28gb2YgYSBjYWxpZm9ybmlhIHNjcnViIGpheQpwb2x5bmVzaWFuIHN0eWxlCnRhdHRvbyBza2V0Y2ggb2YgYSBzZWEKdmVyeSBzaG9ydCBtZXNzeSBoYWlyCnRheGkKdGF5bG9yIHN3aWZ0IGFzIGEgaGVhdmVubHkgYW5nZWwKbG9uZyBoYWlyIHdpdGggYmFuZ3MKY3lib3JnIGNvd2JveSB0ZWNobmljYWwgZGlhZ3JhbQp0ZWxlcGF0aHMKdGVkIGRhbnNvbgp3ZWFyaW5nIHdoaXRlIGNoZWYgaGF0Cm5lYXIga2l0Y2hlbiBzdG92ZQpsYW1wICggKCAoIG1pcnJvciApICkgKSApCmxvdyBzYXR1cmF0ZWQgcmVkIGFuZCBibHVlIGxpZ2h0CnRlcnJhZm9ybWluZyBtYXJzCnRlc2xhIGR1bmUgYnVnZ3kKdGhlIGhvdXNlcyBvZiBwYXJsaWFtZW50CnNlZW4gdGhyb3VnaCBicm9rZW4gZ2xhc3MKc3ltbWV0cmljIGFybW9yCmNlbHNoYWRlZCBhcnQKdGhlIGJsYWNrc21pdHPigJkgZGF1Z2h0ZXIKd29ya2luZyBpbiB0aGUgZm9yZ2UKdGhlIGJsaW5kIGxpYmVydHkgb2YgdGhlIGZldwpjb2xkIHNoYWRlcwpwZXJmZWN0IGJlYXV0aWZ1bApraWQgbGl0CnRoZSBjaGlsZHJlbiBvZiB0aGUgbmlnaHQKd2hhdCBtdXNpYyB0aGV5IG1ha2UKd2ludGVyIHBob3RvZ3JhcGgKbGFpZCAtIGJhY2sKYWJzb2x1dGUgcGVhY2UgYW5kIHF1aWV0CmRlZXAgc3RpbGxuZXNzIGFuZCBzaWxlbmNlCmh5cGVyc3VycmVhbApjeWJlcnB1bmsgZmxvd2VycHVuawp0aGUgZGVwdGhsZXNzIGV5ZQp0aGUgZGlzZWFzZSBvZiBpbWFnaW5hdGlvbgp0aGUgZG9vbXNsYXllcgpvbGkgb24gcGFpbnRpbmcKdGhlIGVtcHJlc3Mgb2YgbGljb3JpY2UKdGhlIGVuZCBvZiBodW1hbml0eQp0aGUgZW5lcmd5IG9mIGRyZWFtcwpzdWJtaXNzaW9uCmZsYW1lcyBmcm9tIHRoZSBncm91bmQKdGhlIGxhbmRzIGxpdHRlcmVkIHdpdGggYm9kaWVzCmJvdGggbWVuIGFuZCBjYXR0bGUKYWxsIG1hbm5lciBvZiBiZWFzdHMKc3VycmVhbGlzdCBsYW5kc2NhcGUgcGFpbnRpbmcKbWFkZSBvZiBvaWwgYW5kIHdhdGVyCmJlYXV0aWZ1bGwgcHVmZnkgY2xvdWRzLiBhbmltZQp0aGUgZ2lybCBwbGF5cyB0aGUgZ3VpdGFyCnRoZSBmaXJlIGlzIG1hZGUgb2YgYmluYXJ5IGNvZGUKdGhlIGdvZCBwb3NpZGVvbgpmZW1hbGUgY3lib3JnIGJsYWNrIHNpbGhvdWV0dGUKZmxlc2ggYW5kIGJsb29kCnRoZSBob3VzZSBpbiB0aGUgZm9yZXN0CnRoZSBoeWRyYSBmcm9tIHBhdGggb2YgZXhpbGUKb2NjdWx0IGFlc3RoZXRpYwpsaW5lZCB3aXRoIG5lb24gdHViZSBsaWdodHMKY2xpbmljYWxseSBkZXByZXNzZWQKcGhvdG9ncmFwaHkgcG9ydHJhaXQgNCBrCmJsb29kIG9uIHNhbmQKYXJtb3VyIGFuZCBmYWxsZW4gY3Jvd24KdGhlIGxhbnRlcm4gY3Jvd24KdGhlIGxpZmUgYWZ0ZXIgZGVhdGgKdGhlIGxpdHRsZSBjaXJjdXMgb2YgaG9ycm9ycwpjcmVlcHkgZXhwbG9yZXIgc2tldGNoCmVsZHJpdGNoIGpvdXJuYWxpc3QKZGVjYXkgdGV4dHVyZQpuYXJyYXRpdmUgbmF0dXJlCnF1YW50dW0gcGFydGljbGVzCmVwaWMgc2hhbWFuaWMgZG10IGFydAp0aGUgbW9ybmluZyByaXZlcgptYXJ2ZWwgY29taWNib29rIGNvdmVyCnZsb3AKc3R1ZmZlZCBkcmFnb24KcnVzc2lhbiBwYWludGVycwpkZWVwIHNoYWRvd3MgYW5kIGNvbG9ycwpkZXRhaWxlZCBzbW9rZSBhbmQgZHVzdAp0aGUgbmlnaHQgY3Jvd24KdGhlaXIgaXJpc2VzIGFyZSByZWQKdGhlIG5pZ2h0IHNreQpza3kgZm9jdXMKdGhlIG5vcm1hbmR5IGxhbmRpbmdzCmdsb3dpbmcgc2tpbiBmYWNlCnN0eWxlIGJsZW5kIG9mIHRoZSB2YXRpY2FuCnRoZSBwaG90byBzaG93cyBhIGxhcmdlCndvbmRlcmZ1bCBjb21wb3NpdGlvbnMKdGhlIHBvcGUgd2FrZXMgdXAgaXMgaGlzIGJlZApyZWQgYmFja3dhcmRzIGNhcAppcmlkZXNjZW50IHdpcmluZwp0aGUgcG9ydHJhaXQgb2YgYW4gZWxlZ2FudApyZWFsaXN0aWMgeW91bmcgYW5pbWUgZ2lybApyZWFsaXN0aWMgc2Vuc3VhbCBncmF2dXJlIGlkb2wKYXJjaGZleQpwaGlsb3NvcHkKbmV3IHlvcmsgaW4gdGhlIHNldmVudGllcwp0aGUgcmVhbCBob2x5IGdyYWlsCnRoZSByZWQgbmluamEKaGFyZCBsaWdodCBkaWdpdGFsIHBhaW50aW5nCnRoZSByb2JvdCBpbiBoZXIgbWVjaGFuaWNhbCBtYXNrCnRoZSBydWxlcyBvZiBwcm9wb3J0aW9uCnRoZSBzYW5kcyBvZiB0aW1lCnRoZSBzY29vdGVyICggZWRtIGJhbmQKdGhlIHNoaXJlIGNhc3RsZQp0aGUgc21vb3RoIGJsYWNrIGxpb25lc3MKdGhlIHNvcmNlcmVyJ3MgZG9sbAp0aGUgc291cgpkb3VyCmJ2bGdhcmkgamV3ZWxyeQp0aGUgc291cmNlIG9mIGZ1dHVyZSBncm93dGgKdGhlIHN1biByZWZsZWN0aW5nIG9uIGEgd2luZG93CnRoZSB0aGlyZCBob3JzZW1hbgpnZW1tYSBjaGVuCmV4Y2VsIHJ1bm5pbmcgb24gdGhlIGNvbXB1dGVyCmNvb2wgYmx1ZSBhbmQgZ3JlZW4gY29sb3JzCndyYWl0aHMgcmlkaW5nIGluIHRoZSBza3kKdGhlIHdpemFyZCdzIG1hZ2ljYWwgdG93ZXIhIQp0aGUgd29sdmVyaW5lCnRoZSB3b3JsZCBiZXR3ZWVuIGRlYXRoIGFuZCBsaWZlCnRoZSB3b3JsZCdzIGJpZ2dlc3QgaWRpb3QKdGhlcmUgd2VyZSBlaWdodCBhbmltZSBwZW9wbGUKZWlnaHQgZWlnaHQgZWlnaHQKeW91bmcgY3V0ZSB3YW4gYXNpYW4gZmFjZQp0aG9tIHlvcmtlIGFnZSAyIDUKZ2xhc3MgLSByZWZsZWN0aW5nIC0gc3RhcnMKYmVhdXRpZnVsIGJsdWUgLSBleWVzCnRocmVlIGFuaW1hbHMKZGVtb25pYyBwYXJhc2l0ZQppbnNpZGUgYSBkb21lCnBpdGNoIGJsYWNrIHNreQp0aWZhIGxvY2toYXJ0IHdpdGggd2hpdGUgaGFpcgp0aWdlcm1hbgpmb3JlZ3JvdW5kIGJhY2tncm91bmQKdGltZSBjb25zdW1lcyB1cyBhbGwKaHVnZSBzY3l0aGUKeW91bmcgaGFuZHNvbWUgbWFuCnR1cm5pcCBoYWlyCnRpbmEgdHVybmVyIHBvcnRyYWl0Cm1vbnN0ZXIgaHVudGVycwpzY3Jld3MgYW5kIGJvbHRzCmJsb2NreSBzaGFwZQplZG8gZXJhIGhvdXNlIGluIHRoZSBiYWNrZ3JvdW5kCnRpbnkgc3BhY2VzaGlwCnB1bmshISEKc2l0dGluZyBvbiBtYW4ncyBmaW5nZXJ0aXAKb3BlbiBoYW5kCnRpdGxlIGthbmppCmluIHRoZSBkaXN0YW50IGZ1dHVyZQpqdXN0IHRha2UgYSBwaW5jaCBvZiBwc3ljaGVkZWxpYwpwZXJmZWN0IGNlbnRyYWwgY29tcG9zaXRpb24KYm9rZWggdG9wIGNpbmVtYXRpYyBsaWdodGluZwphd2Vzb21lIGdyZWF0ZSBjb21wb3NpdGlvbgpteXRoaWNhbCBjb3NtaWMgc2hyaW5lCnJhbmRvbWx5IGx1c3Ryb3VzIGNvbG9yZWQgaGFpcgp0b20gYmFrZXIgdXNpbmcgaGlzIHNjYXJmIHRvIGZseQp0b20gY3J1aXNlIGxhdWdoaW5nIHN1cGVyIGhhcmQKaHlwZXIgYW5nZXIKaW1hZ2UgZGVwdGgKZGFuY2luZyB3aXRoIGVhY2ggb3RoZXIKY2hpbW5leXMKdG9waCBiZWkgZm9uZwp2YW5ndWFyZGlzdCBhbHRlcm5hdGUgdGltZWxpbmUKdG90YWxpdGFyaWFuIHNvY2lhbGlzdCBhbmdlbAp0b3Rvcm8gZnJvbSBteSBuZWlnaGJvciB0b3Rvcm8KdHJhZGl0aW9uYWwgZmVtYWxlIGhhaXJzdHlsZXMKZW5kbGVzcyBjb2xsYWJvcmF0aW9uIHdpdGggYWkKYm9yaXMgYXJ0enliYXNoZWZmIGFuZCBociBnaWdlcgpwdmMgZmlndXJpbmUKdHJvcGljYWwgd29vZAp0cmlhbmdsZSBpbnNpZGUgY2lyY2xlCmluc3RhZ3JhbSBkaWdpdGFsCnRyb24gbGVnYWN5IGplc3VzCnRyb3BpY2FsIGxlYXZlcwp4eHh0ZW50YWNpb24KdHJ1bXAgYXMgYSBtaW5pb24KdHVlc2RheSB3ZWxkIGluIGEgcGluayBiaWtpbmkKZmFub29zCnR1cnRsZS4gcGFjaWZpYyBub3J0aHdlc3QgY29hc3QKOCAwIHMgYW5pbWUgc3R5bGUKY2VudGVyZWQgcG9zaXRpb24KYmxhY2sgZXllIG1ha2V1cApzaXR0aW5nIGluIGZyb250IG9mIGEgbGFrZQpjYXN1YWwgc3VtbWVyIGNsb3RoZXMKdHJlbmRpbmcgYXJ0Z2VybQptb3VudGFpbnMgb24gYmFja2dyb3VuZApwZWFjZWZ1bCBkYXkKdHdvIGdpYW50IHRvd2Vycwp0d28ga2l0dGVucyBzbGVlcGluZyBpbiBhIGJhc2tldAppbGx1c3RyYXRpb24gZm9yIGNoaWxkcmVuCmVkd2FyZCBob3BwZXIgYW5kIGplbm55IHNhdmlsbGUKZHJhcGVkIGluIHBpbmsgYW5kIGdyZWVuIHJvYmVzCiEhIWVkd2FyZCBob3BwZXIhISEgc3VycmVhbGlzbQpiYWNrZ3JvdW5kIG9mIHN0YXJzIGFuZCBnYWxheGllcwpob2xkaW5nIGEgYmF0dGVyeQpkaWFnb25hbCBjb21wb3NpdGlvbgpjcnQgdHViZXMKaHVtaWRpdHkgbW9sZAp0emltaXNjZQpmcmlnaHRlbmluZyBzdXJyb3VuZGluZ3MKdGhlIHJvY2sgYW5kIHJvbGwgZW1wZXJvcgp1aGQgcGhvdG9yZWFsaXN0aWMgcGljdHVyZQpyZWR1Y2UgZHVwbGljYXRlIGNvbnRlbnQKYmVzdCBqdW1wc2NhcmUgc2NlbmUKc3Bpcml0dWFsIG1hc3RlcnBpZWNlCmRydWlsbGV0IGNvbG9yZnVsCmdpcmwgaW4gYSBiZWQgb2YgZmxvd2VycwpiZWF1dGlmdWwgY3J5aW5nISBhbmRyb2lkIHdvbWFuCmxlaWNhIHN1bW1pY3Jvbi10IDIzIG1tIGYvMgptYXNzIGVmZmVjdCBzdHlsZQpjdXRlIGN5YmVyIGdvZHMKdmVyeSBjdXRlIHJvYm90IHplbgp3aXRoIGEgZ3JlZW4gY2xvYWsKYmFja2dyb3VuZCBpcyB3aGl0ZSBhbmQgYmxhbmsKbm9ib2RpZXMKY3Jhd2xpbmcgb3V0IG9mIGEgZGFyayByb29tCmhhbmRzb21lIHNhaXRhbWEuIGludHJpY2F0ZQpkaXNjb3Zlcnkgb25lCmNpbmVzdGlsbCEhCm9jY3VsdCBqZXdlbHJ5CmZyZW5jaCB2aWxsYWdlIGV4dGVyaW9yCmJsdWUgYW5kIHB1cnBsZSBmdXIKdmFzZXMgYW5kIGEgcGxhc3RlciBidXN0CnZhc2VzIGFuZCBib3R0bGVzCmphbiBicnVlZ2hlbApjb3ZldGVkIGFsaXZlCmFuaW1hdGlvbiBzdHlsZSByZW5kZXIKdmVyeSB2ZXJ5IHZlcnkgdWx0cmFkZXRhaWxlZAp3ZWlyZCBzdHlsaXNoIGF2YW50IGdhcmRlIGVwaWMKcHVuayByb2NrIHBvc3Rlcgpzd2ltbWluZyB0byBzdXJmYWNlCmNhbWVyYSBhbmdsZSBmcm9tIGJlbG93CnVuZGVyd2F0ZXIgc2VhIGRyYWdvbiBmdWxsIGJvZHkKZGVlcCBibHVlIHNlYSBjb2xvcgp1bmhvbHkgZ2F0aGVyaW5nCnVuaXZlcnNlIGluIGEgZ3JhaW4gb2Ygc2FuZAp1bmlxdWUgZW52aXJvbm1lbnQKdXAgY2xvc2UgcG9ydHJhaXQgb2YgbXIgYmVhbgooIGJvcmlzIGpvaG5zb24gKQp1cyBpbiBhIHZhc3QgbmlnaHQKdmFtcGlyZSBjYXQKdmFuaXNobWVudCBvZiB0aGUgZ29kcwpibGFjayBiYWNrZ3JvdW5kKQp2YXN0IGljZSBkdW5nZW9uCnZhc3QgbW91bnRhaW4gbGFuZHNjYXBlCnNpbGljb25pemVkCmZ1dHVyaXN0aWMgZHJhbWF0aWMgbGlnaHRpbmcKdmVyeSBiZWF1dGlmdWwgYW5pbWUgY2F0IGdpcmwKZmxhc2h5IG1vZGVybiBiYWNrZ3JvdW5kCnZlcnkgYmVhdXRpZnVsIGVsdmVuIHRvcCBtb2RlbAphZW9uIGZsdXggc3R5bGUKZHJhZ29uIHBhdyBhcnQKYW50aHJvIHBhdyBwb3YgYXJ0CmRldGFpbGVkIGZvb3QgcG92CnNoYXJwIGNsYXdzIGNsb3NlIHVwCmluIGEgcm9jayBjaGFpcgpmdXJhZmZpbml0eSBhd2FyZCB3aW5uaW5nCmJlYXV0eSBtYXJrIG9uIGNoZWVrCiggKCBkZWVwIGJsYWNrIGV5ZXMgKSApCmRhcmsgc3VwZXIgc3Rvcm0KbGVhdmVzIG9uIGJyYW5jaGVzCnNvbGFyIHBvd2VyCnJ1c3R5IGNvbG9ycwpwcm9zdGhldGljIGxpbWJzCmNhYmxlIHdpcmUgaW1wbGFudHMKc2lkZSB2aWV3IGludHJpY2F0ZSBkZXRhaWxzCnNsZWVrIHJvdW5kIHNoYXBlcwpob3JucyB3aXRoIGluZGljYXRvciBsaWdodHMKY29tbXVuaXR5IGNlbGVicmF0aW9uCnZlcnkgdmVyeSBzbWFsbCBnb2F0CnZlcnkgd2lkZSBhbmdsZSB2aWV3CmJlYXV0aWZ1bCBuYXR1cmFsIHNraW4Kcm9ib3Qgc3RhbmQgLSBvZmYKdmljdG9yaWFuIHZhbXBpcmUKdmllbm5hIHN0YXRlIG9wZXJhIGhvdXNlCnZpZXcgYWJvdmUgdGhlIGNsb3Vkcwp2aWV3IG9mIHNlYQpiZWF1dGlmdWwgbW9vcmlzaCBvcm5hbWVudAp2aWV3IG9mIHRoZSBvbmUgc3BpcmFsIGdhbGF4eQp2aWV3IG91dCBvZiBhIHdpbmRvdwpzaGUgaGFzIGEgamlnZ2x5IGZhdCByb3VuZCBiZWxseQp2aWt0b3Igb3JiYW4gZHJpbmtpbmcgY2hhbXBhZ25lCnZpbGxhaW4gd2VhcmluZyBhIHJlZCBvbmkgbWFzawp2aW4gZGllc2VsIGFzIHRoYW5vcwpkcmFtYXRpYyA4IGsgdWhkCm9uIG9sZCBwYXJjaG1lbnQKZHJhbWF0aWMgZ2xvd2luZyBsaWdodGluZwp2aXRydXZpYW4gbWVjaGEKcHV0aW4gaXMgYmFsZCBjYXZlbWFuCmhvcnJvciBtYWNhYnJlIGZhY2UKdm9vZG9vIGhhdApzdGVhbXB1bmsgd2F0Y2gKcmljaGFyZCBtaWxsZQp2dyBidXMgb24gYSBzdHJlZXQKdGhlIGZhbGxpbmcgc29sZGllcgpsYXJnZSByb2JvdAp3YXJoYW1tZXIgNDBrIGVtcGVyb3Igb2YgbWFua2luZAp3YXJoYW1tZXIgZmFudGFzeSBiYXR0bGUKd2FycmlvciB3aXRoIG1ldGFsIG93bCBhcm1vdXIKdGVtdWVyYSBtb3JyaXNvbgpzdXJyZWFsIHdhdGVyIGFydAp3YXRlciBjb2xvciBhbmQgcGVuCndhdGVyIGNvbG9yIGFydCBvbiBwYXBlcgp3YXRlcmNvbG9yIGxhbmRzY2FwZQpyb2NvY28hCndhdmUgb2Ygd2F0ZXIgcGFydGljbGVzCndlJ2xsIGZhbGwgdG8gcGllY2VzCmNvbG9yZWQgbGFzZXJzCndoaXJsd2luZCBvZiB0YXJvdCBjYXJkcwp3aGl0ZSBiaXJkIHNrdWxscwpiYWNrZ3JvdW5kIHZpYnJhbnQKbXlzdGljYWwgc3dpcmxzCmxlaWNhIDggNSBtbQp3ZWVkIGN1dGllIG1hcmsKY29wcGVyIHNwaXJhbCBoYWlyIGRlY29yYXRpb25zCiA0ICBrCndoaXRlIGhhYml0YXQgNiA3CnBpZXJjaW5nIGV5ZQpjb3N0dW1lIGRlc2lnCnJlZCBwZW5uYW50cwp3aGl0ZSBtYXJibGUgaW50ZXJpb3IgcGhvdG9ncmFwaApzYWQgZnJvd24KOCDQugp1bHRyYSB0ZXh0dXJlZApzdHVkeWluZyBhIGhlbGwgb3BlbiByaWZ0IHBvcnRhbApkcmFtYXRpYyBmYWNpYWwgZXhwcmVzc2lvbgpoYW5kIG9uIGhpcyBjaGVlawpzb2Z0IGJsdXNoCm1lbiBmYWxsIGZvciBoaW0Kd2lkZSBhbmdsZSBmdWxsIGJvZHkKbW9ub2Nocm9tZSBjb2xvcgp3aWRlIGFuZ2xlIHBvcnRyYWl0IG9mIGFzdHJvYm95CmRpbm9zYXVycyBhbmQgZ29kemlsbGEKbHVzaCBzY2VuaWMgbGFuZHNjYXBlCmx1c2ggZ3JlZW5zCnNtaWxpbmcgc29mdCB2aWJyYW50IGxpcHMKY2VudHJlZCBwb3NpdGlvbgp2aWJyYW50IGNteWsgZHllIG92ZXJwYWludGluZwp3aWRlIHNob3QgNGsgcmVzdWx0CndpbGxpYW0gZi4gYnVja2xleSBncmFwaGljIG5vdmVsCmFuY2llbnQgbGlidSBwcmluY2Vzcwp3aWxsb3cgc21pdGggemVuZGF5YQphbmNpZW50IGxpYnUgeW91bmcgZ2lybAp3aW1tZWxiaWxkZXIgbWF6ZSBtYWRlIG9mIGxlZ28Kd2luZSBsYWJlbAp3aXRjaCBjb3R0YWdlIGluIHRoZSBmb3Jlc3QKd2l6YXJkIGRvaW5nIGEgdGFyb3QgcmVhZGluZwpzcGFya3kgbWV0YWxsaWMKd29tYW4gY3J5aW5nIHJhaW5ib3cgcGFpbnQKZGV0YWlsZWQgc3BvcnRzIGJyYQp3b21hbiBpbiBhIGRhcmsgZm9yZXN0CmtvZGFrIHZpc2lvbjMgNTAwdApjb21iYXQgbWVjaCBjbG90aGVzCnZhcG9yIHB1bmsKd29tYW4gd2l0aCBmcmVja2xlcwp3ZXQgbWFrZSAtIHVwCnN3b3JkcyBzdHVjayBpbiB0aGUgZ3JvdW5kCmhhbm5haCBkb2RkCm1lc3N5IHdhdnkgd2hpdGUgaGFpcgp3b21lbiBwbGF5aW5nIGd1aXRhcgpncmVlbiBmbGFnCmdhaW5zCmdyZWVuIGNoYXJ0cwpkcmVzc2VkIGFzIHNjaG9vbGdpcmwKd29ybGQgbWFwCndvcmxkIG9mIG9ubHkgY29uY3JldGUKd29ybGQgb2Ygd2FyY3JhZnQgZWx2ZW4gZHJ1aWQKd29ybSdzIGV5ZSB2aWV3IGZyb20gZmxvb3IKbmVhdCBhbmQgdGlkeQpiaW9tZWNoYW5pY2FsIGJvZHlzdWl0CndyYWl0aCBmcm9tIGFwZXggbGVnZW5kcwptYWludGVuYW5jZSBwaG90bwp3dW5kZXJrYW1tZXIKaW4gYSBzcGFjZXNoaXAgY29ja3BpdAp0cmF2ZWxpbmcgaW50byBhIGJsYWNraG9sZQpzcG90bGlnaHQgaW4gbWlkZGxlIG9mIGZhY2UKbm9yZGljIGZvbGsKeW9kYSBmYW50YXN5IGFydCBwb3J0cmFpdAp5b3VyIG1vbQppbnRyaWNhdGUgb2lsIHN3ZWVwcwpmcm9tIHRoZSBlbGJvdwpwcmluY2lwYWwgc2V0IHBob3RvZ3JhcGh5CmJhbmNob3UKYXJtcyBzdHJldGNoZWQgb3V0CnN0YW5kaW5nIG9uIHRoZSBmaWVsZCBvZiBiYXR0bGUKamVhbnMgYW5kIGtuZWUgaGlnaCBibGFjayBib290cwp5b3VuZyBnaXJsIHBsYXlpbmcgZmx1dGUKYmlyY2ggZm9yZXN0IGNsZWFyaW5nCnN0b3JtIGF0IG5pZ2h0CmJpZyBzdG9ybSBjbG91ZHMKeW91bmcgZ2xpdGNoZWQgd29tYW4KdHJhZGluZyBjYXJkIGZvbmQKZHJhZ29uIC0gaW5zcGlyZWQgc3VpdAp5b3VuZyBtYW4gaW4gYSBwdXJwbGUgaG9vZGllCm1lc3N5IHNob3J0IGJyb3duIGhhaXIKcmVkIGlyaXNlcyBhbmQgYSBzbGltIGZhY2UKbG9uZyBoYWlyISEhIQpob2xkaW5nIHNwZWxsIGJvb2sKeW91bmcgbWlkZGxlIGVhc3Rlcm4gd29tYW4KcHJvZmVzc2lvbmFsIGJvZHkgcGFpbnQKeW91bmcgd29tYW4gd2l0aCBsb25nIGRhcmsgaGFpcgp6ZW5vYmlhCnpvbWJpZSBjb2ZmZWUgbG9nbwp6b21iaWUgZHJpbmtpbmcgY29mZmVlIGxvZ28KdXBzZXQgdGhlIGNvZmZlZSBkb2VzIG5vdCB3b3JrCmdlbXN0b25lcyBmb3IgZXllcwpzdHlsaXNlZCBmb3ggLSBsaWtlIGFwcGVhcmFuY2UKYmxhY2sgYW5kIGF1YnVybiBjb2xvdXIgcGFsbGV0CnRoaWNrIGZ1cnJ5IG5lY2sgYW5kIGNoZXN0IGZsdWZmCsKrIGF0dHJhY3RpdmUKaHlwZXIgcmVhbGlzdGljIOKAnQo0ayBpbWFnZeKAnQpyZWFsaXNt4oCdCmZsb3dlcmluZyBwaW5lYXBwbGVzIGFuZCBvcmNoaWRzCm1hY3JvIGJva2VoIOKAnQpwaG90b2dyYXBoIOKAnQp1bHRyYSByZWFsaXN0aWMg4oCdCjQgayBtYXR0ZSBwYWludGluZwpncmF2ZWwgYW5kIHNjcmVlIGdyb3VuZApqYW1lcyBqZWFuIOKAnQphcmNoaXRlY3R1cmUgcmVuZGVyIOKAnQphbmFlc3RoZXRpYwpiZWtzaW5za2kg4oCdCndpdGggYSBibGFjayBkYXJrIGJhY2tncm91bmQKY2FuZGxlIHdheApmYW50YXN5IOKAnQpncmVnb3J5IG1hbmNoZXNzIOKAnQplcm5pZSBjaGFuCndpZGUgb3BlbiBjaXR5IOKAnQrigJwgZXRoZXJlYWwKaXNhYWMgYXNpbW92IOKAnQpqb3NlcGggdG9kb3Jvdml0Y2gg4oCdCuKAnCBpcm9uIGJhcmsKYXdhcmQgLSB3aW5uaW5nIHBob3RvIOKAnQphd2FyZCAtIHdpbm5pbmcgcGhvdG8uIOKAnQptb29ucyBpbiBiYWNrZ3JvdW5kCm1hamVzdGlj4oCdCnRyZW5kaW5nIG9uIGRldmlhbnRhcnRoceKAnQppbiBzdHlsZSBvZiBtaWtlIHNhdmFk4oCdCmJ1dHRlcmZseWZpc2gKcmVuZGVyZWQgaW4gdW5yZWFsIGVuZ2luZeKAnQpjaW7DqW1hdGlxdWXigJ0KcmVhbGlzdGljIHBob3Rv4oCdCnVsdHJhIGRldGFpbGVk4oCdCnBob3RvIHJlYWxpc3RpY+KAnQo4ayB1aGTigJ0K4oCcaG91c2UgbXVzaWMgcmF2ZSB3aXRoIGRhbmNlcnMKc3dpcmx5IHNtb2tlCmZvb2QgcGhvdG9ncmFwaHnigJ0KZ29kZGVzcyBqZXdlbHJ5CnNjcmliYmxlZCBsaW5lcwphbmltZeKAnQrigJx1d3UgdGhlIHByaXNtYXRpYyBwZXJzb24KM2QgcmVuZGVy4oCdCmRldGFpbGVkIGNvbG9yIHNjYW7igJ0KYWtpaGlrbyB5b3NoaWRh4oCdCmdhdWRpIHN0eWxl4oCdCnBpbmsgd2hpdGUgYW5kIGdyZWVuCm1pa2UgdHJvdXQKc2hpbnkgc2tpbuKAnQphdCBhIG11c2V1bQp3aXRoIHNoaW55IHNraW4KdGlsdCBzaGlmdOKAnQpwaG90b3JlYWzigJ0KcGl4YXLigJ0KZ3Jhc3MgYW5kIHdlZWRzCnN0eWxlIG9mIGVkd2FyZCBnb3JleeKAnQpwaWcgcGlnIHBpZwpjZW50cmFsIHN0YXRpb24gaW4gc3lkbmV5CmJsb29kIGRyb3AKYXJ0IG5vdXZlYXXigJ0KdGhlIGxhc3Qgb2YgdXPigJ0K4oCcZXJlYm9z4oCZcyB0aXRhbgptb2Rlcm4gcnVzdGlj4oCdCuKAnGdhcyBzdGF0aW9uIHBob3RvZ3JhcGh5Cm5obArigJxsb3NzIG9mIGlubmVyIHNlbGYKaGlnaCBxdWFsaXR5IHByb2R1Y3QgaW1hZ2XigJ0K4oCcb3JnYW5pYwpjb2xkIHN1bnNldApncmFwaGlj4oCdCnVoZCDigJ0Kc3RyYW5nZSBkaW1lbnNpb25zCltlcGljCuKAnWJlYXV0aWZ1bCBhbmltZSB3b21hbgpjb2xvcmZ1bF3igJ0K4piB8J+MqvCfjJnwn5Gp8J+Pvgrwn42CIGN1dGUK8J+RgfCfjLnwn5G+CnNwaWtlIGNvbGxhcgrwn6qUIPCfjqg78J+MnvCfjIQKIwo5CjYKZHJlYW0gbWVkaXVtIHBvcnRyYWl0IHRvcCBsaWdodApncmVlbiBob3VzZQpzbW9vdGggYXJzdGF0aW9uCndlIGdvCmh5cGUKcmVhbCB0cmVuZGluZyBvbiBpbnN0YWdyYW0gaW1hZ2UKY2hhcnRyZXMgY2F0aGVkcmFsCm5ldyB5b3JrIHpvbyBpbiB0aGUgYmFja2dyb3VuZAppbiBzdHlsZSBvZiBtYXJjZWwgZHVjaGFtcAohIGRyZWFtIGFydGdlcm0KbGVvbmFyZG8gZGEgdmluY2kgYW5kIHJhcGhhZWwKZWR1Y2F0aW9uYWwgc3VwcGxpZXMKbG9ja2VycwpncmVhdCB2aWV3CmJsdSAtIHJheSB0cmFuc2ZlciA1IGsKLSBoIDEgMCAyIDQKYm9tYnMgYXJlIGZhbGxpbmcgZnJvbSB0aGUgc2t5CmVjb25vbWljIGJvb20KYmVhdGVuLiB1bnJlYWwgZW5naW5lCm5ldHMKaW1hZ2luZWZ4IDogOiBoeXBlcnJlYWxpc20KcGVvcGxlIG91dCBvZiBmb2N1cwpjaGlsbCB2aWJlcwpjYXJzIHBhcmtlZCB1bmRlcm5lYXRoCndhcnJpb3JzIGFuZCBhZHZlbnR1cmVycwpmbHVmZnkgcGluayBhbmltZSBjbG91ZHMKaW4gbGVnbmljYSBjaXR5IGhhbGwKd2VhcmluZyBzaGlueSBzdG9ybXRyb29wZXIgYXJtb3IKISEhIQohIWhpZ2hseSBkZXRhbGllZAohIXBvc2luZ19hc19sYXN0X3N1cHBlcgppZGlsaWMKY3J5c3RhbHMgYW5kIGRpYW1vbmRzCiE4ayEKcG9zZXIKYXdhcmQtd2lubmluZyBjaW5lbWEKb24gYSBiYXJvcXVlIHRocm9uZQp5ZWxsb3cgbmF2eSB0ZWFsIGJsYWNrIGFuZCBnb2xkCmNocmlzIGZvc3MgCmRlbW9uaWMgcHJlc2VuY2UKdGhlIG1hZG5lc3Mgb2YgbW9uby15ZWxsb3cKaGFsb3MKaW50aW1pZGF0aW5nIGZ1bGwgYm9keSBhcm1vcgohZHJlYW0gbG9zIGFuZ2VsZXMKcmVtYnJhbmR0IGFuZCBnaWdhZMWNIGFzaGl5dWtpCmRlaXR5KQpkZXNrdG9wCmZlcmRpbmFuZCBrbmFiIGJhY2tncm91bmQKY3ViaWMgbWluZXJhbHMKY3ViaWMgY3J5c3RhbHMKd29uZGVyZnVsbHkgY29sb3JmdWwKbXV0YW50cwpwZXJmZWN0IGZhY2lhbCBkZXRhaWwKdmlzdWFsIGRldmVsb3BtZW50CmNvbG9yZnVsIG5lYnVsYXMKZmFjZSBzeW1tZXRyaWNhbApwcm90cmFpdApsYXJnZSBicmVhc3RzIHNpemUKdHJhbnNjZW5kYW5jZQpwaW50cmVyZXN0CnJveWFsIHBob3RvZ3JhcGh5CmEgZ2lnYW50aWMgd2FsbApiaWdnZXIgdGhhbiB0aGUgc2l6ZSBvZiBhIHBsYW5ldAphcnRnZXJtJwpwaG90b3JlYWxpc3RpYyAzNW1tJwooIGdlYXJzIG9mIHdhciApCnRoZSBtb21lIHJhdGhzIG91dGdyYWJlCmRhcmsgY2FwZQpuZWNrIGNoYWlucwpib25lIHdpbmdzCmhkJycKZmx1ZmZ5JycKYXJyb3cKdmFsbGV5IGluIHRoZSBkaXN0YW5jZQptYWdlc3RpYwpibHVlIGxvbmcgaGFpcgppbiB0aGUgc3BhY2UKY2hhb3RpYyBhdG1vc3BoZXJlCnBhaW50IHN0eWxlCnZlbm9taXplZApiaWcgd2hpdGUgbW9vbiBiYWNrZ3JvdW5kCnZpY3RvcmlhbmEKZmFsbGluZyBoZWFydHMKYXVndXN0ZSB0b3VsbW91Y2hlCi4uIGlmIG9ubHkgaSBjb3VsZCBzbGVlcApyZWZyYWN0aW9uIGNhdXN0aWNzCmF0bW9zcGhlcmljIGNsb3VkcycKemlkbwond2hlcmV2ZXIgeW91IGdvCnN0eWxlIG9mIHRoZSBtYXRyaXgKMiBhcm1zCm1vbWVudG8gbW9yaQpzY3JhbWJsZXIKZmlyZWZpZ2h0aW5nIGdlYXIKYmxhY2sgY2F0IGF0IGhlciBmZWV0CndlYXJpbmcgYSB0YW5rdG9wIGFuZCBza2lydApwaG90byBvZiBoZWFkCmxvZ2FuJ3MgcnVuCiggKCAoICggKCB3YXJoYW1tZXIgNCAwIGsKKCAoICggKCAzIGQgcmVuZGVyICkgKSApICkKdmVudHJpY2xlcyBhbmQgYW9ydGEKc3RyYW5nZSBwbGFuZXQKYnJhc3MgZ29nZ2xlcwpkYW4gbXVuZm9yZApwaW5rIGdyYWRpZW50IGJhY2tncm91bmQKYWFyZG1hbgpsb3cgY2FtZXJhIHBvc2l0aW9uCiggKCBlbW1hIGxpbmRzdHJvbSApICkKKCAoIGdsaXRjaCBhcnQgcGl4ZWwgc29ydGluZyApICkKZmluZSBncmFpbiB0ZXh0dXJlCmNvbmZpZGVudCBzbWlyawpyaWNoIGRldGFpbGVkIHBpeGVscwooICggZGl0aGVyZWQgKSApCmJyYW5kIGlkZW50aXR5CmZsb2F0cyBpbiBzcGFjZQptb2Rlcm4gY29sb3IKcmVkIGJsdWUKZHluYW1pYyBjdXJ2ZXMKcG91cmluZyB0ZWNobmlxdWVzCiggYmVhciB3ZWFyaW5nIHN1bmdsYXNzZXMKc2hpbnkga25vYnMKbmF0dXJhbCBsaWdodCBpbiByb29tCmRyb25lIGNhbWVyYSBsZW5zIG9yYnMKZWxvbiBtdXNrIHBvcnRyYWl0CiggbGVvbmFyZG8gZGEgdmluY2kgKQpoaXAgaG9wIG11c2ljIGFsYnVtIGNvdmVyCiggcXVlZW4gY2hlc3MgcGllY2UKa2ltaSB0YWtlbXVyYQpmbG93c3RhdGVwYWludApncmVlbiBnb2xkCmRvdGEgMiBoZXJvCmR1c3QgYW5kIHJvY2sgdGhlbWUKcGhlbm9tZW5hbApjcmF6eSBleHByZXNzaW9uCmFyY2FuZSBzdHlsZSEhISEhCigodGhlIG1vbmEgbGlzYSkpCmdhbWUgbGV2ZWwKcGFyaGVsaW9uIGF0bW9zcGhlcmljIGhhbG9zCnZvbGNhbm8gZXhwbG9kaW5nCnN0cm9uZyBzaGFkb3dzKQooYSBib3dsIG9mIGZydWl0KSEhISEhISEhIQpwYWxwYXRpbmUKZnVyIGhkcgpiaXJ0aGRheSB3cmFwcGVkIHByZXNlbnRzCmNvbG9yZnVsIGRpZ2l0YWwgc2NyZWVucykgeGYgaXE0CnJvYWQgdHJpcApzemVrZWx5IGJlcnRhbGFuLiBhdG1vc3BoZXJpYwoqIGNvbG91ciBzcGxhc2ggKgptb3VudGFpbnMgYW5kIGEgaHVnZSBvbGQgY2l0eQppbiAzZApsaW9uIGZpc2gKb3JpZ2FtaSBzdHVkaW8gMyBkZXNpZ24Kd3cgMiBhbWVyaWNhbiBwcm9wb2dhbmRhIHBvc3Rlcgo5Z2FnCmdyb292aXZhbCBhZXN0aGV0aWMKbnZpZGlhIHJheXRyYWNpbmcKZmEgMSA4IGhvcm5ldCByZXBsaWNhCnVsdHJhIG1pbmltYWxpc3RpYwp3aGl0ZSBiaW9tZWNoYW5pY2FsZGV0YWlscwpsYXJnZSBjb3VjaApnbG93aW5nIHRlbXBsZSBpbiB0aGUgZGlzdGFuY2UKZGlnaXRhbCBlZmZlY3RzIGZhbnRhc3kKLSBnCndpdGggYSBzcGluZSBjcm93bgpkZWFubmEgdHJvaQpzdW5nbGFzc2VzIG9uCnR3aXN0ZWQgcmF5cwpvY3RhbmUgNGsKbGVvbiBiYXR0aXN0YSBhbGJlcnRpCmdpbG1vcmUgZ2lybHMgYWVzdGhldGljCm1pZGRsZSBvZiB0aGUgcGFnZQp0b2tpIHBvbmEKMyBwYW5lbCBhY3Rpb24gc2NlbmVzCnRodW5kZXJzdG9ybSBsaWdodG5pbmcKYnJpbGxpYW50IGRheWxpZ2h0CmZvdXIgaHVtYW5vaWQgYmVhcnMKcGVyZmVjdCBkeW5hbWljIGVudmlyb25tZW50CnBlcmZlY3QgZHluYW1pYyBib2R5IGZvcm0KbG9jYXRlZCBpbiBoYWppYmVrdGFzaCBjb21wbGV4Cm1hcmlvIHdvcmxkCnNoYXJwIGxvb2tpbmcgcG9ydHJhaXQKZGVlcCBibHVlIGxpZ2h0aW5nCjEgNyAtIHllYXIgLSBvbGQgYm95IHRoaW4gZmFjZQpkYXJrIGhhbGx3YXlzCnJvbWFuIHBpbGxhcnMKaGlnaCB2YW50YWdlIHBvaW50CnBlYXJseSBza3kKcnVubmluZyB0aHJvdWdoIGl0YWxpYW4gdG93bgpwc3ljaG9raW5ldGljIGdpcmwKbGFyZ2UgdHJlZQpzbGF0ZQpkYXJrIGFtYmllbnRzCm9yYW5nZSBodWUKY2FycmlhZ2VzIHdpdGggaG9yc2VzCmRvdCBhcnQgb24gcGFwZXIKY3Jvd2Qgb2YgbG9uZ2hhaXJzCnVuaW9uIGphY2sKMSA5IDkgMiBsaXZlIGF0IGxvbGxhcGFsb296YQpoaSAtIHJlcyBzY2FuCmJ1c2luZXNzIGNhcmQKaG9sZGluZyB1bWJyZWxsYQphdXRob3JpdGF0aXZlIHBvc2UKMSA5IDQgMCBzIHN0cmVldCBzY2VuZQpsZWF0aGVyeQpkcml2aW5nIHRocm91Z2ggYSAxIDkgNSAwIHMgdG93bgpmb3JyZXN0IGluIGJhY2tncm91bmQKY29taW5nIHRvIGxpZmUKdmVyeSBkZXRhaWxlZCBpbnRyaWNhdGUgaW50YWdsaW8KYmlnIGdsYXNzIGV5ZXMKaGlzIGV5ZXMgYXJlIGJsZWVkaW5nIGludGVuc2UKMSA5IDYgMCBzIHBlcmZ1bWUgYm90dGxlIGFkcwp0diBzdHVkaW8Kbml4aWUgdHViZXMKaGlwcGllIHBhZApoaXBwaWUgY2hpYwpiZWFkZWQgY3VydGFpbnMKb3RoZXIgbW90aGVyCjEgOSA3IDAgcyBqYXBhbmVzZSB0diBzaG93CmhlYXZ5IG1ldGFsIGFydCBzdHlsZQpob3Jyb3IgZmlsbSBwb3N0ZXIKY2VsbCBwaG9uZXMKY29vbCBtYXJrZXRpbmcgcGhvdG8Kam95dG95CnRyb3BpY2FsIHNldHRpbmcKbWFydmVsIDggMCBzIHN0eWxlCmluIGEgc3BhY2UgY2FkZXQgb3V0Zml0CmRvcwpmYWNpbmcgbGVmdAoxIDkgOCAwJ3MgbW92aWUgcG9zdGVyCmluY2Vuc2Ugc21va2UgZmlsbHMgdGhlIGFpcgppbiB0aGUgY292ZXIgb2YgdGltZSBtYWdhemluZQoxIDkgOCA0IGV0aGlvcGlhbiBmYW1pbmUKd2F0ZXJtZWxvbmNvcmUKaGVyb2ljIGh1bWFuIHByb3BvcnRpb25zCmVwaWMgdmlicmFudApoZWFkcyBvZiB3b29kZW4gb2YgYmlyZCBmYWNlCnZocyBzdHlsZQoxIDkgOSAwJ3Mgd3dlIHB1YmxpY2l0eSBwaG90bwptb2RpZmllZAptYXhpbWFsc20KdWx0cmEgZGV0YWlsZAptaWtrbwpwdWIgc2lnbgpldmVuaW5nIHN1bgp0ZWNobm9sb2d5IGRlc2lnbgpiYXJjb2RlCmphcGFuZXNlIDEgOSA4IDAncyBhbGJ1bSBjb3ZlcgpvbmUgY29udHJhc3Rpbmcgc21hbGwgZmVhdHVyZQpyZXNlbWJsaW5nIGEgbWl4IG9mIGdyaW1lcwppbiBhIHN0eWxlIGJsZW5kIG9mIGJvdHRpY2VsbGkKc2NhbGUgbW9kZWwgcGhvdG9ncmFwaHkKd293IGkgYW0gYXJ0aXN0IG5vdwp5YXN1aGlrbyB5b3NoaWthenUKMTk4NyB2aWRlbyBnYW1lIGJveGFydAp3ZWFyaW5nIHdpdGNoYmxhZGUgYXJtb3IKMTIKMTJ0aCBjZW50dXJ5IGFwb3RoZWNhcnkgc2hvcApvcmJpdGluZyBhIGdhcyBnaWFudAoxNzg5CnZpbnRhZ2UgZ2xhc3MgcGxhdGUgcGhvdG9ncmFwaApiZWF1dGlmdWxseSBkaXN0dXJiaW5nCjE4MDBzIHBob3RvIG9mIGEgZGVmb3JtZWQKd2hpdGUtaGFpcmVkCmFuIDgwIHllYXIgb2xkIG1hbgpkZXZvdXJpbmcgdGhlIGh1bWFuIHNvdWwKMTg2MgpsaXRob2dyYXBoaWMgcHJpbnQKbG9va2luZyBvdXQgb3BlbiB3aW5kb3cKc3RvbmVyIG1ldGFsIGNvbmNlcnQKaGVhdnkgYmx1ZXMgcm9jawpzaW5naW5nIGludG8gbWljcm9waG9uZQpsZWF0aGVyIGphY2tldCBhbmQgZGVuaW0gamVhbnMKc3VwZXIgOG1tIGZpbG0KbG9uZyBzaGFnZ3kgcmVkIGhhaXIKYWx0ZXJuYXRpdmUgbWV0YWwKMTk5OSBwaG90b2dyYXBoCmdyZWF0IGJyaXRhaW4KMTZtbSBwaG90b2dyYXBoeQo4bW0gcGhvdG9ncmFwaHkKaW5zaWRlIGEgYmFybgpkeXN0b3BpYW4gcmV0cm8gMTkyMHMgdmliZQp2ZXJ5IGRldGFpbGVkIHN0dW5uaW5nIGRlZXAgZXllcwpwcm9wb3J0aW9uYXRlIGZhY2UKYnJvbWVsaWFkcwpzdXBlcmhlcm8gcG9ydHJhaXQKdGFjaGlrb21hCjE5NTBzIGtvcmVhbiBmaWxtIG5vaXIKbWluaWF0dXJlIHdvcmxkCjE5NTBzIHJldHJvIGNhY3R1cyByb2JvdAoxOTU3IGNoZXZyb2xldCBiZWwgYWlyCmxpbmRhIHdpbGRlcgpmYWNlIG9ic2N1cmVkCmRlIHRvbWFzbwoxOTY4IHBzeWNoZWRlbGljCm5lb24gcm9tYW4KZ3Q0MCBhbmQgY291bnRhY2gKZGFndWVycmVvdHlwZSBwaG90bwpjaXJjdWxhciB3aW5kb3dzCmZsYXNoIGVuYWJsZWQKaGVyIGZyaWVuZAplYXJ0aCB0b25lcyBhbmQgc29mdCBjb2xvciAxOTc2CndvbWFuIGxvb2tzIGxpa2UgZ2lsZGEgcmFkbmVyCjE5NzYgbWFnYXppbmUgY292ZXIKYmFuayByb2JiZXJ5IG1vdmllCjE5Nzkgb21uaSBtYWdhemluZQpjZWwgc2hhZGVkOjE1Cm1vcm5pbmcgaG91ciBvbiBqdXBpdGVyCjNkIG1hZ2ljYWwgZGV0YWlscwp1bnJlYWwgZGV0YWlsCjE5ODBzIGFyY2FkZQphY3Rpb24gc2NlbmUgZnJvbSB0aGUgZmlsbQpwbGVhc2luZyBmYWNlCnJvbWFuIGVtcGlyZQplYXJ0aCB0b25lcyBhbmQgc29mdCBjb2xvciAxOTgxCnVuc2FuaXRhcnkKc2FrdWdhIG1hZCBndW5wbGF5CvCflbnvuI8g8J+YjiDwn5SrIPCfpJYg8J+arApkZWVwIHNlYSBjcmVhdHVyZXMKMTk5MCdzIHNlYXJzIHBvcnRyYWl0IHBob3RvCjM1bW0gZmlsbSBsb29rCmNhdHMgcGxheWluZyBjaGVzcwpraWRzIHRhbGtpbmcgdG8gZnJ1aXQgcGVvcGxlCmZhbWlsaWVzIHBsYXlpbmcKd2l0Y2hjb3JlCmZseWluZyBzb2NjZXIgYmFsbHMKYnVzaW5lc3MgbWVuCmZpcmUgZmlnaHQKZnJlZS1maXJlCmM0CjE5OTIgdmlkZW8gZ2FtZSBjb25jZXB0IGFydApzZXQgaW4gY3liZXJwdW5rIGJhbmsgdmF1bHQKOjE0IDgwcyBhbmltZSBzdHlsZQpnaG9zdCBpbiB0aGUgc2hlbGwgYnVsbGV0IHZmeApiaXphcnJlIGFsaWVuIGNyZWF0dXJlCmdvbGQgYW5kIHNpbHZlcgoxOXRoIGNlbnR1cnkgd29vZC1lbmdyYXZpbmcKY2FydmVkIGludG8gdGhlIHNpZGUgb2YgYSB0cmVlCjE5dGggY2VudHVyeSB3b29kY3V0CnkgMiBrIGZhc2hpb24KcHVuayBnaXJsCmFyaWQgbW91bnRhaW5zIGFuZCBwYWxtIGZvcmVzdAoyIDAgMSAwCjIgMCAxIDIgd2F0ZXJtZWxvbiBkaW5lcgptb25zdGVyIGFzaG9yZQp0cnlpbmcgdG8gZXNjYXBlCjIgMCAyIDIgcGhvdG8KYmFkYXNzIGJhdG1vYmlsZSBjYXIgZGVzaWduCnJlYm9vdAp0eXBpY2FsIHJ1c3NpYW4gYXRtb3NwaGVyZQpsYXJnZSBjbG91ZHMKcmV0cm8gZnV0dXJpc3QKdmVjdG9yIHRlY2huaWNhbCBkb2N1bWVudHMKdHJhbnNwYXJlbnQgZ2xhc3NlcwpjbG9zZSB1cCBjYW1lcmEgb24gYm9uZmlyZSBsZXZlbApuZWNrIHpvb21lZCBpbiBmcm9tIGxpcHMgZG93bgonMCAwIHMgbm9zdGFsZ2lhCjIgNSB0aCBhbm5pdmVyc2FyeSBtdXNpYyB2aWRlbwpzaXR0aW5nIG9uIGEgYmVkCnBldGVyIGRyaWJlbgpibGFjayByZXNpbgphcm5leSBmcmV5YWcKaW4gdG9reW8gYXQgbmlnaHQKc3dhdCBoZWxtZXQKd2l0aCBnbG93IG9uIHNvbWUgb2YgaXRzIHBhcnRzCmdhbWUgZGVzaWduIGFzc2V0IHBhY2sKMiBkIGF4b25vbWV0cmljIG92ZXJoZWFkIHZpZXcKNCBrISEhCjIgZCBmcm9tIGdvcmlsbGF6CnBoYXNlIDIKZGVtb24gZGF5cwpwcmVzcyBzaG90CjIgZCBsb2dvCjIgZCBwbGF0Zm9ybWVyCmRpYW1vbmQgcHJpc21zCmJsYWNrIGZpbmUgbGluZXMKb3BhbGVzY2VuY2UKc29hcCBidWJibGVzCmltbWFjdWxhdGVseSBkZXRhaWxlZAphdG1vc3BoZXJlIGh5cGVycmVhbGlzdGljCjIgbXVzY3VsYXIgYXR0cmFjdGl2ZSBtZW4KOGJpdHMgdmlkZW9nYW1lCm5lb24gbW90aW9uCnVsdHJhZGV0YWlsbGVkCnB1cnBsZSBsaWdodHMK0YTQvtGC0L4g0LTQtdCy0YPRiNC60LAg0LrRg9GA0LjRggpiaWJsaWNhbCBjbG90aGluZwpib2tlaCBvbiBzaWRlIG9mIHRoZSByaXZlcgpkYXJrIHNoYWRlcwoyMDAxIGEgc3BhY2Ugb2R5c3NleQp0YWN0aWNhbCBzcXVhZHMgOjE5CmFydCBsZW5zCmZ1dHVyaXN0aWMgc3BhY2UgcG9ydApjYWQKMmIgZnJvbSBuaWVyIGF1dG9tYXRhCnNpbXBsaWZpZWQgc2hhcGVzCmNvcnJ1cHRlZCBkYXRhCjJkLzNkIG1hc2h1cCBwb3N0ZXIgZGVzaWduCmdoaWJsaSBzdHVkaW8gYXJ0CmJsYWNrIGNhdHMKaW50cmljYXRlIG9jdGFuZQpsb3dyZXMKMmQgdmVjdG9yIGFydApzaWx2ZXIgYW5kIGdvbGQKaW1heCAyIDAgbW0gYW5hbW9ycGhpYyBsZW5zCmFydGdlcm0gYW5kIGFuZCBncmVnIHJ1dGtvd3NraQpyZWQgaW50cmljYXRlIGxvbmcgYnJhaWRzCmxvbmcgZGFyayByZWQgaGFpcgptb2Rlcm4gY2l0eSBiYWNrZ3JvdW5kCnBob3RvIG9mCnVzYiBwb3J0cwpkaXJ0eSBtZXRhbApsaW5nZXJpZXMgYmVhdXR5CjMgMCAwIDAgKCBkci4gam9obiBhLiB6b2lkYmVyZyApCmluIGEgYmFyb3F1ZSBtdXNldW0gZXhoaWJpdAptb3JlCjMgMApiYXJhCmJsYWRlIHJ1bm5lciAxIDkgOCAyIGNpdHkKaXRhbGlhbiBsb29raW5nIGVtbWEKdmljdG9yaWFuIGhvdXNlCmNlbGVzdGlhbCByZWQgZmxvd2VycyB2aWJlCmJyb2tlbiBwYW5lcyBvZiBnbGFzcwpvZiBtYWQgbWVuIG9uIG1hZGlzb24gYXZlbnVlCnBob3RvIGZpbmlzaApvdmVyIGV4cG9zdXJlCmRyaW5raW5nIGNoYW1wYWduZQpuZXcgZ3VpbmVhIG11ZCBtYW4KcG9zaW5nIGZvciBwbGF5Ym95IHBob3Rvc2hvb3QKZnV0dXJpc20hISEhIQpnb29kIC0gbG9va2luZwpmdXR1cmlzdGljIGxpZ2h0aW5nCnBldGFscyBmYWxsaW5nIGV2ZXJ5d2hlcmUKcGFzdGVsIHZpdmlkIHRyaWFkIGNvbG9ycwphZXN0ZXRpYwpwcm9jcmVhdGUgaWxsdXN0cmF0aW9uCndpdGggdmVzdGlnZXMgb2YgcnVzdHkgbWFjaGluZXJ5Cmx1Z3VicmlvdXMKY29uaWZlcm91cyBmb3Jlc3QKamFwYW5lc2Ugd29vZCBjdXQKbmlrYSBtYWlzdXJhZHplCmZsb3dpbmcgbWFzc2l2ZSBoYWlyCmNyYW5lCm5laWwgYmxldmluCmVwaWMuIG9jdGFuZSByZW5kZXIKYXJ0IG5vdmVhdWFuZCBhcnQgZGVjbwpiaW8gLSBsdW1pbmVzY2VudApyZWZsZWN0aXZlIGNoaXRpbgpwaG9lbml4IGplbGx5ZmlzaApjcmFwIGZpc2gKY3ltYXRpY3MuIGF1ZGl0b3J5IHN5bWJpb2dlbmVzaXMKc3luYWVzdGhlc2lhCjMgZCBnb2RkZXNzIHBvcnRyYWl0Cmd1bnNoaXAKYXJ0IG9mIGthdHN1aGlybyBvdG9tbwphcnQgb2YgYWtpcmEgdG9yaXlhbWEKZGVjYWRlbmNlCndlYXJpbmcgZ290aGljIGFjY2Vzc29yaWVzCnZpbnRhZ2UgZ290aGljIGdvd24KY2VudGVyZWQgaHlwZXJyZWFsaXN0aWMKb3JhbmdlIGFuZCBibHVlIGNvbG9ycwpkaXNjbyBlbHlzaXVtIGNvbmNlcHQgYXJ0CmRhcmsgbGlnaHRpbmcgYW5kIGhlYXZ5IGZvZwozIGQgbW92aWUgc3RpbGwKYmlyZHMgZiBjZ3NvY2lldHkKZGV0YWlsZWQgY2hhcmNvYWwgZHJhd2luZwp0aWUgZmlnaHRlcnMgcGF0cm9sbGluZwpzaXR0aW5nIGluIGEgY2VtZXRlcnkgYXQgbmlnaHQKZGFyayBsb3JkCjMgZCBwcmVjaW91cyBtb21lbnRzIHBsdXNoIGNhdApyZWZsZWN0IHBob3RvZ3JhcGgKc2t5cmltIGdhbWVwbGF5CmRhcmsgYXRtb3Nob3BlcmUKdmlkZW8gLSBnYW1lCnhib3ggMyA2IDAKZnJhY3RhbCBzYWNyZWQgZ2VvbWV0cnkKYWJzb2x1dGVseSBub3RoaW5nCndlYXJpbmcgZml0bmVzcyBnZWFyCmRlYWQgb3IgYWxpdmUgNgpydW1ibGUgcm9zZXMKY2hpc2VsZWQgYWJzCnRoaWNrIGxlZ3MKZnJvbSBlZ28gcGVyc3BlY3RpdmUKa2FtZW4gYW5ldgozIGQgcmVuZGVyIG9mIGEgc2NpZmkgc3BhY2Vwb3J0CmR5bmFtaWMgbW90aW9uCmdhcnRlciBiZWx0Cmplcm1hIGluIGEgbGltaW5hbCBzcGFjZQp0YW1ib3JpbmUKc2FsdCBzaGFrZXIKaGFwcHkgZnJpZW5kCmJsZW5kZXIgbW9kZWwKcGFydGljbGVzIGRpc2ludGVncmF0aW9uCndhdGVyZmFscwp2aWN0b3JpYW4gY2FzdGxlCmFuY2llbnQgYW50bGVyIGRlaXR5CmJyaWdodGx5IGxpdCByb29tCnJhZ25hcm9rIG9ubGluZQozIGQgc2N1bHB0CmJsb25kIGZ1cgpzbm93eSBjcmFnZ3kgc2hhcnAgbW91bnRhaW5zCmxlYWtpbmcKc2NhbGVzIGNvdmVyaW5nIGhlciBjaGVzdApsYXJnZSB0YWxsCnNwYWNlIG9keXNzZXkKb2N0YW5lIHJlbmRlciBoeXBlcnJlYWxpc3RpYwp5ZWxsb3dpc2ggbGlnaHQKY2F1c3RpYyBwcm9qZWN0aW9uCmZvZyBvZiB3YXIKdXYgbWFwCmFjY3VyYXRlIHdhbGsgY3ljbGUKYWtpcmEgbW90b3JjeWNsZQpjcnlpbmcgZmFzaGlvbiBtb2RlbApjb25jZXB0IGFydCBhcnR3b3JrIG1hc3RlcnBpZWNlCnNtYWxsIHJlZCByb3NlcwpsaWdodCByZWQgYW5kIG9yYW5nZSBtb29kCjMgamF6eiBtdXNpY2lhbnMKbmlnaHQgYW5kIGJyaWdodCBzdW4KMyBzaXN0ZXJzIGxvb2sgaW50byB0aGUgbWlycm9yCmNpbmVhc3RpYwpzdWJ0bGUgbXVsdGljb2xvcmVkIGxpZ2h0CmxvbmcgbXV6emxlCmRvZyBoZWFkCmxpa2UgYXJ0Z2VybQpjYXB0dXJlZCB3aXRoIHNvbnkgYTMgY2FtZXJhCnNpdHRpbmcgYXQgYSBjb21wdXRlcgpoeXBlciByZWFsaXN0aWMgcGhvdG9yZWFsaXN0aWMKMzAwbW0gdGVsZXBob3RvIGJva2VoCnVucmVhbCBlbmdpbmUgNSAtIHcgMTAyNApuZXVyYWwgbmV0d29ya3MKYmxhZGUgcnVubmVyIDE5ODIgY2l0eQpoYXJkIHJhaW4gZmFsbGluZwppbGxlZ2FsIHJhdmUKY3V0ZSBzaWxseSBmYWNlCnNjdWJhIGRpdmluZwpjb2xvciBwYWxldHRlIG9mIGdvbGQKY2luZW1hdGljIHBob3RvIHNob290CnByb2Zlc3Npb25hbCBncmFmbGV4IHBob3RvZ3JhcGgKZmxhdCB2ZWN0b3IgYXJ0IGJhY2tncm91bmQKaW50cmljYXRlIGFydCBkZWNvIHBhdHRlcm5zCmN1cmx5IGJyb3duIGhhaXIKaG9sZGluZyBhIGJsYWNrIGthdGFuYQozZCBraWQgcm9ib3QKYmxvb2R5IHNjZW5lCmFic3RyYWN0aW9uaXNtCjNkIGJsZW5kZXIgcmVuZGVyCmdhbWUgZW5naW5lIGxpZ2h0aW5nCm1lZ2EtYmVhdXRpZnVsIHBlbmNpbCBzaGFkb3dpbmcKdHdpbGlnaHQgem9uZSBiYWNrZ3JvdW5kCm1lY2ggbWFjaGluZXMgZmlyaW5nIGJ1bGxldHMKemVuIG1lZGl0YXRpb24Kbm8gdGV4dHVyZXMKd2VhcmluZyBhIGJhc2ViYWxsIGNhcCBiYWNrd2FyZHMKaGFsZiBsZW5ndGggc2hvdApiZWF1dGlmdWwgbXVzY3VsYXIgYm9keQpjbGVhciBjdXRlIGZhY2UKaGVhZC1hbmQtc2hvdWxkZXJzIHNob3QKc2hvY2t3YXZlcyBhcmUgY29taW5nIG91dApkZXRhaWxzIGZhY2VzCmJ2bGdhcmkKaGFpciBjb3ZlcmluZyBleWVzCnRoaWNjIGJ1aWxkCndpdGggbGlnaHRuaW5nCmJhY2tncm91bmQgbmF0dXJhbCBmbG93ZXIKY3lib3JnIHdhc3AKcXVlZW4gb2YgbmF0dXJlCnRoZSBwYWxtcyBjb21lIGZyb20gdGhlIGRlcHRocwpob2xkaW5nIHBpc3RvbApzdGVlcmluZyB3aGVlbAphcnQgc3R5bGUgb2YgcnVuZSBmYWN0b3J5IDUKZWxzb24gcGV0ZXIKM2QgZnJhY3RhbCBiYWNrZ3JvdW5kCmdlb21ldHJpY2FsIGZpZ3VyZXMKY29tcGxldGVseSBmaWxsZWQgc3BhY2UKcHN5Y2hlZGVsaWMhISEhISEhISEhISEhISEhISEhISEKM2QgbWFuZGVsYnVsYiBmcmFjdGFsCmxvb2tpbmcgcGFydGx5IHRvIHRoZSBsZWZ0CmJsdWUgc2hpbmluZyBleWVzCm1pcnJvciB0ZXh0dXJlCmJ1dHRlcmN1cHMKaHlwZXIgcmVhbGlzdGljIDNkCjUwIHNoYWRlcwozZCByZW5kZXIgb2YgY2F0d29tYW4KM2QgcmVuZGVyIG9mIGEgYmx1ZSBleWVzCm1vZGVybmlzdGljCnRoaW4gbW91c3RhY2hlCjRrIGh5cGVyIHJlYWxpc3RpYwpyb2JiIHN0YXJrCmJlZXIgYmVpbmcgZHJhbmsgYW5kIHNwaWxsZWQKbXVzaWMgYmVpbmcgcGxheWVkCnllbGxvdyBiYWNrZHJvcApubyBhcm1zCmdyZWVuIGxpbmVzCmFuZ2tvcgpjYW1ib2RpYQppc29tZXRyaWMgdm94ZWwgYXJ0CmN5YmVyIHVuaXZlcnNlIHN0eWxlCmJldXRpZnVsCmNsaW1iaW5nIG1vdW50YWluIGluIHdhc2hpbmd0b24KZWF0cyBwYXN0YSBhbGwgdGhlIHRpbWUKZnJhY3RhbCB3YXZlIGludGVyZmVyZW5jZQplbGYga25pZ2h0CnlvdW5nIGhhbGYgZWxmIHdpemFyZAp0aWVmbGluZyBmZW1hbGUgd2FybG9jawpkICYgZCBwYXJ0eQppbiByZWQgZGVhZCByZWRlbXB0aW9uIDIKcmFpbmluZyBkb2xsYXJzCmtpbGx6b25lCmJydXNoZWQKNCBrIHN0aWxsIGZyb20gYnJlYWtpbmcgYmFkCmJsYWNrIHZlaWwKc2l0dGluZyBvbiBhIGdvbGRlbiB0aHJvbmUKcGhvdG9ncmFwaCBvZiBhIHJlZCBraXRlIGJpcmQKY3Jvc3MgY29tcG9zaXRpb24KYXJjaGluZyBtaWxreXdheQo4ayBvY3RhbmUgcmVuZGVyIHVoZAptaWxreXdheSBsaWdodApkZXRhaWxlZCByZW5kZXJpbmdzCjQyMApqYWtlIHBhcmtlcgpjb3cgaG9vZiBmZWV0CmludHJpbmNhdGVkCndlYnNpdGUgc2NyZWVuc2hvdApydSBwYXVsJ3MgZHJhZyByYWNlCnBpbmsgNyBpbmNoIGhpZ2ggaGVlbHMKY2FyZGkgYgo0ayBzb2xhcnB1bmsgd2FsbHBhcGVyCmRqZWxsZWJhCnN1cnJlYWwgc2NlbmUKNSAwIG1tIDEgOSA0IDYgaGlzdG9yaWNhbCBwaG90bwpzdG9ybSBvbiBob3Jpem9uCndlYXJpbmcgYmxhY2sKbmF0dXJhbCBtZWRpYQpzdHVkaW8gcGhvdG9ncmFwaGljIHBvcnRyYWl0CnNpbXVsYXRlZCBzcGFjZSBjb21iYXQKY3JlYXRpbmcgYSB0aGluIG1vbm9saXRoCnNpbHZlciBzbWFsbCBzbWFsbCBzbWFsbCBnbGFzc2VzCnJvdW5kIGNpcmNsZSBmYWNlCnRoaWNrIG5lY2sKcm91bmQgamF3bGluZQpob2xkaW5nIGEgYm94ZXIgcHVwcHkKcmV0cm8gbGlnaHRzCmNvbG9yIHBob3RvcwpoZWF2eSBncmFpbiBoaWdoIHF1YWxpdHkKNjY2Cmhlcm9pYyBtYXNjdWxpbmUgcG9zZQp3ZWFyaW5nIHN0b3JtdHJvb3BlciBhcm1vciEhCmluIGEgZHlzdG9waWFuIGxhbmRzY2FwZQo3IHllYXIgb2xkIGNyYXlvbiBkcmF3aW5nCmRyYXdpbmcgNGsKcnVzaCBiYW5kCmFzdHJvbmF1dCB3aXRoIGEgY2hpbXBhbnplZQp0ZXh0dXJlZCBiYXNlIDsgcHJvZHVjdCBwaG90b3MKYmVha3MKbGFzZXIgZ3VuCjggMCBzIGFydApkcmlwcGluZyB3aXRoIGNvbG9yCjggNSBtbSBmIDEuIDggbGl0IGVkZ2VzCnpvb20gb24gYWxpZW4gZmFjZQppY2UhIGNyZWFtISB0cnVjayEKc2hlIGlzIGFib3V0IDIgNSB5ZWFycyBvbGQKdGhlIHNreSBoYXMgdGhlIG1pbGt5IHdheQppbGx1c3RyYXRpb24gc2hhcnAKa2VubmVyIHN0eWxlIGFjdGlvbiBmaWd1cmUKd2VhcmluZyBhIHRyZW5jaGNvYXQKb3JuYXRlIGZ1cm5pdHVyZQpvcm5hdGUgZnJlbmNoIGFyY2hpdGVjdHVyZQpjcmFpZwpzdGlsZXR0b3MKcmF5IGZhd2tlcwpsb3JlbmEgYXZhcmV6CmVtaWwgZmVycmlzcwpwYXBhcmF6emkgc2hvdAplbmRhbmdlcmVkCnNvbWUgb2YgdGhlbSB1c2UgZ2FzIG1hc2tzCmRvZiBuYXJyb3cKYmVhdXRpZnVsIGdvZHJheXMKY2xlYW5pbmcgZnV0dXJlCmhpZ2hseSBkZXRhaWxlZCBmb3JtCmhpc3RvcmljYWwgcGhvdG9zIGNpcmNhIDEgOSA0IDcKOCBtbSBmaWxtCmZhY2luZyB0byBhdWRpZW5jZQpxdWVlbiBvZiB3YXJyaW9yCmlyb24gaGVsbWV0Cmxvbmcgd2hpdGUgY2xvYWsKcGluayB0aWdodCBtaW5pLXNraXJ0Cm9uIHRleHR1cmVkIGJhc2U7IHN0b3JlIHdlYnNpdGUKcG9kcwpwb2xpY2UgY2FwCmNsb3RoZWQgaW4gc3VtbWVyCmF3YXJkIHdpbm5pbmcgcGhvdG9ncmFwaCEKbGV2aXRhdGluZyBhYm92ZSB0aGUgZ3JvdW5kCnRvcCBndW4KZXQKZ29vbmllcwo4MHMgbm9zdGFsZ2lhCmNhbmRpZCBmbGFzaCBwaG90b2dyYXBoeQpkYWxsZTIKOGJpdCBnYW1lLiBjdXRlISBjNGQKaGlnaCB0ZXh0dXJlIGRldGFpbCkKaW4gdHJlbmNoZXMKc2hlIGhhcyB3aGl0ZSBleWVzISEhCjhrIG9jdGFuIHBob3RvCmNvenkgY2FuZGxlbGlnaHQKcm9sbGluZyBkaWNlCjkgLyAxIDEgYXR0YWNrcwpidWlsZGluZ3MgYW5kIHNtb2tlCmNyZWVweSBiYWNrZ3JvdW5kCjkgMCBzIGhpcCAtIGhvcCBmYXNoaW9uCnBvcnRhbCB0byBhbm90aGVyIHVuaXZlcnNlCmluIGNvY2twaXQKOTAncyBwaG90b3MKOTBzIGphcGFuCmJyaWdodCBmbHVvcmVzY2VudCBsaWdodHMKZm9yZXN0IG91dHNpZGUKZGF2aWQgc2Nod2ltbWVyIHNjcmVhbWluZwptYXR0aGV3IHBlcnJ5IGxhdWdoaW5nCndlYXRoZXJlZCBhcnRpZmFjdHMKc3R5bGUgb2YgcmFscGggc3RlYWRtYW4KZmxvd2luZyBibGFjayBoYWlyCmx1eHVyeSBmYXNoaW9uCm9sZCB3YXIgcG9zdGVyCjwgZnVsbCBib2R5IHJvYm90ID4KbWFueSBvcmlnYW1pIHJvc2VzCjxtbW9ycGdzIHNjZW5lCnZpZGVvIGdhbWUgc2NyZWVuc2hvdD4KPDNkIGVjbyBicnV0YWxpc3QKZXRlcm5hbHMKd2l0aCB0YXR0b29zCmRhcmsgY2xvdGhpbmcKdHdvIGlkZW50aWNhbCBzeW1tZXRyaWNhbCBleWVzCndoaXRlIHBhbGVkIHNraW4Kd2VzIGFuZGVyc29uKQpkcmVzc2VkIGluIGJsYWNrIGJvZHkgYXJtb3VyCm5vIHRlZXRoCmVsZiBwcmluY2VzcwpjaGFpcmxpZnRzCmluZHVzdHJpZXMKbWVkaWV2YWwgc3dvcmQKaGlnaC1zcGVlZCBzcG9ydHMgcGhvdG9ncmFwaHkKZGFuIG11bWZvcmQgYW5kIHRob21hcyBraW5rYWRlCnBob3RvIHBob3RvZ3JhcGgKbmlrb24gMzVtbQpwaW5rIGFuZCBibGFjawpmcm9tIGhhbGYtbGlmZQpoeXBlciBpbnRyaWNhdGUKYml0bWFwCm1pY2hhZWwgYmF5IG1vdmllCmZvcmVzdGVkIGJhY2tncm91bmQKZGVlcCBmcmllZAptdXNocm9vbSB0cmVlcwo0ayBtb3Jyb3dpbmQgY29uY2VwdCBhcnQKbGlnaHQgaGF6ZQppbiB0aGUgc3R5bGUgb2YgYW4gb2lsIHBhaW50aW5nCmJyZWF0aHRha2luZyBzaG90Cm91dGRvb3JzIGJ1c2luZXNzIHBvcnRyYWl0CnNrZXRjaCBibGFjayBhbmQgd2hpdGUgY29sb3JzCmd1aWxsb3RpbmUKaGlnaGx5IGZvY3VzZWQKbHVzaCB2ZWdldGF0aW9uIHdpdGggZmVybnMKYSB0dnIgc2FnYXJpcwptZWNoYW5pY2FsIGJpcmQKY2VudGVyIG9mIGltYWdlCjkwcyBmaWxtIHBob3RvCmRlcGljdGVkIGFzIGEgc2NpZmkgc2NlbmUKYmx1ZSBmbGFtZXMgc3Vycm91bmRpbmcKaGlnaCBxdWFpbHR5Cm92ZXIgdGhlIHNob3VsZGVyIHZpZXcKem9vbWVkIG91dCBmdWxsIGJvZHkKbGlnaHQgc2FiZXJzCmhvbGRpbmcgYSBib3cgYW5kIGFycm93CmEgbXlzdGljIHJpdmVyCmEgcG9ydHJhaXQgb2YgaXNzZXkgbWl5YWtlCmNvcnBvcmF0ZSBzdHlsZQphIHBvcnRyYWl0IG9mIHJpY2hhcmQgd2lrc3Ryw7ZtCmEgcHl0aG9uIHByb2dyYW1tZXIncyBkZXNwYWlyCjNkIHByb2R1Y3QKY29uY3JldGUgd2FsbHMKcm9nZXIgZGVha2luJ3MgY2luZW1hdG9ncmFwaHkKOCBrIG1hc3RlcnBpZWNlCnN1cmZhY2UgYmxlbWlzaGVzCmZ1bGwtZmlndXJlCnBhcnRpYWxseSBiYWxkCnNpeHRpZXMKY29yb25hdmlydXMgYXMgYSBzdHVmZmVkIHRveQp5b3NoaXRha2EgYW1hbm8gb2N0YW5lIHJlbmRlcgpzdG9uZSBhcnQKY2xlYW4gYmxhY2sgb3V0bGluZXMKc2tlbGV0b24gZmFjZSBzeW1tZXRyaWNhbCBmYWNlCndlYXJpbmcgYSB2ciBoZWFkc2V0CmFuZ2VyLiBoeXBlciBkZXRhaWxlZApsaWdodCBmaXh0dXJlcwphZ2FpbnN0IGEgc3Rvcm15IHNreQpjb3dib3kgYmVib3AgYW5pbWUgc3R5bGUKcGFsbGV0CmVwaWMuIGluIHN0eWxlIG9mIGdyZWcgcnV0a293c2tpCmNhbC1hcnRzCmEgYmVhdXRpZnVsIGJ1ZGRoaXN0IG1hbmRhbGEKdWx0cmEgcmVhbCA4ayBwaG90b2dyYXBoeQp2ZXJ5IHJvbWFudGljCndlYXJpbmcgZmFuY3kgY2xvdGhlcwpvbWlub3VzIGZpZ3VyZSBpbiB0aGUgYmFja2dyb3VuZAp0c3V0b21vIG5paGllCmludHJpY2F0ZSBsaW5lIGRyYXdpbmcKZGlnaXRhbGx5IHBhaW50ZWQKamFzb24gc2NoZWllcgpibHVlIGFkb3JuZW1lbnRzCmhhaXJ5IGFybXMKb3JhbmdlIGFuZCBicm93biBsZWF2ZXMgZm9yIGhhaXIKdXJiYW4gZmFudGFzeSBzdHlsZQpqYW5hcGVzZQpvbiBhIG1hbm5lcXVpbi4gaGlnaCByZXNvbHV0aW9uCmtpZXJuYW4gc2hpcGthCmJhbWJvbyBmb3Jlc3QgaW4gdGhlIGJhY2tncm91bmQKZnJvbSBtb3ZpZSBiYXRtYW4KYW1vbmcgZm94ZXMgYW5kIGRlZXIKc3R1bm5pbmcgaW1hZ2UKZ29sZGVuIGhvdXIgcGhvdG8KM2RlbGlnaHQKYXJ0IHN0dWR5IG9mIGEgYm9keQphbmRlcnNvbgp0b3duc2NhcGUKZHJhbWF0aWMgbW91bnRhaW5zIGluIGJhY2tncm91bmQKYnVzaGVzIG9mIGJsdWViZXJyeQpwYWxtIHRyZWVzIGphbWVzIGd1cm5leQpmcmFjdGFsIHRodW5kZXIgZGFuIG11bWZvcmQKY29taWMgYm9vazouMiB8IHVucmVhbCBlbmdpbmU6LjMKcmljaCB2aW5lcyBhbmQgdmVyZGFudCBmbG93ZXJzCnN5bWV0cmljYWwgY29tcG9zaXRpb24KYSBiZWF1dGlmdWwgbGFuZCBhcnQgb2YgYSBsYXJnZQphd2FyZC13aW5uaW5nIGFuaW1lIHN0eWxlCnNleHkgZ2F6ZQphbHZhcm8gc2l6YQp0aWx0LXNoaWZ0IGVmZmVjdApjaGFybGVzIHBlcnJ5CmdvbGQgZmxvcmFsIGhlYWRkcmVzcwpyb3R0aW5nIGNsYXkgc2tpbgpiZWF1dGlmdWwgZGVlcCBjb2xvcnMKYWxpZW4ganVuZ2xlIGZvcmVzdApydXJhbCBkeXN0b3BpYW4Kc3F1aXJyZWxzCmpvaGFubiBoZWlucmljaCBmw7xzc2xpCmNsb3VkIGFuZCB0aHVuZGVyCnJlc2luIGFydApyZXNpbiBwYWludGluZwpieSBlbW1hbnVlbCBsdWJlemtpCndhbmRlcmluZwphIGJlYXV0aWZ1bCBwYWludGluZwphIGJlYXV0aWZ1bCBwYXRod2F5IGluIGEgZm9yZXN0CmxvbmctcmFuZ2Ugc2hvdHMKZmFzaGlvbiB3ZWVrIGJhY2tzdGFnZQpmcm9udCBmYWNpbmchISEhCnVuaWZpZWQKc2VkdWN0aXZlIGV4cHJlc3Npb24Kc2hvdCBpbiAzNW1tCmF6dXJlIHdhdmVzIG9mIHdhdGVyCmxpZmVzdHlsZQpob2xkaW5nIGhlciB5b3Jrc2hpcmUgdGVycmllcgp0cmVuZGluZyBvbiBhcnN0YXRpb24gdy0gMTAyNApmcmF5ZWQgZWRnZXMuIGxpZ2h0IGxlYWtzCmEgYmVhdXRpZnVsIHdvbWFuIHdhcnJpb3IKYmVhdXRpZnVsIGh5cGVyZGV0YWlsZWQKd2VhcmluZyBhIGxvbmcgZmxvd3kgZmFicmljCmZ1bGwgYm9keSBwb3J0cmFpdCBwb3NpbmcKdHJ5aW5nIHRvIHN0dWR5CnNlZHVjaW5nIHRoZSBjYW1lcmEKdHJhbnNsdWNlbnQgb3ZlcnRvbmVzCmEgYmV1YXRpZnVsIG1hdHRlIHBhaW50aW5nCjI0bW0gdGlsdC1zaGlmdApncmVnIGhpbGRlYnJhbmR0IGhpZ2hseSBkZXRhaWxlZAp3b3JsZCBidWlsZGluZwpjZ2FydGlzdHMgdHJlbmRpbmcKaGFybW9uaXplZApjb2xvbmlhbCBzdHlsZQphcnQgbWFnYXppbmUKYSBibGFjayBkaWVzZWxwdW5rIHBvbGljZXdvbWFuCmJsdWUgb2NlYW4KaW4gYSB2b2xjYW5vCjRrIC00CmNhbG0gd2VhdGhlcgphIGJvb2sKZGV0YWlsZWQgaWxsdXN0cmF0aW9ucwprbm9iYmx5IGtuZWVzCmFjcm9ueW0gcDMxLWRzIHBhbnRzCm5lb24gc2lnbnMgaW4gYmFja2dyb3VuZAp3aXRob3V0IG1ha2V1cApyYWluaW5nIGJsb29kCmZsZXNoIGJ1aWxkaW5ncwpkYXJrIGNpdHlzY2FwZQptZXJjaGFudCBzdGFuZHMKNGsgaGQgYXdhcmQgd2lubmluZyBwaG90b2dyYXBoCmV4aGliaXRpb24gY2F0YWxvZ3VlCmJyb3duIHNraW5uZWQKaW4gYSBtYWpvciBtZXNvcG90YW1pYW4gY2l0eQphIGNhcgphcnRpZmFjdCBkb3RhMgpsZWljYSA4ayBzdGlsbCBmcm9tIGFuIGEyNCBmaWxtCm1hcmtldGluZyBnYW1lIGlsbHVzdHJhdGlvbgphIGNhdCBzaXBwaW5nIGNvZmZlZQphIGNhdCBzaXR0aW5nIGluIGEgY2hhaXIKYSBjYXQgc3dpbW1pbmcgaW4gd2F0ZXIKZmFudGFzeSBtYXR0ZSBwYWludGluZ++8jGN1dGUKd2VhcmluZyBhIGJlYW5pZQpzdHlsZSBvZiBjaGluZXNlIHZhc2UKM2QgZW52aXJvbm1lbnQKbHVzaCBuYXR1cmUKb24gcm9vZnRvcCB0b2t5byBuaWdodAppbnRyaWNhdGUgc3VpdApzY3JlYW1pbmcgYXQgdGhlIGNhbWVyYQptYW1tYXR1cyBjbG91ZHMKcm9vbSBsaWdodGluZwpzdHlsaXplZCBtYWtlLXVwIG9uIGZhY2UKY3liZXJwdW5rIHZpYmVzCmJyaWdodCBzb3VsZnVsIGV5ZXMKZiAxLjIKZnJvbSBtYXRyaXgoMTk5OSkKY29sZCBibHVlIGxpZ2h0IGZyb20gdGhlIHdpbmRvdwphIGNsb3duIGZsb2F0aW5nIGluIHNwYWNlCm5vYmlsaXR5CmRvdWppbgphIGNvbGxhZ2UKb2Ygc3BhY2UgdHJhdmVsCmNyaXNwIGxpZ2h0aW5nIGFuZCBlZGdlcwpzdW5saWdodCB0aHJvdWdoIGN1bXVsdXMKcmFjb29uIGRvZwpxdW9ra2EKaW4gYSBzcGFjZSBob3Jyb3Igc2V0dGluZwpmZWF0aGVycyBmbHlpbmcKcGF0ZW50IHN0eWxlCmF3YXJkLXdpbm5pbmcgcmVuZGVyCmFsbC1tZXRhbApmcm9udCBvcnRob2dyYXBoaWMKc2lsdmVyIGFybW9yIHdpdGggZ29sZCB0cmltCmEgY3JlYXR1cmUgNSBtZXRlcnMgdGFsbApyZWQgc3Rvcm15IHNreQpjaHJpc3RpYW4gY2xpbmUKaGFsZiBlbGVwaGFudApkYXJrIGFydCBzdHlsZQpjcmVlcHkgYW5kIGRyYW1hdGljIGF0bW9zcGhlcmUKb3B0aWNhbCBpbGx1c2lvbiBhcnQKZCZkIGZhbnRhc3kgc2V0dGluZwpoZSBpcyBjYXJyeWluZyBhIGJsYWNrIGJyaWVmY2FzZQpjbGlwLWFydAphIGN1dGUgZ2lhbnQgcGFuZGEKcmVhbGlzdGljLiBiZWF1dGlmdWwgbGlnaHRpbmcKbWFraW5nIGEgcG90aW9uCmEgY3V0ZSB5b3VuZyB3b21hbgpiZWFjaCBzZXR0aW5nIG1lZGl1bSBzaG90CnBpbmsgYW5kIGJsdWUgcGFsZXR0ZQpoYXJkIHNjaS1maQo4MHMgc2NpIGZpCmEgY3liZXJwdW5rIGNpdHlzY2FwZQpmaW5lIGRldGFpbHMuIHJlZAphdWJ1cm4gYW5kIGJsb25kZSB0d28gdG9uZWQgaGFpcgptZXp6b3RpbnQKdmVyeSBkcmFtYXRpYyBsaWdodGluZwp2aWJyYW50IGNvcmFscwpiZWF1dGlmdWwgZmFudGFzeSBwb3J0cmFpdApyZWRkaXNoIGxhdmEgaGlnaGxpZ2h0cwpjaGlsaQp2YW5pbGxhCnRlZW1pbmcgd2l0aCBsaWZlCmNvbG9yIDE5NzAKYW5pbWFsIHNrdWxsCnNtb290aCBub2lzZQpieSBzaGlyb3cgbWFzYW11bmUKdGVjaG5vY29yZQppbiBhbiBhbmltZSBzdHlsZQpjb250YW5pbmcgdGFibGVzIGFuZCB3YWxscwptZXNzeSBjdXJseSBwYXN0ZWwgaGFpcgp0cmVuZGluZyBvbiBhcnQtc2F0aW9uCnNhbnMKZmlyZSBkZW1vbgp2ZXJ0aWNhbCBhcmNoaXRlY3R1cmUKZnVsbCBvZiBsaWZlCnNhcHBoaXJlIGVhcnJpbmdzCmFtYXpvbgphbnJpIGNhcnRpZXIgYnJlc3Nvbgp3b3JsZCB3YXIgdGhyZWUKYmlnIHRlY2ggYXJ0IHN0eWxlCmdvcmdlb3VzIGFydApqYW4gZGF2aWRzeiBkZSBoZWVtCmhpZ2ggZGV0YWlsIC0gbiA0CmdyaW1tCmEgZHJhZ29uIG1hZGUgb2YgbWFjaGluZSBwYXJ0cwpjbG91ZCBpbiB0aGUgc2t5CmRvbWluYW5jZQpiYXJiYXJpYW5zCmppYSBydWFuCnBlcmZlY3QgcGVuIGFuZCBpbmsgbGluZSBhcnQKcC4gY3JhaWcgcnVzc2VsbApwZXNzaW1pc20Kb25lLWV5ZWQKcG9zaW5nIGFzIGEgam9qbyBjaGFyYWN0ZXIKcHJlY2lzZSB0ZXh0dXJlcwpleGFjdCB0ZXh0dXJlcwphY2N1cmF0ZSB0ZXh0dXJlcwo4ayBoZHIgaGlnaCBxdWFsaXR5IHF1YWxpdHkKYSBmYWNlCmRyYW1hdGljIGJydXNoc3Ryb2tlcwptZXRlb3JpdGUKZmFudGFzeSBtYWdpY2FsIHZlZ2V0YXRpb24Kc29tZSBsaWdodCBmb2cgYW5kIGZpcmVmbGllcwpibHVlIGFuZCByZWQgbGlnaHRpbmcKc2V2ZXJlZCBsaW1icwpmZW1zaGVwCmtyaXN0ZW4gc3Rld2FydApjb21pYyBib29rcwpkZXRhaWxlZCBjcmltc29uIG1vb24Kam9leSBraW5nCnNvcGhpYSBsb3Jlbgp1c2luZyBoaXMgZGVza3RvcCBwYwpnb2xkZW4gZGFwcGxlZCBsaWdodGluZwpvb25hIGNoYXBsaW4Ka2FpanUgY2VwaGFsb3BvZApsZXZpYXRoYW4gY3RodWxodSBzcXVpZApubyBza3kgc2NyYXBlcnMKamFtZXMgZGFseQp2ZXJ5IGNyb3dkZWQKdmlkZW8gZ2FtZSBkZXNpZ24KaXMgcGxheWluZyBhIGx1dGUKbm9ybWFuIHJvY2t3ZWxsIG9pbCBwYWludGluZwpvdmVuCjgwawp0aWx0ZWQgMzXCsCBmcmFtZQphIGZpcmV0cnVjayBhdCBuaWdodAp3ZXQgcmVmbGVjdGl2ZSBjb25jcmV0ZQphIGZpc2ggY2xpbWJpbmcgYSB0cmVlCnNhaWxpbmcgc2hpcHMKYSBmbGFtaW5nIGZvcmVzdCBvZiB0cmVlcwpvdmVyZ3Jvd24gd2l0aCB3ZWVkcwptYW55IGxhcmdlIGZseWluZyBtb25zdGVyIGV5ZXMKcG9ydGhvbGVzCmFsbCBncm93aW5nIGluc2lkZSBhbiBlbm9ybW91cwpncmFpbnkgZmlsbSBwaG90b2dyYXBoeQpwaG90b3JlYWxpc3RpYyAzZCBhcnR3b3JrCmhlIGhhcyBhIGdsb3cgY29taW5nIGZyb20gaGltCmpveW91cyB0cnVtcGV0cwpoaWdoIHF1YWxpdHkgY2FydG9vbgpsb29raW5nIGRlZmlhbnRseSBhdCB0aGUgY2FtZXJhCmEgZnVsbC1jb2xvciBhaXJicnVzaGVkCmFuY2llbnQgdGVjaG5vbG9neQpwZWFjZWZ1bCBsYW5kc2NhcGUKaGlnaGx5LWRldGFpbGVkIGlsbHVzdHJhdGlvbgoxNm1tIGZpbG0KNGsgbXVzZXVtIHBob3RvZ3JhcGgKZ29sZGVuIGhvdXIgbG9vawp0cmVuZGluZyBkaWdpdGFsIGZhbnRhc3kgYXJ0CmdhcyBmaXJlIGluIGNyYWNrcwo0ayBkZXRhaWxlZCBkaWdpdGFsIGFydApzcGxhc2ggc2NyZWVuIGFydAp2aWV3IGZyb20gaGlnaAp3YXZlcyBhbmQgc3BsYXNoZXMKc2lsdmVyIGV5ZXMKaHVnZSBoaWdobHkgZGV0YWlsZWQgd2luZ3MKYSBnb2JsaW4gcGlyYXRlCmltbWFjdWxhdGUgYW5kIGVwaWMgc2NhbGUKZ3VzdGF2ZSBkb3LDqSBzdHlsZQpzaXR0aW5nIG9uIGEgcGlsZSBvZiBnb2xkIGNvaW5zCnNoZWVwIGdyYXppbmcKbmF0dXJhbCBleWVzCnN1cnJlYWxpc3RpYyBiaXJkCmRhZ3VlcnJlb3R5cGUgcG9ydHJhaXQKaGlnaCBjb21wbGV4aXR5CmF0bHVzCmJpZyByb29tCmRpcnR5IGFuZCBzd2VhdHkKYSBncm91cCBvZiBwZW9wbGUKc2Fsb29uCmVuaGFuY2UKaGFuZHNvbWUgYW5pbWUgcG9zZQpjdXRlIGVtbyBndXkKYSBoYXBweSBtZWFsIHRveSBvZiBoYXRzdW5lIG1pa3UKcmVkIG5lYnVsYQpiYXN0aW9uCnJvYgpyYW1ibGluZwpwcmlzdGluZSByaXBwbGluZyBvY2VhbmljIHdhdmVzCnJ1YmJsZSBldmVyeXdoZXJlCnNsdXRjb3JlCnR3byBzd29yZHMKcmlwcGxpbmcgb2NlYW5pYyB3YXZlcwpoaWdoIGRldGFpbGVkIHRoaW4gc3RhbGFndGl0ZXMKZmlyZSBzbW9rZSBhbmQgZXhwbG9zaW9ucwp3aXRoIHNtb2tlCndlYXJpbmcgYmxhY2sgZ2xhc3NlcwpyZWFsaXN0aWMgc21va2UKaW4gc3BhbmRleCBzdWl0CmhkIHBob3RvcmVhbGlzdGljIGltYWdlCm9zc3VhcnkKY29sb3Igc2NyZWVucHJpbnQKYWxmb25zCm5vbi1ldWNsaWRlYW4gZ2VvbWV0cnkKaGFzc2VsYmxhZCBkc2xyCjE2MDAgaXNvCnRyYXZlbGxlciBycGcKYSBodW1hbm9pZCB0aGlzdGxlIG1vbnN0ZXIKc21pbGluZyBtYXNrCjhrIHBob3RvcmVhbGlzbQptYXJ0aWFuIHNhbmRzIGJhY2tncm91bmQKdGhlIHNpbmdlcgp0YWtlbiB3aXRoIGEgY2Fub24gZW9zIDVkCmYxMTo2CmxvdHMgb2Ygb2FrIGFuZCBvbGl2ZSB0cmVlcwpjaHVybmluZwpoYWt1c2Vuc2hhCmJlYXV0aWZ1bCBnYWxheHkKamV3ZWwgdG9uZXMKYW5hbG9ndWUgaG9ycm9yCjM1bW0gZmlsbSEhISEhISEhCnJ1Z2dlZCBiZWFyZAphIGxhYmVsZWQKd2F0ZXIgdHlwZQpiZWF1dGlmdWwgY2xvdWR5IHNreQp0aHJ1c3RlcnMKYmVlcGxlIGFuZCBqZXJlbWlhaCBrZXRuZXIKbWFyaXRpbWUKd2FybSBjb2xvdXIgcGFsZXR0ZQpkdXN0IGZsb2F0cyBpbiB0aGUgYWlyCnN0cm9uZyBsaW5ld29yawp3YXJyaW9yIGNhdHMgYm9vayBzZXJpZXMKY29tbWVyY2lhbCBpbGx1c3RyYXRpb24KYmVzdCBsb2dvCmdyZWcgcnV0a293c2tpIGFuZCBhbGV4IHJvc3MKZGVzY2VudCBpbnRvIG1hZG5lc3MKdWx0cmEtaGlnaCBkZXRhaWwKYSBsb25nIHNob3QKZXRoZXJldW0KZm9yZXN0IG1hZGUgb3V0IG9mIG11c2hyb29tCjg1bW0gcGhvdG9ncmFwaHkKaHlwZXIgcmVhbGlzdGljIHNoYWRlZCB0YXR0b28KcmVtYnJhbmx0CndlYXJpbmcgYSByZWQgY2FwZQpoaXMgcGFsbXMgYXJlIHN3ZWF0eQpidXNpbmVzcyBhdHRpcmUKZXhwcmVzc2l2ZSBjb2xvcnMKcHJvZmVzc2lvbmFsbHkgZGVzaWduZWQKaGlzIGJhY2sgaXMgdHVybmVkCnYgcmF5Cmxvb2tpbmcgaW50byB0aGUgaG9yaXpvbgppbGZvcmQgaHA1CmEgbWFuIHdlYXJpbmcgZ29sZGVuIG1hc2sKbmlnaHRtYXJlIHJlbmRlcgpibG9uZGUgbWFuCmFybWVkIGFuZCBkYW5nZXJvdXMKaGlwLWxlbmd0aAphZnJhaWQKYSBtYXNzaXZlIGNlbGVzdGlhbCBnaWFudCBnb2QKdGhpY2sgYW5kIGRlbnNlIHZpbmVzCnBvcmNlbGFpbiBza2luLiBzdHVkaW8gZ2hpYmxpCmZyYW1lZCBpbiBpbWFnZQphIG1lZGlldmFsIGNhc3RsZQphIG1lZGlldmFsIGNpdHkKdmVyeSBzaGFsbG93IGRlcHRoIG9mIGZpZWxkCmN1cmxzIG9uIHRvcCBvZiBoaXMgaGVhZApncmV5LWV5ZWQKYmVpZ2UgaGFpcgptYWdkYWxlbmEgYW5kZXJzc29uCnNjYXJyeSBjYXN0bGUpLiBteXN0aWNhbAphIG1pZGRsZSBhZ2VkIGVsZgp2ZXJ5IHZlcnkgZGV0YWlsZWQgZmFjZQpkaXNvbGF0ZSA6OiBhIGxvbmcgc2hvdApzaW1ldHJpYyBwaG90b2dyYXBoeQpnbGFkaWF0b3IgYXJtb3IKZ2xvd2luZyBibHVlIG11c2hyb29tcyBpbiBtaXJlCmludGVyZXN0aW5nIGdlb21ldHJ5CnBpbGUgb2Ygc2t1bGxzIHVuZGVyIGhpcyBmZWV0CmRyZWFtbGlrZSBkaWdpdGFsIHBhaW50aW5nCmNpbmVtYXRpYy4gYXRtb3NwaGVyaWMKZ2FyeSB0b25nZQphdG1vc3BoZXJpYyBodWVzCmRyYXduIG9uIHBhcGVyCnRyZWUgc3R1bXAKb3JkZXIgbm93Cm1pZCBjbG9zZXVwCmEgbW91bnRhaW4gbG9vayBsaWtlIGEgd29tZW4KYSBtb3VzZSBpbiBhIGdvdGhpYyBhdGVsaWVyCmNlbGVicml0aWVzCmFyaWVsIHBlcmV6CnZpbGxhaW4gcG9zZQptYXR0ZSBza2V0Y2gKYSBtdXNjdWxhcgpzaXR0aW5nIGF0b3AgYSBkdXN0eSBtb3VudGFpbnRvcAphIG15dGhpY2FsIGNyZWF0dXJlCmhhbGYgZG9nCmxvdHMgb2YgYm9va3MKcHN5Y2hvbG9neSA6OiBjb25jZXB0IGFydAphIG5ldwpvZmZzZXQgbGl0aG9ncmFwaHkKc3Ryb25nIG1vb25saWdodAphdG9taWMgYm9tYgpndWlsdHkgZ2VhciBzdHJpdmUgc3BsYXNoIGFydAooZmxvd2VycykKbXVzZXVtIGFyY2hpdmUKZml0emdlcmFsZApjb2ZmZWUgc3RhaW4Kd2hvbGUgY2F0IGJvZHkKd3lsb3BzCigodW5yZWFsIGVuZ2luZSkpCmJlYXRpZnVsbCBsaWdodG5pbmcKYmFnZ3kgcGFudHMKZnVzY2hpYSBhbmQgdmVybWlsbGlvbiBhbmQgY3lhbgpmdXR1cnVzdGljCmxhZGlzbGF1cyBldWdlbiBwZXRyb3ZpdAooKHBvcnRyYWl0KSkKdHJlbmQgaW4gYXJ0IHN0YXRpb24KZmlyZWZsaWVzIGdsb3cgaW4gdGhlIGRhcmsKbm8gbW9yZQphIHBlcnNvbiBhdCBhIG11c2ljIGZlc3RpdmFsCmRhdmlkIGEKbmVhciB0aGUgc2VhCmFydGlzdGljIGlsbHVzdHJhdGlvbgpwcm9mZXNzaW9uYWxseSB0YWtlbgphc2h5CmJ5IHJhaW5lciBob3NjaAprYXluZSB3ZXN0CmhlIGlzIGhhcHB5CmxhY3F1ZXJlZAphIHBob3RvIG9mIHRvbSBjcnVpc2UKdWx0cmFyZWFsaXN0aWMgdWhkIGZhY2VzCnZlcnkgYWhlc3RldGljCmEgcGhvdG8gb2YgYSBmcm9nIHdpdGggYSBoYXQKbG9va2luZyBhdCBoaXMgcGhvbmUKY2FzdWFsIGJ1c2luZXNzIG91dGZpdApza3lkaXZpbmcKbGF1cmEgbGV0aW5za3kgYW5kIHN0ZXZlIG1jY3VycnkKYXV0byBwaG90b2dyYXBoeQp0aGUgbGlnaHRzIGFyZSBvbgptb3ZpZSBjZ2kKcHJlc2lkZW50aWFsCnN1cGVyIHJlYWwKaXNvNDAwCmYvOQoxLzMyMApjYW5vbiBlb3MgN2QgbWFyayBpaQooKHRpZ2VyKSkKZ3JlZW46IDAuMjUKYmx1ZTogMC4yNQphIHBob3RvZ3JhcGggb2YgYSBydXN0eQpibGFjayBhbmQgd2hpdGUgcGhvdG8uaXNvMjAwCjEvMzAKbmlrb24gZDMKdGFrZW4gaW4gdGhlIGVhcmx5IDE5NzBzCnRha2VuIGluIHRoZSBlYXJseSAxOTYwcwp0YWtlbiBvbiBhIDE5NjBzIGtvZGFrIGNhbWVyYQpqb25hdGhhbiBpdnkKd2lubmluZyBhd2FyZHMKcGh5c2ljYWwgYmFzZWQgcmVuZGVyCnBob3RvcmVhbGlzbSBhcnQKeiBuYXRpb24KcGFyaXMgaG90ZWwgc3R5bGUKYnJpdGlzaCBwYXRoZSBhcmNoaXZlCmFudGhybyB3b2xmIGZhY2UKc3dlYXR5IHdldCBza2luCnBhYmxvIGNhcnBpbyBhbmQgam9yZGFuIGdyaW1tZXIKZWFybHkgMTkwMHMgbmV3c3BhcGVyCmEgcGlrYWNodSBpbiBhIGZvcmVzdAptYWRlIG9mIGhpZ2ggdGVjaCBtYXRlcmlhbHMKaGlnaCBjb250cmFzdCBvZiBsaWdodCBhbmQgZGFyawptb2lzdCBkaXJ0eSBjYXJwZXQKY3JheW9ucyBvbiBwYXBlcgppc2h0YXIgZ2F0ZQppbiBtdXRlZCBjb2xvcnMKaHVnaCBkZWZpbml0aW9uCnJvdW5kIGNvcm5lcnMKYXJ0IGhvdXNlCm1lY2hhbmlzZWQKYXMgYSBmb3J0bml0ZSBjaGFyYWN0ZXIKYSBwb3J0cmFpdCBvZiBhIGJsdWUgZXllIGdpcmwKdGVhY2hlcgpibGFjayBhbmQgZ3JleQpmYW50YXN5IGJvb2sgaWxsdXN0cmF0aW9uCmRldGFpbGVkIDJkIGlsbHVzdHJhdGlvbgpjbGVhciBleWVzIGNvbmNlcHQgYXJ0CjRrLQpkYXJrIGJsYWNrIHNraW4gdG9uZQpzaWx2ZXIgZ2VsYXRpbiBwcmludAppbiBkYXJrIHJvYmVzIHdpdGggZ29sZCBhY2NlbnRzCmNhcnJ5aW5nIGEgbWFnaWNhbCBzdGFmZgphIHBvcnRyYWl0IG9mIGFuIGFuZHJvaWQKeW91IGNhbiBzZWUgYWxsIHRoZSBwYXNzYWdld2F5cwpkeXN0b3BpYW4gc2NpLWZpCndpdGggc2VyaW91cyBmYWNlIGV4cHJlc3Npb24KYXJjaGl0ZWN0dXJlIGFydAp0aGljayB0aGlnaHMKKDEyeCkgZXh0cmVtZWx5IHBhbGUgd2hpdGUgc2tpbgpmdWxsIG1ldGFsIG92ZXJsYXkKaW50ZW5zZWx5IGZvY3VzZWQKeWVsbG93IHN0cmVldCBsaWdodHMKZHVyaW5nIGEgc3Vuc2V0CnRpcHBpbmcgaGlzIGZlZG9yYQphIHB1cnBsZSBmaXNoCmFuaW1hdGVkIHN0aWxsCmJlYXV0aWZ1bCBzaGFkZXMKZ2FyaXNoCmxhcmFwaQpwaXhpdnMgYW5kCmJsYWNrIGFuZCB3aGl0ZSBzcG90cwpyb2NrcyBjb21pbmcgb3V0IG9mIHRoZSBncm91bmQKbmVvbiBwYXJ0aWNsZXMKc3RyYW5nZWx5IG11dGF0ZWQKYmxhY2sgamVyc2V5CndhdGVyIHBhcnRpY2xlcwpkcmFtYXRpYyBsaWdodGluZyBmcm9tIGJlbG93CmludHJpY2F0ZSBsYWNlCmVsZWdhbnQgZmFicmljCmZpcmUgZmxpZXMKaGlnaCByZXNvbHV0aW9uLiBwb3NpdGl2ZSB2aWJlcwphIHJlZGhlYWRlZCB5b3VuZyB3b21hbgpvY2N1bHQgc3ltYm9scyBoaWRkZW4KYSByaXZlciBmbG93aW5nIHdpdGggd2F0ZXJmYWxsCnNjaSBpZgpicm9vawpsb3V2cmUgY2F0YWxvZ3VlIHBob3RvZ3JhcGh5CmFudG9uIGZhZGVldiBhbmQgZGFuIG11bWZvcmQKdW5jYXJpbmcKY29sb3IgZmlsbSBleHBpcmVkIGZpbG0KYWdlZCBwaG90bwp3aW0gd2VuZGVycwphIHNhZApoaWdoIGFjdGlvbiBnbG93aW5nIG5lb24gbGlnaHRzCndpdGggZnVsbHkgZGV0YWlsZWQgZmFjZXMKc3R5bGUgb2YgcGluaG9sZSBwaG90b2dyYXBoeQpzcGFjZXNoaXAgYmF0dGxlCnBpcmF0ZSBwb3J0cmFpdApmYWRlZCBjaGlwcGVkIHBhaW50CnByZXR0eSBoaWdobGlnaHRzIGFuZCBzcGVjdWxhcgphIHNlYSBiYXR0bGUKKipjaW5lbWF0aWMKb2N0YW5lIHJlbmRlcioqCm1pcnJvciBhbmQgZ2xhc3Mgc3VyZmFjZXMKcmVhbGlzdGljIHJvYm90aWMgbWFjaGluZXJ5CmZsb2F0aW5nIGtvaSBmaXNoCm1hZ2ljYWwgZmVlbGluZyB2aWJlcwpoaWRkZW4gdGlueSBob3VzZXMKaXBob25lIDEzCmEgc2V4eSBibG9uZGUgd2Fycmlvcgpmb3JlYm9kaW5nIGFuZCBlZXJpZSBsaWdodGluZwphIHNoYXJrbmFkbwphIHNoaXAgbG9zdCBpbiBhIHN0b3JtCmEgc2ljayBjYXQgbGF5aW5nIGluIGEgYmVkcm9vbQpuYXJjaXNzaXN0aWMKYmx1ZSBhbmQgb3JhbmdlIGxpZ2h0aW5nCndpZGUgb3ZlcmhlYWQgc2hvdAp2aXNpYmxlIHNtb2tlCmNvbXBldGl0aW9uIHdpbm5pbmcKZ2VvcmdlIGF1bHQgcGFpbnRpbmcgc3R5bGUKYSBzbm93eSBkYXkgaW4gdGhlIGZvcmVzdApjaW5lbWF0aWMgcG9zdC1wcm9jZXNzaW5nCmEgc29yY2VyZXIgY2FzdGluZyBhIGZpcmViYWxsCmdyZXkgamFja2V0CnJ1c3NpYW4gY29uc3RydWN0aXZpc20KcWluZyBkeW5hc3R5IHBhaW50aW5nCmJpcmRzIGluIHRoZSBkaXN0YW5jZQphIHN0ZWFtIHdoZWVsZXIgZnJvbSAxODgwcwpjb21wbGV0ZWx5IG92ZXJncm93biB3aXRoIHZpbmVzCnZlZ2V0YXRpb24gYW5kIGZsb3dlcnMKYSBzdGVhbXB1bmsgdHlyYW5ub3NhdXJ1cwpiYWxjb255IHNjZW5lCmtwb3Agc3R5bGUgY29sb3JzCmNsdXR0ZXIKZjIuOCAzNW1tCmFteSByb3NlIHJlZCBkcmVzcwpwb3NpbmcgZm9yIGJhdHRsZQp0b2RheSdzIGZlYXR1cmVkIHBob3RvZ3JhcGh5IDRrCmhpZGRlbiBpbiB0aGUgZm9yZXN0CnRlYWwgaGVhZGJhbmQKY3liZXJwdW5rIHN0cmlwIGNsdWJzCmhhcmQgYm9pbGVkCmNocm9tYXRpYyBhYmVycmF0aW9ucwpmbGFubmVsCmxhbmRzY2FwZSBhcmNoaXRlY3R1cmUgcGhvdG8KbmV4dCB0byBhIGJpZyB3aW5kb3cKb2xkIHJ1c3R5IHBpY2t1cC10cnVjawptYWRlIG9mIGxlYXZlcwphIHRhYmxlIGZ1bGwgb2YgY2FuZHkKZW5oYW5jZWQgcXVhbGl0eQp3b29kZW4gYXJtb3IKM2FtCmdpcmwgd2l0aCBibGFjayBoYWlyCm1pY2hhZWwgbWFubgphIHRlZW4gYmlvcHVuayBjeWJvcmcKYSB0ZWVuIGN5YmVycHVuayBjeWJvcmcKZXhvdGljIHdvbmRlcgpjb2xvbmlhbCBleHBsb3JhdGlvbgpjaGlsZHJlbidzIGJvb2sgZHJhd2luZwphIHRyYWluIGluIHJlZCBkZWFkIHJlZGVtcHRpb24gMgpiZXN0IHBob3RvCmdyZWcgcnV0a293c2tpIGFuZCBtYWtvdG8gc2hpbmthCmNoaWxkcmVuIGRyYXdpbmcgd2l0aCBwZW5jaWxzCjNkIHByaW50ZWQgbGluZSB0ZXh0dXJlCnB1YmxpYyBzcGFjZQp3YWxsIHBhcGVyCmNpbmVtYSBzdHVkaW8gbGlnaHRzCmxhdmEgYW5kIGZpcmUgZ29kZGVzcwphcnRpc3QgaXMgbm9ybWFuIHJvY2t3ZWxsCmZsb3JhbCBwYXR0ZXJuZWQgc2tpbgpmb2N1cyBvbiB0aGUgc2t5Cm1hc2N1bGluZSBwb3NlCnNjaS1maSBtYWdpYyBoaWdobHkgZGV0YWlsZWQKZGVlcCBzaGFkb3cKYSB2ZXJ5IG1hY3VsYXIgd29tYW4gaW4gd2hpdGUKbGlnaHQgdHJhY2VzCnZvbHVtZXJpYyBnaG9zdGx5IHJheXMKZ3JlYXQgYXRtb3NwaGVyZQpyZWFsaXN0aWMgc2t5CmhvcnJvcnMgZmlsbWVkIG9uIGNhbWVyYQpmYW5ncyBhbmQgZHJvb2wKZ290aCBhc3RoZXRpY3MKZm9yZWJvZGluZyBhbmQgZXBpYwpnYXJhdmF0bwpsaW1lIGFuZCBnb2xkIGh1ZQp5ZWxsb3dpc2ggZnVsbCBtb29uCnN5bnRod2F2ZSBpbnNwaXJlZApwYXJrcyBhbmQgcHVibGljIHNwYWNlCnZocyB2aWRlbwpkZXRhaWxlZCBwZW5jaWwgZHJhd2luZwphIHdpZGUgc2hvdApzaG90IG9uIHBvbGFyb2lkCnN0eWxlIG9mIGluc2lkZSBnYW1lCnN1bWVydmlsbGUgZ2FtZQpsaW1ibyBnYW1lCmEgd2l0Y2gKc2F0YW5pYyBob3Jyb3IKY3JpcHMKYSB3b21hbiBmbG9hdHMgaW4gbWlkYWlyCnBvcnRyYWl0IGltYWdlcnkhISEhIQppbiBhIGNhc3RsZQpmb2N1cyBvbiB0b3JzbwpiYWxscm9vbQphIHdvbWFuJ3MgcHJvZmlsZQpvY3VsdXMgcXVlc3QgMgpzd2l0Y2gKaW5mb2dyYXBoaWMgYW5kIG1hcmdpbmFsaWEKYXJjaGl0ZWN0dXJhbCBjb25jZXB0cwphIHlvdW5nIGFzaWFuIHdvbWFuCnByb2JhYmx5IGluIGhlciAzMHMKaG9sZGluZyBhbiBlcGVlCmZpbG0gc3RpbGwgZnJvbSB0aGUgYXZlbmdlcnMKdHJpYmFsIHBpZXJjaW5nIGFuZCB0YXRvb3MKd2VhcmluZyBhIHdhaXN0Y29hdApjaW5lbWF0aWMgdG9wbGlnaHQKc2FkIHZpYmUKYSB5b3VuZyB3b21hbiBhcyBnZW5naGlzIGtoYW4KY2hhcmFjdGVyIGZvY3VzCmZhY2lhbCBmb2N1cwphbmltZS1zdHlsZQpsZWZ0IGVhcgpsZWZ0IGhhbmQKcnVubmluZyBpbiBzYXZhbm5haAphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5egphY2UgY29tYmF0Cm9jdApnb2xkZW4gZW1iZXJzIGZseWluZwphbGYKamFnZ2VkIHNwaXJhbGluZyBzaGFwZXMKc3RyYW5nZSBhbmdsZXMgYW5kIHNwaWRlcnkgZWRnZXMKZWxlZ2FudCEKZGlsYXBpZGF0ZWQgbG9vawo4ayBtYXR0ZSBwYWludGluZwphYmFuZG9uZWQgc2hvcHBpbmcgbWFsbApwaG90b3NjYW4Kd2lubmluZyBwaG90b2dyYXBoCmZlYXR1cmVkIG9uIDk5ZGVzaWducwpzdGFycyBwb3VyIHdoZXJlIGJsb29kIGJvaWxzCmZlYXIgc3RlYW1zIHdoZXJlIGluc3RpbmN0IGZhaWxzCnJlZCBsYXNlciBzY2FubmVyCmFjcnlsaWMgcG91ciBwYWludGluZwpwc3ljaGVkZWxpYyBtYW5nYQphY3Rpb24gc3RpbGwKZ2VuZSBlc3B5CnBldGVyIHRlbXBsZQptYXJrIGJyb3duCmFsZXggbWlyYW5kYQptaWNoYWVsIGJhaXIKc3RpbGwgZnJvbSB0aGUgZGFyayBrbmlnaHQKZmxhbWUgc3BlbGwKZGF2aWQgc3BhZGUKY3ViaXN0IHN0eWxlCnRvdWNoIG9mIGdvbGQgbGVhZgphZGVsZQpkcmFjb3MKZHJpbmtpbmcgYSBiZWVyCmNvbmNlcHR1YWwgcmVuZGVyaW5nCjkwcyBzdHlsZQpjaW1icmkKd2FyLWFydCBzdHlsZQpseWluZyBvbiBhIGZ1enp5IGJsYW5rZXQKaW4gYSBzdW5iZWFtCmRlbnRpc3QKZ2VuZXJvdXMgY2xlYXZhZ2Ugb3BlbiBqYWNrZXQKYWRyaWFuYSBjaGVjaGlrCmdyZWcgcnV0a293c2tpIGFuZCByb2Igcm9zcwp3b29kZW4gaW50ZXJpb3IKcmV0cm8gZnV0dXJpc3RpYyBzdHlsZQpjeWJlciBzdGVhbXB1bmsKYmF0dGxlIG9mIDE0NTMKYWVyaWFsIHZpZXcgb2YgYSBjaXR5CmFscGluZSBzY2VuZXJ5CmZhY2UgbGlrZSBtb25rZXkKZHJhcGVkIGRyYXBlcwptYXNoIHBvdGF0b2VzCmhvdCBiYW5rCmdhdXplCm1pc3QgcmlzaW5nIGZyb20gaGVhZApyZW7DqSBsYWxvdXgKYWdlbnRzIGZyb20gdGhlIG1hdHJpeCBtb3ZpZQpuYmMKaG9sZGluZyBlbm9ybW91cyBzd29yZAphbGFuIHdhdHRzCnRob21hcyBraW5rYWRlIHBhaW50aW5nCmFsYnVtIGFydCB5b3VuZyB0aHVnCm1heWEgZGVyZW4KbG9maSBoaXAgaG9wCmFsdGVybmF0aXZlIHJvY2sKZmFudGFzeSBhbmQgY29uY2VwdCBhcnQKYWxjaGVteSBsYWJvcmF0b3J5CmFsZWlzdGVyIGNyb3dsZXkgd2l0aCBiYXBob21ldApwdWZmeSBjbG91ZHkgc2t5CmFsZXggZ3JleSBjYXQKYWxleCBncmV5IGFydAphbGV4IHRyZWJlawpzdGFyaW5nIHBzeWNob3BhdGhpY2FsbHkKbWlzdHkgd2lzcHMKYWxmYSByb21lbyBnaXVsaWEKYWxpY2UgYXR0ZW5kcyBtYWQgdGVhIHBhcnR5Cigoc3Vuc2V0KSkKc3RyaW5ncyBvZiBwZWFybHMKZGljaHJvaWMgcHJpc20KZHJhbWF0aWMgbGlnaHRpbmcgbGlnaHRpbmcKaGVhdnkgc3RhY2tzIG9mIHBlYXJsIG5lY2tsYWNlcwplZHdhcmQgaHVnaGVzCmFsaWVuIHZzIHByZWRhdG9yCmFsaWVuIGZvb2QKYWxpZW4gZnV0dXJpc3RpYyBjaXR5CmJpenphcmUgY29sb3IgcGFsbGV0ZQphbGllbiBtb25zdGVyCnNwYWNlIGNyYWZ0Cmx1bWlub3VzIGJvZHkKZGFyayBpbGx1c3RyYXRpb24KY2xvc2UgdXAuIG1hY3JvLiBoeXBlciByZWFsaXN0aWMKYWxsYSBwcmltYSBvaWwgcGFpbnRpbmcKbXVsdGlwbGUgaWxsdXNvcnkgYXJtcwphbG95IGZyb20gaG9yaXpvbjogemVybyBkYXduCmZ1bGx5IHJlZCBleWVzCnNoYXJwIHRlZXRoIHNtaWxlCnN0ZWxsYXJpcwpob2xkaW5nIGFuIGVww6llCmNhcmFtZWwKdGhlIGNyb3dkIGlzIGNoZWVyaW5nCmJyb2NrIGxlc25hcgpiZXN0IGFsZ29yaXRobQpkaWdpdGFsIGNpbmVtYSBjYW1lcmEKY29va2UgbGVucyBmZWVsCmFtb25nIHVzIGNyZXdtYXRlCmFtb25nIHVzIGNoYXJhY3RlcgphbW9uZyB1cyBpbXBvc3RlcgphbW91cmFudGgKYXJub2xkIDMKc3Ryb25nIGFybXMKc3Ryb25nIGZlYXR1cmVzCmFuIGFpIGdlbmVyYXRlZCBpbWFnZQpoaWdobHkgaW50cmljYXRlIGluIHRlY2huaWNvbG9yCnN0dWRpby1saWdodGluZwphcnRnZXJtIGpzYwpoeXBlcnJlYWxpc20gYXJ0CmdyZWcgcnV0a293c2tpIGFydGlzdHJ5IHdvcmtzCmxpZ2h0IGxvb3BpbmcKdXJiYW4gaG91c2UKKCgodHJlZXMpKSkKKCgoZm9yZXN0KSkpCigoZm9yZXN0KSkKKChydXN0KSkKc2F0ZWxsaXRlCm9uIGEgc3BhY2VzaGlwCmV4dHJlbWVseSBncmFwaGljCmJ5IHRob21hcyBraW5rYWRlCnRhaWwgb2YgYSBsZW11cgphbiBhbmltZSBuZW5kb3JvaWQgb2Yga2FybCBtYXJ4CmZsYXQgY2VsbCBzaGFkaW5nCmN1cmxlZCBzbGlnaHRseSBhdCB0aGUgZW5kcwpkaWdpdGFsIGFydGlzdApicmlnaHQgb3JhbmdlIGV5ZXMKaGFsZiBnb2F0Cndsb3Agcm9zc2RyYXdzCm1hcmMgc2ltb25ldHRpIGFuZCBzYWtpbWljaGEKYmxhbmQKNzBtbSBpbWF4CnNoaXJvIHRha2F0YW5pCnNhbmR5IGNvbG9ycwphbiBhc3Ryb25hdXQgaXMgdW5kZXIgdGhlIHNlYQphbiBhdm9jYWRvIGNoYWlyCnB1bGl0emVyIHByaXplIHdpbm5pbmcKcmVkIGZ1cgpzY2ktZmkgYW5pbWUKZGlnaXRhbCBjb21pYwp0aGUgbW9vbiBpcyBpbiB0aGUgc2t5CmZhaXJ5IGZydWl0LiBvY3RhbmUgcmVuZGVyCmFuIGVsZWdhbnQgZ3JlZW4KYmx1ZSBkcmFnb24KaW4gYSBzcGFjZSBzdGFycnkKdHVubmluZwphd2FyZCB3aW5uaW5nLiBjaW5lbWF0aWMKYmxhY2sgYW5kIHNpbHZlcgpiZWF1dGlmdWwgYmxhY2sgaGFpcgphd2UtaW5zcGlyaW5nLiBhd2FyZC13aW5uaW5nCmV4dHJhLWRhcmsgbmF0dXJhbCBibGFjayBoYWlyCmxpZ2h0bmluZyBjcmVhdGluZyBsaWZlCm9yYml0YWwKdHp1eXUgZnJvbSB0d2ljZQpob2xkaW5nIGFuIGF2b2NhZG8gaW4gaGlzIGhhbmQKYmx1ZSByaW1tZWQgZ2xhc3Nlcwp3b3JraW5nIG9uIGEgbGFwdG9wIGF0IGEgZGVzawpob2xkaW5nIGFuIGZpc2ggaW4gaGlzIGhhbmQKd2l0aCBjYWN0dXMgcGxhbnRzIGluIHRoZSByb29tCnB1Zy1mYWNlZAp3ZWFyaW5nIGJsYWNrIG92ZXJjb2F0CndpdGggcGluayBoYWlyCmRlYXRoIG9mIGFsbAp0b3JyZW50aWFsIHJhaW4gb2YgYmxvb2QKdGhlIGVhcnRoIHNwcm91dHMgbGF2YQp0aGUgc3VucyBsaWdodCBpcyBjb25zdW1lZAphbGwgdGhpbmdzIGNlYXNlIHRvIGV4aXN0Cmdvb2QgeW91bmcgZ2lybAphbiBlcGljIHBvcnRyYXlhbCBvZiB0aGUgc2FuZG1hbgphbiBldGVybmFsIGxpYnJhcnkKYW4gZXdvayBlYXRpbmcgYSBsb2xsaXBvcAp3aGl0ZSBkb3ZlCmFuIGV4cGxvc2lvbgpmaWx0aAprcmVueiBjdXNoYXIKZXRoZXJlYWwgcmFpbmJvdyBidWJibGVzCnJlYWxpdHkgYmVuZGluZwpyYXl0cmFjaW5nIHNoYWRvd3MKcmljaCBkZWVwIGNvbG9ycy4gbWFzdGVycGllYwpiZWtzaW5za2kgcGFpbnRpbgpwZWFjZWZ1bCBjbG91ZAphbiBpZHlsbGljIHZpbmV5YXJkCm9wZW4gcm9hZAppbiBhIGp1bmdsZSBlbnZpcm9ubWVudApqYXBhbmVzZSBoaWdoIHNjaG9vbApjb21pYyBib29rJ3MgY292ZXIKbWljcm8gZGV0YWlsaW5nCmFuIGltcG9zaW5nbHkgdGFsbAozMG1tIGZpbG0KZXNjaGVyIHN0eWxlCnN1bi1rZW4gcm9jawphbiBraW5nIGtvbmcgcmFnZSBvbiBzdHJlZXQKZmllcnkgYXRtb3NwaGVyZQpkZXRhaWxlZCB2aWtpbmcgYXJtb3IKZGV0YWlsZWQgdmlraW5nIHJ1bmUgYXJtb3IKZGltIGFuZCBkYXJrIGxpZ2h0aW5nCmNpbmVtYXRpYyBzb2Z0CnBzeWNoZWRlbGljIGNvbG91cmluZwpvbiB0aGUgc2VhCmFuIG9sZCBsYWR5IHdpdGggcmVkIHNraW4KcmVkIHNraW5uZWQKYW4gb2xkIG1hbiB3aXRoIGEgZ2luZ2VyIGJlYXJkCmhlYWQgYW5kIGJvZHlzaG90CmhlYWQtdG8tc2hvdWxkZXIKYmxhY2sgc3RlZWwgd2l0aCByZWQgdHJpbQphbiBvdmVyd2VpZ2h0CmJsYWNrIGFuZCByZWRkaXNoIGNvbG9yIGFybW9yCmF0dGVzdGF0aW9uCmFuYSBkZSBhcm1hcyBwb3J0cmFpdApjeWJlcnB1bmsgMjA3MAphbmF0b215IG9mIGEgZHJhZ29uCmFuY2FsYWdvbiB0aGUgYmxhY2sKZGV0YWlsZWQgbWVjaGFuaWNhbCBkZXNpZ24KMTRrIGdvbGQgd2lyZQpmb3VuZCBpbiB0aGUgcnVpbnMgb2YgcG9tcGVpaQp3ZWFyaW5nIGRhcmsgcm9iZXMKaW4gYSBiYW1ib28gZm9yZXN0CmZleSBydWlucwpyZ2Iga2V5Ym9hcmQKZ2FtaW5nIGhlYWRzZXQKYW5kIHdoYXQgcm91Z2ggYmVhc3QKYXMgaW4gdWZmaXNoIHRob3VnaHQgaGUgc3Rvb2QKaGF6eSBzdW5zZXQgd2l0aCBkcmFtYXRpYyBjbG91ZHMKZGFyayBzb3VscyB2aWJlCmludHJpY2F0ZSBnbG93aW5nIG1lY2hhIGFybW9yCm92ZXJkZXRhbGl6ZWQKd2VhcmluZyBhbmdlbCBoYWxvCmZyb20gcGFjaWZpYyByaW0KYW5pbWFsIGtpbmdkb20KdGhlIHNreSBpcyBwaW5rCmJsYWNrIGFuZCBvcmFuZ2UgY29hdApvcmFuZ2UgcHVwaWxzCmJhY2tyb29tIGJhY2tncm91bmQKYW5pbWUtdHdpdHRlcgphbmltZSB2dHViZXIgZnVsbCBib2R5IG1vZGVsCnZlcnkgYWNjdXJhdGUgZmFjZQpzaGFmdApwYXJ0aWFsbHkgY3liZXJuZXRpYwpkYXJrIGVudGl0aWVzCnNtYWxsIGhhdApzb25nIGR5bmFzdHkKYW5pbWUgb3BlbmluZwpmaW5hbCBmYW50YXN5IHgKYW5uIHRha2FtYWtpIGZyb20gcGVyc29uYSA1CmFubmEga2VuZHJpY2sKcmFzdGVyaXplZApzcHlpbmcgZGlzY3JldGx5CnNweWluZwpvdmVyc2l6ZWRfaGluZHF1YXJ0ZXJzCmludHJpY2F0ZWQgZGV0YWlsZWQKcGhpbCBqaW1lbmV6CmJyaWdodCBwaW5rIGhpZ2hsaWdodHMKbGxhbWEgYW50aHJvIHBvcnRyYWl0Cm1vdHUKYWtpbWFuCnRoZSBiYWNrZ3JvdW5kIGlzIGx1c2gganVuZ2xlCnNpbXBsZSBkaWdpdGFsIGFydApjaGlmZm9uCnBhdGVudCBsZWF0aGVyCnN0ZWVsIHN0dWRzCmxvbmcgZmxvd2luZyB3aGl0ZSByb2JlCmFwYXJ0bWVudCBjb21wbGV4IG1hZGUgb2YgdHViZXMKYnVsbGV0IHRyYWNlcnMKOGsgcGhvdCByZWFsaXN0aWMKYXBvY2FseXBzZSBodXJyaWNhbmUgc3Rvcm0Kc3RpbGwgbGlmZSBvZiBhbiBhcHBsZQpjZW50cmFsIHBhcnRlZCBmcmluZ2UKc2hvZQpjaGFyY29hbCBhbmQgeWVsbG93IGxlYXRoZXIKeWVsbG93IGFuZCBjaGFyY29hbAptb3JvY2NhbiB0ZWEgc2V0CmhpZ2ggcXVhbGl0eSBtZWNoYW5pY2FsCmRldGFpbGVkIGRlY29yYXRpdmUgZmxvdXJpc2hlcwpndXdhaGF0aQplbmhhbmNlZCA4ayByZW5kZXIKLS1hciAxNjo5CmdsYWNpZXIgcGhvdG9ncmFwaHkKYnJpZ2h0IHNlYQpoZWF2eSBrbmlnaHQgaGVsbWV0CmJsb29kYmF0aCBiYXR0bGVmaWVsZCBiYWNrZ3JvdW5kCmFyaWFuYSBncmFuZGUgaW4gc3RhciB3YXJzCmFyaWFuYSBncmFuZGUgb24gYSB0cmljeWNsZQptYWdpYyB0aGUgZ2F0aGVyaW5nIHNvcmNlcmVzcwpuZXcgc3RyYW5nZXIgdGhpbmdzIHNlYXNvbgpuZXcgc29uZwooYWtpcmEgMTk4OCkgaGlnaGx5IGRldGFpbGVkIDhrCmRlc3RpdHV0ZQpzaXR0aW5nIHVuZGVyIGJyaWRnZQpzYWd1YXJvCnBpeGVsYWN0aXZpc3QKdHYgZnJhbWUKYXJ0IG5vdXZlYXUgbGlsaXRoCmNhcmJvbiBibGFjIGFuZCBhbnRpcXVlIGdvbGQKYW5pbWFsaWEKd2VhcmluZyBzY3VscHRlZCB0ZXh0dXJlZCBhcm1vcgphcnRzdGF0aW9uIG1hc3RlcnBpZWNlCmFydGVtaXMKYWxzbyBrbm93biBhcyBhcnRlbWlzIG9yIHNlbGVuZQpkZXRhaWxlZCBzY2ktZmkgYXJ0CnNhaXRvIHRha2FvCmhvc2hpbm8geXVraW5vYnUKYnV0IHRoZSBhcm1vciBjb3ZlcnMgaGVyIGZhY2UKcnVpbmVkIGFyY2hpdGVjdHVyZQpzY2llbnRpZmljIGRlcGljdGlvbgpzdW5kaWFsCnNwb3J0cyBqYWNrZXQKZnVsbCBib2R5IHplbmthaSEgYXN1a2Egc3VpdApzYW8KYXN1bmEgeXV1a2kKYXQgdGhlIGVuZCBvZiB0aGUgd29ybGQKcGxhdGludW0gamV3ZWxsZXJ5CmxhY2sgb2YgZ3JvdW5kCmhhcmR5IGZvd2xlcgphdXJlbGlvbiBzb2wKYXVyb25wbGF5CmF1c3RpbiBwb3dlcnMKc3Vuc2V0LiBsaWdodCBzaGFkb3cKYXVzdHJhbGlhbiBvdXRiYWNrCmF1dGVjaHJlCnNvdWwgbGVhdmluZyBib2R5CnNob3QgZnJvbSBhZmFyCmpvaG4gd2F0ZXJob3VzZQphdXRvbWF0b24KYXp1cmUgZXllcwo4NW1tIG5kIDMKNGsgZm9vdGFnZQpjYXRhbG9nIHBob3RvCnZhcG9yd2F2ZS4gYmxhY2sgYW5kIHdoaXRlCmRpc25leSAyZCB0cmFkaXRpb25hbCBhbmltYXRpb24KdG90ZW0gcG9sZQphenRlYyBza3VsbApiaWcgY2xhd3MKbXV0ZWQgYnJvd24KYmVhdXRpZnVsIGdpcmxmcmllbmQKMTAwawp0ZXN0IHNjcmVlbgp0aGluIGJvZHlzdWl0Cm1vdmllIHN0aWxsIHByb21vdGlvbgp0aGluIGJsYWNrIHJvYmUKY2xpcGJvYXJkCmhvbGRpbmcgYSBzbmlwZXIgcmlmbGUKYmxvb2R5IHdhbGxzCmFic3VyZCBxdWFsaXR5CjE4MDBzIHBhaW50aW5nCmRldGFpbGVkIHJlZmxlY3Rpb24KMTg4Mi4gZXBpYwpncmFuZCB0aGVmdCBhdXRvIGNvdmVyIGFydAphbmltZSBzdHlsZSBwb3J0cmFpdApmcmFuayBmcmF6ZXR0YSBwYWludGluZwpubyBleHRyYSBhcm1zCm9pbCBwYWludGluZyBmcm9tIHRoZSAxOTgwcwpbW2ZhbnRhc3ldXQpiYXJlZm9vdCBiZWF1dGlmdWwgZ2lybCBhbGllbgpkcmFtYXRpYyBzdGFnZSBsaWdodGluZwpiYXJyZW4gd2FzdGVsYW5kCmlzbyA2NAphcGVydHVyZSBmLzkKcmVhbGlzdGljIGZhbnRhc3kgcGFpbnRpbmcKamFtZXMgZ3VybmV5IHBhaW50aW5nIHN0eWxlCmdvZCByYXlzIHBhc3MgdGhyb3VnaCB0aGUgd2luZG93CmJhc2tldGJhbGwgYmFsbAotbjQKbG93IHF1YWxpdHkgZm9vdGFnZQpyZW5kZXJlZCBvbiBvY3RhbmUKYmF0bWFuIGFzIGEgem9tYmllCmJhdG1hbiBkcmVzc2VkIGFzIGRhcnRoIHZhZGVyCjE5ODBzIGNvbWljIGJvb2sgcGFuZWwKYmF0bW9iaWxlCmhhbnMgZ2lnZXIKYmVhdXRpZnVsIGRlcGljdGlvbgpicnVzaCBwYWludGluZwpzdXJyZWFsaXNtIGJhY2tncm91bmQKc3ltbWV0cmljYWwgZHVhbGl0eQpiZSBvY2N1bHQKZWxwaXMKcG9zaW5nIGluIGFuIHVyYmFuIHN0cmVldAotbiA1Cmxvd3Nob3QKdm9ndWUgZWRpdG9yaWFsCmJlYXV0aWZ1bCByb2d1ZSBsYWR5CmthdGhlcmluZSBtY25hbWFyYSBpbnNwaXJlZApiZWF1dGlmdWwgcnVzc2lhIG9mIHRoZSBmdXR1cmUKb3JuYW1lbnRhbCBib3cKbWVkaWNhbCBsYWJvcmF0b3J5Cm5vIGV4dHJhIGFybXMhCnZvbHVtZXRyaWMgbGlnaHRpbmcgYmVhdXRpZnVsCm92ZXJzaGFycGVuZWQKcGFpbnQgZmxlY2tzCmludHJpY2F0ZSB0cmlhbmd1bGFyIGRlc2lnbnMKY2FydmVkIGluIHdvb2QKY2luZW1hdGljIGxpZ2h0IGVmZmVjdHMKbG9uZyBibGFjayBicmFpZHMKbmljZSBjb2xvciBzY2hlbWUKYmVhdXRpZnVsIGN5YmVycHVuayBjaXR5CnNtb290aCB2b2x1bWV0cmljIGxpZ2h0aW5nCmxvdyBsaWdodCByb29tCm5lb24gZ2xvd3kgZWRnZXMKb21pbm91cyBtb29kCnNpbmdsZSBzb2xpZCBib2R5CnJpZGluZyBhIGdpYW50IHNpbHZlciB3b2xmCmJsdWUgaW5keWdvIHRodW5kZXIgbGlnaHRuaW5nCmhpZ2ggcmVzb2x1dGlvbjo6IHRvbSBiYWdzaGF3CmJlYXV0aWZ1bCBmZW1hbGUgcHJpbmNlc3MKZ2xvd2luZyBjcnlzdGFscyBvbiB0aGUgZ3JvdW5kCmFydGlzdCBzdGV2ZSBoYW5rcwphcnRpc3QgYWx5c3NhIG1vbmtzCmFydGlzdCBhcmF0YSB5b2tveWFtYQphaGVzdGV0aWMKcm9ib3RpYyBleWVzCnN1bmtlbiBkYXJrIGJsdWUgZXllcwpzaGUgaXMgZHJlc3NlZCBpbiBzaGFtYW4gY2xvdGhlcwpiZWF1dGlmdWwgbGFkeSB3aXRoIGJ1bm55IGVhcnMKZXZva2VyIHJvYmVzCnNtb2tlIGVuZXJneQpnb2xkZW4gY2lyY2xldApvcm5hbWVudGFsIHJvYmVyCmJlYXV0aWZ1bCBtYWdpY2FsIHBhbG0gYmVhY2gKZ2lnYW50aWMgcHJpc3RpbmUgbWFyYmxlIGNvbHVtbnMKc3R1bm5pbmcgbW9vbmxpZ2h0IGFuZCBzaGFkb3dzCnNvbmcgbmFuIGxpCmRvZnJlc2gKZ2lnYW50aWMgc2t5c2NyYXBlcnMKc2F3CnllbGxvdyByYWRpYW50IG1hZ2ljCnNhcmVucmFlCmV2ZXJsaWdodApvY3RvcHVzIGZhY2UKdGVudGFjbGVzIGJlYXJkCmNsZW5jaGVkIGZpc3QKd2VhcmluZyBvcmFuZ2Ugc3VuZHJlc3MKbGlnaHQgb3JhbmdlIG1pc3QKaGFwcGlseSBzbWlsaW5nIGF0IHRoZSBjYW1lcmEKcHJlZ25hbmN5CnZpYnJhbnQgbGlnaHQgY29sb3Igc2NoZW1lCmpvaGFuIGxpZWJlcnQgbWl4ZWQgd2l0aCBhbHVjYXJkCnN3ZWRpc2ggd3JpdGluZwpoYW5kc29tZSBwcmluY2Ugb2YgcGVyc2lhCmhhbmRzb21lIHByaW5jZQpibGFjayt2ZWx2ZXQrcmVkK3R1cnF1b2lzZQpzdW1tZXIgZ2xhdQplbGVjdHJpYyBzdG9ybQpsaWdodCBkYXJrIGxvbmcgaGFpci4gYXBhdGhldGljCmhlYWQgc2NhcmYKbWVhZG93IGluIHRoZSBmb3Jlc3QKZ29kZXNzCmxpZ2h0LWJsdWUgc3RlZWwtcGxhdGUKbWlkZGxlIGRpc3RhbmNlCmNhYmluZXQgZnVybml0dXJlCnRpbnkgc3RhdHVlIG9uIGRpc3BsYXkKaHlwZXJyZWFsaXNtIHN0eWxlCmJlbGxlIGRlbHBoaW5lCmp1ZGdlJ3MgZ2F2ZWwKZm9nIG1hZHMgYmVyZwpwaG90b2pvdXJuYWxpc20gcGhvdG9ncmFwaHkKcmVzdG9yZWQgcGhvdG8Kc2NyZWVuIGNhcApiZXR0eSB3aGl0ZQpoYWxmLWJvZHkKc2NyZWVuY2FwdHVyZQpsdW1pbmFyIGFpCmRldGFpbGVkIHdpbmdzCmRyIHN1ZXNzCjMgYW0KYmlnIGJvc3MKbWV0YWwgZ2VhciBzb2xpZCByZXZlbmdlYW5jZQp0aGUgZmluYWwgYmF0dGxlCmJpZyBmbG9wcGEKYmlnIHNuYWtlCmxvdHMgb2YgYmxvb2QKYmlnIGJ1ZGdldCBtb3ZpZQptZXRhbCBnZWFyIG1lY2gKcGlhbmlzdApyYWlueSBkYXkuIG5pbnRlbmRvNjQKYmlsbCBnYXRlcyBmdWxsIGJvZHkgcG9ydHJhaXQKbGFyZ2UgZmxhbWVzCmJpbGxpZSBlaWxpc2ggYXMgbG9raQpiaWxseSBjb3JnYW4KcHJpbnRlZCBvbiBwYXBlcgpwdWxwIGZpY3Rpb24gc3R5bGUKYmVhY2hlcwptdXNjdWxhciBtYXNjdWxpbmUgZmlndXJlCnllbGxvdyBiZWFrCmJsYWNrIGVsb24gbXVzawpmcm9tIG1hcnZlbCBzdHVkaW9zCnBhdmlsaW9uCm5pZ2h0bWFyZSBsYW5kc2NhcGUKdGV4dHVyZXMuY29tCmdyYXZpdGF0aW9uYWwgbGVuc2luZwp3YXJmb3JnZXMKYmxhZGVzIGluIHRoZSBkYXJrCmFuaW1hdHJpeAptZW5oaXJzCmhvb2tlZCBub3NlIGFuZCBzcXVhcmUgamF3CmV1cm9wZWFuIGZvdXItbGVnZ2VkIGRyYWdvbgpibHVlIHN1bnNldApibHVlIHdoYWxlCmFuY2llbnQgYmlvbWVjaGFuaWNhbCB0ZW1wbGUKdG9tYiByYWlkZXIgKDIwMTgpCmx1bWluZXNjZW5jZe+8jGhpZ2hseSBkZXRhaWxlZApibyBidXJuaGFtCjRrIHByb2Zlc3Npb25hbCBwaG90bwpudWNsZWFyIGFwb2NhbHlwc2UKc3BhY2Ugd2hhbGUKYm9sc29uYXJvCndlYXJpbmcgYSByZWQgY2FwdGFpbidzIHVuaWZvcm0KYm9yZGVyIGNvbGxpZQp4Ym94IHNlcmllcyB4CmJvcmlzIGpvaG5zb24gYXMgbmVvIGZyb20gbWF0cml4CnNrdWxsIGltYWdlIG9uIHRoZSB2ZXN0CjJkIHBvcnRyYWl0CmJvcmlzIGpvaG5zb24gYXMgdGhhbm9zCnggbWFuIGNvc3R1bWUKc2hpbmluZyBjbGF3cwpyYWlueSBkYXkuIGdhbWUgcmVuZGVyCmJvcmlzIGpvaG5zb24gc2t5ZGl2aW5nCmJpZyBtYWNzCmJvc3RvbiBjZWx0aWNzIGlyb25tYW4gc3VpdApib3N0b24KamMgbGV5ZW5kZWNrZXIgYW5kIHNhY2hpbiB0ZW5nCmJyYWNoaW9zYXVydXMKaG9sZGluZyBiZWVyIGJvdHRsZXMKYnJhZCBwaXR0IGlzIGxlb24gcy4ga2VubmVkeQpicmFkIHBpdHQgcG9ydHJhaXQKdGhvbWFzIGVha2lucyBhbmQgYmVrc2luc2tpCnJpZ2h0IGhhbmQgc2lkZSBwcm9maWxlCmZsb2F0cyBjYXJuaXZhbAp3ZWFyaW5nIGEgZmxvcmFsIGNyb3duCmJyZWFraW5nIGJhZCBzY2VuZQpwb2NoaSBpaWRhCmp1bmljaGkgb2RhCmhpZ2hseSBkZXRhaWxlZCBhcmNoaXRlY3R1cmUKemhhbmdqaWFqaWUKYnJldHQgZ29sZHN0ZWluCmluIGEgd2FzdGVsYW5kCmJyb2NrIGxlc25hciByaWRpbmcgYSBkb25rZXkKZHJlc3MgYW5kIGNsb3RoCmNyZWF0aXZlIGZhc2hpb24KMTk4MHMgc2NpLWZpCnVuZGVydGFpbGVkCmJydWNlIHdpbGxpcyBhcyBzYW11cmFpCndlYXJpbmcgc2FtY3JvdyBsZWF0aGVyIGphY2tldAp3aXRoIGJsdWUgbGlnaHQgaW5zaWRlCnRvcGlhcnkKc3RpbGwgZnJvbSBoYWxmLWxpZmUgbW92aWUKamVzc2ljYSBjaGFzdGFpbgo1MG1tIGYyLjgKaXNvIDUwMApidWRkaGlzdCBtb25rCnN0YW5kaW5nIGluIGEgY2l0eSBzdHJlZXQKZXBpYyBjb25jZXB0IGFydC4gYm9rZWgKYnVpemVsIGFuZCBodW1hbiBmdXNpb24KbWF0dGUgcGFpbnRpbmcgdiByYXkKYnVsbHkgbWFndWlyZQptZXNzeSBiZWFyZApjdXJpb3NpdGllcwpodWdobHkgZGV0YWlsZWQKY2hvcml6byBzYXVzYWdlCmNyeXB0aWRzCmNhY29kZW1vbgpjYWkgeHVrdW4KY2FsZWIgZnJvbSBjcml0aWNhbCByb2xlCnByb29mIG9mIGNvbmNlcHQKY29sb21iaWFuCmdyb29tZWQgYmVhcmQKbW9vbmxpdCBvY2Vhbgpsb2ZpIGFydAphcCBwcmVzcyBwaG90bwplZG11bmQgYmxhaXIgYW5kIGNoYXJsaWUgYm93YXRlcgpjYXB0YWluIGphY2sgc3BhcnJvdwpjYXB0YWluIGtpcmsKY2FwdGFpbgpicmlja3MgZmx5aW5nIG91dHdhcmRzCmRpZ2l0YWwgYXJ0IGZhbnRhc3kKZ29hbGllIGNhcmV5IHByaWNlCm51bWJlciAzMSEhISEhCmdsYXNzIHdpdGggcnVtCmNvY2t0YWlsIGluIGFuIGVuZ3JhdmVkIGdsYXNzCmxvb2tpbmcgYXQgdGhlIGdyb3VuZApndGE1IHN0eWxlCmNhcm1lbiBzaW5ncyBiZWF1dGlmdWxseQpjYXJuYWdlCnBzeWNoZWRlbCB0aW50CjNkIDhrIHJlbmRlcgpyb2NreSB0ZXJyYWluCmNhc3RsZSBpbiB0aGUgY2xvdWRzCmNhdCB3aXRjaApjYXN0aW5nIGV2aWwgc3BlbGwKM2QgdW5yZWFsIHJlbmRlcgpjYXQgYnVubnkKZ2hpYmxpIGFydCBzdHlsZQp0cmVuZGluZyBvbiBmaXZlcnIKY2hld2luZwpjYXQgcGxheWluZyBjaGVzcyBsb29raW5nIHdpc2UKY2F0IHN1bW1vbnMgYSBzcGFjZXNoaXAKY2F0IHdpdGggYSBoYXQKY2F0IHdpdGggbGFzZXIgZXllcwpsaWZlLWxpa2UKYSBmcmllbmQgaW4gbmVlZAppbiBkYSB2aW5jaSBzdHlsZQpjYXRzIG9uIGhlciBzaWRlCnJ1bQpzdGFuZGluZyBpbiBhIHN0YXJiYXNlIGJhcgppbWF4IGZpbG0KaGlwIHNraXJ0IHdpbmdzCmJhcmVseSBsaXQgd2FybSB2aW9sZXQgcmVkIGxpZ2h0CmhhaXIgb3JuYW1lbnRzCnllbGxvdy1vcmFuZ2UKc29mdCBncmFkaWVudHMKY2hhcmFjdGVyIGRlc2lnbiBwb2xpY2UgbWFuCjE2IHRob3VzYW5kIC0gbiA2CmxvbmcgZGFyayBoYWlyIHdpdGggYmFuZ3MKZm9jdXMgb24gZmFjaWFsIGZlYXR1cmVzCmV4YWdnZXJhdGVkIGZhY2lhbCBmZWF0dXJlcwpreW90byBhbmltYXRpb24gYW5pbWUga2V5IHZpc3VhbApkaXNuZXkgYW5kIGt5b3RvIGFuaW1hdGlvbgp6dWNrZXJiZXJnCmNoYXJsaWUgY2hhcGxpbiBkYW5jaW5nCmNhbmUKY2hhcmxpZSBjb3gKY2hhcmxpZSBkYXkKZXBpYyBhY3Rpb24KaW4gZnVsbCBzdGFyZmxlZXQgdW5pZm9ybQpob2xkaW5nIGEgbGlnaHRzYWJyZS4gc3BsYXNoIGFydApjaGVsbCBmcm9tIHBvcnRhbApjYXIgc2hvdApmdWxsIHByb2R1Y3Qgc2hvdApwczIKMzVtbSBmaWxtIHN0aWxsIGZyb20gMTk5NApzdHlsZSBvZiB3YWx0ZXIgbWFydGluIGJhdW1ob2ZlcgppbiB0aGUgbmV3IGFjdGlvbi1tb3ZpZSBzb25pYwpmdWxsLWNvc3BsYXkKY2hyaXMgaGVtc3dvcnRoIHBvcnRyYWl0CmNocmlzIGhlbXN3b3J0aCB1bmRlcndlYXIgYWQKY2FsdmluIGtsZWluIHBob3RvZ3JhcGgKY292ZXIgb2Ygdm9ndWUKNGsgaGVhZHNob3QgcGhvdG9ncmFwaHkKY2hyaXN0aWFuIGJhbGUgYXMgdGhlIGpva2VyCmNpbmVtYSBlZmZlY3QKcHJvZmVzc2lvbmFsIHNob290CnNoYXZlZCBiZWFyZApzZXh5IHNlc2FtZSBzZWVkIGJ1bnMKY2hyeXNhbGlzCmNocnlzYW50aGVtdW0gZW9zLTFkCjRrIHByb2R1Y3Qgc2hvdApjaHVuLWxpCnZpb2xldCBjb2xvciBwYWxldHRlCmdsb3NzeSB3aGl0ZQpjbG91ZHkgbmlnaHQKdGlsdCBzaGlmdCBoLnIgZ2lnZXIgYmFja2dyb3VuZApjaXJpIGZyb20gdGhlIHdpdGNoZXIKcmV0cm8gY3liZXJwdW5rCmNsdW1wcyBvZiBiYW5hbmFzCmtvcmVhbiB3cml0aW5nCmNpdHkgb2YgcHJpc3RpbmUgY29sb3JzCnRvcnJpIGdhdGUKaGlnaCByaXNlcwpzdHlsZSBvZiBhbGV4IHJvc3MKc3dhbXB5CmNsYXJhIG9zd2FsZApmbG93ZXIgcG90cwpzaHV0dGVycwphcnQgaG91c2UgYWVzdGhldGljCnNvdmlldCBtaWxpdGFyeQpyb3NlcyBiYWNrZ3JvdW5kCmNhbmRsZSBsaWdodG5pbmcKaW5kdXN0cmlhbCBjb2xvdXJzCmluIHBpY3R1cmVzcXVlIGZvcmVzdCBkaW9yYW1hCmNoZWFwIGFidW5kYW50Cm51Y2xlYXIgZW5lcmd5IGZ1dHVyZQprZW5ueSBtY2JyaWRlCmVsZWdhbnQgd2hpdGUgZHJlc3MKZXJ0ZQpjbGVvcGF0cmEgcG9ydHJhaXQKY2xpbnQgZWFzdHdvb2QgYXMgd29sdmVyaW5lCnBvd2RlcmVkIHdpZwpqYW1lcyBtY2NhcnRoeQppbWFnaW5lCnRlcnJpZnlpbmcgOjcKdm9sdW1ldHJpYyBsaWdodGluZzouNwpjcmFja2VkIGFuZCBmYWRlZCBpbiBwbGFjZXMKYm94IGN1dHRlcgpyYXBoYcOrbAphIGRldmlsaXNoIGdyaW4gb24gaGlzIGZhY2UKOGsgNjQgbWVnYXBpeGVsCndyaXRpbmcgaW4gam91cm5hbApibGFkZXJ1bm5lciBpbiB0aGUgcmFpbgpmaWJlci1vcHRpY3MKb25lIGxpZ2h0CndpcApleHBsb3JlcnMgb2YgdGhlIHJ1aW5zIGF0IGR1c2sKY2xvdmVyCmNsb3duIGZyb2cga2luZwpzb3V0aGVybiBjcm9zcwpjb2JyYSBoZWFkIG1hc2NvdCBmYWNpbmcgcmlnaHQKY29kZXggZ2lnYXMKZG9jdW1lbnQgcGhvdG8KdGhvbSB5b3JrZSAoZ3VpdGFyKQpqb25ueSBncmVlbndvb2QgKGxlYWQgZ3VpdGFyKQpjb2xpbiBncmVlbndvb2QgKGJhc3MpCmVkIG8nYnJpZW4gKGd1aXRhcikKcGhpbGlwIHNlbHdheSAoZHJ1bXMpCnRjaG9jawpjb2xsZWN0aXZlIGNvbnNjaW91c25lc3MKY29sb21iaWEKcHVsc2UgcmlmbGVzCmFsaWVuIGRlc2VydApzZWNyZXQgc2VydmljZSBwaG90b3MKaWNlIGNyZWFtIGNvbmUKcHN5Y2hvc2lzCmNvbG9yZnVsIHBlbnRheCBjYW1lcmEKaHlwZXJyZWFsaXN0aWMgc2ltdWxhdGlvbgpsaWdodCBkaXNwZXJpb25zCmFyZWEgbgpudWNsZWFyIHJlYWN0b3IKdmlzaXRpbmcgc2F0dXJuCnN5bW1ldHJpY2FsIGZhY2VzISEhCmNvbXBsZXggYWxpZW4gZnJhY3RhbCBzdHJ1Y3R1cmUKZ2xvc3N5IG1hZ2F6aW5lIGNvdmVyCnJlZCBidWlsZGluZwpjcnlwdG8gdmFsdXQKZXhxdWlzaXRlIHJlbmRlcmluZwpmcmVtYW4KZmVtYWxlIHByb3RhZ29uaXN0IPCfkYAgOjgKaGVyb2lzbQpyZWQgc21va2UgZm9sbG93cyBoaXMgbW92ZW1lbnQKamVyZW15IGNoZXVuZwptb29keSBhdG1vc3BoZXJpY3MKaXJyaWRlc2NlbnQgZ2hvc3RseQp1cCBjbG9zZSBwaWN0dXJlCmNvbmNyZXRlIGp1bmdsZQpiZWFtCmNvbmZ1Y2l1cyBhbmQganVyeSB0cmlhbApyYXAgYmF0dGxlCmJlaWdlcwpncmV5cwpzd2luZ2luZyBvbiBhIHZpbmUgb3ZlciBhIGNoYXNtCmdvbGRlbiB0cmVhc3VyZXMgb24gdGhlIHdhbGxzCmNvc21vIGtyYW1lciBhcyBkci4gc3RyYW5nZQpjb3Ntb2xvZ3kgb2Yga3lvdG8gbGFuZHNjYXBlCmplbGx5CmNvY29udXQgdHJlZXMKY291bnQgZHJhY3VsYQpjb3VydCByb29tCnNwYWNlIHNlZW4gb3V0c2lkZSBmcm9tIGEgd2luZG93CnNweXJvIHRoZSBkcmFnb24Kd2hpdGUgY2FudmFzIGJhY2tncm91bmQKd2F0Y2hpbmcKY3JpbWUgc2NlbmUgcGhvdG8Kc2l0dGluZyBpbiBhIHJvY2tpbmcgY2hhaXIKZGFyayBwYXN0ZWwgY2FzdGxlIGJhY2tncm91bmQKb3ZlcnNpemVkCnZvbHVtZXRyaWcgZm9nCnN1cGVyaW9yIGxvb2sKY3J1c2FkZXIga2luZ3MgMwpiYXJyZW4gZWFydGgKdml2aWQgYXR0ZW50aW9uIHRvIGRldGFpbApwaG90b3JlYWxpc3RpYyBwaG90b2dyYXBoCmNyeXN0YWwgZmFjZQpzdHlsZSBvZiBlbWlsIG1lbG1vdGgKbHVyaWQgY29sb3JzCjUwcyBzdHlsZSBpbmZvbWVyY2lhbApiZWF1dGlmdWwgY2l0eXNjYXBlCnZocyBjYW1jb3JkZXIgZm9vdGFnZQp2aXZpZCBjb21wbGVtZW50YXJ5IGNvbG9ycwp6ZHppc2xhdyBiZWtzaW5zawp0aWMgdGFjIHVmbwpibHVlIGNvbG91ciBzY2hlbWUKYXQgZGF5CmN1dGUgY29yb25hdmlydXMgY3JlYXR1cmVzIQppbmZlcm5hbCBueW1waCEhIQppbnRlZ3JhdGluZyB3aXRoIHRlY2hub2xvZ3khIQpjdXRlIGN0aHVsaHUKYmxhY2sgbGluZSBhcnQKd2l0aCBiYWNrZHJvcCBvZiBnb2QgcmF5cwpjdXRlIGxpb24KZXhpc3RlbnRpYWwKY3liZXIgc3BhY2UgZm9yZXN0IHNjZW5lCmN5YmVyY2F0CmN5YmVyZGVtb24gb24gb21haGEgYmVhY2gKZGFyayBjbG9hawpmdXR1cmUgZG9jdHJpbmUKbHVjYXMgYXJ0cyBhZHZlbnR1cmUKY2xhc3NpYyBjYXJzCm5lb24gZWxlY3Ryb25pYyBzaWducwpjeWJlcnB1bmsgaXJvbiBtYW4KY3liZXJwdW5rIG1hcmtldApjeWJlcnB1bmsgbW9uYSBsaXNhCnZlcmVzY2hhZ2luCm1heWEgYWxpIGFzIGEgY3liZXIgc29yY2VyZXNzCmNpbmVtYXRvZ3JhcGhpYyBjb21wb3NpdGlvbgpjeWJlcnB1bmsgY2hhcmFjdGVyIGFydAp3ZWFyaW5nIHRyZW5jaGNvYXQKY3liZXJwdW5rIGNpdHkgYWJhbmRvbmVkCmNvb2wgYmx1ZSBuaWdodCBjb2xvciBwYWxldHRlCiEhIWF3YXJkLXdpbm5pbmchISEKY2xvc2UgdXAgc2hvdCBmcm9tIHRoZSB0b3AKd29sZiBjb21wYW5pb24KM2QgZ2FtZSBhcnQKY3liZXJzeW4Kd2l0aCB3aGl0ZSBsb25nIGhhaXIKbXltaW5pZmFjdG9yeQpwaG90b2dyYXBoeSB1bHRyYWZpbmUgZGV0YWlsCmRva2kgZG9raSBsaXRlcmF0dXJlIGNsdWIKbW9uaWthCmh5cGVyYm9saWMgZ2VvbWV0cnkKZG10IGVnbyBkZWF0aAp3aGl0ZSBtYWxlCmRuZCBjaGFyYWN0ZXIgY29uY2VwdApkYWRhaXNtIHN0eWxlCmhvbWVzdGFyIHJ1bm5lcgpkYWZmeSBkdWNrCmJydXRhbGl0eQpkYWxlawp0YWJsZXRvcCBnYW1pbmcKxpIvMy41CmV4cG9zdXJlIHRpbWU6IDEvNQptYWRlIG91dCBvZiBjbGF5CmRpZ2l0YWwgYXJ0LiBAbWFyaW9tYW5pYWNkdWRlCmJsdS1yYXkKZGFuayBtZW1lCmRhbm55IGRldml0byBkb29tIHNsYXllcgpyZW5haXNzYW5jZSByZWxpZ2lvdXMgYXJ0CmxpZ2h0cyBhcmUgb24gZG93biB0aGUgc3RyZWV0CmluIGdhbWUKc3Nzcy5ncmlkbWFuCmNvbGxhdGVyYWwKZm9ybXVsYSAxIGdhcmFnZQp3ZWFyaW5nIGZhbnRhc3kgYXJtb3IKZmlzaG5ldHMgcGFudHlob3NlCnRveSBzdG9yeSBzdHlsZQpkYXJrIHNvdWxzIGlpaQpncnVuZ3kgZ290aGljCnRlbnRhY2xlcyBncm93aW5nIGZyb20gaXRzIGZhY2UKcGluayByb3NlCnJpcHBpbmcgdGhlIGZhYnJpYyBvZiBzcGFjZXRpbWUKb3JuYXRlIGdvbGQKbW9zdGx5IGJsYWNrCm5la3JvIHhpaWkKZGFyayBibHVlIGNvbG9yCmRhcnRoIGphciBqYXIgYmlua3MKZGFydGggdmFkZXIgbGF1Z2hpbmcKY2luZW1hdGljIHBob3RvIDRrCmpvdXJuYWxpc3QgcGhvdG8KcG93ZXIgc3RhbmNlCmRhdGFuZnQgYXMgYSBkYXRhIGF2YXRhcgp0YWtlIGNvbnRyb2wgb2YgeW91ciBkYXRhCmRhdmUgY2hhcHBlbGxlCmNydCBmaWx0ZXIKZGVwZWNoZSBtb2RlCmRhdmlkIGJhbGRlb24gY29taWMgYXJ0CmRhdmlkIGJlY2toYW0KY29tcHV0ZXIgZ2xpdGNoCnBvb2wgY2F1c3RpY3MKZGF2aWQgc2hpbmcKZGF2aWQgYW5kIGdvbGlhdGgKc3RhbmxleSBtb3VzZQpsZWUgY29ua2xpbgpkYXl6CmJhZCBjYW1yZWEKZGVjbGFuIG1ja2VubmEKM3JkIGNlbnR1cnkgYmMKZGVlcCBzZWEgcGljdHVyZQpzY2FybGV0IHdpdGNoIGNvc3R1bWUKdmlsbGFueQpzdHVkaW8gZ2hpYmx5CnN1cGVyIHdpZGUgbGVucwp3aXRoIGZvZwp3YXJoYW1tcmVyCmRlbW9uIGJveQplbWJlcnMgdG8gd2Fpc3QKc3VibWVyZ2VkIHRlbXBsZSBkYW5jZSBzY2VuZQpkaXJlCm1vdmllIHBpY3R1cmUKb3V0c2lkZSBpbnRyaWNhdGUKY2Fybml2b3JvdXMgcGxhbnRzCm9yYW5nZSBjb2xvciB0b25lCmNpdHkgcnVpbnMgYmFja2dyb3VuZApob3Jyb3IgbW92aWUgcG9zdGVyIGFydApkaXRrYQp3YWx0ZXIgcGF5dG9uCm1vb2R5IG5pZ2h0IGxpZ2h0aW5nCmluY2Vuc2UKZS1zcG9ydCBzdHlsZQp3aXRoIGluZmFudCBqZXN1cwpjaGluZXNlIHBhaW50aW5nIHN0eWxlCnZlcnkgd2lkZSBhbmdsZSBsZW5zCnJlZCByaXNpbmcgcGxhbmV0CnRyZWFzdXJlIGNoZXN0cwpiYXJlIHRvcnNvCmZsZXNoeSBza2VsZXRhbApmbGVzaHkgYm90YW5pY2FsCmRhcmsgZG9lIGV5ZXMKc2tlbGV0YWwgd2l0aCBleHRyYSBmbGVzaApleHRyYSBoYW5kcwpleHRyYSBmbGVzaHkgaGFuZHMKaWxsdXN0cmF0aW9uIGluIHRoZSBnb2xkZW4gcmF0aW8Kc3VycmVhbCBleHRyYSBmbGVzaCBhbmQgYm9uZXMKZ3JpbW9pcmUKc2FtYWRoaQpwaWxhciBnb2dhcgpkaWFsZ2EgdGhlIHBva8OpbW9uCmRpYXBlciBkaXNwb3NhbCByb2JvdAphcmNhbmUgY2xvdGhpbmcKZGllIGFudHdvb3JkIHN0eWxlIHdlYXIKdmlicmFudCBibHVlCmtvbWF0c3V6YWtpIHJldHJvLWZ1dHVyaXNtCnN0YWxpbmdyYWQKbmVvIGJydXRhbGlzbQpkaWVzZWxwdW5rIHJhaWx3YXkgc3RhdGlvbgpnbGl0Y2ggc2hpbW1lcgpkaXAtc3dpdGNoCnlvdSBoYXZlIHlvdXJzZWxmIGEgdmVyeSBmdW4KcHJlcGFyaW5nIHRvIGZpZ2h0CmRvZGdpbmcgYnVsbGV0cwpzaXRpbmcgb24gYSB0b2lsZXQKanVuZ2xlIGdydW5nZQpmb3J0bml0ZSBhcnQgc3R5bGUKc29mdCBzaGFkb3cgdHJhbnNpdGlvbgpmYWNlIG1lbHRpbmcKZGluaW5nIHJvb20KcGluIHVwIHN0eWxlIHBvc3RlcgpkZW5zZSBhdG1vc3BoZXJlCmRpc2NvcmQgbW9kCmRpc2NvcmQgbW9kZXJhdG9yCnZpc2lvbmFyeSBmcmFjdGFsIHN0cnVjdHVyZXMKYXJ0IGRpZ2l0YWwgZm9ybWF0aW9ucwpkbmQgY292ZXIgYXJ0CmRvYyBvY2sKY2FsbCBvZiBkdXR5IHpvbWJpZXMKYmwKZ3JlZWR5CmNvbG9yaW5nIGJvb2sgb3V0bGluZQpqZWZmcmV5IHNtaXRoIGFuZCBybG9uIHdhbmcKZG9qbyBvbiBhIG1vdW50YWluCmNoZWFwIGRlc2lnbgp5ZWFyIDIwNTAKbm8gc3BvdCBvdmVyIHJpZ2h0IGV5ZQpuZXdzcGFwZXIgcGljdHVyZQpwdWxpdHplci1wcml6ZWQgcGhvdG8KbXVzZXVtIHF1YWxpdHkgcGFpbnRpbmcKa2V5bGlnaHQKZnJvbSBhZmFyCmRvbmFsZCB0cnVtcCBhcyBzaHJlawpkb25hbGQgdHJ1bXAgYXMgdGhhbm9zCnJlZCBsaWdodCBzYWJlcgpwaW5rIHR1dHUKYXJ0aXN0aWMgcGFpbnRpbmcKY2FybCB3YWhsYm9tCnNpdCBvbiB0aHJvbmUKZXBpYyBhbmQgY2xhc3N5IHBvcnRyYWl0CmFycmVzdGVkCmRvbmFsZCB0cnVtcCBjcnlpbmcKZG9uYWxkIHRydW1wIGluIGFuaW1hbCBjcm9zc2luZwpkb25hbGQgdHJ1bXAgaW4gYXR0YWNrIG9uIHRpdGFuCmRvbmFsZCB0cnVtcCBpbiBza3lyaW0KZG9uYWxkIHRydW1wIGluIGphaWwKZG9uYWxkIHRydW1wIG11Z3Nob3QKdGhlIHdoaXRlIGhvdXNlCnBhbmlja2luZwpjaW5lbWF0aWMgdHJhaWxlcgptb29ucmF5cwpnYXJkZW4gc2V0dGluZwpyb2JvdCBiYXJrZWVwCnN0eWxlIG9mIGxlb25pZCBhZnJlbW92CnZhbG9yYW50IHN0eWxlCmhhbG8gZWZmZWN0CmRvdGEgMiBzY3JlZW5zaG90CmphcGFuZXNlIGJhdGhob3VzZQpkb3ZlciBjYXN0bGUKZ3RhIDUgc2NyZWVuc2hvdApzYXRhbiBpbiBoZWxsCnVsdHJhIG1lZ2Egc3VwZXIgaHlwZXIgZGV0YWlsCmRyYWNoZW5sb3JkCmRyYWN1bGEncyBjYXN0bGUKam9ubnkgd2FuCmVhc3kgZWRnZXMKaGFsZiBkcmFnb24KZHJhZ29uIGludmFzaW9uIG9mIG1vc2NvdwpicmlnaHQgZmlyZSBleWVzCmlwaG9uZSBwaWN0dXJlCmJlYXV0aWZ1bCBuYXR1cmFsIGxpZ2h0aW5nCjE5NDgKdHJhbnN5bHZhbmlhCmRyZWFtIHdpdGhpbiBhIGRyZWFtCmRyZWFtLXN0YXRlCm1vbnN0cm9jaXR5IGFuaW1hbApwYWludGVybHkgaWxsdXN0cmF0aW9uCnZlcnkgY3V0ZSBhbmQgY2hpbGRsaWtlCnNtaWxlcyBhbmQgY29sb3JzCmRyb3cgcmFuZ2VyCmdsb3dpbmcgbW9zcwpkYXJrIGludGVyaW9yCmR1ZmYgYmVlcgpndGEgdiBzdHJlZXQgc3R5bGUKcG9rZW1vbiBjYXJkIG9mIGR1a2UgbnVrZW0KbXVzdGFyZCBhbmQga2V0Y2h1cApzeW1tZXRyaWMgbGlnaHRzCmEgYmxhY2sgY2xvYWsKaGlnaGx5IGRldGFpbGVkIG1hcApkcml6enQgZG8ndXJkZW4KZHVuZ2VvbnMKNGsgaHlwZXIgZGV0YWlsZWQKc3RyZWV0IGxhbnRlcm5zIGdsb3cKZHV0Y2ggbGFuZHNjYXBlCmR3YXluZSBqb2huc29uIGFzIGdvZCBvZiB3YXIKZmEtMTggaG9ybmV0CmR3YXluZSBqb2huc29uIGFzIHNhbXVyYWkKaGQgNGsgZ2FtZSBzY3JlZW5zaG90CnZhbHZlIG9mZmljaWFsIGFubm91bmNlbWVudApuZXcgY2hhcmFjdGVyCmluIHNhdmFubmFoCmR5c3RvcGlhbiBjeWJlcnB1bmsgY2l0eQp0aGUgZm9ybWVyIGRlbW9uIGtpbmcKcmFwaGFlbGl0ZSBhbmQgYWxwaG9uc2UgbXVjaGEKbGFzZXJzIGZpcmluZwpjYXIgb24gc2FsZQplYmF5IHdlYnNpdGUKZWQgYXNuZXIgc3RhcnJpbmcgYXMgYmVuIGdyaW1tCmVkCm1hZ2ljIHRoZSBnYXRoZXJpbmcgYXJ0IHN0eWxlCmVkZWxnYXJkIGZpcmUgZW1ibGVtCmZ1dHVyaXN0aWMgY3liZXJwdW5rIHNjZW5hcmlvCmVkd2FyZCBzY2lzc29yaGFuZHMKY29udGVtcG9yYXJ5IHN1cnJlYWxpc20Kbmlob25nYQooY2hlZXNlKQooKCgoKCgoKG5pZ2h0KSkpKSkpKSkgZGF5IHRpbWUKc3RhdHVlIG9mIGxpYmVydHkgYXQgbGVmdAppbmZpbml0eSBoaWVyb2dseXBoIHdhdmVzCmJlYXZlcgpkYXJrIGZhbnRhc3kgZGlnaXRhbCBhcnQKc21va2UgYXJvdW5kIGhlcgplbGV2ZW50aCBkb2N0b3IKdHJlbmRpbmcgb24gbmF0aW9uYWwgZ2VvZ3JhcGhpYwplbGlqYWggd29vZCBhcyBoYXJyeSBwb3R0ZXIKZWxpbWluYXRpb24gb2YgaHVtYW5pdHkKYW5ncnkgYW5kIHBvaW50aW5nCmdsb3Jpb3VzIGxvbmcgYmxvbmQgaGFpcgpza3lmYWxsCmVsbGUgZmFubmluZyBpbiBhIGJsYWNrIGNvYXQKbG92ZSBjcmFmdAp3aGl0ZSBzaGlydCBhbmQgZ3JleSBza2lydAp3ZWFyaW5nIGdyZWVuIGFybW9yIGFuZCBoZWxtZXQKZGlnaXRhbGx5IGRyYXduCmVsb24gbXVzayBhcyBqYWJiYSB0aGUgaHV0dAplbG9uIG11c2sgYXMgYSBncmVlayBnb2QKZWxvbiBtdXNrIGZ1bmtvIHBvcApoZSBpcyBzY3JlYW1pbmcKZWxvbiBtdXNrIGluIGF0dGFjayBvbiB0aXRhbgp3ZWFyaW5nIGNyb3AgdG9wIGFuZCBtaW5pc2tpcnQKamVmZnJleSBqb25lcyBkeW5hbWljIGxpZ2h0aW5nCjRrIHBhaW50aW5nCndldCBjbGltYXRlCmVsdmlyYSBpbiB0YXR0ZXJlZCBjbG90aGVzCnN0dWRpbyBjYW1lcmEKaW4gaW1wcmVzc2lvbmlzdCBzdHlsZXMKc2hvdCBmcm9tIHNwYWNlCndpbGQgaGFpcnN0eWxlCmhhaXIgZmxvYXRpbmcgY292ZXJpbmcgY2hlc3QKcmlkZXItd2FpdGUgdGFyb3QKaG9sZGluZyBhIHNrdWxsIHN0YWZmCnZlcnkgZGFyayBuaWdodCB0aW1lCmVtbWEgc3RvbmUgYXMgY2F0d29tYW4KdmVydGljYWwgd2FsbHBhcGVyCnNwaWRlci1nd2VuCmF3YXJkLXdpbm5pbmcgc25sIHNraXQKZW1tYSB3YXRzb24gYXMgYmxhY2sgd2lkb3cKZW1tYSB3YXRzb24gYXMgY2FwdGFpbiBhbWVyaWNhCmlzbyAxNjAwCm5hdHVyYWwgY2FuZGxlIGxpZ2h0aW5nCmVtbWEgd2F0c29uIGFzIGlyb24gbWFuCmVtbWEgd2F0c29uIGFzIHNoZS1odWxrCmVtbWEgd2F0c29uIGFzIGEga25pZ2h0CmVtbWEgd2F0c29uIGFzIGEgbWVybWFpZApnaXZpbmcgYSB0aHVtYnMgdXAgdG8gdGhlIGNhbWVyYQpzcXVhdHRpbmcgcG9zZQplbW1hIHdhdHNvbiBpbiBnYW1lIG9mIHRocm9uZXMKcGhvdG9ncmFwaGVkIGZyb20gdGhlIGJhY2sKZW1tYSB3YXRzb24gc21pbGluZwphbmltb3JwaHMgY292ZXIKcGlzc2VkIG9mZgpwb3NpbmcgZm9yIGNhbWVyYQpleHByZXNzaXZlIGZhY2lhbCBmZWF0dXJlcwpjaGlsZCBvZiBsaWdodApubyBwYW50cwpyZXB0aWxlcwppbiBleWVzIHdpZGUgc2h1dCAoMTk5OSkKbG90cyBvZiBkcmVhZGxvY2tzIG9uIHRoZSBoZWFkCm5ldyBkZXNpZ24KY2xlYW4gY29sb3JzCmxvdyBxdWFsaXR5IHBob3RvZ3JhcGgKcjYKbmF0dXJlIGNvbG9ycwpwZXRlciBzYXZpbGxlCmVuZGxlc3Mgc2t5CnNvZnQgY29udHJhc3QKcGVvcGxlIGRyaW5raW5nIGJlZXIKZW5zbwplbnRlcmluZyB0aGUgbWluZCBtYXplCmluIHRoZSBzdHlsZSBvZiByb3NzIHRyYW4KZnV0dXJpc3RpYyBjeWJlcm5ldGljIGhlbG1ldAptdWNoYSBhbmQgYXJ0ZW0gZGVtdXJhCmJsdXJyZWQgYmFja3JvdW5kCmFsaWNlIGluIHdvbmRlcmxhbmQgc3R5bGUKc3VwZXIgZGV0YWlsIG9mIGVhY2ggb2JqZWN0CnZpc2lvbmFyeSBwYWludGluZwpuaWdodCB0aW1lIHdpdGggc3RhcnJ5IHNreQplcmVuIGphZWdlcgo0ayBhd2FyZCB3aW5uaW5nIHBob3RvZ3JhcGh5CndhbmRhCm5lb2JydXRhbGlzdCBhcmNoaXRlY3R1cmUKbGFyZ2Ugc3RhaW5lZCBnbGFzcyB3aW5kb3dzCmdlb21ldHJpY2FsIG1hc3RlcnBpZWNlCnJhbWF0aWMgY2luZW1hdGljIGxpZ2h0aW5nCmFic3RyYWN0IGNvbmNlcHQKc2xvdmFraWEKLW4gOApiZWF1dGlmdWwgc2VhIGxhbmRzY2FwZXMKZXZlbnR1YWxseQpldmVybGFzdGluZyBzdW1tZXIKZXZpbCBidWdzIGJ1bm55CmRlY2VwdGl2ZQp1bmNvbWZvcnRhYmxlIGNyb29rZWQgc21pbGUKc3RpZmYgbmVja2VkCmdyZWVuIGZvZwpldmlsIHlvZGEKc2NyZWFtaW5nIGFuZCBjcnlpbmcKZXhpdCBsaWdodAplbnRlciBuaWdodAp0YWtlIG15IGhhbmQKc2xlZXQKZXh0cmVhbWx5IGJlYXV0aWZ1bCBleWVzCmVtb3Rpb25hbCBleWVzCmluIDRrCmVtb3Rpb25hbCBwYWluCnJlbGVhc2luZyBwYWluCmJyYXNzIGFuZCBjb3BwZXIKZGFyayB0ZWFsIGNvdWNoCm1pc3R5IHdlYXRoZXIKZXllIG9mIHRoZSBiZWhvbGRlcgpsdXh1cnkgYnJhbmQKZGVzaWduIGF3YXJkIHdpbm5lcgpldmVuaW5nIHNreQppbnRpbWlkYXRpbmcgbWFuCnNtb290aCB3YXh5IHNraW4Kc2xpY2sgY2xhbW15IHNraW4KdGVjaG5vY3JhY3kKc29mdCB2aWJlcwpmYWxjb24KZGF1Z2h0ZXIKYm9oZW1pYW4gc3R5bGUKaW4gYSB0cmVlIGhvdXNlCmh5cGVycmVhbGlzbSBzZWxmIHBvcnRyYWl0CmZhaXJ5dGFsZSBwYWludGluZwplbHZlbiBjaXR5CnRocmVlLWRpbWVuc2lvbmFsCmluZmluaXRlbHkgbG9uZyBjb3JyaWRvcnMKYW5jaWVudCBncmVlayB0ZW1wbGUKZmFudGFzeSBlbnZpcm9ubWVudAphdGxhbnRlYW4Kc29sYXIgZmxhcmUgaGQKYXJ0aHVyIHJhY2toYW0gYXJ0CmZhcmdvCmZhcnNpZ2h0IHhyLTIwCnVuYmFsYW5jZWQKYmxhbmsgcGFwZXIKZmFzaGlvbiBydW53YXkKYnVzeSByZXN0YXVyYW50CmNhcnRvb24gc3R5bGUgaWxsdXN0cmF0aW9uCnZpbnRhZ2UgZm9vdGFnZQpmZW1hbGUgZGVhdGgKZmVtYWxlIGZvcmVzdCBhcmNoZXIKZmVtYWxlIGdpZ2FjaGFkCmRhcmsgcHVycGxlIHJvYmVzCmJsdWUgY29yc2V0CnZpb2xldCBsb25nIGhhaXIKaGVyb2ljIGNoYXJhY3Rlcgpsb29raW5nIGZyb20gc2hvdWxkZXIKc3BlbGxjYXN0aW5nIHBvc2UKZmVtYWxlIG9yYwpmZW1hbGUgcGlyYXRlIGNhcHRhaW4KZmVtYWxlIHJvZ3VlCmludGVyc3RlbGxhciBtb3ZpZQptZWNoYW5pY2FsIG1vcnBoIGVuZ2luZQpnZWFycyBvZiBkZWF0aApwcm9ncmFtbWFibGUgYmxhY2sgZ29vCmZpZWxkIG9mIG1peGVkIGZsb3dlcnMKY8OpemFubmUgc3R5bGUKcGltcGxlcwpibGFjayBsaWdodCB2ZWx2ZXQgcG9zdGVyCmZpbG0gc3RpbGwgb2YgMmIgbmllciBhdXRvbWF0YQpmaWxtIHN0aWxsIG9mIGVtbWEgd2F0c29uCmZpbG0gc3RpbGwgb2Yga2VybWl0IHRoZSBmcm9nCmZpbG0gc3RpbGwgb2YgbHVrZSBza3l3YWxrZXIKc3Vra290CndlYXJpbmcgZnVsbCBhcm1vdXIKZmlsbSBzdGlsbCBvZiB2b2xkZW1vcnQKZnJvbSBqb2tlciAoMjAxOSkKY2FycGV0ZWQgZmxvb3IKYmxhY2sgaW50ZXJmYWNlCnNvZnQgb3JhbmdlIGFuZCBjeWFuIGhpZ2hsaWdodHMKZmluYWxseQpzaGUgaXMgd2Fsa2luZyBvbiBhIHJpdmVyCmxheWVyZWQgcGFwZXIgc3R5bGUKZmlyZSBnb2RkZXNzCjNkIHN0eWxlCmZpcmVtYW4gc2FtCnJheXMgb2Ygc3VuCm5vIHBhdGgKZmlyc3QgcGhvdG9ncmFwaCBldmVyIHRha2VuCnVoZCA4ayBoaWRkZW4gbWVzc2FnZQpmbGFuCmNpbmVtYXRpYy1saWdodGluZwptYWNyb3NzIGRlbHRhIHNwbGFzaCBhcnQKZnV0dXJpc3RpYyBzdHJ1Y3R1cmVzCmZsb3dlciBzdG9ybSBwb3J0cmFpdAplcXVpbmUgcGhvdG8Kc2hhZGVzIG9mIHJlZApmbHlpbmcgc2NhcmxldCBwaG9lbml4Cjg1bW0gZjEuMgp0YWtlbiBmcm9tIGJlaGluZApiZWZvcmUgdGhlIGZpbmFsIGN1bGxpbmcKZm9yZXN0IGh1bnRlciBsYWR5CnR3aWxpZ2h0IHNreWxpbmUKY2hpbW5leSB3aXRoIHNtb2tlCmZvcmsgZm9yayBmb3JrCmdyYW5kIHRoZWZ0IGF1dG8gdgpicm93bmlzaCBvbGQgZm9zc2lsIHJlbW5hbnQKc3BlY2llcyBmdXNpb24Kc2VsZWN0aXZlIGJyZWVkaW5nCmZyYWN0YWwgZmFjZQpzaG93ZXIgY2FwCmZyYW5rIGRpbGxhbmUKc2hvcnQgZHJlYWRsb2NrcyB3aXRoIGJlYWRzCmZyZWQgZmxpbnRzdG9uZSBlYXRpbmcgdGFtYWxlcwptYXJjaApmbGFzaCBjb2xvciBwb2xhcm9pZApmcmlkYXkgbmlnaHQgZnVua2luCmRldGFpbGVkIGFuZCByZWFsaXN0aWMgZmFjZXMKZnJvZG8gaW4gc3RhciB0cmVrCnJlZnJhY3RlZCBsaW5lIGFuZCBzcGFya2xlcwpwcmV0dHkgYW5pbWUgZ2lybApmcm9udGFsIHZpZXcgb2YgYSBzZXQgb2YgYXJtb3IKcGhvZW5peC1pbnNwaXJlZApvbiBoZXIgdGhyb25lCnRvbmVkIGJvZHkKbGVhdGhlciBkdWZmbGUgY29hdApzYWdlCnBsYXRpbnVtIGF0dGlyZQphcm1vciBhbmQgcm9iZXMKbGlnaHQgZ2xvd3kgeWVsbG93IGV5ZXMKcHVycGxlIGFuZCBwaW5rIGxlYXRoZXIgZ2FybWVudHMKc2t5LWJsdWUgdGhpY2sgZnVyIGNvYXQKbmF2eSBzaGlydAp3aXRoIGRhcmsgZ3JleSBoYWlyCmNsYXNzaWNhbCB3aXRjaCByb2JlCm1hZ2ljIGJyb29tCnBvaW50eSB3aXRjaCBoYXQKbWFnaWNhbCBjYXVsZHJvbgpzdXBlcmlvciBpcm9uIG1hbgpiZWF1dGlmdWwga2F0IGRlbm5pbmdzCmVsaXphYmV0aCBvbHNlbiBhcyBibGFjayB3aWRvdwpjeWJvcmcgbmVjawp3ZWFyaW5nIGEgbG9uZyBkcmVzcwpob2xvZ3JhcGhpYyBibGFkZSEKbWVuYWNpbmcgYXVyYQpub3QgaW50ZWxsaWdlbnQKc3RhbmRpbmcgaW4gcm9hZAp3b21hbiBpcyBjdXJ2ZWQKbmFva2kgaWt1c2hpbWEKZnVsbCBwb3J0cmFpdCBvZiBlbGVjdHJvbWFuY2VyCmRhcmsgcHVycGxlIGdhcm1lbnRzCmdyZXkgcm9iZXMKc2lsdmVyIGJyYWNlbGV0cwpzdGVhbXB1bmshCnBhc3RlbCBwaW5rIHJvYmVzCmxvbmcgbGlnaHQgcmVkIGhhaXIKd29vZGVuIG1hZ2ljIHdhbmQKZ2xvd3kgcGluayBleWVzCnN0aWxsIGZyb20gYSBsaXZlIGFjdGlvbiBtb3ZpZQpleHRyYSBsYXJnZSB3aXRjaCBoYXQKY29sb3JzIG9mIGphbWFpY2EKd2l0aCBsYXJnZSB3aW5ncwpmdW1vIHBsdXNoCm1hZCBtZW4Kb2tsYWhvbWEKb25lIHBhbmVsIGNvbWljCmRyZWFtd29ya3Mgc3R5bGUKbGFuZHNjYXBlIG9pbCBwYWludGluZwpjYWxpZm9ybmlhOwpvdmVyZGV0YWlsZWQgZGlnaXRhbCBhcnQKZnV0dXJpc3RpYyBhcmNoaXRlY3R1cmUgY29uY2VwdApwYXJrcyBhbmQgZ2FyZGVucwptYW55IHBlb3BsZSB3YWxraW5nIGFib3V0CmluZGlhbiBnb2RkZXNzIG9mIHdlYWx0aAptZXRhbCBzdXJmYWNlcwpmb3JtIGFuZCBzaGFwZSBleHBsb3JhdGlvbgoyMTo5Cm9sZCBjb21wdXRlcnMKcG9ydGFsIGdhbWUKZ20KdG8gZGVzdHJveSBzYXRhbidzIGtpbmdkb20KaW4gYW1lcmljYW4gcHN5Y2hvCnN0YXJyaW5nIG1hcnR5IG1jZmx5CmdhbCBnYWRvdCBhcyBoZWxsIGxvcmQKZ2FsYWRyaWVsIGZyb20gbG9yZCBvZiB0aGUgcmluZ3MKZ2FsYWRyaWVsIGluIGxvdGhsw7NyaWVuCndlYXJpbmcgaG9vZApyZHIyCmdhbmRhbGYgZnJvbSBsb3JkIG9mIHRoZSByaW5ncwplcGljIGdhbWUgcG9ydHJhaXQKZ2FuZXNoCmdhcmRlbiBnbm9tZXMgcHJlcGFyaW5nIGZvciB3YXIKbG9vayB3aGF0IHlvdSBoYXZlIGRvbmUKZXhpc3RlbmNlIGlzIHBhaW4KZ2FyZmllbGQgZWF0aW5nIGxhc2FnbmEKc25ha2UgYm9keQpnYXJydXMgdmFrYXJpYW4KZ29sZCBzdWl0CnNhbGxvbgpwZW5yb3NlIHN0YWlycwptYWdpY2FsIGJlYWNoCnRleHR1cmUgb2Ygc2FuZApzdHJlZXQgYmFja2dyb3VuZApnZW5vcyBmcm9tIG9uZSBwdW5jaCBtYW4KZ2Vuc2hpbiBpbXBhY3QgY2hhcmFjdGVyCmdlb21ldHJpYyB3b2xmCmNlbWVudApnZW9tZXRyeSBkYXNoCmdlb3JnZSBjYXJsaW4Kd2l0aCBwaXN0b2wKZG9sbGFyIGJpbGxzIGJvZHkgaG9ycm9yCmV4Y2l0aW5nIGlsbHVzdHJhdGlvbgpib3hlcgpzd2ltbWluZyB0aHJvdWdoIHRoZSBvY2VhbgphY3Rpb24gZmlsbQpkZXN0cm95aW5nIGJ1aWxkaW5ncwpnaWFudCBicm9rZW4gcm9ib3QKdm9sdW1ldHJpYyBsaWdodGluZy4gcmVkCmhlYXZ5IGV5ZWJyb3dzCmltcHJlc3NpdmUgaG9ybnMKaW4gdGhlIG1pZGRsZSBvZiBhIHNub3cgc3Rvcm0KZ2lhbnQgd2hpdGUgdHJlZQpmaXJlYnJlYXRoaW5nIGRyYWdvbgo0ayBoZCBwaG90b2dyYXBoeQpnaWdhY2hhZCBwb3J0cmFpdAphcm5vbGQgYW5kIHpicnVzaApnaWxnYW1lc2gKYnVjayByb2dlcnMKdWdseSBsb29rCmRyYW1hdGljIHdpZGUgYW5nbGUKZ2lybCB3aXRoIGRhcmsgYnJvd24gaGFpcgphcyBhIHhpeHRoIGNlbnR1cnkgcGFpbnRpbmcKZmFudGFzeSBkZXRhaWxpbmcKbG9uZyBmYW4gYmxvd24gZGFyayByZWRkaXNoIGhhaXIKcmVkIG5lb24gbGlnaHRzIGluc2lkZSBpdApiZWhhbmNlLiBoaWdoIGRldGFpbApnb2Qgb2YgZHJlYW1zCmJyYW5kaXNoaW5nIGEgcG93ZXJmdWwgc3dvcmQKbm90IHlldCBkYXkKbm90IHlldCB0aGUgYmVnaW5uaW5nCmdvZGRlc3Mgb2Ygc3VtbWVyCmdvZGRlc3Mgb2YgZ2FsYXhpZXMKZ29kc2VudApnb2dldGEKYmxhY2sgJiB3aGl0ZSBhcnQKaGFkCndpdGggYSBndW4KMTk4MHMgcGhvdG9ncmFwaApnb2xkZW4gZHJhZ29uYm9ybgpkJmQgY29tbWlzaW9uIGFydCBkcmFnb24KZHJhbWF0aWMgc3RhcnJ5IG5pZ2h0IHNreQpzYWx2YXRpb24KZm91bnRhaW4gb2YgeW91dGgKYmV0aGVzZGEKaGFycnkgcG90dGVyIHN0eWxlCnN0YW5kaW5nIGluIGEgZGFyayBhbGxleXdheQpnb29nbGUgbG9nbwpsZWdnaW5ncwpibGFjayBhbmQgZ29sZCBhcm1vcgpwYXJ0aWFsbHkgY3VwcGluZyBoZXIgaGFuZHMKZ29yZ2VvdXMgeW91bmcga29yZWFuIHdvbWFuCmNsb3NlZCBtb3V0aCBzbWlsZQpqYW5hIGJyaWtlIGFydApkYXZlIHNpbQpqZWZmIHNtaXRoCjhrIHVsdHJhIHJlc29sdXRpb24KY2luZW1hdGljLiBieSBsZW5nIGp1bgpnYXJnb3lsZXMKemhhbmdqaWFqaWUgbmF0aW9uYWwgZm9yZXN0IHBhcmsKdW5yZWFsIGVuZ2luZSA3Cm1vbG9jaAp3aWRlIGFuZ2xlIHBlcnNwZWN0aXZlCmNvdmVyZWQgaW4gc3ByaW5rbGVzCmdyZWVrIGFjcm9wb2xpcwpncmVlbiBnb2JsaW4KaG9ycm9yIG1vdmllIHBvc3RlciBzdHlsZQpncmVlbiBlZ2dzIGFuZCBoYW0KbGFyZ2UgZmFuZ3MKZXZhIHVuaXQtMDAgaW4gdGhlIGJhY2sKc3Vuc2V0IGRhcmsgZHJhbWF0aWMgZGF5CnN1cGVyIHNhaXlhbiBnb2t1Cm91dC1vZi1mb2N1cyBiYWNrZ3JvdW5kCmdyaWxsZWQgY2hpY2tlbgpwdXJwbGUgdGludAp0aHJhc2ggbWV0YWwKYmFuZCBwcm9tbwoxOTg3IHBob3RvZ3JhcGgKc2NlbmljIHZpZXcgYXQgbmlnaHQKZGVlcCBzaGFkaW5nCmJyb3duIHNhdWNlCndlYXJpbmcgc3R1bm5pbmcgaXZvcnkgZHJlc3MKcmVhbGlzdGMKc2F1Y2UKZHVzayBzZXR0aW5nCmd3ZW4gc3RhY3kKZGVjb3JhdGl2ZSBwYW5lbHMKZ8OpcmFyZCBkZXBhcmRpZXUgYXMgd2FyaW8KaWxsdXN0cmF0aW9uIGRhaWx5IGRldmlhdGlvbgpoLnAuIGxvdmVjcmFmdCBhcyBjdGh1bGh1CnRoZSBkb29ycwpjYXJsb3Mgc2FtdWVsIGFyYXlhCnNvbCByZXRyZWF0CmhlYWx0aCBzcGEgYW5kIG1lZGl0YXRpb24gY2VudGVyCmluZG9vciBwb29sCmV0aG5pYwpoaW1hcnMgd2l0aCBtaXNzaWxlCmhhYnMgbG9nbwpkZXRhaWxlZCByZWFsaXN0aWMgYmVhdXRpZnVsCmhhamltZSBubyBpcG8gYm94IGZpZ2h0Cnlvc2VtaXRlCmRyYW1hdGljIGxpZ2h0aW5nIGhkIHF1YWxpdHkKYXMgYSBzdGFyZmxlZXQgb2ZmaWNlcgpibG9vbS4gaGlnaCBmYW50YXN5CnNoYWRvd3MuIGFzaWFuIGxhbmRzY2FwZQpzaGFkb3dzLiBoaWdoIGZhbnRhc3kKaGFsbG93ZWVuIGdob3N0IHVuZGVyIGEgc2hlZXQKc2ltb24gc3RhbGVuaGFnIHBhbGV0dGUKaGFsbyAzCmt1bmRhbGluaSBlbmVyZ3kKYWpuYSBjaGFrcmEKc2lnbWFuIDg1bW0KZG10IGNvbG9ycwpoYXJsZXkgZGF2aWRzb24KaGFycnkgcG90dGVyIHNtb2tpbmcgd2VlZApoYXNidWxsYQpoYXNidWxsYSBtYWdvbWVkb3YKYXJ0IG5vdXZlYXUgcG9ydHJhaXQKd2F0Y2hpbmcgdGhlIHN0YXJzIGF0IG5pZ2h0CmhhdHN1bmUgbWlrdSBpbiB3YXJoYW1tZXIgNDBrCmFuaW1lIGZ1bGwgYm9keSBpbGx1c3RyYXRpb24KYmVzdCBhbmltZSBjaGFyYWN0ZXIgZGVzaWduCnJvY29jbyBhcmNoaXRlY3R1cmUKbWFnaWNhbCBwb3dlcnMKdmlicmFudCBmZWVsCmNvbG9yIGluayBleHBsb3Npb24KYmVhdXRpZnVsIHNwZWN0cnVtIG9mIHZpYnJhbmN5CnNpZ21hIDI4bW0KYm9iIHBlcHBlcgpoZWFsdGggcG90aW9uCmluZmVybmFsIGVuaWdtYQpkcmFtYXRpYyBzaGFycCB0aG9ybnMKZ3JhbmRldXIKdG9tYnN0b25lCmhlY2F0ZQpwbGFuZXQgc2F0dXJuCmhhdmluZyBhIGdyZWF0IHRpbWUKcmVkIGZpcmUgZXllcwp0b3lrbwpwbHVtZSBtYWRlIG9mIHNlYXdlZWQKaGVucnkgY2F2aWxsIGFzIGdlcmFsdCBvZiByaXZpYQpoZW5yeSBjYXZpbGwgYXMgYSBncmVlayBnb2QKaGVucnkgY2F2aWxsIGFzIGEgc3BhY2UgbWFyaW5lCmJhcmUgdGhpZ2hzCnNjcmVlbnNob3QgNGsKY2luZW1hdG9ncmFwaHkgNGsKZHJlc3NlZCBiZWF1dGlmdWwgZ293bgptb3Rpb25sZXNzLiBhd2FyZCB3aW5uaW5nCm1hc3RlciBhcnRpc3QKaGV0IG1laXNqZSBtZXQgZGUgcGFyZWwKaGkKdGFsbCBwaW5lIHRyZWVzCmhvbGRpbmcgYSDwn5uhIGFuZCBhbiDwn6qTCmNvbG9yZnVsIGhvdXNlcwppbiBzdHlsZSAxOSBjZW50dXJ5CmVtZXJhbGQgZWFycmluZ3MKaGlsbGFyeSBjbGludG9uIGJlaGluZCBiYXJzCmhpbmF0YSBoeXVnYQptb20ncyBzcGFnaGV0dGkgaGUncyBuZXJ2b3VzCjE5MTEKZ2FtZSByZWFkeQpob2NrZXkgYXJlbmEgZ2FtZSBpbGx1c3RyYXRpb24KdGhlcmUgaXMgYSBjaWdhciBpbiBoaXMgbW91dGgKdmlldyBmcm9tIHRoZSBsYWtlCmhvbGxvdyBrbmlnaHQgY29uY2VwdCBhcnQKYnVyZ2VyIGtpbmcKcG9yY2hlcwphd25pbmdzCm1pZGRsZSBvZiBzcGFjZQpwb2xpdGljYWwgY2FydG9vbiBzdHlsZQp3ZWFyaW5nIGJsYWNrIGhlYWRwaG9uZXMKaG9tZXIgc2ltcHNvbiBhcyBhIHJlYWwgcGVyc29uCnN0aWxsIGZyb20gdGhlIHNob3cgYnJlYWtpbmcgYmFkCmp1c3QgYSBjdXRlIGxpdHRsZSB0aGluZwptYXJnZQo2NHg2NApibG9vZDsgZGFyayBjaW5lbWF0aWMgbGlnaHRpbmcKaG9yc2Ugd2hpc2tlcnMKdHJvcGh5IHRydWNrCjIwMTUgYWxmYSByb21lbyA0YwpzdXByYQpob3QgZG9nCnNraW4gb2YgZmxhbWVzCnJvYm90aWMgbGVmdCBhcm0KYmxlbmRlciByZW5kZXIgCmFyY2hpdGVjdHVyYWwgcGhvdG8KdWx0cmEgOGsgcXVhbGl0eQp3b2x2ZXJpbmUgYXRlCndvb2R5J3MgaG9tZXdvcmsKaHVtYW4gOjogc29yY2VyZXNzCmRpc3RyYXVnaHQKc2l0dGluZyBpbiBhIG1vdmllIHRoZWF0ZXIKaHVtYW4gZmxlc2gKZGVzaWduZXIgc3VuZ2xhc3Nlcwpib2R5YnVpbGRlciBwaHlzaXF1ZQptYWplc3R5IGluIG5vYmxlIGNsb3RoZXMKc2tlbGV0b24ga25pZ2h0Cmh1bWFuIHNraW4gdGV4dHVyZQpodW1hbiB3aXRoIG9uZSByb2JvdCBleWUKdGFiYXhpIG1vbmsKd2l0aCBibGFjayBob3JucyBpbnN0ZWFkIG9mIGVhcnMKYmF0dGxlIGdhcm1lbnRzCnNsZWVrIHJvYm90Cm9uIHRoZSBzaWRld2FsawoxODg0CmJpb2RpdmVyc2l0eSBhbGwgcm91bmQKbmVydmVzIGFuZCBtdXNjbGVzCmV4dHJlbWUgZGV0YWlsIHJlc29sdXRpb24KemVpc3MgMThtbSBmMi44CmdvbGQgZHJpcHBpbmcgaW4gc3BpcmFsCmFuY2llbnQgZmFpcnkgZHVzdAp0ZW50IGFyY2hpdGVjdHVyZQp2ZXJ5IHdpZGUgYW5nbGUgc2hvdAp3YXJyaW9yIG1hbgpsaXR0bGUgbWVybWFpZApoeXBlcnJlYWxpc3RpYyByb2JvdCBvd2wKYWJhbmRvbmVkIHJ1aW5zCndpdGggbm8gbW91dGgKZmVlZHMgb24gZXZlcnl0aGluZwp0aGUgYmVnaW5uaW5nIGFuZCB0aGUgZW5kCmphbWVzIGplYW4hCnRyZW5kaW5nIG9uIGF0dGVzdGF0aW9uCmNvbG9yZnVsIHNjaS1maSBzdGVhbXB1bmsKZGllc2VscHVuayBiaW9sb2dpY2FsIGxpdmluZwppIHRoaW5rCmV4dHJlbWVseSBnZW5kZXJlZApjeWJlcnB1bmsgd2l0aCBuZW9uIGxpZ2h0aW5nCmxvbmVseSEhIHN0b3AgbGlnaHQgZ2xvd2luZwphcHBsZSBkZXNpZ24KY2Vzc25hCmhvbGRpbmcgd2Fsa2luZyBzdGljawppY2UgdGVhIGluIGEgbWFzb24gamFyCjEybXB4CmljaGlnbyBrdXJvc2FraQppZHJpcyBlbGJhIGFzIGphbWVzIGJvbmQKbWFuIHR1cm5pbmcgaW50byBwb255CnZvbHVtZXRyeSBzY2F0dGVyaW5nCnZvbHVtZXRyeSBzY2F0dGVyaW5nIGludG8gc3BhY2UKaW1wZXJpYWwgc3RhciBkZXN0cm95ZXIKaW1wb3NzaWJsZSBvYmplY3QKZGltbWVkIGxpZ2h0CnRoZSBzdW4gaXMgYmxpbmRpbmcKaW4gYSBtZWV0aW5nIHJvb20KdGhlIG51Y2xldXMKaW4gZnJvbnQgYW5kIGJlaGluZApvY3RhbmUgcmVuZGVyIGRldGFpbGVkCmNhcGlsbGFyaWVzCmluZGlhbiBzdXBlciBtb2RlbAppbmRpZWNyYWZ0IGFlc3RoZXRpYwppbmZpbml0ZSBtaXJyb3JzCmluZmluaXR5IHN5bWJvbAppbmZvZ3JhcGhpYyBvZiBzcGFjZSB0cmF2ZWwKaXNvIDEyNQrwn5SlIPCfmI4g8J+Vue+4jyDwn5GAIDoyCndobyB3YXMgYm9ybiBpbiB0b2t5byBpbiAxOTY0CiEhcGxheWluZyBjaGVzcyEhCnN0ZWFtcHVuayBpbnNlY3QKYWxpZW4gYXV0b3BzeQppbnNpZGUgYW4gb2xkIG1hZ2ljYWwgc2hvcApsYXJnZSBzd2VldCBqYXJzIG9uIHNoZWx2ZXMKYmVhdXRpZnVsIGJyYW5kIGxhYmVscwphemltb3YKaW5zcGlyZWQgdG9tIGJhZ3NoYXcKZHluYW1pYyBzaGFkaW5nCmludGVybmF0aW9uYWwgc3BhY2Ugc3RhdGlvbgppbnRlcnBsYW5ldGFyeSBjYXRoZWRyYWwKaW50byBkYXJrZXN0IGNvc21vcwozNW1tIHdpZGUgYW5nbGUgc2hvdAppbnRyaWNhdGUgYSB3aG9sZSBmYW50YXN5IGxlYWYKd2lkZSBzY3JlZW4gZm9ybWF0CmRlZXAgc2hhZG93cyBhbmQgYm9rZWgKZWxzCmZseWluZyBzYXVjZXJzCmxhc2VyIHdlYXBvbnMKcsOpYWxpc21lCnJhY2hlbCB3YWxwb2xlIGFydAppcm9uIGdpYW50IGF0IHN1bnNldApnb2xkZW4gaG91ciBzdW4KaXJvbiBtYWlkZW4gYWxidW0gY292ZXIKdGhlIGFwcGxlIGFuZCB0aGUgbW9vbgpzZWNyZXQgbGFiCnBsYW5lc2NhcGUgdG9ybWVudApmaXNoIGluIHRoZSBiYWNrZ3JvdW5kCm1hdGUKc3RpbGwgZnJvbSBhbmltZQppbiB0aGUgc3R5bGUgb2YgYmxhZGUgcnVubmVyCmpmawpqYWJiZXJ3b2NreQpqYWNrIGJsYWNrIGhvbGRpbmcgYSBoYW1idXJnZXIKZnJvemVuIGlpIG1vdmllIHN0aWxsCmFuaW1hdGVkIGNpbmVtYXRvZ3JhcGh5Cm1pbm5lYXBvbGlzCndpZGUgZnVsbCBib2R5CmphY2tpZSBjaGFuCnNjcmliYmxlcyBiaW9wdW5rCmphaXIgYm9sc29uYXJvCnJ1YW4gY3V0ZSB2dHViZXIKY2luZW1hdGljIGxhaW4gZnJhY3RhbCBsYWluCmFuaW1lIGx1c2ggam9obiA4ayB3b29kcwpnaXJsIGRlc2lnbiBsdXNoIGhvcm5zCm5vIGhkCmF1cmEgamFyZWQgYW5kIHdpcmVzCmphcGFuIGdydW5nZXJvY2sgZnJvbSBjb2xvcnMKb2Ygcm9tYW50aWNpc20gYSBjZW50ZXIgaW1hZ2UKcmVjdXNpb24gYmVlcGxlCml3YWt1cmEKYW5pbWUgY29uY2VwdCBoZHIgYW5pbWUgbWFjbWFudXMKYmVhdXRpZnVsIGl3YWt1cmEKdW5yZWFsIHdpdGggb24gZ3JhZGllbnQKZ2xvd2luZyBhZXN0aGV0aWMKZnVzIHJlaQp0cmFuc3BvcnRhdGlvbiBkZXNpZ24gcmVuZGVyCm5ldyBob3Jyb3IgbW92aWUgYWR2ZXJ0aXNpbmcKamFuIG1hdGVqa28gYW5kIGouZGlja2Vuc29uCmFydHdvcmsgZW1wdHkgZGF5bGlnaHQKcG9yY2VsYWluIGphcGFuZXNlIG1hbm5lcXVpbnMKc2Nob29sIGNsYXNzcm9vbQp0b3JpaSBpbiBhIG1vdXRhaW4gd2l0aCB0cmVlcwppbiBzdHlsZSBvZiBrYXIgd2FpIHdvbmcKcGlyYXRlIHNoaXBzCmluIHZvbHVtZXRyaWMgbGlnaHRpbmcKamFxdWV0IGRyb3oKbWFuZGVsYmx1YiBmcmFjdGFsCmludHJpY2F0ZSBjaGFyY29hbCBpbGx1c3RyYXRpb24Kb25seSBvbmUgcGVyc29uIGluIGZyYW1lCnVwLWNsb3NlCmZsb3dpbmcgc2FrdXJhLWNvbG9yZWQgc2lsawpmYWludCBsaWdodApqZWVwIHdyYW5nbGVyCmplZmYgdGhlIGtpbGxlcgpkYyBhcnQKcGlsZXMgb2YgdHJhc2gKYnJpZ2h0IGdvbGQgZXllcwpqZW5uaWZlciBjb25uZWxseSBhcyBhIHN0dW5uaW5nCmRpc25leSBtb3ZpZQpkcm9nb24KYm9iIHJvc3Mgc3R5bGUKZnJhY3RhbCBzeXN0ZW0gY2lyY3VpdAp2aW5jZW50IHZhbiBnb2doIHBhaW50aW5nCnNjYXJ5IGxpZ2h0bmluZwpqZXJyeSBnYXJjaWEKb3dsIHN0dWRpbwpqZXNzaWNhIG5pZ3JpCmluIHRoZSBnYXJkZW4gb2YgZWRlbgptaWdodHkgbmVpbgpqZXN1cyBjaHJpc3QgZmlnaHRpbmcgbHVjaWZlcgpqZXN1cyBjaHJpc3QgZ29pbmcgc3VwZXIgc2FpeWFuCnZlcnkgc2hhcnAgYW5kIGRldGFpbGVkIGltYWdlCm9ydGhvZG94IGljb24KamVzdXMgb24gdGhlIGNyb3NzCmplc3VzIHdhc3RlZCBhdCBhIHBhcnR5CmpldHQgZnJvbSB2YWxvcmFudAphY2N1cmF0ZSBqaW1pbiBmYWNlCmppbSBjYXJyZXkgYXMgamFjayBzcGFycm93CmppbSBjYXJyZXkgaW4gZ2VhcnMgb2Ygd2FyCnVucmVhbCBlbmdpbmUgY2hhcmFjdGVyIGFydApibGFjayB0byBibHVlIGZhZGUgaGFpcnN0eWxlCmpvZGllIHdoaXR0YWtlcgpjb2xvcmZ1bCB1bmlmb3Jtcwpqb2UgYmlkZW4gYWN0aW9uIGZpZ3VyZQpkaXJlY3Qgd2FybSBsaWdodGluZwpoaWdoIGdyYXBoaWNzCmpvZSBiaWRlbiBhcyBiYXRtYW4KaGFyZCBoYXQKdHJhbnNmb3JtaW5nIGludG8gaGlzIGZpbmFsIGZvcm0Kam9lIGJpZGVuIGRyZXNzZWQgYXMgYSBkaW5vc2F1cgpqb2UgYmlkZW4gZnVsbCBib2R5IHNob3QKZGV0YWlsZWQgem9vbSBwaG90bwp0cmljayBvciB0cmVhdAptb2QKam9lIGJpZGVuIGluIGhlbGwKam9lIGJpZGVuIGluIHZhbG9yYW50CmpvZSBiaWRlbiBraXNzaW5nIGRvbmFsZCB0cnVtcAppbiBhIG5pZ2h0Y2x1Ygpqb2UgYmlkZW4gd2l0aCBnbG93aW5nIGV5ZXMKam9lIGJpZGVuIHdpdGggZ2xvd2luZyByZWQgZXllcwpleHRyZW1lIGZlYXIKam9lIGJpZGVuIHNjcmVhbWluZwppIHJlYWxpemUKdWx0cmEgcmVhbGlzdGljIG9pbCBwYWludGluZwpsb29raW5nIHVwLiBwb3BwaWVzCmpvaG4gbGFzc2V0ZXIKam9obiBvbGl2ZXIgaW4gdGhlIHJhaW4KbmV3c3BhcGVyIGNsaXBwaW5ncwpqb2hubnkgZGVwcCBhcyB0aGUgam9rZXIKam9rZXIgbG9va3MgbGlrZSBuYXJ1dG8Kam9rb3dpCmZ1amlmaWxt4oCdCmJsYWNrIGV5ZSBwYXRjaCBvdmVyIGxlZnQgZXllCmpvc2lwIGJyb3ogdGl0bwpqdWxpYSByb2JlcnRzCmZsb29kaW5nCmNmZz01MApncmFmZml0aSBvbiB0aGUgd2FsbApqdXJnZW4ga2xvcHAgbGF1Z2hpbmcKanVzdGluIHN1bgpqw7ZybXVuZ2FuZHIKbWljaGVsaW4gcmVzdGF1cmFudApiZWF1dGlmdWwgc3Vycm91bmRpbmdzCnNpbGVudCBoaWxsIGxhbmRzY2FwZQprYWlqdSB0b3dlcmluZyBhYm92ZSBuZXcgeW9yawprYWxhZGVzaCBjb25jZXB0IGFydC4gbWVjaGFuaWNhbAp0ZWNobm8gb3JnYW5pYyBhcm1vcgpjYW5vbiBlb3MgNWQgbWFyayAyCmZvY2FsIGxlbmd0aDogMTYwLjAgbW0KaXNvOiAxNjAwCnBob3RvIDE5NjAKa2FybCB1cmJhbiBhcyBhIGRyYWdvbnNsYXllcgp3ZWFyaW5nIGRhcmsgcHVycGxlIGFybW9yCmRyYWNvbmljIGRlc2lnbgpob2xkaW5nIGEgd2FyIGhhbW1lcgptYW1vcnUgdXNoaWkKa2Vua3UKa2VudGFybyBtaXVyYSBhcnQKa2VybWl0IGRyZXNzZWQgYXMgdGhlIHVuZGVydGFrZXIKZHJhbWF0aWMgZW52aXJvbm1lbnQKa2V2aW4gYmFjb24gbWFkZSBvdXQgb2YgYmFjb24Ka2V2aW4gZ2FybmV0dAprZXZpbiBydWRkCmtob3JpbmlzCmhhdHJlZApraWQgbmFtZWQgZmluZ2VyCnBob3RvIHRha2VuIG9uIGFuIG9sZCBib3ggY2FtZXJhCmtpa2lzIGRlbGl2ZXJ5IHNlcnZpY2UKaGVhZCBzdHJhaWdodCBkb3duCmluIHN1biBnbGFzc2VzCmtpbSBqb25nLXVuCjM1bW0gcHJpbnQKZ2hldHRvCmNpZ2FyZXR0ZSBpbiBoYW5kCnhlcm9ncmFwaHkKa2luZyBpbiB5ZWxsb3cKYW1lcmljYW4gZ290aGljIGludGVyaW9yCm5pZ2h0dGltZSBzY2VuZQpraXJpdG8Ka2l0YXZhIGluc2F0aWFibGUgaHVuZ2VyCnBpc3RvbHMKdW5rb3duIHllYXIKaW1ldDIwMjAKbmF0aW9uYWxnYWxsZXJ5b2ZhcnQKbWV0bXVzZXVtCmFydHJlcwphcnRzdHlsZXVua25vd24KaW5zaWRlIGxhcmdlIHdpbmRvdyBvZiBzaGlwCnNwYWNlc3VpdCB3aXRoIHNtYWxsIGxlZCBsaWdodHMKZ2FtbWEKaW4gc3R5bGUgb2YgY2VjaWwgYmVhdG9uCm1lZXQgdGhlIGFjdG9yIGJlaGluZCB0aGUgc2NlbmVzCmxha2Ugc2NlbmUKa29yZWFuIHdvbWFuCndvb2Ygd29vZgprcmlzdGVuIGJlbGwgYXMgYSBtZXJtYWlkCmt1cmRpc2ggbGF3eWVyCnRhbGwgcHVycGxlIGFuZCBwaW5rIHRyZWVzCnBhbGUgYmx1ZSBmb2cKZXllcyBpbiB0aGUgdHJlZXMKa3lsaWUgbWlub2d1ZQpsYXJyeSBkYXZpZApsYWRpZXMKbGFkeSBnYWdhIGFzIGV2aXRhCmxhZHkgZ2FnYSBhcyBwcmVzaWRlbnQKbGFkeSBnYWdhIHByZXNpZGVudCBvZiBhcmdlbnRpbmEKZ29yZ2VvdXMgbGF0aW5hIGZhY2UKcGxhbmV0IHVyYW51cwpsYW1ib3JnaGluaSBjb3VudGFjaApicmFzcyBhbmQgc3RlYW0gdGVjaG5vbG9neQpsaXZpbmcgZmxvcmEKc3ByaWdnYW5zCmh1bWFub2lkIGZsb3JhCnNvbGl0dWRlIHNlZW4gaW4gdGhlIGRpc3RhbmNlCmhhYWZpbmdhciBob2xkCmdyZWVuIGN5cm9kaWlsIHBsYWlucwphZnRlcm1hdGggb2YgYSBodWdlIGJhdHRsZQpqdW5nbGUgZ293bgpzdHlsZSBvZiByYWZhZWwgcGF2YXJvdHRpCm90aGVyIHNtYWxsZXIgYnVpbGRpbmdzCmZhc2hpb24gc2hvb3QgOGsKbGFzIHZlZ2FzIHN0cmlwCmxhc3Qgb2YgdXMKcG9zdCBhcG9jYWx5cHRpYyB2aWV3CmxpdGhvZ3JhcGggcHJpbnQKYXdhcmQgd2lubmluZyBhbmltYXRpb24KZ3V5IHVzaW5nIHRoZSBwdXJwbGUgZmFuY3kgc3VpdApsYXV0ZXJicnVubmVuIHZhbGxleQpvbiBkYXJrIHBhcGVyCm1hZGlzb24gc3F1YXJlIGdhcmRlbgpqaW1teSBwYWdlCmxlZnQgNCBkZWFkIDIKYWVzdGhldGljIGN5YmVycHVuawpsZW1vbiB3ZWFyaW5nIHN1bmdsYXNzZXMKcGFpbnRpbmcgYnkgYW5kcm9pZCBqb25lcwpsZW9uYXJkIG5pbW95CnNpY2h1YW4KaGlnaCByZXNvbHV0aW9uOjogZ2lsIGVsdmdyZW4KbGlhbSBuZWVzb24gYXMgYnVybCBnYWdlCmxpYW0gbmVlc29uIHZlcnN1cyBnb2R6aWxsYQpsaWFtIG5lZXNvbgphZHZlcnNpdGVtZW50CnBob3RvcmVhbGlzdGljIG9jdGFuZSAzZCByZW5kZXIKc2FuZCBhcnQgYm90dGxlCnRlcnJhcml1bQpsaW1teQpsaW5rIHRoZSBtb3ZpZQpsaW9uIGluIGEgbWVhZG93IHdpdGggaG9ybmJlYW0KbGlvbiByZXN0aW5nIGluIHRoZSBzaGFkZQpsaW9uZWwgbWVzc2kgYXMgYSBtdXBwZXQKbGlvbmVsIG1lc3NpIHBvcnRyYWl0Cmxpc2EKY2FydG9vbmlzaCBzdHlsZQpyb2FkIGludG8gdGhlIGZvcmVzdCB3aXRoIGEgbGFrZQpicm93biBkYXJrIGhhaXIKY2VudGVyIGZvY3VzIG9uIHRhYmxlCmxhcmdlIHdpbmRvd3MgdG8gZnJlbmNoIHRvd24KbGl6YXJkIHBlcnNvbgpsaXp6bwpsb2JvCmxvY2ggbmVzcyBtb25zdGVyCmxvZmkgcG9ydHJhaXQgYXQgYSB3aW5kb3cKd2FybSBmaXJlcGxhY2UKcmVkIGFuZCB3aGl0ZSBjb2xvcnMKbG9nbyBmb3IgbHVuY2ggZGVsaXZlcnkKbG9saXRhCmxvbmRvbiBzb3V0aCBiYW5rCmZ1bGwgZ3Jvd3RoIGZyb20gdGhlIGJhY2sKZmlyZXkKMTkzMwp2aWV3IGZyb20gYm90dG9tIHRvIHRvcApzbm93eSBwbGFpbnMKY292ZXJlZCBpbiBmYWxsZW4gbGVhdmVzCm1hY2hpYXZlbGxpYW4KbG9yZCBvZiBjaGFuZ2UKZmlyZSBhbmQgc21va2UgY29sdW1ucwpsb3R1cyBtYW5kYWxhCmxvdW5nZQpwYXVsIHRob21hcyBhbmRlcnNvbgpsdWNpbyBhcyBhIHdvbWFuCmx1Y3kgbGl1IHBvcnRyYWl0Cmx1Y3kgaW4gdGhlIHNreSB3aXRoIGRpYW1vbmRzCmx1ZmZ5IGFzIGEgbWFyYmxlIHN0YXR1ZQpzZXF1ZWwgdHJpbG9neSA4MHMKa29kYWsgc3RvY2sKbHVuYXRpYyBhc3lsdW0KZmxvYXRpbmcgaW4gYSBuZWJ1bGEKbHV4Cm11Y2hhIG0uIGMuIGVzY2hlcgpyb3VnaCB0ZXh0dXJlcwpodW1hbiBmYXJtCndpdGggYSBkcmFtYXRpYyBsb29raW5nCmtvZGFrIDUyMTkKbWlsZgpzYW5pYwp3ZWFyaW5nIGEgZ29sZGVuIGhhbG8KbWFjZ3VpcmUgaXMgYSB0YWxsCm1pbmlhdHVyZSBjb3Ntb3MKY3liZXJuZXRpYyBjdWx0dXJlIHJlc2VhcmNoIHVuaXQKbWFkIG1heCBiYXR0bGVtZWNoCnNpZGUgdmlldyBwcm9maWxlCmxvb2tpbmcgc2lkZXdheQpibGFjayBhbmQgd2hpdGUgY2luZW1hdG9ncmFwaHkKbWFnZ2llIGNoZXVuZwptYWluIGNvbG91ciAtIGJsYWNrCnNlY29uZCBjb2xvdXJzIC0gcHVycGxlCm1hZ2ljIHN0b25lCmx1c2ggZXZlcmdyZWVuIGZvcmVzdApiaW9sdW1pbmVzY2VudCBtdXNocm9vbXMKbWFnaWNhbCBnbG93aW5nIHNwaGVyZSBpbiBtaWRhaXIKdGFibGUgaW4gZnJvbnQgd2l0aCBhIGN1cApzd29yZCBhbmQgd2FuZCDigJMgd2F0ZXIKYWlyIGFuZCBmaXJlCnVubGltaXRlZCBwb3RlbnRpYWwKbWFsYXlhbGlzIGF0dGFja2luZwpwcm9mZXNzaW9uYWwga29kYWsgbGVuc2VzCnN0ZWlucyBnYXRlCndlYXJpbmcgYmxhY2sgbGVhdGhlciB0cmVuY2hjb2F0Cm1hbiBiZWFyIHBpZwppY3kgbW91bnRhaW5zCmdhdGVrZWVwZXIKcG9seW1lciBjbGF5IGVhcnJpbmdzCm1hbmdhIHBhbmVscwpvZmZpY2UgYmFja2dyb3VuZAptYXAgb2YgZXVyb3BlCm1hci1hLWxhZ28gZmJpIHJhaWQgbGVnbyBzZXQKbWFyY2VsaW5lIGZyb20gYWR2ZW50dXJlIHRpbWUKbWFqZXN0aWMgZm9yZXN0IGdyb3ZlCm1hcmdvdCByb2JiaWUgYXMgY2FwdGFpbiBhbWVyaWNhCnN1biBzaGluZXMgaW4gdGhlIHNreQpibG9vZCBpbiB0aGUgc2VhaGlnaGx5CmZhY2lhbCBzY2FyCm1hcmdvdCByb2JiaWUgaW4gZ3RhIHYKei1icnVzaCBzY3VscHQKbWFyZ290IHJvYmJpZSBvbiB0aGUgYmVhY2gKbWFyaWEgY2FsbGFzCm1hcmlhbm8gcmFqb3kKbWFyaWp1YW5hIHBob3RvZ3JhcGh5CnBhcGFyYXp6aSBwaG90b2dyYXBoeQptaWNoYWVsIHBhcmtlcwpleHF1aXNpdGUgcXVhbGl0eQpyZWFsLWxpZmUKbWFyayBlIHNtaXRoCmFtYXppbmcgcGFpbnRpbmcKbWFyayB0d2FpbgptYXJrIHp1Y2tlcmJlcmcgYXMgY2F0d29tYW4KbWV0cm9wb2xpdGFuIG11c2V1bSBvZiBmaW5lIGFydApibGFjayBhbmQgeWVsbG93IHRyYWNrc3VpdAphbmltYXRpb24gcGl4YXIgKDIwMTgpCmFuaW1hdGVkIGVwaXNvZGUgc3RpbGwKbWFya2lwbGllciB3aXRoIGEga25pZmUKbWFycyBjaXR5CmJsdWUgYW5kIHllbGxvdyBzcGlkZXJtYW4Kdm9sdW1lIHJheXMKcG9ydHJhaXQgb2YgbWFjaGluZSBtYW4KY29sb3JmdWwgYWVzdGhldGljCm9ybmF0ZSB3b29kCmRyZXNzZWQgdGhvYmUKZ2h1dHJhIGFuZCBlZ2FsCnBhcnRpYWwgcm9ib3RpYyBib2R5Cmxvb2tzIGxpa2UgeW91bmcgbGl2IHR5bGVyCmVxdWF0aW9ucwpsaWdodG5pbmcgZnJvbSBhYm92ZQoxNzU5Cm1jZG9uYWxkcyB3cmFwcGVyIG9uIHRhYmxlCm1jbGFyZW4gZjEKd2l0aCBsYWJlbHMuIGhpZ2ggcXVhbGl0eQpwYWludGVkIGluIDE1MzAKbWVkaWV2YWwgcHJpbmNlc3MKdGVjaG5vLW9wdGltaXNtCnNuZWVyCndyYXBwZWQgaW4gY2FibGVzIGFuZCBmbG93ZXJzCndlYXJpbmcgaGVhZHNldApsb3cgY3V0IHRvcAptZWdhcmEKY2luZW1hIHBvc3RlcgptZW5nZXIgc3BvbmdlCmR2ZApsaWdodCBzZW5zb3IKd2luZWdsYXNzCm9jdGFuCm1lc3NpIGR1bmtpbmcgb24gcm9uYWxkbwpleHByZXNpdmUgYnJ1c2gKc3RpbGwgaW1hZ2UgZnJvbSB0diBzZXJpZXMKc3RpbGwgZnJvbSB0aGUgbWF0cml4ICgxOTk5KQptaWNoYWVsIGphY2tzb24gYXMgc3BpZGVybWFuCmxvb2sgb2YgaGF0ZQp3aWRlIGFuZ2xlIDE5ODEKd2VhcmluZyBhIGJsYWNrIG5vYmxlIHN1aXQKbGVhdGhlciBjb3VjaAptaWQtc2hvdCBvZiBhIGh1bmt5CnN0cm9uZyBibHVlIGFuZCBvcmFuZ2UgY29sb3JzCjMwLXllYXItb2xkIHdvbWFuIGZyb20gY3ViYQp3aXRoIGJld2l0Y2hpbmcgZXllcwptaWRkbGUgLSBlYXJ0aAptaWtlIHdhem93c2tpCm1pbGEgam92b3ZpY2ggYXMgc3BpZGVyd29tYW4KY2luZW1hdGljIGRpZ2l0YWwgYXJ0CmdsYXNzIGJhbGwKbWluZWNyYWZ0IGNha2UKbG90cyBvZiB3aW5kb3dzCnNoZWx0ZXJpbmcgdW5kZXIgYSBsZWFmCm1pbmlvbiBhcyBsb3ZlY3JhZnQncyBtb25zdGVyCm1pbmlvbiBnaXZpbmcgYSB0aHVtYnMgdXAKbWluaW9uIHdpdGggbWFueSBtYW55IG1hbnkgZXllcwpnaG9zdCBpbiB0aGUgc2hlbGwgc3R5bGUKbWlub3RhdXIgd2FycmlvciB3aXRoIGF4ZQpidWxsIGhlYWQKbWlzYXRvIGthdHN1cmFnaQptaXNzIGZvcnR1bmUKbWlzdGJvcm4KcG9rZWJhbGwKbWlzdHkgbW91bnRhaW5zCmxvdyBwb2x5IDNkIG1vZGVsCmJsYWNrIGFuZCB3aGl0ZSkKZ3JlZW5lcnkgZ3Jvd2luZwp3aGl0ZSBwbGFuayBzaWRpbmcKZ2FsdmFsdW1lIG1ldGFsIHJvb2ZpbmcKc2ltcGxlIGdhYmxlIHJvb2ZzCm5hcGEKbW9kZXJuIGhvdXNlIG1hZGUgb2YgdHJlZQphdCB0aGUgc2FsYXIgZGUgdXl1bmkKbW9uYSBsaXNhIHBhaW50aW5nCm1vbmEgbGlzYSB0YWtpbmcgYSBzZWxmaWUKcm9rb2tvCm1vbmtleSBkIGx1ZmZ5CnVuaW1hZ2luYWJseSBodWdlCm1vb21pbnMKc3VubnkgZGF5IGJhY2tncm91bmQKYXRtb3NwZXJpYyBsaWdodGluZwppbnRlbnNlIGJsYWNrIGxpbmUgYXJ0Cm1vcnR5IGZyb20gcmljayBhbmQgbW9ydHkKcGVvcGxlIGFyZSBwYW5pY2tpbmcKbW91bnRhaW4gbGFrZSBpbiBzaWVycmEgbmV2YWRhCm1vdW50YWluIGxha2UKaW4gYSBwb3Rpb24gc2hvcHBlCmNvbG9yZnVsIGJvdHRsZXMgYW5kIHBsYW50cwphd2Vzb21lIGFuZCBtb29keQp3aW1tZWxiaWxkCmNoYXIKbW92aWUgcG9zdGVyIG9mIHN0cmVldCBmaWdodGVyCmhhZG91a2VuCnN1aXRzCnRodW1iIHVwCm9wZW5pbmcgc2NlbmUKbXIgYmVhbiBhcyBjYXB0YWluIGFtZXJpY2EKbXIgYmVhbiBhcyBzcGlkZXJtYW4Kai5kaWNrZW5zb24gYW5kIHJlbWJyYW5kdApjaW5lbWF0aGljIGxpZ2h0cwphcyBhIHNvbG9tb24ga2FuZQpvbWFoYSBiZWFjaApob2xkaW5nIGNpZ2FyCm11ZmZldCBmcm9tIHVuZGVydGFsZQptaXggb2YgYWVzdGhldGljcwp0cm9sbCBmYWNlCnVmb2xvZ3kKcHJpbWV2YWwganVuZ2xlCmRlc3Ryb3llZCBtb3VudGFpbnMKY2hyb21lIG1pbGl0YXJ5IGJhc2UKbXVzaHJvb20gY2l0eQppbiBhIGJlYWNoZnJvbnQgZW52aXJvbm1lbnQKbXlzdCBpc2xhbmQKbmFjaG8gbWFuIHJhbmR5IHNhdmFnZQpicmlnaHQgYW5kIGJlYXV0aWZ1bApwbGF5aW5nIGNvbXB1dGVyIGdhbWVzCm5hcG9sZW9uIGR5bmFtaXRlCm5hcmFzaW1oYQpuYXJlbmRyYSBtb2RpCndhdnkgaGFpcnN0eWxlCm5hdGFsaWUgcG9ydG1hbiBhcyBjYXR3b21hbgppZmJiIGZpdG5lc3MgYm9keQp3ZWFyaW5nIGJhc2ViYWxsIGNhcAplcGljIHdpZGUgYW5nbGUKc3RhbmRpbmcgbmV4dCB0byBqb3NlcGggc3RhbGluCmhhaXIgbWFkZSBvZiB0cmVlcwp0d2luIHBlYWtzIG1vdmllIHBvc3RlcgpjbG9zZSByaXZlciBiYW5rCnRhbGsgc2hvdwpuZWNvIGFyYwpmbHlpbmcgaGFpcgpwYXVsIGxlaHIgYW5kIG0uIGMuIGVzY2hlcgpuZW9jbGFzc2ljYWwgcG9saWNlIHN0YXRpb24KbmVvY2xhc3NpY2FsIHRvd2VyIHdpdGggZG9tZQpzY2ktZmkgZnV0dXJpc3RpYwphcyB3ZWxsIGFzIHNjcmF0Y2hlcwpnb2xkZW4gZWxlbWVudHMKZGVtb24gYW5pbWUgZ2lybApuZXp1a28tY2hhbgpjb3B5cmlnaHQgdG16Cm5pY2sgY2F2ZSBwb25kZXJpbmcgaGlzIG9yYgpuaWNrIHdpbGRlIGZyb20gem9vdG9waWEKbXVsbGV0IGhhaXJjdXQKYWVzdGhldGljIHBvcnRyYWl0Cm5pZ2h0IHNreSB3aXRoIG1hbnkgbWV0ZW9yaXRlcwpkYXJrbmVzcy4gZGFyawpuaWdodG1hcmUgd29ybGQKZGVlcCBpbiB0aG91Z2h0CnVsdHJhIGRldGFpbGVkIHBhaW50aW5nCm5vIGNoYXJhY3RlcgptYW4gd2Fsa2luZyB0aHJvdWdoIGNpdHkKcGVhcmwgY2hva2VyCm5vcnJsYW5kc3Nrb2cKbm9ydGggaXNsYW5kIGJyb3duIGtpd2kKbm9ydGhlcm4gbGlnaHRzIGluIHNwYWNlCmNvbG9yZnVsIG5pZ2h0IHNreQpzdXBlciBjb25zY2lvdXNuZXNzCm5vdwpub3hpb3VzIHBvaXNvbiBkaWFwZXIKZGlhcGVyLXNoYXBlZAp2aWV3IG9mIHZpbGxhZ2VzCnRleHQgcG9zdGVyCm9iYW1hIHByaXNtCm9iYW1hIGFzIHRoZSBqb2tlcgptciBiZWFzdApvYmFtYSBpbiBmb3J0bml0ZQpoaWdoIGZpZWxkIG9mIHZpZXcKZ29sZGVuIGhvdXIgc2NlbmUKb2NlYW4gZ2lhbnQgY3JlYXR1cmUgYmxvb3AKb2NlYW4gdG8gdGhlIGhvcml6b24KYmVzdCBzaGFkb3cgcXVhbGl0eQoxODIwCjE4NTYKdXNhIGZsYWcKcmVhbGlzdGljIGJsYWNrIGFuZCB3aGl0ZQpvdHRvbWFuIHN1bHRhbgoxNjY2Cmphc29uIGVuZ2xlCm9rYWJlIHJpbnRhcm91Cm9sZCBnb2QKcm9ja3MgYW5kIG1ldGFsCnJpbS1saWdodApvbGl2aWEgY3VscG8Kb2xpdmlhIG5ld3Rvbi1qb2huCmdyZWVrIGFydApvbmUgcmFpbnkgZGF5Cm9vcHMKY3liZXIgY29wcGVyIHNwaXJhbCBkZWNvcmF0aW9ucwpjcmFnZ3kgbW91bnRhaW5zCm9zYW1hIGJpbiBsYWRlbiBmdW5rbyBwb3AKb3NpcmlzCmxpZ2h0IHJheXMgZnJvbSBhYm92ZQpvdmVyZ3Jvd24gc3RvbmUgY2F2ZQpvenp5IG9zYm91cm5lIGFzIGJhdG1hbgpwb2cKY2l0eSByZWZsZWN0aW9ucwpmaXJlIHBhcnRpY2xlcyBpbiBmcm9udApyYXRlZCB0IGZvciB0ZWVuCm1ldGFsIHBsYXRlIHBob3RvZ3JhcGgKbGlxdWlkIHBoeXNpY3MKdmlicmFudCBhdXR1bW4gY29sb3JzCnJpY2ggcGljdHVyZXNxdWUgY29sb3JzCmNvbGQgdG9uZSBncmFkaWVudCBiYWNrZ3JvdW5kCmRlc2VydCBzY2VuZXJ5CnBhaW50aW5nIG9mIGRvbmFsZCB0cnVtcAptYWNoaW5lcyBjb2NrdGFpbCBtdXNpYwpwYWludGluZyBvZiBhIGZvcmVzdApzb21lIGJvYXRzCnBhaXNpYmxlIG5pZ2h0IGxpZ2h0aW5nCnBhbGFzdCBkZXIgcmVwdWJsaWsgaW4gYmVybGluCjJkIGNvbmNlcHQgYXJ0CnBhbmRlbW9uaXVtCjUwKiBkZWdyZWUgdXAgZnJvbSB0aGUgaG9yaXpvbgpiaWcgY3VtdWxvbmltYnVzIGNsb3VkcwpwYXBhIGVtZXJpdHVzCnNldCBpbiB3dzIgZ2VybWFueQpwYXJhZGlzZSBnYXJkZW4gbWFzc2FnZQpncmVnIHJ1dGtvd3NpCmRyeSBncmFzcwp2aWN0b3JpYW4gYnVpbGRpbmdzCnBvcHVsYXIgc291dGgga29yZWFuIG1ha2V1cApjbG9zZWQgbW91dGggc2hvd2luZyBubyB0ZWV0aApbc2lyaXVzXQp3aGl0ZSBtb29uIGluIHRoZSBiYWNrZ3JvdW5kCnBhdWxpbmUgaGFuc29uIGFzIHRoZSBqb2tlcgpwYXcgcGF0cm9sCmludGVyc3RlbGxhciB2b3J0ZXggdGhyb3VnaCB0aW1lCnN1cGVyIG5vdmEgb2N0b3B1cwp3YXJyaW9yIGZpZ2h0aW5nIGluIGEgZGFyayBzY2VuZQpwZWVwIHRoZSBob3Jyb3IKY29udHJvbCBhcnQKcHJvZHVjdGlvbiBhcnQKcGVnZ3kgaGlsbApsYSBib3VjaGUgY291dmVydGUgZGUgc2FuZwphbmltZSBmYW50YXN5IGlsbHVzdHJhdGlvbgpkcm9uZSB3aWRlIHNob3QKb2xkIHBhaW50cwpzdHVkaW8gY2FtZXJhLiAzNW1tIGxlbnMKcGl0aCBoZWxtZXQKY2xvc2UtdXAgb24gbGVncwpyb3VuZGVkIGxpbmVzCnBlcnNpYW4gcXVlZW4Kc21vb3RoIGNsZWFuIHN1cmZhY2VzCnBldGVyIGN1c2hpbmcgYXMgdGhlIDEwdGggZG9jdG9yCnBldGVyIGdyaWZmaW4gYm9keSB0eXBlCnBldGVyIGdyaWZmaW4gZmFjZQpmYW1pbHkgZ3V5IHN0eWxlCnBldGVyIHBhcmtlciBhcyBzcGlkZXJtYW4KdWx0cmEtcmVhbGlzdGljIGdyYXBoaWNzCmdyaW1hY2luZwpjYXIgZHJpZnRpbmcKYW5pbWUgbGFuZCBvZiB0aGUgbHVzdHJvdXMKcGhvdG8gbWljcm9zY29wZQpzb21lIHN1biByYXkgb2YgbGlnaHRzIGZhbGxpbmcKc3Vuc2V0IHZpZXcKY2lyY2EgMTk3MApwaG90byBvZiBnZW5naGlzIGtoYW4Kc2xpbSB3YWlzdAptb3J0YWwga29tYmF0IDExCnBob3RvIG9mIHNjcC0xNzMKZW1lcmFsZCBqZXdlbHJ5CmJveCBicmFpZHMKYXV0b21vdGl2ZSBwaG90b2dyYXBoeQpwaG90byBvZiBhIGJlYXV0aWZ1bCB3b21hbgpibGFjayBib2R5CmJsYWNrIGFuZCB3aGl0ZSBmdXIKbG9jb21vdGl2ZQpqYXBhbmVzZSBhY3Rpb24gZmlndXJlCnllYXIgMTkzMApjYW5vbiA1ZCBtYXJrIGlpaQpoaXN0b3JpYyBtb21lbnQKbmV3c3BhcGVyIGFydGljbGUKbWVzc3kgc3Bpa2VkIHJlZCBoYWlyCmhlYXQgcmlwcGxlcwplbmdpbmVlcmVkCnBob3RvcmVhbGlzdGljIGhvbWVyIHNpbXBzb24Kc3R5bGUgb2YgY2xhdWRlIG1vbmV0CnJlZCB0YW5rIHRvcCBhbmQgd2lkZSBibHVlIHBhbnRzCjE2MDAgc291dGggYXp1c2EgYXZlbnVlCmNpdHkgb2YgaW5kdXN0cnkKa2RhIGFuZCBzYW0geWFuZwpldGhlcmVhbCBtaXN0CnB1c2gtdXAgdW5kZXJ3aXJlCndhdGVyc2NhcGUKY29vbCB0b3VzbGVkIGhhaXIKc2ltcGxlIGJpb25pYyBleHBsb2RlZCBkcmF3aW5nCmZ1bGwgb2Ygd29uZGVyZnVsIHRoaW5ncwp3aWVsZGluZyBhbiBheGUgb24gZWFjaCBoYW5kCm1peGVkIGxlYXRoZXIgYXJtb3IKYmx1ZSBjb2xvcmVkCnN0YXIgY3JhZnQKcGluaGVhZCBmcm9tIGhlbGxyYWlzZXIKc3VidGxlIGZvZwpwaXJhdGUgcXVlZW4KcmV0cm8gZ2FtZXMKNGJpdApncmVlbiBib2R5CnN0YXJkdXN0IGluIGF0bW9zcGhlcmUKcHVycGxlIGxpcXVpZApwb2NhaG9udGFzCnBvbGVhcm0KaGktcmVzIHNjYW4KaGlnaGx5IGRldGFpbGVkIGhkCnBvcnRhbCB0byBhbHRlcm5hdGl2ZSByZWFsaXR5CmRyYW1hdGljIGxpZ2h0aW5nIDhrIHJlc29sdXRpb24KcG9ydHJhaXQgZW1pbHkgcmF0YWprb3dza2kKdmljdG9yaWEncyBzZWNyZXQgbW9kZWwKcG9ydHJhaXQgdGlsZGEgc3dpbnRvbgpuNwp3aXRoIHJvYm90aWMgcGFydHMgb24gaGlzIGZhY2UKY2FibGVzIGNvbm5lY3RlZCB0byBoZWFkCnRoZSBlZ3lwdGlhbiBnb2QKcG9ydHJhaXQgb2YgYXZhdGFyIGtvcnJhCmJyb2tlbiBzdGFpbmVkIGdsYXNzIHdpbmRvd3MKaWxsdW1pbmF0ZWQgZm9yIHJheXMgb2YgbGlnaHQKcG9ydHJhaXQgb2YgY2hyaXN0eSByZW4KcG9ydHJhaXQgb2YgY2xvdWQgc3RyaWZlCmNpbmVsdXggYXNhIDEwMApuZW9uIHJpbSBsaWdodApwb3J0cmFpdCBvZiBnb2t1CnBvcnRyYWl0IG9mIGhhbmsgaGlsbAp0cm9qYW4gd2FyCnRlbmRzIHRvIGhhdmUgZnJhY3RhbCBzdHJ1Y3R1cmUKcG9ydHJhaXQgb2Ygam9obiBjZW5hCmlucXVpc2l0aXZlIGxvb2sKcG9ydHJhaXQgb2YganVsaWEgcm9iZXJ0cwpwb3J0cmFpdCBvZiBqdW5rcmF0CndlYXJpbmcgYmx1ZSBkcmVzcwpwaG90b2dyYXBoeSBzdHVkaW8KcG9ydHJhaXQgb2YgbWF5dXJpIHNoaWluYQpob3NlczoxMAo0ayBjaW5lbWF0aWMgcXVhbGl0eQpibHVyYXkgaW1hZ2UKa2luZCBleHByZXNzaW9uCnBvcnRyYWl0IG9mIHByaXlhbmthIGNob3ByYQp2ZXJ5IGJlYXV0aWZ1bCBlbmdhIHN0eWxlCnBvcnRyYWl0IG9mIHJ1bmcKcG9ydHJhaXQgb2YgcnlhbiBnb3NsaW5nCnBvcnRyYWl0IG9mIHNhbXVlbCBsLiBqYWNrc29uCmppbSBrYXkKaGFpciBsb29waWVzCmNvcnBvcmF0ZSBob2xvZ3JhbXMKYXQgdGhlIGhvc3BpdGFsIGluIHBhdGllbnQgZ293bgpjYXB0aXZhdGluZyBhbmQgZW50aWNpbmcKZHJlc3NlZCBibGFjayBob29kaWUKaW5zaWRlIG9mIGEgY2FiaW4KbmFwb2xlb25pYwpoYW5kIG9uIHRoZSBkb29ya25vYgpwb3J0cmFpdCBvZiBhIGNhdCBhcyBhIHBpcmF0ZQpzaGF2ZWQgaGFpcgpwb3J0cmFpdCBvZiBhIGphcGFuZXNlIGdpcmwKcG9ydHJhaXQgb2YgYSBtaW5kIGZsYXllcgpwb3J0cmFpdCBvZiBhIG1pbm90YXVyCnBvcnRyYWl0IG9mIGEgbmFwb2xlb25pYyBhZG1pcmFsCjg1bW0gbGVucyBmLzEuOApkcmlwcGluZyB3aXRoIG9pbCBpbiB0aGUgaGVhZApoaXMgZXllcyBhcmUgY2xvc2VkCndoNDBrCjU1bSBsZW5zCmJyaWdodCBvcmFuZ2UgaGFpcgpjaXR5IHNreWxpbmUgb24gYmFja2dyb3VuZApjZW50ZXJlZCBzdWJqZWN0CnZhbmVzc2EgYmx1ZQp0b25lZCBzaGFwZQp3ZWFyaW5nIGJpaHUgZHJlc3MgbWVraGVsYSBzYWRvcgpiYWNrZ3JvdW5kIGluIGEgY2luZW1hdGljCmxpbmVhciBpbGx1c3RyYXRpb24KcG9ydHJhaXQgb2YgYSBjb3NtaWMgZ29kCmdhbGF4eSBhbmQgbmVidWxhcwpob2xkaW5nIGEgcmFiYml0CnNsaW0gYW5kIHRhbGwKcG9ydHJhaXQgb2YgYSBkYWNoc2h1bmQKcG9ydHJhaXQgb2YgYSBkYXJrIHdpdGNoCnJlZCBhbmQgcHVycGxlCmJsYWNrIGNoYWxrCmtvcmVhbiBmYWNlIGZlYXR1cmVzCmxpb24ncyBnYXRlCmhpZ2ggY29udHJhc3QgY2luZW1hdGljIGxpZ2h0aW5nCmRpc2NvIHNtaWxlCm9ybmF0ZSBjb21wbGV4aXR5CmFjY3VyYXRlIGh1bWFuIGFuYXRvbXkKcG9ydHJhaXQgb2YgYSBoYXBweSBxdW9ra2EKd2l0aCBhIGxvbmcgd2hpdGUKYXlha2EgY29zcGxheQpjb3BwZXIgc2hvcnQgaGFpcgpmcmVuY2ggZmVhdHVyZXMKc3R1cmR5CnlvdW5nZXIgYnJvdGhlciB2aWJlcwp3ZXN0IHNsYXYgZmVhdHVyZXMKZmF0aGVyIGZpZ3VyZSBpbWFnZQp1bmNhbm55IHNtaWxlCmhlIGlzIHdlYXJpbmcgYSBibGFjayB0cmVuY2hjb2F0CnBvcnRyYWl0IG9mIGEgbWFuIGluIGEgc3VpdApwb3J0cmFpdCBvZiBhIG1lY2gKcG9ydHJhaXQgb2YgYSBtZWxhbmNob2xpYyB3b21hbgptdXR0b25jaG9wcwppbXBlcmlhbCBhbmQgZWxlZ2FudCBoYWlyIHN0eWxlCnBvcnRyYWl0IG9mIGEgcmVkIGhhaXJlZCB3b21hbgpiZWF1dGlmdWwgb3ZhbCBmYWNlCmF0dHJhY3RpdmUgYW5kIGJlYXV0aWZ1bApwYWxlIHJvdW5kIGZhY2UKcGhvc3Bob3Jlc2NlbnQKcG9ydHJhaXQgb2YgYSB3b21hbiB1bmRlcndhdGVyCmFkYW0gZHVmZiBsdWNpZHBpeHVsCmNyZWVweSBhbmQgZGFyayBmZWVsaW5ncwpsaWxhYyBoYWlyCm5vbi1jZW50ZXJlZCBzaG90CnBvcnRyYWl0IG9mIGEgem9tYmllCnBvcnRyYWl0IG9mIGFsYmlubyBteXN0aWMKMTk4MHMgcGhvdG9ncmFwaHkKaG9zYWRhCmxvb2tpbmcgdG8gdGhlIGNhbWVyYQp0c3VhaWkKY3liZXJwdW5jCnBvcnRyYWl0IG9mIGJsYWNrIG1lcm1haWQKcG9ydHJhaXQgb2YgY2FwdGFpbiBhbWVyaWNhCnBsYW5ldGVzCmRheiBzdHVkaW8gZ2VuZXNpcyBpcmF5IHNoYWRlcnMKZ3JvdGVzcXVlIGpva2VyCnBvcnRyYWl0IG9mIGZhaXJ5IHdvbWFuCm9pbHkgc2tpbgpkaWZyYWN0aW9uIGZyb20gYmFjayBsaWdodApwb3J0cmFpdCBvZiBnb2QKb3JuYXRlIGZyaWxseSByZWdhbCBzaGlydApwb3J0cmFpdCBvZiBtYWdpY2FsIGJsb25kIHByaW5jZQpnbG93aW5nIGxpZ2h0IGF0bW9zcGhlcmUKcG9ydHJhaXQgb2YgcGVlLXdlZSBoZXJtYW4KdGVzc2EgdGhvbXBzb24gaW5zcGlyZWQKZmVtaW5pbmUgc2xpbSBmaWd1cmUKdHJpYmFsaXN0aWMgc2NpLWZpCnBvcnRyYWl0IG9mIHR3byBwZW9wbGUKcG9ydHJhaXQgb2Ygd2lsZApjcnVlbCBncmVlbi1leWVkCnJhcGllcgpjdXRlIGhvcm5zCnBvcnRyYWl0IHBob3RvIG9mIGVtbWEgd2F0c29uCnBvcnRyYWl0IHBob3RvIG9mIHdhbHRlciB3aGl0ZQpncmFpbnkgZmlsbSBwaG90bwplbW1hIHdhdHNvbiBhcyB0aGUgcXVlZW4gb2YgaWNlCmZlbWFsZSBkaXNuZXkgdmlsbGFpbgpibGFjayBkb21lcyBhbmQgc3BpcmVzCnlvdW5nISEhCnZpbnRhZ2UgZmlsbSBwb3N0ZXIKcG93ZXIgYmkgZGFzaGJvYXJkCmJvdWRvaXIgcGhvdG9ncmFwaHkKd2l0aCB2ZXJ5IGxvbmcgYmxvbmRlIGhhaXIKZnJhZ2lsaXR5CnJlcGV0aXRpdmVuZXNzCnN5c3RlbQpmcmFuayBmcmF6ZXR0YSBzdHlsZSBwYWludGluZwpmaWVsZCBub3RlcwpmYWNlIGRldGFpbHMhCnRlbXBlcmVkIGluIHNvbGl0dWRlCmltYXggbW92aWUgc3RpbGwKZmllcmNlIGV5ZXMKaG9seSBtYWdpYwpjYXN0aW5nCmFuIGF2aWF0b3IgamFja2V0IGFuZCBqb3J0cwpwcmluY2VzcyBqYXNtaW5lCm5lb24gc21va2UKcHJpbmNlc3MgYXQgYSByb3lhbCBiYW5xdWV0Cm1lZGlldmFsLWZhbnRhc3kKcGVhY29jayBjb2xvcnMKZGlhIGRlIG11ZXJ0b3MKaHVtYW5zIGV4cGxvcmluZwpzaGlwIGNvbnRyb2wgcGFuZWwgY2xvc2UtdXAKc3lkbmV5IHN3ZWVuZXkKcHJvdG9nZW4KbWljaGFlbCBjaGV2YWwgKHVucmVhbCBlbmdpbmUKZGVlcCBsZWFybmluZwpwdXJlIGJsYWNrCnB1cnBsZSBuZWJ1bGEKcHVzaGVhZCBhcnQKcHV0aW4gaW5oYWxpbmcgZnJvbSBjb3BpdW0gdGFuawpxdWFudHVtIGVudGFuZ2xlbWVudAppbnNhbmVseSBkZXRhaWxlZCBmYWNlCmxpdmUgZm9vdGFnZQplbGVnYW50IGFybW9yCnN0b25lIGNhcnZpbmcKYXQgaG9tZQpyYWRpb2hlYWQgc2luZ2VyIHRob20geW9ya2UKcHJldHR5IG1hcmdvdCByb2JiaWUgdmFtcGlyZQpob2xkaW5nIGhrIHBpc3RvbCBpbiBoYW5kCmZpZ2h0aW5nIGFnZ3Jlc3Npb24Kd2l0aCB3aGl0ZSBzdHJlYWsgaW4gaGFpcgpsb25nIHJlZCBoYWlyIHdoaXRlIHN0cmVhayBoYWlyCmZ1bGwgYm9keSB4LWZvcmNlIG91dGZpdAp6YWNrIGRlIGxhIHJvY2hhCnRvbSBtb3JlbGxvCmhvcnNlIGxheWluZyBkb3duCmp1c3RpbiByb2lsYW5kCnJhaiBrb290aHJhcHBhbGkgYXMgc2F1bCBnb29kbWFuCm4gMgpidXJuaW5nIHRyZWVzCmRldGFpbGVkIDNkIGdvdGhpYyBvaWwgcGFpbnRpbmcKZ3JlZW4gaHVlCnJhcGhhZWwgcGVyc29ubmF6CjE1dGggY2VudHVyeSBldXJvcGVhbiBmaW5lIGFydAp0cmVuZGluZyBvbiBkcmliYmJsZS5jb20gbWFzY290CmRyaWJiYmxlIGlsbHVzdHJhdGlvbgpyYXltYW4KcGFudGhlcgphbnRpbWF0dGVyCmJ1ZmZlZAp2ZXN0cyBhbmQgY29yc2V0cwpjcnlzdGFsIGNhc3RsZXMKbWljcm9vcmdhbmlzbQo0ayBkZWZpbml0aW9uCmR1c3R5IGFuZCBzbW9rZXkKc2hpbnkgc29mdCBmdXIKb2lsIHBhc3RlbHMgYW5kIGdvbGQKbW9kZWxlZCBpbiBwb3NlcgphY3Rpb24gcG9zdApob3cgcHJldHR5Cmx1eHVyaW91cyBvcm5hdGUgZ29sZGVuIGpld2VscnkKYXdhcmQgd2lubmluZyBwaG90byBzaG9vdApyZWRsZXR0ZXJtZWRpYQphcyBhIHJldHJvZnV0dXJpc3RpYyBoZXJvaW5lCmZpZXJ5IGJpcmQKcmVkIHdhdGVyCm1vb25saWdodCBpbiB0aGUgZGFya25lc3MKYSBibHVlIHNraXJ0CmxvbmcgbGlnaHQgcHVycGxlIGhhaXIKbG9uZyByYWJiaXQgZWFycwpjaXJjbGUgZXllcwpza2lubnkgZmVtYWxlIGFydGlzdCBiYWNrIHZpZXcKZWxlZ2FudCBmYW50YXN5IHN0eWxlIGJyYWlkcwpyZW5kZXIgb2YgYSBjdXRlIDNkIGFuaW1lIGdpcmwKdW5kZXJjdXQKcmVkIGx1bmFyIGVjbGlwc2UKYmFydGxvbWllaiBnYXdlbApyZXNlcnZvaXIgZG9ncwpyZXggb3JhbmdlIGNvdW50eQpyaGlubwoxOTU3CnJpY2sgc2FuY2hleiBpbiByZWFsIGxpZmUKcmljayBhbmQgbW9ydHkgaW4gcmVhbCBsaWZlCnJpY2tyb2xsCnJpbiB0b2hzYWthCnlhc3Vtb3RvIG9rYQppbWFnaW5hdGl2ZSByZWFsaXNtCm5ld3NwYXBlciBjbGlwcGluZwphY3RvcgpwaG90b3JlYWxpc3RpYyBtYXN0ZXJwaWVjZQoxOTMwcyBmaWxtCmluayBvdXRsaW5lCnJvYmluIGhvb2QKcm9ib3QgZmFjZQpyb2JvdCBoZWxtZXQgYnVzdApyb2JvdCBjeWJvcmcKY2xlYXIgZGV0YWlsCnJvYm90aWMgY2F0CnJvY2tldCByYWNjb29uCnVucmVhbCBlbmdpbmUgNSBlbnZpcm9ubWVudApyb21hbiBnb2RkZXNzCnRoZSBnb2QgZW1wZXJvciBvZiBtYW5raW5kCmRpbSBsaWdodGluZyEhIQpzdXNwZW5kZWQgaW4gYWlyCmhpZ2ggZGV0YWlsZWQgcGVyZmVjdCBmYWNlcwpwYWdlIHNjYW4gZnJvbSBib29rCmdyZWcgcnV0a293c2tpIGFuZCBkYXZlIGdpYmJvbnMKd2llbGRpbmcgYSBzd29yZCBhbmQgc2hpZWxkCmRlc2lnbiBhcnQKd2F0ZXJ5IGNyeXN0YWwgZ2xvdyBleWVkCmNsb3NlLXVwIG9mIGZhY2UKcnVicnVtIGxpbGxpZXMKcnVnZ2VkIG1hbGUgcmFuZ2VyCnJ1Z3JhdHMKbWV0cm9wb2xpdGFuCnJ1bm5pbmcgZG9nIGluIGEgbGlicmFyeQp3aXRoIHZsYWRpbWlyIHB1dGluCmRyYW1hdGljIHRoZW1pbmcKdW5mb3J0dW5hdGUKaGFuZCBwYWludGVkIGNhcnRvb24gYXJ0IHN0eWxlCnNvZnQgZ3JlZW4gbGlnaHRpbmcKZXBpYyBhY3Rpb24gc2hvdApibHVlIHBhbnRzCmRldGFpbGVkIHBpeGVsIGFydApiaWcgZmxvd2luZyBoYWlyCnNhaGFyYQpxdWVlbiBvZiB0aGUganVuZ2xlCmNnaSBkZXRhaWxlZAppbiBzdHlsZSBvZiBwaG90b3JlYWxpc20gYXJ0aXN0CnRoZSBnb2xkZW4gY2F0IGFybW9yIGtuaWdodApzYWludCB3b21hbnMKYWNjdXJhdGUgZGV0YWlsCnNhbSBoeWRlIGluIGdvbGQgc3VpdApzYW11ZWwgbCBqYWNrc29uCnNhbXVlbCBsLiBqYWNrc29uIGFzIGEgYmFsbGVyaW5hCmRhbmNpbmcgZ3JhY2VmdWxseQpzYW11cmFpIGNhdApzYW5zIGZyb20gdW5kZXJ0YWxlCnNhbnRhJ3Mgd29ya3Nob3AKZ290aCBmYW1pbHkKc2l0Y29tIHNjcmVlbnNob3QKY2hlZXJpbmcgY3Jvd2RzCm9jY3VsdGlzdAptYWRlIG9mIGNvdHRvbiBjYW5keQpmcm9tIGJldHRlciBjYWxsIHNhdWwKc2F1bCBnb29kbWFuIGZyb20gYnJlYWtpbmcgYmFkCnNhdWwgZ29vZG1hbiBpbiB0aGUgYmFja3Jvb21zCndhdGVyeQpoYXJsZW0KZ29ibGlucyBhdHRhY2tpbmcKMTk4MHMgcHVscCBmYW50YXN5CnNjYXJ5IGNsb3duCnNjYXJ5IGRhcmsgZm9yZXN0Cm9yaSBhbmQgdGhlIGJsaW5kCndlYXJpbmcgc2NpLWZpIGFybW9yCnNjaS1maSBsaXphcmRtYW4KaGljaGFtIGhhYmNoaQpzY2lmaSB3b21hbgpibHVlIGJvcmRlcgpvdmVybG9va2luZyB0aGUgb2NlYW4KbGl2ZSBicm9hZGNhc3QKc2NyZWVuc2hvdCBvZiBjbG91ZGp1bXBlcgpuZXh0LWdlbiBncmFwaGljcwpzbW9vdGggbGlnaHQgZnJvbSB1cHBlciBsZWZ0CnNlYSBzZXJwZW50CmJha2VkIGJlYW5zCnNlZHVjdGl2ZSB0aWZhIGxvY2toYXJ0IHBvcnRyYWl0CnNlZ2EgZHJlYW1jYXN0CmNydCBtb25pdG9yCnNlbGYKc2VsZmllIG9mIGEgZG9nCmluIHRoZSBtaWRkbGUgb2YgdGhlIG9jZWFuISEhISEKc2VsaW5hCmxvbGkKcG9zdGVyIHNob3QKY2xvdGhlZCBpbiBvbGQgc2FtdXJhaSB1bmlmb3JtCnNldCBvZiBoaWdoIHF1YWxpdHkgaGQgc3ByaXRlcwpoaWdoIGRldGFpbCA0ayByZW5kZXIKc2V2ZXJ1cyBzbmFwZQpzaGFkb3dydW4gY2hhcmFjdGVyIGFydApzaGFkb3d2ZXJzZQpnb2xkZW4gY2hpbmVzZSB0ZXh0CmhvbGlzdGljIG1lZGljaW5lIGFkdmVydGlzZW1lbnQKYmlvcHVuayB0b3lzIG1hZGUgaW4gY2hpbmEKcmVuIGFuZCBzdGltcHkgc3R5bGUKY2FydG9vbiBmcm9tIHRoZSA5MCdzCm1lZ2FzdHJ1Y3R1cmUgYmFja2dyb3VuZCkKc3ltbWV0cmljYWwgcG9ydHJhaXQgcnBnIGF2YXRhcgpzaGVkIHJvb2YKYmxvb2QgZHJpcHBpbmcgZnJvbSBtb3V0aApuZW9uIGdlbmVzaXMgZXZhbmdlbGlvbiBmYW5hcnQKc2hpcCBpbiBhIGJvdHRsZQpzaG9ocmVoIGFnaGRhc2hsb28KZjEuNwpza2lubnkgY2F1Y2FzaWFuIHlvdW5nIG1hbgpyaWNoIHBhc3RlbCBjb2xvcnMKcGhpbG9zb3BoZXIKY2xlYXIgc2lsaG91ZXR0ZQpidXJuaW5nIHdhdGVyCnNpbmdhcG9yZSBlc3BsYW5hZGUKb25lIGhvbGRzIGFwcGxlIGluIGhhbmQKbmF0dXJhbCBoaXN0b3J5CnNpcml1cyBhIGFuZCBzaXJpdXMgYgphdGliYSBqZWZmZXJzb24KYy4gci4gc3RlY3lrIGlpaQpza2VsZXRvbiBwaXJhdGUKbWVkaXRlcnJhbmVhbiBjaXR5CmluIG1hbmdhIHN0eWxlCmdpYW50IHRlcnJlc3RyaWFsIHN0YXJmaXNoISEhISEKc2t5cmltIHNjcmVlbnNob3QKaGVkb25pc20Kc2xlZXAgcGFyYWx5c2lzIG1vbnN0ZXIKc2xlaXBuaXIKc2xpbWUgcmFuY2hlcgpzbWFsbCBjdXJ2eSBsb2xpCmN1dGUgZmFjZSBiaWcgZXllcyBhbmQgc21pbGV5CnNpZGUgaGFpcgpzd2luZ2luZyBhIGJpZyBzd29yZApzb2xhciBzYWlscwppc2xhbmQgaW4gdGhlIGJhY2tncm91bmQKYmx1bnQKc25vb3AgZG9nZyBpbiBndGEgdgpzbm9vcCBkb2dnIGluIG1vcnRhbCBrb21iYXQKYWNjdXJhdGUgY29sb3JzCmRvbGxhciBiaWxsCnNvZmllIHRoZSBnaXJhZmZlCmNsb3NlLXVwIGZyb20gYWJvdmUKbWV0YWwgZ2VhciBtb3ZpZSBzdGlsbApzb21hCnNvbWV3aGVyZSBpbiBzYW5kcyBvZiB0aGUgZGVzZXJ0CmZsb3dpbmcgYmx1ZSBoYWlyCjM1bW0gbGVuc2UKbm9lbGxlIHN0ZXZlbnNvbgpzb25pY2h1CnNob3Qgd2l0aCBhIGRzbHIKbGlnaHQgaWxsdW1pbmF0aW9uIGF0IHN1bnNldAp0aHJvYmJpbmcKdGVzbGEgbW9kZWwgMwp2bGFkaW1pciBrcmlzZXRza2l5CnNwYWNlIGNhdApzaW1vbiBzdMOlbGVuaGFnIGNvbG9yIHNjaGVtZQprYW5kaW5za3kgc3R5bGUKb3JiaXRhbCByaW5ncwpzcGFjZSB3YXIKc3BhY2Vwb3J0IGRvY2tpbmcgYmF5IGF0IG5pZ2h0CmJsdWUgbmVvbiBsaWdodApkZXRhaWxlZCBkaWFncmFtcwpzcGFkZXMgc2xpY2sKM2RzIG1heCByZW5kZXJlZApvcGVuIHdpbmdzCjRrIGNpbmVtYXRpYyBsaWdodGluZwp1bnNwbGFzaCA0awpzbGFtIGR1bmsKc3BvbmdlYm9iIGluIHJlYWwgbGlmZQpzcHkga2lkcyBqdW5pIGNvcnRlegoxMmluIGFjdGlvbiBmaWd1cmUKcG9zYWJsZSBwdmMKc3B5cm8KZmxhZ3N0b25lcwpzdGFibGUgZGlmZnVzaW9uIGFpIGFzIGEgaHVtYW4KcHJhY3RpY2FsIGVmZmVjdApzdGFyIHRyZWsgYXNpYW4gd29tYW4Kc3RhciB3YXJzIGFsaWVuIGZhY2VzCnRoZSBkYXJrIHNpZGUKZGVzZXJ0IHRlbXBsZQpkZWVwIGRldGFpbGVkCnN0YXkgcHVmdCBtYXJzaG1hbGxvdyBtYW4Kc3RlYW1wdW5rIGZvcmVzdApicm93biBjb3JzZXQKc3RlYW1wdW5rIGNhcgp2aWN0b3JpYW4gcGhvdG8Kc3RlcGhlbiBraW5nIGFzIHBlbm55d2lzZQpkZXZlbG9wZXJzCnN0ZXZlIGJ1c2NlbWkgYXMgdGhlIGpva2VyCnJldHJvIGhhemUKaGVhdmlseSB1cHZvdGVkCmdyZWF0IGFjdGlvbgp2aXJpZGVzY2VudApjZXJhbWljIHBvdApwbGF5c3RhdGlvbiAzCmplcmVtaWFoCnN0aWxsIG9mIG1lZ2FuIGZveApjcmlzcCBjb2xvcnMKcmVkIGxlbnMgZmxhcmUKc3RvbmUgYnJpZGdlIG92ZXIgYnJvb2sKdWx0cmFwaG90b3JlYWxpc3RpYwpzdHJhd2JlcnJ5IG5pbmphCnN0cmF3YmVycnkgaWNlIGNyZWFtCnNvbWVvbmUgaXMgc2NyZWFtaW5nCmN1dGUgc2tlbGV0b24Kc3BlbGxzIHByYWN0aWNlCmhpZ2ggcXVhbGl0eSBkaWdpdGFsCnphY2sgc255ZGVyIGNpbmVtYXRvZ3JhcGh5IHN0eWxlCmNhcmVmcmVlCnZlcnkgZGVlcApkYXJrIHB1cnBsZSBnbG93aW5nIGJhY2tncm91bmQKc3VuIHd1a29uZwpvdXRsaW5lZCBzaWxob3VldHRlcwpsaWxvIGFuZCBzdGl0Y2gKbWFqZXN0aWMgcGFpbnRpbmcKZG9sbGZpZSBkcmVhbQp2aHMgZm91bmQgZm9vdGFnZQpzdXBlciBub3ZhCnN1cGVyIHNhaXlhbiBqb2UgYmlkZW4Kc3VwZXIgbWF0aCB3aXphcmQgY2F0CmJyZWFrZG93bgpvcm5hdGUgbG9uZyBmbG93aW5nIGJsb25kZSBoYWlyCnN1c3RhaW5hYmlsaXR5CnByb2Zlc3Npb25hbCBvaWwgcGFpbnRpbmcKZ3JlZW4gYW5kIHllbGxvdwpzeW1tZXRyeSEhIHBvcnRyYWl0IG9mIGN5Ym9yZwpkaXNuZXkgcG9zdGVyCnRvIGluZmluaXR5IGFuZCBiZXlvbmQKZXBpYyBzdW5zZXQKdGFsbCBlbWFjaWF0ZWQgbWFuIHdvbGYgaHlicmlkCmNvdmVyZWQgaW4gbWF0dGVkIGZ1cgpoZSBoYXMgeWVsbG93IHdvbGYgZXllcwp0YWxsIHNreXNjcmFwZXIKdGFsbHkgaGFsbAp0YW5uZWQgYmVhdXR5IHBvcnRyYWl0CnNjaWVuY2UgbW9udGhseSBwaG90b2dyYXBoeQp0ZWFsIHBhcGVyCmxpZ2h0IGZyb20gdG9wCnBpbiB1cCBnaXJsCm1pbGQgaW1wcmVzc2lvbmlzbQp0YXlsb3Igc3dpZnQgY2FycnlpbmcgYSByaWZsZQp0ZWFtIGZvcnRyZXNzIDMKYWxsIGJsYWNrIG1hdHRlIHByb2R1Y3QKa2FuamkgdGF0dG9vcyBhbmQgZGVjYWxzCmRhbyBsZWUKdmludGFnZSBwYWludGluZwp0ZW1wZXN0CnRlbXBsZSBvZiB0aGUgc3VuCm1hZ2ljIGV5ZSBzdHlsZSBwb3N0ZXIKdGVycmFmb3JtaW5nIGplemVybyBjcmF0ZXIKb2JzaWRpYW4gdG93ZXJzIGluIHRoZSBkaXN0YW5jZQp0ZXJ1ZWwgY2l0eSBpbiAxOTg5CnBpeGFyIG1vdmllIHNjcmVlbnNob3QKdGhhbmNyZWQgd2F0ZXJzIGluIHN0eWxlIG9mIHdsb3AKZW5kd2Fsa2VyIGNpbmVtYXRpYwpmaW5hbCBmYW50YXN5IGZhbiBhcnQKdGhhbm9zIGFzIGEgc3RhcmJ1Y2tzIGJhcmlzdGEKdGhhdCdzIHJpZ2h0CjE5NTBzIGZpbG0gbm9pcgp3aGlybGluZyBncmVlbiBzbW9rZQp0aGUgcmluZyBpcyBob3Jpem9udGFsCnN1cnJvdW5kaW5nIHRoZSBjaXR5CmFuY2llbnQgc2NpZW5jZSBmaWN0aW9uIGFydAp2b2x1bWV0cmljIHJheSB0cmFjaW5nCmltbW9ydGFsaXR5CnRoZSBjdWJlCnRoZSBkYXJrIGxvcmQgc2F1cm9uCnRoZSBkYXJrIHNvdWxzIGtuaWdodAp0aGUgZGVhdGgKdGhlIGRlc2lnbmVyIG9mIHRoZSB1bml2ZXJzZQpzdHlsZSBvZiBsZW9ub3JhIGNhcnJpbmd0b24KYXV0aG9yIHVua25vd24KdGhlIGZhdGhlciBvZiBzb3Jyb3cgYW5kIHJldmVuZ2UKdGhlIGZpcmUgcXVlZW4KdGhlIGZvb2wgdGFyb3QgaWxsdXN0cmF0aW9uCnNjb25jZXMKdGhlIG1pbmVzIG9mIG1vcmlhCnRoZSBncmVlbiBnb2JsaW4KcmF0ZWQgcgphZXN0aGV0aWMhISEhISEhISEhCnZhdWx0CnRoZSBob21lc3R1Y2sgdHJvbGxzCnRoZSBpbXBlcmlhbCBwYWxhY2UKYnJpZ2h0IHdoaXRlIHBvcmNlbGFpbgp0aGUgaXJvbiBnaWFudAptYWMKaGlnaCBkZXRhaWwgYXJ0CmJyb2tlbiBnb2xkIHNoYWNrbGVzCm5lY2sgdGF0dG9vcwpicm9rZW4gc2hhY2tsZXMKLW45CnRoZSBrbmlnaHQgZnJvbSBob2xsb3cga25pZ2h0CnBpZXJjaW5nIGdyZXkgZXllcwp0aGUgbGlmZQoxODkwIHBob3RvCmluIHJ1aW5zCmh5cGVycmVhbGlzdGljIHN5bW1ldHJpY2FsIDhrCnRlY2ggcGF0dGVybgp0aGUgbWlkam91cm5leSBtdWx0aXZlcnNlCnRoZSBtb3N0IGJlYXV0aWZ1bCB3b21hbgp0aGUgbmJhIGZpbmFscwp2aXJ0dWUKd2F0ZXJmYWxscyBpbiB0aGUgYmFja2dyb3VuZAptYXRyaXggdGV4dAp0aGUgcmVkIGNpdGFkZWwKZWx2ZW4gcGFsYWNlIG9mIGdoZW1hdGhhcgp0aGUgcmlkZGxlcgp0aGUgc3BpZGVyIHRoaWNrZXQKZGVuc2UgY29uaWZlcm91cyBmb3Jlc3QuIHNwaWRlcnMKdGhlIHN1bnNldAp0aGUgc3lkbmV5IG9wZXJhIGhvdXNlCnN0aW5ncmF5cwp0aGUgb3JicyBvZiBieW9iCnRoZSB3aXphcmQgb2Ygb3oKY292ZXIgb2YgbWFnYXppbmUKYWlyYm9ybmUgdmlldwpsb2tpCnRoZSBiYXR0bGUgZm9yIHRoZSB0cmVlaG91c2UKdGhlIGJlZ2lubmluZyBvZiB0aGUgZW5kCnJlYWxpc3RpYyBmYW50YXN5IGFydHdvcmsKdGhlIGJvb2dpZSBtb25zdGVyCnZpcnR1YWwgc2VsZgpoZWF2eSBtYWNoaW5lcnkKaGVhdnkgd2VhcG9ucyBmaXJlCmFuYW1vcnBoaWMgODBtbSBsZW5zCmNpdHkgb24gdGhlIG1vb24KdGhlIGNpdHkgdGhhdCBuZXZlciBzbGVlcHMKdGhlIGdvZGRlc3Mgb2YgbG92ZQp0aGUgY29sb3IgcmVkCnRoZSBjdXJlIGZvciBjYW5jZXIKdGhlIGN1dGVzdCBjcmVhdHVyZSBvZiB0aGUgd29ybGQKdGhlIGRldmlsIGluIGhlbGwgYXMgYSBkcmFnb24KdGhlIGR1a2Ugc2hyZWsKYWlycGxhbmUgdmlldwphaXJwbGFuZSB3aW5kb3cgdmlldwppbnNpZGUgaW4gYSBnbGFzcyBib3gKdGhlIGV5ZSBvZiBnb2QgcmFoCnRoZSBmYWxsIG9mIGNvbnN0YW50aW5vcGxlCm1vbm9jaHJvbWF0aWMgcmVkCndpbnN0b24KZXhvc2tlbGV0dG9uCmRhcnJlbiBhcm9ub2Zza3kKdGhlIGZ1bm5pZXN0IG1lbWUgZXZlcgpoaWdoIGNvbG9yIGNvbnRyYXN0CnRoZSBnaXJsIGFuZCB0aGUgc3VuCnRoZSBnaXJsIG1hZGUgb3V0IG9mIGZsb3dlcnMKdGhlIGdvZGRlc3Mgb2YgYXV0dW1uIGhhcnZlc3QKdGhlIGdyZWF0ZXN0IGNha2UKY29sb3NzdXMKZXh0cmVtZSBoYW5kIGRldGFpbApzaWdtYSAxLzYuIDUwIG1tCmNvbGQgbWV0YWxsaWMgYXRtb3NwaGVyZQpmaXJlIGxpZ2h0CmQmZCB3YWxscGFwZXIKZXhwcmVzc2l2ZSBkaWdpdGFsIHBhaW50aW5nCnRoZSBraW5nIG9mIGhlbGwKdGhlIGxhc3QgYmF0dGxlCnRoZSBsYXN0IG9yY2hlc3RyYQp0aGUgbGFzdCBwb3J0cmFpdCBvZiBtYWMgbWlsbGVyCnRoZSBsYXN0IHJhaW4gb24gZWFydGgKdGhlIGxhc3Qgc3VwcGVyIHBhaW50aW5nCnBob3RvcmVhbGlzdGljIHJlbmRlciBpbiBvY3RhbmUKZ29sZGVuIGxhY2UgcGF0dGVybgptciBjbGVhbgpiYW5rbm90ZQppbXByZXNzaW9uaXN0IHN0eWxlIHBhaW50aW5nCm1lIGFuZCB5b3UKYmxhY2sgaW5rIGRyYXdpbmcKc2hpZ2V0byBoaXJhaSB5dXlhCnRoZSByaXNlIG9mIGNvbnNjaW91c25lc3MKdGhlIHNjcmVhbWluZyBmb3gKdGhlIHNlY3JldCBvZiBtb25rZXkgaXNsYW5kCmJvb2sgY292ZXIgaWxsdXN0cmF0aW9uCnRoZSBzb3JjZXJlc3MKc2hpbmppIGtpbXVyYQp0aGUgd2FzdGVsYW5kCnRoZSB3YXRjaGVycwpmbHlpbmcgc2F1Y2VyIGluIHRoZSBza3kKdGhlIGdhbGF4eQpzdGFuZGluZyBvbiBhIGJyaWRnZQp0aGlhZ28gYWxjYW50YXJhCjE5MTBzIGFyY2hpdGVjdHVyZQpqdXN0IG1pbmQtYmxvd2luZwpzbW9rZSB0cmFpbGluZyBvdXQgdGhlIGJhY2sKbm90IHRyYWluIHRyYWNrcwpwZW5jaWwgYW5kIHBhcGVyCmZhbnRhc3kgYmFrZXJ5IGludGVyaW9yIHNldHRpbmcKYXNzYXNzaW5zCmxpZ2h0IGxlYXRoZXIgYXJtb3IKd2VsbC1kZXRhaWxlZAp3YWxraW5nIHRocm91Z2ggYSBzdWJ1cmIKZ3JlZW4gYW5kIGJsdWUgY29sb3JzCmdvb3NlYnVtcHMKZ29vc2VidW1wcyBib29rcwp0aW1lIHRvIGNsaW1iIHRoZSBtb3VudGFpbiBwYXRoCm1paG95byBhcnQgc3R5bGUKZGlydHkgc3RyZWV0cworKysrIHN1cGVyIHZlaW55IGhhbmRzCnZlcnkgdmVyeSB2ZXJ5IHJpY2gKaXJpZGVzY2VudCBkaWdpdGFsIGFydApzdHVubmluZyBzY3JlZW5zaG90CnJhc3RhZmFyaWFuCnRvbSBicmFkeSBhcyBjaGUgZ3VldmFyYQp0b20gY3J1aXNlIGFzIHRoZSBqb2tlcgptYXBsZSBzeXJ1cCBoaWdobGlnaHRzCnRvbSBob2xsYW5kIGFzIHBldGVyIHBhbgpkcmFtYXRpYyBlcGljIGNpbmVtYXRpYyBsaWdodGluZwp0aGUgYmF0bWFuCnRvdG9ybyBhcyBpcm9uIG1hbgpzYXRlbGxpdGUgZGlzaGVzCnRveW90YSBjcmVzdGEKc3R1bm5pbmcgcmVuZGVyCmRyYW1hdGljIGxpZ2h0ZW5pbmcKd2FsbCBvZiBleWVzCnRyYW5zcGFyZW50IG1hcmJsZSBidXR0ZXJmbHkKcm9iZXJ0IHQuIG1jY2FsbAp0cmF2aXMgc2NvdHQgZmx5aW5nIG92ZXIgZWFydGgKd2llbGRpbmcgYSBiYXR0bGVheGUKdHJlZSBkcnVpZAphc3RvdW5kaW5nCmJlYXV0aWZ1bCBqdW5nbGUKdHJlbnQgcmV6bm9yCnRydW1wIHdpdGggYSBndW4KdHJ5cG9waG9iaWEgYWNuZSBmYWNlCnR1YmEga25pZ2h0CnR1Y3NvbiBhcml6b25hCnR1ZXNkYXkgd2VsZCBpbiBhIGJ1YmJsZSBiYXRoCjE5OTBzIGhvcnJvciBib29rIGNvdmVyCndhc2hpbmd0b24KdHdpbiBwZWFrcyBwb3N0ZXIgYXJ0d29yawpjYXZlIGFydAp0d28gYmVhdXRpZnVsIGFuaW1lIGdpcmxzCnZlcnkgZnVsbCBkZXRhaWwKd2l0aCBzdWJ0aXRsZXMKdGhleSBzaXQgbmV4dCB0byBhIHBpbGUgb2YgYm9uZXMKY29sZCBzbm93eQpvbmUgZ3JlZW4KaW5zaWRlIGEgZGVjYXllZCBzdXJnaWNhbCByb29tCjNkIGhkIG1peGVkIG1lZGlhCmluc2lkZSBhIGRlY2F5ZWQgaG9zcGl0YWwgcm9vbQp0eXJpb24gbGFubmlzdGVyCnVmbyBhdHRhY2sKa2FubykKdWZvIGxhbmRpbmcKd2VhcmluZyBjbG93biBtYWtldXAKcmVhbCB3aW5ncwp0b25hbGlzbSBwYWludGluZwpkZXRhaWxlZCBjb3NtaWMgYW5nZWxpYyByb2JvdAp3ZWFyaW5nIGEgZnVsbC1oZWFkIGdhc21hc2sKZnV0dXJpc3RpYyByb2JvdCBkZXZpbApleG90aWMgYWxpZW4gZWxvbiBtdXNrCnVzIGZsYWcKdWtpeW8tc3R5bGUKb2N0YWluCjhrIGRpZ2l0YWwgcGFpbnRpbmcKZmFudGFzeSBmbG93ZXJzIGFuZCBsZWF2ZXMKZ2lsZGVkIGdvbGQgYW5kIGRpYW1vbmRzCm1hbmEgYXJ0CnNtYWxsIGZsYW1lcwpnb2R6aWxsYSB2cyBtZWNoYWdvZHppbGxhCmdvcmdlb3VzIGZpZ3VyZQp3YXIgcm9ib3QKc3RlYW1wdW5rIGdlYXJzCnNjaS1maSBoaWdoIGZhbnRhc3kKY29ycG9yYXRlIGZsb3cgY2hhcnQKZXhlY3V0aXZlIGluZHVzdHJ5IGJhbm5lcgpicm9rZW4gc3RhdHVlcwplbmNsb3NlZCBpbiByb2NrCmRpc3RhbnQgbGlnaHRzCmNsb3duIGZhY2UKY3liZXJwdW5rIGRyZXNzCmNhbmRsZSBsaXQKbGEgbm91dmVsbGUgdmFndWUKdnAgb2YgbWFya2V0aW5nCnZ3IG1pY3JvYnVzIGRyaXZpbmcKdmFkZXIgYXMgY2FwdGFpbiBhbWVyaWNhCnZhbGxlIGRlaSB0ZW1wbGkKc3R5bGUgb2YgdmluY2VudCB2YW4gZ29naApwcmVzaWRlbnRpYWwgY3Jvc3MKbWVsYW5jaG9seSBsaWdodGluZwpsYXVnaGluZyBvdXQgbG91ZAp2ZWNuYSBmcm9tIHN0cmFuZ2VyIHRoaW5ncwpncmVlbiBzYWxpdmEKZGF2ZXJhcG96YQpzaGUgaXMgZnJpZ2h0ZW5lZApzaW1wbGUgZmlndXJlcwpiYWNrbGlnaHQgc3R1ZGlvIGxpZ2h0aW5nCnBvc3QgYXBvY2FseXB0aWMgYnVpbGRpbmcKdmVyeSB2ZXJ5IHZlcnkgdmVyeSBmYW1vdXMgYXJ0CmxpZ2h0IGRpc3BsYWNlbWVudAp2aSBmcm9tIGxlYWd1ZSBvZiBsZWdlbmRzCnZpY3RvcmlhbiBkYXkgb2YgdGhlIGRlYWQKZ3JpbWRhcmsgaG9ycm9yIHN0eWxlCm5lY3Jvc2lzCmphcGFuZXNlIGthbmppIGV2ZXJ5d2hlcmUKdmlldG5hbWVzZSB3b21hbgp2aWV3IG9mIHRoZSBzcGlyYWwgZ2FsYXh5CmluIHRoZSBhcnQgc3R5bGUgb2YgbW9ocmJhY2hlcgphbmdyeSBsb29rIGluIGhpcyBmYWNlCm1pZC0zMHMKdmluZXNhdWNlCnZpbmxhbmQgc2FnYQp2aW5ueSBmcm9tIHZpbmVzYXVjZQpodW5nIGFib3ZlIHRoZSBkb29yCmxhdGUgc3VtbWVyIGV2ZW5pbmcKdmlzaW9uCnN0eWdpYW4KaW5maW5pdGUgYW5nZWwgd2luZ3MKcG9sYXJvaWQgZmlsbQp2aXRydXZpYW4gd29tYW4KYmVhZGVkIGVtYnJvaWRlcnkKa2ludHN1a3Vyb2kKbWVkaWV2YWwgcGVyaW9kCnBsYXlpbmcgdGhlIGd1aXRhcgpnYXkgcHJpZGUKdm9sb2R5bXlyIHplbGVuc2t5eQpmaW5lIGlsbHVzdHJhdGlvbgp3YWlraWtpIGJlYWNoCmJyb29keQpmdWxsIGNvbG9yIG1hbmdhIGNvdmVyCndhbGxwYXBlciBhbmltZSBibHVlIHdhdGVyCndhbHRlciBibGFjawp3YWx0ZXIgd2hpdGUgYWN0aW9uIGZpZ3VyZQp3YWx0ZXIgd2hpdGUgYXMgZG9jdG9yIHN0cmFuZ2UKd2FsdGVyIHdoaXRlIGFzIGdvcmRvbiBmcmVlbWFuCndhbHRlciB3aGl0ZSBhcyBqb2tlcgp3YWx0ZXIgd2hpdGUgYXMgYSBtdXBwZXQKcmVuZGVyZWQgaW4gdi1yYXkKYXdhcmQtd2lubmluZyBwaG90b2dyYXBoeSA0awpoeXBlciByZWFsc3RpYwplcGljIGFuaW1lIHN0eWxlCndhbHRlciB3aGl0ZSBmcm9tIGJyZWFraW5nIGJhZAp3YWx0ZXIgd2hpdGUgaW4gc2t5cmltCmNvbWljIGNvbmNlcHQgYXJ0CndhbHRlciB3aGl0ZSBpbiBndGEgNQpoZWN0aWMKYmVudG9udmlsbGUgYXJrYW5zYXMKd2FsdWlnaSBhcyBhIHJlYWwgcGVyc29uCm51Y2xlYXIgYm9tYgp3YXJoYW1tZXIgNDBrIHR5cmFuaWQgaG9ybWFnYXVudApjaW5lc3RpbGwgNDAwdAp3YXJoYW1tZXI0MGsKd2VhcmluZyBkYXJrIGdyZWVuIHJvYmVzCmNvbnRyb2xsaW5nIHNoYWRvd3MKd2FycmlvciB3b21hbgp3YXRjaCBkb2dzIGdhbWUKb2lsIHBhaW50aW5nIGggNzY4CndlZG5lc2RheSBhZGRhbXMKdml2aWQgbGluZXMKd2VsbGluZ3Rvbgp0bmcKZW1vdGlvbmxlc3MKbmV3cyBjb3ZlcmFnZQpwaXhhciBhbmltYXRpb27vvIxoeXBlciBkZXRhaWxlZAozZCBkZXB0aCBzaGFkaW5nCmdsb3dpbmcgcG90aW9ucwpicmVhc3RzIGNvdmVyZWQgYW5kIHNmdwpzdW4gc2hhZnRzCmRhcmsgZ3JlZW4gaGFpcgp3aWxsIGZlcnJlbGwKZm9jdXMgb24gdGhlIGZvcmVncm91bmQKd2lsbHkgd29ua2EKaG9sZGluZyBhIGdpYW50IHN3b3JkCmludHJpY2F0ZSBmYW50YXN5IGRyZXNzCmVwaWMgZmFudGFzeSBwYWludGluZwp3aXphcmQgY2FzdGluZyBhIHNwZWxsCndpemFyZCBwb25kZXJpbmcgaGlzIG9yYgpoaWdobHkgbm8gZGV0YWlsZWQKd2VhcmluZyBhIHZlaWwKZ2FsYXhpZXMgaW4gdGhlIGJhY2tncm91bmQKbXVsdGlwbGUgcHVycGxlIGhhbG9zCnJhZGlhbnQgYXRtb3NwaGVyZQpkaXZpbmUgZ29kZGVzcwpvegpsaWdodCBwaW5rIG1pc3QKd29vZHkgZnJvbSB0b3kgc3RvcnkKd29ya2VycyByZXZvbHV0aW9uCnBvc2luZyBpbiBsZW90YXJkIGFuZCB0aWFyYQpyZWZsZWN0ZWQgaW4gZ2lhbnQgbWlycm9yCndvcmtzYWZlLiAyMDAwcwplcGljLiBmYW50YXN5CmVwaWMuZmFudGFzeQpoaWdoIGhlZWxzLiBzaWxrCndlYXJpbmcgd2hpdGUgbGVvdGFyZAp3aGl0ZSBlbGJvdyBnbG92ZXMKd29ya3NhZmUuMTk5MHMKd29ybGQgb2YgbWFkbmVzcwpzaW5pc3RlciB2aWJlCmFsZXgKeWVsbG93IG1pbmlvbiBmcm9tIGRlc3BpY2FibGUgbWUKeW9zaGltaSB2ZXJzdXMgdGhlIGV2aWwgcm9ib3RzCnlvdG9iaQp5b3Uga25vdwptci4gZ3JpbmNoCm5hZwphbHQgZmFzaGlvbgpwaWxvdGluZyBhIHNtYWxsIHNwYWNlIHNodXR0bGUKc3RvY2tpbmdzIGFuZCBhIHRyaWNvcm4gaGF0CmdyZWVrIGFybW9yCmRyZXNzZWQgaW4gYXJtb3IKeXVtZSBuaWtraQpoZWF2ZW5seSBkcmFtYXRpYyBsaWdodGluZwptYXphcmluZWVlCm90aGVyIHN0dWZmCnplbGVuc2t5IGhhdmluZyBhIHRhbnRydW0KZ3JlZW4gbmVvbgppbnRyaWNhdGUgZGV0YWlsZWQgcmFjaW5nIGNhcgp6ZXJvIHR3bwp6b2Uga3Jhdml0eiBmdXR1cmlzdGljIGFzdHJvbmF1dApwb2xrYSBkb3QKZWxlZ2FudCBjb21wb3NpdGlvbgp6eXp6CnZvbHVtZXRyaWMgbGlnaHQgYW5kIG1pc3QKbW9vbmxpZ2h0IHRocm91Z2ggdHJlZXMKY29uY2VwdCBhcnQgc2NlbmUKWyBob3Jyb3IgZ2FtZSBdCmhpZ2hseSBkZXRhaWxlZC4gcmVhbGlzdGljIGF3YXJkCvCfh7rwn4emCmlsbHVzdHJhdGlvbl0KNGtdCm9jdGFuZV0KbXlzdGljIHNoZXBlcmQKbXlzdGljIGhlcm1pdAp2ZXJ5IGNvbWZ5XQoyNG1tIGZpbG0KcGhvdG8gZm9yIHZvZ3VlCnJlYWxpc3RpYyBvaWwgcGFpbnQKdGFsbCBjb3JuIGluIHRoZSBmb3JlZ3JvdW5kCnB1bHAgc3R5bGUgcG9zdGVyCmNvbG9yIGZpbG0gc3RpbGwgMSA5IDcgNwp3YWx0IGRpc25leSBzdHlsZQp3ZWVrbHkKbW9udGhseQpsYXJnZSBwYWludGluZwpvdXRkb29yIG1hZ2F6aW5lCmRlbnNlIHdpdGggZ3JlZW5lcnkKZmVybnMgYW5kIG1vbGQgb24gY29uY3JldGUKaW4gdGhlIHN0eWxlIG9mIGpvaG4gYmFsZGVzc2FyaQpzaGFkb3cgYXJ0CnJpZGluZyBhIGhpcHBvCmRldiB0ZXh0dXJlcwpibG9ja291dApzdXBlciBkZXRhaWxlZCBkZXRhaWwKZWxlZ2FudCBwaG90b3JlYWxpc3RpYwpkYXJrc2lkZXJzIGhhbGxvd2VlbiB0aGVtZQp3aW5kaW5nIGhvcm4KYW5pbWFsIGhvcm4KY2hvbyBjaG9vCnRoZSBzdHlsZSBvZiByb2NvY28KYW5jaWVudCBzd2lybHMKaGFuZCBjYXJ2ZWQKaW1heCA3IDAgbW0uIHNpbGVudCBydW5uaW5nCmxpZ2h0eWVhciAoIGZpbG0KNyAwIG1tIGRyYW1hdGljIGxpZ2h0aW5nCjEgMCAwIG1ldGVyIGluIHRoZSBkaXN0YW5jZQp0aHJlZSBmb3VydGhzIHZpZXcKY2hyb21hdGljIGNvbG9ycwpjb250cmFzdGluZyBjb2xvciBzY2hlbWUKaW52ZW50b3J5IGl0ZW0KZGlnaXRhbCBzY3VscHRpbmcKbW9kZWxlZAppdCBpcyB2ZXJ5IGRldGFpbGVkCnRhbmsgaGFzIGEgbGFyZ2Ugc29saWQgY2Fubm9uCnNtb290aCBzaGluZSB0ZXh0dXJlCmluIHN0eWxlIG9mIGhyIGdpZ2VyCnZpdmlkIGJyaWdodCBjb2xvcnMKYm13CnJlZmxlY3Rpb25zLiBzaGFkeQphZ2UgbWFya3MKd3JpbmtseSBmb3JlaGVhZApsb29raW5nIG9sZAp1bmRlciB0aGUgc29mdCBzaGFkb3cgb2YgYSB0cmVlCnR1cmJpZCBjbG91ZHMKbWFkZSBvZiBjcnlzdGFsCnRyZW5kaW5nIG9uIHBpbnRlcmVzdO+8jG1heGltYWxpc3QKZXJpYyBoZXNjaG9uZwpzdW4gc2hpbmVzIGRvd24gb24gdGhlIGNhcgpub3JpeW9zaGkKd2ludGVyIHNub3cKb24gYW5vdGhlciBwbGFuZXQKcm9iZXJ0IGNydW1iIHBob3RvcmVhbGlzbQpzaXR0aW5nIGF0IGEgY29udHJvbCBjZW50ZXIKaGFsbHMKd29uZGVyZHJhZnQKcGxhZ3VlIGFuZCBmZXZlci4gZnVsbCBib2R5CmZsYXQgdmlicmFudCBjb2xvcnMKZ2VvcmdlIHBhdHNvdXJhcwpzbGljZXMgb2Ygb3JhbmdlCmRpc3RhbnQgY2xvdWRzCnJ1Y2hlZCBib2RpY2UKYnJpZ2h0IGV4cGxvc2lvbgphZnJpY2FuIGFtZXJpY2FuIGVsZWdhbnQgZ2lybApzYW1kb2VzYXJ0CndpdGggYSBwYXJyb3Qgb24gaGlzIHNob3VsZGVyCmNhdGhvbGljIGljb24KYW50ZW5uYXMKc3RlYW1wdW5rIGNvbmNlcHQgYXJ0CmFkdmFuY2VkIGRpZ2l0YWwgcGFpbnQKc2VlbiBmcm9tIG91dHNpZGUKYm8geHVuIGxpbmcKc3F1YXJlIGdsYXNzZXMKWyBmaXJld29ya3MgaW4gdGhlIHNreSBdISEKWyBjaGFyYWN0ZXIgZGVzaWduIF0KZmlyZXkgZW52aXJvbm1lbnQKYm9rZWggZG9mIHNreQpoZXIgZmFjZSBpcyBjb2F0ZWQgaW4gYSB3aGl0ZQptaWNoZWwgLSBhbmdlIDggawpkZW1vbiBjYXQKc3R5bGUgb2Yga2VudGFybyBtaXVyYSEhISEKY29sZCBwbGFjZQpzcGlyaXRzIGluIHRoZSBkYXJrCnJlYWwgYXRtb3NwaGVyZQpvdXRyYWdlb3VzbHkgZmx1ZmZ5CnllbGxvdyBzY2hlbWUKYmxhY2tlbmVkIGNsb3VkcyBjb3ZlciBza3kKY3JhY2tsaW5nIHdpdGggbGlnaHRuaW5nCnVsdHJhIGJlYXV0aWZ1bCBmYWNlCm5pZ2h0IHRpbWUgY2l0eSBiYWNrZ3JvdW5kCmV4cGVyaW1lbnRhbCBzdXBlcnNvbGRpZXIKc29mdCBnYXplCmthcnN0IGxhbmRzY2FwZSA7IHdpZGUgc2hvdApkYW5pZWwgb3hmb3JkCmNhcGlyb3RlCmluIGEganVtcGluZyBmbG9hdCBwb3NlCm5ldXRyb24Kd2F4IHNraW4KcGhvdG9yZWFsaXN0aWMgc2tpbiB0ZXh0dXJlCmJhY2tsaXQgZWFycwpvaWwgaW4gY2FudmFzIHN0eWxlCmNpdmlsIGVuZ2luZWVyCnBhbG0gdHJlZXMgb3V0c2lkZSB0aGUgd2luZG93cwpqYXBhbmVzZSBpbmsgZHJhd2luZyBmcm9tIDE4NTAKZGFyayBncmV5IGFuZCBvcmFuZ2UgY29sb3VycwpzcHJpdGUgYXJ0CmZvcmVzdCB0cmFpbAp3aGl0ZSBncmV5IGNvbG9yIHBhbGV0dGUKcGVyZmVjdCBndW5zCmh5cGVyIC0gZGV0YWlsZWQgbWFzdGVycGllY2UKaXNvbWV0cmljIHBpeGVsYXJ0CndlYXJpbmcgcGx1bWJlciB1bmlmb3JtCnJhZmZhZWwKc3dpbW1pbmcgcG9vbCBpbiBmcm9udApzY29ycGlvbiB3aGlwCmdsb3dpbmcgY29sb3JmdWwgZm9nCmhlYWQgb24KYWxwaG9uc2UgbXVjaGEuIHJpY2ggY29sb3JzCmthZmthZXNxdWUKd2F5bmUgZG91Z2xhcyBiYXJsb3dlCmdvbGQgZ3JlZW4gY3JlYXR1cmUKcmVhbCBzdGVlbApvaWwgcGFpbnRpbmcgNCBrCnZvbHVtZXRyaWMgbGlnaHRpbmcgLSBuIDkKbWFjcm8gcGhvdG9ncmFwaHkgOGsKdGVsZSBsZW5zCnNpdHRpbmcgaW4gdG9reW8Kc2tlcHRpY2FsIGV4cHJlc3Npb24KNSAwIG1tIGYgNS4gNgpob2xkaW5nIGEgZ2lhbnQgc3RyYXdiZXJyeQpiYWNrIHZpZXcgYWxzbwpzdW5rZW4gc3F1YXJlCm9jY3VsdCBwcm9wYWdhbmRhCmNvbG9yZnVsIHNjaGVtZQpyZWQgd2FsbHBhcGVyIGRlc2lnbgphcnQgc3RhdGlvbnMKb2N0YW5lIHJlbmRlci46MQpob2x5IGFuZCBzYWNyZWQKZ3JvdW5kIHBlcnNwZWN0aXZlOyBkZXRhaWxlZApodW50aW5nIHRoZSBtb25zdGVycwpkcmVzc2VkIGluIGEgam9kaHB1cmkgc3VpdAptdWx0aXBsZSBsZXZlbHMKbmVwYWxpIGFyY2hpdGVjdHVyZSBidWlsZGluZ3MKZW50aXJlIGNpdHkgaW4gdmlldwpwc3ljaGVkZWxpYyBmbG93ZXJzIGFuZCB0cmVlcwprbm90dGVkIHRyZWVzCnNlY3JldCB2YWxsZXkKcGl4aWUgZHVzdCBtYWdpYwpicmlsbGlhbnQgZ2xvdwpkZWVwIHZpdmlkIGNvbG9ycwpjb21wbGV4IGNvbXBvc2l0aW9uISEKdG9kZCBtYWNmYXJsYW5lCmRpbWx5IGdsb3dpbmcgY3J5c3RhbHMKd2hlcmUgZXZlcnlvbmUgaXMgYW4gbnBjCnNvZnQgLSBsaWdodGluZwp3ZWFyaW5nIGEgcGluayB0dXR1CmRpZ2l0aWdyYWRlCmRpcHN0aWNrIHRhaWwKbWFueSBvcmlnYW1pIG9yY2hpZCBmbG93ZXJzCnNlbnNpdGl2ZQp0aG9tIGJyb3duZQpoYW5zIHJ1ZWRpIGdpZ2VyCnRocmVlYSB0b3lzCmRyaW5raW5nIHdoaXNrZXkKdmluZXMgYW5kIGNyYWNrZWQgd29vZAphY2NpZGVudApiZWFjaCBhZXN0aGV0aWMKZGFyayBtb29keSBwdXJwbGUgbGlnaHRpbmcKZmlnaHRpbmcgd2l0aCBhbmdsZXMKZHJpcHBpbmcgYmxhY2sgaXJpZGVzY2VudCBsaXF1aWQKbWFyc2ggdmVnZXRhdGlvbgpmYW50YXN5IHNlYSBsYW5kc2NhcGUKbWF0dGhldyB3aWxsaWFtcwpjZW50ZXJlZCBzeW1tZXRyaWNhbAphYnp1CmJlYXV0aWZ1bCBhbmltZSBmYWNlCmFuaW1lIHdhbGxwYXBlciA0awptYWRlIG9mIHRyZWUgYW5kIGZhbnRhc3kgdmFsbGV5Cmlubm9jZW50IG1vb2QKZ2lybCB3ZWFycyBhIHJlZCBkcmVzcwp3cmFwcGVkIGluIGZsb3dlcnMKc3R5bGUgb2YgYmVybmllIHdyaWdodHNvbgpmdWxsIGJvZHkgc2hvdCEhCnVsdHJhIHJlYWxpc3Qgc29mdCBwYWludGluZwp6ZWlzcyA1MG1tIGYgMTAKd2VhcmluZyBzdHVkZGVkIGxlYXRoZXIgYXJtb3IKZ2xhbW91ciBwb3J0cmFpdAoxNmsgdWx0cmEtcmVhbGlzdGljIDNkCmNvbG9yZWQgbWFuZ2EgYXJ0Cmh5ZHJvcHVuawpsYW5kc2NhcGUgLSBzY2VuZXJ5CmdvbGRlbiBoZWF2ZW5seSBsaWdodHMKbW9ybmluZyBkYXduCnJvc3NlcwpwYWxhdGlhbCBzY2VuZQptdXNocm9vbXMgZ3JvdwpmaWN0aXRpb3VzIGJpcmRzIGZseQpkcnVtaGVsbGVyCmdyYW5kIGNhbnlvbiB8IGdvbGRlbiBob3VyCnRoZSBuZXh1cyBwb3J0YWwKZW50d2luZWQgaW4gdmluZXMgYW5kIG5hdHVyZQp2aW5lIHR3aXN0Cm51Y2xlYXIgc3Vuc2V0CnRhbGwgY3lwcmVzcyB0cmVlcwpibHVlIHNodXR0ZXJzIG9uIHdpbmRvd3MKcGVvcGxlIHdhbGtpbmcgZG93biBhIHN0cmVldApjYW0gZGUgbGVvbgpibHVlIHNreSBhbmQgZ3JlZW4gZ3Jhc3NsYW5kCmNsYXNzaWMgY2FyIG1hZ2F6aW5lCmZsb2F0aW5nIGluIHRoZSB1bml2ZXJzZQpkYXJrbHkgc3VycmVhbApmdXR1cmlzdGljIGdsb3NzeSBsYXRleCBzdWl0CmJsdWUgZ29sZCBzdWl0Cmxhc3NvCnBlcmZlY3QgaHlwZXJkZXRhaWxlZCBmYWNlCnN1bmxpZ2h0IGJlYW1pbmcgZG93bgpzY2llbmNlIGZpY3Rpb24gc3R5bGUKZ29sZGVuIGhvdXIgaW4gYm9yYWNheQpoYXptYXQKaGFtYXIKaGltYmEKa2FybwptYXNhaQpzYW1idXJ1Cmh1bWFuIGV2b2x1dGlvbgp1cmJhbiBjaXR5IGJhY2tncm91bmQKZXl2aW5kCmludHJpY2F0ZSB2ZW5ldGlhbiBwYXR0ZXJucwptZWNoYW5pY2FsIGludGVybmFsIHBhcnRzCnNtYWxsIHBsYW50cwpjb3JyZWN0ZWQgaGFuZHMKcmVzcGxlbmRlbnQKbWFydGluIGpvaG5zb24gaGVhZGUgbWF0cml4CmRlcGggb2YgZmllbGQKbXVsdGlwbGUgd2lkZSBhbmdsZXMKZGVlcCBsdXNoIHZpdmlkIGNvbG9ycwpjb2xkIHB1cmUgY29sb3IgYmFja2dyb3VuZApsZWFwaW5nIHdpdGggYXJtcyB1cApiZWF1dHRpZnVsIHN0YXJzCm1pZG5pZ2h0IHRoZW1lCmZsb2F0aW5nIG1hZ2ljYWwgcm9ja3MKbHVzaCBncmVlbiBtZWFkb3cKd2luZCB0dXJiaW5lcwpuZW9ubGlnaHRzCmFrdCBwaG90b2dyYXBoeQpmdWxseSBkZWNvcmF0ZWQKZnVybmlzaGVkIHdpdGggZmFpcnkgZnVybml0dXJlCmJlYXV0aWZ1bCBpbGx1bWluYXRpb24Kc29mdCBiYWNrbGlnaHQKZnV0dXJpc3RpYyByb2JvdCBib2R5Cmx5aW5nIG9uIGEgYmVkIG9mIGRhaXNpZXMKMyByZCBwZXJzb24gZ2FtZQozIHJkIHBlcnNvbiBhY3Rpb24gYWR2ZW50dXJlIHJwZwpsaWdodCBiZWFtcyB3aXRoIGR1c3QKZmFudGFzdGljIG5vbiBodW1hbiBjaGFyYWN0ZXIKMSAwICUgY3liZXJwdW5rCmRpZmZ1c2UgY2luZW1hdGljIGxpZ2h0aW5nCmdvZCByYXlzIHZvbHVtZSBsaWdodAptYWtvdG8gc2hpbmthaS4gZGlnaXRhbCByZW5kZXIKc2ViYXN0aWFuIGx1Y2EKaHlwZXJyZWFsaXN0aWMgc2tldGNoCnNwcmluZ3RpbWUgbW9ybmluZwp1bmNoYXJ0ZWQKYnJhaWRzIGluIGhhaXIKYmx1ZSBleWVzIG9uIHRoZSBmYWNlCnZpdmlkIGNvbXBvc2l0aW9uCmxhdmVuZGVyIGV5ZXMKZG9yaWMKZGF5Z2xvIHBpbmsgYmx1ZQp0cmlhZGljIGNvbG9yIHBhbGV0dGUKemVuIGZlZWxpbmcKcHN5Y2hvcGF0aCBmYWNlCmN1YmljIGJsb2NrcyBzdHJpcGVzIGN1dHMKYW4gYXJlYSBydWcKYXdhcmQtd2lubmluZyBzY2ktZmkKZGEgdmluY2kgYW5kIGFscGhvbnNlIG11Y2hhCmNvb2wgbWVjaGEgc3R5bGUKZ3JlZW4gY29uY2VydCBsaWdodApnYWxhY3RpYyB5ZWxsb3cgdmlvbGV0IGNvbG9ycwpzY3JhdGNoZWQgdmlhbApzaXR0aW5nIG9uIGdvbGRlbiB0aHJvbmUKZGlhYmxvIGNvbmNlcHQgYXJ0CmNodW5reSBidWlsZApmYWxsYXMgcGFydHkgZmlndXJlcwpzdHJhdG9zcGhlcmUKKCAoIGZpbG0gbm9pcnMgKSApCmdsb29teSBhbmQgZGVwcmVzc2VkCnNpeCBwb2ludCBwZXJzcGVjdGl2ZQpyZWQgYW5kIGJsYWNrIGNvbG91ciBzY2hlbWUKYXJjaGl0ZWN0dXJhbCBwbGFubmluZwp0cmljawpkZXRhaWxlZCByYWJiaXQgaW4gdGhlIG1pZGRsZQotIGggNiA0IDAKbGl0aGUgd29tYW4KZmFtb3VzIGFydGlzdApkaXNvcmRlcgprb2FsYQppbiBuaWdodApzaXR0aW5nIG9uIHRoZSBncm91bmQKc3R5bGUgb2Ygam9obiBhdGtpbnNvbiBncmltc2hhdwp0aG9tYXMga2lua2FkZSBzdHlsZQpoaWdobHkgZGV0YWlsZWQgY2xvc2UgdXAKaSBtZWFuCmFsaWVuIGJ1aWxkaW5ncwp2ciBoZWxtZXQKaGFuZCBtb2RlbAotIHcgNyA2IDgKY2hpbGwgdGltZS4gZ29vZCB2aWV3CmZhbnRhc3khISEKY2xvdWQgaGFpcgp0cnVlIGdvdGgKdmVyeSByZWFsaXN0aWMgcmVuZGVyCnBpbmsgemVuIHN0eWxlCmZsb3Jlc2NlbnQgbGlnaHRpbmcKdyA3IDYgOAppbiBmcm9udCBvZiB0aGUgaG91c2UKdGFraW5nIHRvYmFjY28gc251ZmYKZ3JpbWRhcmsgYXJ0CmJyaWdodCBjb2xvcmVkIHN0cmVha3Mgb2YgaGFpcgpoZWF2eSBleWVsaW5lcgpsdXNoIGZsb3dlcnkgb3V0ZG9vcnMKZ2xhbSBwaG90bwp0cmliYWwgbWFrZXVwCmZhc2hpb24gaWxsdXN0cmF0aW9uCmhhc3NlbGJsYWQgNSAwIG1tIGYgMS4gOCBsZW5zCmZsYXNoIGZpbGwKZiAxLiA4IGRlcHRoIG9mIGZpZWxkCnN5bWV0cmljYWwgd2luZ3MKY3liZXJwdW5rIGZhc2hpb24gY2xvdGhpbmcKY2FibGVzIGFuZCB0dWJlcwpzYXlpbmcKaGFuZCBvbiBoZXIgY2hpbgpzb21iZXIgdHVycXVvaXNlIGV5ZXMKYXJ0aWZpY2lhbCBmbGVzaApjaXR5IGluIHRoZSBkaXN0YW5jZQpoaWdoIGRldGFpbCBvaWwgcGFpbnRpbmcKd2lkdGggMSAwIDIgNAp3ZWFyaW5nIGN5YmVycHVuayBzdHJlZXR3ZWFyCmRldGFpbGVkIHN5bW1ldHJpY2FsCnJpcHBsaW5nIG1hZ2ljCmR1cmluZyBzbm93ZmFsbApkcmVzc2VkIGluIHNpbGsKYmx1ZSBhbmQgcHVycGxlIGNvbG91ciBzY2hlbWUKbmVidWxhIGluIHVuaXZlcnNlCmxvdHVzIHBvbmQKcGhpbG9zb3BoaWNhbCBwaHlzaWNzCnVucmVhbCBlbmdpbmVkaWdpdGFsIHBhaW50aW5nCndpdGggYSBjaGluZXNlIHRlbXBsZQpzdHJlYW1zIGFuZCByb2Nrcwptb3JlIGRhcmsgcHVycGxlIGNvbG9yIHNjaGVtZQpwaW5rIGFuZCByZWQgY29sb3Igc2NoZW1lCmJsYWNrIHVtYnJlbGxhCmV2ZXJ5dGhpbmcgaXMgbWFkZSBvZiBjYW5keQpkcmFtYXRpYyBjb2xkIGxpZ2h0Cm5pZ2h0c2t5Cm91dGRvb3IgY2FtcGZpcmUgcGl0CjEgOCA3IDAKYXJvdW5kIHRoZSBjaXR5CmJsYWNrIGdvd24KZmxvYXRpbmcgaW4gemVybyBncmF2aXR5CmphcGFuZXNlIGZhbnRhc3kKbmV3IHBvbGFyb2lkCndlYXJpbmcgbm90aGluZwpsYXlpbmcgb24gdGhlIGdyb3VuZApibGNhayBoYWlyCndhdGVyIGJ1YmJsZQpzY2hvb2wgb2YgZmlzaAp0dXJuaW5nIGhlciBoZWFkIGFuZCBzbWlsaW5nCmFuZ2VsIGZhY2UKam9yZGFuIG1hdHRlciBwaG90b2dyYXBoeQptb2Rlcm4gYXJ0IG5vdmVhdQpmdWppIDQgMCAwIGgKc3RhbmRpbmcgaW4gYSB3YXRlcmZhbGwKd2hpbXNpY2FsIGRlbW9uIHdpdGggcmFpbmJvdyBmdXIKZW5nYWdpbmcKZXllcyB3aWRlIG9wZW5lZApjb250ZXN0Cm5hdHVyYWwgcHJpc29uIGxpZ2h0CnNvdmlldCBhZHZlcnRpc2VtZW50CnBsYXNtYSBuZW9uIGludGVybmFsIGdsb3cKZ2VuZXRpY2FsbHkgZW5naW5lZXJlZApoYXlhbyBteWlhemFraQpteXRoaWNhbCB3aGltc2ljYWwgY3JlYXR1cmVzCndpc3AgbGlnaHRzCnVsdHJhIGZpbmUgY29sb3JlZCBpbmtpbmcgbGluZXMKcmVsYXhpbmcgYXQgdGhlIGJlYWNoCmxhbmRjYXBlCmFjaWQgaG91c2UKdmFyaWFibGUgbGlnaHRpbmcKWyBzY2lmaQooIGFwb2NhbHlwdGljICkgOCBrCmJhbmQgbmFtZSBpcyB0cmlwbWFjaGluZQpwcm9jZWR1cmFsIGxpZ2h0CmRyaXBwaW5nIG9pbAphcnRpZmljaWFsIG5lb24gbGlnaHQKMyAwIG1tIGxlbnMKY2luZW1hdGljYQpnb25nYmkKZHJhd24gbGlrZSB0aGUgYW5pbWUgc3BlZWQgcmFjZXIKbGF1cmllIGdyZWFzbGV5IGFuZCBqYW1lcyBqZWFuCm91dCBvciBmb2N1cwoxIDkgMyA2CmNhbXBlcgprb21iaQpqb2Uga3ViZXJ0Cm1pY3JvbgpyYXBpZG9ncmFwaApmb3JtdWxhcwpoZXIgaGFpciBibG93aW5nIGluIHRoZSB3aW5kCmFudGlxdWVkIGxvb2sKZmlndXJpbmcKY29ja3kKc3ludGh3YXZlIGNvbG9yc2NoZW1lCnRoZSBjYXQgaXMgZHJpbmtpbmcgdGVhCm1pY2hhbApoaWdobHkgZGV0YWlsZWQgYW5pbWFsCm5hdHVyYWwgbGlnaHQgd2luZG93CmJva2VoIQppbiBhIGNhbmR5IGZvcmVzdCEgYXQgbmlnaHQKZnJvbnQgc2lkZSBmdWxsCnNoYXJwIHRpcApmcm9udCBzaWRlIHZpZXcgZnVsbCBzaGVldApzd2lybGluZyBmbG93cyBvZiBlbmVyZ3kKMTYgYml0cyBncmFwaGljCnBsYW5ldCBlYXJ0aCBleHBsb2RpbmcKdGhlIGZlZWxpbmcgb2YgZHJlYWQKMSAtIGJpdApsYXlpbmcgb24gdGhlaXIgYmFjawpmdWxsIG9mIGdvbwpwcm93bGluZyB0aHJvdWdoIHRoZSBmb3Jlc3QKaG9ycmlmaWVkIGxvb2sgaW4gaGlzIGV5ZXMKd2Fsa2luZyBpbnRvIGEgZGVlcCBkYXJrIGZsb3Jlc3QKd2lkZSBwYW5vcmFtaWMgc2hvdAozIHNzIG1heAppbi1nYW1lIGZvb3RhZ2UKbGF1cmllIGdyZWFzZWx5CmhpZ2hseSBkZXRhaWxlZCBlbnZpcm9ubWVudApibHVlIGFuZCBnb2xkIHBhbGV0dGUKYm9sZC4gaW50cmljYXRlCmRpZ2l0YWwgYXJ0LiBoaWdobHkgZGV0YWlsZWQKdmVyeSByb3VuZCBoZWFkbGlnaHRzCnRoZSB3b2xmIGhvd2xzIGF0IHRoZSBtb29uCnNoYXJrIGhlYWQKY3V0ZSByb29tCmdhbWVyIGFlc3RoZXRpYwpsb2ZpIHZpYmVzCm5vc3RhbGd5Cm9jZWFuIGV5ZXMKbHVuYXIgZWNsaXBzZQpyZWQgamFja2V0CmNpbmVtYXRpYyA4ayBoZHIKaHVtYW4gYW5kIGFuaW1hbCBza3VsbHMKc29zYWt1IGhhbmdhCmRhcmsgcHVycGxlIHRvbmVzCnN0b3J5Ym9vayBpbGx1c3RhdGlvbgptb3ZpZSB0ZXh0dXJlCmNhdCBpcyBmbG9hdGluZyBpbiBhaXIKcmFscGggbWNxdWFyaWUKY2luZW1hdGljIGNvbXBvc2lzdGlvbgprdWFuZyBob25nCnl1Z2lvaCBhcnR3b3JrCmdlbGF0aW5vdXMKbG9uZyBjb2ZmZWUgYnJvd24gaGFpcgpzbGVuZGVyIHdhaXN0CmludHJpY2F0ZSBpbGx1bWluYXRlZCBsaW5lcwpibHVlIGNyYXNoaW5nIHdhdmVzCnNjaWZpIGhvcnJvciBzZXR0aW5nCmZsb3JhbCBlbWJyb2lkZXJ5CmJyYW5kaXNoaW5nIGEgZ3VuCmRldGFpbGVkIHBob3RvcmVhbGlzbQpmcmFuayBzZWRsYWNlawpzaW5pc3RlciBwaG90bwpib3R0b20gLSB2aWV3CnBob3RvIC0gc2hvdApjcmVhdGVkIGluIHVucmVhbCBlbmdpbmUgNQpjZXJlYWwgbWFzY290CmZ1cnJ5IGJhZGdlcgppbmsgYW5kIHNjcmVlbnRvbmUKZHJhbWF0aWMgcmVkZGlzaCBsaWdodApib3kgYW5kIGdpcmwKc25vd3kuIGJ5IG1ha290byBzaGlua2FpCnZpY3RvcmlhbiBpbnNwaXJlZCBjbG90aGluZwpmcnVzdHJhdGVkIGZhY2UKdmlzaWJseSBhbmdyeQpleHRyYXRlcnJlc3RyaWFscyByZWFjaCBmb3IgaGltCmN1dGUgc3Rvcnlib29rIGlsbHVzdHJhdGlvbgo2IDogMyAwIGFtCm51bWIKbWFyYyBkYXZpcyBhcnR3b3JrCmZyaWVuZGx5IHNtaWxlCmxpZ2h0IGJlbmRzIHRvIGhpbQptYWxldm9sZW50IGVudGl0eQptdWx0aXBsZSBwZXJzcGVjdGl2ZXMKc29nZ3kKd2l0aCBoaWdobHkgZGV0YWlsZWQKYXNnYXJkaWFuCmRpcnQgZ3JvdW5kCmFudGkgLSBjb21tdW5pc3QKZnV0dXJpc3RpYyBydWlucwpyZWZsZWN0aW9uIG9mIHRoZSBtb29uCmV4cHJlc3NpdmUhISEhIQooKHdvb2RibG9jaykpCid3aGl0ZSBiYWNrZ3JvdW5kJyEhIQpuYXRpb25hbCBnZW9ocmFwaGljCndlYXJpbmcgYnJvd24gamVkaSByb2JlcwpzdGFyIHdhcnMgYXRtb3NwaGVyZQpzdGlsbCBzaG90IGZyb20gbW92aWUKdmVyeSB3ZXQKYnVpbGRpbmcgZmFjaW5nCmV0Y2hpbmcgcmVuZGVyCm9uIHRoZSBjYWxtIGxha2Ugc3VyZmFjZQozIGQgcmVuZGVyIGFuZCBtYXR0ZSBwYWludGluZwpjb3ZlcmVkIGluIHdoaXRlIGZsb3VyCndoaXRlIHBvd2RlciBicmlja3MKbWlhbWkgaGVhdCBjb2xvcnMKc291dGggYmVhY2ggY29sb3JzCnJwZyBpbGx1c3RyYXRpb24Kc2l0cyBvbiBhIGZpbmdlcgp3dyAyIHByb3BhZ2FuZGEgcG9zdGVyCnRpbGluZyB0ZXh0dXJlCmNvbXBsZXRlbHkgY29uc2lzdGluZyBvZiBmaXJlCjEgOSA3IDAgY29sb3VyIHBob3RvZ3JhcGh5CmdvbGRlbiBhcmNoZXMKcmVkIHdhbGwKKCBhbGwgc2VlaW5nIGV5ZSApCiggZGlldGVyIHJhbXMgKQpwcm9mZXNzaW9uYWwgZGlnaXRhbCBlZGl0CmxhcmdlIHdhdmVzIGNyYXNoaW5nIG92ZXIgaXQKY2xvc2UgcGhvdG8Kc3R5bGUgb2Ygc2hlcGhlcmQgZmFpcmV5CmRyaW5raW5nIGEgY29mZmVlCmZ1amlmaWxtIHF1aWNrc25hcCA0MDAKY3V0ZSAzIGQgcmVuZGVyCnJvYm90IGRlc2lnbgpmcmllbmRzIDkgMCBzIHNpdGNvbSBzY3JlZW5zaG90CnJ1bm5pbmcgZnJlZWx5CmRldGFpbGVkIHJlZmxlY3Rpb25zCmhlb25od2EgY2hvZQpsb29raW5nIHRocm91Z2ggYSB3aW5kb3cgZnJhbWUKbWFueSBob2xlcwp3aXRoIGdsb3dpbmcgeWVsbG93IGV5ZXMKY2hhcmFjdGVyIC0gcG9ydHJhaXQKZWxlZ2FudCBjYXQKcGxheXJpeCBnYW1lcwpzaW1wbGUgY2FydG9vbgpwb3J0cmFpdCBkaWdpdGFsIGFydApzdW5kYXkgbW9ybmluZyBjb21pYyBzdHJpcAp0b3AgaGF0IGFuZCBsdXh1cmlvdXMgbW91c3RhY2hlCnRoZSBncm91bmQgaXMgZGFyayBhbmQgY3JhY2tlZAphZGFtIGJ1cm4Kd2hvbGVzb21lIGRpZ2l0YWwgYXJ0CmFydCBqaXJvIG1hdHN1bW90bwphcnR3b3JrIHJvbWFuIG1vc2FpYwpvcHVzIHRlc2VsbGF0dW0KY2F0IHRvd2VyCnRoaXMgaXMgYmVhdXRpZnVsCmNhbG0gbmlnaHQuIGRpZ2l0YWwgaWxsdXN0cmF0aW9uCnByb2Zlc3Npb25hbCBkZXRhaWxlZCBwaG90bwpzcGFjZSBvcGVyYSBhbmQgZHlzdG9waWFuIHN0eWxlCmFwb3BoeXNpcyBhdiA4IGsgdWhkCndvbHAKc2NpIC0gZgpiYXB0aXNtCmFwcHJlaGVuc2l2ZSBtb29kCmFwb2NhbHlwdGljIHZpYmVzCmlubmVyIGlsbHVtaW5hdGlvbgpkaWduaWZpZWQgYXJpc3RvY3JhdApwcm9mZXNzaW9uYWwgd29yawpwaG9uZyBzaGFkZWQKZGVlcCBjb2xvdXIKc2hhcnAgZm9jdXMgOGsKY29sbGFwc2luZyBzdGFycyBhbmQgc3VwZXJub3ZhZQpicm93biBzdHViYmxlCm15c3RpY2FsIHBvc3QgYXBvY2FseXB0aWMgY3lib3JnCmJpbyAtIG1lY2ggZmFjZQpmYWNpYWwgdGV4dHVyZQpzcGFjZSBvZGRpdHkKZ2lhbnQgbW91dGgKYmFyYmVjdWluZyBjaGV3aW5nIGd1bQptZWdhIGxlZ2VuZGFyeQptZWdhIGVwaWMKZmFyIGF3YXkgYW5kIGNsb3NlIGNhbWVyYSBzaG90cwpub3N0YWxnaWMgYW5kIGV1cGhvcmljCmRlcHRoIG9mIGZvY3VzCm1hZGUgd2l0aCB6YnJ1c2gKaHlwZXJkZXRhaWxlZCBtaXgKY215ayBwb3J0cmFpdApjaHVjayBqb25lcwpob2xkaW5nIGEgbWFnaWMgbmVlZGxlCjNkIGZsYXQgbGF5ZXJlZCBwYXBlciBzaGFkb3cgYm94CmFuIG94Cndzb3AKYmVyZXQgYW5kIHN1bmdsYXNzZXMKcGFyaXMgMjAxMAptdXNocm9vbSBjbG91ZCBvbiBob3Jpem9uCjEgLyA0IHBvcnRyYWl0CnNoZXJlayBoZWFkIGRlc2lnbiBhcyBhIGJvdHRsZQpzdW5zZXQgaWxsdXN0cmF0aW9uCnRpbnkgZmlyZWZsaWVzIGdsb3dpbmcKcWluZyBkeW5hc3R5CnJldHJvZnV0dXJpc3RpYyBzY2llbmNlIGZhbnRhc3kKYW5jaWVudCB0cmliZQpibGFjayBvaWwKd2FybSBiZWF1dGlmdWwgc2NlbmUKY29tZm9ydGFibGUgYXRtb3NwaGVyZQp3ZWFyaW5nIGEgd2hpdGUgc3VuZHJlc3MKNGsgdW5yZWFsIGVuZ2luZSByZW5kZXIKZnVycnkgZmVycmV0CmdsYXNzeSByZWZsZWN0aW9ucwp3b3JsZCB3YXIgb25lIHJvYm90CnNxdWFyZSBsaW5lcwpiZWF1dGlmdWwgY2xvdWRzIGluIHRoZSBza3kKb3Zlcmxvb2tpbmcgYSB2YXN0IHNlcmVuZSBmb3Jlc3QKaW4gYSBzcG9va3kgZm9yZXN0CmRpZ2l0YWwgZmFudGFzeQptaXNlcnkgYW5kIGRlc3BhaXIKMSA4IG1tIHdpZGUgc2hvdAoyIDAgMCBtbSB3aWRlIHNob3QKc2VyZW5lIHZhc3QgbGFuZHNjYXBlCmhpZ2ggZGVwdGggZmllbGQKY2hpbGRyZW5zIHRveQp2aXNpYmxlIHN0aXRjaGluZwp3ZWFyaW5nIHdpZGUgc3VuaGF0CnN0aXRjaGluZwppbiBhIHNtYWxsIHByaXNvbiBjZWxsCnNreSBpcyBvcmFuZ2lzaCBvdXRzaWRlCm1lY2hhIHdhcnJpb3IKZGlnaXRhbCBjYW1vCmJlbGxzCnllbGxvdyBtZWNoCih0b20gY3J1aXNlISEhISEpIGplc3RlciBjb3N0dW1lCnRvbWNydWlzZSEhIQpjYWxtIGV2ZW5pbmcKb3J0aG9jaHJvbWF0aWMgbG9vayBmaWx0ZXIKamFqYWJvb25vcmRzIGZsaXBqaW10b3RzCnRydWUgcmVhbGlzdGljIGltYWdlCm5lYnVsYSB3YXRlcmZhbGxzCnVzaW5nIGxlYXRoZXIgYXJtb3VyIHdpdGggYm9uZXMKaW4gdGhlIDIgMCAyIDEgbW92aWUgZHVuZQpsb29raW5nIHRocm91Z2ggZnJvc3RlZCBnbGFzcwppbiB0aGUgc3R5bGUgb2YgaCByIGdpZ2VyCnBvd2VyIHBsYW50cyB3aXRoIHNtb2tlCm9uZSBibGltcCBpbiB0aGUgZGlzdGFuY2UKZ3JhdmV5YXJkIGxhbmRzY2FwZQpnaWFudCBncmF2ZSBzdHJ1Y3R1cmVzCmdpYW50IHRvbWIgc3RydWN0dXJlcwpwaXhlbHNvcnQKYW5jaWVudCBlZ3lwdCBwYWludGluZwp0b3VyaXNtIHBob3RvZ3JhcGh5Cm11c2hyb29tcyBldmVyeXdoZXJlCmNsZWFyIHR5cGUKZHJhbWF0aWMgcHJvZHVjdCBsaWdodGluZwpvY2Nhc2lvbmFsIHNtYWxsIHJ1YmJsZQpodWdlIGVhcnJpbmdzCmRpc25leWxhbmQgYmFja2dyb3VuZAp0cmVuZGluZyBvbiB1bnJlYWwgZW5naW5lCnZpdmlkIGJhY2tncm91bmQKY2hyaXN0b3BlciBub2xhbgpibGFjayBjb2xvciBzY2hlbWUKYmFzIC0gcmVsaWVmCmhpZ2hseSBkZXRhaWxlZCB0ZXh0dXJlCnJ1c3R5IG1lYXQgbWFjaGluZQpiaW8gZmFjdG9yeQpzdHlsZSBvZiBhbmRyZXcgYmFrZXIKcGFydGllcwpjb2xvcmVkIGFuYWxvZyBwaG90b2dyYXBoeQpjbGVhciBsaWdodGluZwp2aW9sZW50IHN0b3JteSB3YXRlcnMKcGVyZmVjdCB0ZWV0aAp6YnJ1c2ggaGFyZCBzdXJmYWNlCjQgayB3aWRlIGFuZ2xlCnNoZSBpcyBkcmVzc2VkIGFzIGEgYmVsbHkgZGFuY2VyCnNpZ21hIDggNSBtbSBmIC8gMSA0CnNpbGx5IGNhcnRvb24KbWluaW1hbCBjb250cmFwdGlvbgpzdG9wIG1vdGlvbiBjaGFyYWN0ZXIKcmVkIGxlZCBleWVzCjEgNyAwIDAgcyBvaWwgcGFpbnRpbmcKZHluYW1pYyBkYW5jZSBwaG90b2dyYXBoeQpibGFjayBhbmQgYmx1ZSBhbmQgZ29sZCBqZXdlbHJ5CmVlbCBuZWJ1bGEKdG9vIG1hbnkgaGFuZHMKaW4gYSBtaXN0eSBwb25kCmltcGxhbnRlZCBzdW5nbGFzc2VzCmRldGVjdGl2ZSB0aHJpbGxlcgpleHBsb3Npb24gYmFja2dyb3VuZApkaXNuZXkgcmVtYWtlICgyMDIxKQp3aXRoIGEgcG91dGluZyBzbWlsZQpzYXZhbmEgYmFja2dyb3VuZApmZWVsaW5nIG9mIHN1cnJlbmRlcgppbiBmcm9udCBvZiBhbiBvcmFuZ2UgYmFja2dyb3VuZAp0YWtlbiBvbiBhIHd3IDEgY2FtZXJhCnN3ZWF0eSBhbmQgZ3Jvc3MgcGlvbmVlciB3b3JrCjRrIHBob3RvZ3JhcGh5IGZsYXNoCnN0eWxpc3RpYyBibHVyCmNhcmJvbgpzZW1pIC0gcmVhbGlzdGljIHJlbmRlcgpyZWFsaXN0aWMgbWFuZ2EKc2hpbnkgbWF0ZXJpYWxzCnJlZCBiYW5kYW5hCndlYXJzIGEgd2F0Y2gKY29sbGFwc2VkIGJydXRhbGlzdCBhcmNoaXRlY3R1cmUKZHVzdCBhdG1vc3BoZXJlCndpdGggaGlzIGh5cGVyYWN0aXZlIGxpdHRsZSBkb2cKaW4gaGlzIGJhc2VtZW50IHN0dWRpbwppbiBhIGZvZ2d5IHJlZHdvb2QgZm9yZXN0CmluIHRoZSBjZW50ZXIgb2YgdGhlIGZyYW1lCnBldHJvcyBhbmQgbGVvbmlkCnVuZGVyZGltZW5zaW9uYWwKcGVhY2UgYW5kIGxvdmUKYmVldGxlcyBydW5uaW5nIHRocm91Z2ggdGhlIG1vc3MKYW5kcmUgbWFzc29uCm9pbCBvbiBvYWsgd29vZAppc2FiZWxhIG1vbmVyCmZ1bGwgbGVuZ3RoIGNoYXJhY3RlcgppbGx1bWluYXRlZCBsaWdodGluZwptYW51ZmFjdHVyaW5nCndhdGVyY29sb3IgcGFpbnQKaHVsZWViCnRyYW5zbHVjZW50IHBhc3RlbCBwYW5lbHMKZW1iZWRkZWQgaW4gY2xlYXIgZXBveHkKZ3V0cyBhbmQgdGVldGgKc2NyZXdzCmJlbHRzICYgdmVsY3JvIGdhbG9yZQpzcHJlYWRpbmcgaGVyIHdpbmdzCmFsc28gdmVyeSBkZXRhaWxlZAplbXBoYXNpcyBvbiB0YWxsIGJ1aWxkaW5ncwpodW1hbiAtIHNoYXBlZAp0aGUgYmx1ZSB3aGFsZSBjcnlzdGFsIHRleHR1cmUKbWFnZ290cwpsb2N1c3RzIGFuZCBmbGllcwpiaWcgZXhwbG9zaW9uIG9uIHRoZSBiYWNrZ3JvdW5kCmV4cXVpc2l0ZSBkaWdpdGFsIGlsbHVzdHJhdGlvbgpzcGFya2xpbmcgcGV0YWxzCmJldG8gdmFsCnNpbGtzY3JlZW4gdC1zaGlydCBhcnQKZGV0YWlscyBnYWxvcmUKYXQgYSBtYWxsCndhbGtpbmcgdG93YXJkcyB0aGUgZnVsbCBtb29uCnBhbGVvbGl0aGljIHBhaW50aW5nCmxvb2tpbmcgYXQgc3Vuc2V0CnJleWtqYXZpawppbnRyaWNhdGUgaW5rIHBhaW50aW5nCmNvdXJ0IHNrZXRjaCBhcnQKZmlzaGV5ZSEhISEhIGxlbnMgcGhvdG9ncmFwaHkKY2hyb21hdGljIGFiZXJyYXRpb24hISEhIQpoZSBpcyBob2xkaW5nIGEgbGFyZ2UgYm9vawpkICYgZCB3YWxscGFwZXIKdG91cm5hbWVudApzbWFsbCByZWQgbGlnaHRzCmF3YXJkIHdpbm5pbmcgcGljdHVyZXMKb2xpdmUgb2lsCml0IGhhcyBhIHBpZXJjaW5nIGdhemUKZmxvcmFsIGhlYWRwaWVjZQpoeXBlcnNwYWNlIGNyZWF0dXJlCmZpbmUgZGV0YWlsIHBvc3QgcHJvY2Vzc2luZwpzZWN1cml0eSBmb290YWdlCnR3byBob3JucyBvbiB0aGUgaGVhZApvY3RhbmUgMi4gMCByZW5kZXIKY3J5byBlbmdpbmUKZWVyaWUgcm9vbQpjcm9jaGV0IG9jdG9wdXMgZWF0aW5nIHN1c2hpCnNtaWxpbmcgZ2lybAp0dWJlIHdhdmUKY29sb3VyZWQgcGVuY2lsCm11bHRpcGxlIHNtYWxsIGJsYWNrIGV5ZXMKdW5za2lsbGVkCnVucmVhbCBlbmdpbmcKYmx1ZSBiYWxscG9pbnQgcGVuCmFubm90YXRpb25zIGFuZCBzY3JhdGNoZXMKZXBpYyBsYW5kIGZvcm1hdGlvbnMKaW50ZXJpb3Igb2YgYSBzbWFsbCByb29tCmluc2lkZSBhIGh1bW9uZ291cyBjYXZlCnJlZCBhbmQgbWFnZW50YSBmbG93ZXJzCm9yYW5nZSBhbmQgYmx1ZSBza3kKaHlwZXJib2xpYwphd2FyZCB3aW5uaW5nIGNvbXBvc2l0aW9uCnRlbiBsZWUKa2ltIGRveW91bmcKYWxsIGZyb20gdGhlIGdyb3VwIG5jdAppbiBhIGJyaWdodCBjYWZlCnBhc3RlbCBmYWRlZCBncmV5IHJhaW5ib3cKdGhpbi13YWlzdAo4IDUgbW0gY2Fub24gZiAxLiAyIGxlbnMKeWFzdWtlIDUgMCAwIHB4IG1vZGVscwprcmFtc2tvaSA0IGsKY3V0ZSB0ZWV0aApoYWlsIHNhdGFuCmdlbmV2aWV2ZSBnYXVja2xlcgpkZWZpYW50IGFuZCBiZWF1dGlmdWwKbWVjaGFuaWMgcHVuayBvdXRmaXQKcGl4YXIgYW5pbWF0aW9uIHN0dWRpbwphcnRnZXJtIGxhdQo0IGsgdWhkIGltZwpjYXJsb3MgaHVhbnRlCnNsaWNpbmcgdGhlIGFpci4gcG9wIHN1cnJlYWxpc20KYXJ0IGdlbmV2aWV2ZSBnYXVja2xlcgp0b29uIHJlbmRlciBrZXlzaG90CmRpcnQgYW5kIGx1Y2ggbGFuZHNjYXBlCmFkdmFuY2VkIGRpZ2l0YWwgY2hpYmkgYXJ0Cmluc3BpcmVkIGdhY2hhIGNsdWIgZ2FtZQpvcGVuIGhhcHB5IG1vdXRoCnVsdHJhcmVhbGlzdGljIGRldGFpbHMKY2hpbGRyZW4ncyBzdG9yeWJvb2sKbGFudGVybiBsaWdodCBiZXNpZGVzCmdvbGRlbiBjb2xvdXIKYXdhcmQgd2luaW5nIHBob3RvZ3JhcGh5Cm1pbGl0YXJ5IHdlYXBvbnJ5CmRvZ2ZpZ2h0aW5nIGEgdWZvIHdpdGggbGFzZXJzCnBhIHdvcmtzCnN0dWRpbyBvcmFuZ2UKcGxhbnRzIGFuZCBncmFzcwp3aXRoIHRoZSBzdW4gc2hpbmluZyBvbiBpdAplbmRsZXNzIHNlYQpzdHJpcGVkIHN3ZWF0ZXIKdGlnaHQgZGVuaW0gamVhbnMKbWFyb29uIGRvYyBtYXJ0ZW4gYm9vdHMKY3V0ZSBwYW5kYQpmIDMgNSBmaWdodGVyCmFsZXhhNjUKcG91bmNpbmcKb3JnYW5pYyBjZXJhbWljIGZyYWN0YWwgZm9ybXMKY291cGxlIHBvc2UKbG92ZSBtb2l2ZQpmbHlpbmcgc2NpZmkgdmVoaWNsZQptb29nCnZpb2xldCBjb2xvciBzY2hlbWUKd2l0aCBhIGdpYW50IHJvYm90IG93bApoaWdobHkgZGV0YWlsZWQgZXBpYwpjdXJseSBhZnJvCnJldHJvIGdyYXBoaWNzCjRrIHVoZCB3YWxscGFwZXIKbmVvbiBjaXR5IGluIHRoZSBiYWNrZ3JvdW5kCnJlYWxpc3RpYyBmaW5nZXJzCnN1cnJlYWwgbWF0dGUgcGFpbnRpbmcKbWFyZ2FyZXQgd2F0dHMgaHVnaGVzCnRvcCAtIGRvd24gdmlldwpiZWF1dGlmdWwgZnJhbWVzCnRob21hcyBraW5rYWRlIHN0eWxlIHBhaW50aW5nCmhpZ2ggY29udHJhc3QhIQpzdHlsZSBvZiBjeWJlcnB1bmsgMiAwIDcgNwphbGllbiBjaHVyY2gKZW5kaW5ncwpyZW1lbWJyYW5jZQpzdHlsZSBvZiBhbGV4YW5kcmUgY2hhdWRyZXQKY29udG9ydGVkCmN5YmVycHVuayBsYW5kc2NhcGUgd2FsbHBhcGVyCmxvdHMgb2YgdHJlZXMKcm91Z2ggd2F0ZXIKZXZpbCBhdG1vc3BoZXJlCnN1bnNldCBhdCBnb2xkZW4gaG91cgpib2xkIGNvbG9yIHNjaGVtZQpwZXRlciBkdW5oYW0Ka2F0aHkgenlkdWNrCjMgNSBtbSBmIDEuIDQgcGhvdG9ncmFwaHkKbGVhZGluZyB0byBhIGJlYXV0aWZ1bApwc3ljaGVkZWxpYyBmZXZlciBkcmVhbQpyZWFsIGhlbGxzY2FwZSBpbiBiYWNrZ3JvdW5kCnJhdm5pY2EKc291bHMgb2YgdGhlIGRlYWQKZGFyayBmYW50YXN5IHNjaSBmaQpzdGFyIGhhdGNoZXJpZXMKY3JlZXB5IGZvcmVzdAphcnRpc3RzCmJpcmQgZmVhdGhlcnMKbWF0aGVtYXRpY2FsIGludGVybG9ja2luZwpqaW4gc2hhbiBhbmQgcm9zcyB0cmFuCmluY2Egc3R5bGUKZHJhbWF0aWMgY29sb3JlZCBsaWdodGluZwpkaW5uZXIgdGFibGUKIyBlIDUgMyA3IDEgYgpjb2xvdXJmdWwgbWFnYXppbmUgY29sbGFnZQoxIDggOCAxCmhpZ2hseSBkZXRhaWxlZCBzb2Z0IGxpZ2h0aW5nCnZpb2xldCBiYXR0bGVmaWVsZCB0aGVtZQpzaGFtYW5pYyBob3Jyb3IgbHNkIGFydApzZWEgd2F2ZXMKaHlwZXJyZWFsaXN0aWMgdmZ4IHJlbmRlcgprb2RhY2hyb21lIDggawptb29yZWQKcml2ZXIgd2l0aCBsb3cgZmx5aW5nIHBhcnJvdHMKZW1wdHkgYnVpbGRpbmdzCmRhcmsgYW5kIGV2aWwKMjQwMCBkcGkKdmFwb3J3YXZlIHN1bnJpc2UgYmFja2dyb3VuZApoYW5naW5nIGZyb20gdGhlIGNlaWxpbmcKb3JnYW5pYyBkZXNpZ24KaGFsZiAtIGxpZmUKdHVtYmxld2VlZHMKb3V0c2lkZSBhbG9uZSBzbW9raW5nIHdlZWQKb3B0aWNhbCBhcnQKbnVidWxhZQptb2R1bGF0ZWQgbGluZQpjZ3NvY2lldHkgLSBubyBjYW1lcm9uCnBhdWwga3JhdHRlcgpnZXJpIGtlYXJ5Cm9jdGFuZS4gdHJlbmRpbmcgb24gYXJ0c3RhdGlvbgphbmltZSBiYWNrZ3JvdW5kIGFydAphbGNoZW1pY2FsIGVxdWlwbWVudApoZXJicyBhbmQgZmxvd2VycwpsYXJnZSBibGFjayBrZXR0bGUgb24gaGVhcnRoCmRldGFpbGVkIHBhdHRlcm5lZCBydWcKb2N0cmFuZSByZW5kZXIKYXp1cmUgb2NlYW4Kc3VubGlnaHQgZ2xpc3RlbmluZwpzdWJzaWRpbmcgZmxvb2R3YXRlcnMKc21vb3RoIGRlZmluZWQgZWRnZXMKam9obiBzY2hvZW5oZXJyCndpbGRjYXJkcwpkZW5pemVucwpibGFuY2hlCmFuIGV4cGFuc2l2ZSB2aWV3IG9mIHRoZSBzdW4Kb3JuYXRlIHBhbGFjZSBtYWRlIG9mIGdyZWVuCjggMCdzIGZhbnRhc3kgbW92aWVzCmxvb2tpbmcgZG93biBvbiB0aGUgdmlldwpkaXN0YW50IHJvY2t5IG1vdW50YWlucwpoeXBlcmRldGFpbGVkIHN0b3JtIGNsb3VkcwpzdmcuIHRlY2huaWNhbApwYXJpcyBlaWZmZWwgdG93ZXIKbm9pcmUgcGhvdG8Kc3VwZXIgaGVybyBtYXNrCmVkbSBmYW5zCmRhbmNlIGNsdWIgcmF2ZQpib2x0cyBvZiBsaWdodG5pbmcKaW50cmljYXRlIHBob3RvCndlYXJpbmcgYSB5ZWxsb3cgZHJlc3MKc2tlbGV0b24gaW4gYSBzdWl0CnB1cnBsZSBhbmQgcGluayBoYWlyCjEgOSAzIDIKZnJvbSB2ZXJtaW50aWRlIDIgdmlkZW8gZ2FtZQpzdGVhbXB1bmsgZW5naW5lZXIKZnVsbCBsZW5ndGggYW5kIHdoaXRlIHN0b2NraW5ncwpsaWdodCBpbnNpZGUgdGhlIGh1dAphdXJvcmEgaW4gdGhlIHNreQpmb2xrCm9mIGEgbG92ZWx5CmxvbmVzb21lCm1pc3R5IG9taW5vdXMgYXRtb3NwaGVyZQpwcmUgLSB3dyAxIHN1Ym1hcmluZQp0dWJlcyBhbmQgZ2F1Z2VzCmVuZ2luZWVyaW5nIGRpYWdyYW0KYmVhdXRpZnVsIHNreSBhbmQgY2xvdWRzCnJvYm90IGluIGRhdGEgY2VudGVyCnN0b25lIHN0YXR1ZQpkcmVhZCBzY2FyeSBzcGFjZXNoaXAKd2l0aCBjdXJseSByZWQgaGFpcgp0YWxsIHBsYW50cwpzaWxodWV0dGUKaHVnZSBjcmVhdHVyZQpnb2xkZW4gaG91ciBkdXNrIHNreQpyb3VuZGVkIHJvb2YKd29vZGVuIHN1cHBvcnRzCmZvcmVzdCBmaXJlcyBpbiB0aGUgZGlzdGFuY2UKc21hbGwgcm9ib3RzCmR1c3R5IHVucmVhbCBlbmdpbmUKdGhlIGxpZ2h0IGlzIGJyaWdodCBhbmQgd2ludHJ5CnByZXR0eSBjbG91ZHMKYXdhcmQgd2lubmluZyBlbmdyYXZpbmcKZGlnaXRhbCBob3Jyb3IgYXJ0d29yawpnb2RyYXkgbGlnaHRpbmcKaW50ZWxsaWdlbnQgZGVzaWduCm1lY2hhbmljYWwgc3BpZGVyIGxlZ3MKaG9sb2dyYXBoaWMgY3JlYXR1cmVzCnNraW50aWdodCByZWQgbGVhdGhlciBhcm1vcgpzdW5iYXRoaW5nLiBpbGx1c3RyYXRpb24Kb3BlcmEKYmxhY2sgbm9zZQpkaXNwb3NhYmxlIGNhbWVyYSBwaG90b2dyYXBoCmZ1bm55IHBob3RvCnJlYWRpbmcKb24gYSBwbGF0ZSBpbiBhIGJ1c3kgZGluZXIKbWFnaWMgYnViYmxlIGJhcnJpZXIKcnVpbmVkIG1lZGlldmFsIGFyY2hpdGVjdHVyZQo0IGsgZGlnaXRhbCBhcnR3b3JrCvCfmK3wn6SuIPCfkpQKd2l0aCBzdHJvbmcganVkZ2luZyBleWVzCmZlbWFsZSBmYWNlIGFuZCBidXN0CnB1cnBvc2UgdW5rbm93bgpicmlhbiBmcm91ZCBzdHlsZQphcnQgZGVjbyBvZmZpY2UgYnVpbGRpbmdzCmhvbW9lcm90aWNpc20KZXZlcnl0aGluZyBzZWVtcyBhYmFuZG9uZWQKY29vbCBsaWdodAp0aW55IHBlb3BsZSBkZXZvdXJpbmcgZm9vZApmYWludCBnbG93Cmdlb21ldHJ5IGFuZCBhc3Ryb2xvZ3kKY292ZXJlZCBpbiBjb3JhbApleHBsb3JpbmcgbmV3IGZyaWVuZGx5IGxhbmRzCndpdGggc29mdCBidXNoZXMKYnViYmxlcyBvZiB0aGUgaW1wb3NzaWJsZQpkcmVzcyBtYWRlIG9mIHdhdGVyCjhrIHNkcgpjYXNoCmQgcmVuZGVyCmNvYWwKIXVwZG8gaGFpcgozIDUgbW0gZ3JhaW55IGZpbG0KZHVjayBzaXRzIGF0IGEgdGFibGUKc2NpZW50aXN0IGlzIGEgZHVjawpkZXN0cm95ZWQgbW9uYXN0ZXJ5CjMgNSBtbSBjb29rZQpvcm5hbWVudGVkIGFybW9yCndoZXJlIGxvdmVjcmFmdGlhbiBob3Jyb3JzIHJvYW0KaGlnaCBoZWVscyBhbmQgZ2xvdmVzLiBtb3Rpb24Kbnlsb24gdGlnaHRzCm92ZXJncm93biB3aXRoIGZsb3dlcnMKZmFjZSBjb3ZlcmVkIGluIG1vdGhzCnZyYXkgOGsKaG90IGFpciByZWZyYWN0aW9uCndpdGggYSBsYWIgY29hdAp3aXRoIGEgc3RldGhvc2NvcGUKaW4gY29zdHVtZQpjbG9zZSAtIHNob3QKY3ViYW4gc2V0dGluZwpzZXJlbmUgZW52aXJvbm1lbnQKYXRlbGllciBvbHNjaGluc2t5CmZhZGVkIGFuZCBkdXN0eQpzdHVkaW8gZ2hpYmxpIHNtb290aCBjb25jZXB0IGFydAp3ZWFyaW5nIGEgaG9vZGllIGFuZCBzd2VhdHBhbnRzCmNpbmVtYXRpYyBzb2Z0IGxpZ2h0aW5nCmhlcm1pdCBjcmFiIHRpdGFuCmFyaWQgZWNvc3lzdGVtCmNvdHRvbiBmYWJyaWMKYmVsemluc2tpCmRlc2F0dXJhdGVkIGNvbG9yCnJ1dGtvd3NreQpqZW4gYXRraW4KdG9tIGVlcmVib3V0CmVsaXphYmV0aCBzYWx0em1hbgpkcmVhbXkgcHVmZnkgY2xvdWRzCmNoYXJhY3RlciBjb25jZXB0IGV4cGxvcmF0aW9ucwpjbGVhcmluZy4gZnVsbCBzaG90CmJsdWUgZHJpcHMKYnV0cmVzcyB0cmVlIHJvb3RzCmF0dHJhY3RpdmUgZmVtYWxlIGZhY2UhISEKb3V0Zml0IGRlc2lnbgpoYWxmIC0gYm9keSBzaG90CmhpZ2ggcmVzb2x1dGlvbiBhbmQgZGV0YWlsCmNydW1wbGVkIG5ld3NwYXBlciBhcyBhIHRleHR1cmUKd2lyZXMgaGFuZ2luZyBhY3Jvc3Mgd2luZG93cwpmcmFjdGFsIGZpYmVyZ2xhc3MgdGVuZHJpbHMKaG9sZGluZyB0cmlkZW50CmZhY2Ugc2tldGNoCmJsdWUgaW5rCndoaXRlIGdsb3dpbmcgYXVyYQptb3NzIGdyb3dpbmcgb24gdGhlaXIgY2xvdGhlcwpnb29nbGVzCmNvbmNlcHQgZHJhd2luZwpkZXRhaWxlZCBwZW5jaWxpbmcKZHJlYW15IGV5ZXMKZGlzY28gY2x1YiBvZiB0aGUgb2NjdWx0CndpdGggdHdvIHN1bnMgaW4gdGhlIHNreQppbiBhIHN1bnNldCBoYXplCmRldGFpbGVkIGdvdGhpYyBjbG9hawp3aWRlIHNob3Qgb2YgYSBjYWJpbiBpbnRlcmlvcgoyIGQgZ2FtZSBsaW5lYXJ0IGJlaGFuY2UgaGQKc3Vuc2V0IHJlZCBhbmQgb3JhbmdlCjEgMCAwIDAKYmxvb2Qgc3ByYXkKb3ZlciBsb29raW5nIHNhdHVybgpodW50ZWQKeCAtIGJveApjb21tdW5pc3Qgc3RhcmZpc2gKZ2lhbnQga2FpanUgc3RhcmZpc2ggbW9uc3RlcgprYWlqdSBzdGFyZmlzaApvbmUgaXMgYSByZWRoZWFkCm9uZSBpcyBhIGJydW5ldHRlCmNvdHRvbiBjbG91ZHMKc3RhbmRpbmcgb24gdG9wIG9mIGEgbW91bnRhaW4KcmVkIHN1bmdsYXNzZXMgYW5kIGEgZ3VpdGFyCnNlYSBjcmVhdHVyZXMKc2tpZmYKd29vZGVuIHNhaWxib2F0cwp0aGljayBnbG93aW5nIGNoYWlucwpoLiByIGdlaWdlcgphbGVqYW5kcm8KZnVsbCBmcm9udCB2aWV3CmluIHRoZSBib3R0b20gdGhlcmUgYSBsb3Qgb2YgZm9nCnNjYXR0ZXJlZCBjbG91ZHMKdHJhbmNlIGNoYW9zCnJvY2sgcG9vbHMKZW5oYW5jZWQgcGhvdG8KdmVyeSBlcGljIGF0bW9zcGhlcmUKZiAvIDEKc3Ryb25nIGV5ZXMKY2FuZHkgcGFzdGVsCmdyb3VuZCBjb3ZlcmVkIGluIG1hZ2dvdHMKZGF0dXJhCmFuZ2VsJ3MgdHJ1bXBldApwaG90b3JlYWxpc3RpYyBmYWNlcwpwYW5uaW5nIHNob3QKa29kYWsgZWt0YXIgMTAwIGZpbG0KaG9sZGluZyB1cCBhIGxhcmdlIHNoaWVsZApzbyBoYXBweSB0aGF0IGhlciBmYWNlIGh1cnRzCjMgNCA1IDMgMQo1IDcgOQpyZXViZW4gd3UKaCAxIDAgMiA0Cmhvbmcgc29vbnNhbmcKYnVybnQgYXJtb3IKcmVhbGlzdGljIHByb3BvcnRpb25zIHNmdwplbnRpcmUgcGVyc29uIQplbnRpcmUgcGVyc29uIHZpc2libGUKcmVkIHN3aXJscwpvZmYgLSB3aGl0ZSBjb2xsZWN0aW9uCm9ycGhpc20gc3R5bGUKY2FycnlpbmcgYSBsYXNlciBndW4KcHN5Y2hlZGVsaWMhISEhCnNob3Qgb24gbmlrb24gejkKdmVyeSBhZXN0aGV0aWMhISEhISEKZmFudGFzeSBmb3Jlc3QgbGFuZHNjYXBlIGF0IGRheQpjbGVuY2hlZCBmaXN0cwphdXJhcwpib2hvIGNoaWMhIQp3aXRoIGNsYXdzCmluc2lkZSBidWlsZGluZwp5b3VuZyBhbmQgc2xlbmRlcgpzeW1tZXRyaWNhbCBiYWNrZ3JvdW5kCmJlYXV0aWZ1bCB3ZWxsIHJvdW5kZWQgZmFjZQpzbGVuZCBib2R5CnN0eWxlIG9mIHNzc3MuZ3JpZG1hbiAoMjAxOCkKc3R5bGUgb2YgZ3VycmVuIGxhZ2FubiAoMjAwNykKbW9oYXdrIGhhaXJjdXQKdHdvIGFybXMgYW5kIHRvIGxlZ3MKd2VhcnMgYSBkZXN0cm95ZWQgaGF0CnNjYXIgaW4gb25lIGV5ZQpiaWcgc2NhcnMKZnV6enkgZ2hvc3QKaGVhZCBvZiBhIGxpb24Kc3RhbmRpbmcgYmVmb3JlIGFuY2llbnQgcnVpbnMKZGlmZmVyZW50IHNoYXBlcyBhbmQgc2l6ZXMKd2FsZG8gaW4gdGhlIHRvcCByaWdodCBvZiBmcmFtZQpjYXJuaXZvcm91cwpodW1hbmlzYXRpb24KZnVsbCBsZWdzCnN0YW5kIGFsb25lIGNvbXBsZXgKaGlnaGx5IGRldGFpbGVkIHBob3RvIDRrCnBhdGFnb25pYW4KYmFsYW5jaW5nIHRoZSBlcXVhdGlvbgo0ay4gZGV0YWlsZWQgZHJhd2luZwpoeXBlci1yZWFsaXN0aWMgY2cKc21vb3RoIHJvY2tzCmRhcmsgZmFudGFzeSBjb25jZXB0IGFydAp0aWdlciBza2luIGNhcnBldApwdWxzZSByaWZsZQplbmVyZ3kgcmlmbGUKcm9ib3QgbWFjaGluZXJ5CnBlcmZlY3Qgd2VhdGhlcgpqb2huIHBpY2FjaW8gYW5kIGJyb20KaGVhdnkgbWFjaGluZWd1biBvbiB0b3AKcmVkc2hpZnQgdmliZXMKdGlueSBnaXJsIGxvb2tpbmcgb24KZGlzdGFudCBob3Jpem9uCmxlbnMgb3JicwphcnQgbm91dmVhdSBhbGllbiBib3RhbmljYWxzCmJva2VoIGluIHRoZSBiYWNrZ3JvdW5kIG9ubHkKcmVhbGlzdGljIGFmdGVybm9vbiBsaWdodGluZwp3b3JuIHBhaW50CnJhaW55IGVudmlyb25tZW50Cm9uIGEgbGFuZGluZyBwYWQKZXh0cmVtZSBkZXRhaWwgOCBrIHBob3RvIHF1YWxpdHkKc3Rvcm15IHdlYXRoZXIgd2l0aCBsaWdodG5pbmcKb3JuYXRlIHdpdGggZ29sZCB0cmltbWluZ3MKY2FiaW4gbGlnaHRzCmhleGFkb21lCnRoZSBzdGFkaXVtIGhhcyBhIGZ1bGwgY3Jvd2QKY2Fub24gMjBtbQptb29uIGJlaGluZCBoaW0KamFwYW5lc2UgZG9nCm1lZGl1bSBicmVlZApoYXVudGluZ2x5IGJlYXV0aWZ1bCBhcnQKaHVnZSBzdG9ybQpvcGVuIHdvcmxkCnVyYmFuIHN0eWxlCmFyY3Mgb2YgZmllcnkgbmVvbiBsaWdodApwZWFjZWZ1bGx5IGRyaW5raW5nIHJpdmVyIHdhdGVyCnNtYWxsIHNwYWNlc2hpcHMKc29mdCBwb3J0cmFpdAooIHJlbWJyYW5kdCApCndpdGggYSBmaXNocG9uZCBhbmQgY291cnR5YXJkCmRhcmsgdG93ZXJpbmcgY2xvdWRzCnN1cmVhbGlzdGljCnN1bmtlbiByZWNlc3NlZCBpbmRlbnRlZCBzcG90cwpsYXRlIGF1dHVtbgpsb25kb24gc3RyZWV0cyBpbiBiYWNrZ3JvdW5kCmZhbnRhc3kgc2NpZmkKd29ybSBtb3V0aApyb2NrIGFuZCBkdXN0CnRyb3BpY2FsIGJlYWNoCmhvdXNlcyBvbiBmaXJlCnZsYWRpbWlyIG1vdHNhcgp0aGUgc2NhcmVjcm93CnNjcmFwCmFya2FuZSBseW9uCmhvdmVyaW5nIGFib3ZlIGEgbGFrZSBpbiB5dWtvbgpnZW8K44GC44GL44GV44Gf44Gq44GvIG9uIHR3aXR0ZXIKaiBjIGxleWVuZGVja2VyIDggawpkZWdyYWRhdGlvbgptb29uIGxpZ2h0IGluIHRoZSB0b3AgYmFja2dyb3VuZAp0aGUgcm9jayBpcyBpbiB0aGUgc2VhCmFuZHJlYXMgYWNoZW5iYWMKaGlnaGx5IGRldGFpbGVkIGdyZWVuIGxlYXZlcwpmdWxsIHZpZXcgb2Ygc2VhaG9yc2UKai4gaC4gd2lsbGlhbXMgaWlpCmluc2lkZSBtYyBlc2NoZXIgYXJjaGl0ZWN0dXJlCnJhaW4gYW5kIGxpZ2h0bmluZwpoeXBlciByZWFsIHJlbmRlcgpzaXR0aW5nIG9uIGEgbWluaWF0dXJlIGNpdHkKZ2xvd2luZyBjaGVzcyBrbmlnaHQKc2hvdyBsaWdodAp0aG91c2FuZHMgb2YgdGlueSBvbmxvb2tlcnMKb2N0YW5lIHJlbmRlcmVyLiBjZ3NvY2lldHkKd2V0IGFuZCBzbGlteQp3aXRoIGEgdmVyeSBsYXJnZSBtb3V0aApoZWF2ZW5seSBjb2xvciBzY2hlbWUKbWVkaXRlcnJhbmVhbiBpc2xhbmQgc2NlbmVyeQptZWRpdGVycmFuZWFuIHZpc3RhCmV4Y2l0ZWQgcnVzc2lhbnMKcmVjZXNzZWQKYWRvcmFibGUgb3V0Zml0CmRvcmEgdGhlIGV4cGxvcmVyCnBva2Vtb24gdHJhaW5lcgptYXl1cmkgc2hpaW5hCmZsb3dlcnkgd2FsbHBhcGVyCnNob3QgZnJvbSB0aGUgc2lkZQpkZXRhaWxlZCB0b3JzbwpkaXNuZXlsYW5kIGNhc3RsZQpwcmluY2VzcyBwZWFjaCkKcmVmbGVjdGlvbnMuIGJ5IG1ha290byBzaGlua2FpCmRlc2phcmxhaXMKd2VhcmluZyBibGFjayBkcmVzcyBhbmQgaGF0CndlYXJpbmcgYmxhY2sgb2xkIGRyZXNzIGFuZCBoYXQKcmFuZ2UgbXVyYXRhIHlvc2hpdGFrYSBhbWFubwp0cmVlcyBiZW50IG92ZXIgdGhlIHJpdmVyCmFpcnNvZnQgY2xvc2UgcXVhcnRlciBjb21iYXQKcGVyZmVjdCBjb21wb3NpdGlvbiBhcnRlbSBkZW11cmEKYWlyc29mdCBlbGVjdHJpYyBwaXN0b2wKZmFpcnkgdGFsZSBzdHlsZSBiYWNrZ3JvdW5kCmFsZXhhbmRlciB3ZWxscwp0ZWFsIG5lb24gbGlnaHRzCmJsYWNrIHBlYXJscyBhbmQgZ29sZGVuIGdlbXMKY29vbCByZWQgamFja2V0CmFydCBzdGFpb24KcmVkIGFpcnNvZnQgZWxlY3RyaWMgcGlzdG9sCmZ1c2VkIG1lY2hhIHBhcnRzCndoaXRlIHN1bmRyZXNzCm1hZCBtYWdhemluZSBpbGx1c3RyYXRpb24KbXVsdGkgY29sb3JlZApjYXVzdGljcyBlZmZlY3RzCmxpZ2h0IGFuZCBkYXJrCnByb2Zlc3Npb25hbCBwaG90by1uIDMKcG9ydGFsIG9wZW5pbmcKcmFzaW5nIG9mIGNvbnNjaW91c25lc3MKZm9jdXMgZ2F0ZQpyYWRpb2FjdGl2ZSBob3Jyb3IgcGFpbnRpbmcKbWFuZHkganVyZ2VucyA4IGsgMSA1IDAgbXB4CjQgayBjaW5lbWF0aWMgc3RpbGwKdGhlIHRyZWUgaXMgb24gdG9wIG9mIGEgY2FsbSBzZWEKaW50cmljYXRlIGFuZCBkZXRhaWxlZCBsYWNlIHNldAptZXNzeSBlYXRlcgppbiBob25vciBvZiBqdXBpdGVyJ3MgZGF5CnN0aWxsIGZyb20gYWxpZW4gKDE5NzkpCm94CjEgNiB4IDEgNgpvY3RhbmUgcmVuZGVyLiBmb2cKamVsbHkgLSBsaWtlIHRleHR1cmUKc2hhcnAgZm9jdXMgb24gZmFjZQpzaG9ja2VkIGV4cHJlc3Npb24gb24gaGVyIGZhY2UK8J+MuiBjZ3NvY2lldHkKd2VhcmluZyBhcG9jYWx5cHRpYyBjbG90aGVzCmNvbG9yZnVsIHBsYXNtYSBoYWlycwpzdHJpa2luZyB2aXN1YWxzCmluIGhlciBhcnQgcm9vbQpvY3RhbmUgcmVuZGVyIGEgbG9uZWx5IHJhaW5ib3cKISEgbXV0ZWQgY29sb3JzISEKcGVyZmVjdCBoaWdoIHJlc29sdXRpb24KaGVhZCBsb29raW5nIHVwCnZpZXcgZnJvbSBpbnNpZGUKYWN0aW9uIGFkdmVudHVyZQppbiB0aGUgc3R1ZGlvIGdoaWJsaSBhbmltZSBmaWxtCnBlcmZlY3Qgc2tpbiB0b25lcwpmZXN0aXZhbCB2aWJlcwpmbG93aW5nIGhhaXIgYW5kIGxvbmcgcm9iZXMKcmVnYWwgYW5kIG1lbmFjaW5nIHZpc2FnZQp0d2lsaWdodCBza3kKbGlub2N1dCBhcnQKdGhlIGhvcnNlIGlzIG5vdCBtaW5lCnBhdGVudCBpbGx1c3RyYXRpb24Kcm9hZCBzdHJlZXQgc2lnbnMKd2FybSB3ZWF0aGVyCndpdGggYSB3aGl0ZSBub3NlCmNvbG9yZnVsIGNvcmFsIHJlZWYKb2FrIGxlYWYgYmVhcmQKbWl4IG9mIGV0aG5pY2l0aWVzIGFuZCBnZW5kZXJzCmZpcmVsaXQKc2lkCnBlcmZlY3QgZmFjZSBhbmF0b215CnN1cGVyIHNoYXJwIGltYWdlcwp1bHRyYSBjb2hlcmVudApzdHJ1Z2dsZQpncm91cApmYWlyaWVzIGhhdmUgd2luZ3MKcmVhbGlzdGljIGZlbWFsZSBmYWNlcwppbmRpZSBnYW1lIGNvbmNlcHQgYXJ0CmNoYW90aWMgYW5kIGJydXRhbApuZXN0bGVkIGluIGEgZm9yZXN0CnRlbGVwaG90byBzaG90CmRvZiAxLiAzCmxvY2FsIGlsbHVtaW5hdGlvbgpoYXJkIHNjaSBmaQpnbG93aW5nIHN3b3JkCmQmZCBkaWNlIG9uIHRhYmxlCnBhcGVycyBvbiB0YWJsZQpjaGFyYWN0ZXIgc2hlZXRzIG9uIHRhYmxlCnNwYWNlIHRvdXJpc20KcGxhbm5pbmcKcHJvZmVzc2lvbmFsbHkgYXNzZW1ibGVkCmxlZCBsaWdodGluZyBlZmZlY3RzCnJvYm90IHNoYXBlZCBsaWtlIGEgcnViYmVyIGR1Y2sKb2lsIG9uIGNhbnZhCmNpbmVtYXRpYyBtb3ZpZSBzaG90CjggayApCnJlbmFpc3NhbmNlIGNvbXBvc2l0aW9uCnBob3RvIC0gcmVhbGlzdGljICkKd2l0aCBibGFjay4gbWFnaWMgcG93ZXJzCmNvbWljIGFydHN0eWxlCmVsc3BldGgga25pZ2h0IGVycmFudApsb25nIGZsb3dpbmcgY2FwZSBhbmQgY293bApzd2VldCBsb29rcwp3aGl0ZSBza2luIGFuZCByZWZsZWN0aXZlIGV5ZXMKd2VhcmluZyByZWQgc2hvcnRzCnNjaG9sYXJseQp3aW5raW5nIGF0IHRoZSBjYW1lcmEKZGlydHkgbmFpbHMKbWFueSBmaW5nZXJzCnBlbiBhbmQgaW5rIHN0eWxlCmNsb3NlZCBoYW5kcwpoYW5kcyBoaWRkZW4KdmVyeSB2ZXJ5IHBhbGUgYmxvbmQgaGFpcgpoZSBpcyBjYXN0aW5nIGEgbGlnaHRpbmcgc3BlbGwKd2VhcmluZyBwdW5rIGNsb3RoaW5nCndvcmtpbmcgb3V0CnNoaW55IGdsb3NzeSBza2luCjE5MDAncyBwaG90b2dyYXBoeQp3aXRoIGEgeGVyb3ggbWFjaGluZQpraXRjaGVuZXR0ZSBhbmQgY29uZmVyZW5jZXJvb20Kc2l0dGluZyBiZWhpbmQgZGVzawpzZWxsaW5nIGluc3VyYW5jZQozIDIgayByZXNvbHV0aW9uCmNoYW1wYWduZSBvbiB0aGUgdGFibGUKdHJpY2t5CnJ1YmJpbmcgaGFuZHMhISEKd2hpdGUgYXNjb3QKZXllIGZpcmUKOGsgc3R1ZGlvIHBob3RvZ3JhcGh5CmZsb3dpbmcgYmFja2xpdCBoYWlyCm1hbmEgc2hvb3RpbmcgZnJvbSBoaXMgaGFuZHMKd2lkZSBzZXQgZXllcwpnb2F0cwpoZXhhZ29uYWwgc3RvbmVzCmF0bW9zcGhlcmljIGNvbXBvc2l0aW9uCmJyaWRnZXMgY3Jvc3NpbmcgdGhlIGdhcAp3aGl0ZSBza3kKaGFyZCBibGFjayBzaGFkb3dzCmhpZ2ggY29udHJhc3Qgc2hhZG93cwpjZ2Nvc2lldHkKc3BsYXNoZXMgb2YgbGlxdWlkCnN1YmplY3QgYWN0aW9uOiBzbW9raW5nIGEgY2lnYXIKb24gcm9jayBjb25jZXJ0IHN0YWdlCndpdGggYSB0ZW50YWNsZSB0YXR0b28KdGVudGFjbGUgbW90aWZzCnJwZyBwb3J0cmFpdCBjb25jZXB0IGFydApob2xkaW5nIGEgZ2xhc3Mgb2YgcmVkIHdpbmUKOCBrIHNjcmVlbnNob3QKZGlvciBjYW1wYWlnbgpicmFpbndhc2hlZAphZXJpYWwgdmlldy4gaGFuZCBzdGl0Y2hpbmcKYmx1ZSBiYWNrZHJvcC4gaGQKc29hcmluZyBvdmVyIGEgbGFrZSBpbiBmb3Jlc3QKdHVyYWNvIG1vcnBoaW5nIGNoaWNrZW4KZ3JhZmZpdGkgaW4gYmFja2dyb3VuZApzaGFycCBmb3JlZ3JvdW5kCmdvbGQgYW5kIGNvYmFsdCB0aWxlcwpuZW9uIGNvbG9yZWQgc3VpdApjaGFvdGljIGF0bW9wc2hlcmUKZ2xvd2luZyBtYWdpYyBzaWdpbHMKbmVvbiBnZW5lc2lzIGV2YW5nZWxpb24gc3R5bGUKc2V4eSBibGFjayB3b21hbiB3YWxrcyBwYXN0IHRoZW0KZnJhbmsgZnJhemV0dGEgYW5kIGplZmYgZWFzbGV5CmRlYWQgdHJlZSBmb3Jlc3QKb3JuYXRlIGN5YmVycHVuayByb2JlcwpncmVhdCB2b2x1bWV0cmljIGxpZ2h0aW5nCmh5cGVycmVhbGlzbS4gZmFudGFzeSA0awprX2V1bGVyX2FuY2VzdHJhbApsaW0gY2h1YW4gc2hpbgppbiBhbiBvbGQgMTk1MHMgbGVhdGhlciBqYWNrZXQKd2l0aCBhIHZvbGNhbm8gaW4gdGhlIGJhY2tncm91bmQKZmlyZSB0aHJvdWdoIGV5ZXMKYnJpY2sgd2FsbCBiYWNrZ3JvdW5kCm51Y2xlYXIgYmFja2dyb3VuZApkcmFtYXRpYyBzZWR1Y3RpdmUgcG9zZQpzbGVlcHkgZXhwcmVzc2lvbgpkcmFtYXRpYyB3aWVsZGluZyBndW4gcG9zZQpnZW50bGUgY2FsbSBkb3RpbmcgcG9zZQpoZXJvaWMgc2hvb3RpbmcgYm93IHBvc2UKZHJhbWF0aWMgd2llbGRpbmcga2F0YW5hIHBvc2UKZHJhbWF0aWMgcmVhZGluZyBib29rIHBvc2UKZHJhbWF0aWMgZWxlZ2FudCBwb3NlCmhlcm9pYyBtdWF5IHRoYWkgc3RhbmNlIHBvc2UKZHJhbWF0aWMgYm9yZWQgZXhwcmVzc2lvbgphcG90aGVvc2lzCmRldGFpbGVkIGZ1dHVyaXN0aWMgamV3ZWxyeQpib2NoCm1hdGlzc2UgY2FyYXZhZ2dpbwp3aXRoIGEgdHJlZSBpbiB0aGUgYmFja2dyb3VuZApjYW5pbmUKemVlbiBjaGluIGFuZCBmYXJlbCBkYWxyeW1wbGUKY29sb3JmdWwgZ3JhZmZpdGkKbGVjdHVyZSBoYWxscyBhbmQgZ2FtYmxpbmcgZGVucwoyIGQgZHJhd2luZwpxdWVlbiBtYXJnaGVyaXRhIG9mIHNhdm95CmhvcnJvciBzY2llbmNlIGZpY3Rpb24KdHJhbnNsdWNlbnQgZHJlc3MKaW50cmljYXRlIGxhdGV4IHNldApydWFuIGppCmFtaWQgbmF0dXJlCm1hc3F1YQpwaXp6YSBpbiBmb3JlZ3JvdW5kCnBpenphIQpmcm9tIHRoZSA3IDAgcwpib2R5IG1hZGUgb3V0IG9mIG1hY2Fyb25pCmF6dGVjIGljb25vZ3JhcGh5CmZyYW5rIGZyYXpldHRhIGFuZCBnbGVubiBmYWJyeQphdCBjaXJjdWl0IGRlIHNwYSBmcmFuY29yY2hhbXBzCnp1Y2tlcmJlcmcgYW5kIGJlem9zCm9oaW8KaW5zaWRlIGEgZ2xhc3MgamFyCnJlYWR5IHRvIHN0cmlrZQpyZWFkeSAtIG1hZGUKcGFydGx5IHVuZGVyd2F0ZXIKbGVucyBlZmZlY3QKdGFibGUgc2V0IGZvciBzZWNvbmQgYnJlYWtmYXN0Cmh5cGVyc2hhcnAKdGFsbCBicm9hZCBvYWtzCmNseWRlIGFzcGV2aWcKYmFsbGV0IHBlcmZvcm1hbmNlIHBob3RvZ3JhcGh5CmZhaWxlZCBjb3NtZXRpYyBzdXJnZXJ5CmhlbHBsZXNzCnJpZGVzCnRoZSBiYWNrZ3JvdW5kIGlzIG1pc3R5CnN0eWxlIG9mIHN1cnJlYWxpc20KcGhvdG9yZWFsaXN0aWMgM2QgYXJ0CmV4YXNwZXJhdGVkCnBlYWNlZnVsIHN1YnVyYmFuIHNjZW5lCndpdGggcGlsZXMgb2YgY29pbnMgYXJvdW5kIGl0CnNtYWxsIHJldHJvIHN0YXJzaGlwIGlzIG5lYXIKdGVocmFuCmltcGVyaWFsIG1hcmNoCmhkIHZmeCAtIDkKd2F0ZXIgc3BsYXNoZXMgY2FzY2FkZXMKaC4gdS4gZApjb3ZlcmVkIGluIGh1bWFuIGV5ZXMKYmFyZWx5IHZpc2libGUgZnJvbSB0aGUgc2hhZG93cwplbnRhbmdsZWQgZm9saWFnZQpzY2F0dGVyZWQgZ2xvd2luZyBwaW5rIGZpcmVmbGllcwpzdXJyZWFsZQp5b3NoaWFraSBrYXdhamlyaQpyaXZlciBvZiBibG9vZApudHJpY2F0ZSBvaWwgcGFpbnRpbmcKcm9jayBiYW5kCiggKCBpbGx1c3RyYXRpb24KaGFuZGhlbGQKYW5hdG9taWNhbCBkZXRhaWxzCmdyZWF0IGRldGFpbHMKc29sYXIgbXl0aG9zCmFiYm9uZGlvIHN0YXppbwptYWdpYyBlZmZlY3RzCm5vcm1hbCBkaXN0cmlidXRpb25zCmV4cG9uZW50aWFsIGRpc3RyaWJ1dGlvbnMKZ3JhcGggc2lnbmFscwpjb21wbGV0ZSBmaWd1cmUKd2F0ZXIgYXJ0IG1hbmlwdWxhdGlvbgpnaWFudCBzY3VscHR1cmUKY2VsbCBjb3ZlciBzdHlsZQphcnQgZGVwaWN0aW5nIGNvbnRyb2wgZnJlYWsKaHlkcm9wb25pYyBmYXJtcwp0YWxsIHNreXNjcmFwZXJzCmF1dHVtbiBjb2xvdXJzCmhlIGhhcyBhbiBlbG9uZ2F0ZWQgaGVhZCBzaGFwZQpjZWxlc3RpYWwgY29sb3Igc2NoZW1lCmthdGlua2EgcmVpbmtlCmVsZWN0cmljIHN3aXJscwpzaW5nZXIgaW4gdGhlIHZvaWNlIHNob3cKY29uY2VwdCBhcnQgbWFnaWNhbCBoaWdobGlnaHQKY2F0YWxvZwphbGwgZmFjZSBjb3ZlcmVkIHdpdGggYSBmaXJlCmN1bm5pbmcgc21pbGUKaW50ZXIgZGltZW5zaW9uYWwKcmVhbCBoYW5kcwpoeXBlcnNwaGVyZQpmaXJzdCBjb250YWN0CmZpZ2h0IHdpdGggc3RyYXdiZXJyaWVzCnNsZWVwaW5nIHByaW5jZXNzISEhIQpuaXRyb2dlbi1yaWNoIHNvaWwKaW5kb29yIHNob3QKdHVvbWFzIGtvcnBpIGFuZCB3bG9wCnVzc3IgZmxhZwptYWFydGVuIHNjaHLDtmRlciBhbmQgdG9tIGJhZ3NoYXcKZmxhbWUgaW4gdGhlIGZ1cgpzdXBlciBmaW5lIGRldGFpbApjYWdlcwpjcnllbmdpbmUgcmVuZGVyIDggawpjb2xvcmZ1bCBsaWdodG5pbmcgY2luZW1hdGljCnNpZ21hIDUgMApoYXBweSBjb2xvdXJzCmxhcmdlIGdlb21ldHJpYyBzaGFwZXMKc3ltbWV0cmllCjIgMCA1IDAgcwpnb2Qgb2YgdGhlIHN1bgp3aXR0eQpzaXR0aW5nIGF0IGEgY29tcHV0ZXIgZGVzawpnZW9tZXRyaWNhbGx5IGNvcnJlY3QKc3R5bGUgb2YgbWFyeSBqYWNrc29uCmZ1bGwgYnVpbGRpbmcKaGVhdnkgbWV0YWwhCmFuaW1lIGFjdGlvbiBmaWd1cmUKaGlnaCByZXNvbHV0aW9uIHByb2R1Y3QgcGhvdG8KZGVlcCBsaWdodGluZwpmZWF0dXJlZCBvbiBhcnRzY2FwZQpwZW4gYW5kIHdhdGVyY29sb3IKZGFyayBzZXR1cAptdXNpYyBzaG93CmRyaXBwaW5nIHdpdGggd2F0ZXIKaGlzIGhhbmRzIGJ1cmllZCBpbiBoaXMgZmFjZQoxIDkgMiA4CjEgOSA1IDQKY2lyY2EgMSA5IDkgOQpjYXZlIGFydCBzdHlsZQpoaWdobHkgZGV0YWlsZWQgYnVpbGRpbmdzCnByb21vdGlvbmFsIHBob3Rvc2hvb3QKYmVpbmcgbWl4ZWQKYXJ0b3JpYXMKMSA2IDAgMCBzCmhvcnNlIHJpZGVyCndpZWxkaW5nIGEgd2hpcApjcmVlcHkgYWVzdGhldGljCmhlciBoYW5kcyBhcmUgcmVkIHJvb3RzCm1lZGljYWwgbGFiCm1pY2hhZWwgd2Vpc2hlaW0gYmVyZXNpbgpkYXJrIG5lb24gbGlnaHRpbmcKZ2VybWFuIGV4cHJlc2lvbmlzbQpmYWNlIGFjY3VyYWN5CnNpbXBsaXN0aWMgc3R5bGUKbWFyc3RlcnBpZWNlCuKAlGFyIDE2OjkKcGFydGlhbGx5IG9wZXJhdGlvbmFsCnBlZGVyIHNldmVyaW4ga3JveWVyCmJpbGxvd2luZyBjbG91ZHMKaW50aW1pZGF0aW5nIGNsb3VkcwpzdG9ybSBjbG91ZHMgaW4gdGhlIGRpc3RhbmNlCm5hdGlvbmFsIGdlb2dyYXBoaWMgcGhvdG9zCnBhbGV0dGUgaXMgYmxhY2sgdmlvbGV0IGdyYXkgcmVkCmplYWxvdXN5CnN0YXJ0cmVrIHN0eWxlCmVsZWN0cm9uaWMgY2lyY3VpdHJ5CmRvb20gbW9uc3RlcgpiaWcgYXF1YXJpdW0KZG5kIG1hZ2F6aW5lIGNvdmVyCnNjYXJ5IGFuZCBicm9vZGluZwpkZXNpZ25lciBwZW5jaWwgM2Qgc2tldGNoCnNtb290aCB0cmFuc2x1Y2VudCB3aGl0ZSBza2luCndhbGtpbmcgYWJvdmUgdGhlIGNsb3VkcyBhbmQgZm9nCm1vdW50YWlucyBvZiBpY2UgY3JlYW0KYXN0aGV0aWMKbWFkIGRvZyBqb25lcwp0YWtlbiBmcm9tIGEgcGxhbmUKbWFkZSBvZiBhbGwgd2hpdGUgY2VyYW1pYyB0aWxlcwpoYXplciBhbmQgbGlnaHQgaW4gZGFyawpyZWQgZ2xvd2luZyBza2luCnRpbnkgZ2xvd2J1Z3MgZXZlcnl3aGVyZQpzdGFyIHdhcnMgZGlnaXRhbCBhcnQKYnVpbGRpbmdzIGluIHRoZSBkaXN0YW5jZQpkaXN0b3J0ZWQgcGhvdG8KZmlyZSBnb2xlbSBjcmVhdHVyZQooICggbGFyZ2UgYmxhY2sgaGF0ICkgKQp2ZXJ5IGRldGFpbGVkISEKYmVhdXRpZnVsIGNvbG9yIGFydCEKZXZlcnl0aGluZyBpcyBidXJuaW5nCmFybXMgb2YgbGVtb25zCmluIGEgbWVkaWV2YWwgY3J5cHQKbWVnYSByZWFsaXN0aWMKZHJpZWQgcGV0YWxzCmRlY29yYXRpdmUgbGluZXMKaW5maW5pdGUgcmVncmVzc2lvbgpsaWdodHMgb24gY2VpbGluZwphcmNhaW4gc3R5bGUKY292ZXJlZCB3aXRoIGxpcXVpZCB0YXIuIGRzbHIKaW4gYSBzdWJ1cmJhbiBiYWNreWFyZApsb25nIGhhaXIgYmxvd2luZyBpbiB0aGUgd2luZApyZ2IgbGlnaHRpbmcKd29vZCBwaWVyIGFuZCBob3VzZXMKbWluaW1hbCBvdXRsaW5lcwphbWF6aW5nIGNnaQppbiB0aGUgc2hhcGUgb2YgYSByYXQKbmljZSBmYWNlCmN5bnRod2F2ZQpmbGF0IGljb24KaW9zIGljb24KbXVzaWNhbCBpbnN0cnVtZW50CndpdGggZGlmZmVyaW5nIGVtb3Rpb25zCmNvb2wgYmFja2dyb3VuZApnb2QgcmF5IHRocm91Z2ggY2xvdWRzCmJ1dCBhcyBoaWdoIGNvbnRyYXN0IHBob3RvZ3JhcGh5CndhcmhhbW1lciA0MGsgc3R5bGUKYmF0dGxlbWVudHMKcG9ydGN1bGxpcwpzY2FyeSBnb3RoaWMgYXJjaGl0ZWN0dXJlCndyb25nIHBlcnNwZWN0aXZlIHBvaW50cwpjb2xvcmZ1bCB2ZWN0b3IgaWxsdXN0cmF0aW9uCm9tbmlvdXMgYXRtb3NwaGVyZQpkYXJrIG92ZXJjYXN0IHdlYXRoZXIKbWFnaWMgcmVhbGlzbSBtYXR0ZSBwYWludGluZwp1bmRlcmxpZ2h0CnN0YW5kaW5nIGluIG1vb25saWdodAptaXN0eSBhbmQgZWVyaWUKdGhlIGNpdHkgaXMgZnVsbCBvZiBncmVlbiBwbGFudHMKYW1lcmljYW4gY2FudGVlbgppbnNhbml0eSBnaXJsIHN1bW1vbiBoZXIgZGVhdGgKaG9ycm9yIGRldGFpbHMKc2lsZW50IGRlY2F5IGNvbG9yaW5nCnZvcnRleCBwb3J0YWwgYmFuaXNoIHRoZSBlbGRlcnMKZGllIGFuZCBzdWZmZXIKcHN5Y2hvbmF1dCB1bml2ZXJzZQpzbW9rZSBwaXQgbmVidWxhcwp0aGUgc2NhcnkgZW1wdHkgbGltaW5hbCBzcGFjZXMKY29uanVyZSBkZXZpbHMKbWFob2dhbnkgd29vZApyZWQgdmVsdmV0CnBhbmRvcmEgc3R5bGUKdGlmZmFueSBzdHlsZQp2YW4gY2xlZWYgJiBhcnBlbHMgc3R5bGUKY2FydGllciBzdHlsZQpib3VjaGVyb24gc3R5bGUKYnVsZ2FyaSBzdHlsZQpjaGF1bWV0IHN0eWxlCmxvdyBwb2x5IDMgZApkcmFtYXRpYyBkcmVhbWxpa2UgbGlnaHRpbmcKc2V0IGluIDE5OTkKcGxhdG9uCm1ldGFsIGFsYnVtIGNvdmVyIGFydAppbnRyaWNhdGVseSBkZXRhaWxlZCBzY2FsZXMKaW50cmljYXRlbHkgZGV0YWlsZWQgYnVpbGRpbmdzCmNhcnMgYW5kIHBlb3BsZQpwc3ljaGVkZWxpYyBjb3NtaWMgaG9ycm9yCnN1cGVyIHJpY2gKdGhyZWUgcXVhcnRlciBwb3J0cmFpdApkICYgZCBmYW50YXN5Cndpc3BzIG9mIGVuZXJneSBpbiB0aGUgYWlyCmJsdWUgYW5kIHB1cnBsZSBhbmQgZ3JlZW4KZ2xvd2luZyBpbiBwb3dlcgpncmFkaWVudCBibGFjayBncmVlbiBnb2xkCmZpcmVmbGllcyBmbHlpbmcKY29tcHV0ZSBzaGFkZXIKYmVhdXRpZnVsIHBsYWNlCmNhcm5pdmFsIG9uIHRoZSBiYWNrZ3JvdW5kCmh5cGUtcmVhbGlzdGljCmR1c3QgbGlnaHQKc3BpcmFsIHN0YWlycwotIDYKbW9vZHkgZW52aXJvbm1lbnQKd2F0ZXJmYWxscyBpbiBkaXN0YW5jZQpsdW1pbmVzY2VudCBtYXR0ZSBwYWludGluZwpkaXZpbmUgYmFja2dyb3VuZApoaWdoIHF1YWxpdHkgc2tldGNoCm9uIGEgdGhyb25lIG9mIGdlbXN0b25lcwppbiBmcm9udCBvZiBhIGZhbnRhc3kgY2l0eQp3aXRoIGJsYWNrIHN1bnMgaW4gdGhlIHNreQpzdHJvbmcgZGVzaWduCmNvbWluZyBvdXQgb2YgYSBibGFjayBob2xlCmZsaWNrZXJpbmcgZmx1b3Jlc2NlbnQgbGlnaHRzCmNhaW8gc2FudG9zCnZpY3RvciBtYXJpc3RhbmUKc21hbGwgYmVhcmQKY3liZXJwdW5rIGRhcmsgZmFudGFzeQpkYXJrIGZvcmVzdCBhdCBuaWdodApncmFkaWVudCBicm93biB0byByZWQKZ2xvd2luZyBkaWdpdGFsIHJ1bmVzCmxpbm4gb2xvZnNkb3R0ZXIKamlueW91bmcgc2hpbgptYXJrIHZlcmhhYWdlbgpwYXVsIGRhdmV5CnNoYW5lIHByaWdtb3JlCmZpbGUgcGhvdG8KZnJvbnQgcGFnZQowIDAgMCB5ZWFycyBhZ28KdWx0cmEgcmVhc2x0aWMKbGVpY2Egc2wgMiB0ZWNobmljb2xvcgpzY2FyeSBtb3ZpZQpiYXJzIG9uIHRoZSB3aW5kb3dzCmNvbmNlcHQgLSBhcnQKc3VpdCDvvIwgcGVyZmVjdCBmYWNlCmJhY2tsaXQgZ29sZGVuIGhvdXIKbGlnaHQgd29vZApzdHlsZSBvZiBqZWZmIHNvdG8Kcm9vbSBmdWxsIG9mIHBsYW50cwpjaGlhc2N1cm8KeWFrdXphIDQKY291cnQgc2tldGNoCnNjZW5lIGZyb20gdGhlIG1vdmllIHByb21ldGhldXMKbnVjbGVhciBhdHRhY2sKaGlnaGx5IGRldGFpbGVkIGZhbGxvdXQgMwphbGV4IGdyZXkgYW5kIGRhbiBoaWxsaWVyCm51Y2xlYXIgYWZ0ZXJtYXRoCmluIG1hZ2ljYWwgd29vZHMKbWF0dCBmaW5pc2gKeWVhciAyIDAgMiAyCmxvb2tpbmcgZGlyZWN0bHkgYXQgdGhlIHZpZXdlcgpkcmVzc2VkIGluIGEgcm9iZQppbiB0aGUgYmFja2dyb3VuZCBhIHRodW5kZXJzdG9ybQpoYXJkIGVkZ2VzIGNvbmNlcHQgYXJ0Cm11c2N1bGFyIGJvZHkgdHlwZQpwZXRlciBhbmRyZXcKc2hhcnAgZm9jdXMgLSBoIDggMCAwCmNsZWZ0IGNoaW4KZmxvYXRpbmcgaW4gc21va2UKaHlwZXJyZWFsaXN0b2MKaGlnaCBzcGVlZCBzaHV0dGVyCnNjdWxwdG9yCndpZGUgbmVjawp3aXRoIHZlZ2V0YSBoZWFkIGhhaXIKYW5ndWxhciBtaW5pbWFsaXNtCnZvZ3VlIGVkaXRvcmlhbCBwaG90bwpzaW1wbGlzdGljIGRlc2lnbgpzb2Z0IHN1bmxpZ2h0IGRhcHBsaW5nCmhkIGF3YXJkLXdpbm5pbmcgcGhvdG8KM2QgYXJjaGl0ZWN0dXJlCmhhbmRzIGhvbGRpbmcgYmlnIGdsb3dpbmcgb3JicwpvZiBhbiBiZWF1dGlmdWwgYW5nZWwgZ2lybApwaG90b3JlYWxpc3RpCnJlbmV3YWJsZSBlbmVyZ3kKaGlkZXRha2EgdGVuamluCjQgayBmb29kIHBob3RvZ3JhcGh5CmJ1cnN0aW5nIHdpdGggbXVzY2xlcwpncm91cCBtYXNzIGNvbXBvc2l0aW9uCnNlYXNvbnMhISA6IPCfjLgg4piAIPCfjYIg4p2ECnBob3RvZ3JhcGhlciBhcnQgd29sZmUKcG9pbnRlZCBob29kcwp3b29kIG1hdGVyaWFscwozIGQgcmltIGxpZ2h0CmNvdHRhZ2UgY2xvc2UgdXAKc3RhZyBiZWV0bGUKYmlyb3JlbWVkaWF0aW9uCnZhcG9yd2FyZSBhZXN0aGV0aWMKcmVzdGF1cmFudCEKcmVzdGF1cmFudCEhCnZpbnRhZ2Ugc2NpIC0gZmkgc29mdCBncmFpbnkKaW5zcGlyZWQgbW9lYml1cwppbiBmcm9udCBvZiBhIG51Y2xlYXIgZXhwbG9zaW9uCmJvZHkgY29tcGxldAppbiBzdHlsZSBvZiBiYXltYXgKZnJvbnQgZmFjaW5nISEhCmdyYWRpdXMKYmx1ZS13aGl0ZSBoYWlyCmJyYXdueQpyZXN0aW5nIG9uIGEgdG91Z2ggZGF5CnN0eWxlIGxlYWd1ZSBvZiBsZWdlbmRzCmRhcmsgdGhpY2sgc21va2V5IHJlZCBmaXJlCmNoYXJ0cmV1c2UgY29sb3Igc2NoZW1lCmNvc3R1bWUgd2l0aCBibHVlIGFjY2VudHMKaHlwZXIgZGV0YWlsZWQgNCBrCmJvZGhpc2F0dHZhCmFubm95ZWQgZmFjaWFsIGV4cHJlc3Npb24KdGhlIGJvb2sgaXMgY2xvc2VkCnRoZSAyMDAwcwpzeW1ldHJpY2FsIGV5ZXMKeW91bmcgd2l6YXJkCjMgNSB5ZWFycyBvbGQKMyA2IHllYXJzIG9sZAo1IDAgeWVhcnMgb2xkCm9uIHRoZSBub3N0cm9tbwp0aGUgY3JlYXRvciBvZiBlYXJ0aApwYXBlciB0ZXh0dXJlIDEgOSA1IDYKc2hvcnQgaGFpciB3aXRoIGdlbApiaWcgYW5kIHN0cnVjdHVyZWQgdmFsaGFsbGEgY2l0eQp2aWtpbmcgaGVhdmVuCmZha2UgY2F1c3RpY3MKbmlnaHRtYXJpc2ggaWxsdXN0cmF0aW9uCndlYXJpbmcgd2l6YXJkIGhhdHMKaW4gYSBkYXJrIHN0dWRpbyByb29tCnJlZCBiZXJ5bApiaXhiaXRlCnJlZCBlbWVyYWxkCnNjYXJsZXQgZW1lcmFsZApjYWxjaXRlCmN1YmljIGJsb2NrcyBzdHJpcGVzCnRoZSB0aWdlciBpcyBzbWlsaW5nCmluIGEgd2hpdGUgYm9obyBzdHlsZSBzdHVkaW8Kem9vbSBwaG90b2dyYXBoCmtpbGxlciB3aGFsZQpnb3RpYyBoYXJ0cwpmdWxsIGJvZHkgc2hvb3QKMSA5IDQgOCBwaG90bwpkZXRhaWwgYW5kIGNhcmUKb3JhbmdlIGxpdCBza3kKZnV6enkgZGV0YWlscwp2ZXJ5IG1pbmltYWwKaW50ZXJpb3IgZGVzaWduIHBob3RvZ3JhcGh5CmJhc2ViYWxsIHN0YWRpdW0KbWFuIHN0ZWFsIGNvbXB1dGVycwpjb2xvciBwYWludGVybHkKbHVjYXNmaWxtIC0gYyAxIDAKd2l0aCBmaXJlCm9wcHJlc3Npb24KdmVyeSB2ZXJ5IHZlcnkgdmVyeSBzY2FyeQpoeXBlcmRldGFpbGVkIGFuZCBpbnRyaWNhdGUKYWNyeWwgb24gY2FudmFzCnRlc3Qgc3ViamVjdApicmVha2luZyBhcGFydAp0b3AgLSBkb3duIHBlcnNwZWN0aXZlCmNvbG9yIGNoYXJ0Cmdlb21ldHJpYyBhYnN0cmFjdCBiZWF1dHkKb3Zlcmxvb2tpbmcgYSBkZXNvbGF0ZSB3YXN0ZWxhbmQKcHVycGxlIGFuZCBzY2FybGV0IGNvbG91cnMKbW90aCBpbnNwaXJlZCBkcmVzcwpkYXZpZCBseW5jaCBzdHlsZQpvbiBhIGJyYW5jaApmYW50YXN5IGNvbmNlcHQgYXJ0IHBvcnRyYWl0Cmdvb3NlISEhISEKMSA5IDcgMCdzIHNjaWVuY2UgZmljdGlvbgooKHBob3RvcmVhbGlzdGljKSkKcHJvbW90aW9uYWwgaW1hZ2VzCnBsYXliaWxsCmRtdCBpbWFnZXJ5LiBvY3RhbmUgcmVuZGVyCm1hbnRpY29yZQpsZXNzIGRldGFpbGluZwpmb3Jlc3Rob3VyCnN0b25lIGJyaWNrcwpkZXNlcnQgZ2FtZQpjaXJjYSAxIDggNiAxCmNpcmNhIDEgOCA2IDMKc3RvY2t5CnN2ZyB2ZWN0b3IgYXJ0CmhlYWRlIG1hcnRpbiBqb2huc29uCnNwYW5nbGUKdml2aWQgdmludGFnZSBjb2xvcmluZwphcyBzZWVuIGZyb20gdGhlIGNhbm9weQp3aXRoIG91dCBzaGFkaW5nCmJvbGQgc2ltcGxlIHNoYXBlcwpzaW5nbGUgZmxhdCBjb2xvdXIKcGFsZSB0b25lCmJydW5ldHRlcwpzeW1ldHJpY2FsIGRldGFpbGVkIGZhY2VzCndlYXJpbmcgaG9vZHMKbWVkaXZhbApvbGQgdGltZXkKcG9saXNoIGh5cGVyIC0gY2FzdWFsCnBpdGJ1bGwKbnVyZW1iZXJnIGNocm9uaWNsZQpjb2xvcmZ1bCBhaXJzb2Z0IGd1bgpnZWZvcmNlIHJ0eCAzMDkwIG9uIGZpcmUKYnVzdGxpbmcgY2l0eQp2YW1waXJlIGJhdHMKcGhvdG9yZWFsaXN0aWMgbWF0dGUgcGFpbnRpbmcKbGV2aXRhdGluZyBjaXRhZGVsCmx1c2ggY291bnRyeXNpZGUKaW4gc3R5bGUgb2YgaGllcm9ueW11cyBib3NjaApyZWxheGVkLiBibHVlIGJhY2tncm91bmQKbWFyaWFubmUgY29sbGlucwptYXR0ZSBkcmF3aW5nLiBtYXN0ZXJwaWVjZQpyZWQgbGVhdmVzIG9uIHRoZSBncm91bmQKZGlzbmV5IC0gc3R5bGUKaGUgaXMgd2VhcmluZyBhIHN1aXQKYWxpZW4gaHlicmlkcwpjb2xsZWdlIHBhcnR5CndoaXRlIHBhcGVyIGJhY2tncm91bmQKbGF0ZW50IHNwYWNlCmFwb2NhbHlwdGljIGxhbmRzY2FwZQpuZWFyIGEgc21hbGwgbGFrZQp0aGlua2VyCmplc3RlciBoYXQKZWR3YXJkIGhvcHBlciB2aWJlCmluIHN0eWxlIG9mIGZyYW5jaXMgYmFjb24KeWVsbG93IGFuZCBibGFjayBncmFwZXMKd2FsbnV0cwp1bHRyYSBkZXRhaWxlZCBjb250ZW50IDogZmFjZQptaW1pYy4gcmFuZG9tIHBvc2l0aW9uIGNvbnRlbnQKZnJvbnRhbCByZWFsaXN0aWMKeGVub3Bob2JpYQpyZWZsZWN0aXZlIG1ldGFsbGljCnJvYnVzdAphcG9jYWx5dGljCnJhbW1zdGVpbgpnb3JpbGxheiBhbmQgZGFmdCBwdW5rIHJlY29yZHMKZnJvbSB0aGVuIG9uIGEgYmFza2V0YmFsbAphbiB0aGUgZmlyc3QgeGJveApzdHlsZSBvZiBsdWlzIHJveW8KaW4gbG9uZyBwaW5rIG9yIHZpb2xldCBkcmVzc2VzCndpdGggZ29sZGVuIGV5ZXMKc2h1bmdhIHN0eWxlCmJhdGhpbmcgaW5zaWRlIHRoZSB0YXIgcGl0CmNvdmVyZWQgd2l0aCB0YXIKc3RpY2t5IHRhci4gY29uY2VwdCBhcnQKcmVhbGlzdGljIGNnaQp0ZW1wZXJhIHBhaW50CmFydCBpbiB0aGUgc3R5bGUgb2Ygam9zaHkgc2x5CmRhcmsgd2ludGVyCndhbGwgb2Ygd2F0ZXIgZWl0aGVyIHNpZGUKYmVybmUgaG9nYXJ0aAo5MCBkZWdyZWUgc3BvdGxpZ2h0aW5nCmludHJpY2F0ZSBjYXJ2ZWQgd29vZApwbGFuZXRhcnkgZ2VhcnMKemVuIGF0bW9zcGhlcmUKbWFueSBzY3JlZW5zCnZpc2hudQptYXJrIHBvd2VsbApvdmVyaGVhZCBjYW5vcHkKYmVhdXRpZnVsIC0gbiA5CnNob3Qgd2l0aCBoYXNzZWxibGFkZSBjYW1lcmEKYmx1ZSBuZW9uCmZpcmV3b3JrcyBpbiBiYWNrZ3JvdW5kCjE2bW0gZi8xLjQKOCAwIHMgc3ludGh3YXZlCmxvb2tpbmcgb3V0IGludG8gc3BhY2UKd2l0aCBhIGRyaW5rCm1ldGFsIHdvcmtzCmV2ZW4gc3VyZmFjZQozIGQgcmVuZGVyIDggayBzaG9vdApzeW1tZXRyaWNhbCBvcm5hbWVudApsZW9uIGZyYW5jb2lzIGNvbWVycmUKeWV0IHVucmVjb2duaXphYmxlCnNoYXZlZCBzaWRlcwpzaWRlbGl0CmZlbm5lYwptaWtlIHBlbmNlCmxhc2VyIGxpZ2h0aW5nCnJlYWxpc3RpYyBncmFzcwpsdW5jaG1lYXQKcG9rZW1vbiB0cmFkaW5nIGNhcmQgZ2FtZQpkZXRhaWxlZCBib2R5IHN0cnVjdHVyZQphbiBpbnRyaWNhdGUgZHJlc3MKc3R1ZGlvIGxpZ2h0aW5nIDQgawpsb29zZWx5IGNyb3BwZWQKbWFubHkgZGVzaWduCnRhaiBtYWhhbApzaGFycCBoaWdoIHF1YWxpdHkgcGhvdG8KaHlwZXIgZGVhdGlsZWQKc2hhcnAgbGVuZHMKbmF0dXJhbCBjb2xvciBwYWxldHRlCnNpdHRpbmcgaW4gYSBjb2xvcmZ1bCBmb3Jlc3QKcmljZSBwYWRkaWVzCmJhbGFuY2VzCmxhbmRpbmcgaW4gZXBpYyBzcGFjZSBiYXR0bGUKZ2xhc3Mgd2FsbApoYXNhbiBwaWtlcgphbmltYWwgd29ybGQKYXRtb3NwaGVyaWMgbGlnaHRpbnRnCnVwb24gdGhlIGNsb3VkcwpjZHMKb2YgdGhlIG11c2N1bGFyCmRpZ2l0YWwgcHJvdmlvCmNpbmVtYXRpYyEhCmFjY3VyYXRlIGNvdXJ0CnRodW5kZXJzdG9ybSBzdXBlcmNlbGwKY2hlZnMgdGFibGUKdGhyZWUgbWljaGVsaW4gc3RhcgpjYW5vbiA1IDAgbW0gbGVucwpoZSBpcyBhIHJvY2tzdGFyCmxpZ2h0aW5nIGJvbHRzCmVpa28gaXNoaW9rYQpyb29tIGlzIG9uIGZpcmUKZHNsciBoaWdoIHJlc29sdXRpb24KdG9ybiBtZXNoCm5hdHVyYWwgZWFydGggdG9uZSBjb2xvcnMKd2VhcmluZyBhIHZvbGxleWJhbGwgamVyc2V5CmZhY2Vib29rIHBvc3QKZ29sZGVuIGxpbmluZ3MKd2l0aCBraW5kIGZhY2UKZ3JleSBtb3VzZSBlYXJzCmluIC0gZ2FtZSBzY3JlZW4gc2hvdApkYXJrIGZhbnRhc3kgY2hhcmFjdGVyIGRlc2lnbgpkZXZhbmFnYXJpIHNjcmlwdApyb2NrIGVkZ2UKZXBpYyBsaWdodGluZyBlZmZlY3RzCnNvdWwgcGVyY3VsYXRlcwpjcmVzdGZhbGxlbgplbW90aW9uYWxseSBudW1iCmNhcGl0YWxpc3QKcmVtZW1iZXJpbmcgaGlzIGxpZmUKamV3ZWxlZApoZWF2eSByYWluIGFuZCBsaWdodG5pbmcKYmxhY2sgdHVydGxlIG5lY2sgc2hpcnQKYm93bGluZyBhbGxleSBjYXJwZXQKaGlnaCBxdWFsaXR5IDQgawp0YWtlbiBvbiBhIHd3MiBjYW1lcmEKaGlnaGx5IGludHJpY2F0ZSBhbmQgY29sb3JmdWwKc2xheQpiYWNrIGJyZWFrZXIKMiAwIDAgNQpiZXV0aWZ1bCEKY2lyY3VsYXIgcGxhbmV0CmFzdHJvbm9taWNhbCBpbWFnaW5nCmJhc3MgY2xlZgpkZXRhaWxlZCB0ZWNobmljYWwgZHJhd2luZwptYWdpYyBhdG1vc3BoZXJpYwpyZWFsbHkgZGV0YWlsZWQKYXQgYSBiZWFjaCBwYXJ0eSBpbiBpYml6YQpkcmF3Zm9saW8Ka2l0YmFzaCAzIGQKbmF0dXJhbCBsaWdodGluZy4gOCBrCm9uIGEgcmVmbGVjdGl2ZSBnb2xkIHBsYXRlCnBsYXlpbmcgc29jY2VyIGF0IHRoZSBiZWFjaAp2b2d1ZSBzdHlsZQppbnNlY3QgdHJhaW5lciBnaXJsCnBpeGVsIGFydCBzcHJpdGUKMyBkIHByb2R1Y3QgcmVuZGVyCnNjcmVlY2hpbmcKYmlvbHVtaW5lc2NlbnQgc3VyZmFjZXMKYXdhcmQgd2lubmluZyBob3Jyb3IgcGhvdG9ncmFwaHkKdnJpbApsb3N0IHNvdWxzCmxvdyBkZXRhaWxzIGFuZCBjbGVhbiBsaW5lcwpoYWlyIGR5ZWQgdG8gYSBoYXplbG51dCBicm93bgpib2tlaC4gaQpicm9rZW4gYm90dGxlcwpzbW9rZXkgYnVybnQgZW52ZWxvcGVzCnNjaXNzb3JzCnBsYW50cyBpbiBiZWFrZXJzCmxhcmdlbHkgYmlvbWVjaGFuaWNhbApnbGFtb3JvdXMgc2V0dGluZwpmYWlyeSB0YWxlIHNldHRpbmcKc2hvcCBmcm9udApsZWdlbmQgb2Yga29ycmEgc2V0dGluZwpmZXVkYWwgamFwYW5lc2Ugc2V0dGluZwpjZW50ZXIgcGFydGVkIGN1cnRhaW4gYmFuZ3MKbWFya2V0IHNldHRpbmcKbGlseSBmbG93ZXJzCmxvb2tpbmcgdXAgb250byB0aGUgc2t5CmFjYWRlbWljIGFydCBpbnNhbmVseSBxdWFsaXR5CmZhcnQKY29udHJhc3Qgc2lkZSBsaWdodApiaWcgY2F0IGV5ZXMKdHVycXVvaXNlIGhhaXIKZnJvbnQgZmFjaW5nIHRoZSBjYW1lcmEKd2VhcmluZyBhbiBvcm5hdGUgb3V0Zml0CnR3aWxpZ2h0IHByaW5jZXNzCndhcmhhbW1lciA0MGsgc2V0dGluZwpwaXhhciBmaWxtIHNldHRpbmcKbXlzdGljYWwgc2V0dGluZwp3ZWFyaW5nIGEgcmVkIHN1bmRyZXNzCnJvbWFuIHNldHRpbmcKY3V0ZSBkb2cKbWlmZnkKYW50b2luZS1qZWFuIGdyCmluIG1hamVzdGljCmN1cnZlZCBob3JuZWQgZHJhZ29uIQptYW4/CndlcmV3b2xmPwpjcm93cyBiZWF1dGlmdWwKcGFsZSBncmF5IHNraW4KYnV6emVkIGhhaXIgb24gdGVtcGxlCmZyZW5jaCBnYXJkZW4KYmFyb3F1ZSBhcnQgc3R5bGUKbW92aWUgY2hhcmFjdGVyCnlvdW5nIGFkdWx0IG1hbGUKZGV0YWlsZWQgaHVtYW4gZmFjZQpsb25lbHkgYW5kIHNhZApzdXJyZWFsaXN0IGNvbmNlcHR1YWwgYXJ0CmJhY2t3YXRlciBiYXlvdQpydXN0IGFuZCBjb3Jyb3Npb24KaW4gdGhlIGFydCBzdHlsZSBvZiA4IDAgcyBhbmltZQpqYXBhbmVzZSBjaXR5IHBvcCBjb2xvciBwYWxldHRlCmhhamltZSB5YXRhdGUKd293IGZhY3RvcgpvZiB0aGUgZ2FtZSBwb3J0YWwKZmVyb2Npb3VzIGFwcGVhcmFuY2UKbmF0dXJhbCBsYW5kc2NhcGUgYmFja2dyb3VuZApmYW5jeSBkcmVzcwppbnRyaWNhdGUgcm9jb2NvIG9ybmFtZW50YXRpb24KYmxhY2sgdHVuaWMKNDI2Mjg2Mjg2MwpncmFjZWZ1bCBnYXplCjEzNjQxMjM1MQpzZXVyYXQKbG90cyBvZiBjeW1iYWxzCnBvaW50aW5nIGF0IHRoZSBjYW1lcmEKYnJpZ2h0IGNvbG9ycyBoaWdobHkgZGV0YWlsZWQKYmxhY2sgc2hvcnQgaGFpcgp0aG9tYXMgamVmZmVyc29uCmNsZWFuIC0gc2hhdmVuCnB1cnBsZSBuZW9uIGNvbG91cnMKb3JuYXRlIGtvcmVhbiBwb2xlYXJtIGJlaGluZCBoZXIKaGFuYm9rIGFwcm9uCnF1ZWVuIG9mIHRoZSBnYWxheHkKcGhvdG9yZWFsaXN0aWMhIQpibGFjayBkYXJrbmVzcwp0cnVlCndoaXRlIGJhbmRhZ2UgdGFwZSBvbiBmaXN0cwpoaXMgaGVhZCBpcyBhIHBlYXIKd2VhcmluZyBmbG93aW5nIHJvYmVzCm9saXZlIGdhcmRlbgpzbW9rZXkgYXRtb3NwaGVyZQpiYW5kYWdlIHRhcGVkIGZpc3RzCmZlbWFsZSBmb3gKdHJpYmFsIGNsb3RoaW5nCnRvbWIgcmFpZGVyIHNldHRpbmcKdmVyeSBwZXJmZWN0IHBvc2l0aW9uCnJ1bGVyIG9mIHRoZSBkZW1vbnMKamFtaWUgY29yZXRoCnJldHJvIGRhcmsgdmludGFnZQpnb2xkIGZyYW1lZApsYXJnZSBkYXJrIGV5ZXMKY29ucXVlc3QKZ29yZ2VvdXMgZGlnaXRhbCBhcnQKZmVhciBvZiBkZWF0aApoaXMgbWluZCBjb250ZW1wbGF0aW5nIGV0ZXJuaXR5CnZhdWdoYW4gYmFzcwpqb3ljZSBiYWxsYW50eW5lIHN0eWxlCmhhaXIgZmFubmVkIGFyb3VuZApqZXJlbXkgcGl0a2luCmJlYXV0aWZ1bCBmdWxsIGZhY2UKZWxlcGhhbnRzCnN0YW5kIHVwIHdpdGggdGhlIHNlYSBiZWhpbmQKbXlzdGVyeSBob3Jyb3IKY2luZW1hdGljIGdyaXR0eSBsaWdodGluZwpqb2huIG9saXZlciBhbmQgYWRhbSBkcml2ZXIKd2lzcHkgaW5rIGhvcnJvcgpuZW9jaHJvbWUgY29sb3JzCmhhcmQgZmxhc2gKaGFsbyBhcnJheQpuYXR1cmUgZ3Jvd2luZyBhcm91bmQgdGhlIGNpdHkKcHJldHR5IHNwYWNlIHN0YXJzCm1hbmdhIGRlc2lnbgo4IHgKaW4gYSBjaXJjbGUKb2xkIHBob3RvIHN0eWxlCndhcmxvcmQKZWF0aW5nIGEgcmF0CmN5YmVyIGFlc3RoZXRpYwpjdXRlc3QKdW5yZWFsIGVuZ2luZSEKbG9va2luZyBvZmYgaW50byB0aGUgc3Vuc2V0CnNldmVyYWwgaGVhcnRzCndpZGUgdmlld3MKZ29yZ2VvdXMgZGFyawpydXRrb3dza2kgZ3JlZwphYmFuZG9uZWQgcHJhZ3VlCndpdGggYm93IGFuZCBhcnJvdwpvZiBhIHNoaXJ0bGVzcwp2ZXJ5IGNocm9tYXRpYyBhYmVycmF0aW9uCm15c3RlcnkgYW5kIGRldGVjdGl2ZSB0aGVtZWQKbWFob2dhbnkgZXllcwp3YXJtIGJyb3duIGV5ZXMKd2VhcmluZyB2ciBnbGFzc2VzCmNsZWFyIGRhcmsgYmFja2dyb3VuZApvYmplY3Qgc3BvdGxpZ2h0CmJlYXV0aWZ1bCBjb2xvciBwYWxsZXQKZGV0ZWN0aXZlIGhhZCBvbiBoZXIgaGVhZAppbiB0aGUgcmFpbiBpbiB0aGUgZWFybHkgZXZlbmluZwo4IGsgaGlnaGx5IGRldGFpbGVkIOKdpPCflKUg8J+UpSDwn5KAIPCfpJYg8J+agAp3aWxsaWFtIGZpbm4KbWFydGluIHNoYXJwCmNocmlzdGlhbiBvcnJpbGxvCmZ1bGNvbG9yIG9jdGFuZSByZW1kZXIKY2FyYXZhZ2dpbyBhbmQgbW9lYml1cwpzbmFrZSB2YW4KbWFyc2hlcwpuZW8gLSBub2lyIHN0eWxlCnRyYXZlcnNpbmcgYSBzaGFkb3d5IGNpdHkKa3VhbGEgbHVtcHVyCmNhbm9uIDcgZAp2aWN0b3JpYW4gcGhvdG9ncmFwaAppdCdzIHJhaW5pbmcgb3V0c2lkZQpmaXJzdCBwZXJzb24gc2NyZWVuc2hvdApiaXJ0aGRheSBwYWludGluZwpzdHlsaXplZCBiYWNrZ3JvdW5kCmxlYXZlcyBpbiBmb3JlZ3JvdW5kCml0IGlzIGdsb3dpbmcKY29zbWljIGFuZCBjb2xvcmZ1bApleWJhbGxzIGluIHRoZSB3YWxscwpldXJvcGVhbiBmYWNlCnNpZ2h0IHByb29mCjEgOSA5IDggcGhvdG8KcmFpbiBzcGxhc2hpbmcKdGhlIGJvcm4gZmlyZQpwcm9zcGVyaXR5CnNpbmdlciBtYWx1bWEKc29jY2VyIHBsYXllciBjcmlzdGlhbm8gcm9uYWxkbwpncmVhdCBkZXRhaWxlZCBmYWNlCmhhbGYgaHVtYW5vaWQKbWVkaWNhbCBzdGl0Y2hlcyB2YXBvcndhdmUKY2xvc2UgdXAgaGFsZiBib2R5IHNob3QKaW50ZXJlc3RpbmcgY29sb3IgdXNlCm9uIGEgYmFsY29ueQpyb3VuZCBzdW5nbGFzc2VzCnRyZW5kaW5nIG9uIGNnc3RhdGlvbgpyZWFsIHVuZ2luZQpzdXNwZW5kZWQgaW4gb3V0ZXIgc3BhY2UKMSAyIDAgMCBiYwpmZW5jZXMKaG9sZGluZyBhIHNtb2tpbmcgcmF5LWd1bgpzaWdtYSAxIDAgNSBtbSBmIDIKc2NhbmRpbmF2aWFuIHN0eWxlCmV2aWwgdmlsbGFpbiBncmluCmR1cmluZyBhIG1ldGVvciBzdG9ybQpjeXBydXMKdXJiYW4gY29uY2VwdCBhcnQKdG9wIGxpZApoZCBmYW50YXN5IGFydApzdW1tZXIgYWZ0ZXJub29uCmluZG9uZXNpYSBuYXRpb25hbCBnZW9ncmFwaGljCnRlY2ggZmFjZQppbiBhIGZ1dHVyaXN0aWMgYXJlbmEKdmlyYWwgaW1hZ2UKZGFuIGhhcm1vbgpibGFja25lc3MKbGVvdGFyZCBhbmQgbGVnIHdhcm1lcnMKZ3JhZGllbnQgYmx1ZSBibGFjawpkaWdpdGFsIHdhdGVyY29sb3IgcGFpbnRpbmcKdHJhY2tzIG9mIGJhcmJlZCB3aXJlCnN0ZWFsIGFybW9ycwpwYXBlcmJhY2sKbWlsbGFpc2UgYW5kIGdyZWcgcnV0a293c2tpCmFtZXJpY2FuIG9pbCBwYWludGluZwpmbGF0IGNvbG9ycyBhbmQgc3Ryb2tlcwpjYXVnaHQgaW4gdGhlIGZsb3cgb2YgdGltZQp1bHRyYSBkZXRhaWxlZCAxNmsKYnJpZ2h0IHZpdmlkIGxpZ2h0aW5nCjEgOSA4IDAgcyBjb25jZXB0IGFydApzaWJlcmlhISEKdGhyb3VnaCB0aGUgd2luZG93cwpmdWxsIHdoaXRlIGJlYXJkCm5lb24gcm9hZAptYWdpY2FsIGZvZwp3ZWFyaW5nIGdvdGggbWFrZXVwCnJlYWxpc3RpYyBmYWNlcyBhbmQgYW5hdG9teQpmaWxtIHBvcnRyYWl0CmV4cHJlc3Npb25zCm5vIHNraW4gc2hvd24KdG9kYXkncyBmZWF0dXJlZCBhbmltZSBzdGlsbApzaGFkb3d5IGFuZCBkYXJrCmFzaWFuIHN1bgpncmFpbnkgbG93IHF1YWxpdHkKb24gdGhlIHNpZGUgb2YgdGhlIHJvYWQKZXh0cmVtZWx5IGludHJpY2F0ZSBkZXRhaWxzCm1ldHJvIDIgMCAzIDMKZ29wcm8gY2FtZXJhCjcgNyA3IDcKcmV0cm8gZmFudGFzeSBzdHlsZQplY2xlY3RpY2lzbQpnaWFudCBjdW11bG9uaW1idXMgY2xvdWQKc3BlY3RhY3VsYXIgbWlsa3kgd2F5CmdyZWVibGUgdGVjaApzY2kgLSBmaSBqZXdlbGxlcnkKaW5zaWRlIGEgc2NpZW5jZSBmYWNpbGl0eQp2b2x1bWV0cmljIHNlYXJjaCBsaWdodHMKb3Bwb3J0dW5pc3RpYyBleHByZXNzaW9uCnRob21hcyBraW5rYWRlIGFuZCBjcmFpZyBtdWxsaW5zCm1hZ2ljYWwgYnJ1dGFsaXNtCnNldCBpbiAxOTgyIHRva3lvCnNldCBpbiAxOTk4CmltbWVuc2VseSBkZXRhaWxlZCBzY2VuZQp0aGUgdGVkZHkgYmVhciBpcyBob2xkaW5nIGEgZ3VuCm1peG1lZGlhCm1hZGUgb2YgcG9saXNoZWQgYnJvemUKbGVhdmVzIGFuZCB2aW5lcwplbGVnYW50bHkKYmFja2xpZ2h0IGxlYXZlcwp0cmVuZGluZyBvbiB0ZXh0dXJlcy4gY29tCmludHJpY2F0ZSBmdXR1cmlzdGljIGxlZCBqZXdlbHJ5Cndhcm0gdG9uZQpzY2lmaSBtb3ZpZSBwb3N0ZXIKY2hlc3MgbW90aWZmcwpmcmVja2xlZCBmYWNlCnNoZSBoYXMgdHdvIHBvbnl0YWlscwpzaGUgd2VhcnMgYSBqYWNrZXQKY292ZXJlZCBicmVhc3RzCmluIGEgdGhyb25lIHJvb20KaGlkZGVuIHRydXRoCnN0b3J5IGJvb2sgZm9yIGFkdWx0cwpmbG9vZGVkIGdyb3VuZAo0IDAgMCBtbSBmIDEuIDIKcm9tYW50aWNpc20gYXJ0IHN0eWxlCmFuZ2xlZCBzaG90CmFydCBjaHJpcyByYWhuIGFuZCBqdW5nIHBhcmsKbWFjcm9zIHNob3QKd2FybSBjb2xvciBncmFkaWVudAp2ZWN0b3IgbGluZSAtIGFydCBzdHlsZQpjZW50ZXIgb2Ygc2t5CmhpZ2hseSBkZXRhaWxlZCBjYXIKZmFudGFzeSBycGcgYm9vayBpbGx1c3RyYXRpb24KYnJlYXRodGFraW5nIGV5ZXMKc2tlbGV0YWwgb21lbnMKaW5maW5pIC0gZCAtIHJlbmRlcgpiYWNrZ3JvdW5kIHdpdGggY29tcGxleCBwYXR0ZXJucwpzdGFyIGNpdGl6ZW4gZGlnaXRhbCBhcnQKZW5kbGVzcyBncmFzcwpzbWFsbCBhc3Ryb25hdXRzCmdsb3dpbmcgaW50ZXJpb3IgbGlnaHRpbmcKbHVtaW5vdXMgc2NpZmkgZW5naW5lCnNoaW4taGFuZ2EKY29udG9ydGVkIGxpbWJzCmR5bmFtaWMgc2hhZG93CmluIHRoZSBjeWJlcnB1bmsgY291bnRyeXNpZGUKY29tcGxpbWVudGluZyBjb2xvciBzY2hlbWUKZGVhZCBvciBhbGl2ZQpmb2dneSBhbWJpZW5jZQpzaW5naW5nIGF0IGEgb3BlcmEgaG91c2UKc2hvdCBpbiB0aGUgc2t5Cmxvb3RzIG9mIGNsb3Vkcwpyb2NrcyBmbHlpbmcKZmFudGFzeSBnYW1lIGFydCBzdHlsZQplc2NoYXRvbgpsYXJnZSByb3VuZCB3aW5kb3cKbG93IGxldmVsIHZpZXcKbXVzY3VsYXIgd2VyZXdvbGYKY3JlYXRpdmUgY29sb3IgY2hvaWNlCmN1bXVsdXMgY2xvdWQgdGF0dG9vcwpza3kgYmx1ZSBhbmQgd2hpdGUgY29sb3Igc2NoZW1lCmdvb2QgYXQgY2FyZHMKcGxheXMgbXVzaWMKZ2FtYmxlcyBsaWtlIG5vIG9uZQpzcGFyc2UgcGluZSB0cmVlcwpjaXR5IG9mIHRoZSBqdW5nbGUKdGhlIGdyZWF0IHdhcgp3aXRoIHNvbWUgc2F1c2FnZXMgb24gdGhlIGZpcmUKYW4gaW5kaWdvIGJ1bnRpbmcKaHlwZXIgbGlnaHQgZHJpZnRlciBjb2xvciBwYWxsZXQKc292aWV0IHByb3BhZ2FuZGEgYXJ0CjggayBncmVnIHJ1dGtvd3NraQpkYXJrIHNjaSAtIGZpIGdhbWUgbWFwCmhpZ2hseSByZWFsaXN0aWMgdW5yZWFsIGVuZ2luZQplbmRsZXNzIGNvc21vcyBpbiB0aGUgYmFja2dyb3VuZAptb2hhbWVkIHJlZGEKYWlyeSBsYW5kc2NhcGUKY2xvdWRzIGFuZCBza3kKdW5pdGVkIG5hdGlvbnMKYmVhdXRpZnVsIGxhdGUgYWZ0ZXJub29uCnN1biBmaWx0ZXJpbmcgdGhyb3VnaCB0cmVlcwpvZiBhbiBiZWF1dGlmdWwgZ2lybApzdHJvbmcgZWdnc2hlbGwgdGV4dHVyZQpmb29kIHBob3RvZ3JhcGh5IGdvdXJtZXQKdHJlbmR5IGZvb2QKamVhbiBnaXJlYXVkCmNhbG0gc2Vhcwp3aWRlIHNob3QhISEhISEKcHJlY2lzZSB2ZWN0b3IgdHJhY2UKaW4gdGhlIHdvb2RzIGF0IG5pZ2h0CnNwYWNlIHN0YXRpb24gaW50ZXJpb3IKbWlzc2lvbiBpbXBvc3NpYmxlCm9yYW5nZSBhbmQgdHVycXVvaXNlIGFuZCBwdXJwbGUKc29mdCBibHVlIGxpdmluZyByb29tCnVucmVhbCAzIGQKNCBrIG1hc3RlcnBpZWNlCmluIHRoZSBtb3ZpZSBhcnJpdmFsCmNsYXNzaWMgYm9uZCBpY29uaWMgc2hvdApjbGFzc2ljIGljb25pYyByYW1ibyBwb3NlCmh1Z2UgY2hpbgpoaWdoIGFib3ZlIHRoZSBncm91bmQKd2l0aCBnb2xkIHRlZXRoCmZyb20gc29uaWMKc3RhdHVlIGlzIGEgZm91bnRhaW4KdGhlcmUgaXMgbWlkbmlnaHQgc3Vuc2V0CnJpbSBsaWdodHMgYW5kIGNhdXN0aWNzCnN1cGVyIHJlYWxpc3RpYyByZW5kZXIgdnJheQpjbG91ZHMgYW5kIGNvcnJ1cHRlZCBjaXR5IGJlaGluZApibG9ja2J1c3RlciBtb3ZpZSBhcnQKdG9ueSBkaXRlcmxpenppIGFuZCBicmlhbiBmcm91ZApvbiBhIGx1c2ggZmVydGlsZSBhbGllbiBwbGFuZXQKcGxheWluZyBnYW1lcwpkdWxhYwphbGFuIGxlZSBhbmQgbWFyYyBzaW1vbmV0dGkKcGl4ZWxsYXRlZAppbiB0b2t5byBzaGluanVrdQphYmFuZG9uZWQgZGVyZWxpY3QgYnVpbGRpbmdzCmRhbWFnZWQgc3RydWN0dXJlcwpoeWFjaW50aApzb255IGFscGhhIGE2NDAwCnNhbyBwYXVsbwpwb3N0IGdydW5nCmJlYXV0aWZ1bCBsYWtlIGluIHRoZSBmb3JlZ3JvdW5kCjEgOSAzIDcKZWd5cHRpYW4gaWNvbm9ncmFwaHkKbGFtcHMgYW5kIGZsb3dlcnMKcGVyZmVjdCBsYW5kc2NhcGUKc2FpbHB1bmsKZmxvd2VyY29yZQpyaWdodCBhbmF0b215CmZvcm1pbmcgYSBidXJuaW5nIGhhbmQgc3BlbGwKaW5ub2NlbnQgc21pbGUKc2VyaW91cyBmb2N1c3NlZCBsb29rCmhpZ2hseSBkZXRhaWxlZCBjbG91ZHMKc3R5bGlzZWQgaGFuZCBwYWludGVkIHRleHR1cmVzCmZpbG0gY2FtCmdlb3JnZSBjbGludG9uCmJvb3RzeSBjb2xsaW5zCmNob2NvbGF0ZSBjaXR5CmFydHdvcmsgb2YgcGVkcm8gYmVsbApwaG90b3JlYWxpc3RpYyBkZXRhaWxlZAp0d2VlCnR1cmJvCnN1cmYgcGhvdG9ncmFwaHkKdGhyb3VnaCBhIHNlYSBtYWRlIG9mIGtldGNodXAKdG91Y2hpbmcgaGVyIGNsb3RoZXMKYml6emFyZSBsYW5kc2NhcGUKdGl0bGVkJ2hvbGlkYXkgYXQgdGhlIGJlYWNoICcKYWxsIHRoZSBwZW9wbGUgYXJlIHdlYXJpbmcgc3VpdHMKdmFzZSBvZiBmbG93ZXJzCndhbGxwYXBlciBiYWNrZ3JvdW5kCnN3aXJsaW5nIHBhaW50IGNvbG9ycwpsYXZhIGZpZWxkCmJ1dHRlcmZseSBzdHJva2UKaHlwZXJyZWFsaXN0aWMgb2N0YW5lIHJlbmRlcgp0YWN0aWxlIGJ1dHRvbnMgYW5kIGxpZ2h0cwphcnRpc3RpYyBkcmF3aW5nCjIwYiBwYXJhbWV0ZXJzCmVudHMKcmlwcGxlZCB3aGl0ZSBsYW5kc2NhcGUKY3JlZXB5ISEKaG9ycm9yaWZpeWluZwpsb2ZpIGFsYnVtIGFydAppbmRpZSB2aWRlbyBnYW1lIGhvcnJvcgp0b2t5byBjaXR5IGluIHRoZSBiYWNrZ3JvdW5kCnllbGxvdyB3YWxscGFwZXIKbW9zdCBwb3B1bGFyCmJyYWluIHN0YXJzCm1ldGFsbGljIHNrZWxldG9uCmNoZXN0IGhhaXIKc2VhcyBvZiBtb3VudGFpbgp0ZWNobm9sb2d5IGFuZCBuYXR1cmUgaW4gaGFybW9ueQo0IGsgOCBrIHVsdHJhIGhkCmpvZWwtcGV0ZXIgd2l0a2luCmNocm9tZSBjYXRoZWRyYWxzCmhlcmJldCBqYW1lcyBkcmFwZXIKY2hlcnViCnVwc2lkZS1kb3duCnRvcnR1cmVkIGZhY2UgbWFkZSBvZiB3b29kCmZ1bGwgY29sb3IgaWxsdXN0cmF0aW9uCmJyZW50IGhvbGxvd2VsbApyZWFsaXN0aWMgcGFsZW9hcnQKbmV3c3BhcGVyIHBob3RvZ3JhcGgKcmVhbGlzdGljIG9sZCBwaG90bwpjYXVzdGljcyByZWZsZWN0aW9ucwpwcm9mZXNzaW9uYWwgZm9vdCBwaG90b2dyYXBoeQppbiB0aGUgc3BvdGxpZ2h0CnNwb3RsaXQKZnJpZW5kbHkgZmFjZQppbmsgb24gc2tpbgpjaXJjdWxhciB0YXR0b28KYmx1ZSBuZW9uIGxpZ2h0aW5nCnBpbmsgcGV0YWxzIGZseQpiYW5na29rCm1hcmtldCBzdGFsbHMKY2hyb21hdGljIGFicmFzaW9uCmhpZ2ggZW5kIGZhc2hpb24KbWFueSBvdmVyZ3Jvd24gc2NyYXAgY2FycwpuYXR1cmUgYXJ0CnRhbGxlciB0aGFuIGEgc2t5c2NyYXBlcgplYXN5Z29pbmcKbHVzaCByYWluIGZvcmVzdAphcnJheXMKdXN1YWwgY29sb3Igc2V0dGluZwpuZWFyIGEgd2luZG93CmFsZW5hIGFlbWFuaSBkaWdpdGFsIGFydApoZWF2eSBjbG91ZHMKYXNjZW5zaW9uCnRoZSBzdW4gYXQgdGhlaXIgYmFjawpkZXJlayByaWdncwpjaGFybGkgYm93YXRlcgpwb3N0IGNhcGl0YWxpc20Kc2FjcmVkIHRpZ2VyCnNvZnQgbGlnaHQgLSBuIDkKd2VhcmluZyBzdWl0IGFuZCB0aWUKd2hvIGNhbiBvcGVuIHRoZSBtaW5kCmluIGZyb250IG9mIGJ1cm5pbmcgZGVzZXJ0CmNvdmVyIG1hbmdhCm1ha290byBzaGlua2FpIGFuZCBhcnRnZXJtCmNhbm9uIDUgZCA1IDAgbW0gbGVucyBrb2RhY2hyb21lCmFyY2hpZSBjb21pYyBzdHlsZQpidWlsZGluZyBjb3ZlciB3aXRoIHBsYW50CmZvdW5kIGluIGEgY2F2ZSBtYWRlIG9mIGNsYXkKbWlkIC0gMyAwIHMgYWdlZApvY2N1bHQgc3ltYm9saXNtCmNocm9tYXRpYyBjb2xvciBzY2hlbWUKbG9uZyBicmFpZGVkIGN1cmx5IGhhaXIKaWN5IGxha2Ugc2V0dGluZwppbiBwYXN0ZWwgc2hhZGVzCmxvbmcgY3VybHkgYmxvbmRlIGhhaXIKcXVlZW4gb2YgYm9uZXMKamFpZGVuYW5pbWF0aW9ucwpib3VnYWludmlsbGVhCmFsZXhhIG1pbmkKc2l0dGluZyBpbiBhIGRhcmsgcHJpc29uIGNlbGwKOCA1IG1tIHNob3QKaW5mdXNlZCB3aXRoIGF1cm9yYSBib3JlYWxpcwpzd29yZCBzbGFzaApmcmllbmRseSBhcnQKZnVubnkgYXJ0CmtvbmdtaW5nIGxhbnRlcm5zIGluIHRoZSBza3kKaW4gYSBuYXJyb3cgY2hpbmVzZSBhbGxleQpjbGFzc2ljIHN0eWxlCnByZWNpb3VzIHN0b25lcwpob2xkaW5nIGEgc21hbGwgdmFwZQpmdXIgc2ltdWxhdGlvbgpwb3J0cmFpdCBvZiBzaWdtdW5kIGZyZXVkCnNob3Qgb24gYSAyIDAgMCAzIGNhbWVyYQpvbiBmbGlja3IgaW4gMiAwIDAgMwppbiBkb29ycwpnYXN0cm9ub21pY2EgbWFnYXppbmUKZmFudGFzeSBvaWwKdml2aWMgY29sb3JzCm91dGVyIHNwYWNlIGlzIHZpc2libGUKMSA5IDkgMCBzIHN0eWxlCnNob3dlcnMKaGFqaW1lIG5vIGlwcG8gbWFuZ2EgaW5zcGlyZWQKcGFnYW4gb2NjdWx0aXNtCmZlbWFsZSBhc3Nhc3NpbgppbnNpZGUgYSB3YXJlaG91c2UKc3RyZWV0IGxhbnRlcm5zIGFyZSBzaGluaW5nCjEgMCAwIG0KOCBrIGh5cGVyZGV0YWlsZWQKc3RvcCAtIG1vdGlvbgpkaXN0dXJiaW5nIGF0bW9zcGhlcmUKMSA4IDcgNgpsb29raW5nIG9udG8gdGhlIGhvcml6b24Kc3VuIGRvd24KdGhlIGNyZWF0b3Igb2YgZXZlcnl0aGluZwppbmNvbXByZWhlbnNpYmxlIHNpemUKMzUgbW0gZmlsbSBwaG90b2dyYXBoeQpqdWFuIG1pcm8KZmxvd2luZyBjdXJ2ZXMKZmVuY2UKb3Zlcmdyb3duIHdpdGggaHVnZSByYXJlIGZ1bmd1cwpsb3dicm93IHBvcCBhcnQgc3R5bGUKMSA5IDUgMCBzIGFtZXJpY2FuYSB0b3VyaXNtCmdvb2dsZSBnbGFzcwpzaGF2ZWQgdGVtcGxlCnRpYXJhIHdpdGggc2FwcGhpcmUKY2hlc3MgZ2FtZQppc29tZXRyaWMgcGVyc3BlY3RpdmUgdmlldwpicmlnaHQgbGVucyBmbGFyZQpwcm9mZXNzaW9uYWwgdmVjdG9yIGdyYXBoaWMKZ2VvbWV0cmljYWxseSBwZXJmZWN0Cmh5cHJyZWFsaXNtCmNhc3RsZSBpbiB0aGUgbWlkZGxlCmNlbGxvCnR1YmEKc2VhIHVuZGVybmVhdGgKdmlzaW9uIHF1ZXN0CmhvbGRpbmcgYSBwb2NrZXQgd2F0Y2gKMSA5IDggMiBsaWZlIG1hZ2F6aW5lIHBob3RvZ3JhcGgKYnJpYW4gd2lsc29uCmNpbmVtYXRpYyBpbWF4IHNob3QKaXQncyBnZXR0aW5nIGRhcmsKcmVuZGVyZWQgaW4gNCBrCndlYXJpbmcgYSByb3VuZCBoZWxtZXQKcmVhbGlzdGljISEKISBwaG90b3JlYWxpc3RpYwpzaGUgd2VhciBnYXNtYXNrCmZsb2F0aW5nIGludG8gdGhlIHNreQpwYWJsbyBwaWNhc3NvIHBhaW50aW5nCm5hcnJvdyBwYXNzYWdlCmZpbG0gY2FtZXJhIHN0eWxlCnBpbiAtIHVwIGdpcmwKbmV3c3BhcGVyIGNvbGxhZ2UKd29tYW4gaXMgc2l0dGluZwpiYWJpZXMgaW4gaGVyIGxhcAp3ZWFyaW5nIHBhbnRzIGFuZCBhIHQtc2hpcnQKZm9yZXN0IGxpZ2h0CnBzeWNoYWRlbGxpYyBjb2xvcnMKZm9yZWJvZGluZyByb29tCnVuZGVyd2F0ZXIgdmlldwpmdWxsIGdyb3d0aAp2aWJyYW50IHBhdHRlcm5zCmhhcnNoIHNoYWRvd3MgYW5kIHJlZmxlY3Rpb25zCm1hZGUgb2YgZmxvd2VycyBhbmQgbGVhdmVzCmNoZWVyaW9zCm1hbnkgbGVhdmVzCmhpZ2ggcXVhbGl0eSBza2V0Y2ggYXJ0CnNlYXR0bGUgY29tcGxldGVseSB3YXN0ZWQgYXdheQppbnRyaWNhdGUgMyBkIGlsbHVzdHJhdGlvbgplcGljIGNpbmVtYXRpYyBzY2VuZQpvY3RhbmUgcmVuZGVyLiByZWFsaXN0aWMKY2hhbXBhZ25lCmZ1bGwgb2Ygc3RlYW1pbmcgY29mZmVlCmNvbmNlcm4KY29sbGFnZSBlZmZlY3QKY29sbGFnZWQKbmV3bHkgaGF0Y2hlZCBkcmFnb24KaW5jcmVkaWJseSBjdXRlCmNoYXJnaW5nIHRocm91Z2ggYSBkcmFnb25zIGxhaXIKbHVzaCBleG90aWMgdmVnZXRhdGlvbgpnIGNnc29jaWV0eQppbiBhIGxhcmdlIGRlc2VydCBjYXZlCmluIGEgbGVhdGhlciBjb3JzZXQKc3VwZXIgLSBkZXRhaWxlZCB3b3JrCmZvY3VzIHVucmVhbCBlbmdpbmUgNQpncmVnIHJ1dGtvd3NraSBhbmQgbWFyaW8gdGVzdGlubwpvdmVyd2F0Y2ggZGVzaWduCmdhbGF4eSB0aGVtZWQgcm9vbQpjYXN1YWwgY2xvdGhpbmcgc3R5bGUKbXl0aCBvZiBuYXJjaXNzdXMKd2F2eSBsb25nIGJsYWNrIGhhaXIgYW5kIGdsYXNzZXMKYmxvd2luZyBoYWlyCjIwMTkgdHJlbmRpbmcgcGhvdG8KaW5zdGFncmFtIGluZmx1ZW5jZXIKbXVyZGVyb3VzCnJ1bm5pbmcgaW4gc2F2YW5hCmFudGlhbGlhc2VkCuKWiOKWiGZ1bGwgb2YgZXhwcmVzc2lvbnPilojilogK4paI4paI4paIYmVhdXRpZnVsIGZhY2XilojilojilogKY29udHJlam91cgpsYXJnZSBvcGVuIHJvb20KYW5ndWxhciBkZXNpZ24KdHJlZXMgYW5kIHN0YXJzIGJhY2tncm91bmQKYWJhbmRvbmVkIGFzeWx1bQpvdmVyZ3Jvd24gaW4gYSB0aGljayBmb3Jlc3QKdGV4dHVyZWQgbGlnaHQKZGV2aWFudGFydCBoZCBzY3JlZW5zaG90CmJpcmNoIHN3YW1wCnN1YnRsZSB3ZWFyIC0gYW5kIC0gdGVhcgp0cmVuZGluZyBvbiBhcnRzdGF0b29uCmJyb2tlbiBnbGFzc2VzCm1pY2hhZWwgd2hlbGFuIGFuZCBndXN0YXZlIGRvbmUKKCAoICggamVubnkgc2F2aWxsZSApICkgKQpnYWxheGllcyBpbiB0aGUgc2t5CnJlc29uYW5jZSBvZiBmYXRlIHRvd2VyIGFydApkcmFtYXRpYyB6b29tCmRyYW1hdGljIGxlbnNlcwpzZWEgaG9yc2UKYXJ0Z2VybSA7IDNkIHVucmVhbCBlbmdpbmUKaGlnaGx5IHJlYWxpc3RpYyBwaG90byByZWFsaXN0aWMKc29mdCBzZXBpYSB0b25lcwpmbHVpZCBhbmQgZHluYW1pYyBmb3JtcwphYnN0cmFjdCBjaGFyY29hbCBza2V0Y2gKYmVhdXRpZnVsIHNoYXBlcwp3aW5ncyBvcGVuCm1hbGUgY2FsaXN0aGVuaWNzCmV4cHJlc3Npbmcgc3Ryb25nIGVtb3Rpb25zCmxvdmVycyBlYXQKc2hhcGVzIGFuZCBjb2xvdXJzCnBhcGVyIGN1dCBvdXQKanVzdCBiZWF1dGlmdWwKY29sb3IgZmllbGQgcGFpbnRpbmcuIDhrCmFic3RyYWN0IGxpcXVpZApzaGFkZXMgb2YgeWVsbG93CmxvdHVzZXMKY2FuZGlkISEgZGFyayBiYWNrZ3JvdW5kCmVtb3Rpb25hbCBtYXN0ZXJwaWVjZQp2aW9sZW50IHByb3Rlc3QKc2xhbSBkYW5jaW5nCmltbWVuc2UgY3Jvd2Qgb2YgdmFyaWVkIHBlb3BsZQptYXJpbyByb2JpbnNvbi4gb2lsIG9uIGNhbnZhcwpwYWludCBzcGlsbApibHVlIGFuZCBncmVlbiBhbmQgcmVkIHRvbmVzCnNvbWUgcG91cmluZyB0ZWNobmlxdWVzCmNoYW90aWMgcGF0dGVybnMKYWNyeWxpY3MKY2xvc2UgLSB1cCBwb3J0cmFpdCBzaG90CmN5YmVycHVuayBoZXJvCmNvbnRlbXBvcmFyeSBjZXJhbWljcwphYnN0cmFjdCBzbW9rZXkgcm9zZXMKYWJzdHJhY3Qgc3VycmVhbGlzbQpodWdlIGRyYW1hdGljIGJydXNoIHN0cm9rZXMKa2F3YW5hYmUga3lvc2FpCm1pdXJhIGtlbnRhcm8KY2Vydml4IGF3YWtlbmluZwpwc3ljaGVkZWxsaWMKZGVtb25pYyBjcmVhdHVyZQppcmlkZXNjZW50IHBhbGV0dGUKYWNhZGVtaWMgcnVzc2lhbiBwYWludGluZwp0IGFsbGVuIGxhd3NvbiBhbmQgaWFuIGZpc2hlcgphY2FkZW1pY2lhbiBwcm9raG9yIHpha2hhcm92CnVrcmFpbmUuIHBob3RvZ3JhcGh5CmRpc25leSBzdGFyIHdhcnMgbW92aWVzIHN0aWxsCmFjZSBhdHRvcm5leQphY2Ugb2Ygc3BhZGVzCmdlb2NpdGllcwpkaXNhc3NlbWJsZSB0aGUgY29tcHV0ZXIKYWNpZCByaWNoIGNvbG9ycwpibGVlZGluZyBjb2xvcnMKcmVhbCBwb2xhcm9pZCBwaWN0dXJlCmFjb3VzdGljIGd1aXRhcgpncm91bmQgY2FtZXJhCmFjcnlsaWMgY2FudmFzCmFxdWVkdWN0IGFuZCBhcmNoZXMKbWlkIC0gY2VudHVyeSBtb2Rlcm4KZmFudGFzeSBjaGFyYWN0ZXJzCmF6dGVjIHByaW5jZXNzIGZpZ2h0cyBiYXJiYXJpYW5zCmxpZ3R0IHN3b3JkCmx5Y3JhIGNvc3R1bWUKaGlnaCBkZXRpYWwKY3liZXJtb3NxdWUgaW50ZXJpb3IKd2VhcmluZyBnb2xmIHNob3J0cwpvYmVzZSApCm1hc3NpdmUgZ2xvd2luZyBuZW9uIGF4ZQpkZXN0cm95ZWQgYXJtb3IKaGlnaCBkZWZpbml0aW9uIHNjcmVlbiBjYXB0dXJlCnN0YW5kcyBhdCBhIGhpcyBlYXNlbApzdHlsZSBvZiBwYW9sbyByb3ZlcnNpCmVtYnJhY2luZwpzdHlsZSBvZiBhbGV4YW5kZXIgdHJ1ZmFub3YKYmVpZ2UgYW5kIGdvbGQgdG9uZXMKc3RyYW5nZSBjcmFmdCBhYm92ZSB0aGUgaG9yaXpvbgpmdWxsIGRldGFpbGVkCmdydGVnIHJ1dGtvd3NraQpoaWdoIGhpZ2ggaGlnaCBxdWFsaXR5CmV0aGVyZWFsIGZhaXJ5dGFsZQpuZW9uIGdsb3cgc29mdCBib2tlaApmbHVmZnkgZmx1ZmZ5IGZ1cgpkcmVhbXkgYmx1cnJlZCBsZW5zCm5vY3R1cm5hbCBzcGlyaXR1YWwgc2NlbmUKZGV0YWlsZWQgZmFudGFzeSBhcm1vcgpmbGV1cmZ1cnIKZG9vZGFkCm9uZSBleWUgcmVkCmFwb2NhbHlwdGljIHNwaGVyaWNhbCBleHBsb3Npb24KcGFzdGVsIGxpZ2h0IHBpbmsgdmVyeSBsb25nIGhhaXIKcnVzdHkgY29sb3JlZCBsb25nIGhhaXIKYWR1bHQgcGFpciBvZiB0d2lucwpzaGlrYW1pbWkKYmlnIG11c2NsZQp2ZXJ5IGhpZ2hseSBpbnRyaWNhdGVseSBkZXRhaWxlZApzcGFjZSBwaXJhdGVzCmNocm9tZSBzaWx2ZXIKZ29sZCBkYXBwbGVkIGxpZ2h0aW5nCmRpbWx5IGxpdCB1bmRlcmdyb3VuZCBkdW5nZW9uCnZlcmRhbnQgYW5kIGx1c2ggYW5kIG92ZXJncm93bgpicmVhayBvZiBkYXduCm5hdHVyYWwgYW5kIG9yZ2FuaWMgYW5kIGZsb3dpbmcKc2hvdCBmcm9tIGEgbG93IGFuZ2xlCmdlb21vcnBob2xvZ3kKdGVjdG9uaWNzCnBvbGljZSBzaXJlbnMgaW4gc21va2UKdHJhc2ggc2NhdHRlcmVkIGV2ZXJ5d2hlcmUKYXdhcmRlZCBwaG90b2dyYWhlcgpkYXZpZCBub3RvbgpmZXJyb2ZsdWlkIG9jZWFucwptaW5pIGxha2UKdGhyZWUgaGFuZGVkIGdvZAphZXJvZ2VsIGlvcyB1aSBjb25jZXB0Cm1pbGQgY29sb3VycwoyIDAgMiAwIGF3YXJkIHdpbm5pbmcgcGFpbnRpbmcKaW50cmljYXRlISEhCmJvdGFuaWNhbCBhcnQKYW5pbWUgY29zcGxheQprb3Rob3BoZWQKc291bCBob2FyZGVyISEhCmJhdHRhbGlvbgpjYXJsIHplaXNzIDggNSBtbSB2aW50YWdlIGxlbnMKYW5jZXN0b3JzIGFuZCBmdXR1cmUKYWZyaWNhbiBxdWVlbgppbiB0aGUgc2tpbiBvZiBmb3J0bml0ZQpzdGFuZGluZyBvbiBhIGNsb3VkCmhvdCBjb2xvcnMKcmV0cm93YXZlIGNvbG9ycwpleHRyZW1lbHkgc3ltbWV0cmljYWwhIQpnb2RzIGFuZCBtZW4KMTk3MHMgY29taWMgYXJ0IHN0eWxlCmFnYXJ0aGEKYWdlIG9mIGVtcGlyZXMgMwpjaXR5IGxpZ2h0cyBpbiB0aGUgYmFja2dyb3VuZAphZ2VudCBjb29wZXIKYWhlZ2FvCmx5aW5nIGluIGJlZCEhISEgYmxhbmtldApzdGFyIHdhcnMgcmViZWxzCjMgYm9hdCBpbiByaXZlcgphaSBiaW9tZWNoCmFuZ2VsaWMgYW5kIHVuc2V0dGxpbmcKbm9pc2UgYW5kIGdyYWluCmNvbG9yIGRlZ3JhZ2F0aW9uCmRhIHZpbmNpIHBhaW50aW5nCmhvbGRpbmcgYSBjcnlzdGFsIGJhbGwKc3RhbmRpbmcgd2l0aCBhIGJsYWNrIGJhY2tncm91bmQKY29udGFpbmVyIHNoaXAKYWlycGxhbmUgaW4gdGhlIHNreQpoaWdoZW5kCnNvdXRoZXJuIGV1cm9wZWFuIHNjZW5lcnkKcGhvdG8gc3R1ZGlvIHF1YWxpdHkKYmx1ZSB0aWdodCB0c2hpcnQKYmxhY2sgZXh0cmVtZWx5IHRpZ2h0IGplYW5zCnJlYWwgZGV0YWlsZWQgZmFjZQphamkgZGUgZ2FsbGluYQpsb25nIGJyYWlkZWQgZ3JlZW4gaGFpcgpha2V0YW4KemVsbGsKY2luZW1hdGljIGRyYW1hdGljIGxpZ2h0CmNhcGNvbSBvZmZpY2lhbCBtZWRpYQphbGFpbiBkZWxvbiBhcyBtb25zdGVyIGh1bnRlcgpibGFkZXJ1bm5lciBhcGFydG1lbnQKcGFzdHJ5IGxpemFyZAphbGFza2FuIGdsYWNpZXIgb24gZmlyZQpib3R0bGUKcGVyZmVjdGx5IHRpbGVhYmxlCmFsYmVydCB3ZXNrZXIKZXBpYyBpbGx1bWluYXRpb24KYWxiaW5vIGhhaXIKc2FrdXJhIGZsb3dlcgpibHVlIG5lb24gYWNjZW50cwpoeXBlcnNhdHVyYXRlZApwYXJlbnRhbCBhZHZpc29yeQpkYXJrIGZ1dHVyaXN0aWMKbGFuZHNjYXBlIG9mIGhlYXZlbgpkdXN0eSBhaXIKbWlzYSBhbWFuZSAqCmFsZWlzdGVyIGNyb3dsZXkKdmVyeSBicmlnaHQKYWxleCBhbmQgaGlzIGRyb29ncwp2ZXJ5IG9yYW5nZQp0diBjYXB0dXJlCmFsZXhhbmRlciBhYmR1bG92CmJ1dHRlciBzY3VscHR1cmUKd2lkZSBwb3J0cmFpdAphbGV4YW5kcmlhIG9jYXNpbyBjb3J0ZXoKYWxleGlzIG9oYW5pYW4gYXMgYSB3aXphcmQKc2NyZWVuc2hvdCBmcm9tJ2ZhbGxvdXQgNCcKYWxpY2UgY29vcGVyIGFzIG1hcmlseW4gbWFuc29uCmFsaWNlIGZyb20gYWxpY2UgaW4gd29uZGVyIGxhbmQKZHJlc3MgbWFkZSBvZiBsZWF2ZXMKdmlraW5nIGdvZApkaXNuZXkgcGhvdG8gcmVhbGlzdGljCjggayAzIDUgbW0gY29sb3VyZWQgZmlsbQphbGllbiBhcm15CnZpc2libGUgZnJvbSBhZmFyISEKbmV4dCBnZW4gcmVuZGVyaW5nCjRrIGZhc2hpb24gc2hvb3QKYXJ0c3R5bGUgemR6aXPFgmF3IGJla3NpxYRza2kKc3VibWVyZ2VkIG9uIHRpdGFuCmFsaWVuIGZyb2cKYWxpZW4gZ2lybApjeWJlcnB1bmsgbHV0CmFsaWVuIGdyZXkKYWxpZW4gaGl2ZQpwc3ljaGVkZWxpYyB0cmlwcHkgdmlzaW9uYXJ5IGFydAppbnRlbGxpZ2VudCBhcnJhbmdlbWVudAphbm90aGVyIHVuaXZlcnNlCndhZGkgcnVtCm1hcmJsZSB0YWJsZQpmcmFuayBmcmF6ZXR0YSBhbHBob25zbyBtdWNoYQphbGllbiBtdXNpY2lhbgpmbG9yYSBhbmQgZmF1bmEKYWxpZW4gcmFjaW5nIGRyaXZlcnMKYWxpZW4hIGFsaWVuIGlzb2xhdGlvbgp3aGl0ZSBsaWdodG5pbmcKYnJhZGxleSB3cmlnaHQKaWN5IGdsYWNpZXJzCnJhZ2dhZSBhcnQKIyA0IDIgMAojIHNtb2tld2VlZGV2ZXJ5ZGF5CmFyY2hzCmNnaSBzdHlsZQp3YXRlciB0ZXh0dXJlCnN0eWxlIG9mIGRvdWcgY2hpYW5nCmRlbnNlIG1ldHJvcG9saXMKc2NpZmkgcm9vbQphdHRpcmU6IGJpa2luaQpzaGFycHQgdGVldGgKc2NhcnkgY3JlYXR1cmUKY2xvc2UgdXAgc3VidGxlIHNoYWRvd3MKYWxpZW5zIGluIHRoZSBsYXN0IHN1cHBlcgpicmFuZCBuZXcgbGVnbyBzZXQgKCAyIDAgMiAxICkKcmV0YWlsIHByaWNlIDQgNSAwCnN0YXJ0bGVkCmJyeWFuIGxlZSBvJ21hbGxleQpsZWFwaW5nIHRvd2FyZHMgdmlld2VyCmZ1dHVyaXN0aWMgc3R5bGUgc3BpZGVybWFuCnNwYWNlIGNsb3VkcwphbGwgdGVycmFpbiB2ZWhpY2xlIHJhY2UKdGhlIHNreSBpcyBncmF5CjE5NDBzIGZvb2QgcGhvdG9ncmFwaHkKZGFyayBiZWlnZSBncmV5IGJhY2tncm91bmQKbWVkaWV2YWwgY29hc3RhbCB2aWxsYWdlCnN0dW5uaW5nIDggawpmYXNpb25hYmxlCmNvbG9yZnVsIGFkb3JubWVudHMKY29sb3JmdWwgdG9ybiBmYWJyaWMKZnVsbCBib2R5IHBsYXlib3kgc2V0CnZlcnkgZGV0YWlsZWQgOGsKc2NhcnJlZCBleWUKbGFuZ3VhZ2UKZnJvbSBhIGRyZWFtCmFscGluZSBwb25kIHdpdGggd2F0ZXIgbGlsaWVzCmFscGluZSB0dW5kcmEgd2lsZGZpcmUKZGFuY2UgbWVkaXRhdGlvbgpzY2htdWNrCmNvbG9uaWFsIGVyYSBzdHJlZXQKcG9yY2VsYWluIGZhY2UKdGhvbWFzIGtpbmthZGUgYW5kIHRyaXN0YW4gZWF0b24Kc3R5bGluZwpzbmVha3kKdmVyc2lvbiAzCmdvZGRlc3MgcXVlZW4KYW1hbml0YSBtdXNjYXJpYQphbWF6aW5nIGNoYXJhY3RlcgpwZXJmZWN0IGNvbG9yZnVsIGV5ZXNoYWRvd3MKaXQgd2FzIGZ1bGwgb2YgYm9uZXMKY29zcGxheSBqb3VybmFsIGNvdmVyCmV4cXVpc2l0ZSBkZXRhaWwgaHVnZSBkZXRhaWxzCjE2bW0gd2lkZSBhbmdsZSBsZW5zCmFtYXppbmcgbGlnaHRuaW5nIGFydApvbmx5IG9uZSBjaGFyYWN0ZXIKamV3ZWxlZCBjb3N0dW1lCmJyaWdodCB3aGl0ZSBjYXN0bGUgc3RvbmVzCmNpbm5hbW9uICNiNTdlNTkgc2tpbiBjb2xvcgphbWVyaWNhbiBhc3Ryb25hdXQKbWl4ZXIgcmVuZGVyaW5nCm1hcnMgaW52YXNpb24gMiAwIDMgMyAtIDIgMCA0IDIKYW1lcmljYW4gdG9wIG1hbmFnZXIKY2VvIG9mIG1pY3Jvc29mdCBnYW1pbmcgKCB4Ym94ICkKYW1lcmljYW4gdG90YWwgcG9ydHJhaXQKNCAwIDAgbW0KcmlzaW5nIGZyb20gdGhlIHZvaWQKZG9zIGdhbWUKYXJjYWRlIGdhbWUKb2lsIGxpa2UgZmxvd2luZwpob2xvZ3JhcGhpYyBzdWl0CndhdGVybGlseSBwYWRzCmJhc3F1aWF0ICsgZnJhbmNpcyBiYWNvbgppbiB0aGljayBmdWxsIGJyb256ZSBhcm1vdXIKZHJhbWF0aWMgLSBsaWdodGluZwpvdXRkb29yIGFydCBpbnN0YWxsYXRpb24KY29sb3VyIGhkIHBob3RvZ3JhcGh5Cm5vcnRoZXJuIGZyYW5jZQp3YXhpbmcgbW9vbgoxIDkgOCAwIHMgY29tcHV0ZXJzCnN0YW5jaGlvbnMKYXF1YXRpYyBkZXZpY2VzCnVwY3ljbGVkCnAuIGEuIHdvcmtzCndpdGggZmxvd2VycyBhbmQgcGxhbnRzCmFuIGFiYW5kb25lZCBydXN0ZWQgdHJhaW4KZ29sZGVuIHRocmVhZHMKYnJvd24gaG9sZXMKYW50b25pIHRhcGllcwpzdXJyZWFsIHJhbWlmaWNhdGlvbnMKdGlsbGFtb29rIGNoZWVzZQphbiBhY2hpbmdseSBiZWF1dGlmdWwKY2xvc2UtdXAgcHJpbnQgb2YgZnJhY3R1cmVkCm9uIGEgcGFsZSBiYWNrZ3JvdW5kCnN3ZWV0IGV5ZXMKMyBkIHJlbmRlciBzdHlsaXplZApzbWlsZSBvbiBoZXIgZmFjZQpzb2xhcmlzZWQKYW4gYWVzdGhldGljIGZpZWxkIG9mIGZsb3dlcnMKb24gdGhlIGFmcmljYW4gcGxhaW5zCmRhcmsgbGluZXdvcmsKYmxhY2sgbW9vbnMKd2VhcmluZyBnYW1pbmcgaGVhZHNldApvbGQgc3R5bGUgcGhvdG8KbWVkaWNhbCBsaWdodGluZwphbiBhbGllbiBiYXR0bGUgaW4gc3BhY2UKYW4gYWxpZW4gZnJ1aXQKd29uZGVyaW5nIGFib3V0IG90aGVycwptdWNoIGRldGFpbGVkCmhlIGlzIGdyZWV0aW5nIHlvdSB3YXJtbHkKYW4gYWxpZW4gd29ya2luZyBvbiBhIGNvbXB1dGVyCmFuIGFsbCB3aGl0ZSBob3JzZQphbWF6ZSBhcnQKY2luZW1hdGljIGF0bW9zcGhlcmljIHBob3RvCnRvcCBzZWxlY3Rpb24gb24gdW5zcGxhc2gKbmlra29uCnJvY2NvCmFuIGFtYXppbmcgcGhvdG8KcG9sYXJvaWQgZmFzaGlvbiBwaG90b2dyYXBoeQprb2RhayBla3RhY2hyb21lIDEwMApkYXRhIGJlbmRpbmcKcGV0ZXIgbW9ocmJhY2hlciBoaWdobHkgZGV0YWlsZWQKc3UgZnUKYWxlcmlpYSBfIHYgKCBsZXJhcGkgKQphbiBhbmNpZW50IGNpdHkgb24gZmlyZQpibGFjayBhbmQgYnJvd24KMTkzMCBwaG90bwpnZW50bGUgYW1iaWVudCBsaWdodGluZwpicmlkZ2VzIGFuZCByYWlsaW5ncwptb3NzeSBvdmVyZ3Jvd3RoCmFuIGFuY2llbnQgZ3JlZWsgdmFzZQptdXNldW0gYXJjaGl2ZSBwaG90bwpqaW55b3VuZyBzaGluIGFydApqaW55b3VuZyBzaGluIGFlc3RoZXRpYwptb2ViaXVzIGFlc3RoZXRpYwpqYW1lcyBqZWFuIGFlc3RoZXRpYwp1bmRlcmdyb3VuZCBjYXZlcm4KcmVhbGlzdGljIMK7CmJhcnJvcXVlIGFybW9yCndlYXJpbmcgYSBnZW5lcmFsJ3MgdW5pZm9ybQoxIDkgMCAxCmFuIGFuaW1hdGlvbiBjZWwgb2YgZGFuYSBzY3VsbHkKZnJvbSdhbmltYXRpb24gdHlwZXMnCjE4NzEgcHVuY2ggbWFnYXppbmUgY2FydG9vbgpjb21taXNzaW9uIGZvciBoaWdoIHJlcwphbmltZSBwdmMgZmlndXJlCm9sZCBpbnRlcm5ldCBhcnQKc3BhbmlzaCBhbGxleXdheQpzZWV0aGluZwptYWdpYyBmb2cKd2VzdGVybiBjb21pYyBib29rIHN0eWxlCmZ1cnN1aXQhISEhCm92ZXIgaXQncyBoZWFkCnBhbmRhIHBhbmRhIHBhbmRhCm1lZGlldmFsIGNsb3RoaW5nCmJhdHRsaW5nIGRlbW9ucwp3YWxraW5nIGRvd24gYSBzdHJlZXQKZnVycnkgd29sZgpmdXJhZmZpbml0eSEhISEKaW4gaG9uZyBrb25nCmFuIGFwcGxlIGRvaW5nIGNyb3NzZml0CmFuIGFwcHJvYWNoaW5nIHNoYWRvdwptb29uIGFuZCBzdGFycyBpbiBuaWdodCBza3kKZGVlcCBibHVlIHdhdGVyCmR3ZWxsCmJvb3N0ZXIKdmVyeSBzbW9reQpzbm93IGZpZWxkCmNvcnBzZXMgY29tZSB0byBsaWZlCmNvc21pYyBzdHlsZQpzaGF0dGVyZWQgYWJzdHJhY3Rpb25zCmluIGRlc3BhaXIKaW4gZnJvbnQgb2YgYSByb3VuZApjb21wbGV4IHJvdGFyeSBhaXJwbGFuZSBlbmdpbmUKY2hhcmxlcyBkdWxhYy4gdmVyeSBsYXJnZQpzY2kgLSBmaSBhcnR3b3JrCnJlZmluZWQgZmVhdHVyZXMKZm9ybWFsIHdlYXIKeW91bmcgamVubmlmZXIgY29ubmVsbHkKZ2FtZSB1aQpyYWt1ClsgZXZlcnl0aGluZyBpcyBmbG9hdGluZyBdISEhCmdyZWF0bHkgZGV0YWlsZWQKWyBmbG9hdGluZyBdISEKY2FzaCBvbiBhIHNpZGV0YWJsZQpqYyBsZXllbmRlY2tlciEhIHBoaWwgaGFsZSEKY2xvdGhlZCEKcGFydGlhbGx5IGh1bWFuCnNoZSBpcyB0aGUgcXVlZW4gb2YgYmxhY2sgcm9zZXMKb24gYSBmYXJtCndpdGggYW4gaXYgZHJpcAplbnZpcm9tZW50YWwgcG9ydHJhaXQKZXZlbmluZyEhIGluIHRoZSBmb3Jlc3QKZnVsbCBvZiBnbGFzcy4gY2dzb2NpZXR5CmFuIGF4ZSBlbGVtZW50YWwKcm9ib3QgY2F0CmRldGFpbGVkIHN0cnVjdHVyZXMKY2xvdWQgcGFsYWNlCmF0IG5pZ2h0dGltZQpzdW5mbG93ZXIgZmllbGQKc211ZGdlZAppbmsgYW5kIGJhbGxwb2ludAppbiBhIG5lc3QKY2hhbWJlcnMKc2xlZWsgaGFuZHMKaXJvbiB0aHJvbmUKb3Zlcmdyb3duIHdpdGggc2hpbnkgYmxvYnMKaGlzIHRydW5rIGlzIGEgbG9uZyB0ZW50YWNsZQphbiBlbGYgaW4gYSBzdWl0CmFuIGVsZiBxdWVlbgoyIDAgMiAxCndoaXRlIGh1ZQphbiBlbXB0eSBvZmZpY2UgaGFsbHdheQptYW4gd2l0aCBhIGJsdWUgaGVhcnQKbWVkaXVtIGZyYW1lCm1hbnkgcGFydHMKaCA3IDAgNApwYWludGVkIHdpdGggYSB0aGljayBicnVzaApmcmVlbWFzb24gc3ltYm9sCmNsaWZmIHNpZGUKb3Zlcmdyb3duIHdpdGggZXhvdGljIGZ1bmd1cwpvdmVyZ3Jvd24gd2l0aCBodWdlIGZlcm5zCmJlcnJpZXMgaW5zaWRlIHN0cnVjdHVyZQpzdXJnZXJ5IHRoZWF0cmUKYmxvb2Qgc3BhdHRlcgpzdHlsZSBvZiBjaGlwcHkKcHRlcm9zYXVycyBmbHlpbmcKYW4gZXBpYyBhbmltZSBvZiBhIGVuZXJneSBtYW4KZXh0cmVtZWx5IGRldGFpbGVkIGJydXNoCmRldGFpbGVkIDhrIGhkCnNtaWxpbmcgbGlrZSBhIGplcmsKbWFyaWh1YW5hCm9yYW5nZSBmbG93ZXJzCndhcmhhbW1lciA0IDAgayBhcnR3b3JrCm1lbHRpbmcgaW50byBqb2x0ZW9uCnN1YmplY3QgbWFkZSBvZiB3aGl0ZSBtZXNoIHJvcGUKaG9sZGluZyBhIGJpZyBjYW1lcmEKZmV3IHVsdHJhbWFyaW5lIGhpZ2hsaWdodHMKdGF1cGUKYW4gZXBpYyBwYWludGluZyBvZiBhbiBhcnRpc3QKYnJ1dGFsaXN0IGludGVybmF0aW9uYWwgZnV0dXJpc3QKYW4gZXBpYyBzcGFjZSBiYXR0bGUKZGFyayBuYXR1cmUgYmFja2dyb3VuZApuaXNhY2hhciBhcnQKbWF0ZW8gZGluZWVuCmguIHAgbG92ZWNyYWZ0CmJpbyAtIGNoZW1pY2FsCnByb3BvcnRpb25hbGx5IGVub3Jtb3VzIGFybXMKamNiCmFuIGV4aGF1c3RlZCBkZWl0eQpwdXJwbGUgYW5kIGJsdWUgY29sb3VyIHBhbGV0dGUKamFtZXMgcGlhY2sKdHJvcGljYWwgZmxvd2VyIHBsYW50cwphdXRob3IKYW4gZXh0cmVtZWx5IGFuZ3J5CmN5YmVycHVuayBmYXNoaW9uIGNsb3RoZXMKdWx0aW1hdGUgZmlnaHRpbmcgY2hhbXBpb25zaGlwCmhvbGRpbmcgaGlzIHRyaWRlbnQKbW9vbiBpbiBoaXMgY3Jvd24KcHJlYWNoaW5nIGluIGEgZmFudGFzeSBjaXR5CnJveWFsIHBob3RvCmxpcXVpZCBnbGFzcwpoaWdobHkgcG9saXNoZWQKc3Rlcm9pZCB1c2UKb24gdGhlIGZyb3plbiBkYW51YmUKYW4gZ2lhbnQgZXZpbApnb2Qgc3R5bGUKdWx0cmEgLSBoaWdoIGRldGFpbHMKbmlmbGhlaW0KYXQgZnVsbCBzdHJpZGUKcHVycGxlIC0gdGludGVkCmJlYXV0aWZ1bCBpbnRyaWNhdGVseSBkZXRhaWxlZApkZXRhaWxlZCBnYW1lIGFydApkeXN0b3BpYW4gYmFkIHZpYmVzCmFuIGltbWVuc2UgZmxvYXRpbmcgY2FzdGxlCnJlbm5haXNzYW5jZSBwYWludGluZwphYnN0cmFjdCBjb25jZXB0dWFsCmV4dHJlbWVseSBjcmVhdGl2ZQpvaWwgcmlnCnNoYXBlIG9mIGEgY2lyY2xlCnBpbmsgYW5kIGdyZWVuIGNvbG91ciBwYWxldHRlCmV4dHJlbWVseSBkZXRhaWxlZCB3YXRlciB0ZXh0dXJlCnNoZSBoYXMgYSBjdXRlIGZhY2UKdGhlIG5pZ2h0IHdhciByYWdlcyBiZWhpbmQgaGltCmluY2VwdGlvbiBjb25jZXB0CmRpdmluZSBsaWdodApzbW9vdGggemVuaXRoYWwgbGlnaHRpbmcKd2lyZXMgYW5kIGNhYmxlcyBjb21pbmcgb3V0CmRldGFpbGVkIGZhY2Ugb2YgYSBhc2lhbiBib3kKZGV0YWlsZWQgZmFjZSBvZiBhIGFzaWFuIGdpcmwKdGVjaG5vIGdhcmdveWxlcwplbnR3aW5lZCBib2RpZXMKdHJlbmRpbmcgYXJ0c3RheWlvbgphbiBpcm9uIG1hbiBjb25jZXB0IHlhY2h0Cm1vcmFuZGkgY29sb3VyIHNjaGVtZQpwaG90byB0YWtlbiBmcm9tIGEgYm9hdApyZWQgY2F2aWFyIGluc3RlYWQgb2Ygc2FuZAp0YXBlCnNvbWUgb2FrIGFjb3JucwpsaWdodCB3aGl0ZSBiYWNrZ3JvdW5kCmV2aWwgYWxidW0gY292ZXIKZmx1b3Jlc2NlbnQgbGlnaHRzIGZyb20gY2VpbGluZwo4ayBtYXRlIHBhaW50aW5nCnNtb2tpbmcgYSB0aGljayBjaWdhcgpyb2JlcnQgY3J1bWIgc3R5bGUKc2hvdCBvbiA3MCBtbQpsZWFuaW5nIGFnYWluc3QgdGhlIHdhbGwKY29taW5nIG91dCBvZiB0aGUgb2NlYW4KYXdhcmQgLSB3aW5uaW5nIHBlbmNpbCBkcmF3aW5nCmxhY2VkIGxpbmdlcmllCmZvbGRlZCBhcm1zCmV0aGVyZWFsISEhIHVsdHJhIHJlYWxpc3RpYwpzb21ld2hhdCBiZW50IG92ZXIKYmVhcmluZyBhIGxhcmdlIG1hZCBncmluCmp1bGlhbiBmYWxhdApzdW5iZWFtcy4gZGlnaXRhbCBpbGx1c3RyYXRpb24KZm9nZ3kgd2VhdGhlciBhdG1vc3BoZXJlCmFuIG9sZCBtYW4KbG92ZWNyYXRpYW4KZGFyayBhbmQgYmVpZ2UgYXRtb3NwaGVyZQpzdGFyc2hpcCBpbiBiYWNrZ3JvdW5kCmZvb2QgcGhvdG9ncmFwaHkgNCBrCmFuIG9yYW5nZQphbiBvcmd5IG9mIGNvbG9yZnVsCnRydXN0d29ydGh5CnZhcmlvdXMgYW5pbWFscwp0d2lzdGVkIGdvZCB3aXRoIG5vIGZhY2UKaW50cmljYXRlIHRhcGVzdHJ5CmRlcHJlc3NlZCBtb29kCmRvd250b3duIGluIHRoZSBkaXN0YW5jZQpoaWdobHkgZGV0YWlsZWQgZmFjZSEKZmFudGFzeSBjaGFyYWN0ZXIgZGVzaWduCmh5cGVycmVhbGlzbSBwaG90b2dyYXBoeQphbiBzY3AgYW5vbWFsb3VzIG9iamVjdAprZXRlciBjbGFzcwphbiB1Z2x5IGdpYW50IHNwaWRlcgpzaG9uZW4gYW5pbWUKZ2FzbGlnaHQgZmFudGFzeSBjYXBpdGFsIGNpdHkKYmF0dGxlbWVudHMgd2l0aCBzb2xkaWVycwpwb3BzIG9mIHRyaWFkaWMgY29sb3JzCmRhcmsgZm9yZXN0cyBzdXJyb3VuZGluZwpvZiBhbiBjeWJlciBnb2RzCmJhY2tncm91bmQgb2YgYSBsYXZhIHJpdmVyCndpdGggcmFpbiBhbmQgbGlnaHRuaW5nCnNjaSAtIGZpIGFybW9yCmJyYW5jaGVzIHdyYXBwZWQKdHJhbnNsdWNlbnQgYW5kIHNsaW15IGZsZXNoCmZpb25hIHN0YXBsZXMgYW5kIG1ha290byBzaGlua2FpCndlYXJpbmcgcGluayBmbG9yYWwgZ293bgpjYXN0aW5nIG5hdHVyZSBtYWdpYwpob2xkaW5nIGEgZ29hdCBoZWFkIHN0YWZmCmFuIHVuZGVyd2F0ZXIgYWxpZW4gb2NlYW4KZmlsbGVkIHdpdGggYmlvbHVtaW5lc2NlbmNlCnR3aXJsaW5nIGdsb3dpbmcgc2VhIHBsYW50cwphIG15c3RpY2FsIG1pc3R5IGdsb3cKY29taWMgYXJ0d29yawp1bnRvdWNoYWJsZQpwaGFudG9tIGdob3N0cyBpbiB0aGUgYmFja2dyb3VuZApwaG90b3Nob290IHBvcnRyYWl0CmJyaWFuIHB1bGlkbwpzYW5kIGJhbmtzCmFuYWdseXBoIGVmZmVjdCBheWFtaSBrb2ppbWEKYmV0dGVyIGNhbGwgc2F1bCBzY2VuZSAxIDAgOCAwIHAKZnJvbSBzdGFyIHdhcnMgbGVnZW5kcwpwaW5rIHllbGxvdyBhbmQgYmx1ZSBuZW9uIHNpZ25zCm11bHRpcGxlIHN0YXJzIHZpc2libGUKZGVlcCBibGFjayBza3kKaGVhdnkgcmFpbmZhbGwKc2xpZ2h0IGxlbnMgZ2xhcmUKc3RhbmRpbmcgaW4gYSBwb29sIG9mIGJsb29kCmF6dXJlIHNreSB0b25lcwo3MHMgY29sb3JzCm1lc2ggc3RydWN0dXJlCnBob3RvZ3JhcGhlZCBmcm9tIGJlaGluZAphcnRodXIgcmFja2hhbSBhbmQgdGVycnkgbW9vcmUKaW5rIHBhaW50CmFsYW4gZ3JleQpjYXN0bGUgb24gdGhlIGJhY2tncm91bmQKZmllbmRpc2gKcmVhbCBoZWFydApib25zYWkgYW5hdG9teSBhdGxhcwprZW4gY3VycmllCnN0cmFuZ2UgY3Jvd24gKQpmbGF3bGVzcyBiZWF1dHkKaGlnaHJlYWxpc20KYW5jaWVudCBhbGllbiBqdW5nbGUKbGFzdCBsaWdodApoaWdoIC0gcmVsaWVmIHNjdWxwdHVyZSBzY2VuZQpzY3JhdGhlcwplbGFib3JhdGUgbGF0dGljZWQgYmFsY29uaWVzCmFuY2llbnQgY2hpbmVzZSBnb2RkZXNzCmFuY2llbnQgY2l0eSBvZiB3aGl0ZSBzdG9uZQpidXN5IHBlb3BsZQpjaXR5IGRvY2tzCmFuY2llbnQgY29mZmVlIG1hY2hpbmUKc2NpIGZpIGFydHdvcmsKZGFyayBjb3JyaWRvcnMKYW5jaWVudCBlbGRyaXRjaCBob3Jyb3IgY3RodWxodQpvbiBvbGQgcGFyY2htZW50IHBhcGVyCmZhZXJpZXMKZGFuaWVsIG1lcnJpYW4gOjogb3JuYXRlCmFuY2llbnQgZ29kZGVzcwphbmNpZW50IGdvZHMKcGxheWluZyBiYXNrZXRiYWxsCmRpcnR5IG9sZCBncmV5IHN0b25lCnZpbmVzIGFuZCBibHVlIGZvbGlhZ2UKZmxvYXRpbmcgcGxhbmV0cyBhbmQgbW9vbnMKc2hhZnRzIG9mIGxpZ2h0aW5nCnJvbWFuZXNxdWUgc3R5bGUgc3RhdHVlCmRpbm9zYXVyIHdvb2RlbiBzdGF0dWUKei4gYmVrc2luc2tpCnRleHR1cmUgZGV0YWlscwpza3VsbGVkIGNyZWF0dXJlIHdpdGggYmxhY2sgZnVyCmFuY2llbnQgbWFqZXN0aWMKaHVtYW5vaWQgY3JlYXR1cmUKYW5jaWVudCBtYXJibGUgY2l0eQpkaXJ0eSBvbGQgZ29sZGVuIG1ldGFsCmFuY2llbnQgbW9uZ29saWFuIGVsb24gbXVzawphbmNpZW50IG9hayBmb3Jlc3QKd2FyaGFtbWVyIGZhbnRhc3kgc2V0dGluZwphbmNpZW50IHB5cmFtaWQKaGkgZGVmaW5pdGlvbgp1Zm9zIGluIHRoZSBza3kKY3Jvd2RlZCBzdHJlZXQKbWlkbmlnaHQgY29sb3IgcGFsZXR0ZQpydXRrb3dza2kgYW5kIGNhcmF2YWdnaW8Kc2NpIC0gZmkhISEKYW5jaWVudCBzcGFjZSBzaGlwCmJ1c3kgd2l0aCBwZW9wbGUKaXQncyBjYWxpZm9ybmljYXRpb24KYXQgbGFzdAptci4gcm9ib3RvCmZhbnRhc3kgcGhvdG9ncmFwaHkKdmlzdWFsIGFydCBzdHlsZQpzdWJtZXJnZWQgdW5kZXJ3YXRlcgpsaW1pbmFsIHNwYWNlIHBob3RvZ3JhcGh5CnZpYnJhbnQgYW5kIHN0eWxpemVkCmtvbmFtaSBjb25jZXB0IGFydApnbGFzcyBmbG93ZXJzCnN0eWxlIG9mIG1hbmdhCmFuZHkgbWlsb25ha2lzCm5vIGR1cGxpY2F0ZSBjb250ZW50CnJ1c3NpYW4gb2lsIHBhaW50aW5nCmFuZ2VsIGRvaW5nIHlvZ2EgaW4gdGVtcGxlCnJlbm5haXNzYW5jZSBzdHlsZSBwYWludGluZwpwYXN0ZWwgY3V0ZSBzbGltZQp3ZWxsIGJ1aWx0CnJhbmRvbSBzdHlsZQpoZHIhCmluIHRoZSBtYXRyaXgKYWlyYnJ1c2ggY29uY2VwdCBhcnQKZ2lnCmFuZ2VsaGVhZGVkIGhpcHN0ZXJzCmhhbG8gb2YgZmlyZQpib2R5IG9mIHB1cmUgZmlyZQpkZXNjZW5kaW5nIGZyb20gdGhlIGhlYXZlbnMKc3R5bGUgb2YgZGFuaWVsIG1lcnJpYW0Kc3VwZXIgd2lkZSBhbmdlbAp0aGljayB0aGljayB0aGljayBvdXRsaW5lcwphbmdlbGljIHB1cml0eQo4IGsgc3VwZXIgcmVzb2x1dGlvbgp3ZXRicnVzaGVzCnBob3RvIDEgOSA5IDAgcwptaWxvIG1hbmFyYSAtIGggMSAyIDAgMAphc3VyYXMKZXRoZXJlYWwgcmFpbmJvdyBuaW1idXMKY29sb3VyZWQgbWFuZ2Egc2NhbgpjYW1wZmlyZSBpbiBiYWNrZ3JvdW5kCmRldGFpbGVkIGZhY2Ugd2l0aCByZWQgbGlwcwpibG9vZCBhdXJhIHJlZCBsaWdodAphbmdyeSBiYXRtYW4KZ3JlZW4gc2NhcnkgbGlnaHRzCmFsZXggcm9zcyBzdHlsZQphbmdyeSBhdCBtaXJyb3IKY3lhbiBhbmQgZ29sZCBzY2hlbWUKa2VtZXRpYyBzeW1ib2xpc20Kd2l0aCBjbG90aGVzZQpibGFjayBhbmQgZ29sZCBwYWxldHRlCmZhbW91cyBjaGVmIGdvcmRvbiByYW1zZXkKdmFjdXVtIHR1YmUtcHVuawphbmdyeSBzYXNxdWF0Y2gKbW92ZW1lbnQgZWZmZWN0cwptYW51ZWwgc2FuanVsaWFuYmx1ZQpnb2xkIGNvbG9yIHNjaGVtZQpzdWJzdXJmYWNlIGxpZ2h0IHRyYW5zbWlzc2lvbgpjcm9wIGNpcmNsZXMKZ290aGljIGNhc3RsZSBpbiB0aGUgYmFja2dyb3VuZApibHVycnkgYmFja2dyb3VuZCBvZiB0aGUgbGlicmFyeQphbmltYXRyb25pYyBqb2huIGMuIHJlaWxseQpiZWhpbmQgdGhlIHNjZW5lcyBwaG90bwphbmltZSAzIGQgYXJ0Cndsb3AgYXJ0CnJlZCBjb2xvdXIgcGFsZXR0ZQp3ZWFyaW5nIGRlc2VydCBwb25jaG8KZGVzZXJ0ZWQgcGxhbmV0CmJsb25kZSBicmFpZHMgYW5kIGJsdWUgZXllcwpsb25nIGJsb25kZSBoYWlyIGFuZCBsYXJnZSBleWVzCnBsYWlkIHRpZ2h0cwpyYXNwYmVycnkgYmFuYW5hIGNvbG9yCm51cnNlIGNvc3R1bWUKYW5pbWUgYmFyYmllIGluIHdoaXRlCmFuaW1lIGxpZ2h0aW5nCm1vdGVzIG9mIGxpZ2h0CndhdGVyeSByZWQgZXllcwplbnRlcnRhaW5tZW50IGRpc3RyaWN0CmxpbmVzIG9mIGxpZ2h0cwpzcGlreSBvcmFuZ2UgaGFpcgpibHVlIGphY2tldAphbmltZSBjYXQKZ2xvd2luZyB0aW55IGJsdWUgbGluZXMKYW5pbWUgY2F0Z2lybApsZWF2aW5nIGEgcm9vbQphbmltZSBjaGFyYWN0ZXIgcG9ydHJhaXQKZnJvbSB0aGUgdHVzayBtb3ZpZQpwaG9uZSB3YWxscGFwZXIuIGludHJpY2F0ZQphbmltZSBjb3VudHJ5c2lkZSBsYW5kc2NhcGUKb3JhbmdlIGJyYWlkZWQgaGFpcgpkYXJrIGxpZ2h0IG5pZ2h0IGxpa2UgZXllcwplbWVyYWxkIGhlcmFsZApwc3ljaG90cm9waWMgcHN5Y2hlZGVsaWMKZ2VsYm9vcnUgYW5pbWUgaW1hZ2UKYmVzdCBhbmltZSA0ayBrb25hY2hhbiB3YWxscGFwZXIKcGluIG9uIGFuaW1lCnlhbmQucmUKYWxpZW5zIHZpdmlkCm5hdHVyZSB0cmVlcwpzeW50aGV3YXZlCnNwZWVkIGdyYXBoZXIKYmVuY2gKZ2l0cyBhbmltZQpsb2NhbCBjb25zcGlyb2xvZ2lzdAp1a3JhaW5pYW4gbW9uawpsZWZ0IHRyYWQKb3Rha3UKeTJrIGRlc2lnbgpib29naWVwb3AgcGhhbnRvbQphbmltZSBnaXJsIGluIGEgbWFpZCBjb3N0dW1lCmFuaW1lIGdpcmwgaW4gYXNjaWkgYXJ0IHN0eWxlCnRlcm1pbmFsIHRleHQKeXUgLSBubwphbmltZSBnaXJsIHBvcnRyYWl0IHByb2ZpbGUKYW5pbWUgZ2lybCBwb3J0cmFpdApqdW5qaSBpdG8gYW5kIGhvcml5b3NoaSBpaWkKcmVuZGVyaHViCnllbGxvdyByYWluY29hdAphbmltZSBnaXJsIHdpdGggYSBib3cgYW5kIGFycm93Cmxvbmcgc3Bpa3kgcGluayBoYWlyCmJsYWNrIHQtc2hpcnQKcGluayBoZWFkYmFuZApibGFjayBjcm93bgpob3VyZ2xhc3Mgc2xpbSBib2R5CmNoaWxkcmVuIGJvcm4gYXMgZ2hvc3RzCmxvbmRvbiBjZW1ldGVyeQpob2xvIGlmIGEgd29sZiBnaXJsCmJsdWUgcGFpbnQgc3BsYXNoCmRyaW5raW5nIGEgYmVlciBhdCB0cmFpbiBzdGF0aW9uCnJlbGF4aW5nIG9uIGEgeWFjaHQgYXQgc2VhCm9uIGEgeWFjaHQgYXQgc2VhCnJlbGF4aW5nIGFuZCBzbWlsaW5nIGF0IGNhbWVyYQpzaWx2ZXIgc3BvcnRzIHdhdGNoCmludGVybmV0IGFydApkcmFtYXRpYyBsaWdodCA4IDAgbW0gY2FtZXJhCnRyZW5jaGVzIGJvbWJzCnNob25lbiBzdHlsZQpob2xkaW5nIGEgY2FuIG9mIGJlZXIKd2llbGRpbmcgdHdvIGRhZ2dlcnMKZGFyayB0cmFpbiB0dW5uZWwgZW50cmFuY2UKZ2lhbnQgc3BpZGVyIGZvcmVncm91bmQKb3ZlcnBhc3MKZGVzZXJ0ISEhISEhISEhISEKYW5pbWUgcGVyaXBoZXJhbAp3ZWFyaW5nIGdyZWVuIGphY2tldAphbmltZSBwb3J0cmFpdCBvZiBhIGhhbmRzb21lIG1hbgp3ZWFyaW5nIHR3byAtIHBpZWNlIHN3aW1zdWl0CmVsIGNoYXZvCmJsYWNrIHlvdW5nIHdvbWFuCnB1cnBsZSBjb2xvcmVkIGV5ZXMhISEhCnN0dWRpbyBnaGlibGkhISEhCmFuaW1lIHN0eWxlIGFydHdvcmsKaGlnaCBkZXRhaWwgYW5kIHZlcnkgc2hhcnAKcmVhbGlzdGljIHJhY2tldHMKcGFub3JhbWljIGNlbnRlcmVkIHZpZXcgb2YgZ2lybApzYWlsb3IgY2xvdGhpbmcKc3VtbWVyIGZlc3RpdmFsIGluIGJhY2tncm91bmQKc2lkZSBwb3J0cmFpdCBvZiBhIGdpcmwgd2Fsa2luZwphZG9uaXMgYmVsdAphbmltZSB2aXN1YWwgb2YgYSBjdXRlIGNhdApmaW5lbHkgZGV0YWlsZWQgZmFjZSBmZWF0dXJlcwphbmltZSB2aXN1YWwgb2YgYSB5b3VuZyB3b21hbgptYXR0ZSBjb2xvcgpkaWdpdGFsIGNoYXJhY3RlcgpndW4gZmlnaHQKYm9vdHkgc2hvcnRzCnJpcHBlZCBwYW50eWhvc2UKZmlyZWZsaWVzISEhIQpuaWdodCBvdXRkb29ycwpwb3AgY29sb3JzCmFuaW1vcnBocyBib29rIGNvdmVyCmRldGFpbGVkIGxhY2UgZHJlc3MKdHJhaW4gd2luZG93CmJlYXV0aWZ1bCByZWFsaXN0aWMgdXBwZXIgYm9keQpoZWdyZQpvd2VuIGdlbnQKd2VhcmluZyB5ZWxsb3cgY3JvcHRvcAphbnQgZmFybSBzaW11bGF0b3IKYW50IGh1bWFub2lkCmxvb2tvdXQgdG93ZXIKYW50IHBvdiBmcm9tIHRoZSBmbG9vcgphbnQgcG92CndhdGVyLWNvb2xlZApoeWRyYXVsaWMgZmVhdHVyZXMKNTYwMHggYWNjZWxlcmF0b3IKaHlwZXJ0aHJlYWRpbmcKZnJvbnQgcGFnZSBvZiBhcnQgc3RhdGlvbgpkZXNlcnQgbm9tYWQKc2lkZSBwcm9maWxlIHNob3QKZmFudGFzeSBiYXR0bGVncm91bmQKZmluYWwgZmFudGFzeSB0YWN0aWNzCmhvbGRpbmcgYSBnaWFudCB3ZWFwb24KZmxhc2tzCmhvbGRpbmcgYSB0aGljayBzdGFmZgpsb29zZSBwYXBlcnMKOCAwIHMgY2FydG9vbgpncmVlbiBmdXIKY3JpdGljYWwgbW9tZW50IHBob3RvZ3JhcGgKMSA5IDMgMCBzIGZpbG0gc3RpbGwKdHdvIGRpZmZlcmVudCBjaGFyYWN0ZXJzCmFudGhyb3BvbW9ycGhpYyBnYW5nc3RlciByYXQKZmxvd2VyIGZpZWxkcwpwcm90ZXN0IG1vdmVtZW50CmFudGhyb3BvbW9ycGhpYyBseW54Cm1hc2N1bGluZSBhbmQgc3Ryb25nCmp1YW5qbyBndWFybmlkCmluIGEgY2x1dHRlcmVkIGxhYgpsb3RzIG9mIGJlYWtlcnMKYW50aHJvcG9tb3JwaGljIHByYXlpbmcgbWFudGlzCmFudGhyb3BvbW9ycGhpYyByYWNvb24KcHN5Y2hlZGVsaWMgYXJ0d29yawpsYXJnZSBzaGVsbApnbG93aW5nIGRhcmsgYXVyYQpoYXlhbyBtaXlhemFrCmRldGFpbGVkIGJyb256ZSBhcm1vcgpncmVlbiBhbmQgYmxhY2sgY29sb3JzCnRoZWZ0CmJsYWNrIGhvbGUgZXZlbnQgaG9yaXpvbgp0aGUgZ29kZGVzcyBvZiBmZXJ0aWxpdHkKc29mdCB3aW5kb3cgbGlnaHQKY3J5c3RhbGwKc3Vuc2V0IHdpdGggY2xvdWR5IHNraWVzCmluIGEgZGlmZmVyZW50IHJlYWxtCmFueWEgZnJvbSBzcHkgeCBmYW1pbHkKZG90YSAyIGdhbWUgc2NyZWVuc2hvdAp3ZWFyaW5nIGh1Z2Ugc3RyYXcgaGF0CmJsYWNrIG1ldGFsIGZhY2UgcGFpbnQKbXVrYmFuZwphcGFydG1lbnQgYnVpbGRpbmcgb24gdGhlIG1vb24KdWx0cmEgcmVhbHN0aWMKZnJvZyB0aGVtZWQKYXBlcnR1cmUgc2NpZW5jZSB0ZXN0IGNoYW1iZXIKcG9ydGFsIDIgZ2FtZQpib25lIGFybW9yCnN0eWxlIG9mIGxhdXJhIHNhdmEKZXBpYyBjb21wb3NpdGlvbiAzNW1tCmFwb2NhbHlwc2Ugbm93IGZpbG0gc3RpbGwKcmVmdWdlZXMKbW9zcXVlIHN5bmFnb2d1ZSBpbnRlcmlvcgphcHBsZSAtIHN0b3JlCjIgMCAyIDMgc2VuaW9yIGdyYWR1YXRpb24gc2hpcnQKY2xlYW4gZ3JhcGhpYyBkZXNpZ24KdmlicmFudCBkaWdpdGFsIHBhaW50aW5nCnBhc3RlbCBncmFkaWVudHMKbW9kZXJuIGRldGFpbHMKdGVuZGluZyBvbiBhcnQgc3RhdGlvbgpzd2VkaXNoIGhvdXNlCm9yYW5nZSBza2luLiBpbnRyaWNhdGUKY2xlYXIgZ3JlZW4gZXllcwphcmFiaWFuIGNhbGxpZ3JhcGh5CmFyYWJpYW4gYXJ0CmR5bmFtaWMgc3RyZXRjaGluZwpjYW52YQphcmFzYWthIG1lY2gKcmVkIGFuZCBibHVlIG5lb24KZnVubnkganVtYmxlZCBsZXR0ZXJzCm1hcmMgc2ltb25ldHRpIGFuZCBqZWZmcmV5IHNtaXRoCmFyY2FuZSA6IGxlYWd1ZSBvZiBsZWdlbmRzCmJsYXN0IG9mIG15c3RpY2FsIGVuZXJneQptYW5hIGluIHRoZSBhaXIKY2hhbm5lbGluZyBteXN0aWNhbCBlbmVyZ3kKcm9vdCB0cmFwCmdyZW5hZGUKYm9vbQpzY3JlYW1pbmcgZmFjZQppbnNhbmUgYWN0aW9uIHBvc2UKYXJjaGVyIGJveQppc2xhbmRzISEhISEKd2FybSBpbnRlcmlvcgpzaW5nbGUgZmxvb3IKY2FsbSBzZXJlbmUgcmVsYXhlZApzbWFsbCBkb2NrCmNyb3dkIG9mIGNvb2wgcGVvcGxlIGRhbmNpbmcKMSAwIDAgMCBtbQpkYXkgLSB0aW1lCmFsYWJhc3RlciBnb3RoaWMgY2F0aGVkcmFsCmdyYWZpdHRpIHBhaW50CngtcmF5IHBob3RvZ3JhcGh5CmJlYXV0aWZ1bGx5IGJyaWdodCB3aGl0ZQpjYW5vcGllcwpwb3N0YXBvIGdhbWUKZ3JhYmFkbwpob2xkaW5nIG1hZ2ljYWwga2l0Y2hlbiBrbml2ZXMKYXJpYW5hIGdyYW5kZSBwb3J0cmFpdCBwYWludGluZwphcmlkIHBsYW5ldApzY29ybmZ1bApkaXNkYWluZnVsCjEgOCA4IDIKYmVlcyBmbHlpbmcKaW4gcm93cwpzdGFja2VkIGJ1aWxkaW5ncwpsaW5lZCB1cCBob3Jpem9udGFsbHkKdGFsbCBidWlsZGluZ3MgaW4gYmFja2dyb3VuZAp0YXR0bwpjZXNlZGUKYWJiZXlzCnVucmVhbGVuZ2luZSA0CnR3aWxpZ2h0IDsgZGlnaXRhbCBvaWwgcGFpbnRpbmcKbG90cyBvZiB3ZWFwb24KYXJtb3JlZCBkdWNrCmZ1bGwgYm9keSBwb3NpbmcKYXJtb3JlZCB3YXJyaW9yCmp1bmdsZSBjbGVhcmluZwpjcm93cyBmZWV0CnNtYWxsIGxlZ3MKYW4gb2lsIHBhaXRpbmcgb2YgYSBzcGFycm93CmV4dHJlYW1seSByZWFsaXN0aWMKcGh5c2ljYWwgb2N0YW5lIHJlbmRlcgpjaW5lbWF0aWMgbmVvbiBoaWdobGlnaHRzCnJvYm90IHB1bmsgZnV0dXJpc3RlIGdlb21ldHJpZQppbGx1c3RhcnRpb24KcGFzdGVscyBjb2xvcnMKc3RhY2tlZCBjaXR5CmFydCBmb3IgdGhlIGZvb2wgdGFyb3QgY2FyZAp0d2lkZGxlIGEgdHdvZGRsZQpnbGlzdGVuaW5nIHNlYWZvYW0KZ29kZGVzcyBvZiBhdXR1bW4KbG9uZyBmbG93aW5nIGRhcmsgaGFpcgptaXJhY3Vsb3VzIGxhZHlidWcKd2FyY3JhZnQgMyBnYW1lcGxheQppbnNpZGUgYSBzbm93IGdsb2JlCmJsYWNrIGFuZCB3aGl0ZSBjbG90aGVzCm5lb24gZ2VvbWV0cmljIGlua3MKaGFuZCBob2xkaW5nIGNhcCBicmltCmRyYW1hdGljIGdvbGRlbiBsaWdodAphcnQgcGllY2UgZnJhbWUKYXJ0IHBvcnRyYWl0IG9mIGEgc3BhY2UgbWFyaW5lCmdhdWNoZSBwYWludGluZwpwcmlzbSB1bmRlcnRvbmVzCnBob3RvcmVhbGlzdGljIGNvbnRlbnQKd2hpdGUgYXJvdW5kIHJpZ2h0IGV5ZQpwc3ljaGVkZWxpYyBsYXVnaGluZyBkZW1vbgpidWlsZGluZ3MgcGhvdG9yZWFsaXNtCmFydGh1ciBtb3JnYW4KbGVkIGxpZ2h0IGFjY2VudHMKdHJpcGxlIHdoaXRlIGNvbG9yd2F5CmVwaWMgZmFudGFzeSBjeWJlcnB1bmsKYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UgbG9nbwomIGFsbCB0aGUgd29ybGQgYXJvdW5kIHlvdQpoZSBpcyBhbiBhcnRpc3QKYXJ0aXN0aWMgZHJhd2luZyBvZiBhIGNyb3cKd2VhcmluZyBjeWxpbmRlciBoYXQKYnJpZ2h0IHZpdmlkIGNvbG9yIGh1ZXM6MQpicm93bjotMgpob3Jyb3IgbW92aWVzCmhpa2tpa29tb3JpCnJpcHBlZCB1cCBmaWVsZCBmYXRpZ3VlcwpmYW50YXN5IHNjaWVuY2UKc3RyYW5nZSBzaGFwZXMKYm95IGhhaXIKZnV0dXJpc21hCjUgdGggZWxlbWVudApzYW50aWFnbyBydXNpbm9sCm1hcmlhIGZvcnR1bnkKYmFyIGluIGJhY2tncm91bmQKZmxvcmVhbAp0cmVuZGluZyBvbiBlIDYgMiAxCmFydHdvcmsgb2YgYSBidWlsZGluZwpzdGljayBhbmQgcG9rZQpwbGFudCBzcGVjaW1lbnMKYXJ0d29yayBvZiBhIGhvbmcga29uZyBzdHJlZXQKYmxhZGUgcnVubmVyIDIwNDkgc3R5bGUKZXh0cmVtZWx5IGRldGFpbGVkIGxpbmV3b3JrCm5pbmphIGNhdApib2R5IHN5bW1ldHJpY2FsIGFuYXRvbXkKMSA2IHllYXJzIG9sZApiZWZvcmUgeW91IGtub3cgaXQKYXNhcm90b3Mgb2lrbwpzdGFyayBjb2xvdXJzCmFzaGVzIHRvIGFzaGVzCnBvbGVhcm0gZ2xhaXZlCmFzaWFuIGRyYWdvbiBhcyBsYXR0ZSBhcnQKc2xhdmljIHN0eWxlCmNvbnRyYXN0IGxpZ2h0bmluZwpmaW5lIHN3aXJsaW5nIGxpbmVzCndlYXJpbmcgYnVzaW5lc3MgY2FzdWFsIGRyZXNzCmluZGlhbiBwYXR0ZXJucwpnb2xkZW4gamV3ZWxyeSBmaWxpZ3JlZQphc2lhbiBodW1hbgp0ZWVuIG1hZ2F6aW5lIGNvdmVyCmFzaWFuIG55bXBoIGJhbGQgZ29kZGVzcwpzdW5kcmVzcwpjYW1lcmEgbG93CndlYXJpbmcgdHJhbnNwYXJlbnQgZ2xhc3MgbWFzawpjaHJvbWV0eXBlIGFlc3RoZXRpY3MKYXNpYW4gd29tYW4gbWFkZSBmcm9tIG9yaWdhbWkKbmVvbiBsZW5zZXMKbWVhZG93IGluIHRoZSBiYWNrZ3JvdW5kCmFzcGljCmxlYXAgb2YgZmFpdGgKbm9yZGljIGZvcmVzdCBjb2xvcnMKZmFjZXMgYW5kIGNoYXJhY3RlcnMKYXN0cmFsIGZhaXJ5CmNoaW5vaXNlcmllIHdhbGxwYXBlcgpmdWxsIGJvZHkgZnJhbWluZwptYWNoZW5pYwphcnQgd29ya3N0YXRpb24KZnJhY3RhbCBjZXJhbWljIGFybW9yCnN3b3JkIGZpZ2h0aW5nCmFzdHJvbmF1dCBjZW50YXVyCnVsdHJhIGRldGFsaWVkCm5pbnRlbmRvY29yZQpyZW5uYWlzYW5jZQphc3Ryb25hdXQgaW4gdGhlIG9jZWFuCmVuZGxlc3MgdW5pdmVyc2UKYXN0cm9uYXV0IHJpZGluZyBob3JzZQpzcGFjZSByYWNlCmlzb2xhdGVkIHNwYWNlIHN0YXRpb24gaW4gc3BhY2UKZGVzdHJveWVkIHNoaXAKaGlnaGRldGFpbGQKYnVybnQgc2llbm5hIGFuZCB2ZW5ldGlhbiByZWQKYXN1a2EgbGFuZ2xleSBzb3VyeXV1CmZsb3dpbmcgbXVjdXMKYXN5bHVtCmluIHN0eWxlIG9mIHByaW1hbCBhcGVzCmRhcmsgbW9vZHkgbGlnaHRzISEgaW50cmljYXRlCmJlYXV0aWZ1bCBnbGl0Y2ggYXJ0IGRyZWFtCmdvbGRlbiBzaWx2ZXIgZWxlbWVudHMKZmxvd2VyIGVsZW1lbnRzCmZyb20gdGhlIDggMCBzCmF0aGVuYSBnb2RkZXNzIG9mIHdpc2RvbQpnb2RkZXNzIG9mIHdpc2RvbQpvd2wgaGVsbWV0CmhpZGluZyBpbiB0aGUgcm9vZnRvcHMKcm9jayBtdXNpYwphdGxhY2ggLSBuYWNoYQphdGxhcyB0ZXh0dXJlIG1hcCBtZWNhc2NhbnMKYXRsYXMgdHJlZSBsZWFmIHRleHR1cmUgbWFwCnBlb3BsZSBmYWNpbmcgZmlyZSBjaXJjbGUKZmxhbWluZyBoZWFydAp1bHRyYSAtIHZpdmlkCmNoYXJhY3RlciBkZXNpZ24gaHVtYW5vaWQKYXR0YWNrIHpvbWJpZSBkdXJpbmcgd29ybGR3YXIgMgpoZWFsdGggYmFyIGh1ZApjbGFzc2ljYWwgc3RhdHVlCnRyaWdnZXIgYW5pbWUgYXJ0c3R5bGUKemVudGFpIHN1aXQKOTAgNjAgOTAKZ2xhbW91cm91cyBjb3NwbGF5CnRoaWdoaGlnaHMgYW5kIHNraXJ0CmluIGJhbGNvbnkgb2YgcGFsYWNlCmluIGEgcXVpZXQgbW9tZW50Cmd1YW4geXUKYXR0cmFjdGl2ZSBiZWVmeSBtYW4KYXR0cmFjdGl2ZSBjYXQgZ2lybApwdXJwbGUgdm9sdW1ldHJpYyBsaWdodGluZwp3aXRoIGFmcm8Kd2VhcmluZyBndWkKYmVuZGVkIGZvcndhcmQKcG9ydHJhaXQuIDggayBoaWdoIGRlZmluaXRpb24KZmFzY2lzdCBjb21wb3NpdGlvbgpzaGFtZSBmb2N1cwphdHRyYWN0aXZlIG1hbGUgcGxheWluZyBwaWFubwphdHRyYWN0aXZlIG1hbGUgd2l0aCBhcm1vcgphdHRyYWN0aXZlIG1hbiBwbGF5aW5nIHBpYW5vCmF0dHJhY3RpdmUgbXVzY3VsYXIgbWFuCmF0dHJhY3RpdmUgcGFnYW4gbWFsZSBkZWl0eQpsb29raW5nIGZvciBjbHVlcwpvcm5hdGUgZ29sZCBib3JkZXIKd2FybSB0cmkgLSBjb2xvcgpzdWJ0bGUgY2hyb21hdGljIGFiZXJyYXRpb24KZmxvcmFsIGNvdXR1cmUKcG9ydHJhaXQgc3ltZXRyaWNhbApjbGFzc2ljIGJlYXV0eQp2YXJpb3VzIHNjZW5hcmlvcwpnb2Qgb2Ygd2ludGVyCmFsZW5hIGFlbmFtaSBhbmQgYW5kcm9pZCBqb25lcwpjcmVzY2VudCB3cmVuY2gKc3RyYWlnaHQgY2FtZXJhIHZpZXcKYXV0b21vYmlsZQpiaWcgZW5naW5lCmZ1bGwgdmlldyBibGFuayBiYWNrZ3JvdW5kCnZlcmRhbnQgdG9waWFyeQphdXR1bW5hbCBlbXByZXNzCmdlbmV2aWV2ZSBvJ3JlaWxseQpmYXNoaW9uIHN0dWR5CmF2YW50IGdhcmRlIGNvcmFsCmNocm9tZSBoZWFydHMKYXZhdGFyIGFhbmcgYXMgY2FwdGFpbiBhbWVyaWNhCnRhbGwgYmlnIHJvY2tzCnJlZCBjYXJwZXQgcGhvdG9ncmFwaHkKbXlzdGVyaW91cyBpbm5lciBnbG93CnNwYQpvY2N1bHQgaW5zcGlyZWQKd2VhcmluZyB0aGluIGxhcmdlIHJvdW5kIGdsYXNzZXMKY3J1bWJsZWQgd2FsbCBpbiBqZXJ1c2FsZW0KaW5kaWEgdGhpcmQgZXllIHRpa2EKZnJhbnRpYyBzbWlsZQpyZWRkaXQgdmV4aWxsb2xvZ3kKbGVnYWN5CmxlZ3Mgc3RyZXRjaGVkISEhIGludHJpY2F0ZQpiZWF1dGlmdWwgb3BlbiBleWVzCnNoZSBpcyAyIDMKdHdvIGhvdmVyaW5nIHR3aW4gbnVucwp3ZWFyaW5nIHBvaW50ZWQgaG9vZHMKYXd3d2FyZHMKaG9sb2dyYXBoaWMgZGlzcGxheSBsZW5zZXMKZXBpYyBoaWdoIGZhbnRhc3kKaGlnaCBtaWRhaXIgc2hvdAptaWRhaXIKY2hhcmFjdGVyIHBvcnRyYWl0IGFydAphd2FyZHdpbm5pbmcgbW92aWUgc3RpbGwKY2FyaW5nIGFsaWVuIGxpZmUgZm9ybQpleHRyZW1lbHkgaGlnaC1xdWFsaXR5CmNvdmVyZWQgb3V0ZG9vciBzdGFnZQppcGhvbmUgdmlkZW8KcGl4aWxhdGVkCnN0ZWFtcHVuayBpbGx1c3RyYXRpb24KbWFyaW8gY2xvdWRzCmF6dGVjIGFzdHJvbmF1dAp3aWxkIGxvb2sKYXp0ZWMgc2t1bGwgd2l0aCBjcm93biBvZiBob3BzCmZhY2Ugb2YgbWFkIHB1bGNpbmVsbGEKcmVkIGFuZCBvYnNpZGlhbiBuZW9uCnJlYWxpc3RpYyBjaGFyYWN0ZXIgYW5hdG9teQp3YXRlciByZWZsZWN0aW5nIHN1bnMgbGlnaHQKc2l0dGluZyBpbiBhIGZsdWZmeSBjbG91ZAo4IDAgcyBjYW1lcmEKc21va2luZyBhbmQgaG9sZGluZyBhIGd1bgptaWxpdGFyeS1ncmFkZQpjcnlzdGFsaXplZCBzY2FsZXMKc2hpbnkgZ2xpdHRlciAvIGNyeXN0YWxzCnNpZ25pbmcgYXV0b2dyYXBocwp0YWtpbmcgc2VsZmllcwpyb3VndWUgb25lICggZmlsbSApCnNwYWNlIG9keXNzZXkgMiAwIDAgMSAoIGZpbG0gKQpyb3VndWUgb25lCndlYXJpbmcgb3JuYXRlIHNpbGsgY2xvdGhlcwpoZXJjdWxlYW4KaGlnaGx5IGRldGFpbCBmYWNlCnRveGljIGNsb3Vkcwpsb29raW5nIGF3YXkgZnJvbSB2aWV3ZXIKc3BpZWwgZGVzIGphaHJlcwpib2FyZGdhbWVnZWVrCmNlbnRlcmVkIHJhZGlhbCBkZXNpZ24KcGFwZXIgY2hyeXNhbnRoZW11bXMKYmFyY2VsbyB0b21hcwp1bHRyYSByZWFsaXN0aWMgY2xhc3NpYwpwaW5rIHBhc3RlbAptdWx0aXBsZQpiYWQgcGhvdG8Ka2ViYWIKYmFoYW1hcwpjcnlzdGFsIGNsZWFyIGJsdWUgd2F0ZXIKcGF2ZWwgdGNoZWxpdGNoZXcKYmFsZCBtYWxlIHN3YXNoYnVja2xlcgpuYXZ5IGJsdWUgc2hvcnRzCndoaXRlIGJhc2ViYWxsIGhhdAphbGllbiBoZWFkCm1hcnRpYW4KaHVnZSBidWxib3VzIHBpdGNoIGJsYWNrIGV5ZXMKZXBpYyB3cmVzdGxpbmcgY29tYmF0CnNtb2tpbmcgc29sZGVyaW5nIGlyb24Kc3R5bGUgb2Yga2llcmFuIHlhbm5lcgpldmEgdW5pdCAwIDEKYmFsbCBqb2ludGVkIGRvbGwKYmFsbGVyaW5hIGRhbmNlIGluIHNtb2tlCmluY3JpbmF0ZSBjb250ZW50IGRldGFpbHMKdHJhaW4gZmFyCmxpdHRsZSBtZXJtYWlkIG1hZ2ljYWwga2luZ2RvbQpiYWxyb2cgY29uY2VwdCBhcnQKYmFtIG1hcmdlcmEKYmFuYW5hIGhhdApibGlibGljYWwKYmFuZ2tvayB0b3duc3F1YXJlCnRyZWFzdXJlIG9uIHdhbGxzCmRldGFpbCBjb250ZW50Cm1hc3NpdmUgc3BhY2VzaGlwcwpiYW5rc3kgZ3JhZmZpdGkKYmFuc2hlZQpib3lzIGFuZCBnaXJscwpyZWQgYXBwbGUKY29vbCBzZXBpYSB0b25lIGNvbG9ycwplcmVib3PigJlzIHRpdGFuCnN0cmlraW5nIGNvbG9yCmJhcmJpZSBkb2xsIGluIHBhbnRpZXMgYW5kIGJyYQpzZXZlcmFsIGRvbGxzIGluIG9uZSBwaG90bwpiYW5hbmEgY29sb3IKYmFyYnJhIHN0cmVpc2FuZCBzaXR0aW5nCmZvb3RicmlkZ2VzIGJldHdlZW4gaG91c2VzCmdyZWVrIG15dGhvbG9neSBjaGFyYWN0ZXJzCmlzb21ldHJpYyBpbGx1c3RyYXRpb24gZnVuCnJlbmRlciBpbiBwaXhhcgpjYW5vbiBwaG90bwpncml0dHkgZGlzdG9waWFuCmJhcm9uIGhhcmtvbm5lbgpncnVtcHkgZ29yaWxsYQp2aW9sZW5jZSBibG9vZApleG9yY2lzdApiYXJvcXVlIGFjcnlsaWMgcGFpbnRpbmcKYW5pbWUga2V5IHZpc3VhbCBjb25jZXB0CmNhbmR5IHdvcm1zCmplYW4gZnJhbmNvaXMgbWlsbGV0CmdsZWFtaW5nIHNpbHZlcgpibHVlIGFuZCBncmVlbiBjb2xvciBwYWxldHRlCnN0YXJzIGJhY2tncm91bmQKcGFsZXR0ZSBrbmlmZSEgYW5kIGJydXNoIHN0cm9rZXMKbG9uZyBmbG93aW5nIGJyb3duIGhhaXIKYmxvbmRlIGhhaXIgYmx1ZSBleWVzCmJvbHQgYWN0aW9uIHJpZmxlCnN0YXJzIGluIHRoZSBkaXN0YW5jZQpnb2xkZW4gd2luZG93cwpyZWQgYnJvY2FkZSBhbmQgYmx1ZSBnZW1zdG9uZXMKYnVybnQgc2llbm5hIGFuZCBjZXJ1bGVhbiBibHVlCm1hc3NpdmUgd2F2ZXMKbmludGVuZG8gNiA0IHJlbGVhc2UgZGF5CmJhcnJlbiB0dW5kcmEKZGVlcCBzaW5raG9sZQpiYXNrZXRiYWxsIGNvdXJ0CmJhc3Mgc291bmQgd2F2ZXMgb24gY2lyY3VpdHJ5CndpdGggaGlzIHBldCBiaXJkCmZ1dHVyaXN0aWMgZnVybml0dXJlCmFjYWRlbWljIHBhaW50aW5nCmJhdG1hbiBiZXlvbmQKMyBkIGltYWdlCmJvbmVzdGVsbApnYWJhZ29vbApiYXRtYW4gbWVjaGEKZ290aGFtIGNpdHkgYmFja2dyb3VuZApiYXRtYW4gd2llbGRpbmcgYXhlCmFyY2ltYm9sZG8gZ2l1c2VwcGUKd2F0ZXJ5IGRvZSBleWVzCmF3YXJkIHdpbm5pbmcgd29yawpiYXR0bGUgZGFtYWdlZCBpcm9uIG1hbiBzdWl0CmdyZWVuaXNoIHRpbmdlCmNvbGQgbGlnaHRzIHNvZnQgcGFpbnRpbmcKbmFwb2xlb25pYyB3YXJzCmJhdHRsZSBvZiBjYXBlIGVjbm9tdXMKYmVhdXRpZnVsIHNjZW5pYyBsYW5kc2NhcGUKYmF0dGxlIHR1cnRsZXMKdW5saWtlIGFueXRoaW5nIG9uIGVhcnRoCmJsdWUgZ3JleSBhbmQgd2hpdGUgY29sb3Igc2NoZW1lCmJiYyBuZXdzCjNkIGdyYWlueSBhZXN0aGV0aWMgaWxsdXN0cmF0aW9uCnZhcG9yd2F2ZSBvY2Vhbgpjb3N5IGF0bW9zaHBlcmUKc3dlZXBpbmcKcG9yY2VsYWluIG9yZ2FuaWMgdGlzc3VlCmJlYXIgd2l0aCBzY2FsZXMKYmVhciBsZWdzCmJhbGFuY2UgcmVuZGVyZWQKd2VhcmluZyB0b2dhCnNtaWxpbmcgYW5kIGRhbmNpbmcKYmVhcmRlZCBza3VsbApzbW9vdGggbWV0YWwKYmVhc3RtYW4gY29uY2VwdApsaWdodHMgYmVhbQpjb3JuZXJlZCBsaWtlIGFuIGFuaW1hbApmdWxsIGZyYW1lIG1pcnJvcmxlc3Mgc2Vuc29yCmNhdXN0aWMgc2hhZG93cyBsaWdodGluZwptb3JkYW5jYWdlCmNvcApvcm5hdGUgZmxvd2luZyByb2JlcwpzdHlsaXN0aWMgZnVybml0dXJlCm11bHRpcGxlIGVhcnJpbmdzCjJkIGFydCBndGE1IGNvdmVyCndhcnJpb3Igb3V0Zml0CmJlYXV0aWZ1bCBhc3VrYSBmcm9tIGV2YW5nZWxpb24Kc2l0dGluZyBhdCB0aGUgZWRnZSBvZiBwb29sCnNldCBvbiBzaW5nYXBvcmVhbiBhZXN0aGV0aWMKYmVhdXRpZnVsIGNoYXJsaXplIHRoZXJvbgpwZXJmZWN0IGZhY2UgYW5kIGJveQp2YW1waXJlcyBmYW50YXN5CmNsb3NlIHVwIHBvcnRyYWl0IHBvbGFyb2lkCmluIHRoZSBtb3ZpZSAyMDAxIGEgc3BhY2VvZHlzc2V5CmZpbmFsIGZhbnRhc3kgMTQgc3R5bGUKY292ZXIgd2l0aCBhIGxvdCBvZiByZWQgd2F0ZXIKY292ZXIgd2l0aCBibG9vZApiZWF1dGlmdWwgamV3aXNoIHdvbWFuCmJlYXV0aWZ1bCBnb3JnZW91cwpjcmF6eSBoYXRlIGZhY2UKcGFwZXIgY3J1bXBsZWQgdGV4dHVyZQp0b3BvZ3JhcGh5CnZpYnJhbnQgbmVvbiBwYXN0ZWwKYmVhdXRpZnVsIGFkdWx0IGZhaXJ5IHF1ZWVuCmpvZXkgbApsZWQgZGV0YWlsZWQgc3BhY2VzdWl0CmNyaW1zb24gcmVkIGF1cmEKZ2xhY2llciBuYXRpb25hbCBwYXJrCmtvaGVpIGhvcmlrb3NoaQp0YXRzdXlhIGVuZG8KYmVhdXRpZnVsIGFuY2llbnQgZm9yZXN0Cm1lbGFuY2hvbHkgYXV0dW1uIGxpZ2h0CmF0bW9zcGhlcmljIGhkIHBob3RvZ3JhcGgKcGF0dGVybiB3aXRoIG9wdGljYWwgaWxsdXNpb24KY2hyeXNhbnRoZW11bSBhbmQgdHVsaXBzCmhpZ2hseSBkZXRhaWxlZCBlbmdyYXZpbmcKZXZlbmluZyBsYW50ZXJucwpsb29taW5nIG92ZXIgYW50IHBvdgpkYXJrIHJvYWQKamV3ZWxyeSBwZWFybHMKcmF0aW5nOmcKcmV0cm8gYXJtb3IKc3BvcnQgYnJhIGFuZCBkYXJrIGJsdWUgc2hvcnRzCmJvaG8gLSBjaGljCnNob3J0IHNraXJ0IGxlbmd0aApzbGltbWVyIGRlbWVhbm9yCnBsZXRob3JhIG9mIGNvbG9ycyA7IG1pbmkgZHJlc3MKamFwZW5zZSB2aWxsYWdlIGluIGJhY2tncm91bmQKY2l0eSBzdHJlZXQgYXQgZHVzawppbiBhIGJpa2luaQpoeXBlciAtIHJlYWxpc3RpYyB0YXR0b28gc2tldGNoCmNhcnRvb24gcGFpbnRpbmcKYmVhdXRpZnVsIGFydCB1aGQgNCBrCnJlZCBmbG9yYWwgZHJlc3MKa29uc3RhbnRpbiBwb3J1Ym92CnZhbGVyaXkgdmVnZXJhCmJhcm9xdWUgb3JuYW1lbnQgZGV0YWlsCmJlYXV0aWZ1bCBhc2lhbiB3b21hbiBzaXR0aW5nCmhvbGRpbmcgZGFnZ2VyCm1hamVzdGljIG1hc3RlcnBpZWNlCnJhZGlhbnQgYXVyYQppbiBhIG1lZGlldmFsIHRhdmVybiBhdCBuaWdodApzdW1tZXIgc3RyZWV0Cm1vdW50YWluIHN1bnJpc2UKaW50cmljYXRlIGFyY2FuZSB3aWNjYW4gZGVzaWducwpwcmVyYXBoYWVsaXRlIHN0eWxlCmNpdHkgbGlnaHRpbmcKY3liZXJuZXRpYyBsaW1icwpmaWVsZCBvZiBtYXJpanVhbmEKY2hpbGRyZW7igJlzIGRyYXdpbmcKdW5kZXJ3YXRlciBjb21iYXQgc2NlbmUKYmVhdXRpZnVsIGJveQp3ZWFyaW5nIGJhdHRsZSBhcm1vcgpyaWRpbmcgYSBob3JzZSEhISBpbiBzYWhhcmFuCnNlcnBlbnRpbmUgcG9zZSBnZXN0dXJlCmNvbmZvcnRhYmxlIGF0bW9zcGhlcmUKZHJpcHBpbmcgY29sb3JmdWwgcGFpbnQKc2FjcmVkIHNrdWxsCmZvY3VzIGNsb3NlIG9uIGRyZWFtaW5nIGV5ZXMKa2FudGFpIGNvbGxlY3Rpb24gYXJjYWRlCmJlYXV0aWZ1bCBnbGFzcyB3b3JrCmJyaWdodCBpbnRlcm5hbCBnbG93CmFudCB2aWV3CmJsdWUgdHJhbnNsdWNlbnQgcmVzaW4KYmVhdXRpZnVsIGNyeWluZyBmZW1hbGUgYW5kcm9pZCEKbWV0YWxsaWMgYXJjaGl0ZWN0dXJlCnNpbHZlciBhY2Nlc3NvcmllcwpjdXRlIGNhcnRvb24KcHVmZnkgY3V0ZSBjbG91ZHMKZ3JlZW4gZXllCnBhaW50aW5nIG9pbApiZWVwbGUgYW5kIG1pa2Ugd2lua2VsbWFubgpyZWFsaXN0aWMuIGludHJpY2F0ZQpibGFjayBoYWlyIGluIGJyYWlkcwpzaXR0aW5nIG9uIGFuIG9ybmF0ZSB0aHJvbmUKdGF0dG9vIGZsYXNoCmhpZ2hseSBkZXRhaWxlZCBibGFja3dvcmsgdGF0dG9vCmZsb3dlcnMgYW5kIHN0ZW1zCmFjYW50aHVzIHNjcm9sbHdvcmsKZGlmZnVzaXZlIG1hZ2ljCmhhdmluZyBmdW4uIHZpYnJhbnQKYXJjaGFuIG5haXIKY29uanVyaW5nIGEgZGVtb24KZ3JlZW4gY2xvdGhpbmcKY2dzb2NpZXR5IGNvbnRlc3Qgd2lubmVyISEhCm1pc3RpbmcKZmFudGFzeSBmb3Jlc3QgZW52aXJvbm1lbnQKcGl6emEgY29zbW9zCnBpenphIHVuaXZlcnNlCnR3byBoYW5kcyByZWFjaGluZyBmb3IgYSBmaXNoCmthd2FpaSByYWlueSBnbG9vbXkKYmVhdXRpZnVsIGRyZWFteSBsYW5kc2NhcGUKY29sb3JmdWwgbGVhdmVzCmZyaWVuZGx5IHNlZHVjdGl2ZSBzbWlsZQpuaW5hIGFnZGFsCmJlYXV0aWZ1bCBlbmdsaXNoIGNvdW50cnlzaWRlCmhxIHZlcnkgZGV0YWlsZWQKaW50cmljYXRlIHBhc3RhIHdhdmVzCmx1eHVyeSBhcmNoaXRlY3R1cmUKaW5mcmFyZWQgZmlsbQpwaWVyY2luZ3MgY29sbGFyCm1peGVkIGxpcXVpZCBhY3J5bGljCmNyeXN0YWxsaW5lIG1hc3RlcnBpZWNlIGltcGxhbnRzCmJlYXV0aWZ1bCBmYWVyeSBzb3JjZXJlc3MKZ2xvd2luZyBibHVlIGJ1dHRlcmZsaWVzCndpdGggY3VybHMKd2VhcmluZyAxIDkgMiAwIHMgY2xvdGggaGFpcgpyaXR1YWxpc3RpYyB0YXR0b29zCmRhcmsgZ29yZ2VvdXMgY2xvdWRzCm1hc3MgZWZmZWN0IGNvbmNlcHQgYXJ0CmFjaWQgY29sb3Igc21va2UKYXJwZXIncyBiYXphYXIKbmVvbiBmbG93ZXJzCmN5YmVycHVuayBzdHJlZXR3ZWFyCnNub3cgZm9yZXN0CnBob2VuaXggaGVhZApjb3JyZWN0IGV5ZXMgcHJvcG9ydGlvbgpmbG93aW5nIGxpbmVzCmJvbHQgcGlzdG9sIGluIG9uZSBoYW5kCmNoYWluc3dvcmQgaW4gdGhlIG90aGVyCmJlYXV0aWZ1bCBmZW1hbGUga25pZ2h0Cmxvbmcgd2F2eSBicnVuZXR0ZSBoYWlyCmFydGlzdGljISEhIGNvbXBvc2l0aW9uCm9wYWwgY3J5c3RhbHMKYmVhdXRpZnVsIGZlbWFsZSBzb2xkaWVyCm1pZCBib2R5IHBvcnRyYWl0CmltcHJlY2lzZSBicnVzaHdvcmsKYnJpZ2h0IGFuZCBtb29keQpuZ2UKcGx1c2ggbGlwcwppbiBmZXVkYWwgamFwYW4KZnJlc2ggZm9vZCBtYXJrZXQgcGVvcGxlCndlYXJpbmcgYSBjcm9wIHRvcAp3YXRlciBkcmlwcGluZyBmcm9tIGNlaWxpbmcKZXBpYy4gMSAwIDAgbW0KaW50cmljYXRlIGFydCBkZWNvIHBhc3RhIGRlc2lnbnMKYmVhdXRpZnVsIGZvcmVzdCBzY2VuZXJ5CmJlYXV0aWZ1bCBmcmFua2Vuc3RlaW4KZG9uZ3NvbiBicm9uemUgYXJ0aWZhY3RzCmpvam8ncyBiaXphcnJlIGFkdmVudHVyZXMKd2VhcmluZyBqYXBhbmVzZSBzY2hvb2wgdW5pZm9ybQphZ2UgMyA1CnRoYW5zaHVoYWkKemF1c2gKcGxhbnRzIGdyb3dpbmcgb24gaXQuIGdvdWFjaGUKZmliZXIgb3B0aWMgaGFpcgpibHVlIGRyZWFkbG9ja3MKYmVhdXRpZnVsIGdlbWluaSBnb29kIGFuZCBldmlsCmJlYXV0aWZ1bCBnZW1pbmkgdHdpbnMKYmVhdXRpZnVsIGdlbmllIGdpcmwKbXlzdGVyaW91cyBhbWJpZW50IGxpZ2h0aW5nCmZhbnRhc3kgdmliZXMKc21va2V5IGV5ZXMKdmFsb3JhbnQgZ2FtZSBzdHlsZQpiZWF1dGlmdWwgZ2lybCBpbiBhbiBlbXB0eSByb29tCmJlYXV0aWZ1bCBnaXJsIHBvcnRyYWl0CndpZGUgc2NyZWVuc2hvdAp0b3J1cyBlbmVyZ3kKdmFuCmRldmlsIHNtaWxlCndoaW1zaWNhbCBwb3J0cmFpdApmdWxseSBzeW1tZXRyaWNhbApiZWF1dGlmdWwgZ3JlZW4gbGlxdWlkCmJlYXV0aWZ1bCBncnVtcHkgZ2lybAo4ayBoaWdoIHF1YWxpdHkgYW5kIHJlc29sdXRpb24KcXVlZW4gb2YgZGFya25lc3MKYmVhdXRpZnVsIGhlbG1zIGRlZXAKcGVyY2hlZCBvbiBhIG1vc3N5IGJyYW5jaApzaW5nbGUgZmlndXJlIGNvbXBvc2l0aW9uCmZqb3JkcwpiZWF1dGlmdWwgaG9yc2UKKCgobWlzdCkpKQpiZWF1dGlmdWwgaG91c2Ugb24gYSBmb3Jlc3QgcGF0aApkcml2aW5nIHRocm91Z2ggdGhlIGNpdHkKaW4gYSBtb2RpZmllZCBuaXNzYW4gc2t5bGluZSByMzQKYmlnIGxlYWYgYnJhCmlyaWRlc2NlbnQgd2luZ3MKc3dvcmQgJiBzb3JjZXJ5CmxpZ2h0IGFuZCBkYXJrbmVzcyBzZXBhcmF0ZWQKYmVhdXRpZnVsIGlwaG9uZSB3YWxscGFwZXIKaHlwZXJyZWFsaXN0aWMgbHVpcyByb3lvCmh5cGVycmVhbGlzdGljIHRlZW4Kc29mdCBmcmVja2xlcwp6ZW4gY29uY2VwdApjYXJ0b29uIHBpeGFyIHN0eWxlCjNkIG1vZGVsIHBpeGFyIHJlbmRlcgplbmQgb2YgZXZlcnl0aGluZwptYXJrdXMgZ3VubmFyCmxlYWsKcHJvdG9zcyB0ZW1wbGUhISEKdWx0cmF3aWRlIGFuZ2xlIGNpbmVtYXRpYyB2aWV3CnVuc2hhZGVkCjggMCBzIGhhaXJjdXQKaGlnaGx5IGRldGFpbGVkLWggNzA0CmRhbmNlcnMKYmVhdXRpZnVsIG1hbGUgdHdpbnMgcG9ydHJhaXQKdGhyZWUgZGF5IGdyb3d0aApoeXBlciBvcm5hdGUKY2FycnlpbmcgYSBib3R0bGUgb2YgcGVyZnVtZQpoZHIgaHVtYW4gZGV0YWlsZWQKY2xlYXIgcGFpbnRpbmcgYW5kIGdvb2QgbGlnaHRpbmcKYXlhbWkga29qaW1hIGFuZCB5b3NoaXRha2EgYW1hbm8KbWFpIGFuaCB0cmFuCmFwb2NhbHlwdGljIGZhbGxvdXQgNyA2CmJlYXV0aWZ1bCBtaXN0eSB3b29kCnBpbmsgbWFnaWMKaWR5bGwKY2xhcC4gc2NpZmkKYmVhdXRpZnVsIG5vcmRpYyB3b21hbgpvYnNpZGlhbiBzbGltZQpjb2xvdXJmdWwgYm9va3MKY29ybnVjb3BpYQpwaG90byAtIGVkaXRpbmcKcGhvdG8gLSBtYW5pcHVsYXRpb24KYmVhdXRpZnVsIG9yaWVudGFsIHdvbWFuCmVuZXJneSBwdWxzZXMKZ2xvd2luZyBtcmkgeC1yYXkKbmJhIGZpbmFscwpncmVnIHJ1dGtvc3draQpoYXlhbyBtaXlhemtpCmZvcmVzdCBhbmQgcml2ZXIKd2l0aG91dCBleWUKZW1wZXJvciBvZiB0aGUga25vd24gdW5pdmVyc2UKMyBtbQp2ZXJ5IHJlbGF4aW5nCm9ubHkgZXllYmFsbApjb2hlcmVudCBleWUKZW1iZXIKYmVhdXRpZnVsIHBpbmsgbGl0dGxlIGFsaWVuIGdpcmwKYmVhdXRpZnVsIHBvcnRyYWl0IG9mIG5hbWkKc3VidHJvcGljYWwgcGxhbnRzCnJveWFsIHJlbGllZgpldGNoZWQgcmVsaWVmCmJlYXV0aWZ1bCBwb3J0cmFpdCBvZiBhIGhvcGVsZXNzCmxhdGlubyBmZWF0dXJlcwpoaXN0b3JpY2FsIGZpY3Rpb24KaGlnaGx5IGRldGFpbGVkIGluayBpbGx1c3RyYXRpb24KYWxpZW4gaGFiaXRhdApleHBsb3JpbmcKd2FuZGVybHVzdApicmVhdGh0YWtpbmcgZGV0YWlsCmludHJpY2F0ZSBmaW5lIG9ybmFtZW50cwpsaWdodGluZyA4awpnbGltcHNlIG9mIHJlZApqYW1lcyBzdG9rb2UKcGllcmNpbmcgZGV0YWlsZWQgcmVhbGlzdGljIGV5ZXMKbmlrb24geiA5CmhvbGVzIGluIHRoZSBsb3dlciBqYXcKZG9taW5hbnQgcG9zZQpzb2Z0IGFuZCBpbnRyaWNhdGUKbWVkaWV2YWwhIQpsdXNoIG9hc2lzCnJvY2t5IG1lYWRvd3MKZ2FsbG93cwpjZ3NvY2lldHkgLSBuIDUKZHJhbWF0aWMgYXVyb3JhIGJvcmVhbGlzCmJlYXV0aWZ1bCByb2JvdCBjaGFyYWN0ZXIgZGVzaWduCmFydGdlcm0gYW5kIGlseWEga3VzaGlub3YKYmx1ZSBleWVzIGFuZCBsYXJnZSBmb3JlaGVhZApnbG93aW5nIHJlZCBhbmQgZ29sZCBoYWlyCmJlYXV0aWZ1bCBzY2kgLSBmaSB0d2lucwp6b29tZWQKbWVjaCByb2JvdCBmdXR1cmlzdGljCnVzaW5nIG1hZ2ljCmJlYXV0aWZ1bCBzZXJlbmUgaG9iYml0b24KYmVhdXRpZnVsIHNlcmVuZSBob3JzZQpiZWF1dGlmdWwgc2hvcnQgc2tpcnQKY29sb3JmdWwgaW4gY29sb3VyCnN0dW5uaW5nIHBob3RvIHJlYWwgY29uY2VwdCBhcnQKM2QgaGlnaCBwb2x5IHJlbmRlciB3aXRoIG9jdGFuZQp6ZWlzcyBsZW5zZXMKbWFuaWN1cmVkCmZ1amkgbHV0CmVwaWMgc3RvY2sgcGhvdG8KZ29sZGVuIGFydCBub3V2ZWF1IHNjeXRoZSBibGFkZQpiZWF1dGlmdWwgc29yY2VyZXNzIGZlbWFsZQpjb2xvciBwb3AKZW5vcm1vdXMgaW4gc2l6ZQpiZWF1dGlmdWwgc3VtbWVyIGxhbmRzY2FwZQpiZWF1dGlmdWwgc3dlZGlzaCBmb3Jlc3Qgdmlldwo4IGsgcmV6CmludHJpY2F0ZSBkZXNpZ25zCm1vbmV0IGFuZCBkYSB2aW5jaGkgYXJ0IHN0eWxlCmRhbGkgbG9ic3RlciBwaG9uZQpyYXcgZWdnIHlvbGtzCmNvbmNlcHQgcGllY2UKcm9jayBhcmNzCnB1cHBldCBtYXN0ZXIKdmFtcGlyZSBnaXJsCm11Y2hhIHRpZmZhbnkga2lsaWFuIGVuZwptYWdpY2FsIHNwYXJrbGluZyBjb2xvcmVkIGR1c3QKbWFnaWNhbCBtb29uIHNoaW5lcyBvdmVyaGVhZApiZWF1dGlmdWwgd2F0ZXJmYWxsCmJyYWlkZWQgY2FibGUKYmFja2dyb3VuZCBhZXJpYWwgYmF0dGxlCmRvbWUKYmVhdXRpZnVsIHdvbWFuIGluIGEgYmxhY2sgZHJlc3MKZGV0YWlsZWQgZHJlc3MgYW5kIGZhY2UKZ3JheXNjYWxlIHBodG90byB3aXRoIHJlZCBkcmVzcwpiZWF1dGlmdWwgd29tYW4gaW4gc3BhY2VzdWl0CmNyYXp5IGRldGFpbGVkCmJsYWNrIGFuZCB5ZWxsb3cgY29sb3JzCnZlcnkgZnVsbCBsaXBzCm5lb24hISEhISEgYXRtb3NwaGVyZQpicm9rZW4gYXJtb3IKbmV2ZXJlbmRpbmcgc3RvcnkKYmVhdXRpZnVsIHdvb2QgZWxmCmJlYXV0aWZ1bCB5ZWxsb3cgd29tYW4KbG9uZyBiZWF1dGlmdWwgZmxvd2luZyBraW1vbm8Kb3JuYXRlIHJveWFsIGdvd24KYmVhdXRpZnVsIG11c2UKc3ludGhldGljIGJpbyBza2luCmRhcmsgZXllIHNoYWRvdwppbiBibGFkZXJ1bm5lciBjaXR5CmdyZWF0IHdhdmUgb2YgaG9rdXNhaQphY3J5bGxpYyBzcGlsbApjaW5lbWF0aWMgZGlhbmUgYXJidXMKYmVhdXRpZnVsIHlvdW5nIG9ybmVsbGEgbXV0aQpiZWF1dGlmdWwgeW91bmcgd2luZCBzcGlyaXQKbW9ub2NvbG9yIG1vc2FpY3MKcmVhbCBzaG90CmJsYWNrIGRyYWNvbmljIC0gbGVhdGhlcgp6b2x0YW4KZXh0cmVtZSBibG9vZAptaWt1Cm5pbmNoYWt1CnNhZCBjaHJpc3RpbmEgaGVuZHJpY2tzCmluIGhlciBoYWlyCmFudGxlcnMgb24gaGVyIGhlYWQKaGlnaCBkZWZpbml0aXRpb24Kd2VhcmluZyBsb3VpcyB2dWl0dG9uIGFybW9yCmJsYWNrIHN3ZWF0ZXIKZ2hpYmxpIHRvbSBiYWdzaGF3CmJlYXV0eSBnZWlzaGEKYmVhdXR5IGlzIGEgdmlydXMKYXBwZWFzaW5nCmJlYXV0eSB3b21hbiB3aXRoIGRldGFpbGVkIGZhY2VzCjgwcyB0b3RhbCByZWNhbGwgdGVjaAptYW5kYWxhIG9ybmFtZW50CnN0aWdtYXRhCmhlIGlzIGluIGEgbW9zcXVlCmJlZHJvb20gaW4gc3R1ZGlvIGdoaWJsaQpjaGluZXNlIGRyYWdvbiBlbmdyYXZlCmJlZXRob3ZlbiBwbGF5aW5nIHBpYW5vCmJlZXRob3ZlbgpiZWluZ3Mgb2YgbGlnaHQgdGVjaG5vbG9neQpwYXBlciBkZWNvcmF0aW9uCnVuZGVyIGdsYXNzIGRvbWUKY3VjdW1iZXJzCmJlbmVkaWN0IGN1bWJlcmJhdGNoIGFzIHRoYW5vcwpmbG93aW5nIHdpdGggZGFyayBwb3dlcgp2aXZpZCByaWNoIGNvbG9ycwpleHRyZW1lbHkgZHJhbWF0aWMgbGlnaHRpbmcKbXV0ZWQgbmVvbiBjb2xvcnMKZGlydHkgbGFib3JhdG9yeQphcyB0aGUgcHJvdGFnb25pc3Qgb2YgZ3RhIDUKMiAwIDIgMCBzIHByb21vdGlvbmFsIGFydAptb3ZpZSBhcnR3b3JrCnNtb2t5IGxhYm9yYXRvcnkKYmxvb2R5IHJ1bmVzCmJlcnNlcmtlciBwb3RyYWl0CmJlc3QgYm9vayBjb3ZlciBkZXNpZ24KYmV0aCBoYXJtb24Kcm9zZS1icmFtYmxlcwptaWRuaWdodC1ibHVlCmJsdWUtYmxhY2sKcm95YWwtYmx1ZQpuYXZ5LWJsdWUKZWRnZS10by1lZGdlIHByaW50CmNpZ2FycmV0dGUgYm94ZXMgYXQgdGhlIHRhYmxlCmJld2FyZSB0aGUgaWRlcyBvZiBtYXJjaApwdXJwbGUgc3RyZWFrcyBpbiBoYWlyCnBldGVyIGpvbmVzCmJleW9uY2UgcGhvdG9zaG9vdApub3N0YWxnaWMgYW5kIG1lbGFuY2hvbGljIDQgawpjb2xvdXJmdWwgY2xvdGhpbmcKd2UgYWxsIG5lZWQgY29udHJvbAp2ZXJ5IGRhcmsgYW5kIGFiYW5kb25lZApvbmx5IGRhcmsgY29sb3VycwpmYXNoaW9uIHBvc2luZwpvbiBwbGFuZXQganVwaXRlcgpvY2VhbiBvbiBwbGFuZXQgdGl0YW4KZGVlcCBnYXplIHRvIHRoZSBzaWRlCnNjcmVlbiBzaG90CnRyaXVtcGhhbnQgcG9zZQpkcml2ZXIKZmluZSBjb2xvciBsaW5lcwoyLiA1IGQgaWxsdXN0cmF0aW9uCnN1biAtIHJheXMgdGhyb3VnaCBjYW5vcHkKZ2VudGxlIHNwYXJrbGluZyBmb3Jlc3Qgc3RyZWFtCmJpZyBiaXJkIGZyb20gc2VzYW1lIHN0cmVldAp3ZWFyaW5nIHNleHkgbGluZ2VyaWUKY2hpbGRyZW4ncyB0diBzaG93CnNwYWNlc2hpcCBmbGllcyBpbiB0aGUgZGlzdGFuY2UKYmlnIGJydXRhbGlzdCBiYXNlCnJlYXNzdXJpbmcKbG92ZWNyYWZ0IGVsZHJpdGNoIGhvcnJvcgpiaWcgY29tcHV0ZXIKc25vd3kgZmllbGQKc21hbGwgd2F0ZXIgc3RyZWFtCmVhcmx5IG1vcm5pbmcgc3VuIGluIHRoZSBza3kKYmFja2xpZ2h0IGdyZWVuIGxlYXZlcwpiaWcgZ2hldHRvIGJsYXN0ZXIKcmF2ZSBwb3N0ZXIKbm8gdGlsaW5nCnVsdHJhIHZlcnkgbG9uZyBzaG90CnB1cnBvc2UgaXMgcHVtcApiaWcgbW9lCmJpZyBvcGVuZWQgYm9vawpldmVuaW5nIG5ld3MgcHJvZ3JhbQpsYXJnZSBzY2FsZSBwaG90bwpiaW9zIGNoaXAKYmlnIHdhdmUgc3VyZmluZwpibHVlIGFuZCB5ZWxsb3cgZmF1bmEKdG91ciBkZSBmcmFuY2UKbWFza2VkIGZhY2UKbm8gLSB0ZXh0IG5vIC0gbG9nbwptYXhpbSB2ZXJlaGluIHN0YWluZWQgZ2xhc3MKMSA5IDcgMCBzIG1vdmllIHBvc3Rlcgpob2xkaW5nIHN5cmluZ2UKYmF0aHJvYmUKY2VyZW1vbnkKZyA3IHN1bW1pdApiaW5rbGV5CmNpdHkgcGFub3JhbWEKaGlnaGx5IGRldGFpbGVkIHNrZXRjaApiaW9sb2d5IHRleHRib29rIHBhZ2UKZ2FuYXBhdGkKdmluYXlhawpnZXJhbGQgYnJvbS4gcmljaCBjb2xvcnMKcG9zaXRpbmcgb24gcm9jayBzdXBlciBoZXJvIHBvc2UKc2t1bGwgaW4gYnJva2VuIHNwYWNlIGhlbG1ldApkaWdpdGFsIHBhaW50aW4KZXRoZXJlYWwgaGFpcgptZXNtZXJpemluZyBibHVlIGV5ZXMKY3liZXIgc3BhY2UKY3V0ZSBnaXJscwpiaXAgYmlwcGFkb3R0YQpoZWF2eSBuZXdzcHJpbnQgcmFzdGVyCmNhcnZlZCBtYXJibGUgdGV4dHVyZSBzaWxrIGNsb3RoCmJpcmQncyBleWUgdmlldyBvZiBhIGNpdHkKbWFueSBpc2xhbmRzCmV4dHJlbWVseSBkZXRhaWxlZCBwaG90b2dyYXBoeQplbGVnYW50IGFuZCBleHRyZW1lbHkgb3JuYW1lbnRhbApnbG9vbXkgZWFydGh5IGNvbG9ycwpmbG9hdGluZyBrZWxwCnBhd3Mgb24gc3RlZXJpbmcgd2hlZWwKc3RhcnMgc3RyYW5nZSBwZXJzcGVjdGl2ZQpibGFjayBpbmsgbGluZXMKY2hhbmdlbGluZ2NvcmUKZm9sZGluZyAtIHRpbWUKd2l0aCBhcXVhIHJhcHVuemVsIGRyZWFkbG9ja3MKc2VjcmV0IGlsbHVtaW5hdGkgY2FiYWwKb2NjdWx0IGFsY2hlbXkKZ290aGljIG1hbnVzY3JpcHQgd2l0aCBpbnRyaWNhdGUKZXNhCmtlbiBzdWdpbW9yaSBhcnQKcmVuYWlzc2FuY2UgZmFpcgpibGFjayAtIGhhaXJlZCBtYWdlCmJsYWNrIHF1aWNrCmJsYWNrIHN0cm9rZXMKYmxhY2sgcGFpbnQgZHJvcHMKYmxhY2sgc2tldGNoCmJsYWNrIGdyYWZmaXRpCmJsYWNrIHN0ZW5jaWwKZXBpYyBmYW50YXN5IGFydCBwb3J0cmFpdApsaWdodCBzcGVlZApkaiBzZXQKd2VhcmluZyBvcmFuZ2UgcHJpc29uIGp1bXBzdWl0CnZlY3RvciBzdmcgYXJ0CnR3byBoZWFkZWQgY2F0CnF1YXNhcgpydW5lcyBpbiB0aGUgYWlyCmhlIGlzIHdlYXJpbmcgYSB0b3AgaGF0CndlYXJpbmcgYmFuZGl0IG1hc2sKb2N1bHQKam9qbydzIGJpenphcmUgYWR2ZW50dXJlISEKd2VhcmluZyBhIGxpZ2h0IHNoaXJ0CnNwZWVkIHBhaW50aW5nIGFuZCBzY3JpYmJsZSBhcnQKYnJhemlsaWFuCnNtdXJmCmJpbyBtZWNoYW5pY2FsCnJldHVybmFsIGJpb21lCnNlYSBlbmVtaWVzCmV4dHJhIHRlZXRoCnN0YXR1ZSBvZiB6ZXVzCmZyb250IGZhY2luZyB2aWV3CnRoaW4gcmVkIGxpbmVzCnN5bWJvbGljIG11cmFsCmF3YXJkIHdpbm5pbmcgaGQgOGsgcGhvdG8KYmxhY2sgYm94IG9uIHRoZSBmaWVsZCBmbG93ZXJzCmhvbGRpbmcgYSBlbGVjdHJpYyBndWl0YXIKdWx0cmEgZGV0YWlsZWQgY29sb3IgYXJ0CmJsYWNrIGNhdCB0YWtpbmcgYSBzZWxmaWUKaG9vZGVkIGNsb2FrCnNoYWRvdyBwb2xhcm9pZCBwaG90bwpibGFjayBnb2xkIGxpZ2h0IGJsdWUKYmxhY2sgZW1tYSB3YXRzb24gYXMgZWd5cHRpYW4KY2luZW1hdGljIGFuZCBkcmFtYXRpYwpibGFjayBwYWludCBmbG93cyBkb3duCnJlYWxpc3RpYy4gZGFyayBhdG1vc3BoZXJlCnRlYXJzIGluIGV5ZXMKcmlkbGV5IHNjb3R0IG1vdmllCmluIGEgZ2FsYXh5Cm5pZ2h0IGxpZmUgYnVpbGRpbmdzCmh1bWFuIC0gbGlrZQpibGFjayBsaW9uIHdpdGggcGVhY29jayB3aW5ncwpibGFjayBtYWdpYyBjcnlzdGFsIHJpbmcKY2hhcmFjdGVyIGRlc2lnbiA6IDogZ290aGljCmJsYWNrIG1hbiB3aXRoIGFmcm8gaGFpcgppbiB0aGUgc3RyZWV0cyBvZiB0b2t5bwpzbGlnaHRseSBvdmVyZXhwb3NlZAooKGRhcmsgZmFudGFzeSkpCmdyaW5kY29yZQpjaHJpc3RvcGhlIHN6cGFqZGVsCnZlcnkgZW1vdGlvbmFsCmh5cGVyIHJlYWxpc3RpYyA4IGsgdGV4dHVyZWQKcmV0cm8gbW92aWUgcG9zdGVyCm1hbnkgaGFuZHMKbWFueSBtb3V0aHMKYmFybG93CmJsYWNrIHNxdWFyZXMgb24gNCBjb3JuZXJzCnNpbmdsZSBjaGFpciBicmFzcwpibGFjayBzdW4KYmxhY2sgc3VuIHdpdGggcHVycGxlIGVjbGlwc2UKamVubnkgc2F2aWxsZSBhbmQgbmljb2xhIHNhbW9yaQphZHZlcnRpc2luZyBiaWxsYm9hcmQKYmxhY2sgdm9pZApzb2Z0IGJsdWUgYW5kIHBpbmsgdGludHMKdGhpbiBibGFjayBsaW5lcwpicm9uemUgc3RhdHVlIGFuZCBzaWx2ZXIKZXllcyA9IHB1cnBsZQphbWF6b24gcmFpbmZvcmVzdCBiYWNrZ3JvdW5kCmJsYWRlIHJ1bm5lciBjb25jZXB0IGFydAp3YWthbmRhIGJhY2tncm91bmQKZGVuc2UgYXJjaGl0ZWN0dXJlCmNvaGVyZW50IHByb2Zlc3Npb25hbAp2ZXJ5IG9sZCBwaG90bwpuaW5ldGVlbiBzZXZlbnRpZXMKbG9zcyBvZiBjb250cm9sCnBlcHBlcgpsaW9uYXJkbyBkYXZpbmNoaQpsYXJnZSBib2R5CmNvbG9yZWQgZWxlcGhhbnQgYXJ0CnNhbHNhIHZlbmRvcgpsYXNlcnMgc2hvb3Rpbmcgb3V0IG9mIGV5ZXMKYmxvbmRlIGJlYXV0aWZ1bCB5b3VuZyB3b21hbgp3ZWFyaW5nIGEgYnJvd24gY2FwZQpjbHV0Y2ggeW8gLSB5bwpmbG9hdGl1bmcgaW4gZnJvbnQgb2YgYSBuZWJ1bGEKd2hpdGUgc3VtbWVyIGRyZXNzCmp1bGVzIGJhc3RpZW4gbGUgLSBwYWdlCm9uIGEga2F5YWsgaW4gYSBmb3Jlc3QKYmxvbmRlIGhvdCB3b21hbiBpbiB3aW5lIGNlbGxhcgpibG9vZCByZWQgY3Jlc2VudCBtb29uCmhpbmR1IG9ybmFtZW50cwp2aWN0b3JpYW4gZW5nbGFuZCBzdHlsZQpwc3ljaG9kZWxpYyBjb2xvcnMKc2hhYmFiIGFsaXphZGVoCm1heGltdXMgamFjb2JzCmJsb29keSBvY2VhbgpkcmFnb24gZmx5aW5nIGluIHNreQpzb2xkaWVycyBydW5uaW5nCmJsb29ucyB0ZCA2IGRhcnQgbW9ua2V5CmJsb3Nzb21pbmcgcmh5dGhtCnN0eWxlIG9mIGFzaGVyIGJyb3duIGR1cmFuZApibHVlIHdvbGYKYmx1ZSBicmFpbgpiZWFkeSBibGFjayBleWVzCmNhcmwgZ3VzdGF2CnNub3cgYXJteSB3YXIKZGlzbmV5IHBpeGFyIG1vdmllCmZsb2F0aW5nIHN5bWJvbHMgYW5kIGNyeXN0YWxzCmZsb2F0aW5nIHN5bWJvbHMKZmFpciBza2lubmVkCnBpbnBvaW50IHNoYXJwIGZvY3VzCm1vc3RseSBjbG91ZHkgc2t5CmN1cnZlZCBicmlkZ2UKYmx1ZSBqYXkgd2l0aCBhIHBpbGUgb2YgYWNvcm5zCjIgZCB2ZWN0b3IgYXJ0CnB5cm9tYWxsaXMgbmVrcm8gcmVuZSBtYXJnaXR0ZQpjaXR5IGJhY2tkcm9wCmhpZ2ggZGV0YWlsIHdoaWRlIHNob3QKdGhyZXNoZXIgc2hhcmsgaHVtYW4gaHlicmlkCml0J3MgcnVubmluZyBiZXR3ZWVuIGEgc3Rvcm0KZW5ncmF2aW5nIGZyb20gMTcwMHMKcmVkIGV5ZXMgaGlnaGx5IGRldGFpbGVkCmdpdmluZyBnaWZ0cyB0byBwZW9wbGUKanJwZyBjaGFyYWN0ZXIgYXJ0CjV0aCBlZGl0aW9uCmxhYmVsZWQgZGlhZ3JhbXMKaGlnaCBjb250cmFzdCBpbGx1c3RyYXRpb25zCm9sZCBmYXNoaW9uCmJsdWVwcmludCBvZiBhIGxhc2VyIHNwYWNlIGd1bgpibHVlcHJpbnQgb2YgYSBzcGFjZXNoaXAKYmx1ZXByaW50IG9mIHNwYWNlc2hpcApyZWFsaXN0aWMgaW5mb3JtYXRpb24Kb2N0YW5lIHJlbmRlciA0ayBwaG90b3JlYWwKYnJhbmNoaW5nIGhhbGx3YXlzCnNpdHRpbmcgdW5kZXIgYSB0cmVlCmJtdyBpIDgKd2l0aCBhIGN1dGUgZmx1ZmZ5IG93bApwYWludGluZyBvbiB0aGUgY2VpbGluZwppbiBhIGJhc2VtZW50CmZvcmJpZGRlbiBjcmVlcHkgbW9vZApqIGMgbGV5ZW5kZWNrZXIKZGVzdHJveWluZyBhIGNpdHlzY2FwZQpoYXBweSBjbG91ZHMgYmVoaW5kCmFuaW1hbHMgY2hhc2luZwpib2JjYXQgc3RhbmRpbmcgYWxvbmUgb24gYSBsb2cKaW50byBicmlnaHQgbGlnaHQKcm93cyBvZiBsdXNoIGNyb3BzCm5ldyB5b3JrIHN0cmVldHMKbWluaWd1bgpvbGQgc2N1YmEKc2VhZm9hbSBncmVlbgpib21iZXJtYW4KYm9uZCBnaXJsCmJsYWNrIC0gYW5kIC0gd2hpdGUgcGhvdG9ncmFwaHkKZ3JpbWRhcmsgdmliZXMKc29saWQgY29sb3VycwphbmF0b21pYyBkZXNjcmlwdGlvbgphcm1vdXIhIGZhbnRhc3kKcmVhbGlzdGljIGJvZHkgc2hhcGUKaWxsdXN0cmF0aW9uIG9mIGEgZHVjawpjb3p5IHBsYWNlCnBhaW50cwozIDUgbW0gc3RpbGwgcGhvdG8KYm9yZGVyIGNvbGxpZSBkb2cgb24gYm9vayBjb3Zlcgp3aXoga2hhbGlmYQpjYW1weSBhbmQgY29sb3JmdWwKYm9yZyBjdWJlCmJvb3plCnJlc3RvcmVkIHBhaW50aW5nCmNsb3NldXAgaGVhZHNob3QgcG9ydHJhaXQKYm9yb21pciBpbiBhbiBhbmltZSB3b3JsZApoYW5naW5nIGZyb20gYSBob3QgYWlyIGJhbGxvb24KYm90YW5pY2FsIHBob3RvCmJvdGFuaWNhbCBwb3N0ZXIKdmVyYmVuYQpjaGFybGllIGJvd2F0ZXIgYW5kIGFydGdlcm0KbWluaW1hbGlzdGljIGFuZCBiZWF1dGlmdWwKZGVjb2xsYWdlIDQgawphcnRpc3RpYyBtYXN0ZXJwaWVjZQpib3R3CmJvdW5kYXJ5IG9mIHR3byBsYW5kcwpib3dsIGZpbGxlZCB3aXRoIGZvb2QKaW4gYSBkeXN0b3BpYW4gd29ybGQKYiAmIHcgZGV0YWlsZWQgc2hhcnAgcGhvdG8KZHJpdmUgb3V0CnRlYWwgdW5pZm9ybQpjZWNjbyBicmF2bwpsaWdodG5pbmcgYm9sdCBzY2FyIG9uIGZvcmVoZWFkCmJveSB3aXRoIGNhdCBlYXJzIGFuZCB0YWlsCmRyYXdpbmcgcGljdHVyZXMgb24gYSBub3RlYm9vawpjb25jZXB0IGFydHMKZ2lybCBhbmQgYSBnb2F0CndhdGVyY29sb3IgYXJ0c3R5bGUKanVuZ2xlIGNhbW8KYnJhZGxleSBjb29wZXIgaW4gZmluZGluZyBuZW1vCjQgayByZW5kZXJpbmcKYnJhaW4gdHJlZSBleWUgaG9seSBncmFpbAp0YWtlIG1lIGF3YXkgZnJvbSB0aGUgbm9ybSAnCndvcmtzaG9wIGJhY2tncm91bmQKYXJ0IG5vdXZlYXUgZHJlc3MKZGFyayBtaXN0eSBmb2dneSB2YWxsZXkKd2l0aG91dCBtdXN0YWNoZQpicmVha2RhbmNpbmcKMSA5IDcgMCBjdXQgb3V0IGNvbGxhZ2UKYnJlYWtmYXN0IGJ1ZmZldApzaGF0dGVyZWQgY3J1bWJsaW5nIHBsYXN0ZXIKc3RvbmUgZHVzdAplc2NhcGluZwpzdG9uZSB0aWxlIGhhbGx3YXkKc3RhcnMgYW5kIG1pbGt5IHdheSBhbmQgbW9vbgpleHRyZW1lIGZvcmVzaG9ydGVuaW5nCmJvdHRvbSAtIHVwIHBlcnNwZWN0aXZlCm1hbnkgZXhxdWlzaXRlIGRldGFpbAp2ZXJ5IGJyaWdodCBsaWdodHMKYmxvbmQgY3VybHkgaGFpcgpnb2xkZW4gdHdpbGlnaHQgc3RhaW5lZCBnbGFzcwphbWFsZ2FtYXRpb24gb2YgbWFnaWNhbCBzdGFycwphcnRnZW0gYW5kIGdyZWcgcnV0a293c2tpCmZyb3N0aW5nIG9uIGhlYWQgYW5kIHNob3VsZGVycwphbGNvaG9sIHdpdGggYmx1ZSBkZWxpcml1bSBza2llcwphbmF0byBmaW5uc3RhcmsgYW5kIGtlbG9nc2xvb3BzCmxhc3QgbGlnaHQgb24gbW91bnRhaW4gdG9wCmdyZWVuaXNoIGNvbG9ycwpjaGVtaWNhbCBwbGFudAppbnRyaWNhdGUgZ290aGljIGJvbmVzIGFuZCBtZWF0CnVsdHJhIG5kCnNlY3JldCBvdmVyZ3Jvd24gdGVtcGxlCmZpZ3VyZSBtZWRpdGF0aW5nIGNsb3NlIHNob3QKdmVyeSBtb29keSBsaWdodGluZwpicmVlZCBydXNzaWFuIGJyb3duIHRveSB0ZXJyaWVyCmdyZWVuIHN0ZWFtIHJpc2luZyBmcm9tIHNvdXAKYnJpYW4gZ3JpZmZpbgpicmlkZSBhbmQgZ3Jvb20KZHluYW1pYyBlbmVyZ2ljIHBvc2UKYW5kcmUgc2h1bHplCnN0YW5kcyBhdCBoZXIgZWFzZWwKYWlzbGVzIG9mIGFxdWFyaXVtcwpzb2Z0IGRpZmZ1c2lvbgppbiB0aGUgc2hhcGUgYW4gYXVkaW8gd2F2ZWZvcm0KY3J5aW5nIGFuZCBwdWtpbmcKc29mdCB6ZW4gbWluaW1hbGlzdApncmlsbAptYWlkIGNvc3R1bWUKcnVpbmVkIGNhc3RsZQpicm9rZW4gYmVhdXRpZnVsIGZlbWFsZSBhbmRyb2lkIQp0aWNrIGhlbG1ldApub24tc3ltbWV0cmljYWwgZnJhY3RhbHMKYmVlcGxlLiBoeXBlcnJlYWxpc20KYnJvb2tlIGFzaGxpbmcKOCBrIDEgNSAwIG1weApjaHJvbWUgcmVmbGVjdApsb3RzIG9mIHZlZ2V0YXRpb24KY29udmVudGlvbiBwaG90bwpibHVlIGFuZHJvaWQgZXllcwpzdGF0ZSBvZiB0aGUgdW5pb24KaG9sZGluZyBoZWxtZXQKaW5rIG1hbmdhIGRyYXdpbmcKYnJ1bmV0dGUgZWxmIHdpdGggZmFpcnkgd2luZ3MKd2VhcmluZyBwaW5rIHJvbWFudGljIHR1dHUKd2VhcmluZyBwdXJwbGUgY29yc2V0IGFuZCB0dXR1CndyYXBwZWQgYmx1ZSBiYWNrZ3JvdW5kCmJsYWNrIGFuZCByZWQgb25seSEhIQpoYXJkIHBhaW50CmJsYWRlIHJ1bm5lciBjb2xvciBzY2hlbWUKYnJ1dGFsaXN0IGJhc2Ugc2NpZmkKZW1waXJlCmhhc2hpbWEgaXNsYW5kCnJpdmVyIGdvcmdlb3VzIGxpZ2h0aW5nCm1pcnJvciBsaWtlIHdhdGVyCmhhbmdpbmcgZnJvbSBhIHRyZWUKbW90aGVyIHRoZXJlc2EKdGluZGVyIHByb2ZpbGUKd2hpdGUgYW5kIHJlZCBib2R5IGFybW9yCmNvY3JvYWNoCnNvbGFyIHB1bmsgcHJvZHVjdCBwaG90bwpidWdiZWFyCmJ1aWxkaW5nIGFsb25nIGEgcml2ZXIKaHVtaWRpdHkKMTM1bW0gbGVucwpiaWcgaG9ybnMKYmVlaGl2ZSBpbnRlcmlvciBiYWNrZ3JvdW5kcwpidW5ueSBsZWcKYnVubnkgd2l0aCBoZWxtZXQgYW5kIHN3b3JkCmV4cXVpc2l0ZSBpbWFnaW5hdGl2ZSBwb3N0ZXIgYXJ0CmJ1cmxlc3F1ZSBlbGYKeW91bmcgYmVhdXRpZnVsCnJlbmFpc3NhbmNlIGRyYXdpbmcKYnVybgpnYW1lIG1hcCBtYXR0ZSBwYWludGluZwpkZXRhaWxlZCBpbnRyaWNhdGUgYmxvY2sgcHJpbnQKZ29kZGVzcyBvZiBkdXN0CmR1c3QgbWFzawpibGFua2V0CnRpY2tldApidXJuaW5nIG92ZXJncm93dGgKaGFiaXRhdCA2NwpkZWFkIGJvZGllcyBpbiBtdWQKZGVhZCBib2RpZXMgc2NhdHRlcmVkIGluIG11ZApsb3cgcmVzb2x1dGlvbiBzeW5jCnJpZGUgaG9yc2UKa3VicmlrCmluIHRoZSAxIDkgMiAyIGZpbG0KYnVzIHN0b3Agb24gYSByYWlueSBkYXkKYnVzdCBvZiBoZXJjdWxlcwp3ZWFyaW5nIGEga2luZydzIGNhcGUKcnVuaWMgZXRjaGluZwpsYXJnZSBvcGFxdWUgdmlzb3IKYnVzdGVyIHN3b3JkCmJ1dHRlcmN1cCBlYXRpbmcgcGl6emEKeCByYXkKc25vdyBsZW9wYXJkCmNhcGl0YWxpc20gcmVhbGlzbQpyZWQgd2FsbHBhcGVyIGJhY2tncm91bmQKd2lsbG93IHBsYW50CnNhaW50IG9mIHRoZSBwaXQKZ29sZCBjb2xvdXJzCnN1YmRpbWVuc2lvbmFsCmRpc3BsYXllZCBvbiBhbiBhbHRhcgppbiBmcm9udCBvZiB0aGUgbW9vbgomIGEgcml2ZXIKZGFyayBmb3Jlc3QgbG9vbXMKZmlsbWluZyB0aGUgdGl0YW5pYyBzaW5raW5nCmVkbXVuZCBibGFpciBsZWlnaHRvbgp0d2l0Y2ggc3RyZWFtZXIgLyBnYW1lciBsdWR3aWcKbnVjbGVhciBib21iIGV4cGxvc2lvbgomIHRoZSBhcnRpc3QgaGFzIHVzZWQgYnJpZ2h0Cmp1ZHkgY2hpY2FnbwpvcmdhbmljIHN0cnVjdHVyZQpjeWJlcnB1bmsgMiAwIDIgMAp2ZXJ5IHZlcnkgYmVhdXRpZnVsIHdvbWFuCnBvc3RlciB2aW50YWdlCmNhZCBkZXNpZ24gb2YgbGF3bm1vd2VyCjEgOCA3IDMKY2FmZSBpbiB0aGUgY2xvdWRzCmJsdWUgdG9uZQpoeW1lbm9jYWxsaXMgY29yb25hcmlhCmNha2UgYXJ0CnNwZWMgLSBvcHMgaGVhZCB3aXRoIG1hc2sKY2Fsem9uZSB6b25lCjEgMCAwIDEgbmlnaHQKZ2Vtc3RvbmVzIGFuZCB0cmVhc3VyZXMKaG9ycmlmeWluZyA6NApzcGlkZXJzISEhIQpuaWdodCB0aW1lIGZvb3RhZ2UKdmFyeWluZyBkb3RzCmNhbW8gbWFkZSBvZiBvdXQgdGVldGgKc2hhcGUgb2YgZnJvZ3MKY2Ftb3VmbGFnZSBtYWRlIG9mIGxvdmUKY2FtcCB4LXJheQpndWFudGFuYW1vIGJheSBwcmlzb24Kc2NyZWVuc2hvdCBmcm9tIHNpbWNpdHkgcGMgZ2FtZQpzb255IGNhbWVyYQpwaG90b2dyYXBoeSBmYXNoaW9uIGVkaXRpb24KY2FuZGlkIHBob3RvIG9mIGdhbCBnYWRvdAp1aGQgLSByZXNvbHV0aW9uCm5vcnRoZXJuIHJlbmFpc3NhbmNlIHN0eWxlCmNhbmR5IGJyYWlucyBhbmQgYnJva2VuIGJvbmVzCmJsYWtlIHJvdHRpbmdlCmF1c3NpZSBiYXJpc3RhcwpjYW5uYWJpcyBwYXJhbm9pYQpjYW5uZWQgZG9nIGZvb2Qgb24gYSBwbGF0ZQp3aGF0c2FwcApzdWJzdGFuY2UgcGFpbnRlciAzZAo4ayB2ZnggcmVuZGVyCndhdGVyIGNhc2NhZGluZwpzY2kgLSBmaSBhcnQhISEhISEhCmNhcGl0YWxpc3QgY2xvd24KY2FwaXRvbCByaW90Cmluc2lkZSBhIGZyZW5jaCBjYWZlCndpdGggYW4gZWFnbGUgZW1ibGVtCmVhZ2xlIGxvZ28Kdmllbm5hIGNpdHkKZXVyb3BlYW4gYnVpbGRpbmdzCmF1c3RyaWFuIGFyY2hpdGVjdHVyZQppbiBkYXJrIGNvcnJpZG9yCnJvY2tzKQpnbmFybGVkCmhvcnJpZmljIGJhY2tncm91bmQKY2FweWJhcmFzIGluIHRva3lvCmdvbGRlbiBob3VyIDRrCmNpbmVtYXRpYyBkZXNpZ24KcG9wIGFydCBzdGFiaWxpdHkKY2FyIGp1bXAKbHV4dXJ5IGhkIHJlbmRlcgpvc2NhciB0aGUgZ3JvdWNoCmNhciB3aXRoIGhvbG9ncmFwaGljIHBhaW50CndoaXRlIGJhY2tncm91bmQhISEhISEhISEhCmNhcmFjYWwgY3lib3JnCmluIGxhdXJlbCB3cmVhdGgKZHJlc3NlZCBpbiBsYXVyZWwgd3JlYXRoCmhhcyBhIGxhdXJlbCB3cmVhdGgKY2FyZGJvYXJkIGN1dG91dCBvZiB0ZW50YWNsZXMKY2FyZGJvYXJkIHBpbmhvbGUgY2FtZXJhCmF0IGEgYmVhY2gKY2FyZGlhYyBhbmF0b215CmZvY3VzIG9uIHRoZSBvYmplY3QKYmlnIGhlYWRzCmNhcmljZSB2YW4gaG91dGVuCmlzb21ldHJpYyBnYW1lIGFydApjYXJuaXZvcmUKa2FyYXRlIG91dGZpdApydWJiZXIgZHVjawp0aGUgc2ltcyA0IHRleHR1cmUKMyBkIHJlbmRlciBjaGFyYWN0ZXIgYXJ0IDggawpzYWQga2F3YWlpIGZhY2UKY2FydG9vbiBmYW50YXN5IHNwYWNlc2hpcApwbGF5aW5nIGEga29yZyBtcy0yMCBzeW50aGVzaXplcgpmbGF0IHZlY3RvciBncmFwaGljCmNhcnRvb24gcGFwZXIgY29mZmVlIGN1cAppbGx1c3RyYXRpb24gbWF0dGUgcGFpbnRpbmcKc3RhbmRpbmcgb24gdHdvIGZlZXQKaW50cmljYXRlIGZsdWlkIGRldGFpbHMKc3VucmlzZSBjb2xvcnMKZ3VpdGFyIGNvbmNlcHQgYXJ0CnRoaXJzdApjYXNzYW5kcmEgY2FpbgpiYXR0bGUgb2YgaGVsbWFuZCBtb2ViaXVzCmNoYWtyYXMKd2F0ZXJmYWxsIGJlbG93CmhpZ2ggbHVtaW5vc2l0eQpzdW5ueSBtaWQgZGF5CmNsYXNzcm9vbSBpbiBiYWNrZ3JvdW5kCmNhc3RsZSBzY2VuZSBtYW5nYQpjb21pYyBib29rIHBhbmVscyBiYWNrZ3JvdW5kCnZlcnkgZGV0YWlsZWQgbWVkaWV2YWwKcGljdHVyZSB0YWtlbiBmcm9tIHRoZSBncm91bmQKb2JlbGlza3MKZGlzZ3Vpc3RpbmcKdWx0cmFyZWFsaXN0aWMgcGhvdG9ncmFwaApmcm9udCB0b3Agc2lkZSB2aWV3CmNhdCBkb2cgaHlicmlkCm1lZGl1bSBsZW5ndGggcGhvdG9ncmFwaHkKY2F0IGRvbmFsZCBydW1zZmVsZApjYXQgZWF0aW5nCmNhdCBlYXRpbmcgcGl6emEKd2Fsa2luZyBpbiB0aGUgd2hlYXQgZmllbGQKc2hhcnAgZGVlcApwcm9kdWN0IGxhYmVsCnBpZSBleWVzCmpvb25nd29uIGNoYXJsZXMgamVvbmcKY2F0IGluIHRoZSBmb3Jlc3QKcXVlc3QgbWFya2VyCmNhdCBvbiBhIHdpbmRvd3NpbGwKc3dlZXQgaG9tZQpzdHlsZSBvZiBoYWppbWUgaXNheWFtYQp0aGljayBibGFjayBsaW5lYXJ0CmNhdCByaWRpbmcgYSBiaWN5Y2xlCmNhdCB3YXJyaW9yCmhpZ2hseSBkZXRhaWxlZCBjaGFyYWN0ZXIgZGVzaWduCmxvbmcgaGFpcmVkIGh1bWFub2lkIGZ1cnNvbmEKY2F0IHNtb2tpbmcgYSBjaWdhcgpvbiB3aWxkIHdlc3QKZW5kcmUgcGVub3bDoWMKb2lsIGxpbmVzCmNvcm9uYSByZW5kZXJlZApkYXJrIGJyb3RoZXJob29kCmNhdGVnb3J5IGIgZmlsbSBwb3N0ZXIKY2F0aGVkcmFsIG9mIHN1bgptb25rcyEhISEhISEhISBmaXJlCnN0YWluZWQgZ2xhc3Mgd2luZG93ISEhISEKdG9wIG9mIGEgY2FueW9uCjUgdGggZmxvb3IKdmVyeSBhdG1vc3BoZXJpYyBsaWdodGluZwpjYXRzIHBhcnR5CjIgNSA2IGNvbG9ycwphZGRpZGFzCmNhcHMgc2lkZXdheXMKZ2l2aW5nIHRoZSBtaWRkbGUgZmluZ2VyCmdsYXNnb3cgaW4gYmFja2dyb3VuZApyYWluYm93IGZ1cgppdGFsaWFuIGZ1dHVyaXNtIHN0eWxlCnVuZ2EgYnVuZ2EKZ2VzdHVyZSBkeW5hbWljCmF0IGEgc2thdGUgcGFyawpnYWxheHkgc3BhY2UgaHVudGVyCnZpbmVzIGFuZCBmbG93ZXJzCmFybXMgb3BlbgpjZWxlc3RpYWwgY29sbGlzaW9uCmNlbGVzdGlhbCBnYXJkZW5zCnllYXIgMiA1IDAgMApiZWtzacWEc2tpIGFuZCBqYW1lcyBqZWFuCmZyYW5jaXNjbyBkZSB6dXJiYXJhbgpzZWFscwpsYXRlIGFudGlxdWl0eQo4IDAncyBtb3ZpZSBwb3N0ZXIgYXJ0CmNlbnRhdXIgZnJvbSBncmVlayBteXRob2xvZ3kKbmVvbndhdmUKdW5yZWFsaXN0aWMgY2hhcmFjdGVyIGNvbmNlcHQKYmxvb20gYW5kIGZsb3dlcnMgaW4gYmFja2dyb3VuZApjaHVjawpnbGFzcyBhbmQgbGlnaHRzCnBldGVyIG1vcmRlbmJhY2hlcgpjZW50ZXJlZCBob3Jpem9uCmZvdiA5IDAgZGVncmVlcwp3aXRoIGEgZmV3IHNjYXJzIG9uIHRoZSB0cmVlCndoaXRlIHBpbGxvd3MKaWxsdW1pbmF0ZWQgbmVvbiBsaW5lcwpob2xkaW5nIGEgcHVkaWNhIHBvc2UKaW50cmljYXRlIG1ldGFsIGFybW91cgp0YWtpbmcgYSBwaWN0dXJlCnNvZnQgM2QgcmVuZGVyCmxpZ2h0bmluZyBiZWluZ3MKZXBpYyBzcGxhc2ggY292ZXIgYXJ0CmNoYWluc2F3IHN3b3JkCmNoYWxldAptYXR0IGdyb2VuaW5nIGNhcnRvb24gYXJ0CidmcmllbmRzJyBlcGlzb2RlIHNjcmVlbnNob3QKY2hhbmRsZXIgYmluZwptYWxmdW5jdGlvbgpnb25kIHBhaW50aW5nCuKdhO+4jyBjb3JydXB0aW9uIGNvbmNlcHRhcnQKYnJhc3MgYXJtb3IKbW9kZWwgbWluaWF0dXJlCnRoaWNrIGRhcmsgc21va2UhCmNoYW90aWMgY2luZW1hdGljIHNwYWNlIHJpZnQKZmVhdHVyZWQgb24gdmltZW8KY291Z2hpbmcKb24gYmx1ZSBmaXJlCmJsdWUgZmlyZSBwb3dlcnMKYWJhbmRvbmVkIG1hbGwgaW4gdGhlIDEgOSA4IDAgcwp3aXJpbmcKc3RhcmNyYWZ0IDIgdmlkZW9nYW1lIGNoYXJhY3RlcgpvcmFuZ2UgYW5kIHRlYWwgY29sb3IKcGxheXN0YXRpb24gMSBlcmEKbmluamFsYQprYWthciBjaGV1bmcKYWJzdHJhY3QgaGlnaCBxdWFsaXR5CmlsbHVzdHJhdGlvbiA4IGsKdmFyaW91cyBsaWdodGluZyBtb29kCnNob3J0IGdyZWVuIGhhaXIKYmx1ZSAvIGdyZXkgZXllcwpjaGFyYWN0ZXIgY29uY2VwdCBwb3J0cmFpdCBvZiBtZQp3ZWFyaW5nIGEgd2hpdGUgd2ludGVyIGNvYXQKYWRvcmFibGUgZGlnaXRhbCBwYWludGluZwpuYXZ5IGxlb3RhcmQgY29zdHVtZQpkYXJrIGJsdWUgbGVvdGFyZCBjb3N0dW1lCndpbGx5IGxvd21hbgpncmVnIHJ1dGtvd3NraSBkZXRhaWxlZApkeXN0b3BpYW4gY2l0eSBhcGFydG1lbnQKaGFuZCBkcmF3biBhbmltYXRpb24KdG9wLWRvd24gc2hvdApnYW1lIGNoYXJhY3RlcnMKd2VhcmluZyBhIHN1aXRzCnByb2ZpbGUgdmlldyBwZXJzcGVjdGl2ZQpqYXBhbmVzZSB2aWxsYSBzeWQgbWVhZAp0YWxsIHRoaW4gZnJhbWUKY29sb3IgZXhwbG9zaW9uCmF6dGVjIHdhcnJpb3IgZ29kZGVzcwpjcm93biBvZiBib2R5IGxlbmd0aCBmZWF0aGVycwpkYXJrIHByaWVzdApibGFjayBoYWxvCmZhc2hpb24gcmVmZXJlbmNlIHNoZWV0CjcwJ3MgamV0ZmlnaHRlciBwaWxvdCBnaXJsCmZyb250IGFuZCBzaWRlIGVsZXZhdGlvbgptdXNjbGVib3VuZCBhbmQgaHVsa2luZwpnbGFtb3IgaGFpcnN0eWxlCjcwJ3MgamV0ZmlnaHRlciBwaWxvdAp1bmRlYWQgd2luZ2VkIGh1c3NhcgpjbGVhciBqdWxpYW4gbGFnZSBmYWNlCmVsZWdhbnQgaGlnaCBhcnQKbHVtaW5lY2VudCBleWVzIGZpbmUgZGV0YWlscwpsaWJyYXJ5IG5lcmQgZ2xhc3NlcwptdWx0aXBsZSB2aWV3cwpkZW1vbmljIGRyYWdvbiBpbnNwaXJlZCBhcm1vcgpkYXZleSBiYWtlcgpncmltIHZpYnJhbmNlIG9yaWVudGFsaXNtCm9uY2VwdCBhcnQKY2hhcm1pbmcgc2x5IHNtaWxlCmNoYXJhY3RlciBwb3J0cmFpdCBvZiBnb2R6aWxsYQpjaGFyYWN0ZXIgcG9ydHJhaXQgb2YgbWUKaW50byB0aGUgc3BpZGVyIHZlcnNlCmdyaW0gZGFyayBvcmllbnRhbGlzbQpoYWxmLXBsYXRlIGFybW9yCmRpYWxvZwpmZW1hbGUgYXJtb3IKcHMgMyB2aWRlbyBnYW1lCmNvbG9yZnVsIGZlcnJvZmx1aWQgYXJtb3IKZmVycm9mbHVpZCBhcm1vcgpibGFjayB0byBsaWdodCBwaW5rIGZhZGUgaGFpcgprLXBvcAoxOTYwcyB0ZWNobmljb2xvcgpmcmFuY2lzIGJhY29uIGFuZCBqZW5ueSBzYXZpbGxlCnNpY2tseQphdCBoaWdoZ2F0ZSBjZW1ldGVyeQpjaGFyaXphcmQgZG9nIGh5YnJpZCBhbmltYWwKYXJ2YWxpcwphcmsgc3Vydml2YWwKb21pbm91cyBiZWF1dGlmdWwgbW9vZApoZCAtIHBob3RvCjggMCDigJkgcyBwb3J0cmFpdAozIDUgbW0ga29kYWsKc3BhcmtsaW5nIGNyeXN0YWxzCnN1bnNldCBoYWxvIGFyb3VuZCBoZXIgaGVhZApkZWNvcmF0ZWQgb3JuYW1lbnRzCm1hbiBob2xkaW5nIHNwZWFyCnBvbGFyaW9kCm5lYXQgaW50cmljYXRlIGJyYWlkZWQgaGFpcgpjaGVlc2UgcmV2b2x1dGlvbgpjaGVtaWNhbCB3b2Vrc2hvcApsb2ZpIGFydHN0eWxlCm5lb24gcmFpbmJvdyBkcmlwIHBhaW50CmhhbGYgc2t1bGwgaGFsZiBmYWNlCnB1dHRpbgpxdWVlbiBvZiBlbmdsYW5kCmltcHJlc3Npb25pc3QgZHJhd2luZwpjaGVzc2JvYXJkIHNjaWVudGlzdApnYW1lciB0aGVtZWQKbWFnaWNhbCByZWFsaXN0Cm1hbGUgYW5pbWUgY2hhcmFjdGVyCmNoaWVmIGtlZWYgaW4gdGhlIGdhcmRlbiBvZiBlZGVuCmNvZGluZyB0aW1lCmNoaWhpcm8hIGZ1amlzYWtpCmNoaWh1YWh1YQpjaGlodWFodWEgaG9sZGluZyBhIGNhbWVyYQpjaGlsYXF1aWxlcwpjcmF6aW5lc3MKYmVhdHJpY2UgYmx1ZQpjaGlsZHJlbiBwbGF5Z3JvdW5kCmNoaWxkcmVuIHBsYXlpbmcgd2l0aCBwb2dzCmNodWNreQpwaG90byBvZiB3b2xmCnBob3RvIG9mIGNyb2NvZGlsZQpjeWJlcnB1bmsgdHJhbnNodW1hbmlzdAp0cmVuZCBvbiBiZWhhbmNlIDMgZCBhcnQKY2hpbmVzZSBlbXByZXNzCnVwIHNob3QKbGVucyB6b29taW5nCm90Y2VhbiByZW5kZXIKamFtZXMgZ3VybmV5IGNpbmVtYXRpYyBsaWdodGluZwpjaGlubmVzZSBtYWZpYQptYW5nYSBjb21pYyBib29rIGNvdmVyCmNocmlzIGV2YW5zIGhhdGNoZXMgZnJvbSBhbiBlZ2cKamogYWJyYW1zCmNocmlzdCB0aGUgcmVkZWVtZXIKdGUgcGFlCmZyaWxseSBvdXRmaXQKY2FueW9uIGJhY2tncm91bmQKc3dlYXR5IGluc2FuZQpwb3NlIDEgb2YgMSA2CnBvc2UgNCBvZiAxIDYKYW1wbGUgbGlnaHRpbmcKaW50ZW5zZSBmYW50YXN5CmNocmlzdG9mIHJvbXVhbGQKY2hyaXN0b3BoZXIgbGxveWQgYXMgdGhlIGpva2VyCmhhc3NlbGJsYWQgbWVkaXVtIGZvcm1hdCBjYW1lcmEKbG9raSBob3JucwpibHVlIGJsdXJyZWQKd2VhcmluZyBza2lydApyb2J1c3Qgc3RvY2t5IGJvZHkKbWVhbiBleHByZXNzaW9uCmZ1bGwgYm9keSBhbmdsZQpzdW4gZGFwcGxlZApjaHVwYWNhYnJhCmNodXJjaCBpbiB0aGUgd29vZApjaWJlcnB1bmsKY2lkZXIgLSBtYW4KY2luZW1hIDRkIGJyaWdodCBsaWdodCByZW5kZXIKYXBlcyBoYW5naW5nIGZyb20gdmluZXMKcHJvbWV0aGV1cyBlbmdpbmVlcmluZwo0IGQgY2luZW1hCmFybW9yZWQgY29yZSBzdHlsZSBtZWNoYQpibGFjayBib3kgc2hvcnRzCnN1cGVydmlsbGFpbiBzb3JjZXJlc3Mgd2l0Y2gKYmxhY2sgdG8gcHVycGxlIGZhZGUgaGFpciBjb2xvcgpzb3JjZXJ5IG1hZ2ljIHdpdGNoIGJhdHRsZQp0ZWNoLW5vaXIKc2hlaWtoCmtpc3NpbmcgdG9nZXRoZXIKY2luZW1hdGljIGNsb3NlLXVwIGJ1c3Qgc2hvdAptZXRhbCBjYXQgZWFycyBhbmQgZ2xvd2luZyBleWVzCnNoaW5pbmcgc3dvcmQKY2luZW1hdGljIGNvbmNlcHQKamFwYW5lc2UgdmZ4CnR3byBrbmlnaHRzIGdhdW50bGV0cwpkYXJrIHJlZCBiZWFyZApkZXRhaWxlZCB3aGl0ZSBhcm1vcgpzaGFycCBtYXdzaG90CmhvbGRpbmcgYSB0aW55IGdhbGF4eQpob2xkaW5nIG9udG8gYSBnYWxheHkKaG9sZGluZyBlZ28gd2VhcG9ucwpyZXZlcmllcwpnbG93aW5nIGVwaWNlbnRyZQpjb252ZXJzYXRpb24gcGl0CmFtdXNlZApjaW5lbWF0aWMgamVubmlmZXIgbGF3cmVuY2UKaW50cmFjYXRlIGRldGFpbApkb25hbGQgdHJ1bXAgYXMgYmFyb24gaGFya29ubmVuCm9vemluZyBiaWxlICkKdGhlIGxhc3Qgb2YgdXMgem9tYmllCmNpbmVzdGlsbCA4IDAgMCB0IDMgNSBtbSAxIDkgOCA5CnR3aWxpZ2h0IGluIHRoZSBjaXR5CiEgbW9uc3RlciBhbmF0b215IQpmZXkKZGVuaXMgdmlsbGVuZXV2ZSBmaWxtIGxvb2sKYmxhZGUgcnVubmVyIHNldApvYWsgbGVhdmVzISEKMyA1IG1tIGtvZGFrIGNvbG9yIGZpbG0KMyA1IG1tIGtvZGFrIGNvbG9yIGVrdG9jaHJvbWUKZGVhZCB3b21lbgpkZWFkIGNoaWxkCmRlYWQgb2xkCnRpZWQgLSB1cCBzaGlydAphcGFydG1lbnQgc2V0IGluIHRoZSBuZWFyIGZ1dHVyZQptYWdpYyBhcnQgZmxvd2luZyBmcm9tIGhhbmRzCmxhcmdlIHRyYW5zbHVjZW50IGFydCBzdGF0dWVzCmJlYXV0aWZ1bCByYW5kb20gaW1hZ2VzCmJlYXV0aWZ1bCBzaW5ndWxhcml0aWVzCmZhbmN5IGFwYXJ0bWVudAphbWJpZW50IGdyZWVuIGxpZ2h0CnJ1c3NpYW4gb3JiaXQgY2l0eSBjaXR5c2NhcGUKZ290aCBwZW9wbGUgZGFuY2luZwptb29keSBzdHJhbmdlIGNpbmVtYXRvZ3JhcGh5CnVucmVhbCA1IGVuZ2luZSByZW5kZXJlZAp2b3Jlc3RhdGlvbiBib3JnIGhvdW5kCm1lZGljYWwgbWVjaGEgY2FuaW5lCmNpbmVtYXRpYyBzaWxrIHJvYWQgbGFuc2NhcGUKISBiYXJvbiBoYXJrb25uZW4hCmltcGVyaWFsIG9mZmljZXJzIGluIHdoaXRlCndpbmRvdyBpbnRvIHNwYWNlIGJlaGluZCB0aGVtCm9ybmF0ZSBwYXR0ZXJuZWQgcGVvcGxlCmhpZ2hseSBhY2N1cmF0ZSBmYWNpYWwgZmVhdHVyZXMKdHJlbmR5IGNsb3RoZXMKYmV0d2VlbiB0d28gY2hhaXJzIG92ZXIgYSB0b2lsZXQKZnVsbCBjb3N0dW1lCnNvbWUgYnVsYiBsaWdodHMKY2luZW1hdGljIGNvbnRyYXN0ZWQgbGlnaHRpbmcKbWlkIHRvbmUKYmFyYmllIGN5Ym9yZwp1bnJlYWwgZW5naW5lIDUgcmVuZGVyIGRyYW1hdGljCmRyYWdvbiB2b3JlIGFydApla2FzIHBvcnRhbApkeW5hbWljIGRyYW1hdGljIGlnaHRpbmcKZmxvYXRpbmcgcG93ZXIgY2FibGVzCndoaXRlIHBhbGUgY29uY3JldGUgY2l0eQp0aGUgYnVpbGRpbmdzIGFyZSBvbiBmaXJlCjIgdGVjaHdlYXIgd29tZW4KaGFpciBsaWtlIGRhcmsgY2xvdWRzCndpbmR5IG1vb2QKbWF0dCBtdXRlIGNvbG91ciBiYWNrZ3JvdW5kCndoaXRlIGhhaXIgZmxvYXRpbmcgaW4gYWlyCnNvZnQgYmx1ciBsaWdodApjbG9zZSAtIHVwIHNob3Qgb2YgZXllcwpodW1hbiB0b3J0dXJlCmNpbm1hdGljIHNob3QKbWFycXVpcyBjdXQKaGlnaGx5IGRldGFpbGVkIGhlYWQKc2FuZCBjb2xvcgpjdXJ2aW5nIGJsYWNrCnNpbXBsZSAyZCBmbGF0IGRlc2lnbgpjaXJjdWxhciB0b3dlcnMKY2lyY3VzIHBlcmZvcm1hbmNlCmZhY2UgcGllcmNpbmdzCmRzbHIgNSAwIG1tIHBvcnRyYWl0IHBob3RvCmNpcm5vIHRvdWhvdQp0aHJvd2luZyBzcGFnaGV0dGkgYW5kIG1lYXRiYWxscwpjaGlhbnRpIG1vbG90b3YgY29ja3RhaWxzCmJsYWNrIHN0YXJzCmNpdHkgZm9nCndoaXRlIGZsdWZmeSBjbG91ZAptb25vY3VsYXIKZ3Jhdml0eSBmYWlsaW5nCmNpdHkgb2YgZ29sZGVuIHNoYWRvd3MKY2l0eSBvZiB0aGUgZnV0dXJlIGluIHJ1c3NpYQpjaXR5IHBhcmsgd2l0aCBmbG93ZXJzCmRldGFpbGVkIGJhY2tncm91bmRzCmNpdHkgc3RyZWV0c2NhcGUKcGVvcGxlIGF0IG5pZ2h0Cm5lb24gbGlnaHRzIGFib3ZlIHNob3BzCmNpdHlzY2FwZSBpbiBzdHlsZSBvZiBiYXNxdWlhdApwbGF0Zm9ybWVyCmluc2lkZSBhIGNoaWxkJ3MgYmVkcm9vbQpjaGVmIGhhdAppbnNpZGUgYSBjYXN0bGUgY291cnR5YXJkCmluc2lkZSBhIGNsdXR0ZXJlZCBraXRjaGVuCmNvb2wgdGVtcGVyYXR1cmUKbmV1dHJhbCB0b25lcwpkaW0gYmVkcm9vbQprbmljayAtIGtuYWNrcwpydWJibGVzCmV2YW5lc2NlbmNlCmZsYXR0ZXJpbmcgaGFpcgp3aXRoIGNyb3duCnNpbGtzY3JlZW4gcHJpbnQKY29vbCBwdXJwbGUgc2xhdGUgYmx1ZSBsaWdodGluZwp0aGVyZSBpcyBhIGxvb3NlIHdpcmUgbWVzaApuaW5ldGllcyBwaG90b2dyYXBoeQpvdXRkb29yIHNjZW5lCmxpZ2h0IHBsYXRpbnVtIGxvbmcgYmxvbmQgaGFpcgpsdW5hciBjeWNsZXMKbW92aWUgbW9uc3RlcgpjbGVhciBibHVlIHdhdGVyCmNsYXNzaWMgZ3VpdGFyCmhpZGVvdXMgYXBwZWFyYW5jZQpxd2VrIGRvbQppcmlkZXNjZW50IGFuZCBnb2xkZW4Kc29tYmVyIGFwcGVhcmFuY2UKbG9va2luZyBoZXIgc2hvdWxkZXIKaGlnaCBjb2xvciBzYXR1cmF0aW9uCmNsaWZmIHNpZGUgYXQgZHVzawppcm9uYm9ybgppbiByb2JlcwpuaWtvbGF5CnJldHJvIG1hY2hpbmVyeQpleWVzIHNob25lIGJyaWdodCBpbiB0aGUgbmlnaHQKY2xvY2t3b3JrIHdvbWFuCmNvenkgbGlnaHRzCmh5cGRlcnRhaWxlZAptYXNzaXZlIGNyb3dkCnBob3RvIHJlYWwgdWx0cmEgaGlnaCBkZXRhaWwKYnJpZ2h0IGFuZCBzYXR1cmF0ZWQgcGFsZXR0ZQpoZWJyZXcKd2FsbHBhcGVyIGZvciBtb25pdG9yCmFudGhvbnkgbWFjYmFpbgpjcmF3bGluZyB0b3dhcmRzIHRoZSBjYW1lcmEKc21hbGwgZmlyZQpiZWF1dGlmdWwgbGlnaHQgcmF5cwp3b3JyeQpmaXJlZmxpZXMgaW4gdGhlIGFpcgpnbGFzcyByb29tCmNsb3NlIC0gdXAgb24gZGV0YWlsZWQKd2VhcmluZyBjbG9hayBvbiBibGFzdGVkIHBsYWluCnBpbmsgYW5kIG9yYW5nZSBjb2xvcnMKZiAxLiA4IDggNSBtbSB6ZWlzcyBsZW5zCmludHJpY2F0ZSBjeWJvcmcgYXJtb3IKa2ltaXRha2UgeW9zaGlva2EKY29sb3JlZCBmcnVpdCBzdGFuZApzdGFuZGluZyBhdCB0aGUgcmVzb2x1dGUgZGVzawpkZXJlbGljdCBzcGFjZSBzaGlwCnB1cnBsZSBjbG90aApzYXZhZ2UgbW9uc3Rlcgptb3NzeSBydWlucwpjbG9zZSBwb3J0cmFpdCBvZiBiZWF1dGlmdWwKaXNvIDEgMCAwIHdpZGUgdmlldwpzdXBlciBsZW5zCmluYXVndXJhdGlvbgp0b2t5byBhbmltZSBzY2VuZQpicm9rZW4gcnVpbiBwYWNpZmljIHJpbSBqYWVnZXIKaW4gdGhlIGZsb3cgb2YgdGltZQp3YXJtIHN1bnNoaW5lCnZlcnkgc2xpZ2h0bHkgc21pbGluZwp3YXZlIGEgaGFuZCBhdCB0aGUgY2FtZXJhCmNsb3NlIHVwIGJ1c3Qgc2hvdAptYXNzaXZlIDcgMCBzIGhpIGZpIHN5c3RlbQpzaGFycCBmb2N1cyAzIGQKY2xvc2UgdXAgZ3VucyBhbmQgcm9zZXMK4oCYem9vdG9waWHigJkKY29tcGxpY2F0ZWQgY2lyY3VpdHMgYW5kIHdpcmVzCmdhemluZyBkYXJrIGJyb3duIGV5ZXMKZ3VuZ3JhdmUKdHJpIC0gZ3VuCmZ1dHVyaXN0aWMgcHJvZHVjdCBjYXIgc2hvdAphY3Rpb24gc3BvcnRzIHBob3RvZ3JhcGh5CnBvc2luZyBpbiBkcmFtYXRpYyBsaWdodGluZwpjYXR3YWxrIHBob3RvCnBsYXN0aWMgdGV4dHVyZQpyYXlzIG9mIGJsdWUgbW9vbmxpZ2h0CmEgYnVsbGV0cHJvb2YgdmVzdApkaXNuZXkgcGl4YXIgd2V0YQpzdW1tZXIgb2x5bXBpY3MgZm9vdGFnZQpmbHVmZnkgZm94IGVhcnMKMSA4IDAgMCBzIHNvbGRpZXIKemR6aXNsYXcgb2lsIG9uIGNhbnZhcwo3IDAgcyBjaW5lc3RpbGwKbWVyZXQgZWxpc2FiZXRoIG9wcGVuaGVpbQpyZW1lZGlvcyB2YXJvIHVyYW5nYQpvbiBkZWVwIGJsYWNrIHZlbHZldAo0IDAgMCBtbSBsZW5zCmNsb3NlIGNhbWVyYQpmYW50YXN5IGlsbHVzdHJhdGlvbnMgY292ZXIgYXJ0CmNyb3NzaW5nIHRoZSBibHVlIGhvcml6b24KdmVyeSB0aGlyc3R5CnNtaWxlIHdpdGggbGFyZ2UgZnJvbnQgdGVldGgKaGFwcHkgaW50cmljYXRlCmF0dHJhY3RpdmUgYnJvd24gaGFpciB3b21hbgpicm93biBoYWlyIHdpdGggbGlnaHQgYmx1ZSBlbmRzCmNsZWFyIGxpbmVzIGFuZCBjbGVhciBzaGFwZXMKbG90cyBvZiBmdXIKbW9vbiBiYWNrbGlnaHQKa25pZmUgLSBsaWtlIHRlZXRoCnJvdW5kIGNvbmNoIGZyYWN0YWwgaG9ybnMKaW5zZWN0IGFudGVubmFlLiBqYW4gdmFuIGV5Y2sKZmFjZSBpbiBmb2N1cyAxIDggOSAwJ3MKc2hhZGVzIGdyZWVuIGFuZCByZWQKYW5pbWUgc3RpbGUKdG94aWMgc21pbGUuIGphbiB2YW4gZXljawpzdHJvbmcgYW5kIGZlcm9jaW91cwpkZWNvcmF0ZWQgY2l2aWwgd2FyIHZldGVyYW4KeWVsbG93IHB1cGlscwp3aXRoIHNjZXB0ZXIgYW5kIGNyb3duCnN3aXJseSBsdW5hciByaXBwbGVzCmluIGhvdXNlCnN0cmFuZ2UgaW5ncmVkaWVudHMgb24gdGhlIHRhYmxlCmNsb3NlIHVwIHNob3Qgb2YgYW4gYW11bGV0CmJsYWNrIGFuZCB3aGl0ZSBwb3J0cmFpdApvbGQgbWFuIGluIHRva3lvIGF0IG5pZ2h0CnBvcnRyYWl0IG9mIGEgbXVzY3VsYXIgbWFuCndhcm0gZGltIGxpZ2h0CmN5YmVybmV0aWMgbWFjaGluZSBmZW1hbGUgZmFjZQpjbG9zZS11cCBvZiBhIHJvYm90IHNpdHRpbmcgZG93bgpwbGF0YWZvcm0gZ2FtZQpibHVycnkgcGx1bWUgc21va2UgYXQgYmFja2dyb3VuZAptYW5nYSBwYWludGluZwooc25vd3kgbmV3IHlvcmsgaW4gYmFja2dyb3VuZCkKd2VhcmluZyBsb25nIHJveWFsIHJvYmUKd2l0aCBzdHJhaWdodCBibGFjayBoYWlyCndpdGggaGlnaCBjaGVla2JvbmVzCndpdGggbmFycm93IG5vc2UKdHdvIHBpZ3RhaWxzIGhhaXJzdHlsZQp3aXRoIGEgY3V0ZSB0b2FkCmF0IHRoZSBwYXJ0eQppbnRlcnN0ZWxsYXIgbmlnaHQKc3VidGxlIG5lb24gdW5kZXJsaWdodGluZwpzbWFsbCBwYXRoIHVwIHRvIGRvb3IKZm9nIGFuZCBkdXN0Cm1lYWRvdyBiYWNrZ3JvdW5kCmdvbG9uZHJpbmFzCnN0eWxlIG9mIHBpY2Fzc28KbmVvbiBzcGFya2xlcyBldmVyeXdoZXJlCmNvenkgc3R1ZGlvIHBob3RvZ3JhcGh5CmV4Y3JlbWVudApub2JvZHkKb3AgYXJ0IGJyYWluCmRhcmsgZmxvd2VyIHNoYW1hbgp0cmF2ZWxpbmcgdGhyb3VnaCB0aGUgbW91bnRhaW5zCnZhbXBpcmUgaHVudGVyIGQKY2xvc2V1cCBvZiBhIHNub3cgb3dscyBmYWNlCjMgNSBtbSBmIDEuIDIKY2xvc2V1cCBvZiBhbiBhZG9yYWJsZQptb3NzIGNvdmVyZWQKdmFsdmUgcHJvbW90aW9uYWwgc3BsYXNoIGFydApnaW5nZXJicmVhZCBwZW9wbGUKdG9hc3QKemR6aXNsYXcgYmVrc2luc2tpIGFuZCBjYW5hbGV0dG8KY2xvc2V1cCBvZiBtYWdpYyB3YXRlciBnYXRlCmFybWFuaQpzd2VhdHkgc2tpbiEhCmNsb3NldXAgcGFpbnRpbmcgb2YgYmVlCmJ3IHBob3RvCnZpbGxhZ2UgaG91c2UKZXllIGNsb3NldXAKY2FwdHVyZWQgb24gaXBob25lCmRyYW1hdGljIGNpbmVtYXRpYyBwZXJmZWN0IGxpZ2h0CnN1cyBndXkKaW4gYSBmdXR1cmlzdGljIGRlc2VydCBwYWxhY2UKY2hpbmVzZSBuZXcgeWVhciBpbiBzaGFuZ2hhaQpoYWxvIGhhbG8gaGFsbyBoYWxvIDhrCnlvdW5nIGFzaWFuIHdvbWFuCmZyYWN0YWwgaXZvcnkgY2FydmVkIHJ1ZmYKY2xvc2V1cCBwb3J0cmFpdCBvZiBhbiBtYWdlCnNpbHZlciBzcGFjZSBzdWl0CmhpcHBvIGZhY2UgbW9ycGhlZApiZWF1dGlmdWwgc3VjY3VidXMKbGF3eWVyIHN1aXQKcG9va2EKbGF5ZXJlZCBza2lydHMKY29waW91cyBqZXdlbHJ5CmRpcnR5IGdyZWVuIGNsb3RoZXMKbmVjayBzaGFja2xlCmV4YWdnZXJhdGVkIHRleHR1cmUKZ2lybCBpbiBzdWl0CmdpYW50IHRhcmRpZ3JhZGUKaHVnZSByb3NlIGZsb3dlciBmYWNlCmxhcmdlIHJvc2UgZmxvd2VyIGhlYWQKYnJpZ2h0IHNhdHVyYXRlZCBjb2xvcnMKYmVhdXRpZnVsIHdhdmVzIGluIHNlYQpzaWxrIGNvbG9ycwp3aWRlIHNraXJ0cwpsb29zZSAtIGZpdHRpbmcgYmxvdXNlcwplbGFib3JhdGUgaGFpcnN0eWxlcwpmbG9hdGluZyBjaXR5IGluIHRoZSBza3kKaHVkc29uIHJpdmVyIHNjaG9vbCBzdHlsZQpjbG91ZCBzdG9yYWdlCm1hdGVyaWEKZGV0YWNoZWQgc2xlZXZlcwpiZWF1dGlmdWwgZGVjYXkKY2xvd24gZGFydGggdmFkZXIgaHlicmlkCm9jdGFuZSByZWFscGhvdG8KbWlkIGJvZHkgc2hvdApwb2xpdGljaWFucwpzdHJlYW1zIG9mIGZsb3dpbmcgbGlnaHQKc3BsYXNoIGhvdXNlCmltcGVyaWFsIGJydXRhbGlzdCBiYXNlCnZlY3RvciBiYXNlZApsYXJnZSBhbnRlbm5hZQp2cyBzdHVkaW8KLSA5CmNsYXNzaWMgdmliZXMKY3ViaXN0IHBpY2Fzc28KbHluY2hpYW4hISEhIG9taW5pb3VzCmNvZ25pdG9oYXphcmQKbmlja2kgbWluYWogY3VydnkKY29pbiB3aXRoIHRoZSBsZXR0ZXIgbgpsb3ZlIHRoZW1lCmR1c3R5IG9sZCBmZXJyb3R5cGUKY29sbGFnZSBzdHlsZSBqb3NlYmEgZWxvcnphCnN1bmxsaWdodAppbnZpc2libGUgd29tYW4KaG9sZHMgYSBzbWFsbCBrbmlmZSBpbiBoYW5kCm1vb2R5IDo6IHN0dWRpbyBnaGlibGkKc21hbGwgZ2FkZ2V0CmVzcGlyaXR1cwpicnVqZXJpYQpmb3RvZ3JhZmlhIGJsYW5jbyB5IG5lZ3JvCnNwaXJpdHMgY292ZXJlZCBpbiBkcmFwZXJ5CnJhaW5pbmcgYXNoCnN1YnVyYgpiZWF1dGlmdWwgbGF2YSBsYW5kc2NhcGUKbWF0ZXJpYWwgYXJ0CmlucHV0cwpvdXRwdXRzCmNvbG9yIGZpbG0gcGhvdG9ncmFwaHkgMTk3MHMKMiAwIDEgNC4gbW9kZXJuIGF0dGlyZQpjb3ZlcmVkIGluIG9pbApubyBleWVicm93Cmxvb2sgbGlrZSBzb21lb25lIGlzIGRhbmNpbmcKaW5zdGFudCBwaG90b2dyYXBoeQpjb2xvciBhY2N1cmF0ZQphbmd1bGFyIHNoYXBlcwpjb2xvcmVkIG1pbGsgdGVhCjggayBwaG90b3JlbmRlciByZWFsaXR5ZW5naW5lCmZhdCB3b21hbgo1IDUgeW8KMSA5IDcgNSBwaG90bwppbm5vY2VudCBsb29rLiByaWNoIHZpdmlkIGNvbG9ycwpicm93biBsb25nIGhhaXIgd2l0aCBiYW5ncwp3ZWFyaW5nIHJlZCBhbmQgeWVsbG93IGNsb3RoZXMKc3dhc2hidWNrbGluZyBhbmQgcm9tYW50aWMKYXdhcmQgLSB3aW5uaW5nIGVwaWMgcGFpbnRpbmcKc2VjdXJpdHkgcm9ib3RzIGRlbGl2ZXJ5CjJkIGdhbWUgYXNzZXQKcGVvcGxlIG9uIHRoZSBncm91bmQKY29sb3JmdWwgZG9vZGxlIGFydApmYWNlIGRvb2RsZXMKZGFuY2UgbXVzaWMgc2hvdwpnbG93aW5nIHdpdGggbWFnaWMKdiA4IGsKbWFkZSBpbiBhZG9iZSBpbGx1c3RyYXRvcgppbiBhIGNodXJjaC4gYXJzdGF0aW9uCmNvYmJsZXN0b25lIHN0cmVldHMKbG9uZSBwZXJzb24gaW4gdGhlIGRpc3RhbmNlCmRhcmsgc2NpZW5jZSBmaWN0aW9uIG1vdmllCm1hcnkgZGVsYW55CmNvbG9yZnVsIGRhcmsgdmVjdG9yCnBhaW50ZWQgbWV0YWwgYW5kIGdsYXNzCmdvZGRlc3Mgb2YgZ3JlZWsgbXl0aG9sb2d5CnNtb290aCBsaWdodCBzaGFkaW5nCmhhcGhhemFyZApmb3Jlc3Qgc291bApvcGFsZXNjZW50IG5pZ2h0IGJhY2tncm91bmQKY29sb3NzYWwgZmx1ZmZ5IHRhcmRpZ3JhZGUKcHN5Y2hlZGVsaWMgc21va2UgYmFja2dyb3VuZApjb2xvdXJmdWwgYmlvbW9ycGhpYyBvcGFydApjb2xvdXJmdWwgY3VwY2FrZQpjbHVzdGVyZWQKOCBrIHBvc3QgcHJvY2Vzcwpnb2xkIGdhdGVzIG9mIGhlYXZlbiEhISEhISEhCmNsb3VkcyBvbiBncm91bmQhISEhIQpmb2chISEKaXNvbGF0ZWQgd2hpdGUgYmFja2dyb3VuZApiYWQgZHJvbmUgY2FtZXJhCmJyb2tlbiBjYW1lcmEgY29sb3JzCnZlcnkgZHluYW1pYwptaWxpdGFyaXNtCmd0YSA1IGNvbWljcwpjb21lCnRyYXZlbGluZyB0aHJvdWdoIHRpbWUKc3RyZWV0IHByaW50ZWQgcG9zdGVyCndoaXRlIHNrZXRjaCBsaW5lcwp0aGUgYW1hemluZyBzcGlkZXIgbWFuIDIKc2NpLWZpaXNoCndlYXJpbmcgZGlydHkgcmlwcGVkIGZsaWdodCBzdWl0CmNvbWljIGJvb2sgc3R5bGUgYmF0dGxlbWVjaApwcm9jcmVhdGUgMiAwIDIgMgpjb21taXNzaW9uIG9mIGZyZWRkeSBmYXpiZWFyCmRvbWluYXRpbmcgcmVkIGNvbG9yCmJsdWUgc2lsdmVyIGFuZCBibGFjawpzaWx2ZXIgZ29sZCBmcmFjdGFsIGRldGFpbHMKYmlvbWVjaGFuaWNhbCBwYXR0ZXJuCnRyYW5zcGFyZW5jeSBnbGFzcwpwbGFzdGljIHNlYSB3cmFwcGVkCmdyZWVuIHNsaW1lCm5lb24gc3RyZWV0CmhhbmR3cml0dGVuIGVxdWF0aW9uIGhlYXZlbgpjYWxsaWdyYXBoeSBmb3JtdWxhCmdsb3dpbmcgcGVvcGxlCmNvbXBvc2l0aW9uIG9mIGFuZCBmdXR1cmlzdGljCmFjdGl2aXR5IHdpdGggZmlnaHQgb24gc3dvcmRzCmN5YmVyIGZpZ2h0IGFybW9yCnNvbWUgcHVycGxlIGFuZCBibHVlCmZpcmVyc3Rvcm0KMyAzIG1tCmNvbXB1dGVyIHZpc2lvbgpsaWdodCBncmV5IGJsdWUgYW5kIGdvbGRlbgpodWdlIGFuZCBtZWdhbGl0aGljCnN0cmVzc2Z1bCBhdG1vc3BoZXJlCnJlZGRpc2ggZXh0ZXJpb3IgbGlnaHRpbmcKc3Vuc2V0IGdsb3cK8J+agPCfmoDwn5qACmNvaW4gb2Ygc2VjcmV0IHNvY2lldHkKbWlsbGlvbmFpcmUgdGVjaG5vY3JhdApjb25jZXB0IGFydCBjaGFyYWN0ZXIgc2hlZXQKc2xlbmRlciBmaWd1cmUKY3VwIG9mIGNvZmZlZQppbiBzdHlsZSBvZiBkaXNuZXkgYW5pbWF0aW9uCm1hcmF1ZGVycyBtYXAKcGxhZ3VlIG1hc2sKbmF0dXJhbCBtdXRlZCB0b25lcwp3ZWFyaW5nIGEgc3BhY2UgaGVsbWV0CmQgJiBkIGNyZWF0dXJlCmJsZW5kZXIgMyBkIDggawp5b3VuZyBidXNpbmVzcyB3b21hbgppdCBoYXMgc2l4IHRocnVzdGVycyBpbiB0aGUgYmFjawpkZW1vbmljIG1vbnN0ZXIKY2luZW1hdGljIGRyYW1hdGljIGxpZ2h0cwpjeWJvcmcgcm9ib3QgcGFydHMKb2RlbwppbiBkYW5nZXIKfCB8IGVwaWMgLSBmaW5lIC0gY2xlYW4KZXhwcmVzc2l2ZSBkaWdpdGFsIGFydApkcmFtYXRpYyBjaW5lbWF0aWMgc2hvdAptYW5nbGVkCmdsYXNzIGFybXMKaW5kdXN0cmlhbCBzdXJyb3VuZGluZwpwYWludGVkIHBhbGUgeWVsbG93IGFuZCBncmVlbgpvbGQgdHYgYW5kIHJhZGlvIGhhcmR3YXJlCmZ1bGxib2R5IHNob3QgdHVybmFyb3VuZApidXNoZXMgYW5kIGxlYWZzCnJ1c3R5IHZlaGljbGVzCnNpbGhvdWV0dGVzIG9mIHBlb3BsZQozIGQgLSBjb25jZXB0CmJyaWdodCBnbG93aW5nIGluc3RydW1lbnRzCm1hcmMgYnJ1bmV0CmNvbmNlcHQgYXJ0IG9mIGdvZAphcG9jYWx5cHRpYyByb2FkIHdhcnJpb3IgdmliZQpzZW4gbm8gcmlreXUKZGVhdGggKyByb2JvdHMgc2VyaWVzIG9mIG5ldGZsaXgKY29uY2VwdCBhcnQgb2YgcGlrYWNodQpjb250cmFzdCBpY29uCmNhc3VhbCBzdHJlZXR3ZWFyCnN0dWRpZXMKcGVuY2lsIGFuZCBpbmsgZHJhd2luZwpmdXR1cmlzdGljIHNwYWNlc3VpdAptYWdlbnRhIHRyZWVzCmRlZXIgZWFycwppbiBhIG1vdW50YWluIHZhbGxleQpkZWxpY2F0ZSBzb2Z0IGhhenkgbGlnaHRpbmcKZGVsaWNhdGUgZXllYnJvd3MKaGFuZHNvbWUgYW5kIGVsZWdhbnQKbXVzaydzIG1hcnMgbWlncmF0aW9uIHByb2dyYW0Kd2hhbGVzIHNob3dpbmcgZnJvbSB0aGUgd2F2ZXMKZHJhZ29uLXNoYXBlZCBodW1hbgpjdWJhbiB3b21lbiBpbiBoYXZhbmEKdGl0YW5mYWxsIDIgZ2FtZQpkZXRhaWxlZC4gaW5zZWN0IGxpa2UKZnV0dXJpc3RpYyBzdGFyc2hpcAo0NSB5ZWFycyBvbGQgbWVuCndvbWFuIGhvbGRpbmcgc2lnbgpjb2xsYXBzZWQgYnVpbGRpbmcKZ2xvd2luZyByb2JvdCBtb3RpZnMKdGhvcm5zIGFuZCB2aW5lcy4gZGV0YWlsZWQKZnV0dXJlIGhpZ2ggLSB0ZWNoCnVhdgpleG9za2VsZXRvbiBwb3dlciBhcm1vcgpsYXVuY2ggdHJhY2tpbmcgbWlzc2lsZXMKY29uY2VwdCBjaGFyYWN0ZXIgc2hlZXQKZmFkaW5nIHRvIGR1c3QgYW5kIGxlYXZlcwpjb25jZXJ0IGhhbGwKcm9ib3RpYyBvY3RvcHVzCm9mIGhhcmxleSBxdWlubgpyZWxheGluZyBlbnZpcm9ubWVudApsaWdodGluZyBvbiBjb25jcmV0ZQpjb25lCmphcGFuZXNlIHZocyBjb3ZlciBhcnQKd2Fsa2luZyBjb25maWRlbnRseQpjcm9zcy1leWVkCmNvbmZ1c2luZyBwZXJzcGVjdGl2ZQpiYXRtYW4gZm9yZXZlciAxIDkgOSA1CnNhbWUgYm9keQp0d28gaGVhZHMgb25lIGJvZHkKZHJlc3MgbWFkZSBvZiBmZWF0aGVycwo4ayBkc2xyCmZhbnRhc3kgbWFsZSBwb3J0cmFpdApzdWl0IHZlc3QgYW5kIHRvcCBoYXQgYW5kIGdsb3ZlcwoyIGQgcmVuZGVyCndpdGggdmlvbGVuY2UKaWxsdXNpb24gcHN5Y2hlZGVsaWMgYXJ0CmZ1bGwgcGFnZSBwZXJpb2RpY2FsIGltYWdlCnZpbnRhZ2UgLSB3IDEgMCAyIDQKYXJjaHMgYW5kIHdhbGxzCmxhYmlyeW50aApjb29raWUgbW9uc3RlciBhcyBhIGJvbmQgdmlsbGFpbgpwb3dlcmZ1bCB6ZW4gY29tcG9zaXRpb24KeW9zaGl0YWthIGFtYW5vIHBob3RvcmVhbGlzdGljCmxpZ2h0IHJlZmxleGVzCmNvcmR1cm95IHJvYWQKY29yZ2kgY29zbW9uYXV0CmNvcm4gY2hlc3MgYm9hcmQgZ2FtZQpjb3JuIGZsb2F0aW5nIGluIG9jZWFuCmFuaW1lIHN0eWxlIGxpa2UgZmF0ZS9zdGF5IG5pZ2h0CmNvcm53YWxsCmZlYXRoZXIgdGF0dG9vcwpjb3JvbmF0aW9uIG9mIHRoZSBmbG93ZXIgcHJpbmNlCmNvcm9uYXZpcnVzCnN0dWRpbyByZWNvcmRpbmcKYXdhcmQgLSB3aW5uaW5nIG1hZ2F6aW5lIGNvdmVyCmJvbGQgYXJjaGl0ZWN0dXJlCmNvc21pYyBlbmxpZ2h0ZW5tZW50CnNwb29reSBhdXR1bW5hbCBjb2xvdXJzCmluZmluaXRlIGZyYWN0YWwgd2F2ZXMKaW5maW5pdGUgY3J5c3RhbCBhc2NlbnQKZXh0cmVtbHkgcmVhbGlzdGljCmdlcmFsZCBicm9tIGFuZCBhbmR5IHdhcmhvbApzdHVubmluZyBsaWdodCByZWZsZWN0aW9ucwppbmZpbml0ZSBwc3ljaGVkZWxpYyB3YXZlcwpmaXJlIGZsYW1pbmcgZHJhZ29uIHNlcnBlbnQKaW5maW5pdGUgcXVhbnR1bSB3YXZlcwpzb2xvIGZlbWFsZSBjaGFyYWN0ZXIKbGlnaHQgYXJtb3VyCnJpZGluZyBzdGVhbXB1bmsgbW90b3JjeWNsZQppbiBmYW50YXN5IHNjaSAtIGZpIGNpdHkKaW4gMiAwIDEgOApmcm9nemlsbGEgY3JlYXR1cmUKY29zdHVtZSBkZXNpZ24gbWFkZSB3aXRoIGxvdmUKd2VpcmQgYXRtb3NwaGVyZQpjb3R0YWdlIGluIHRoZSB3b29kcwp1bHRyYXZpb2xldCBsaWdodApmb3Jlc3Qgc2V0dGluZyB3aXRoIHNreXNjcmFwZXJzCmNvdWdhcgp5b3VuZyBqaW0gY2F2aWV6ZWwKY291bnRyeXNpZGUgaW4gamFwYW4KcmFjaGVsIHdhbGwKd2l0aCBhIG1hbGUgcGlyYXRlIHBhcnRuZXIKaGVsbCBpbiB0aGUgYm90dG9tCmhlYXZlbiBpbiB0aGUgdG9wCmplc3VzIGh1Z2dpbmcgYSB3b21hbgp3b21hbiBsb3ZlcyBkZW1vbgp1bmxpa2VseSBoZXJvCmphbmUgcm9zZW5iZXJnCmVsaXphYmV0aCB3aWxsaWFtcwpob3dhcmQgYnJvZGllCm1hcmlseW4gY2h1cmNoIGgKbGlnaHQga2luZ2RvbSBiYWNrZHJvcApkaWdpcwpjb3ZlbnRyeSBjaXR5IGNlbnRyZQpjb3ZlciBwaG90byBwb3J0cmFpdCBvZiBkdSBqdWFuCmxpZ2h0LXJlZCBsaXBzCnNwcmluZyBlYXJseQpob3ds4oCZcyBtb3ZpbmcgY2FzdGxlCnBhaW50aW5nIGJ5IGRhbiBtdW1mb3JkCnBsYW5ldCBlYXJ0aCBiYWNrZ3JvdW5kCmNvd2JveSBvbiB0aGUgcmFuZ2UKY293Ym95IHBvcnRyYWl0CnNjb3JwaW9uIHRhaWwKY296eSA5IDAgcyBiZWRyb29tIHJldHJvZnV0dXJpc20KY296eSBiYXRoaG91c2UgaGlkZGVuIGluIGEgY2F2ZQpoYXBweSB3aXNlLiBoZSBoYXMgYm91bmN5IGJlbGx5CndlYXIncyBiZWlnZSBzaGlydApiYXRoZWQgaW4gdGhlIHRoZSBnbG93IG9mIGEgZmlyZQpjcmFiIG1vbnN0ZXIKY3JhYiBvbiBiZWFjaCBvbiBzYW5kCmNyYWZ0c21hbiBob21lCnBsYXlmdWwgdXBkbwpodW1hbnMgaGlkZSBpbiB0aGUgdW5kZXJ3YXRlcgpzcGFjZW1hbiBzdGFuZGluZyBsb29raW5nCmNyYXh1bGEKaG91c2Ugb24gZmlyZQpzdHJhbmdlIGNsb3RoZXMKd2l0aCBsb3RzIG9mIGdsaXR0ZXJpbmcgbGlnaHQKY3JlYW0gLSBjb2xvcmVkIHJvb20KYmFyZSByb29tCmNyZWF0aW9uIG9mIHRoZSB1bml2ZXJzZQpjbGVhciBhcyBjcnlzdGFsCnNpY2tlbmluZwpjcmVhdHVyZSBoZWFkCmFsaWVuIGZvcm1zCmNvc21pYyBmYW50YXN5Cm1jIGVzY2hlciBzdHlsZQpjcmVlcHkgbGltaW5hbCBpbnRlcmlvciBvZiByZTcKY3JlZXB5IGNoaWxkCnN1cnJlYWxpc21lIGFlc3RoZXRpYwoyIDAgcwpiZWF1dGlmdWwgY3J5c3RhbHMKaW50cmljYXRlIGJhcm9xdWUgc3R5bGUKcGxheWFibGUgdHJhaWxlcgpjcmVlcHkgbWFubmVxdWluCmNodXZhYmFrCmFibm9ybWFsCmNyZWVweSBwaG90b2dyYXBoeQpjdXJzZWQgaW1hZ2VyeQp6YWNoIGdhbGlmaWFuYWtpcyBmdW5rbyBwb3AKY29sb3JmdWwgc3BlbGxzCm1hemUgb2Ygc3RyZWV0cwpwYWxhY2Ugb24gdG9wIG9mIHRoZSBoaWxsCmVrdGFjaHJvbWUgZmlsbQpob2xkaW5nIHdhbmRzCmZvcmVzdCBvZiBuZWNrdGllcwpjcm93IGluIGN5YmVyIGFybW91cgphbHZhaCBhbmdlbHJ1bmUKYmx1ZSByZWZsZWN0aW9ucwpjdXRlIGVsYWJvcmF0ZSBlcGljIHJvYm90CmJ1YmJsZXMgZXZlcnl3aGVyZQpmYW5mYXJlCm1vbm9jaHJvbWUgZmlsbQpvbiBhIGNyb3dkZWQgc3BhY2Ugc3RhdGlvbgp3ZWFyaW5nIGFuY2llbnQgYXJtb3IKY3J1Y2lmaXhpb24gb2YgY29ub3IgbWNncmVnb3IKY3liZXJwdW5rIDggawpjcnlpbmcgY3lib3JnIHdvbWFuCnN0cm9uZyByYWluIG5pZ2h0CmhlYWQgaXMgYW4gb25pb24KZnJhY3RhbCBkcmVzcwpza3kgLSBmaQpvbGQgZ290aGljIGNyeXB0CmNyeXN0YWwgZm9yZXN0CnRoaW4gZ3JlZW4gZ2xhc3N5IGNyeXN0YWwgc2hhcmRzCmNyeXN0YWwgcGFsYWNlCmNsZWFyIGxpcXVpZAp3aXRoIHNpbHZlciBydW5lcyBvbiBpdApldGhlcmVhbCBiZWFtcwpsYXlvdXQgb2YgbWFwCjIgMCAxIDQKY2xvY2t0b3dlcgphY2N1cmF0ZSBkZXRhaWxlZCBmYWNlCnN5bW1ldHJ5IGJhbGFuY2UKZ2lnYW50aWMgbW9uc3RlcgpjdGh1bGh1IHNhbXVyYWkKbWMgZXNjaGVyISEKY3RodWx1IHBvcnRyYWl0CmNvbnRlbXBvcmFyeSBkYW5jZSBwb3NlcwpzdGV2ZW4gbWNjdXJyeSBwb3J0cmFpdAptYXRsYWIKdHJlbmRpbmcgb24gc29jaWV0eTYKbXVzZXVtIG1hc3RlcnBpZWNlCmN1bHQgbGVhZGVyCm1vb24gbGlnaHQgZmlzaCBleWUgaWxsdXN0cmF0b3IKYnJhaW4gaW4gYSB2YXQhISEKbGFyZ2UgYnJhaW4gaW4gYSB2YXQKbWV0YWwgYnJhaW4KbHVtbm9pdXMgY29sb3JmdWwKdmVnZXRhdGlvbiB0ZW50YWNsZXMKOG1tIGZpbG0KaGFsbG93ZWVuIGF0bW9zcGhlcmUKaGFsbG93ZWVuIGFydCBzdHlsZQpjdXJ2ZWQgcmVkIGFycm93CnNoaW55IGJsYWNrIGxpcHN0aWNrCnJlYWxpc3RpYyBiZWF1dGlmdWwgYmlnIGV5ZXMKZXJnb2RveApsb25nIG1ldGFsbGljIGhhaXIKdmludGFnZSBtYWtldXAKc3RhZ2UgYXQgYSBjbHViCm1pbmlhdHVyZSB0YWNoaWtvbWEKY29sb3JmdWwgbGlnaHQgbGVhdGhlciBhcm1vcgptYW55IGFybXMKZ3JpenpseQpwbGF0eXB1cwpmYW50YXN5IHN0eWxlIDggayBvY3RhbmUgcmVuZGVyCm91dGxpbmUgYXJ0CmNvbG9yZnVsIG91dGZpdApoYWJzIGplcnNleQpjdXRlIGFuaW1lIGdpcmwgcG9ydHJhaXQKY3V0ZSBhbnRocm9wb21vcnBoaWMgYnVubnkKdW5yZWFsIGVuZ2luZSBoZCByZW5kZXIKaHlwZXIgcmVhbGlzdGljIGRldGFpbGVkIHJlbmRlcgpjb3BwZXIgaGFpcgpiZWF1dGlmdWwgY3JlYXR1cmUKcGluayBhbmQgZ29sZCBjb2xvciBzY2hlbWUKZnVycnkgY2hhcmFjdGVyIHBvcnRyYWl0Cm5lb3RyYWRpdGlvbmFsIG1vZGVybgpjaGV3aW5nIG9uIGEgZ3JhcGhpYyBjYXJkCmNoZXdpbmcgb24gYSB2aWRlbyBjYXJkCmN1dGUgY2F0cwpjdXRlIGNvcmdpCmRpenp5IHZpcGVyCmNyb25vYnJlYWtlcgpoZWFydGhzdG9uZSBjYXJkIGFydApmaWcgbGVhdmVzCmRpc25leSBhcnRpc3QKbGliZXJ0eSBjdXJscwpncmFoYW0gaW5nZWxzCmN1dGUgZWxlcGhhbnQKcGFsZSBncmVlbiBoYWx0ZXIgdG9wCnBpbmsgaGFsdGVyIHRvcApncmFkaWVudCBwYXN0ZWwgZ3JlZW4KY2FyYWNhbCBoZWFkCmxhbnRlcm4gbGlnaHQKYXJpZXMgY29uc3RlbGxhdGlvbgpjdXRlY29yZQpzcGFya2xpbmcgYmlyZCBleWVzCnNoaW5pbmcgcmFpbmJvdyBmZWF0aGVycwpibGFjayBhbmQgd2hpdGUgd2l0aCByZWQgaGVhcnRzCmVtaXNzaXZlIGJzc3JkZgpuZW9uIGxlbnMgZmxhcmUKZ2xvd2luZyBsZW5zIGZsYXJlIHdyYWl0aCBnaXJsCnNtb2tlIGFuZCBvcmFuZ2Ugdm9sdW1ldHJpYyBmb2cKdGVjaG5pY29sb3IgaG9ycm9yCmlua3kgYmxhY2tuZXNzCnRhdHRlcmVkIHJhZ2dlZCBnb3RoaWMgZHJlc3MKaHVnZ2luZyBhbmQgY3JhZGxpbmcKc3ltbWV0cmljIGJlYXV0eQp3aXNweSBzbW9rZSBhbmQgdm9sdW1ldHJpYyBmb2cKaGlnaCBxdWFsaXR5IG1hdGVyaWFsIGJzc3JkZgppc29tZXRyaWMgb3J0aG9ncmFwaGljCmJva2VoIG1hY3JvIGxlbnMKc2hhZG93Y3JlYXR1cmUKZ290aGljIG1haWRlbiBvZiB0aGUgZGFyawp0YXR0ZXJlZCB3aW5ncwpzcGFya3MgYW5kIGxpcXVpZCBmaXJlCnJ1ZmZsZWQgYW5kIHRhdHRlcmVkIGRyZXNzCmRlbW9uIGdpcmwKcGFpbnRlZCBpbiBicmlnaHQgd2F0ZXIgY29sb3JzCmN1dGUgZ2lybCB3ZWFyaW5nIHRhbmsgc3VpdApjdXNoYXJ0IGtyZW56IGtleSBhcnQgZmVtaW5pbmUKbXVsdGljb2xvcmVkIHdlZWQgbGVhdmVzCm1hZGUgb2YgZGlhbW9uZAp5b3Jrc2hpcmUgdGVycmllcgptb2Rlcm4gbWlsaXRhcnkgZ2VhcgptaW5pYXR1cmUgZm94CmN1dGUgbGl0dGxlIGNyZWF0dXJlCmJsdWUgYmxhY2sgcGluawpuZW9uIGJsdWUKY2xlYW4gZGV0YWlsZWQKY3V0ZSBsaXR0bGUgdHJvbGwKc3RhbmRpbmcgaW4gdGFsbCBncmFzcwpza2F0ZWJvYXJkIGFydApAIGNyb25vYnJlYWsgb24gdHdpdHRlci4gY29tCnVuZGVyZ3JvdW5kIG1pbmUKcGFzdGVsbGUKNCBrIC0gaGQgcGhvdG8KY2xvaWNzb25uZQpjdXRlIHBpbG90IGdpcmwKY3V0ZSBwaXp6YSBtb25zdGVyCml2b3J5IHBhbGUgc2tpbgpoYWx0ZXIgbmVjawphdGV5IGdoYWlsYW4gOCBrCmN1dGUgcm9ib3Qgd2l0aCBncmFzcyBoYWlyCnRvbWF0byBoYXQgYW5kIGEgd2Fsa2luZyBzdGljawpzY2lmaSBiYWNrZ3JvdW5kCnRlbGVncmFtIHN0aWNrZXIKcGhhdGlvbgpjdXRlIHdvbWFuCmhvbWUgZGlzcGxheQppbiBzdHlsZSBvZiBub3JtYW4gcm9ja3dlbGwKYmlvbWVjaGFuaWNhbCB4cmF5CnRpbnRveSBjaGFyYWN0ZXJkZXNpZ24gcm9ib3QKd2l0aCBzcHJvdXRpbmcgcmFpbmJvdyBoYWlyCmN5YW4gY2hpbmVzZSBkcmFnb24gZmFudGFzeQp2aWJyYW50IGhhaXIKZW5lcmd5IGF1cmEKY3liZXIgbW9ua2V5IGluIHRoZSBzY2lmaSBmb3Jlc3QKaW4gc3R5bGUgamFtZXMgamVhbgpkZXRhaWxlZCBidXNoaWRvIGZvcm0gc21va2UKY3liZXIgcGVuZ3VpbiBpbiBmYWxsb3V0IDQKZ2xvd2luZyBibHVlIHZlaW5zCmN5YmVyIHNjaG9vbCBnaXJsCmV4cG9zZWQgd2lyaW5nIGFuZCBnZWFycwprYXdhaWkgY2hpYmkKY3liZXIgc2VjdXJpdHkgcG9seWdvbgpsYXJnZSBjeWJlcmFycmF5cyBkYXRhIGhvbG9ncmFtcwptZWNoYW5pY2FsIGJvZHkKbWV0YWwgamF3CnVwcGVyIHRvcnNvIGluY2x1ZGVkCmZlYXR1cmVsZXNzCmh1bWFucyBzbGVlcGluZyBpbiBoZWFsaW5nIHBvZHMKa293bG9vbiBjeWJlcnB1bmsKamVzcGVyIGVzamluZwo5IDAgcyBmaWxtIHBob3RvCnNvY2sgY2FwCmJlYXV0aWZ1bCBwYW5vcmFtaWMgaW1hZ2VyeQp2aWJyYW50IGFuZCByaWNoIGNvbG9ycwpjeWJlcnB1bmsgYW5pbWUgZ2lybCBtZWNoCnZhZ2Fib25kCmdhbGF4eSBzcGFjZSBzY2kgLSBmaQpnbm9zdGljCnNjdWxscwpjeWJlcnB1bmsgYmVlCmluIGN5YmVycHVuayBjaXR5CmdpZ2VyOjEKZGlnaXRhbCBhZHZlcnRpc2VtZW50cwp2aWV3IGZyb20gZXllcwpnb29nbGUgcG9pbnQgb2YgdmlldwpvcmFuZ2UgYW5kIGJsdWUgdG9uZXMKbWljaGFlbCBwYWdlCndvb2RsYW5kIGdyb3ZlCmN5YmVycHVuayBmcm9nCjMgMCBtbSBjYW1lcmEKOCAwIHMgcHJpbnQgc2NpIGZpIGFydAplbGVjdHJpYyBlbmVyZ3kKdGVjaCB3YXIKcmVkIGFuZCBibGFjayBhbmQgd2hpdGUKY3liZXJwdW5rIGplbGx5ZmlzaApjeWJlcnB1bmsgbWFya2V0cGxhY2UKYWR2YW5jZWQgd2FyZmFyZQpmaXJlIG9uIHRoZSBiYWNrZ3JvdW5kCmN5YmVycHVuayBtb3VzZSBmb2xrIGVuZ2luZWVyCmZ1dHVyZSEhCmN5YmVycHVuayBvbGQgbWFuCmR5bGFuIGtvd2Fsc2tpCm1hcmF0IHpha2lyb3YKYWxiZXJ0IHJhbW9uIHB1aWcKY3liZXJwdW5rIHBpa2FjaHUKY3liZXJwdW5rIHBpeGVsIGFydApjeWJlcnB1bmsgcG9ydHJhaXQKY3liZXJwdW5rIHJvYm90aWMgZWx2aXNoIHF1ZWVuCnByb2Zlc3Npb25hbCBtYXN0ZXIgcGllY2UKc21va2V5IGxpZ2h0cwpjeWJlcnB1bmsgc3RhdHVlCmxvdyAtIGxldmVsIHZpZXcKdHVycXVvaXNlIGFuZCBwaW5rIGxpZ2h0aW5nCnNwYWNlIHBsYW50cwpjb29sIHRvbmUgcGFzdGVsIHJhaW5ib3cgY29sb3JzCnRlY2h3ZWFyIGZhc2hpb24KbWV0YWwgd2luZ3MKdGFjdGljYWwgYXJtb3IKZ3VzdGF2IGtsaW10IGFuZCBtZWwgcmFtb3MKZGVsaWNhdGUgamF3CmRpc3RvcGlhIG1lZ2FsaXRocwpzdGFiaWxpdHkgYXQgbGFzdApsYXJnZSBjb2xvcmZ1bCBpbWFnZXMKY3liZXJ0cm9uaWMgaGluZHUgdGVtcGxlCmN5YmVydHJvbmljIG1ldGFsbGljIGNoYXJtYW5kZXIKbmVhbCBhc2hlciBzY2kgLSBmaQpjeWJvcmcgLSBwaXRidWxsIHRha2luZyBhIHNlbGZpZQpjeWJvcmcgd2hhbGUKcHVuaXNoZWQKY3lib3JnIGZhc2hpb24gbW9kZWwKY3lib3JnIGZhc2hpb24gc2hvdAplbmVyZ3kgc2hpZWxkCnVsdHJhIGhpZ2ggdGVjaApjeWJvcmcgaW4gdGhlIGRhdGEgY2VudGVyCmN5Ym9yZyBtYWxlCmN5Ym9yZyBuZWNyb21hbmNlcgpjeWJvcmcgb2N0b3B1cwpzeW1tZXRyaWNhbCBzdGlja2VyIGRlc2lnbgplbWlzc2l2ZSBsaWdodHMKY29tcGxleCBkcmF3aW5nCmN5Ym9yZyB3YXJyaW9yCmQgJiBkIGJlaG9sZGVyCnRyYW5zcGFyZW50IHZpYnJhbnQgZ2xvd2luZyBza2luCmQgJiBkIHN0eWxlIGZ1bGwgYm9keSBwb3J0cmFpdApndW1teSBiZWFyCmdyZXkgbWF0dGVyCmdvbGRlbiBrZXkKdW5hcm1lZCBjb21iYXQKZmFudGFzeSBjb25jZXB0CmdvbGRlbiBob3VyIGNpbmVtYXRpYwpzYWtpbWljaGFuIGZyYW5rIGZyYW56emV0YQp3aWRlIC0gYW5nbGUgdmlldwpvbGQgdmludGFnZSBwaG90bwpkYWtvdGEgZmFubmluZwpoZSBpcyB0aGUgZ29vZG5lc3MgaW4gbWFua2luZwpiZWF1dGlmdWwgcmV0cm8gYXJ0CnN0b2NrIGlsbHVzdHJhdGlvbgpwcm9mZXNzaW9uYWwgOCBrCm92YWwgZXllcwpzdGVhbXB1bmsgd29ybGQgc3Bpa2VzCnN0ZXBoZW4gc2lsdmVyCnNoYWRlZCBhbmltYXRpb24gY2VsCmZyYWN0YWwgYmx1ZSBsZWF2ZXMKcmV2ZWxsZXJzCmZyb250IGxlZnQgc3BlYWtlcgpkYW5jZXIgb2YgdGhlIHVuZGVyd29ybGQKYXRtb3NwaGVyaWMgZmFudGFzeSBza3kKY2xvc2UtdXAgc2hvdCBmcm9tIGJlaGluZAp3aGl0ZSBuZWNrIHZpc2libGUKd2lsZCBvY2VhbiBiYWNrZ3JvdW5kCmJlZCByb29tCm5vIGxpZ2h0cyBpbiBiZWRyb29tCmJyaWdodCBuZW9uIGxpZ2h0cyBmcm9tIHRoZSBjaXR5CnZlcnkgbG93IGFuZ2xlIHZpZXcKZGFuY2luZyBsaWdodHMKaW5rIHVuZGVyIHBhaW50Cmxvbmcgc3dpcmx5IGRhcmsgaGFpcgpjYW5vbiBlb3MgMSAwIDAgMCBkCsaSIC8gMy4gNQpmb2NhbCBsZW5ndGggOiAxIDguIDAgbW0KZXhwb3N1cmUgdGltZSA6IDEgLyA1CmdpYW50IGJ1Z3MKZGFuaWVsIG1vdHoKJ3VudGl0bGVkIDkgJwpiaWxsIGxvd2UgZ2FsbGVyeQpsaW5lIGFydCEhCmFzIGFuIGFjdGlvbiBmaWd1cmUKaHlwZXIgcmVhbCBwaG90bwphbHdheXMgc3VubnkgaW4gcGhpbGFkZWxwaGlhCm9mZnB1dHRpbmcKZGFudGUgZnJvbSBkZXZpbCBtYXkgY3J5CmRhcmVkZXZpbCBwb3J0cmFpdApkaXNjb3Zlcnkgem9uZQpkYXZpZCAtIGx5bmNoCnRpbWlkCmRhcmsgYWJhbmRvbmVkIGhhbGx3YXkgYXQgbmlnaHQKbW9uc3RlciBzdGF0dWVzCmVkd2FyZCBtdW5jaApnb2xkZW4gZGF3bgpob3QgcmVwdGlsZSBodW1hbm9pZCB3b21hbgptaW5pbWFsIGFydApvbiBhbiBlbXB0eSBzdGFnZSBmcm9tIGFib3ZlCmRhcmsgYmVkcm9vbQpwYXN0ZWwgY29sb3JmdWwgbW9sZApzdWx0cnkgYW5kIGJlY2tvbmluZwpwZXJjaGVkIG9uIGEgc2t5c2NyYXBlcgpjbG9zZSBmdWxsIGZpZ3VyZQpkYXJrIHN0b25lIHdhbGxzIGFuZCBwaWxsYXJzCnN0b25lIHdhbGxzIGFuZCBwaWxsYXJzCmRhcmsgZWxmIG1haWRlbgpkYXJrIGVsZiBwcmluY2Vzcwpsb25nIHdoaXRlIGhhaXIgYW5kIGJlYXJkCmRhcmsgZmFudGFzeSBmZW1hbGUgbWFnaWNpYW4KZGFyayBmYW50YXN5IG9pbCBwYWludGluZwpmbG9hdGluZyBtb3VudGFpbnMKbW92aWUgdGhlIGxvcmQgb2YgdGhlIHJpbmdzCmRhcmsgZnV0dXJpc3RpYyBjaXR5CmRhcmsgZ290aCBxdWVlbiB3aXRoIGJsdWUgZXllcwpkYXJrIGdvdGhpYyBjYXRoZWRyYWwKdWx0cmF3aWRlIGNpbmVtYXRpYyAzZCByZW5kZXIKZGFyayBncmV5IGhhaXJlZCBtYW4KZHJpcHBpbmcgd2F4CmRhcmsgaG9vZGVkIHdyYWl0aApkYXJrIGFnZSBpcyBjb21pbmcKcmVkIGRlbW9uIGN5YmVycHVuayBzeW1ib2xzCmxvY2F0aW9uIG9mIGEgZGFyayBvbGQgaG91c2UKZXhwZW5zaXZlIGRlc2lnbgphdmlhbiB3YXJyaW9yCmRhcmsgbW9uc3Rlcgptb29keSBkaW0gZmFpbnQgbGlnaHRpbmcKZGFyayBuaWdodCBzdG9ybWNsb3VkCnN3ZWRpc2ggaG91c2VzCmxpdCBmcm9tIGJvdHRvbQpzaWx2ZXIgc25ha2VzCm5vdCBmYWNlCnJhaW4gb24gc2NyZWVuCmFydCBzdXNzbWFuCmdyYXkgc3RvbmUgd2FsbApkYXJrIGZsb3dlciBwYXR0ZXJuIHdhbGxwYXBlcgpibHVyIGVmZmVjdCBmYWNlCnNtYWxsIGluIHNpemUKZGFyayBzb3JjZXJlc3MgZnVsbCB2aWV3CmRhcmsgc29yY2VyZXNzIGZ1bGxib2R5IHBvc2UKaW5zaWRlIG9mIGEgbWV0cm8gdHJhaW4Kd2VhcmluZyBhIGRhcmsgaG9vZApkYXJrIHRhdHRvbwpzcXVpZGxpa2UgYWxpZW5zCmRhcmsgd2l0Y2ggY2hhcmFjdGVyCnRlbnRhY2xlcyBjbGltYiBmcm9tIHRoZSBwb3J0YWwKdW5kZXJncm91bmQgbWV0cm8KbWFzc3lzCnN0YXBsZXMKc2NhbGVkIHJvYmVzCnNoYWRlcyBvZiBhZXJvY2hyb21lCmJ1YmJsaW5nIG9vemUgY292ZXJlZCBzZXJpb3VzCndoaXRlIHVuaWZvcm0KdG91cmlzdCBwaG90bwpjZWxsIC0gc2hhZGluZwpibGVhayBjb2xvcgptdWx0aSAtIGNvbG91cmVkCmltYWdlbmV0CnpvbWJpZSB3aXRoIHdoaXRlIGV5ZXMKY2xvdGggaGVhZCB3cmFwCmtvZGFja2Nocm9tZQpmaWxsaW5nIHdpdGggd2F0ZXIKc2NlbmUgaW4gc3BhY2UKMSA3IHRoIGNlbnR1cnkgYXJ0CmRhdmlkIGdhbmR5CmZsb3dlcnMhISEhCnJ1c3RlZCBqdW5rCmdsb3d5IGxpZ2h0Cm1lbmFjaW5nIHN0YXR1ZXMKfCAzNW1tfApmZWVsaW5nIG9mIGRyZWFkCnN1bnJpc2UgY29sb3JpbmcgdGhlIHJvb20KZGVhdGggb2YgdGhlIG1vbmV5IGxlbmRlcnMKaGVhZCBkZXRhaWxzCnByZWNpc2UgbWFjaGluZXJ5CmpvaG5ueSBjcmFpZwpsYXplciBibGFzdAppbWJhbGFuY2VkIG1hcnMuIHJ1Z2dlZAplbGRyaWNodCBhYm9taW5hdGlvbnMKZ3JlZW4gaGlsbHMgc2F2YW5uYSB0cmVlCnJhaW5ib3cgcml2ZXIgd2F0ZXJmYWxsCmRlZXAgZ29sZGVuIHNhbmQgZGVzZXJ0CmRlZXAganVuZ2xlIGZyb20gYW5vdGhlciB3b3JsZApkZWVwIHNlYSBsYW5kc2NhcGUKZGVlcCBzcGFjZSBzdXBlciBzdHJ1Y3R1cmUKY29yYWxzIGFyZSBnZW1zdG9uZXMKaW50cm8gdG8gdW5jdXQgZ2VtcwpkZXB0aCBvZiB2aXNpb24Kc29mdCBwYWxlIGdvbGRlbiBza2luCjcgMCBzIGNvbG9ycwpkZWxpY2F0ZSBnYXJkZW4gb24gcGFwZXIKZmxvYXRpbmcgcm9iZXMKd2hpcHBlZCBjcmVhbSBvbiB0b3AKYmVhdXRpZnVsIGZhY2UgcG9ydHJhaXQKZGVtb24gYmxhY2sgYmx1ZSBwdXJwbGUKKCAoIHdlYXJpbmcgYSBsb25nIGNvYXQgKSApCmRlbW9uIG5lY3JvbWFuY2VyCmRlbW9uIHdvbWFuCnJlYWxvc20KY2F2aXRpZXMKZXh0cmVtZWx5IGF0bW9zcGhlcmljIGxpZ2h0aW5nCmRlcHJlc3NlZCBnaXJsIHBvcnRyYWl0CnN0b25lIG1hcmJsZQp0aW5zIG9mIGZvb2Qgb24gdGhlIGZsb29yCmNhcmRib2FyZCB0dW5uZWxzCmN5YmVycHVuayAyIDAgNyA3IGNoYXJhY3RlciBhcnQKZGVzZXJ0IGNpcmN1cyBteXN0aWNzCm9hc2lzIGluZnJvbnQKbW1vcnBnIGdhbWVwbGF5CnBzIDMgc2NyZWVuc2hvdApmYW5jeSByZXN0YXVyYW50Cm11bHRpbGF5ZXIKcWlyZXgKdmFyaWVkIGNvbG9ycwpzdGFyZHVzdCBncmFkaWVudCBzY2hlbWUKYmFsbCBzaGFwZWQgYWNjb3JkaW9uIHNsZWV2ZQpvcGVuIG5lY2sgY29sbGFyCmhpZ2ggZmFzaGlvbiBmYW50YXN5CmFydCBub3V2ZWF1IGFydCBkZWNvCmNhcmwgY3JpdGNobG93LiBtb29keQplZ3lwdCBtYWtldXAKdXNpbmcgZGVhZCBsaW9uIGNvc3R1bWUgamFja2V0CnNoYXJwIHRoaWNrIGxpbmVzCmhkIGJsZW5kZXIgcmVuZGVyCnJveWFsIGF0dGlyZQpkYyBjb21pY3MgYXJ0IHN0eWxlCmZlYXIgYW5kIGxvYXRoaW5nIGluIGxhcyB2ZWdhcwpvbiB2ZWxsdW0Kd29tZW4gZnVsbCBib2R5CmludGVsbGlnZW50IG1hbgpzb2Z0IHNpbGsgZHJlc3MKc3R5bGUgb2YgcGlubyBkYWVuaQpvbiB5ZWxsb3cgcGFwZXIKc3RyZWV0IGxpZ2h0cyB3YXRlciByZWZyYWN0aW9uCmJ1cm5pbmcgcmVkIGRlc2VydCBob3Jpem9uCjMgZCBwaXhhcgpzdG9ybXRyb29wZXIgaW4gaG90IHNwcmluZ3MKd2VpcmQgYW1lcmljYW5hCm1hbnkgc21hbGwgYW5kIGNvbG9yZnVsIHN0b25lcwpmYWxzZSBjb2xvciBzdGFyIGZpZWxkCmRldGFpbGVkIGNyb3cgaWxsdXN0cmF0aW9uCmRldGFpbGVkIGxpZ2h0aW5nIGFuZCB0ZXh0dXJlcwpjb3JuZXIgb2ZmaWNlIGJhY2tncm91bmQKdGVycmF6em8KZGV0YWlsZWQgZmFsbG91dCBucGMhIGhpZ2ggYW5nbGUKc2ltb24gYmlzbGV5IQpkZXRhaWxlZCBmYW50YXN5IG1hcApkZXRhaWxlZCBmaWVsZHMgbmF0dXJlCmdyZWcgcnV0a293c2tpIG1ha290byBzaGlua2FpCmhvbmV5Y29tYiBoYWxscwpmdXR1cmlzdGljIGdvdmVybm1lbnQgY2hhbWJlcnMKbWFueSBjb21wdXRlciBzY3JlZW5zCnB1cnBsZSBhbWJpZW50IGxpZ2h0CnBsYW5ldHMgYmVoaW5kCnBzeWNoZWRlbGljIGF0bW9zcGhlcmUKYmxhY2sgb24gd2hpdGUgb25seQpodWdlIHdpbmdzIGdyb3dpbmcgb3V0IG9mIGFybXMKZ3VpbHR5IGdlYXIKd2VhcmluZyBkaXJ0eSBmbGlnaHQgc3VpdApvZmZpY2lhbCBqdWRnZSBkcmVkZCBmYW5hcnQKZ2xvd2luZyBoZWFkbGlnaHRzCmluIGEgZnV0dXJlIGNpdHkKb2lsIG9uIGNhbnZhcyA4IGsKdmVyeSBkZXRhaWxlZCBzdXBlciBzdG9ybQpjYXJpY2F0dXJhbApkaXJlY3Rpb25zCnBpY3RvZ3JhcGhzCndhcm0gYW5kIGpveWZ1bCBhdG1vc3BoZXJlCmludHJpY2F0ZSBmZWF0dXJlcwpkZXRhaWxlZCBuZW9uIGN5YmVycHVuayBjaXR5CmZyb250IGZhY2UgYXN5bW1ldHJpY2FsCndlYXJpbmcgeGVuYSBhcm1vcgpob3VzZSBpbiBmb3Jlc3QKaGlnaCBxdWFsaXR5IHN1aXQKbm9ybSByb2Nrd2VsbCBpbiBhZnJpY2EKcGFya3MgYW5kIG1vbnVtZW50cwpmcmVlbWFzb25zCnNvbWUgbGlnaHQgcmVmbGV4aW9ucwp2YXJpb3VzIHBvc2VkCnhpYW9sb25nIHdhbmcKc2V2ZW4gcG9pbnRlZCBwaW5rIHN0YXIKYmF0IGhlYWQKZmllbGRzIG9mIGZsb3dlcnMKYmlyZCBuaWdodGluZ2FsZSBhcyBzdWJqZWN0Cm9mIGxpZmUgdGhlIGJlZ2lubmluZwpmb2N1c2VkIHBob3RvCnNvbGFycHVuayBmdXR1cmlzdGljIHV0b3BpYQplbmR1cmluZwpyb3lhbCBhdHRpcmUgYWtpcmEKKG5lb3Rva3lvKQooYWVzdGhldGljcykKc3VycmVhbCBvaWwgb24gY2FudmFzCnJpY2ggYnJpZ2h0IHN1bm55IGNvbG9ycwpicmlnaHQgc3BlbGxzCnN0dWRpbyBnaGlibGkgY29sb3IgY2hlbWUKY3liZXJwdW5rIHRlY2h3ZWFyCm5vIG91dGxpbmUKd2VhcmluZyByaXBwZWQgZGlydHkgZmxpZ2h0IHN1aXQKeWVsbG93IGN5Ym9yZyBleWVzCmludHJvdmVydGVkCmludHJpY2F0ZSBmcmFjdGFsCnN0YW5kcyBpbiBjZW50ZXIgd2l0aCBvcGVuIGFybXMKcGFsZSB5ZWxsb3cgd2FsbHMKZGVmZWN0aXZlIGZsdW9yZXNjZW50IGxpZ2h0aW5nCmhlYWRlciB3aXRoIGxvZ28KcHJpbnRlZCBwYWdlCnNjYW5uZWQgZG9jdW1lbnQKaGVhZGVyCndpdGggYSB3YWxraW5nIGNhbmUKd2VhcmluZyB3b29kZW4gbWFzawpjcnlwdG9jdXJyZW5jeSBpbiB0aGUgYmFja2dyb3VuZApkZXRhaWxlZCBzdHVkeSBvZiBhIGh1bWFuIGhhbmQKZGV0YWlsZWQgc3ltbWV0cnkhIQpiaWchISEhISEhISEhISEKbmV1dHJhbCBjb2xvdXJzCm1vcm9jY2FuIHF1ZWVucyBueQpuZXcgdG9reW8KbWVhdCBhbmQgbGljaGVucwp3b3VuZApmb3Jlc3QgdHJlZXMKZGV1cyBleCBtYWNoaW5lCmFsZWphbmRybyBidXJkaXNvIHN0eWxlIGFydAphbmltZSBzdHlsZS4gOGsKZ29vZ2xlIGRlc2lnbgpibHVlcHJpbnQgc3R5bGUKaWNlIGNyeXN0YWxzCmRpZSBhbnR3b29yZCB5b2xhbmRpIHBvcnRyYWl0CnNwbGF0dGVyIHBhaW50IG9uIHBhcGVyCmJsYWNrIGFuZCB3aGl0ZSBjaGVja2VyZWQgZmxvb3IKbW9lYml1cyBhbmQgdHN1dG9tdSBuaWhlaQpzb2Z0IGNvbG9yaW5nCmdyaWxscwpkaWdpdGFsIGFkdmFuY2VkIGFuaW1lIGFydApsaWdodHNoYWZ0cyBhbmQgZm9nZ3kgYXRtb3NwaGVyZQpzb2Z0IGx1bGxpbmcgdG9uZ3VlCnN0YWNraW5nIHN1cGVybWFya2V0IHNoZWx2ZXMKZmFjZSEhISEgY2xvc2UgLSB1cAplbW8gc3R5bGUKbG9vcCBsaWdodGluZwphd2VzdHJ1Y2sKdGFsa2luZyBjcmVhdHVyZXMKcmFpZGVyCnNob3dpbmcgaGlzIHBhd3MgdG8gdmlld2VyCndpdGggbGlnaHRzYWJlciBzd29yZApob3VkaW5pIDMgZCByZW5kZXIKYnJhaWQgaGFpcnN0eWxlCnNraW5ueSBncnVudCBmYWNlCm92YWwgc2hhcGVkIGZhY2UKZmVtaW5pbmUgYmVhdXRpZnVsIGZhY2UKZ2Vpc2hhIG1ha2UgdXAKZGVlcCBlbW90aW9uYWwgYW1iaWVuY2UKY3J5aW5nIGJpZyBibHVlIHRlYXJzCnVuZGVyc2lkZSBvZiBhIGZveCBwYXcKZGFyay1lc3F1ZQp2ZXJ5IGRldGFpbGVkIGludHJpY2F0ZSBkZXRhaWxzCmxpa2UgYSB5b3VuZyBnb2QKc2hhcnAgdGVldGggYW5kIGNsYXdzCnJlZHVuZGFuY3kKZ3JlZW4gZGlnaXRhbCB3b3JsZApkaWdpdGFsIGdyZWVuIGZveApmcmEKY29tcGxldGUgd2luZG93IQp3ZWFyaW5nIG5pa2UgYWlyIG1hZ3MKcGFkbWFzYW5hCmFsaWVuIGFybW9yCnBvcnRyYWl0IG9mIHNhaW50IG9mIHRoZSBwaXQKd2hpdGUgc3VpdCBhbmQgaGF0CmV5ZSBmb2N1cwpzdW5saWdodCBwb3VyaW5nIHRocm91Z2ggd2luZG93CmJvZHljb24gZHJlc3MKbW9kZXJuIGFkYXB0YXRpb24KcGxlYXNhbnQgbGlnaHRpbmcKdGVhIGRyaW5raW5nIGFuZCBwYXBlciBsYW50ZXJucwpsb3JpIGVhcmxleQpkdW5raW5nCnRyaXBweSBmcmFjdGFscwpzaWRlIGxpZ2h0aW5nIHhmIGlxNAp2aWN0byBuZ2FpISBjbXlrIHBhbGV0dGUKaW4gZGlzdHJlc3MKdHJhZGluZwpoaWdoIGZhbnRhc3kgbGFuZHNjYXBlCm1vZGVybiB0b2t5bwpzdG9ybSBkcmFnb24KZGlzY28gZWx5c2l1bSBhcnQKZmxvYXRpbmcgb3ZlciBhIGNpdHkgc2lkZXdhbGsKZGlnaXRhbCBzdGVhbQpwZXJtYW5lbnQgbWFya2VyCnZpZGVvIGdhbWUgYXNzZXQgZmlsZQp2YXN0IGVtcHR5IGhhbGwKbXV0ZWQgbXVsdGktY29sb3IgbGFwaXMKcGl4dnkKcmVhbGlzdGljIDRrIHBob3RvCmFsIGNoYW5nCm5pZWwgZGF2aXMKbWFyYyByaWJvdWQKZHJpbmtpbmcgYmVlciBhbmQgbGF1Z2hpbmcKZGlvCnJvYmVydCBzaGVlaGFuCnJ1bmF3YXkgcGhvdG9ncmFwaHkKY2x1YiBsaWdodGluZwpzd29yZHMgZHJhd24Kc2NhdHRlcmVkIGdsYXNzIHNoYXJkcwpnaWFudCBjYXN0bGUgd2FsbHMKc2FsbHkgY29ycG9yYXRpb24KZ2FybmVyIGhvbHQKZnV0dXJpc3RpYyBjb25jZXB0IGNhcgppbiB0aGUgbW92aWUga2lsbCBiaWxsCnNwaXJhbGxpbmcgYnVzaGVzCmJsb29kIHB1ZGRsZXMgb24gdGhlIGZsb29yCmJyb2tlbiByZWFsaXR5CnN0cm9ibyBsaWdodHMKY3Vyc2VkIHBob3RvZ3JhcGgKbWF4aW0gY292ZXIgOiA6CnVucmVhbCBlbmdpbmUgNSA6IDoKY2hyb21lIGZhY2lhbCBwaWVyY2luZ3MKZGlzbmV5J3MgdGFyemFuCmJlYXV0aWZ1bCBtb29yaXNoIHRpbGVzCnVucmVhbCBlbmdpbmUgNSDCuwpzb2xhciByYXlzCnllbGxvdyBwYXJhc29sCnN0b3JtIGRyYWluCmRqaW5uIGh1bWFuIGh5YnJpZAppcyBldmlsIGdyZW1saW4KZG10IGVnbyBvZiBkZWF0aAp0aW1lIGVsdmVzCmRuZCBhdmF0YXIgcG9ydHJhaXQgb2YgaGFsZmxpbmcKd2VhcmluZyBhIHN0eWxpc2ggbWVuJ3Mgc3VpdApkbmQgbGFzdCBzdXBwZXIKZG5kIHJlbmRlciBvZiBhIG1hbgpkbyB5b3Ugd2FudCB0byBrbm93CnByb2R1Y3Rpb24gYW5pbWF0aW9uIGNlbApyZWQgYmFubmVycwpyZXBvcnRhZ2UgcGhvdG9ncmFwaHkKZG9jdW1lbnRzCmRvZGVjYWhlZHJvbgpzYXllbSByZXphCmZhciBhd2F5IGZyb20gY2FtZXJhCnNpdHRpbmcgb24gdGhlIHNvZmEKa2Vud29vZApiZWF1dGlmdWwgY29zdHVtZQpyYXlzIG9mIHRoZSBzdW4KY29sb3VyZnVsIGRyYW1hdGljIGxpZ2h0aW5nCm5pZ2h0IHN0YXJzCnN1biByYXlzIGFjcm9zcyBza3kKZnVsbGVyCnNwYXRpYWwgc3RydWN0dXJlCmRvbWluYXRyaXggcm9ib3QKd2VhcmluZyBhIHRyYWNrIHN1aXQKc2V1IG1hZHJ1Z2EKZmxhYmJlcmdhc3RlZApkcmVhbSBjb3JlCnBvc3RwdW5rCmZpbG0gc3RpbGxzCmRvbmFsZCB0cnVtcCBhcyBhIGhvbWVsZXNzIG1hbgpwYXNzZWQgb3V0CmRvbmFsZCB0cnVtcCBmdWxsIGJvZHkgZGV0YWlsZWQKbWV0YWwgcm9ib3RzCm1tbW1tCnNpdHRpbmcgb24gdmludGFnZSBsZWF0aGVyIHNvZmEKb296aW5nCmRvbmFsZCB0cnVtcCdzIGhlYWQgYXMgbW9kb2sKcHVzIC0gZmlsbGVkIGJvaWxzCmN5c3RzCnRvb3RobGVzcyBtdXRhbnQKb25lIGJyb2Fkc3dvcmQKdHZwCnBvbHNhdApnYXpldGEKdyBzaWVjaQp0dm4Kd3Byb3N0CmRvbmtleSByaWRpbmcgYSBwbGF5Z3JvdW5kIHN3aW5nCnNjcmliYmxlZAptYXR0IGdyb2VuaW5nIHN0eWxlCnNtb290aCBkZXRhaWxlZAptYXJpbmUgYXJtb3IKZG9vbSBzbGF5ZXIgZnJvbSBkb29tIGV0ZXJuYWwKbWVnYSBkZWF0aAptdXNjdWxhciBtYWxlIHVuZGVhZCBjeWJvcmcKZmFjZSBjb3ZlcmVkIGluIGRpcnQKamFwYW5lc2UgcG9wIHN1cnJlYWxpc20KbG93YnJvdyBhcnQgc3R5bGUKZG9yYSB0aGUgZXhwbG9yZXIgYXMgcmVhbCBnaXJsCmluayBwYWludGluZyBvbiBwYXBlcgptYW5pYyBwaXhpZSBkcmVhbSBnaXJsCmRvdmUgY2FtZXJvbiBpbiBhIGtuaWdodCBhcm1vcgpkb3ZlIGluIGFuIGVhciBjYW5hbApncmFpbnkgZmlsdGVyCmRvdmUKZG93biBpbiB0aGUgc2V3ZXJzIG9mIGxvbmRvbgpkYXJrIGRhbXAgYXRtb3NwaGVyZQpsYXJnZSBqdW5nbGUgZmxvd2VycwplYXJseSBtb3JuaW5nIG1vb2QKZG93bnRvd24gc2VhdHRsZSBhdCBuaWdodApkciBkcmUKcmFkaWFudCBzbWlsZS4gdWx0cmEgd2lkZSBzaG90CmxvbmcgYW5kIG9yYW5nZSBtdXN0YWNoZQpsaXF1aWQgc21va2UgdHdpc3RpbmcKciAtIG1rCmV4dHJlbWVseSBzY2FyeQpzdXBlciBzaGFycCB0ZWV0aAp2aWJyYW50IGNvbG9yIHdpdGggZ29sZCBzcGVja2xlcwpkcmFnb24gYW5jaWVudCBmdWxsIHBsYXRlIGFybW9yCndpdGggcGlwZXMgYXR0YWNoZWQgdG8gaXQKbW9uc3RlciBkb3LDqQpkcmFnb24gZXllCmFyZ2VybQpmdWxsIHByb3RyYWl0CnRyZWFzdXJlIGhvYXJkCnNvbG8gMyAvIDQgcG9ydGFpdApha2lyYSB0b3JpeWFtYSDwn5O5Cmlzb2xhdGUgdHJhbnNsdWNlbnQKYmxvb21pbmcgZWZmZWN0CnRpbnkgcm9vbSB3aXRoIGRpcnR5IHdhbGwgdGlsZXMKZHJhbWF0aWMgZGFyayBmb3Jlc3Qgc2NlbmVyeQpnaG9zdGx5IHBhcnRpY2xlcwpkcmFtYXRpYyBza2llcwpleGFnZ2VyYXRlZCBkZXRhaWwKdHJhdmVsIHBvc3Rlcgp0ZXJyeSBtb29yZQpjYXQgc2lsaG91ZXR0ZQpob2xkaW5nIGxhc2VyIHN3b3JkcwppbiBzbWFsbCByb29tCnR3aXN0ZWQgd2l0aGVyaW5nIHZpbmVzCmRyYW1hdGljIHNwYWNlIGJhdHRsZQpnbG93aW5nIG5hY3Jlb3VzIGNsb3VkcwpyYWluYm93IHJlZmxlY3Rpb25zCm9yYW5nZSBmb2cKZHJhbXRpY2FsbHkgbGl0CmVsZWdhbnQgdXAgdG8gdGhlIGVsYm93CnJlZCBiYWxscG9pbnQgcGVuCnB1bHAgc3R5bGUKZHJhd2luZyBvZiBhIHNrdWxsCmdvbGRlbiBleWVsYXNoZXMKd2VhcmluZyBvYWtsZXkgc3VuZ2xhc3NlcwpkcmRpc3Jlc3BlY3QgcG9zaW5nIGFzIG5hcG9sZW9uCml0cyBhIGRlZXAgZHJlYW0KY2l0eSBsaWtlIGhvbmcga29uZwpmdWxsIG9mIGNvbG91ciA4LXcgMTAyNAp3aXBlIG91dApwYXN0ZWwgY29sb3IgcGFsbGV0ZQpwYWludHMgbWl4aW5nCmRyZWFtcG9vbCByb29tcwpkcmVhbXMgYXJlIGxpa2UgcG9ldHJ5CmRyZWFtcyBvZiBzaWx2ZXIgc3VyZmVyCm9jdGFuZSBoaWdobHkgZGV0YWlsZWQKcm9zcyB0cmFuISEhCnZpdmlkIGNvbG9ycyEhCmFydGlmaWNpYWwgbmlnaHRtYXJlcwp3b3JsZHMgd2l0aGluIHdvcmxkcwp1ZXNoaWJhIHJpaWNoaQphYnN0cmFjdCBtaXJyb3JzCmRyZWFteSBtaWxhIGt1bmlzCndhdGVyY29sb3Igc2tldGNoCmRyZXNzIG1hZGUgb2YgZmlyZQp3aWRlIGhpZ2ggYW5nbGUgdmlldwpyb2JlcyB3aXRoIGdvbGRlbiBjaGFyYWN0ZXJzCmZpZXJjZSAtIGxvb2tpbmcKc2hhY2tsZXMgaW4gaGlzIGhhbmRzCm1hcnNobWFsbG93IGdyYWhhbSBjcmFja2VyCjggMCBzIGFydCBkZWNvcgpkcmlwaW5nIGRyeSBvaWwgcGFpbnQKZHJpcHBpbmcgYmxhY2sgcGFpbnQKZHJhZ29uIGJsb3dpbmcgZmlyZSBhYm92ZQpyZWFkIGEgZGlyZWN0b3J5IGJvb2sKdHJhbXBsaW5nIG92ZXIgcHlvbmd5YW5nCmxvbmcgY2FzdCBzaGFkb3dzCmRyb25lIHBlcnNwZWN0aXZlCmFyaGl0ZWN0dXJhbCBzaG90CmZlcm5hbmRvIGd1ZXJyYQp0ZWtsYSBldmVsaW5hIHNldmVyaW4Ka2FyZW4gdmlra2UKdW5rbm93biBwbGVhc3VyZXMKZ3VsbGl2ZXIg4oCZIHMgdHJhdmVscwpzY29yY2hpbmcgaGVhdApzdG9ueSByb2FkCm9ydGhvZ29uYWwgcGVyc3BlY3RpdmUKZHJvd25lZCBiYW5kaXQgbGFpcgpzZXdlcnMKc3Rlcm4gbGlrZSBhdGhlbmEKdmVyeSBoaWdoIHF1YWxpdHkgbGlnaHRzCnNsb3cgLSBzaHV0dGVyCmNvbW1lcmNpYWxseSByZWFkeQphbmRyb2lkIGNvZmZlZSBzaG9wCmVyemEgc2NhcmxldCBhcyBhIHJlYWwgcGVyc29uCmNvbnF1aXN0YWRvcgpkdWJzdGVwIHZpc3VhbGl6ZWQKaW50cmljYXRlIHBlbndvcmsKOCBrIGVwaWMgc2NlbmUKZHVtcGxpbmdzIG9uIGEgcGxhdGUKZHVuZSBjaXR5IGFuZCB0ZW1wbGVzIG9mIGFycmFraXMKZGVzZXJ0IGJyZWF0aGluZyBhcm1vcgpkZXNlcnQgYW1iaWVuY2UKdnVsY2FuaWMgZ3JvdW5kCmJyYW5kaXNoaW5nIG5hZ2luYXRhIGhhbGRiZXJkcwpmZWF0aGVyZWQgbW91c2UgY2F2YWxyeQp3ZWFyaW5nIGJsYWNrIHdpemFyZCByb2JlcwpvZmZpY2lhbCBwcmludAphY2NpZGVudGFsIHdpbGQgd2VzdApnb3RoIGN5YmVyc3VpdApnaWFudCByZWQgbGVkIHNjcmVlbnMKZGV0YWlsZWQgY292ZXIgYXJ0d29yawpkd2FyZiBjbGVyaWMKc211Z2dsZXIKZHdhcmYgc2NpZW50aXN0IG9mIDEgOSBjZW50dXJ5Cm9sZG1hbiB3aXRoIG11c3RhY2gKY2hyaXMgbW9vcmXigJ0KZHdhcnZlbiB3b21hbgpkYXp6bGluZyBsaWdodHMKbW92aWUgZnJhbWUgc3RpbGwKY29sb3IgaW50ZXJmZXJlbmNlCmJlYW0gZ2xvd2luZyBleWUKdHJhbnNtZXRhbAp0cmFuc21ldGFsIGlpCmNocm9tZWQgbWV0YWwKdm9vZG9vISEKZ2VzdHVyZSBkcmF3aW5ncwpvbiBqdW5nbGUgbmlnaHQgISEhCnN0eWxpc2ggbGVhdGhlciBhcm1vcgpkeXN0b3BpYW4gZmxvb3IgdGlsZSB0ZXh0dXJlCmRlc3Ryb3llZCB3YXNoaW5ndG9uIGRjCnJlYWxpc3RpYyBsaW5lIGRyYXdpbmcKZWFnbGUgZWF0IHNuYWtlCm1hdHQgcmFpbmV5CnN0ZXBoYW5pZSB3ZWxzaAppbiB0aGUgZGlzdGFuY2UgaXMgYSByb2NreSBoaWxsCjEgOCA0IDAgcwpnb2xkZW4gcmFpbmJvdyB0dWJpbmcKZG90IHBhaW50aW5nCnJvb2Ygd2l0aCB2ZWdldGF0aW9uCmZpZWxkIG9mIHN1bmZsb3dlcnMKZWFzdGVyCmVjb3B1bmsgcm9jb2NvCnNlcm1vbiBvZiBwaGlsaXN0aW5lIGdyZWVkCnN1bWFpLWUgYXJ0c3R5bGUKaWxsdXN0cmF0ZWQgc3RhcmJ1Y2tzIGludGVyaW9yCnNoYXR0ZXJlZCBnbGFzcyAoICggc3VuYmVhbXMgKSApCnNhY3JlZCBnZW9tZXRyeSBtZWx0aW5nCmVkaXRvcmlhbCBwb3J0cmFpdApiZWF1dGlmdWwgbGl0IGxhbXBzCmNydWNpZml4aW9uCmhvb2cgZGV0YWlsCmhlcm9pYyBoaXN0b3J5CnNwaXJpdHVhbCBjcnlwdGlkCnpkaXNsYXcgYmVrc2luc2kKYXNobGV5IHdvb2QgaWxsdXN0cmF0aW9uCmVnZyB5b2xrCmVnZ3MgYmVuZWRpY3QgY3VtYmVyYmF0Y2gKbGlnaHQgbGluZXMKY29sb3VyZWQgcGhvdG8KamVhbiBwaWVycmUgdWdhcnRlCmVpZ2h0aWVzIGFtYXRldXIgcGhvdG9ncmFwaHkKd2FycGVkIHZocwpzaGFycCBoaWdoIGNvbnRyYXN0CnNtYWxsIHBlb3BsZSB3aXRoIHRvcmNoZXMKcmVkIHdlYnMgYW5kIGZ1bmd1cwpiZWF1dGlmdWwgY2hhcmFjdGVyIHBhaW50aW5nCmVsZGVyIHRoaW5nCm1hZGRlbmluZyBmb3JiaWRkZW4ga25vd2xlZGdlCmxvdmVjcmFmdGlhbiBjb3NtaWMgZmVhcgplbGRyaXRjaCBob3Jyb3IgZ29kZGVzcwplbGRyaXRjaCBsb3ZlY3JhZnRpYW4gc2VjcmV0YXJ5CnZpYnJhbnQgYmlzbXV0aCBtYXRlcmlhbAp3aXN0ZnVsIGJvc29tCmFtZXJpY2FuIGZsYWcgb24gYmFja2dyb3VuZApjb3dib3kgc3R5bGUKZWxlY3RyaWMgY2F0cyB0aGF0IGZseSBvdmVyIGljZQpzYW5kZmFsbHMKbWFkZSBvZiBjcnlzdGFsaXplZCBzeW5hcHNlCmlycmlnYXRpb24KbWluZC1icmVha2luZwpraW1vbm8gcm9iZSBkZXRhaWxlZCB0b2dnbGVzCnVyYmFuIHBsYXlncm91bmQKYmVhdXRpZnVsIGRhcmsgZWxmIGNvdW50ZXNzCnJvY29jbyBzdHlsZSBwb3J0cmFpdApzdXBlciBhY2N1cmF0ZSBodW1hbiBhbmF0b215ISEhCnRpZmZhbnkgZG92ZXIKaHVtYW4gYmFiaWVzCmVsZXBoYW50IC0gY3JhYiBjcmVhdHVyZQplbGVwaGFudCBpbiB0aGUgcm9vbQpmdWxsZG9tZQphbnRocm9wb21vcnBoaWMgaHVtYW5vaWQKYWwgLSBxYWRpbQplbGV2YXRvciB0byB0aGUgbW9vbgplbGYgZ2lybCB3ZWFyaW5nIGFuIGZsb3dlciBzdWl0CmVsZiBwcmluY2VzcyBrbmlnaHQKYWNjdXJhdGUgaW1hZ2UKcmVkIG1hZ2ljCmJlYXV0aWZ1bCBjbG91ZHkgYXRtb3NwaGVyZQpzdGFuZGluZyBpbiB3YXN0ZWxhbmQKbGlnaHQgc2VwYXJhdGVkIGZyb20gZGFyawplbG1vIGFzIGEgZ2lhbnQgbW9uc3RlcgpjYW1lcmEgZmxhc2ggaXMgc28gYnJpZ2h0CjQgayB1bHRyYSBoaWdoIGRldGFpbGVkCmVsb24gbXVzayBhcyBhIG11c2tldGVlcgpkYXJrIG9pbCBwYWludApyZWFsaXN0aWMgZmxhdm9yCmRlY2F5aW5nIHJpY2ggY29sb3JzIQplbG9uIG11c2sgYXMgdGhvcgp0ZXNsYSBjYXIKY2luZW1hdGljIHBob3RvZ3RhcGh5CmZydWl0IGNlbGVicml0eQphdmFjYWRvIGRyZWFtCmF2YWNhZG8gY2hhaXJzCmF2YWNhZG8gaGFsbG93ZWVuIGNvc3R1bWVzCmVscm9uZCdzIGhvdXNlCmVsc2EgZnJvemVuCmZhcmF3YXkgdmlldwpsaWFubmEKaW4gbGFzIHZlZ2FzCmhlcmIKYmVlZmNha2UgcG9zZQplbHZpc2ggYmxvbmRlIG1hbGUgd2FycmlvcgplbWFkIG1vc3RhcXVlCmVtYnJhY2UgcG9yY2VsYWluIGRvbGwKc3Bvb2t5IG1hbnNpb24KY29zbWljIGxzZCBwb3N0ZXIgYXJ0CmVtZXJhbGQgdGFibGV0CmJhcmUgbGVnCndpdGggZmFuZ3MKZW1pbmVtIGFzIGFuIG0gJiBtCmphbWVzIHR1cnJlbGwgYnVpbGRpbmcKbW9kZXJuIGdsYXNzIGJ1aWxkaW5nCmNpbmVtYXRpYyBuZW9uIG1hdHRlIHBhaW50aW5nCmVtbWEgc3RvbmUgaW4gYmVpZ2UgY29hdApuaWtvbGF5IGtvcGV5a2luCnZkb3ZlbmtvCjhrIHVsdHJhIHJlYWwKc3R5bGlzaCBtYWtlIHVwCmRvbGwgZmFjZQplYWxpc3RpYyBzaGFkZWQgcGVyZmVjdCBmYWNlCmVtbWEgc3RvbmUgd2l0aCBhbiBvd2wKcmVuYXNjZW50aXN0Cm9uIHRoZSBiZWQKd2hpdGUgbGFjZQplbW1hIHdhdHNvbiBhcyBhbiBhdm9jYWRvIGNoYWlyCmFjYWRlbXkgaGVhZG1hc3RlcgpzaXR0aW5nIGluIGJlZHJvb20Kd2hpdGUgYW5kIHBpbmsgY2xvdGgKYmFjayBwb3NlCmlsbHVzdHJhdGlvbiEKcGVuY2lsIGFuZCB2aW5lIGNoYXJjb2FsIGRyYXdpbmcKb24gbWVkaXVtIGdyYWRlIHBhcGVyCnZhcmlhYmxlIGxpbmVhcnQKbWFuZ2EgdG9uZXMKc2V0IGluIGhlbGwKZW1tYSB3YXRzb24gaW4gYmVkCnVuZGVyIHN0cmVldCBsYW1wCm1lc3N5IGhhaXIgYmVkaGVhZApkaW0gY29vbCBsaWdodGluZwpjYW5vbiBmIC8gMS4gOCBnIGFmIC0gcyBkeAp3aGl0ZWhvcm5zCnN0YW5kaW5nISEKbG92ZWx5IGV5ZXMKbWFnYXppbmUgY2VudGVyZm9sZApwb3AgcmVhbGlzbQplbW8gYW5pbWUgZ2lybAprYXdhaWkgZGVjb3JhIHJhaW5ib3djb3JlCm1heGltYWxpc3QgbWF4aW1hbGlzbSB2YXBvcndhdmUKZW1vIGdpcmwgYW5kIGhlciBjYXQKZW1wcmVzcyBvZiB0aGUgd2FzdGVsYW5kCmluc2FuZSBjb21wbGV4aXR5CmVtcHR5IHJlbW90ZSB3aWxkZXJuZXNzCm1lY2hhbmljYWwgdmVoaWNsZXMKc21hbGwgc3BvdCBsaWdodCBvbiByb2JvdApqYWd1YXIKZW10cHkgc3BhY2UKc21hbGwgZmFpcmllcwpyZS1yYXBoYWVsaXRlIGZhaXJpZXMKZW5jaGFudGVkIGZvcmVzdCB0b3dlcgplbmNoYW50ZWQgZ2FyZGVuCnRoaWNrIGJ1c2hlcwpkaWdpdGFsIDQgawpjb250cmFzdGl2ZSBjb2xvcnMKY29zbWljIGJqb3JrCmRhcmsgc3VpdApicmlnaHQgYmx1ZSBnbG93aW5nIHdhdGVyCmludHJpY2F0ZSBtYWNybyBjbG9zZXVwCmVuZ2luZSByb29tIG9uIGEgc3RhcnNoaXAKcmVhY3RvciBjb3JlCnF1YW50dW0gc2Vuc29yIHJlc29uYXRvcgpsYXNlciBhdG9taWMgbWljcm9zY29wZQpjaGluYSBibHVlIGV5ZXMKcGFsZSBnbG93aW5nIHNraW4KYmVhdXRpZnVsIHNpbmlzdGVyIGZlYXR1cmVzCmVsZWdhbnQgZmFzaGlvbiBtb2RlbApiYXRzIGZseWluZyBvdmVyIHRvbWJzdG9uZXMKYmFyZSB0cmVlcwppcm9uIHJhaWxpbmcKc2t5ISEhCmZyYWN0YWwgb2Ygc2NhcnkgZGlyYWMgZXF1YXRpb25zCnNldmVudGllcyBlcmEKZW50ZXJwcmlzZSB3b3JrZmxvdyBlbmdpbmUKdmFudGEgYmxhYwppbXBvc3NpYmxlIHN0cnVjdHVyZXMKZW50cmFuY2UgdG8gMTkwMCdzIG1pbmUKc3BhcnNlIHBpbmUgZm9yZXN0CmVudHJhbmNlIHRvIGFiYW5kb25lZCBtaW5lCmFpIHNlbnRpZW50CmJsdWUgYW5kIHdoaXRlIGFuZCByZWQgbWlzdApib2xkIGJyaWdodCBjb2xvcnMKc3BhY2VzaGlwcyBmbHlpbmcgYWJvdmUKYXV0dW1uIGNvbG91ciBvYWsgdHJlZXMKZW93eW4gZmVuY2luZyB3aXRoIGxpYW0gbmVlc29uCm1hc2tzIG9uIHdpcmVzCnRoaWNrIGNhYmxlcyB3aGlwcGluZyBhcm91bmQKbGlxdWlkIGNvb2xlZCBkZXNrdG9wCmVwaWMgMyBkIG9tb2x1CmVwaWMgMyBkIG94b3NzaQpidWxsZXRzIHdoaXp6aW5nIHBhc3QKYXdhcmQtd2lubmluZyBzdHlsZQp0aGUgZGVwdGhzIG9mIGpveQp3YXJoYW1tZXIgNDAwMDAgc3BhY2UgbWFyaW5lCmlzbGFtaWMKZm9yIHZvZ3VlCmNhdGhlZHJhbHMgYW5kIGFiYmV5cwpvbiBhIGp1bmdsZSBmb3Jlc3QgdHJhaW4gdHJhY2sKZXBpYyBiYXR0bGUgc2NyZWVuIG9mIGhlcm8KaWNvbmljIGNvbXBvc2l0aW9uCmhhemUgb3ZlciB0aGUgc2hvdWxkZXIgc2hvdApkYW4gbWNwaGFybGluIDogOiBvcm5hdGUKZmxhdCBzaGFwZWQgc3RvbmUgcmVsaWVmCmVwaWMgZmFudGFzeSBiYXR0bGUKZXBpYyBmYW50YXN5IGQgJiBkIGhvYmJpdCByb2d1ZQpmYW50YXN5IGJhdHRsZQpnb2xkIGJlbHQKc3RpbGV0dG8gaGVlbGVkIGJvb3RzCmdpbCBlbHZncmVuIDUwbW0KZ29sZCBib2R5cGFpbnQKaHlwZXJkZXRhaWxlZCBjcmlzcCByZW5kZXIKZXBpYyBtYXN0ZXJwaWVjZSB0b3JtZW50Cm1vbnVtZW50YWwgbW91bnRhaW5zCm93c2xleQptdXBwZXQgcHVuawplcGljIHBhbGFkaW4gYXJtb3IKdGhlIGJlYXN0bWFzdGVyIDEgOSA4IDUKZGFyayBtb29keSBsaWdodAppbiB0aGUgZmlsbSBleGNhbGlidXIgMSA5IDggMApmaWxsIGxpZ2h0LiBzdHVkaW8KYnJlYXRodGFraW5nIGxvb2sKcGluayBjbG91ZCBib2tlaAppbiB0b2tpbwpzbGlnaHRseSBvcGVuIG1vdXRoCm1hcmtldGluZyBkZXNpZ24KYWlyIGZvcmNlIGp1bXBzdWl0CmNsb3NldXAgY2luZW1hdGljIGFxdWF0aWMgc2NlbmUKYXQgdGFrZW9mZgpjaGVlcmZ1bCBhbWJpZW50IGxpZ2h0aW5nCnRoZSBiZXN0IG9uIGNnc29jaWV0eQpmb3JlYm9kaW5nIGJhY2tncm91bmQKaXQgd291bGQgdGFrZSBwbGFjZSBpbiBzcGFjZQpiYXJlbHkgYW55IHdhbGxzIGluc2lkZQrwn5GwIPCfj4cg4p2MIPCfjYMKZG9yaWFuIGNsZWF2YW5nZXIKZXBpYyByaXZlbmRlbGwgZmFudGFzeQpnbG93aW5nIGJsYWNrIGRhcmsgdmVsdmV0CmRldGFpbGVkIGZhY2UgKQpwdWxsaW5nIHN0cmluZ3MKcHVwcGV0IG9uIGEgc3RyaW5nCmhhbmQgY29udHJvbGxpbmcKam9zYW4gZ29uemFsZXMhISEKdGlmYQplcGljIHNjZW5lIG9mIHpldXMKc3RyaWtpbmcgZGV0YWlsZWQgYXJ0c3R5bGUKdGltZSB0cmF2ZWxlcnMKYmVhdXRpZnVsIGJpb21lY2hhbmljYWwgZGppbm4KY29uY2VwdCBhcnQg77yMIGhpZ2hseSByZW5kZXJlZApoaWdoIHF1YWxpdHkgdXBsb2FkCm5vbmR1YWxpdHkKcmVtb3ZlCmxhbmRzbGlkZSByb2FkCmVzY2FwZSBmcm9tIG5ldyB5b3JrCmVzY2hlcmljaGlhIGNvbGkgcGFydHkKZXNlCjEgNSA5IDUKd29ybGQgc2VyaWVzIG9mIHBva2VyCmxpa2UgYSBzY2VuZSBmcm9tIGJsYWRlIHJ1bm5lcgpteXN0aWMgYXRobW9zcGhlcmUKZXRoYW4ga2xlaW4KZXRoZXJlYWwgZ29sZCBhbmQgc2lsdmVyIHRvbmVzCnN0YWJsZSBkaWZmdXNpb24gYWkKcGFyYW1ldHJpYyBmbG93CmV0aGVyZWFsIHN0YXJsaXQgY2l0eSBhdCBzdW5zZXQKc2VhIGRyYWdvbgpkZXJnCnVzc3Igc3VpdApza2luIDogdGphbGYgc3Bhcm5hYXkKaGQgYW5pbWUgd2FsbGFwZXIKaW50cmljYXRlbHkKZnVsbCBjYXJkIGRlc2lnbgpqLiBjLiBwZW5ueSB3aXNoIGJvb2sgMSA5IDggMgpldmVyZ3JlZW4gdmFsbGV5CjEgMCAwIDAgYmVzdCBhbGJ1bSBjb3ZlcnMKd29vZGVuIHN0YXR1ZQpzbm93eSBtb3VudGFpbiBiYWNrZ3JvdW5kCm1vbm9saXRocwptb3NzIGhpZ2hseSBkZXRhaWxlZApldmlsIGtuaWdodApldmlsIHByaW5jZXNzIG9mIHRoZSB3YXN0ZWxhbmQKeWVsbG93IHB1cnBsZQphcXVpbGluZSBmZWF0dXJlcwpjb2xkIHNlY29uZGFyeSBjb2xvcnMKYW5ncnkgY2hhcmFjdGVyIHdpZWxkaW5nIGEgc3dvcmQKZHJhbWF0aWMgY2luZW1hdGljIGRldGFpbGVkIGZ1cgppbGx1bWluYXRlZCBwb29sCnNwb250YW5lb3VzIHBvcnRyYWl0CnJvdG9zY29waW5nCmV4YXIga3VuCmRpYWwKNCBrIGRldGFpbCBmYW50YXN5CndlYXJpbmcgamV0cGFjawp2aWV3IGZyb20gaGVsaWNvcHRlcgpyZWQgZHVzdHkgc29pbAp2ZXJ5IHZlcnkgcHJlY2lzZQpleHBsb2RlZCB2aWV3IG9mIGh1bWFuIGFuYXRvbXkKZ2xvc3N5IHNwaGVyZQphbWJpZW50IGxpZ2h0aW5nIGhpZ2hseSBkZXRhaWxlZApjcmF6eSBhdG1vc3BoZXJlCnBpeGVsIG1vc2FpYwpwYWludCBkcmlwcyBsaXF1aWQgd2F4CmdsaXN0ZW5pbmcgYm9keQpvZiBlbW1hIHdhdHNvbgpzb2Z0IGZvcmVzdCBiYWNrZ3JvdW5kCmV4cXVpc2l0ZSBjcmVhdHVyZSBwb3N0ZXIgYXJ0Cm11c2ljIHBvc3RlcgpybmEgYmlvd2VhcG9uCmphbWVzIGd1cm5leSB3ZXRhIHN0dWRpbwpsdXNoIGFsaWVuIGxhbmRzY2FwZQp0YWxsIG1vdW50YWluCnRlZW5hZ2VyIGhhbmdvdXQgc3BvdApuZW9uIHRvbmVzCmV4dGVybWluYXR1cyBvbiBlYXJ0aAp4LW1lbiBzdG9ybQpmYW50YXN5IGFydCBiZWhhbmNlCmZsb3dpbmcgcHVycGxlIGhhaXIKc3Vuc3RvbmUKa2l0c3VuZSBtYXNrIG9uIGhlYWQKd2VhcmluZyBhIGtpdHN1bmUgbWFzawpncmVlbiBnbG93aW5nIHJ1bmVzCmhhc3NsZWJsYWQKZGVlcCBlbnZpcm9ubWVudApjb3p5IGVudmlyb25tZW50CmN5YmVycHVuayAyIDAgeS4gbyBtb2RlbCBnaXJsCmJsYWNrIHJlZmxlY3Qgcm9iZQp1bnJlYWwgZW5naW5lIC0gaCA3IDYgOAoxIC8gNSAwIDAgc2h1dHRlciBzcGVlZApleHRyZW1lIHNoaXR0eSBjYXIgbW9kcwpyZWRuZWNrIGVuZ2luZWVyaW5nCm9yYW5nZSBqdW1wc3VpdApjaGluZXNlIGFydGlzdCBjYWkgZ3VvIHFpYW5nCmV4cGVuc2l2ZSB0b3AgcXVhbGl0eSBwcm9kdWN0CmJlYXV0aWZ1bCBzbGltIGxlZ3MKc3R1bm5pbmcgbGlnaHQgY29taW5nIHRocm91Z2gKZmVtaW5pbmUgaW4gY3V0ZSBwYXN0ZWwgc2hhZGVzCm5vcm1hbiBhY2tyb3lkCnNpdHRpbmcgY3V0ZWx5IG9uIGEgbW91bnRhaW4KYmVoaW5kIGEgdGlueSB2aWxsYWdlCmNhbWVyYSBsb29raW5nIHVwIGF0IGhlcgpleHRyZW1lbHkgZGV0YWlsZWQgZCZkIG1hcAp0aGljayBzbW9vdGggd2FyZnJhbWUgdGhpZ2hzCmZvdW5kIHdyaXR0ZW4gaW4gYSBub3RlYm9vawpyZWQgZmFicmljIGNvYXQKcmljaCBtb29keSBjb2xvdXIKbWFycyByb3ZlciBpbiBiYWNrZ3JvdW5kCnJlZmxlY3Rpb24gb2YgaXBob25lIGluIHZpc29yCmlwaG9uZSBpbiBoYW5kCmNvaWxndW4KdHJpYmFycmVsCmphZGUgZ3JlZW4KNCAwIHllYXJzCmhvbWVyIHNpbXBzb24gbG9va2FsaWtlCnNtb290aCBjbGVhbiB0ZXh0dXJlCndoaXRlIGZpbmlzaAptb29keSBtdXRlZCBjb2xvcnMKbmF0ZSBiZXJrdXMKanVzdGluYSBibGFrZW5leQpsc2QgdGF0dG9vIGRlc2lnbgppbHlhIHJlcGluIGFuZCBhbmRyZWkgdGFya292c2t5CmJsb29keSBzdW5zZXQKOCBtbSBsZW5zCi0gOSA5IG1tIG1hY3JvIGxlbnMKZnVqaWZpbG0geDEwMHYKb3Rvcmhpbm9sb2d5CnNldHRpbmcgc3VuLiBnb2xkZW4gaG91cgpleWUgYXJ0CmV5ZXNpZ2h0CndlZGphdCBleWUKZXllIG9mIHRoZSBzdG9ybQp0ZXh0dXJlIGRldGFpbApleWViYWxsIGdyb3dpbmcgZm9ybSB0cmVlIGJyYW5jaApzb2FwIGJ1YmJsZQpwcm9wb3JjaW9uYWwKbGVhdmVzIGFuZCBtYWdpYwpwaXhlcgpmYWNlIGZlbWFsZSBwb3J0cmFpdApmYWNlIGFjY2Vzc29yaWVzCmZhY2UgaW4gdGhlIGNsb3VkcwpoaWdoIGRldGFpbCBwb3J0cmFpdCBwaG90bwpmYWNlIG1hZGUgb3V0IG9mIHBsYW5ldApmYWNlIHBvcnRyYWl0IG9mIGFuIGVsZWdhbnQKdG9yY2hlcyBpbiBncm91bmQKaGlnaGx5IGRldGFpbGVkIGhvcnJvciBkeXN0b3BpYW4KbWluaW1hbGlzdGljIGFlc3RoZXRpY3MKc2tpbWFzawpmb3Job25vcmdhbWUKZ290aGljIGV5ZWxpbmVyCjEgOCA3IDcKcGV0enZhbCBsZW5zCmZhZW9ybnJhbgpmYWlyeSBkYW5jaW5nCnJlYWxpc3RpYyBnYXJkZW4KZHJhZ29uIHRhaWxlZApmYWlyeSBwYWxhY2UKamFwYW5lc2Ugc2hyaW5lIHdhdGVyZmFsbApnb2xkIGFuZCBnZW1zCmRvdmVzCm1hc3NpdmUgZ3JlZW4gZHJhZ29uISEhCmZhbGwgb2YgdGhlIGFuY2llbiByZWdpbWUKZGlnaXRhbCBzdHVkaW8gYXJ0CmZhbGxlbiBrbmlnaHQKd2ludGVyIHBhaW50aW5nCmZhbGxvdXQgNCB2YXVsdCBib3kgdGh1bWJzIHVwCjcgMCBzIHZpc3VhbHMKd2FybSBkZWVwIGNvbG91cnMKb3V0ZG9vcnMgbWVzYSBzZXR0aW5nCnJ1cmFsIHdhc3RlbGFuZHMKc21hbGwgc2V0dGxlbWVudHMKc2hhbnR5IHRvd25zaGlwcwpmYWxsb3V0IHN0eWxlIGlzdGFuYnVsCmh1Z2UgbWFjaGluZSByb2JvdApzcGFjZSBiZXR3ZWVuIHN1YmplY3RzCmZhbiBhcnR3b3JrIG9mIG1hcmlvCmRldGFpbGVkIGZhbnRhc3kgY2hhcmFjdGVyIHN0dWR5CnN0cmVldCBjaXR5IG5pZ2h0CmZhbnRhc3kgYWxjaGVtaXN0IGxhYm9yYXRvcnkKbWFnaWNhbCB3aXRjaGNyYWZ0Cm1vcnRhciBhbmQgcGVzdGxlCm9sZCBtYW51c2NyaXB0cyBhbmQgc2Nyb2xscwpsZXZlbCAxIHBsYXRlIGFybW91cgpvYnNpZGlhbnMgc2tpbgpjaHJvbm8gdHJpZ2dlciBndWlsdHkgZ2VhciBzdHlsZQpoZWF2aWx5IGV4YWdnZXJhdGVkIHByb3BvcnRpb25zCmRvb20gaGVsbCB0aGVtZQppbiBhIGphcGFuZXNlIHRvd24gYXQgbmlnaHQKZmFudGFzeSBiZWVrZWVwZXIKd2VhcmluZyBuYW5vdGVjaCBob25leWNvbWIgcm9iZQpwYXN0ZWwgYXJ0d29yawpmYW50YXN5IGNoYXJhY3RlciBwaG90bwp5YW5kZXJlLiB0YWxsCnNsaWdodGx5IG11c2N1bGFyCnNpdHRpbmcgb24gdGlnZXIgY2F2YWxyeQpsb3JkIG9mIHRoZSByaW5ncyBhcnRpZmFjdHMKZ3Jhc3MgZmllbGQgc3Vycm91bmRpbmcgdGhlIGNpdHkKc3Ryb25nIHdhbGxzCmZhbnRhc3kgZGVzZXJ0IGNyeXN0YWwgaXNsYW5kCmZhbnRhc3kgZHVjayBjb25jZXB0IHBvcnRyYWl0CnByYWN0aWNhbAp2aWRlb2dhbWUgYmFja2dyb3VuZApmYW50YXN5IGdlbnJlIHBvcnRyYWl0CnBob3RvZ3JhcGhpYy4gaW1wb3NpbmdseSB0YWxsCmZhbnRhc3kgaHVudGVyCm1hbnkgaGVhZHMKZmFudGFzeSBsYW5kCmZhbnRhc3kgbGFuZHNjYXBlIHBhaW50aW5nCmxha2UgaW4gdGhlIGRpc3RhbmNlCmhpZ2ggYXJjaGVkIGNlaWxpbmcKd2VhbHRoeQptZWdhIHN0cnVjdHVyZSBjaXR5Cm1lZ2FsaXRoaWMgYnVpbGRpbmdzCmZsb2F0aW5nIGluIG1pc3QKbWFzdGVyIHNwbGludGVyCm5pY29kZW11cwpmYW50YXN5IHBsYWlucwpkICYgZCBsb3hvZG9uCmxvdHMgb2YgbW96emFyZWxsYSBiYWxscwptb3p6YXJlbGxhIGV2ZXJ5d2hlcmUKdG9tYXRvZXMgaGFuZ2luZyBvbiBicmFuY2hlcwpiYXNpbCBsZWF2ZXMgaW5zdGVhZCBvZiBsZWF2ZXMKZmFudGFzeSB2aW9saW4KNyAwICUgb2NlYW4KZ29sZCBtZWRhbApmYXIgcG9ydHJhaXQgb2Ygam9obiBmIGtlbm5lZHkKd3cgMiBub3JtYW5keSBmb3kgYXJuaGVtIDEgOSA0IDQKc2hvcnQgc2xlZXZlcwp1bHRyYXJlYWxpc20gb2lsIHBhaW50aW5nCmZhbnRhc3kgb3V0Zml0CmNsZWFuIGJvcmRlcnMgOyBwaG90b3JlYWxpc3RpYwpvY3RvYmVyZmVzdApsaWtlIG1hdHJpeApmYXQgY2F0IHN1cGVyaGVybwpmYXQgZHJhZ29uIHdpdGggcmlkZXIKY2luZW1hdG9ncmFwaHkgYXRtb3NwaGVyZQpmYXQgbGF0aW4gd29tYW4gZGFuY2luZwpsb3RzIG9mIHN1bmxpZ2h0Cm5laWdoYm9yaG9vZCBvdXRzaWRlIHdpbmRvdwpmYXQgcGVuZ3VpbiB1bml0eSBhc3NldApmYXQgcmlwcGVkIHNhdGFuCmZhdCByaXBwZWQgc2F0YW5pYyBjcmVhdHVyZQpyaW8gZGUgamFuZWlybyBmYXZlbGEKdmludGFnZSBzY2llbmNlIGZpY3Rpb24gY2luZW1hCmFzdHJhbCBldGhlcmVhbApvcm5hdGUgcG9uY2hvCmRpZ2l0YWwgYXJ0IC0gdyA3MDAKZmVlbGluZ3Mgb2YgZ3VpbHQKaGFqaW1lIGlzYXlhbWEKOCBrIGhkIHBob3RvCmFkIGNhbXBhaWduCnJvbWFudGljaXN0IHN0eWxlCnZpYnJhbnQgcmVkIGhpYmlzY3VzCm9ybmF0ZSBjeWJlcnB1bmsgaW50ZXJpb3IKZmVtYWxlIGFjdGlvbiBhbmltZSBnaXJsCmZlbWFsZSBhbmF0b215CmNhcmdvIHBhbnRzLiBjeWJlcnB1bmsgY2l0eQpyYWluLiBoeXBlciBkZXRhaWxlZAphbnRocm8gZGlnaXRhbCBhcnQKbGFuZGVkIHNwYWNlc2hpcCBpbiBiYWNrZ3JvdW5kCmZlbWFsZSBibGFja3NtaXRoCndlYXJpbmcgbm9oIHRoZWF0cmUgbWFzawpmZW1hbGUgY2hhcmFjdGVyIHNoZWV0CnBhcnQgZm94CmFudGhyb3BvbW9ycGhpYyBmZW1hbGUKbGVkIGRpc3BsYXkKY292ZXJlZCBoZWFkCmZlbWFsZSBkb2Mgc2F2YWdlCmZlbWFsZSBlbW8gYXJ0IHN0dWRlbnQKYmVhdXRpZnVsIGZpbmUgLSBmYWNlCmZlbWFsZSBmbG9hdGluZwpjbGFzc3Jvb20gYmFja2dyb3VuZApoaWdoIGRldGFpbCBvZiBhIGhhbmQKZHluYW1pYyBjaGFyYWN0ZXIgZGVzaWduCmxpZ2h0cyBjYXVzdGljCmNoYXJhY3RlciBleHBsb3JhdGlvbgpmZW1hbGUgamVkaQpqZXdlbGVkIGhlYWRkcmVzcwpmZW1hbGUgbGF3eWVyCmRlZmVuc2UgYXR0b3JuZXkKZmVtYWxlIG1hZGUgb2YgaWNlCnJlYWxpc3RpYyBkaWdpdGFsIGRyYXdpbmcKZ29sZCBhbmQgbHV4dXJ5IG1hdGVyaWFscwpjcmltc29uIGhhbG8KZmVtYWxlIHJlZGhlYWQgdGVtcGxhcgptYWdpdGVrCmx1bWlub3VzIGV5ZXMKc3Ryb25nIGZhY2lhbCBleHByZXNzaW9uCmZlbWFsZSBzcHkKZmVtYWxlIHN0cmVldHdlYXIgYmxvZ2dlcgppbiB0aGUgMTkyMHMKZnVsbCBib2R5IHBvcnRyYWl0IHNob3QKcGhvdG8gZnJvbSAyMDIyCndpZGUgYW5nbGUuIHdheW5lIGJhcmxvd2UKcGFpbmluZwpqaW55aXdlaQplbWJyb2lkZXJlZCB1bmlmb3JtIGd1YXJkCm5vZGFjaGkKZm9vdCB3cmFwcwpmaWdodGluZyBtb25zdGVyIHdpdGggbWFnaWMKcmVhbGlzdGljIGh1bWFuIGV5ZXMKZmVtYWxlIHdpemFyZAphbnRocm9wb21vcnBoaWMgZGVlcgplbWl0dGluZyBzcG9yZSBjbG91ZHMKZnV0dXJpc3RpYyBoaWdoIHRlY2gKZmllbGQgb2YgaGF5CmRlc3RydWN0aW9uIGFyb3VuZCBoZXIKZnJvemVuIHRpbWUKZ3JlZW4gZ2FzIHNwcmVhZGluZyBhY3Jvc3MgbGFuZApmaWdodGVyIGpldCBpbiBmbGlnaHQKYmFraSB0aGUgZ3JhcHBsZXIKc2Fzc3kgcGVyc29uYWxpdHkKcGFkZGxlIGFuZCBiYWxsCjMgZCByZWFsaXN0aWMKaG93IHRvCmZpbGlncmVlIGZyYW1lCmR3YXJ2ZW4KbmFzYWwgc3RyaXAKc2F0IGF0IGhlciBkZXNrCnRoZSBjb25qdXJpbmcKZmlsbSBtb3ZpZSBzdGlsbApmaWxtIG5vaXIgamF6eiBiYXIKcmVkIHJvb20Kbm92ZWwgY292ZXIgYXJ0IGZvciBhIGJvb2sKaGVyIGZhY2UgaXMgY292ZXJlZCB3aXRoIG11ZApncm91cCBzaXQgYXQgdGFibGUKb2JzZXJ2YXRpb24gZGVjawpmaWxtIHN0aWxsIGZyb20gaG9ycm9yIG1vdmllCmZpbG0gc3RpbGwgZnJvbSBzaW4gY2l0eQpmaWxtIHN0aWxsIGZyb20gdGhlIG9mZmljZQpiYW90b3UgY2hpbmEKcGVha3kgYmxpbmRlcnMgKDIwMTgpCmFjY2VudHVhdGVkIHNoYWRvd3MKaW5maW5pdHkgc3RvbmVzCmZvY3VzIG9uIGZhY2lhbCBkZXRhaWwKY292ZXJlZCBpbiBtdWQKd2VhcmluZyBibHVlIHJvYmUKMTkxMAphbGllbiBnb28Kc3BpZGVyIHdlYmJlZCBib2R5Cmd1bm5lcgpmaWxtIHN0aWxsIG9mIG1hbm55IHBhY3F1aWFvCmluIHRoZSBuZXcgbWF0cml4IG1vdmllCmxhcmdlIGJvc3VtCm9pbHkgc3Vic3RhbmNlcwo0IGsgd2lsZCB3ZXN0CmZyb250IC0gZmFjaW5nIHBlcnNwZWN0aXZlCmZpbmVseSBkZXRhaWxlZCBmZWF0dXJlCnZlcnkga2VueWFuCnVubWlzdGFrYWJseSBrZW55YW4KaHVnZSBsYWR5YnVnIG1vdGhlcnNoaXBzCmVwaWMgcm9hZCAtIHRyaXAgaW4gb3V0ZXIgc3BhY2UKZG9vciBndW5uZXIKZGlydCByb2FkIGJhY2tncm91bmQKY2Fub24gZW9zIDUgZCBtYXJrIGl2IGNhbWVyYQptYWtpbmcgdGhlIGJlc3Qgc211ZyBzbWlsZQpuaWtvbiBkIDggNSAwIGNhbWVyYQprbm9ja291dCBwdW5jaApoYXltYWtlciBpbXBhY3QKaGlnaCBpbXBhY3QKZGlnaXRhbCBiYWNrZ3JvdW5kCmRyYW1hdGljIGdyYWRpZW50IGxpZ2h0aW5nCnRpcmVkIGJhZ3MgYXJvdW5kIGV5ZXMKZmlyZSBicmVhdGhpbmcgZ2Vlc2UKZmxhbWUgdGhyb3dlcgpmaXJlIGJ1cnN0CmJhZGdlIG9uIGNvbGxhcgpmaXJlIGdpYW50CmZpcmUgbWFnZQphd2FyZCB3aW5uaW5nIHdlYmRlc2lnbgpmaXJlIHdhcm5pbmcgbGFiZWwK5Y2DIOiRiSDpm4Qg5aSnCmJpZyBiZW4gb24gdGhlIG1vb24Kcm9tYW4gbW9udW1lbnRzCndhZmZsZWhvdXNlCm9wYWwgZmxlc2gKbWlzc2lsZXMgZXhwbG9zaW9ucyBpbiB0aGUgc2t5CnBob3Rvam91cm5hbGlzbSBkZXRhaWxlZApoaXMgc21pbGUgdGhyZXcgc2hhZG93cwpqb2Uga2VlcnkKZ3JhcGhpYyBnbGl0Y2hlcwpibGFjayBhbiB3aGl0ZQpwZW1icm9rZXNoaXJlCmdyYXBoaWMgZGVzaWduIHwgbWV0YSBkZXNpZ24Kd29sZmYgb2xpbnMKZmlzdCBvZiB0aGUgbm9ydGggc3RhcgpmaXN0ZmlnaHRpbmcgZGVtb25zCmZyaWRhIGNhc3RlbGxpCnN0cmVldCBjb3JuZXIKZml2ZSBzY29yZSB5ZWFycyBhZ28KciAvIHZleGlsb2xvZ3kKaGFuZ2luZyBzaWxrIHNjcm9sbApmbGFtZSB2b3J0ZXgKbmV0aGVyCmNhc2V5IGNvb2tlCmhpZ2hseSBwaG90b2dyYXBoaWMgcmVuZGVyCmplZmYgLSBoYWxsCndpdGggYSB3YXRlcmZhbGxzCmF2YXRhciBsYW5kc2NhcGUKZmx5aW5nIHdoYWxlcwpoaXMgaGVhZCBjb3ZlcmVkIGluIGpld2VscwpvcmFuZ2UgaGlnaGxpZ2h0cwplcGljIGNvbWljIGJvb2sgYXJ0CmFuZ2xlZCB3YWxscwpmbG9vZGVkIG9sZCB3b29kZW4gY2l0eSBzdHJlZXQKY2hpbGx5IGRhcmsgbW9vZApmbG9vZGVkIHRvd2VyCmZsb3JhbCBqdW5nbGUgdHJlZWhvdXNlCmJpZWRlcm1laWVyCiggc3ltbWV0cmljYWwgKQpmbG93ZXIgZ29kZGVzcwpndW5kYW0gYm94IGFydApjb3BwZXIgdmVpbnMKcmVkIGV5ZWQKY2l0eSBkZXN0cnVjdGlvbgpjbGF5bW90aW9uCmFmcm8gY29tYgp3aG9ybApzbW9vdGguIGRpZ2l0YWwgcGFpbnRpbmcKbG9zaW5nIGZlYXRoZXJzCmJ1aWxkaW5ncyBhcmUgZmx5aW5nCmRlbGl2ZXJpbmcgcGFyc2VsIGJveAppbiBmb3JjYXN0ZWQgc2t5CmhpZ2ggZGV0YWlsISEhIDggawpmb2dneSBqdW5nbGUKc3R5bGUgb2YgdGhvbWFzIGtpbmthZGUKZm9vZCBzdHlsaW5nCjE5NzYgcG9zdGVyCmludGlyY2F0ZQpncmVhdCBraW5nIG9mIHN0b3Zva29yCmluIGFuIG9wZW4gZm9yZXN0CmZvcmVzdCBlbGYgYmFyZCBwbGF5aW5nIGx1dGUKZm9yZXN0IGZsb29yCndoaXRlIGZ1bmdhbCBzcG9yZXMgZXZlcnl3aGVyZQooIHZpc3VhbGx5IHN0dW5uaW5nCmZvcmVzdCBwb3J0YWwKZm9yZXN0IHdpdGggbGFrZQpzdHJhbmRlZApmb3JtYWwgcG9ydHJhaXQgb2YgZG9uIHF1aXhvdGUKZm9yc2FrZW4gY3JvY29kaWxlIGdvZAplbmdhZ2VtZW50IHJpbmcgYWRzCmZvY3VzZWQgZXllcwppbnRlcmlvciBhYmFuZG9uZWQgaG9zcGl0YWwKY2hvaXIKYmVsYXlpbmcKZmxvd2luZyB0ZW5kcmlscwpmb3VyIGZhY2VzIGluIG9uZSBjcmVhdHVyZQpqZXN1cyBmYWNlCnNtYWxsIHJldHJvIHN0YXJzaGlwIGluIHRoZSBza3kKdGhleSBhcmUgc2libGluZ3MKa3VtYWRvcmkgbWFrZXVwCmZveCBhcyBhIG1vbmtleQp0cnVlIGNvbG9ycwpmb3ggZmx5aW5nIHRocm91Z2ggbGFuZHNjYXBlCmZveCBpbiBhIGxhYiBjb2F0CmZveGlzaCBndXkgaW4gYSBsYWIgY29hdAp0aGUgc2t5CmNvbG9yZnVsIGdlbmVyYXRpdmUgYXJ0CmZyYWN0YWwgZ2VvbWV0cnkKcmFpbmJvdyBjYXVzdGljIGxpZ2h0aW5nCmJlYXV0aWZ1bCBvcGFsZXNjZW50IGNvbG91cnMKdGVjaCB3ZWFyISEhCjMgNiAwIGNhcHR1cmUKZnJhY3RhbHMhISB3YXRlcgpmcmFnaWxlIGdpcmwgaG9sZGluZyBhbiBhcnJvdwpjb250ZW1wb3JhcnkgbWFzdGVycGllY2UKZnJhbmsgc2luYXRyYQplbGVnYW50IGludHJpY2F0ZQpmaW5lIGFydHN0eWxlCmZyb20gbG91dnJlCmZhY2Ugb2YgYW54aWV0eSBhbmQgbG9uZ2luZwpnb2xkZW4gZ2F0ZXMKZnJlZGR5IG1hbWFuaSBzaWx2ZXN0cmUgZmFjYWRlCmd0YSA2IHN0eWxlCnJlY292ZXJpbmcgZnJvbSBwYWluCnBob3RvcmVhbGlzdGljIGdyYXBoaWNzCmFydGlsbGVyeSBib21iaW5ncwpmcmVuY2gga2lzcwoyIDAgNSA2IHggMiAwIDUgNgpmcmV5YQpjb2xkIGJlZXIKZmFkZWQgcmVkIGNvbG9ycwpkZXRhbGVkIGZhY2UKcGl4YXIgbW92aWUgcG9zdGVyCmluIGhpcyBob2JiaXQgaG9tZQpmbHlpbmcgc2hvdApmcm9nIHBsYXlpbmcgb24gZ3VpdGFyCnBsdXNoaWUgcGhvdG9ncmFwaHkKZnJvZ2d5IGNoYWlyCnRoZSBiZXN0IG1vZGVybiBwaG90byBvZiBhdWd1c3QKc2NpZW5jZSAtIGZpY3Rpb24gbWF0dGUgcGFpbnRpbmcKbm92ZWxhbmNlCmJsYWNrIGFybW91cgpyaW90IGdhbWVzIGNvbmNlcHQgYXJ0CmhhbmRzIGJlaGluZCBoZXIgYm9keSBwb3NlIQpzdW5zZXQgcHN5Y2hlZGVsaWMKdG9tYXN6IGFsbGVuIGtvcGVyYQphYmFuZG9uZWQgc3RydWN0dXJlcwpkZXNhdHVyYXRlZCBhbmQgbXV0ZWQgY29sb3JzCmRlYnJpcyBjaGlwcyBydWlucwpubyByYWluYm93CndlYXJpbmcgYmxhY2sgZ3JleSBzdWl0Cm1ldGFsbGljIG5lYnVsYQp2aWRlbyBnYW1lIGF2YXRhcgpoZXIgZmFjZSBodXJ0cwpwdXNoLXVwIHVuZGVyd2lyZS4gaW50cmljYXRlCmRpc25leSBzcGxhc2ggYXJ0CnVuY2FubnkgY3JlZXB5IGxpbWluYWwgc3BhY2UKZ2Vpc2hhIG1hc2sKY2F0dGllIC0gYnJpZSBvZiBtaXRocmlsIGhhbGwKaG9sZGluZyBhIHRvd2VyIHNoaWVsZApoYW5kcyB0aGF0IGFyZSBmb3ggLSBwYXdzCnNoYXJwIGZveCAtIHRlZXRoCnByb21ldGhlYW4gYWxpZW4gZW5naW5lZXIKdmFsbGV5IG9mIHRoZSBkYW1uZWQgYmFja2dyb3VuZApqYWNxdWVzIC0geXZlcyBjb3VzdGVhdQpib2xlcm8KYnJvd24gc2hpcnQKbXlzdGVyaW91cyAtIGVlcmllIC0gb21pbm91cwpjb25zY2lvdXNuZXNzIHByb2plY3Rpb24KY3JvcHBlZCBzaGlydCB3aXRoIGphY2tldApiZWFjaCBzdW5zZXQgYmFja2dyb3VuZApoaXJzdHV0ZSBhbmQgbXVzY2xlZApmdXR1cmlzdGljIHRlY2h3ZWFyCmdyZXkgcGFudHMgYW5kIGJsYWNrIGRyZXNzIHNob2VzCmJlYXV0aWZ1bCBmYWNlICsgc3ltbWV0cnkgZmFjZQpvbiBhIGd1bmRhbQplbGVnYW50IHNlZHVjaW5nIHBvc2UKbG9uZyBwb2ludHkgZWFycwpyZWQgZmxhbWVzIGluIGJhY2tncm91bmQKc29saWQgZGFyayBiYWNrZ3JvdW5kCmFhcm9uIHNpbXMKYmlvIC0gbWVjaGFuaWNhbCBuaW5qYSBzYW11cmFpCmZ1bGwgYm9keSBmdWxsIGhlaWdodAphcm0gdGF0dG9vcwozLzQgdmlldyBmcm9tIGJlbG93CnN3aXJsaW5nIHdpc3B5IHNtb2tlCm1vZGVybiBhcnQgbXVzZXVtCmV4cHJlc3NpdmUgZmVtaW5pbmUgZmFjZQpzaWxreSBnYXJtZW50CndlYXJpbmcgZ29sZCBkZXRhaWxlZCBjaG9rZXIKd2VhcmluZyBzdGVlbCBjb2xsYXIKcG91dHkKcm9wZXMgYW5kIGNoYWlucyBpbiBiYWNrZ3JvdW5kCnN0ZXBoZW4gbGF1IGFuZCBhcnRnZXJtCmNvcm4gb24gYSBjb2IgZXZlcnl3aGVyZQptYXNzZXMgb2YgcGVvcGxlIGluIHRoZSBkaXN0YW5jZQpkYXlhbml0YSBzaW5naApzdGFpbmVkIGdsYXNzIGJhY2tncm91bmQKbG9va2luZyBhdCB0aGUgdHJlYXN1cmUgYm94CnRhdHN1bWFraSB3aXRoIGdyZWVuIGN1cmx5IGhhaXIKMiBhcm1zIGFuZCAyIGxlZ3MKd2VhcmluZyBhbiBhdmlhdG9yIGphY2tldApjcmVhbSBkcmlwcGluZyBvbiBmYWNlCmNoaWFyb3NjdXJvIGFuaW1lIGtleSB2aXN1YWwKbmF0aXZlIHJpY2ggamV3ZWxyeQphc3BlbiBncm92ZSBpbiB0aGUgYmFja2dyb3VuZApncmVlbiBhbmQgeWVsbG93IHRvbmVzCmluIGEgZmxvd2luZyB3aGl0ZSB0YWlsY29hdAplbGFib3JhdGUgZ29sZCBqZXdlbHJ5CmFlcmlhbCBzaWxrCnNsaWdodGx5IHRhbm5lZAphbW9uZyByYXZlbnMKZmV3IHZpdmlkIHR1cnF1b2lzZSBoaWdobGlnaHRzCmRhcmsgYmx1ZSBjYXBlCmZ1bGwgYm9keSBwb3J0cmFpdCBvZiBhIGdyb3VwCmhpZ2ggZmF0bmFzeQpkYW9zaGkKZGFvcGFvCndoaXRlIGdvc3NhbWVyIHdpbmdzCmx1c2ggd2ludGVyIGZvcmVzdCBsYW5kc2NhcGUKZ3JlZyBydXRrb3dza2kgYW5kIGtyZW56IGN1c2hhcnQKaW4gYSBmb3Jlc3QgYXQgbmlnaHQKc3RhbmRpbmcgaW4gYSBwb25kCnJpZ2h0IC0gc2lkZSBjb21wb3NpdGlvbgpqZWZmcmV5IGNhdGhlcmluZSBqb25lcyBwb3NlCnR1ZmZsZSBjb2F0CndlYXJpbmcgZXllIHNoYWRvdwpmdWxsIGJvZHkgcG9ydHJhaXQgb2YgamVhbiBncmV5CmN5bmljYWwgZmFjZQpwZW9wbGUgZmxlZQpyaXBwbGluZyBlbGVjdHJvbWFnbmV0aWMKZWxlY3RyaWNpdHkgYXJjaHMKZnV0dXJpc3RpYyByb3lhbHR5CnRoaWNrIGZhbmN5IGV5ZWxpbmVyCndlZW5pZQpmdWxsIHVuaWZvcm0KdGVlbmFnZSB2YW5lc3NhIG1vcmdhbgpvcmFuZ2UgamFja2V0CnRvcm4gc2hpcnQKYmVhdXRpZnVsIGFkdWx0IGJvb2sgZmFpcnkKYmVhdXRpZnVsIGFuZHJvZ3lub3VzIGdpcmwKd2VhcmluZyBsb25nIGJsYWNrIHdpbnRlciBjb2F0CnBhaW50aW5nIG9mIGEga25pZ2h0CmtuaWdodCBhcm1vcmVkIGluIHJlZApzbGVlayBkYXJrIGZ1cgpkYXJrIGZsb3dlcnMKcm9vdHMgYW5kIHRob3JucwpmdWxsIGNvbG9yIGFtZXJpY2FuIG5pZ2h0bWFyZQpncmFpbnkgMTk4MCBjaW5lbWF0b2dyYXBoeQpzdWJtZXJnZWQgcHJlIC0gaW5jYW4gdGVtcGxlCmNyYWZ0c21hbnNoaXAKaGVhZGJhbmcgdGlsbCB5b3VyIGJyYWluIGJsZWVkcwp2aW5lcyBhbmQgdGhvcm5zCmdyYWRpZW50IGJsYWNrIHRvIHNpbHZlcgpkcmVzc2VkIHdpdGggZXhwZW5zaXZlIGNsb3RoZXMKYXlhbWkga29qaW1hIGFuZCBncmVnIHJ1dGtvd3NraQpmZXJhbCBzY2VuZQpsb3RzIG9mIDMgZCBjeWJvcmcgZWxlbWVudHMKcHJvc3RoZXRpYwp3aGl0ZSBwcm9zdGhldGljIGV5ZXMKaGluZHUgZ29kCmFuaW1lISA0IGsKZm9yZXN0IHN0eWxlIHN0dWRpbyBzaG90CnN1Y2N1YnVzIHwgbWVkaWV2YWwKcHJpc29uIGJhcnMKc2NyZWFtaW5nLiBub3QgcmVhbGlzdGljCmRyIHdobwpldmVuaW5nIG1ha2V1cAoyIDAgMCA2IGFkdmVydGlzaW5nIHByb21vIHNob3QKZnJhbmsgZnJhemV0dGE4awppbmZvcm1hdGl2ZSB0ZXh0cwpzYWdneSBwdXJwbGUgcm9iZXMKZ2lhbnQgd29vZGVuIGNsdWIKd29vZGVuIGJhcmsgYXJtb3IKdWdseSB3b21hbgpiaWcgd29vZGVuIGNsdWIKbGl6YXJkbWFuIHRoaWVmCnRhbGwgZ2xhZGlhdG9yIHNhbmRhbHMKcmVkIGJsYWNrIHdoaXRlIGdvbGRlbiBjb2xvcnMKZXh0cmVtZWx5IGRldGFpbGVkIGZ1cm5pdHVyZXMKZnVsbCBzYW11cmFpIGFybW9yIHNwaWRlcm1hbgpoaWdoIGTDqXRhaWxzCmN5YmVycHVuayAyIDAgOCA4CmRlbW9uIHNsYXllciBydWkgZmFuYXJ0CmJ1c3kgd2V0IHN0cmVldCBhdCBuaWdodApnbG93aW5nICgoKHdoaXRlIGxhc2VyKSkpIGV5ZXMKZ29zdG9zbwpsb25nIHdhdnkgZGFyayBoYWlyCmZ1bGwtZnJhbWUgb2YgYmVybmllIHNhbmRlcnMKd2VhcmluZyBhIGxvbmcgZmxvd2VyeSBkcmVzcwppbnRhbmdpYmxlCndpdGggZmx1ZW50IGNsb3RocwphdXR1bW4gYmFja2dyb3VuZApibGVzc2luZyBoYW5kcwptYWplc3RpYyBiaWcgZG92ZSB3aW5ncwp3ZWFyaW5nIHJ1c3NpYW4gd3cgMSBjbG90aGVzCmJlYXV0aWZ1bCB3b21hbiB3aXRoIGJsdWUgaGFpcgpsb25nIGZsb3dpbmcgaW50cmljYXRlIGRyZXNzCmdhcmZpZWxkIGNhdCBmYWNlCmZ1bWluZyBlZmZpZ3kKZnVua28gcG9wISBkb25hbGQgdHJ1bXAKZnVubnkgZW1vamkKZnVubnkgd2VpcmQgaWxsdXN0cmF0aW9uCmhlbGwgaXMgb3RoZXIgcGVvcGxlCnZlcnkgc3dlZXQKZnVyIHRleHR1cmUKZnVybml0dXJlIGRlc2lnbiBhcnQgZGVjbwpzbW9vdGggcm91bmRlZCBzaGFwZXMKdmlzb3Igb3ZlciBmYWNlCndpbmdzIG9uIGJhY2sKaW50ZWdyYXRlZCBzeW50aGV0aWMgYW5kcm9pZApmdXJyeSBmZW1hbGUKZnVycnkgZnJpZW5kbHkgbW9uc3RlcgpsaWdodHdlaWdodCBhcm1vdXIKcHJvZ3JhbW1lcgpmdXNpb24gcmVhY3RvcgozZCBpb3MgaW50ZXJmYWNlIGRlc2lnbiBqb255IGl2ZQp1cHdhcmQgcGVyc3BlY3RpdmUKaW5kdXN0cmlhbCBwYXJ0eQp2cmVkCjhrIDNkIHJlbmRlcgpmdXR1cmUgamVlcCBjb25jZXB0IHN1dgpicmFzcyBtZXRhbCBhcm1vcgpiYWRhc3MgYmVhcmQKdXJiYW4gY2l0eSBhdCBiYWNrZ3JvdW5kCndpcmVmcmFtZXMKZnV0dXJpc3RpYyBwaXp6YSBodXQgYXQgbmlnaHQKd2lyZXMgYW5kIHZlaW5zCnNvdmlldCBwcm9wYWdhbmRhIHBvc3RlciBhcnQKZnV0dXJpc3RpYyBiYWxlbmNpYWdhIHNuZWFrZXJzCnNoYXJwIGZvcmNlCnF1YW50dW0gZGVlcCBtYWdpYwpwcmVkYXRvciBmaWxtCnJlYWxpc3RpYyBzY2kgLSBmaQpmdXR1cmlzdGljIGNhc3RsZQppbnRlcnN0ZWxsYXIgZmlsbSAoIDIgMCAxIDQgKQpmdXR1cmlzdGljIGNocm9tZSBjaXR5CnZpZXcgZnJvbSB0aGUgc2VhCnZpZXcgb2YgdGhlIGNvc21vcwpncHUKeHVlIGhhbgpnb2R3aW4gYWtwYW4KdGhlIHNoYXJkCmNvbG9yZWQgbmVvbnMKdGlueSB3aXJlcyBvbiB0aGUgZ3JvdW5kLiBuYXJyb3cKaG93cmFoIGJyaWRnZQpzdHJlZXRzIG9mIGNhbGN1dHRhCnN0eWxlIG9mIHN0eWxlIG9mIHJvYmVydCBtY2NhbGwKZnV0dXJpc3RpYyBkeXN0b3BpYW4gZW5kbGVzcwpmdXR1cmlzdGljIGZlbWFsZSBiZWVrZWVwZXIKd2lkZSBhbmdsZS4gcnVkb2xmIGhlcmN6b2cKOGsgMjhtbSBjaW5lbWF0aWMgcGhvdG8KZnV0dXJpc3RpYyBmcmFuY2UKY2luZW1hdGljIHBhcmlzCmdyZWVuIHNxdWFyZQpmdXR1cmlzdGljIGhpbWJhIHRlZW5hZ2UgZ2lybAptb25vY2hyb21lOi0yCmxhc2VycHVuayBmdWxsYm9keXN1aXQKcHlyYW1pZCB2aXNvcgpjb3VyZnVsIGlsbHVzdHJhdGlvbgpsYXZzIGZsb3dpbmcgdGhyb3VnaCB0aGUgbGFuZApkaW0gcGFpbnRlcmx5IGxpZ2h0aW5nIGFxdWF0aWMKc2NpLWZpIHN0ZWFtcHVuawp6aGFvIHl1bgpmdXR1cmlzdGljIG5hemkgZ2VybWFuIGNpdHkKcm9ib3QgY3lib3JncwppdGVyaW9yCmZ1dHVyZSBtaXJhbWFyCmJheQp1bmRlciBhIGRhcmsgY2xvdWR5IHNreQpjaHJvbWUgYW5kIGNhcmJvbgpyZXRybyBsaW5lIGFydApsb25lbHkgYXN0cm9uYXV0CmJyaWdodCB3aGl0ZSBsaWdodApleHBsb2RpbmcgZ2FsYXh5CmZ1dHVyaXN0aWMgc3RhcnNoaXAgY3JldyBtZW1iZXIKZGVzaWduIGNvbmNlcHQgYXJ0CmZ1dHVyaXN0aWMgc3V6dWtpCm5hdHVyYWwgZW52aXJvbm1lbnQKbHVzaCBsYXduCmZ1dHVyaXN0aWMgdW5kZXJ3YXRlciBtZXRyb3BvbGlzCnRlY2hub2xvZ2llcwpmdXR1cmlzdGljIHdlYXBvbiBzaG90Z3VuCmRlc2lnbiB0aGlua2luZwpoaXBob3AgZ2FuZ3N0YSByb2JvdApnIC0gbWFuIGVuZGluZwpnYWJlIG5ld2VsbCBhcyBhIHN1cGVybWFuCmdhbCBnYWRvdCBjaGluYSBwbGF0ZQpkZXRhaWxlZCB3YXJmcmFtZQpvcmFuZ2UgbWV0YWwgZWFycwpvcmFuZ2UgZmx1ZmZ5IHNwaW5lcwptZWNoYSB3aW5ncwplbGVnYW50IHllbGxvdyBza2luCmhhaXJ5IG9yYW5nZSBib2R5CmhhaXJ5IG9yYW5nZSBza2luCmVsZWdhbnQgZ29sZCBza2luCmZsYXQgbWV0YWwgYW50ZW5uYQpmbHVmZnkgb3JhbmdlIHNraW4KZWxlZ2FudCBnb2xkIGJvZHkKZ2FsYWN0aWMgbWVnYXN0cnVjdHVyZQphc3Rlcm9pZHMgcmVhbGlzdGljIGNpbmVtYXRpYwozIGRzIG1heCArIHZyYXkKZ2FtZSBhc3NldCBvZiBmaWdodGVycwpvcmFuZ2UgYW5kIHdoaXRlIGNvbG9yIHNjaGVtZQpmdXJuaXR1cmUgYW5kIGRlY29yCmFuaW1hdGVkIGRpc25leSBtb3ZpZSBpbmtpbmcKcmVmZXJlbmNlIGltYWdlcyAoIGZyb250CmdhbWUgY2FyZCBmcmFtZQpjcnVzdGFjZWFuIGhlYWQKbWVzb21vcnBoCmdhbWUgaW50ZXJmYWNlCnNub3dib2FyZGluZyBwZW5ndWlucwp0ZWNoIGFydApnYW1lYm95CmdhbWVwbGF5IG9mIGhvcml6b24gemVybyBkYXduCmdhbWluZyByb29tIGluIDIgMCA0IDAKZ2FuZGFsZiBhdHRhY2tzIGFuY2llbnQgYXRoZW5zCmdhbmRhbGYgY2FzdHMgYSBsaWdodG5pbmdib2x0CmdhbmRhbGYgZmlnaHRpbmcgZGFydGggdmFkZXIKbG93IGFuZ2xlIHBob3RvZ3JhcGgKZ2FuZGFsZiByaWRpbmcgYSBib3JkZXIgY29sbGllCmluIHRoZSBqb2huIHdpY2sgbW92aWUKaGlnaGx5IGRldGFpbGVkIHN0b25ld29yawpnYW5nIHNhaW50cyB3ZWFyIHllbGxvdyBiYW5kYW5hcwpjaHJpcyBiYWNoYWxvIGNvbWljIGFydApnYXJkZW4gZmxvd2VycyBwYXR0ZXJuCnByb3VkIG9uaW9uIGh5YnJpZCB0aGFub3MKdHVyaWFuCnNvdXJjZSBlbmdpbmUgbWFwCmludGVyaW9yIGdhbWVwbGF5IHNjcmVlbnNob3QKZ2FyeSBvbGRtYW4gYXMgYSBwZWFyCmdhbGF4aWVzIGFuZCBzdGFyIGluIHRoZSBza3kKaW1tZW5zZSB3YXRlcmZhbGwKbWFzc2l2ZSBtb3VudGFpbnMKcHJvcG9ydGlvbmFsIGZhY2UKZGFuaWVsIG1haWRtYW4gb2N0YW5lIHJlbmRlcmluZwpnZW5kbyBpa2FyaSBzbW9raW5nIGEgam9pbnQKeGl4IGNlbnR1cnkgbWlsaXRhcnkgb3V0Zml0CnNtb2tleSB3YXRlciBzY2VuZXJ5CjMgZCBvY3RhbmUgcmVuZGVyZWQKY291cnQgcG9saXRpY3MKYmFyb3F1ZSBhZXN0aGV0aWNzCmdlbngKYXJjaGl0ZWN0IHN0dWRpbwpoYWRyb24gY29sbGlkZXIKcmVhY3RvciBjaXJjdWl0cwpzb2Z0IGJyaWdodCBwYXN0ZWwKd29vZGxhbmRzIHN0eWxlCnN5bW1ldHJpY2FsIGFuZCBpbnRyaWNhdGUKZ2VvbWV0cmljIHdhbGxwYXBlcgpwdXp6bGUtbGlrZSByb29tCnN0aWxsIGltYWdlIGZyb20gdGhlIG1vdmllCnN0aWxsIGZyb20gYXZlbmdlcnMgZW5kZ2FtZQp0YWxsIGhhdAppbW1hdHVyZQpoaWdoIGNvbnRyZWFzdApnZXN0YWx0CmJyYW5jaGVzIGNvbXBvc2l0aW9uIGFic3RyYWN0CnN5bW1ldHJpY2FsIGNsb2FrZWQgZmlndXJlIGZhY2UKZ2hpYmxpIG1peWF6YWtpIG1vdmllIHBvc3RlcgpnaG9zdCBpbiB0aGUgbWFjaGluZQpncmV5aXNoIHRvbmVzCmdob3N0IHJvb20KZ3JhZmZpdGkgaW4gYW4gYWJhbmRvbmVkIGJ1bmtlcgphdG1vc3BoZXJpYyDigJ0Kc2hpbmluZyBzZWEKZ2hvc3RseSB0YW5nbwppdGFsaWFuIGhvcnJvcgpnaWFudCBjdGh1bGh1CnJvb20gaW50ZXJpb3IKZ2lhbnQgYXF1YXJpdW0gaW4gbmF0dXJhbCBjYXZlCmthbmppIG1hcmtpbmdzCnN0YW5kaW5nIGluIHRoZSBzb2xhciBzeXN0ZW0KZ2lybCB3YWxraW5nIGluIGRhcmsgZm9yZXN0CmdpYW50IGNhcm5hdGlvbiBmbG93ZXIgYXMgYSBoZWFkCm5hdHVyZSBkb2N1bWVudHJ5IGZvb3RhZ2UKYWxpZW4gdGVudGFjbGVzCmdpcmwgd2Fsa2luZyBpbiBhIGNhbnlvbgpjb25jZXB0IGFydCByZW5kZXJpbmcKZ2lybCBqdW1waW5nIGluIGEgZmxvd2VyIGZpZWxkCmdpcmwgc2l0dGluZyBpbiBhIGZsb3dlciBmaWVsZApnaWFudCBkYWlzeSBmbG93ZXJzIGhlYWQKZHJhZ29uIG1vdXRoCmNjdHYgLSBjIDgKZ2xvd2luZyByYXl0cmFjaW5nCmdpYW50IGV5ZSBtYWdpYyBzcGVsbApzdGVhbXB1bmsgdmlsbGFnZXMgY2FzdGxlcwpnYXN0b24gYnJ1c3NpZXJlCm9sZCBodW1hbm9pZCBlbnRzCnNtb2tlIGxhc2VycwpvcmFuZ2UgbGluZQpzdW5zZXQgb24gZGlzdGFudCBtYWNoaW5lIHBsYW5ldApnaWFudCBpbXBvc2luZyBtb3VudGFpbgpnaWFudCBpbnRlcmxvY2tlZCBnZWFycyBjb2dzCmJsdWUgc2t5IGJhY2tncm91bmQgd2l0aCBtb29uCnNoYXJrIGZhY2UKbWlkZGxlIGVhc3Rlcm4gZGV0YWlscwp3ZWFyaW5nIGEgc3RvcCBzaWduIG9uIGl0cyBoZWFkCmluc2lkZSB0aGUgdHVubmVsCmdpYW50IG1lZGlldmFsIHRvd2VyIGNvbmNlcHQgYXJ0Cm1vc3N5IHN0b25lCmluIGRhcmsgd29vZHMKd2l0Y2ggZmFpcnl0YWxlCmRyYW1hdGljIHN3aXJsaW5nIGNsb3VkcwpzdGlja2VyIGRlc2lnbiB2ZWN0b3IgYXJ0CmZhbnRhc3kgZ29yZ2VvdXMgbGlnaHRpbmcKdmVyeSBmb2dneSBtaXN0CmdpYW50IHF1YWRydXBlZGFsIG1pbmluZyByb2JvdApnaWFudCByb2FkIHNpZ24gYXJtb3IgY2hhbXBpb24KbWluaW5nIHNjcmFwIG1ldGFsCmdpYW50IHNlbnRpbmVsIGNyYXNoZWQgb24gZWFydGgKZ2lhbnQgc3VuZmxvd2VyIGFzIGEgZmFjZQp2ZXJ5IHZlcnkgdmVyeSB0YWxsCmNpdHkgYmVsb3cKbWlraGFpbCB2cnViZWwgYW5kIHdhZGltIGthc2hpbgpjZ2kgOGsKcm9ibG94IHNjcmVlbnNob3QKcG9pbnRpbmcgdG8gaGVhdmVuCmVhcnBob25lcwo4IGsgbGFuZHNjYXBlIHJlbmRlcgpzY2ktZmkgaG9sbHl3b29kIGNvbmNlcHQgYXJ0CmNsb3VkeSBza3kgaW4gdGhlIGJhY2tncm91bmQKZWFydGggdHlwZSBwb2tlbW9uCmJpZyBib29zdGVyIHJvY2tldCBlbmdpbmVzCmdpZ2FudGljIHJvYm90IGhlYWQKZ2lnYW50aWMgdG93ZXIKcnl1dQpwb3VyIGNlbGwgcGFpbnRpbmcKZ2lnZXIgc3BpZGVyIGpva2VyCjEgOCA5IDUKYXJjYW5lIGpheWNlCmdpbmdlciBiZWFyZGVkIG1hbiB3aXRoIGdsYXNzZXMKZ2luZ2VyIGNhdCBpbiBtaWQgYWN0aW9uCmJhcmUgY2hlc3QKY2dzb2NpZXR5ICkKbXV0c3VtaSBha2FzYWtpCndhbGxwYXBlciBzcGxhc2ggYXJ0IHByb21vIGFydApnaW5rbyBzaG93aW5nIGEgbmV3IG11c2hpCmdpb3JnaWEgbWVsb25pCmdpcmFmZmUgYXJteQpnaXJhZmZlIHdlZXZpbAptaW50IGhpZ2xpZ2h0cwplbHZlbiB3YXJyaW9yIHByaW5jZXNzCmdpcmwgaW4gYSByZWNvcmQgc3RvcmUKZ2lybCBpbiBrbmlnaHQgYXJtb3IKdHJpZGVudCBtZXRhbCBjcm93bgpnaXJsIGxvb2tzIGF0IHRoZSBzcGFjZQpsaWdodCBibHVlcwpnaXJsIHJ1bm5pbmcKaG9sZGluZyBhIG1wNwpzb2Z0IHRyYW5zbHVjZW50IGZhYnJpYyBmb2xkcwpudWNsZWFyIG11c2hyb29tIGNsb3VkCmN1dGUga2F3YWlpIGdpcmwKd2VhcmluZyBza2lydCBhbmQgaGlnaCBzb2NrcwpoYXZpbmcgYSBzbmFjawptb2RlbCBzaG9vdApsYXNzbyB0b29sCndlYXJpbmcgc3RvY2tpbmdzLiBzaWRlLXZpZXcKYm9va3MgYWxsIG92ZXIgdGhlIHBsYWNlCmdpcmwgdmVuaXppYW4gZXJhCmdyYXkgc2hpcnQKZGFyayByZWQgbGlwcwpnaXJsIHdlYXJpbmcgaGVhZHBob25lcwpnaXJsIHdlYXJpbmcgdW5pZm9ybQpzaWxrIHNjcmVlbiBwcmludApnaXJsIHdpdGggYSBmbG93ZXIgaGVhZAppbnNhbmUgbGlnaHRuaW5nCnJlYWwgbGlmZSBwb3J0cmFpdApnaXJsIHdpdGggYSBwZWFybCBlYXJyaW5nbApodWdlIG51Y2xlYXIgbXVzaHJvb20gY2xvdWQKZ2lybCB3aXRoIGJyb3duIGhhaXIKZ2lybCB3aXRoIGNhdCBlYXJzIGF0IGEgcmF2ZQpyZWFsaXN0aWMgYmlraW5pCmZsb3dlciBoZWFkCmdpcmwgd2l0aCBtZXNzeSBidW4gaGFpcnN0eWxlCmtleSB2aXN1YWwgb2YgYXR0YWNrIG9uIHRpdGFuCmdpcmwgd2l0aCB0aGUgcGVhcmwgZWFycmluZwpnaXJsIHdpdGggd2Fyc2hpcCBwYXJ0cwpnaXJscyBmcm9udGxpbmUKcmVkIGtpbW9ubwpnaXVzZXBwZSBhcmNpbWJvbGRvIHdhbHRlciB3aGl0ZQpmcnVpdCBtb25zdGVyCmdpdmUgbWUgYSBoaWdoZXIgbG92ZQpjb2xvcmZ1bCBleHBsb3Npb24KZmFudGFzeSBzd29yZCBvZiB3YXJyaW9yCmFybW9yZWQgc3dvcmQgYmxhZGUKcmVhbGlzdGljISEhCmdsYWRvcyBmcm9tIHBvcnRhbCAyCmdsYW0gcm9ja2VycyBkcmlua2luZyB3aW5lCnNvbWUgZHVzdCBpbiB0aGUgYWlyCmdsYW1vcm91cyBhZXJpdGggcG9ydHJhaXQKISFmdWxsIGJvZHkgcG9ydHJhaXQhIQohc3VidGxlIHNtaWxpbmchCiEhYmVhdXRpZnVsISEKZ2xhbW9yb3VzIGppbGwgdmFsZW50aW5lCmdsYW1vcm91cyB0aWZhIGxvY2toZWFydApjaXJjdWxhciBjYXJkYm9hcmQgZXllcwpsdXNjaW91cyApIGluIHRoZSBsYXN0IG9mIHVzCmNvbG9yZnVsIGdsYXNzIGFydApjYXN0IGluIGVwb3h5CmhlbG1ldCBtYWRlIG9mIGdsYXNzCm1ldGFsbGljIHRvcnNvCmdsYXNzIGphcgpmdXJpb3VzIGxpZ2h0cwpzb2Z0IGNyYWNrcwpwcmFpc2UgamVzc2UgcGlua21hbgphaXJpbmcgaW4gMiAwIDIgMwptZW1icmFuZSB3aW5ncwpmdWxsIGJvZHkhCmhlciBoYWlyIGlzIHRoZSBtaWxreSB3YXkKd2FsbHBhcGVyIHBhdHRlcm4KcGlja2luZyB1cCBhIGZsb3dlcgpzdHJhbmdlIGV0aGVyZWFsIGJlaW5nCmdsb3dpbmcgYW5nZWxpYyBiZWluZwpoaWdobHkgZGV0YWlsZWQgdGV4dHVyZWQgOCBrCmdhbGF4eSBjb2xvcmVkCmdsb3dmb3JnZSB0ZW1wbGF0ZQpmYWNlIHBpY3R1cmUKbWFnaWMgZXllCmdsb3dpbmcgZ3JlZW4gcm9ja3MKZ2xvd2luZyBndXkgY3JlYXR1cmUKd2VpcmQgc2lsbHkgdGhpbmcgd2l0aCBiaWcgZXllcwpzdHVwaWQgaWRpb3QgY3J5cHRpZApoYW5kcyBhbmF0b215Cmdsb3dpbmcgb2lsCmJ1aWxkaW5nIG11c2hyb29tcwp3aW5lIHJlZCB0cmltCnNwaW5lcyBhbmQgdG93ZXJzCm1vdGlvbiBibHVyIGxpZ2h0cwphcnRpc3RpYyBhbmdsZQp0ZWFsIGFuZCBvcmFuZ2UgY29sb3VyIHBhbGV0dGUKZ29ibGluIGZ1bmtvIHBvcApnb2JsaW5zIHBhcnR5aW5nIGF0IGEgcmF2ZQpnb2QgZW1wZXJvcgpnb2xkIGxpbmUgdGF0dG9vcwp3aGlybGluZyBkZWF0aApnaG9zdGx5IG1pc3QKZ29kIG9mIGRyYWdvbnMKdGhpZ2hzIHRoaWdocyB0aGlnaHMgdGhpZ2hzCmxvbmcgYnJhaWRlZCBhc2ggYmxvbmRlIGhhaXIKa29yZWFuIG15dGhvbG9neQpnb2Qgb2YgdGltZSBhbmQgc3BhY2UKZ29kJ3Mgd2F5cyBhcmUgbXlzdGVyaW91cwpnb2RkZXNzIGNsb3NlLXVwIHBvcnRyYWl0CmludHJpY2F0ZSBsZWQgamV3ZWxsZXJ5CmdvZGRlc3Mgb2YgbG92ZSBhbmQgcGVhY2UKcml0dWFsIGluIGEgZm9yZXN0CmRldm91cmluZwpnb2RkZXNzIG9mIHNwYWNlIGFuZCB0aW1lCmZyb3N0IG9uIHRoZSBjYW52YXMKZ3JlZW4gZmxvd2luZyBoYWlyCmJlYXV0aWZ1bCBhbmdlbGljIHdpbmdzCmtpbmcgZ2hpZG9yYWgKd2FyY3JhZnQgY2hhcmFjdGVyCmdvbGQgcGFsYWRpbgpkb2NrZWQgYXQgaGFyYm9yCjhrIGhkIGNvbmNlcHQgYXJ0CndpbmdzIG1hZGUgb2YgbGlnaHQKbWlkIGNlbnR1cnkgYXJ0CnNhbmQgdGV4dHVyZQpnb2xkZW4gbGVhdmVzCmdvbGRlbiBtb3VudGFpbiBpbiB0aGUgZGVzZXJ0CmZseWluZyB0aHJvdWdoIHN1bnNldAphbWF6b24gaW4gdGhlIGJhY2tncm91bmQKZXRoZXJlYWwgbWFjYXcKZ29sZGVuIHNuYWtlcwpyb21hbiBiYXRoCmdvbGRlbiB3b29kIGNhcnZlZCBpbiByZWxpZWYKdGhlIGJlc3QgZXZlcgpnb2xmIGNvdXJzZQpodW50ZXJ4aHVudGVyCnJlZGRpdCBwb3N0Cmdvb2RuaWdodApwcm9mZXNzaW9uYWwgd29vZGNhcnZpbmcKYXJ0aWxsZXJ5IGJsYXN0Cm1hbGUgYW5hdG9teQpnb3BybyBzaG90IG9mIHRoZSBoZWxsCmdvcmRvbiBmcmVlbWFuIGFzIGEgd29tYW4Kc3BpdCBmbHlpbmcgZnJvbSBtb3V0aApnb3Jkb24gcmFtc2V5Cmdvcmdlb3VzIGNoaW5lc2UgbW9kZWwKc3R5bGUgb2YgcGV0ZXIgZG9pZwpnb3JnZW91cyBmZW1hbGUgYWxpc29uIGJyaWUKZ29yZ2VvdXMgZmVtYWxlIGF1ZHJleSBoZXBidXJuCjE5MzBzIHN0eWxlIGNsb3RoaW5nCm9sZCBwaG90byBmcm9tIHRoZSAxOTMwcwphdXR1bW4gbGVhdmVzIGJhY2tncm91bmQKaW1wb3J0YW50OiBubyBleHRyYSBsaW1icwp3aGl0ZSBhbmQgcmVkIGFybW9yCmdvcmdlb3VzIGZlbWFsZSBzYW1hcmEgd2VhdmluZwpyZWFsaXN0aWMgc3ltbWV0cmljYWwgZXllcwp3ZWFyaW5nIGEgY2FtaXNvbGUgYW5kIGJvb3RzCmFsYWluIGFzbGFuCmludHJpY2F0ZSBoYWlyIGRldGFpbHMKYmlnIGhvb3BlZCBlYXJyaW5ncwpnb3JnZW91cyB3ZXJlZm94IGZ1cnNvbmEKbWluaW9ucyBiYWNrZ3JvdW5kCmdvcmlsbGF6IHBoYXNlIDEKd2l0aCBsb3RzIG9mIHZlZ2V0YXRpb24Kc21hbGwgc3RyZWFrcyBvZiBsaWdodCB0aHJvdWdoCmdvcm9uIGJydXRlCm1pdXJhIGtlbnRhcm8gc3R5bGUKbWVsYW5jaG9saWMgZXhwcmVzc2lvbgpibGFjayB3aGl0ZSBhbmQgcmVkIGNvbG9ycwptYWtlIGl0IHNwaWNleQpnb3RoaWMgZXBpYyBsaWJyYXJ5IGNvbmNlcHQKZ290aGljIGVwaWMgbGlicmFyeQpnb3RoaWMgZ2lybCBkcmVzc2VkIGluIGJsYWNrCmludHJpY2F0ZSBtYXNrCmZvY3VzZWQgbGlnaHQKZ290aGljIHByaW5jZXNzIHBvcnRyYWl0CmRlZXAgdGV4dHVyZQpncmVlbiB0ZXJyYWNlCmNvbG9yZnVsIGNvbXB1dGVyIHNjcmVlbgpwaWFubyBpbiB0aGUgYmFja2dyb3VuZAptaXNzbGUgdHVycmV0cwpnb3lhIHRoZSBjb2xvc3N1cyBwYWludGluZwpncmFkaWVudCBhbmQgcGF0dGVybnMgd2FsbHBhcGVyCnBzIDIgc2NyZWVuc2hvdAo1MG1tIGxlbnMgY2luZW1hdGljCmNyZWVweSB1bmNhbm55IHZhbGxleQpibG93aW5nIHNtb2tlCmpwZWcgYXJ0aWZhY3RpbmcKYmlvbmljIGltcGxhbnRzCnNob3Qgb25maWxtCnB5cmFtaWQgcnVpbnMgYXQgc3VuZG93bgpyaW5rbyBrYXdhaWNoaQpyaXZlciBpc2xhbmQKeWFzdXNoaSBuaXJhc2F3YSBzeWQgbWVhZAojZ3JlZW4KYXlhaHVhc2NhIGNlcmVtb255CmxhdWdocwp3YXRlciBmbG93cyBpbnNpZGUgdGhlIHRlcnJhcml1bQp0cmluaXR5CnNjb3R0IGJ1b25jcmlzdGlhbm8KZ3JheSBhbnRocm9wb21vcnBoaWMKY2F0IGZlbWFsZSB3aXRoIGEgd2hpdCBhbmQgY2hlc3QKbWFpbmUgY29vbgpncmVhdCByaXZlcgpwaHJhZ21pdGVzCmdyZWF0ZXN0IGVsdmVuIHdhcnJpb3IKZ3JlZWsgZ29kbmVzcyBwb3J0cmFpdCBzY3VscHR1cmUKYmxhY2sgbWFyYmxlIGFuZCBnb2xkCmhvbGRpbmcgc2NhbGUKZ3JlZWsgdGl0YW4gZ29kZGVzcyB0aGVtaXMKaG9sZGluZyBzY2FsZSBhbmQgaG9sZGluZyBzd29yZApjaW5lbWF0aWMgc3R1ZGlvIGdoaWJsaSBzdGlsbAp0ZXh0aWxlIHByaW50Ci9yL3JhemVyCi1oIDY0MApncmVlbiBnb2JsaW4gcG9ydHJhaXQKY29taWNib29rIHN0eWxlCnN3aXJsaW5nIHNjZW5lCmFuYXRvbWljYWwgaW4gYW4gYXN0cm9uYXV0IHN1aXQKcmV5ZXp1ZWxvIGxpc3RhZG8KZmVhdHVyaW5nIHBpbmsgYnJhaW5zCmZvemVuIGljZSBoYXJkIGVkZ2VzCm5vYm9keSBsaXZpbmcgdGhlcmUKZmFudGFzeSBtZWRpdW0gc2hvdAo4IDAgaWVzIGFlc3RoZXRpYwpzaXR0aW5nIG9uIGN5YmVycHVuayBtb3RvcmJpa2UKY29ycHNlcyBmbG9vcgp3ZXQgcmVsZWN0aW9ucyBpbiBleWVzCnNrdWxsIGNhbmUKaG9ycm9yIGZpbG0gc3RpbGwKYXRtb3NwaGVyaWMgcmVkIGxpZ2h0aW5nCnBvcnRyYWl0ISEhISEhCmNlbnRpcGVkZQp0YWJlcm5hY2xlIGRlZXAgZm9jdXMKY29uY2VwdCBhcnQgb2YgaC4gci4gZ2lnZXIKb3ZlcmxhaWQKbXVsdGlwbGUgZmFjZXMKZG9vcnMgdG8gdmFyaW91cyBsaXZpbmcgcXVhcnRlcnMKd2VhcmluZyBkb3VibGUgZGVuaW0KcHJvdG8gLSBtZXRhbCBiYW5kIHByb21vCmhlYXZ5IHJvY2sgYmFuZCBwcm9tbyBwaG90bwpmcmFuY2lzIGJhY29uIGFuZCByZW5lIG1hZ3JpdHRlCm1hbGNvbG0gbGllcGtlCmdlcmFsZCBicm9tIGFuZCB2aW5jZW50IGRpIGZhdGUKbm9ydGgga29yZWEKZW1hY2lhdGVkIHNoYXZlZCBmYWNlCmhvbWVyIHNpbXBzb24gc3R5bGUKNCBrIHNjcmVlbnNob3QKZ3VjY2kgYnJlYWQKZ3VjY2kgZ29kZGVzcwpndWluZWEgcGlnIGxvb2tpbmcgdXAgYXQgdGhlIHNreQpmaXZlc3RhcnN0b3J5IHN0eWxlCnRyYW5zZm9ybWVycyA6IHRoZSBsYXN0IGtuaWdodApndXRzIGJlcnNlcmsKc2hhcnAgZm9jdXMgaGlnaCBxdWFsaXR5Cm5vc3RhbGdpYyA4awptYW55IGNvbG9ycyBpbiB0aGUgYmFja2dyb3VuZApjbG90aGVzIGhpZ2ggZGV0YWlsCmRhcmsgdHYgc2hvdyBzdHlsZQpncmFkaW5zCnNpZ21hIDggNSBtbSBmIDEuIDUhIQp0IC0gOCAwIDAKYWNpZCBibGVlZGluZyBkZWVwIGNvbG9ycwpqb3lmdWwgcGVvcGxlIGluIHRoZSBob3VzZQpjb21wbGV0ZSBkZXRhaWxlZCBib2R5CmhhaXIgYmxhY2tiYW5ncyBoYWlyCmhhaXIgdGV4dHVyZQpibGFja2hhaXIKaGFsZiAtIGVsZWN0cmljIHdvbWFuCmVtb3Rpb25zLiBmYW50YXN5CmhhbGYgaW52b2tlciBoYWxmIG1lZ3VtaW4KbGVpIG1pbgpib2R5IGNvdmVycyB3aXRoIG5lb24gZmxvd2VycwpkZXRhaWxlZCBza2V0Y2ggZHJhd2luZwpkb2xwaGluIHNub3V0IHVuZGVyIHZpc29yCmhhbGYtbGlmZSAzCmJsYWNrIGhhaXIgcmliYm9ucwpoYWxmIC0gdHVybgp3aXRoIGludHJpY2F0ZSBkZXRhaWxzCmhhbGxzIG9mIHNwYWNlCmhhbW1lcidzIHNsYW1tZXJzCmdvbGQgZW1icm9pZGVyeQp3aWRlIGxpcHMgYW5kIGtpbmQgYmx1ZSBleWVzCmx1c2ggZ2FyZGVuIGluIHRoZSBiYWNrZ3JvdW5kCmV4Y2VsbGVudCBsaWdodCBhbmQgc2hhZG93cwpzb255IDEgNyA1IG1tCmhhbmRiYWcKbG9vbQpwaW50ZXJlc3Qgc3R5bGUKY2hyeXNhbnRoZW11bSBhbmQgaHlhY2ludGgKd2FzdGUgcHJvY2Vzc2luZyBtYWNoaW5lcnkKZWFybHkgMiAwIHRoIGNlbnR1cnkKcHJhY3RpY2UKYW5kb3Iga29sbGFyCnBhYmxvIHBlcmRvbW8Kc2VyZ2UgbWluaHVsaW4KYW5hdG9teSBmb3Igc2N1bHB0b3JzCmNvZmZlZSBzbWVsbAp5YW9pCmhhbmRzb21lIGhpcCBob3AgeW91bmcgYmxhY2sgbWFuCmhhZGVzIHN1cGVyZ2lhbnQKaGFuayBoaWxsIGFzIHRoZSBnb2Qgb2YgcHJvcGFuZQpoYW5rIGhpbGwgd2VhcmluZyBhIHdoaXRlIHRvZ2EKZW1lcmdpbmcgZnJvbSBibHVlIGZpcmUKcHJvcGFuZSB0YW5rcwpoYW5uaWJhbCBsZWN0b3IKcmVhbGlzdGljIHBhaW50aW5nIHN0eWxlCmhhcHB5IGZpbm5pc2ggbGFwcGh1bmQgZG9nCmhhcHB5IGdpcmwKaGlnaCBjb2xvcgp3ZXQgcmVsZWN0aW9ucwpyZW5haXNzYW5jZSBhcnR3b3JrCmhhcHB5IGZhY2VzCmhhcmQgcmFpbiBwb3VyaW5nIHN0cmFpZ2h0IGRvd24KaGFyZG1lc2ggcG9zdApzb29uIHdpbGwgYmUgZGF3bgpoYXJlbQpoYXJsZXkgcXVpbm4gZmlsbSBzdGlsbAp1bmRlciB3YXRlciBzd2ltbWluZwpyYWluYm93IGhhaXIgb3ZlcmxheQpnbG93aW5nIG5lb24gZmxvd2VycwpuZW9uIG11c2ljIG5vdGVzCmhhcm1vbnkgb2YgZGVzZXJ0CmxpZ2h0IGxhbmd1YWdlCnJhaW5ib3cgbGluZSAtIGFydApkZWVwIGJsdWUgbmlnaHQgc2t5CmhhcnB5IGVhZ2xlIGZyYW1lZCBwaG90bwpncmVlbiBmZWF0aGVyeSBoYWlyCmhhcnB5IHdvbWFuCmhhcnJpc29uIGZvcmQgZnJvbSBpbmRpYW5hIGpvbmUKaG9nd2FydHMgMiAwIDcgNwpoYXJyeSdzIHJldmVuZ2UKc2hhcnAgZm9jdXMgZHluYW1pYyBsaWdodGluZwp1bHRyYXdpZGUgY2luZW1hdGljCnZlcnkgYmVhdXRpZnVsISEgYWVyaWFsIHNob3QKaGF0c3VuZSBtaWt1IHNob3J0IGhhaXIKaGF1bnRlZCBnb3RoaWMgaG90ZWwKcmV0cm8gMSA5IDAgMAp2aWN0b3JpYW4gdGV4dGlsZXMKc2l0dGluZyB3aXRoIGZsb3dlcnMKdHJhbnNwYXJlbnQgY3J5c3RhbApkb3VibGUgbGF5ZXIgZm9sZCBvdmVyIGhlbQpjcm9wcGVkIHdpZGUgc2xlZXZlCmJhY2sgc2xpdAp0b25hbCB0b3BzdGl0Y2hpbmcKbGluZWQgaW4gY290dG9uCm1vZGVsIHN0YW5kaW5nIHBvc2UKdm9sdW1lIGFlc3RoZXRpYwpoYXZpbmcgYSBjb29sIHBhcnR5CnN0cmVzc2luZyBvdXQKaGQgYW5pbWUgY2l0eXNjYXBlCmRlZXAgZGFyayBmb3Jlc3QKaHlwZXJkZXRhaWxlZCBjb25jZXB0IGFydApvbmUgbW90b3JiaWtlIGluIGNlbnRlciBvZiBmcmFtZQpoZSAtIG1hbiEhISEhCmhlIGRyZWFtcyBvZiBhbGwgdGhlIGJhdHRsZXMgd29uCnRyaWFkaWMgY29sb3VycwpoaXMgbGVncyBzcHJlYWQgYXBhcnQKaW5kZXNjcmliYWJsZQpoZWFkIGFuZCBzaG91bGRlcgpzdGVhbXB1bmsgYWNlc3NvaXJlcwpicmllbm5lIG9mIHRhcnRoCmxpZ2h0IGJsb29kIHNwYXR0ZXIKb2lsIGdsYXppbmcKZGlnaXRhbCBtYW5nYQpibGFjayBsZWF0aGVyIHJvYmVzISBpbnRyaWNhdGUKaW5kaWdvISBhbmQgdmVuZXRpYW4gcmVkIQpoZXJvbgppbmRpZ28gYW5kIHJlZCBpcm9uIG94aWRlCnNpbGtlbiBibG9uZGUgaGFpcgpkaWdpdGlhbCBpbGx1c3RyYXRpb24KcHVyZSBmYWNlCnJvbmFsZG8gbmF6YXJpbwpoZWFkIG9mIGdyZWVuIGhlZGdlaG9nCnNxYXJlLWphd2VkIGluIG1lZGlldmFsIGNsb3RoaW5nCmFuZHJvZ3lueQo0MCB5ZWFycyBvbGQgd29tZW4Kc3RhaW5lZCBnbGFzcyB3aW5ncwphdmFuIGpvZ2lhIGFuZ2VsCmNvbXBsZXggdGFyb3QgY2FyZCBiYWNrZ3JvdW5kCmQmZCBnb2JsaW4gcm9ndWUKZG90YSBjaGFyYWN0ZXIKeWFyb3NsYXYgdG9rYXIKaWx5YSBvem9ybmluCmRldm9uIGNhZHktbGVlCmNoZW5neW91IGxpdQpxaWZlbmcgbGluCnB1bmsgd29tYW4KYnJpdGlzaCBnYW5nIG1lbWJlcgpjbG9zZSAtIHVwIG9uIGZhY2UKbG9va2luZyB1cCBhdCBjYW1lcmEKdHVycXVvaXNlIHBpbmsgYW5kIHllbGxvdwp3ZWFyaW5nIGEgY29sb3JmdWwgY29vZ2kgc3dlYXRlcgpoZWFkc2hvdCBvZiB5b3VuZyBmZW1hbGUgZnVycnkKbWFwbGVzdG9yeSBtb3VzZQpjaGFyYWN0ZXIgYXJ0IG9mIG1hcGxlIHN0b3J5CmdyZWVuIGVheXMKeWVhciAxIDkgNCA0CmRpdmVyc2UgaGVhbGluZyBjeWJlcnN1aXRzCmhlYWxpbmcgdHViZXMKaGVhbGluZyBwb2RzCnNrdWxsIHRhdHRvbwpoZWFydHkgYnJlYWtmYXN0CmhlYXQgZGVhdGggb2YgdGhlIHVuaXZlcnNlCm9tYW4KcGVyZmVjdCA0IGsKb2xlIHRob21hcyBzdHlsZQpzbW9rZSBleHBsb3Npb25zCndpZGUgYW5nbGUgcml2ZXIKdGlueSBjaGFyY29hbCBzbXVkZ2VzCmlsbGVnaWJsZSByb3NpY3J1Y2lhbiBzeW1ib2xzCmhlY2F0ZSBnb2RkZXNzCmhlZGdlaG9nIHdlYXJpbmcgYSB0b3AgaGF0CnBldGVyIHRoZSBnb2F0CnZlcnkgcmVmaW5lZApzY2llbnRpZmljIGFjY3VyYXRlCmhlbGVuIHRoZSBiZWFuIHF1ZWVuCmhlbGwgaHVycmljYW5jZQptb3ZpZSBzdGFyCmhlbGwgc2NhcGUKaGVsbCBzdG9ybQphcnRzdHlsZSB6ZHppc2F3IGJla3NpbnNraQpjeWJlcnB1bmsgZGVtb25pYyBzeW1ib2xzCmZhaXJ5IGR1c3QgaW4gdGhlIGFpcgppJ20gZGFkCmxhbWVudCBjb25maWd1cmF0aW9uCmhlbG0Kb3JhbmdlIHNob3VsZGVyIHBhZHMKbW9wYXIKZmluZSBjb250b3VycyBvZiBmYWNlcwpzbW9rZXIKdGhyb25lIG9mIG9seW1wdXMKbWV0YWwgc3dvcmRzCnZlcnkgZmxhdCBzaGFkaW5nCm1vZGVybiBvY2N1bHRpc3QKcnBnIGJvb2sgcG9ydHJhaXQKc29yY2VyZXNzIHdvbWFuCm9sZCBncmVlayBnb2RkZXNzCmhleGFnb24gYmxvY2tpbmcgdGhlIHN1bgplYXJ0aCBpbiBmb3JlZ3JvdW5kCmhleGFnb24gaW4gZnJvbnQgb2YgdGhlIHN1bgpzZWVuIGZyb20gcGxhbmV0IGVhcnRoCmVhcnRoIGluIHRoZSBmb3JlZ3JvdW5kCmNvbG9yZWQgbWFyYmxlCmhleGFnb25hbCByaW5nCmhpIG1hcmsgKCBha3dhYWJhIHRvbW15ICkKaGlkZGVuIHZhbGxleQpzdHJhbmdlIG1hZ25ldGljIGFub21hbHkKZnV0dXJpc3RpYyBzY2lmaQpkcmFtYXRpYyBjbG91ZHkgc2V0dGluZyBzdW4KZnJvbSAxIDAgMCAwIGZlZXQgaW4gZGlzdGFuY2UKZmlsbSBub2lyIHJlYWxpc3RpYwppbiB0aGUgbWFnaWMgcm9vbQphY2N1cmF0ZSBmZWF0dXJlcyApCmhlYWxpbmcgZ2xvd2luZyBsaWdodHMKcmVkIGFuZCBibHVlIGNvbG9yIHRoZW1lCmhpZ2ggZGV0YWlsZWQgY2xvc2UgdXAgb2YKcHVycGxlIGFuZCBwaW5rIGFuZCBibHVlIG5lb25zCmluc2lkZSBhIGZ1dHVyaXN0aWMgYXJteSBiYXNlCjE1MDBzIG9pbCBwb3J0cmFpdApvbiBzcGFjZSBoYXJib3IKZGVtb24gbG9yZAphc3ltbWV0cmljYWwgaGFpcmN1dApwcmlweWF0CmJsdWUgLSBncmVlbiB0b25lcwpzb2Z0IG91dGRvb3IgbGlnaHQKbW9vZHkgcHVycGxlIGdsb3cgbGlnaHQKMyBoZWFkcwpzaXR0aW5nIG9uIGEgc2t5c2NyYXBlciByb29mdG9wCmRhcmsgYW5kIG9taW5vdXMgYmFja2dyb3VuZApoaWdoIHF1YWxpdHkgYW5pbWUgbW92aWUgc3RpbGwKZ2xvd2luZyBmaWVyeSByZWQgZXllcwpoaWdoIHF1YWxpdHkgYnVnIHBvdiBzaG90CnNpbXBsZSBlbGVnYW50IGRlc2lnbgpzb21lIHJlZCBhY2NlbnRzCnN0dWRpbyBzcG90bGlnaHQKamFjayAtIG8nLSBsYW50ZXJuCnBvcnRyYWl0IG9mIHJpY2sgYW5kIG1vcnR5CnNtaWxpbmcgbWFuCmFnZ3Jlc3Npb24KZ2xvd2luZyBzbm93CmRpbmd5IGxpZ2h0aW5nCnBsYW5ldHMgYW5kIGdhbGF4aWVzCm51bWJlciAzMSBvbiBqZXJzZXkKdmVjdG9yLiA4IGsKZ2lhbnQgcm9ja3MKcG9vZnkgbWFuZXMgb2YgZnVyCnNlbnRpbmVsCmxhcGVsCnBpbm5hYmxlCmxvaXNoIGFydCBzdHlsZQphcnRnZXJtIGFuZCByb3NzZHJhd3MKb2xpdmUgdHJlZQpzY2ktZmkgbWVjaApoaWdoY29udHJhc3QKbGlnaHQgaW5zdGVhZCBvZiBoYW5kcwptb25vY2hyb21lISEhISEKbW96emFyZWxsYQppbmRpZ2Vub3VzIGFydApkaXN0dXJiaW5nIGJpb2hvcnJvciBzYWxpdmEKcm9tYW4gbXl0aApibGFjayBhbmQgYmx1ZSBleWVzCmFscGhvbnNlIG11c2hhCnBldHJhIGNvcnRyaWdodApwcmFjdGlzaW5nIGhlciBzd29yZCBzdGFjZXMKZ2xvb215IGxpZ2h0cyBpbiB0aGUgc2t5CnN0YXIgd2FycyBpbXBlcmlhbCBzdHlsZQpjb25jcmV0ZSBhcnQgc3R5bGUKaHVtYW4gZ2FtZSBwcm90YWdvbmlzdCBkZXNpZ25zCmdsb3dpbmcgaGVhZAp3ZWFyaW5nIGEgY3Jvd24gbWFkZSBvZiBhbnRsZXJzCmdyYWRpZW50IHNhcHBoaXJlCm11ZG9rZW4KZ3JhZGllbnQgZGFyayBwdXJwbGUKMSAwIC8gMSAwIGNvbWVkeQphcnRicmVlZGVyLiBoaWdoIHF1YWxpdHkgYXJ0Cm5vbWFkaWMgdXJiYW5pc20KZGV0YWlsZWQgZm9yZXN0Cmdsb3dpbmcgZXllcyBzaGlueQpraWxpYW4gZW5nLiBtxZNiaXVzCnBvbGUgZGFuY2luZwpibHVlIGNvbG9yZWQgdHJhZGl0aW9uYWwgd2VhcgpzbGVlayBicmlnaHQgd2hpdGUgYXJtb3IKYmluYXJ5IHN1bnNldApydXNzaWFuIHRlbXBsZQpyZ3AgYXJ0d29yawp0cmFuc3BhcmVudCBidWlsZGluZwpodWdlIGdsYXNzIHN0cnVjdHVyZQpkZXN0cm95ZWQgY2xvdGhlcwp3YXh5IHNraW4KcHJvbm91bmNlZCBjb250b3Vycwp3ZWFyaW5nIGEgYmxhY2sgc2hpcnQKZmFjdG9yaWVzIGFuZCBuYXR1cmUKZ3J1bmd5IGR5c3RvcGlhCnBsdXRvY3JhY3kKY2FzZXR0ZSBmdXR1cmlzbQpoZXRoZSBzcm9kYXdhCmJlYXV0aWZ1bCBlbGVnYW50IGRlbW9uIHF1ZWVuCmdyZWVuIGFuZCBibHVlIGNvbG9yIHNjaGVtZQptdXRlZCBncmVlbgpvdXRlciBzcGFjZSBuZWJ1bGEgYmFja2dyb3VuZApoaWdobHkgZGV0YWlsZWQgcGFpbnRpbmcgb2Ygb2xkCmxvb2tpbmcgYXQgc3BhY2VzaGlwcyBhdCBkb2NrCmluZHVzdHJpYWwgc3BhY2UKcmFkaWF0aW5nIGRhcmsgZW5lcmd5IGF1cmEKZGV2aW91cyBldmlsIGV4cHJlc3Npb24KY292ZXIgZ2lybApjb2xvdXJmdWwgcGFsZXR0ZQpmbHlpbmcgbWFnaWMgYm9va3MKc3ludGh3YXZlIGNpdHkKc2t5cmltIGluc3BpcmVkCm1hZ25pZmljZW50IGJhY2tncm91bmQKaGVhcnRoc3RvbmUgaW5zcGlyZWQKbWFzcyBlZmZlY3QgaW5zcGlyZWQKbmF0dXJhbCBncmFzc3kgYmFja2dyb3VuZApsZWFndWUgb2YgbGVnZW5kcyBpbnNwaXJlZApmaW5lciBkZXRhaWxzIDogMwptYWdpY2FsIGZhaXJ5IGJhY2tncm91bmQKaW4gYmF0bWFuCnBvZ2dlcnMKaW4gY3liZXJwdW5rCnNlcmdpbyB0b3BwaQpob2xkaW5nIGEgYnVja2V0IG9mIGtmYwpwYXBlciBjdXRvdXQKbW9ubyBleWUgd2luZG93Cm5pcHNleSBodXNzbGUKcm9iaW4gd2lsbGlhbXMKb2Ygd2FsdGVyIHdoaXRlCnZyYXkuIHN1YnN1cmZhY2Ugc2NhdHRlcmluZwpkaXJlY3Rpb25hbCBwYXRoIHRyYWNpbmcKZG9pbmcgYSBob3QgbWFqZXN0aWMgcG9zZQptYXJ0aWFsIGFydCBwb3NlCnNvbmljIHBvd2VyCnJlYWxpc3RpYyBjZ2kgcmVuZGVyCnRoZSBtb29uIG9uIHRoZSB0b3AgcmlnaHQKZ29sZGVuIGpld2VscwpiaWcgY2FudmFzIGFydApjb21wbGV4IGZlYXR1cmVzCjNkIG1vZGVsIG9mIGEgaHVtYW4gaGVhcnQKbWFkZSBvdXQgb2YgZ2xhc3MKaGVyIG1hbnkgc25ha2VzIGFzIGhhaXIKYXp1ciBsYW5lIHN0eWxlCnZpZGVvZ2FtZSBpbnNwaXJlZApyZWFsaXN0aWMgY2Fycwpmcm9tIHN0cmVldCBsZXZlbApidWJibGVndW0gYm9keQpob2xkaW5nIGdsb3dpbmcgbGFwdG9wIGNvbXB1dGVyCndvb2RlbiBtYXRjaCBzdGlja3MgNGsgdGV4dHVyZQpiYWdneQp3YXRlcmNvbG9yIHBlbiBkcmF3aW5nCnN5bW1ldHJpY2FsIGltYWdlCmhpZ2h3YXkgNSAwCnN1cGVyaGVybyB3aXRoIGEgY2F0IGhlYWQKcm9iZXJ0byBiZW5hcmRpCmtlbmcgbHllCmhpbGxhcnktY2xpbnRvbgpydXN0ZWQgcGFuZWxzCmhpbmF0YSBoeXVnYSBmcm9tIG5hcnV0bwpoaXAgLSBob3AgYWxidW0gYXJ0IGNvdmVyCmR5bmFtaWMgc2thdGluZwpmcmFuayBvIHNhbGlzYnVyeQpncmFudmlsbGUgY2hhbmRvcgp0aG9tYXMgZWRnYXIgc3RldmVucwpyb3lhbCBwYWxhY2UgaW50ZXJpb3IKaG9kaWUgbWloaSBjcmFzIHRpYmkKcGFyY2Ugc2VwdWx0bwpsb3ZpbmcgYXRobW9zcGhlcmUKc21pbGluZyBmYWNlcwpzbWVsbGluZyBnb29kCmRyYWluY29yZQpvbiB0aGUgcXQKc2NhbmRhbCBzaGVldApob2xseXdvb2QgbW92aWUgcG9zdGVyCmV5ZWJhbGxzIGludHJpY2F0ZWQKZ2xhc3MgcmVmbGVjdGlvbnMgb24gdG9wCm9zYWthIHNreWxpbmUgYmFja2dyb3VuZApnbGl0Y2hwdW5rCnRleHR1cmUgcGFjawprbmVlbGluZyBpbiBwcmF5ZXIKaG9seSBmbGFtZSBzcGVsbApkdmQgcGFja2FnZQpsaW1pdGVkIGNvbmNlbnRyYXRpb24KY3lib3JnIHBhcnRzCnNvdXRoIGpha2FydGEKZGlyZWN0aW9uYWwgc3VubGlnaHQgc2tld2VkIHNob3QKcHJvdG90eXBlIGNhcgpob25lIG9ubmEgc2tlbGV0b24gZ2Vpc2hhCnByYWlzZWQKaG9wIGNvbmUganVpY2UKbmV3IGVuZ2xhbmQgaXBhCnJlc2luCmNhbWVyYSBzaHV0dGVyIGlyaXMKZG5kIHNldHRpbmchCm9vemluZyBzbGltZQpkZXRlcmlvcmF0ZWQKYm9keSBwYXJ0cyBldmVyeXdoZXJlCmNyaW1lcwp2aWxsYWdlIHNxdWFyZQpjcm9jb2RpbGUgLSBsaWtlIHRlZXRoCnJvYXJpbmcgbXV0YW50IGdvYXQgbW9uc3Rlcgpwb3dlcmZ1bCBhbmQgaHVnZQptYXR0ZWQgYnJvd24gZnVyCmZpcmUgYW5kIGZsYW1lcyBtYW5lCnZhY3V1bQpob3JzZSByYWNlCmhpZ2ggdGVjaCBzYWRkbGUKZmxleApmaWJlcnB1bmsKaG9yc2VtZW4gb2YgdGhlIGFwb2NhbHlwc2UKcXVpbHQKaG90IGRhZGR5CjMgMiAtIHllYXIgLSBvbGQKd2VhcmluZyBhIGNhbWlzb2xlIGFuZCBzaG9ydHMKc2xlbmRlciBhbmQgbXVzY3VsYXIgYnVpbGQKaG90IHRvcGljIGFuaW1lIGNvbnZlbnRpb24KbW90ZWwKc3dpbW1pbmdwb29sCndoaXRlIHNlYSBjbG91ZApwaW5ob2xlIHBob3RvIHF1YWxpdHkKaG91c2Uga2l0Y2hlbiBvbiBhIHN1bm55IGRheQprZWl0aCBoYXJyaW5nCnN3ZWRpc2ggZm9yZXN0CnVsdHJhZGV0YWlsZWRsCmVhY2ggd2lzaCByZXNpZ24g4oCZIGQKaG93IHRvIHRyYWluIHlvdXIgZHJhZ29uCndvdmVuIGFybW91cgpnb2xkIGFuZCBwZWFybHMKc3ltbWV0cmljYWwgdGFyb3QgY2FyZAppbiBzdHlsZSBvZiBicmFkIHJpZ25leQp0YW9pc3QgdGVtcGxlcyBhbmQgbW9ua3MKbm90IGEgbG90IG9mIGdyYXNzCnByaXplIHdpbm5pbmcgY29sb3IgcGhvdG8KaW4gc3R5bGUgb2YgYnJ1dGFsaXNtCmx1c2ggc2FrdXJhIHRyZWVzCm11c2N1bGFyIGFuZCB0ZXJyaWZ5aW5nCnR1cnF1b2lzZSBob3Jpem9uCmh1Z2Ugc3BhY2UgYmF0dGxlCmZvb2QgY291cnQKYmlnIHRlbGVzY29wZSBpbiBmcm9udApzb3V0aGVybiBnb3RoaWMgYXJ0CjEgOSB0aCBjZW50dXJ5IHNjZW5lCm1vdmluZyBjYXN0bGUKb25lIGJpZyBiZWFrCmh1bWFuIGJvZGllcyBpbnRlcnR3aW5lZAphcG9jb2x5cHNlCmNpcmNsZSBpcmlzIGRldGFpbGVkIHN0cnVjdHVyZQpncmlkIG1vbnRhZ2Ugb2Ygc2hhcGVzCmludGVncmF0aW9uCmZpdmUgZWxlZ2FudCBmaW5nZXJzCmh1bWFuIGZ1dHVyaXN0aWMgY2l0eQpmYW50YXN5IGNoYXJhY3R1cmUgcG9ydHJhaXQKYXdhcmQgd2lubmluZyBzY2lmaSBhcnQKaHVtYW4gbWFsZSBjaGFyYWN0ZXIgYXJ0CmludHJpY2F0ZSBuZW9uIGNpcmN1aXQgcGF0dGVybgp0YXJvdCBjYXJkIGVudmlyb21lbnQKY2xhc3NpYyBmYW50YXN5CjMgZCBkZXNpZ24gZm9yIHRhdHRvbwpidXlpbmcgYmVlcnMgaW4gdGhlIGJyaXRpc2ggYmFyCmxvYnN0ZXIgdGhlbWVkIGFybW91cgpwYW5jYWtlIGZsYXQgaGVhZApibGFjayBzcXVhcmUgZ2xhc3Nlcwpncm91cCBpbnRlbGxpZ2VuY2UKZW50IHRyZWFudCBkcnlhZApmYXIgLSBtaWQgc2hvdAp3aWRlIHRvcnNvCmZyb20gMjAwMQpzaXR0aW5nIG9uIGdyZWVuIGdyYXNzCnR3byBzaGFsbG93IGJsYWNrIGV5ZXMKcGhvdG8gc2Vzc2lvbgptb29uIHNoaW5pbmcgZ29sZGVuIGxpZ2h0CnN0YXIgb2NlYW4KaHVudGluZyBhIHRpZ2VyCnN0b3JtIG91dHNpZGUKYW5nZWwgcmVsaWVmCmh5YnJpZCBvZiBtb3VzZSBhbmQgaG9yc2UKaHlicmlkIG9mIHBpZyBhbmQgbnljIHBvbGljZW1hbgpyZW5kZXJlZCBpbiBwb3ZyYXkKaHlkcmEgd2l0aCBlaWdodCBoZWFkcwpoeWRyb2dlbi4gYmVhdXRpZnVsCmluIGEgbGFuZHNjYXBlCmYgMy4gNAppbiBhIHNpbHZlciBzaWxrIHJvYmUKZGFydGggdmFkZXIgc2l0dGluZyBhdCB0aGUgdGFibGUKZ3JhZGllbnQgbGlnaHQgcHVycGxlCmxpbiBoc2lhbmcKbG90cyBvZiBzaWducyBhbmQgc2hvcHMKYW5nZXIgKyB3cmF0aApkcmFtYXRpYyBza3kgaW4gYmFja2dyb3VuZApicmlnaHQgY29sb3JzIHdpdGggcmVkIGh1ZXMKaHlwZXIgZGV0YWlsZWQgY29uY2ggc2hlbGwKZ2VvbWV0cmljIDNkIHJlbmRlcgplYWwKZGFubnkgZm94CmVtZXJhbGQgY29sb3IgcGFsZXR0ZQp3ZWxsIGNvbnRvdXJlZCBzbW9vdGggZmFpciBza2luCndoaXRlIG1lY2hhCmh5cGVyIGxpbWluYWwgcGhvdG8KYmxhZGUgcnVubmVyIGZlZWwKbG92ZWNyYWZ0aWFuIGhvcnJvciEhCnVsdHJhIHJlYWxpc3RpYyA4IGsgcmVzb2x1dGlvbgpib25lIGFuZCBpdm9yeQpidXN5IGN5YmVycHVuayBtZXRyb3BvbGlzCmxvb21pbmcgc3VycmVhbCBza3kKc3VtbWV0cmljIGRldGFpbGVkCm1vcm5pbmcgZGV0YWlsCmxlaWNhIHNsMiA1MG1tIGhkCmRhbGUga2Vvd24gYW5kIGdyZWcgcnV0a293c2tpCmNhbW8KbmF0dXJhbCByZWFsaXN0aWMgcmVuZGVyCnRvbnkgbWF0ZWxsaQpmdWxsIGZhY2Ugc2hvdAp0b2t5byBmdXR1cmlzdGljIGluIGJhY2tncm91bmQKaHlwZXIgcmVhbGlzdGljIGZhbnRhc3kgbW9uc3RlcgpoeXBlciByZWFsaXN0aWMgZmFudGFzeQpmdWxsIGJvZHkgZ3JlZyBydXRrb3dza2kKcGhvdG9yZWFsaXN0aWMgY2luZW1hdGljIHJlbmRlcgpyb3lhbCB3b3Jrc2hvcAp3aWxsZW0gd2lzc2luZwpzaW1vbiBiaXNsZXkgYW5kIHJpY2hhcmQgY29yYmVuCnRleHR1cmVkIHR1cnF1b2lzZSBiYWNrZ3JvdW5kCmJyaWFuIGZyb3VkIGp1YW4gZ2ltZW5legpkZXRhaWxlZCBjbG9zZSB1cCBzaG90CmdsYXNzIGJlYWRzIGNsYXkgYW11bGV0cwptYWdpYyBhcnRpZmFjdHMKZmVhdGhlcnMgKSB3ZXQKbWlsayBkcmlwcGluZwpzZW5zdWFsIGNvbG9yIHNjaGVtZQppbiB3YXRlciEgam9obiBldmVyZXR0IG1pbGxhaXMKaGFsbyAvIG5pbWJ1cwpsdXNoIGZvcmVzdCBpbiB2YWxsZXkgYmVsb3cKYnJpZ2h0bHkgbGl0IQpkcmVzc2VkIGluIG9yYW5nZSBpbm1hdGUgYXR0aXJlCndpdGggYnVubnkgcmFiYml0IGVhcnMKdmVyeSBmdXp6eQpldGhuaWNpdHkgOiBqYXBhbmVzZQppdGFsaWFuIGdhcmIgdGhlIGZ1dHVyZQpjaW5lbWF0aWMgYWNjZW50IGxpZ2h0aW5nCmR1bGwgcGluayBiYWNrZ3JvdW5kCmNyeXN0YWxsaW5lIHNraW4KbWFnbWEgYW5kIGxhdmEKaHlwZXJjb2xvcgpjdXRlIGNhcnRvb24gc3R5bGUKemFyeWEKZmFjZSB3aXRoIGFydGdyYW0KZGFyayByYWluYm93IG5pbWJ1cwpwdWZmZXIgamFja2V0CmNoZW1pY2FsIHN1YnN0YW5jZXMKbWVkaXVtIHNob3J0IGhhaXIKaW4gZnJvbnQgb2YgZGFyayBzbW9rZQpvbGQgd29vbCBzdWl0Cm11bHRpY29sb3JlZCB2ZWN0b3IgYXJ0CnNoaW55IGdlbXMKZGV0YWlsZWQgdmVjdG9yYXJ0Cmp1YW4gc2FuY2hleiBjb3RhbgpqZWFuIC0gYmFwdGlzdGUgYmVsaW4KbWFnbm9saWEgZ29saWF0aCBoZWFkIG9ybmFtZW50cwpzdGF0aWMgbm9pc2UKd2VhcmluZyB3aGl0ZSBzaWxrIHJvYmUKd2VhcmluZyB3aGl0ZSBzaWxrIGhvb2QKd2VhcmluZyBodWdlIGdvbGRlbiBjcm93bgp0YXR0b29zIGFsbCBvdmVyIHRoZSBza2luCndyYXBwZWQgaW4gYSBibGFjayBzY2FyZgpzcGFjZSBnYWxheHkgYmFja2dyb3VuZApjbG9zZS11cCBwb3J0cmFpdCBvZiBjeWJvcmcKb2NlYW4gcGF0dGVybgpmYWNlIGlzIHdyYXBwZWQgaW4gYSBibGFjayBzY2FyZgptYWNybyBzaG90IGxlbnMgZmxhcmUKYmVhdXRpZnVsIGFuaW1hbCBwZWFybCBxdWVlbgpvbmUgbWlsbGlvbiBsYXZlIHJpdmVycwpzY2VuZSBmcm9tIGNodXJjaAprZW50YXJvIG1pdXJhIG1hbmdhIHN0eWxlCnlvdXIgcGVyc29uYWwgZGF0YSBhdmF0YXIKb2N0YW5lIHJlbmRlciB1bnJlYWwgZW5naW5lIDggawpicmFkIGt1bmtsZSBlbHNvbiBwZXRlcgpwYXN0ZWwgZGVlcCBjb2xvdXJzCmZpZWxkIGZsb3dlcnMKZGVlcCBwYXN0ZWwgY29sb3VycwpibHVlIGV5ZWJhbGwKYmx1ZSBqZXdlbGxlcnkKb3JuYW1lbnRhbCBnb3RoaWMgLSBjeWJlcnB1bmsKZWFybHkgY3V5bGVyCmRlbGl2ZXJpbmcgbWFpbAplbm9ybW91cyBjaHJvbWUgbWFuCmZhbHNlIGNvbG9ycwplbGVjdHJvbmljIGFkcwpmbGF3bGVzcyBlcGlkZXJtaXMKbWFzY3VsaW5lIGFuZCBoYW5kc29tZQpmb3JtYWwgYXR0aXJlCmxvbmcgZmxvd2luZyBwaW5rIGhhaXIKaGVhZHBpZWNlIGhlYWRwaWVjZSBoZWFkcGllY2UKZ29sZCBvcm5hdGUgamV3ZWx5CnB1cnBsZSBkaW0gbGlnaHQKZHNsciBmb2N1cyBvbiB0aGUgc3ViamVjdHMKaHlwZXJyZWFsaXN0aWMgcGhvdG8gb2YgcmF5cXVhemEKZ2FsIHlvc2VmCnBlcmZlY3QgY3lib3JnIGZlbWFsZQpoYW5kIGhvbGRpbmdzCmFjY3VyYXRlIGJvcm9xdWUKZGlnaXRhbCBnbGFzc2VzCnNoYWRvd2VkIGZhY2UKdWx0cmEgaGlnaCBmYWNlIHN5bW1ldHJ5CmhpZ2ggYW5nbGUgdWhkIDggawpwbGFuZXQgYW5kIHN0YXJzCmVwaWMgYm9zcyBmaWdodApsaWdodCByZWZyYWN0aW5nIHRocm91Z2ggcHJpc21zCmNlbnRlcmVkIGV5ZQpoaWdobHkgZGV0YWlsZWQgOGsgcGhvdG8Kc3BoZXJpY2FsIGJvZHkKaSBkcmVhbSBvbgppIGdvdCBhIGpvYiB3aXRoIHN0YW5sZXkKaSBzbGVwdCBpbiBzZWdtZW50cyBsYXN0IG5pZ2h0CjhrIGFydGdlcm0gYm9rZWgKbGF1Z2hpbmcgZ3Jvb20KaSdtIGhlcmUKbm90IGdvaW5nIGFueXdoZXJlLiBvaWwgcGFpbnRpbmcKaSdtIG5vdCBhIGhlcm8KaSd2ZSBiZWVuIHRyeWluZyB0byBjYWxsCm9uIGEgc2lkZXdhbGsgb2YgdmFuY291dmVyCmluIHNhbyBwYXVsbwppY2UgY3ViZQppY2UgY2l0eSBpbiAyIDAgOCAwCmluIGRldGFpbAppY2UgbG9yZAptYXR0ZSBwYWludGluZyB3aXRoIGhpZ2ggZGV0YWlsCmljb24gcGFjawpyb290IHN5c3RlbQpnYW1lIGljb25zCm1vbnNlcnJhdCBndWRpb2wKaWYgdXNhIHdhcyBhIG1vbmFyY2h5Cm1vdGlvbiBjYXB0dXJlIHN5c3RlbQpvcmFuZ2Ugcm9vZgpwYWludGluZyBvbiBibGFjayBjYW52YXMKaWxsdXNpb24gcGFpbnRpbmcgaGlkZGVuIGltYWdlCmVwaWMgb3JiaXRhbCBzcGFjZXNoaXBzIGJhdHRsZQpvcmJpdGFsIHN0YXRpb24Kb3JiaXQgb2YgZWFydGgKc3R1ZGlvIGthaQpncmV5IHR1cnRsZW5lY2sgY29hdAp0aG9tYXMgZGFudGhvbnkgYW5kIG1hbGlrYSBmYXZyZQpjdXQKaW4gYSB3aGltc2ljYWwgZmFpcnl0YWxlIGZvcmVzdApqaW1pIGhlbmRyaXggc3R5bGUgcG9zdGVyCnN1YmxpbWUgZGV0YWlsCihieSB0b20gcHVydmlzKQpicmlnaHQgcm9vbQp2ZXJ5IGNsZWFyIGZhY2UKbWFyayBhcmlhbiAwLiAyIDUKaWxsdXN0cmF0aW9uIG9mIGFuIGFuZ3J5IHJvb3N0ZXIKd2VzdGVybiBzdGVhbXB1bmsgY3lib3JnCi0gYXIgMSA2IDogOQptYWplc3RpYyBzcGlyZXMKYnJvd25pc2ggY29sb3JzCnBvc3RlciBpbiA4IDAgcyBzdHlsZQpyaXZlciBvZiB3aW5lCnN0YW5kdXAKdmVjdG9yaWFsIGFydApmbGF0IHZlY3RvcgpleHRyYXRlcnJlc3RyaWFsIHBhcmFkaXNlCmZyZW5jaCBiYW5kZSBkZXNzaW7DqWUKYmxvc3NvbXMKdGVuZHJpbHMgaW4gdGhlIGJhY2tncm91bmQKdmludGFnZSBjbG90aGluZyBwb3N0ZXIKaW1hZ2Ugb2Ygcm9uYWxkIG1jZG9uYWxkCndlYXJpbmcgYSBzdW5kcmVzcwptYXAgb2YgZmFudGFjeSB3b3JsZApjdXRlIGNyZWF0dXJlcwpvcmFuZ2UgbGFtcAppbW1lbnNlIHdoZWF0IGZpZWxkcwpsYXJnZSBkaWVzZWxwdW5rIGZseWluZyBhaXJzaGlwcwptYWNoaW5lIGNpdHkKaW1wZW5kaW5nIGRvb20gaW4gYW4gYWxsZXl3YXkKc3R1ZGlvIGdoaWJsaSBpbGx1c3RyYXRpb24KaW1wb3NzaWJsZSBkcmVhbQppbXBvc3NpYmxlIHN0YWlycwpuZW9uIHBhaW50IGRyaXAKcmVkIGJhcm4gaW4gZGlzdGFuY2UKZnJpZW5kcyBzaXRjb20Kb2tpbmF3YSBjaHVyYXVtaSBhcXVhcml1bQpzdXBlciBhdHRyYWN0aXZlCnNxdWFyZSBzdGlja2VyCmFydGdlcm0gY29sb3JmdWwhISEKaW4gYSBiYWNrZ3JvdW5kIGdyZWVuIGZvcmVzdAppbiBhIGRhcmsgY29ycmlkb3IKaW4gYSBkcmVhbSB3b3JsZAppbiBhIGRyaWVkIG91dCBmaWVsZAptb3JlIGludGVuc2UKdmVyeSBoaWdoIHZpZXcKZnJlbmV0aWMgY3JhemluZXNzCmJpby1jaGVtaWNhbAp0LTgwMApzaGFwZWQgbGlrZSB0b3J1cyByaW5nCmRhcmsgZmFudGFzeSBvZiB0aGUgdW5rbm93bgppbiB0aGUgZm9yZWdyb3VuZCBwYXJpcwpyb3VnaCB3YXRlcnMKZXZpbCBzbWlsZSBzaG93aW5nIGZhbmdzCmxvaXNoIGFuZCByb3NzIHRyYW4KY29sb3JmdWwgYXJ0IG5vdXZlYXUKZXllcyBzdGlsbCB2aXNpYmxlCmJlYXV0aWZ1bCBjYWl0cmlvbmEgYmFsZmUKaW4gdGhlIHN0eWxlcyBvZiB0aG9tYXMgZWFraW5zCnZpZW5uYQppbiB0aGlzIGNodXJjaCBpbnRlcmlvcgp5ZWxsb3dpbmcgd2FsbHBhcGVyCmNhZCBjYW0gY2FlCm1vdmllIHNjZW5lIGNsb3NlIHVwCnllbGxvdyBkcmFnb24gaGVhZCBmZXN0aXZhbApyb2JvdCBtb25zdGVyIGluIGJhY2tncm91bmQKZ2lybCBpbiByYWluY29hdAp3YXRlcmNvbG9yIHRlY2huaXF1ZQprb2ppIG1vcmltb3RvIHNoaW5qdWt1CmRyYW1hdGljIGRpc2FzdGVyCmR1c3R5IGFiYW5kb25lZCBzaGluanVrdQpwZXRyb2wKaW4gdGhlIGNvbG9zc2V1bQpjb21wYXNzIGVuZXJneSBmbG93aW5nCmluY3JlZGlibGUgaXNvbWV0cmljIHNjcmVlbnNob3QKc3Bpa2UgcGl0CmdpYW50IHJvYm90IGZvb3QKZ2lhbnQgY29pbGluZyBzbmFrZSBtYWNoaW5lCnNuYWtlIHNrZWxldG9uCndlYXJpbmcgYSBwYXJrZXIKbW9zdCBtZW1vcmFibGUgc2NlbmUKa3VzYW5hZ2kKc2hhZHkgbG9vawpyb2JvdHMgZmlnaHQKZ2lhbnQgcm9ib3Qgc2t1bGwKYnVybmluZyBidXMgaW5mZXJubwpudWNsZWFyIGV4cGxvc2lvbnMgcGFpbnQgc2t5CnNlYWZsb29yCmtpbGxlciBxdWVlbgptZXRyb2lkIHByaW1lCmluZGlhbiBlbXByZXNzCmZsb3JhbCBkcmVhbQplbmRsZXNzIGhhbGx3YXlzCnN0YWlycyBhbmQgYm9va3NoZWx2ZXMKaW5maW5pdGUgcmVmbGVjdGlvbnMKaW5kdXN0cmlhbCBodW1hbml0eSBzcGFjZXNoaXAKc21va2UgZXhwbG9zaW9uCnNob3Qgd291bmRzCnNvbGRpZXIgdW5kZXIgaGVhdnkgZmlyZQppbmZpbml0ZSBjZWxlc3RpYWwgbGlicmFyeQppbmZpbml0ZSBoYWxsd2F5CmxvbmVseSBzY2VuZXJ5IHlldCBwZWFjZWZ1bCEhCmluZmluaXR5IGJsYWRlIGNvbmNlcHQgYXJ0CmNyaW1zb24gdGlkZQppbmZpbml0eSBzeW1ib2wgbGlrZSBhIGNhdApvbiByZWFsaXN0aWMgaHVkCmluZnAgZ2lybAphbWlkc3Qgb2YgbmF0dXJlIGZ1bGx5IGNvdmVyZWQKaW5mcmFyZWQgY2FtZXJhIHZpZXcgZnJvbSBib21iZXIKeCAtIHJheSBibGFjayBhbmQgd2hpdGUKaW5rYSBoYXJweSBnaXJsCnBhc3RlbCBwYWxldHRlIHNpbGhvdWV0dGUKbGlicmFyeSBib29rcwpkcm9vcGluZyByYWJiaXR5IGVhcnMKc2FsZXMKYmFyb3F1ZSBzeW1tZXRyeQp2aWJyYW50IGlua2J1cnN0cwpjb3JydWdhdGVkIGhvc2UKaW5zYW5lbHkgZGV0YWlsZWQgYXJ0CmxpbWluYWwgYm9va3Nob3AKaGlnaCBxdWFsaXR5IGZhYnJpY3MgdGV4dGlsZXMKYWNpZCBwb29saW5nIG9uIHRoZSBmbG9vcgpkaWdlc3RpbmcgYSBzbWFsbCBkcmFnb24KaW5zaWRlIGEgY2F2ZXJub3VzIHN0b21hY2gKc3RyZWFtIGZsb3dpbmcgdGhyb3VnaCB0aGUgaG91c2UKcm9vbSBpcyBmdWxsIG9mIHBlb3BsZQpwcm90b25zCmluc2lkZSBhbiBhcmFiaWFuIG1hcmtldCBiYXphYXIKaGF1dGluZwpjb21taW5nCndhbGt3YXlzCnRvcmNoIC0gbGl0CmJvYXQgd2l0aCBsYW1wCndvbHZlcyBhbmQgdGhlaXIgdHJlYXN1cmVzCmluc2lkZSB0aGUgc2VwdWxjaHJlCnN0ZXBzIGxlYWRpbmcgZG93bgp0byBob25vciBqdXBpdGVyCnNjaWVuY2UgZmljdGlvbiBzcGFjZWNyYWZ0CmphZ2dlZCBibG9ja3Mgb2Ygc3RvbmUKZXhwbG9kaW5nIHBvd2RlcgppbnNwaXJhdGlvbmFsIHF1b3RlCnJldHJvIGFydHdvcmsKc2F0dXJhdGVkIHBvaW50aWxsaXNtCndlYXJpbmcgdHVydGxlbmVjawpsb29raW5nIHNtYXJ0CnBvbXBvdXMgZXhwcmVzc2lvbgoxIDkgMyAwIHMgaGFpcmN1dAoxIDcgNSAwIHMgb2lsIHBhaW50aW5nCnBhYmxvIG9saXZlcmEKb25lIGxhcmdlIHJvb20KdmVyeSB0YWxsIGNlaWxpbmdzCmludGVyaW9yIGJhY2tncm91bmQgYXJ0CnN0ZWFtaW5nIGZvb2Qgb24gdGhlIHN0b3ZlCmludGVyaW9yIGxpdmluZyByb29tCmNlaWxpbmcgdG8gZmxvb3Igd2luZG93cwpwbHVzaCBmdXJuaXNoaW5ncwppbnRyaWNhdGUgZGV0YWlsZWQgcm9vZgppbnRlcmlvciBvZiBhIHZpY3RvcmlhbiBob3VzZQpsdXNoIGdhcmRlbnMgaGFuZ2luZwpncmVlbiB3YWxsCmludGVyaW9yIG9mIGEgaHVnZSByb2JvdCBmYWN0b3J5CmludGVyaW9yIG9mIGEgbGlicmFyeQppbnRlcmlvciBvZiBhIGxvZnQKbGl2aW5nIHJvb20gd2l0aCBzcGxpdCBsZXZlbHMKcGxhbnRzIGFuZCBwYXRpbwoxOTcwIGZ1cm5pdHVyZQppbnRlcmlvciBvZiBhIG1hcmJsZSBkb21lCmludGVyaW9yIG9mIGEgbW91bnRhaW4gaHV0CnJlYWxpc3RpYyBzY2lmaQpiYW1ib28gd29vZApkcmFtYXRpYyBhcmNoaXRlY3R1cmUKbHVnZ2FnZQpjcmVhdGVkIGluIG9jdGFuZSByZW5kZXIKbG93IHNhdHVyYXRlZAp0aHJvdyBwaWxsb3dzCmFyZWFzIHJ1Z3MKbmV4dCB0byBhIHdhdGVyZmFsbApnbG93aW5nIHNwcml0ZXMKaW50ZXJuYWwgY29uZmxpY3QKZGVzaWduIHN0dWRpbwp3YXRlciB0b3JyZW50IGJhY2tncm91bmQKaW4gYSBkdXN0eSB2aWN0b3JpYW4gaG9tZQppbnRvIHRoZSBtaXJyb3J2ZXJzZQppbiBmcm9udCBvZiBhIGNhcnZlZCBzY3JlZW4KaW50cmljYXRlIGJlYXV0aWZ1bCBjbG9zZSB1cAp2ZXJ5IGRldGFpbGVkIGVtZXJhbGQgZ3JlZW4gZXllcwpjcnlzdGFsIGNsdXN0ZXJzCmtpbmthZGUuIGF3YXJkIHdpbm5pbmcKZHJ1bmsgd29tYW4KaW50cmljYXRlIGRldGFpbGVkIGdhcmRlbgpncmVlbiB3aXRjaCB3YWxraW5nIGhlciBnYXJkZW4KbXlzdGljIGFsY2hlbWljYWwgb2NjdWx0IGFydAphcmNoaW1ib2xkbwptYXRlcmlhbCBpcyEhISBwbHVtISEhCnNlbnRpZW50IGZydWl0CmdoaWJsaSBjb2xvcmZ1bAppbnRyaWNhdGUgbWFjaGluZSBpbiBzcGFjZQppbmNhCmludHJpY2F0ZSB3YXNwCnVuZGVyd2F0ZXIgZ2xvdwpjb2xvciBibG9ja3MKZmlsbXBvc3RlcgpjYW55b24gdG9wb2dyYXBoeQpwaG9uZSBpbiBoYW5kCmlyYW0gb2YgdGhlIHBpbGxhcnMKYXNpYW4gZGVzY2VudApsdW5hciBteXRob3MgZnV0dXJlIHBlcmZlY3QKY2hyb21hdGljIGRpc3RvcnRpb24KcG9seWNocm9tYXRpYyBjb2xvciBwYWxldHRlCnJvY2t5IGxha2Ugc2hvcmUKY3VydnkgbW9kZWwKaXJvbiBhcmMgZ2F0ZSBkb29yIHRleHR1cmUKaXJvbiBnYXRlIGRvb3IgdGV4dHVyZQpzaXR0aW5nIG9uIHNhbnRhCnVsdHJhcmVhbGlzdGljIHJheXRyYWNpbmcKaGVhZCBtYWNybwppcyBhIHN0dW5uaW5nCndpdGggZGlzdHVyYmluZwppc2xhbmQgaW4gYSBibHVlIHNlYQpjZWwgc2hhZG93CmVlaXJlCnJlbmRlciBwaXhhciBwYWxldHRlCnJlYWxpc3RpYyAzZCBtb2RlbAppbmtlZCBkaWdpdGFsCmdhbWUgcmVzb3VyY2VzCmluIHN0eWxlIG9mIGNoYXJsZXMgd2lsbGlhbXMKaXNvbWV0cmljIHZpZXdwb2ludApsZWZ0IHJpZ2h0IGZyb250IGJhY2sKZ2FtYnJlbCByb29mIGJ1aWxkaW5nCmlzb21ldHJpYyBpc2xhbmQgaW4gdGhlIHNreQpvbiBncmV5IGJhY2tncm91bmQKaXNvbWV0cmljIHBpa2FjaHUgZmlndXJlCnZyYXkgcmVuZGVyIDRrCmlzb21ldHJpYyB0b2t5byBjaXR5CmluIHRoZSBtaWRkbGUgb2YgYSBsYWtlCmdsYXNzIHZpYWxzCmdsYXNzIGJ1bGJzCmlzb21ldHJpYyB2aWV3IG9mIGEgd2l6YXJkIHRvd2VyCm9jdG9wYXRoIHRyYXZlbGxlciBzdHlsZQphc3NldCBvbiBncmV5IGJhY2tncm91bmQKcGF0aGVzCnByZWNpc2VseSBkcmF3bgppbnRlbnNlIGxpbmUgd29yawppdCBkb2Vzbid0IGh1cnQgbWUgKCB5ZSAtIHllYWgKYW1pdHl2aWxsZQpzaG90IG9uIGxlaWNhIHNsMgppdGFjaGkKY3Jhd2xpbmcgb24gdGhlIGdyb3VuZAppdGFsaWFuIHJlbmFpc3NhbmNlIHdvcmtzaG9wCmJhcnljZW50cmljIHN1YmRpdmlzaW9uCmNhcnZlZCB3aGl0ZSBtYXJibGUKaXdhZ3VtaSBhcXVhc2NhcGUKaW50cmljYXRlIGNhcnZpbmcKc2xhc2hlciBzbWlsZQp3ZWxsIGxpdCAzIGQgcmVuZGVyCmFuYW1vcnBoaWMgZmlsbQpiYWNrZ3JvdW5kIGJhcgpzZXZlbnRpZXMgY2luZXN0aWxsCmNoYXJhY3RlciBhbmltYXRpb24KamFjayBydXNzZWwgdGVycmllciBzdXJwcmlzZWQKamFjayB3aGl0ZSBvZiB0aGUgd2hpdGUgc3RyaXBlcwpwb3J0cmFpdCBzdGlsbCBkZXRhaWxlZAp0ZWFsIHNraXJ0CmphZ3VhciBoZWFkIHRhdHRvb2Rlc2lnbgpqYWluYSBzb2xvCmpha2FydGEKZmFudGFzeSBwb3AgYXJ0CnRob20gd2Fzc2VsbWFubgpqYXBhbiBzb2xkaWVyIGluIHdvcmxkIHdhciAyCmxhaW4gc2VyaWFsIGV4cGVyaW1lbnRzCmNpdHkgbmVvbiBsaWdodAprb2RhayBwcm9tYXggNCAwIDAKc29ueSBsZW5zCmphcGFuZXNlIGZ1c2lvbiBjdWlzaW5lCmh1Z2UgZ3JlZW5ob3VzZQpqYXBhbmVzZSBnb2RkZXNzCmphcGFuZXNlIGluc3BpcmVkIHBvc3Rlcgpnb3RoaWMgYW5kIGZ1dHVyaXN0aWMKbW9kZXJuIG5laWdoYm9yaG9vZApqYXNvbiBzdGF0aGFtIGFzIGJhdG1hbgpqYXp6IHF1aW50ZXQKZG91YmxlIGJhc3MKamVmZmVyeSBlcHN0ZWluCmplZmZyZXkgd3JpZ2h0CmJyYWluIHZpc2libGUKZnVycnkgZmFjZQp3ZWFyaW5nIGJsYWNrIGhvb2RlZCBjbG9hawpqZXJlbXkgcmVubmVyCm1ha290byBvaWwgcGFpbnRpbmcKamVydXNhbGVtCnN0aWxsIGZyb20gcml2ZXJkYWxlCmlnbgpib2R5YnVpbGRpbmcgd29tYW4KaGVhZCBhbmQgc2hvdWxkZXJzIDggMCBtbSBjYW1lcmEKZ29sZGVuIHRlZXRoCmhpZ2ggLSBxdWFsaXR5IHBob3RvZ3JhcGgKYmlsbGJvYXJkIGltYWdlCmplc3VzIGNocmlzdCBzbW9raW5nIGEgYmx1bnQKamVzdXMgaG9sZGluZyBhIGN1dGUgY2F0CnNwbGFzaCBpbWFnZQppbiBzdHlsZSBvZiBiaWxsZWxpcwpqaW0gY2FycmV5IGFzIHRlcm1pbmF0b3IKamltIGNhcnJ5CmppbSBjb3JuZXR0ZQpqb2huIGtyYXNpbnNraQpzY3JlYW1lcgpmaXggZHVwbGljYXRlIGNvbnRlbnQhCnJlbW92ZSBkdXBsaWNhdGUgY29udGVudCEhISEKc3R5bGl6YXRpb24gZm9yIGZhbGxvdXQgNAppbiBwdWJnCm1pbmlhdHVyZSBhY3Rpb24gZmlndXJlCmFtYXppbmcgZGV0YWlsIGRpZ2l0YWwgYXJ0CmpvZSBiaWRlbiBhcyBhIGhvb2RlZCBhcmNoIG1hZ2UKbG92ZWNyYWZ0aWFuIHNlYSBjcmVhdHVyZQpqb2UgYmlkZW4gY29zcGxheWluZyBiaW9zaG9jawpzaGFyayBtYW4KMSA5IDggMCBzIGNoaWxkcmVuJ3Mgc2hvdwphbmltYWwgdHJhbnNmb3JtYXRpb24KYXMgYSB0aXRhbgpqb2UgYm9vbQpmcm9tIHRoZSBuZXcgam9obiB3aWNrIG1vdmllCmJhcnNvb20KYXZvaWQgZHVwbGljYXRlIGltYWdlcwp0YWtlbiB3aXRoIHRoZSBiZXN0IGRsc3IgY2FtZXJhCmNvbG9yZnVsIHByb2plY3Rpb25zCnBsdW1iaW5nIGp1bmdsZQprb3JlYW4gYXJ0IG5vdXZlYXUgYW5pbWUKY2VudGVyZWQgZnVsbCBib2R5IHNob3QKdGhlIGJvcmcKam9obm55IGRlcHAgcG9ydHJhaXQKbmVvIC0gbm9pcmUKY3J5c3RhbCBzaGFyZHMKc3RhciBwbGF0aW51bQpzeW1tZXRyaWNhbCBmYWNlIGhhcHB5Cm1hcnJpYWdlCmVtbWEgc3RvbmUgcG9pc29uIGl2eSBkYyBjb21pY3MKanIgZXdpbmcgZnJvbSBkYWxsYXMKYm9yaXMgdmFsbGVqbyBhbmQganVsaWUgYmVsbApzZWNyZXQgYWdlbnRzCndlYXJpbmcgYSBjcm9wcGVkIHRvcHMKc2xpZ2h0bHkgbGFyZ2VyIG5vc2UKaGlnaCBmYXNoaW9uIGV4cGVuc2l2ZQpqdW5nbGUgc2NlbmUKci4gZ2lnZXIKaW50cmljYXRlIGNvbXBsaWNpdHkKanVubyBwcm9tb3Rpb25hbCBpbWFnZQpzb2Z0IGdyYWRpZW50IHRleHR1cmUKcHIgc2hvb3QKcmVjaXRhbAprYWknc2EKa2FsZWlkb3Njb3BlIG9mIG1hY2hpbmUgZ3VucwpibGFjayB0ZXh0dXJlZApyZWQgZ2xvdyBleWUKa2FuZWtpIGtlbgptZWRpYSBwaG90bwpnbHNsIC0gc2hhZGVycwprYW55ZSB3ZXN0IG1hZGUgb3V0IG9mIGNvbmdlZQpydW53YXkgcGhvdG8KeWVlenVzCnBvc2luZyBpbiBuZW8gLSB0b2t5byBmdXR1cmlzdGljCnZvbGxleWJhbGwKdmludGFnZSBhc3NvY2lhdGVkIHByZXNzIHBob3RvCmVhdGluZyBtYXJzIGJhciBjYW5keQpnbGl0Y2hjb3JlIHJlYmlydGgKbWluYXMgdGlyaXRoIGluIHRoZSBiYWNrZ3JvdW5kCnN1cGVybW9kZWwhIGZhY2UhCmthdGFuYSB6ZXJvIHZpZGVvIGdhbWUgY2hhcmFjdGVyCmh1Z2Ugc3dvcmQKaW4gdGhlIGNyb29kcyBtb3ZpZSBzdHlsZQpjZWlsaW5nIGhpZGVzIGluIHRoZSBkYXJrCmhvbGRpbmcgZmxhc2sgaW4gaGFuZAprYXRlbHlubiBtaW5pIGN1dGUgc3R5bGUKdmlicmFudCBsdW1pbmVzY2VuY2UKd2VhcmluZyBhIGZvcm1hbCBkcmVzcwpwZW5jaWwgc2tpcnQKa2F0eSBwZXJyeSBpbiBhIHJlZCBkcmVzcwprYXR5IHBlcnJ5IHdlYXJpbmcgb2xkIGNsb3RoZXMKZml4aW5nIGEgbGVha2luZyBzaW5rCmthd2FpaSB5b2RhIGljb24Ka2F6YWtoIGVtcHJlc3MKaW50cmljYXRlIHBsYXRlIGFybW9yCmtlZXBlcnMgb2YgdGltZSBhbmQgc3BhY2UKc2V4eSBtb3ZpZSBwaG90bwpwcmUgLSByYXBoYWVsaXRlIHBhaW50aW5nCmJyaWdodCBkZWVwIGJsdWUKa2VybGkga29pdiBhcyBhbmltZSBnaXJsCmtldmluIGhhcnQKYXBlcnR1cmUgZiAzLiAyCm5vYmxlcwphcnRzdGF0aW9uIGNvbmNlcHQKc2t1bGxzIGFyb3VuZApraG9raGxvbWEgcGxhdGUgb2YgYm9yc2NodApjbG9zZSBkZXRhaWxlZCBmYWNlCmtpbGx1YSB6b2xkeWNrIG1hZGUgb2YgamV3bGVyeQpldWdlbmUgZ290dHNuYWtlCmtpbSBqb25nIHVuCnNjYXJlZCBlbW90aW9uCmFza2luZyBmb3IgY2hhbmdlCmdhcmV0aCBwdWdoIGF3IDIgMCAxIDEKY2cgb3JpZ2luYWwKa2luZyBvZiB0aW1lIHJlYXBlcgp2aW50YWdlIGZyaWRnZQpraXRzdW5lIHRocmVlIC0gdGFpbGVkIGZveApraXR0ZW4gc2FuZHdpc2gKa2l0dGVucyBpbiBvdXRlciBzcGFjZQprbGVpbiBib3R0bGUKa25pZ2h0IGluIGFybW9yIGRhbmNlIHBvcHBpbmcKa25pZ2h0IG9uIGhvcnNlYmFjawp2ZW50YWlsCmxldGhhbCBwcmVzZXJ2YXRpb24KaG9sZGluZyBzaGllbGQgYW5kIHN3b3JkCmRyZXNzZWQgYSBsb25nIHdoaXRlCmNvbG91cmVkIGdlbCBzdHVkaW8gbGlnaHQKbGlnaHRwYWludGluZyBtb3Rpb24gYmx1cgphbmNpZW4gY2hpbmVzZSB0b3dlcgpmaXJlZmx5cwpyb3lhbCB3b21hbgppcyB0b3RhbGx5IHNhZCBhbmQgY3JpZXMKc29tZSBzcXVhcmUgcGFpbnRpbmdzCjYgMCBzIGNoYWlyCnNxdWFyZSBwaWN0dXJlZnJhbWVzCm1vdmllIGNsb2Nrd2VyayBvcmFuZ2UKd2VhcmluZyBhIGJsdWUgYmVycmllcwppbiBzdHlsZSBvZiBicml0dCBtYXJsaW5nCmNocmlzdGFsaXplZApoYWxmbW9vbiBpbiBzcGFjZQp2ZXJ5IGJlYXV0aWZ1bCBnaXJsCnJhaW5ib3cgY29sb3VyZWQgcm9ja2V0cwpnbGl0dGVyIHRvcm5hZG9zCndlYXJpbmcgYmFybiBvd2wgbWFzawpiYWNrZ3JvdW5kIGZyYWN0YWwgbXVxYXJuYXMKbG9uZyBzaG90IGpvcm9ndW1vCmtvaSBmaXNoIGZsb2F0aW5nIGluIHNwYWNlCmtvcmVhbiBzdXBwZXIKaGUgaGFzIG5vIG5vc2UKMTkyMHMgcGhvdG9ncmFwaHkKaGVhZCB0dXJuZWQKb2xkIGZpbG0gcGhvdG8Ka2hyZXNjaGF0eWsKYWxsaWFuY2UKcGVyZmVjdC1mdWxsLXNob3QKbmVvbiBjeWJlcnB1bmsgc3R5bGUKY2FzY2FkZSBoZWxtZXQKbm9ybWFsIHByb3BvcnRpb25zCmJyaW5lIGxhY3Jvc3NlIHN0aWNrCmJyaW5lIGxhY3Jvc3NlIGtpbmcgdiBnbG92ZXMKbmlrZSBhbHBoYSBodWFyYWNoZSA3IGVsaXRlCmxhZHkgZGlhbmEKbGFkeSBnYWdhIGFydHBvcCBhY3QgaWkgYWxidW0KZ3JhY2Ugam9uZXMgZmFzaGlvbgphYXJvbiBmYWxsb24KcGV0ZXIgaGVua2V0CndhcndpY2sgc2FpbnQKZXh0cmVtbHkgaGlnaCBkZXRhaWxlZApsYWdvIGRpIHNvcmFwaXMKbGFndXMgdGhlIHRoaWV2aW5nIGJ1bm55Cmxha2UgZmlsZWQgd2l0aCBtb2x0ZW4gZ29sZAp3YXRlciBldmVyd2hlcmUgZmFudGFzeQpkaXN0YW50IHRodW5kZXIKaHVtYW4gbGFtYiBoeWJyaWQKbGFtYm9yZ2hpbmkgYXZlbnRhZG9yIHBob3Rvc2hvb3QKdXR0YXJha2hhbmQKbGFuZCBvZiBydWlucwp0cmlwb2QKZm9ydHJlc3NlcwpsYW5kc2NhcGUgb2YgYSBmdXR1cmUgY2l0eQpjbG91ZHkgYW5kIG15c3RpY2FsCmxhbmRzY2FwZSBvZiBhcG9jYWx5cHNlIGNpdHkKbGFuZHNjYXBlIG9mIGZsYXQgd2FzdGVsYW5kcwpjeWJlciB3YXIKbG9va2luZyBvdmVyIHdlc3QgdmlyZ2luaWEKZGFyayB3aW50ZXIgZXZlbmluZwpyb2NreSBoaWxscwphcnQgb2YgYW5ncnlzbmFpbAp0aWx0ZWQgYW5nbGUKc3R5bGUgb2YgdmFuIGdvZ2ggc3RhcnJ5IG5pZ2h0Cmxhbmdmb3JkJ3MgYmFzaWxpc2sKbGFyYSBzdG9uZQpmdWxsIGhlbG1ldAozIDUgZGVncmVlIHNob3QKbWFuIGRyaW5raW5nIGJlZXIKZm9yZWdyb3VuZC9iYWNrZ3JvdW5kCmxhcmdlIGZsb3dlciBoZWFkCmxhcmdlIGdyZWVuIGdsYXNzIHdpbmRvd3MKbWFueSBsYXJnZSBncmVlbiB3aW5kb3dzCnNtYWxsIHRvd24gc3Vycm91bmRpbmcKdGhlIGdyYXZleWFyZCEhCmluIGEgZGFyayB3YXJlaG91c2UKZmxvb3JwbGFuCm5leHQgdG8gZmFybSBmaWVsZHMgYW5kIHRyZWVzCmdhbWUgY2cKYnJpZ2h0IGNvbnRyYXN0CmNsZWFyIGFuZCBzdW5ueQpzaGF0dGVyZWQgbGFuZApsYXJyeSBkYXZpZCBlYXRpbmcgYSBzYW5kd2ljaApmcmFuY29pcyBkdWZyZW5lCmNlbnRyZWQgYXdhcmQgd2lubmluZyA0awpsYXN0IHN1cHBlciByZWFsaXN0aWMgcm9ib3QKaG9ycm9yIG1vdmllIGNoYXJhY3RlcnMKcGFsZSBjeWFuIGFuZCBncmV5IGZhYnJpYwpsZW9uYXJkbyBkaWNhcHJpbydzIGZhY2UKZmlzaGV5ZSEhIQpsb25lbHkgaHVtYW4gd2Fsa2luZwpkZWVwIHB1cnBsZSBhbmQgb3JhbmdlCmp1aWN5IGNvbG9yCmxheWluZyB0ZWRkeSBiZWFyCnJpcHBlZCBmYWJyaWMKbGVhZnMgZmFsbGluZwpncmVlbiBmYWNlbWFzawpkYXJrIGF0bW9zcGhlcmUgaWxsdXN0cmF0aW9uCm1vc3MgaW4gdGhlIHNoYXBlIG9mIGEgZmFjZQptb3ZpZSBwcm9tb3Rpb25hbCBpbWFnZQpsZWJyb24gamFtZXMgaW4gZ3RhIHYgY292ZXIgYXJ0CmxlZCBsaWdodApkaWdpdGFsIGF3YXJkIHdpbm5pbmcgYXJ0d29yawpwb3dlcmZ1bCBnb2QKYnJhbmRpc2hpbmcgc3dvcmQKbGVnZW5kYXJ5IHN3b3JkIG9mIHRlY2hub2xvZ3kKbGVnbyBtaW5pb25pYyB0aG9yCmFyY2hlcnMKaWNvbiB3aXRoIGEgaGFsbyBvZiBmaXJlCmR5bmFtaWMgbW92aWUgc3RpbGwKb24gZ3JleSBwYXBlciBza2V0Y2ggaW5rIHN0eWxlCmFyaXN0b2NyYXRpYyBjbG90aGluZwpzYWZhcmkgYmFja2dyb3VuZAp0aGlnaCBoaWdoIHNvY2tzCmNvbXBsZXggc3RydWN0dXJlcwpsZXhpIGJlbGxlCm9uZSBhcHBsZSBhbmQgb25lIG9uaW9uCmxpZWdlCjMgNSBtbSEhISEhIGxlbnMKbGlmZSBzaW11bGF0b3IgZ2FtZSBzY3JlZW5zaG90Cm9sZCBwaG90byBzY2F0dGVyZWQKNGsgaGQgcmVuZGVyCnNpbGVudCBydW5uaW5nICggZmlsbSApCnN0dG5nICggdGVsZXZpc2lvbiApCmFycml2YWwgKCBmaWxtICkKbGlnaHRuaW5nIG1hZ2Ugc3BlbGwgaWNvbgpsaWdodHBhaW50aW5nIGx1bWluZXNjZW50CmludHJpY2F0ZSByaXR1YWxpc3RpYyB0YXR0b29zCnNrZXdlcgpnYWxhY3RpYyBib25zYWkKbGltcCBiaXpraXQgcGVyZm9ybWluZyBpbiBoZWF2ZW4Kc2Vuc3VhbCBkYW5jaW5nCmJlYXV0aWZ1bCBhbmNpZW50IHJ1aW5zIGJlaGluZApkZXZpYW5hcnQgdHJlbmRpbmcKbXlzdGljYWwgZm9yZXN0IGJhY2tncm91bmQKbGluayBmcm9tIHplbGRhIHVzaW5nIGNvbXB1dGVyCmxpbm9jdXQgYXJ0IHByaW50CmZhbmN5IGJhY2tncm91bmQKc2F2YW5uYWgKbGlxdWlkIGNhdApiZWF1dGlmdWwgZmVtYWxlIG1vZGVsIHN0YW5kaW5nCmF1dHVtbiBvdmVyZ3Jvd3RoCnlhbnRyYQpjeWNsYWRpYyEgc2N1bHB0dXJhbCBzdHlsZQphZ2FpbnN0IHRoZSBiYWNrZHJvcCBvZiB0cmVlcwpib3kncyByb29tCnB1cnBsZSBhbmQgYmxhY2sgY29sb3IgcGFsYXRlCmluc3BpcmVkIHdlc3Rlcm4gY29taWMKZmFkZQpsaXZlIGNvbmNlcnQgb2YgYmV5b25jZQp0ZXh0dXJlIG9mIGVsZWN0cm9uaWMgY2lyY3VpdAphc3N5cmlhbgpsaXZpbmcgcGxhbmV0CnJvdW5kIG1pcnJvciBvbiB0aGUgd2FsbApzYW5kIC0gY29sb3JlZCB3YWxscwpsaXphcmRtYW4gd2FycmlvciBjb25jZXB0CmxvYm90b215IG9mIGEgYmVhdXRpZnVsIHdvbWFuCmxvY2sgYW5kIGxvYWQKbG9ja2xlZ2lvbgp0aG9tYXMgdGhlIHRhbmsgZW5naW5lIGZhY2UKb2xjaGFzIGxvZ2FuIGN1cmUgbGlhbmcgeGluZwpsb2cgY2FiaW4gYmVuZWF0aCB0aGUgYWxwcwp0cmVuZCBvbiBkcmliYmJsZQpkZXNpZ25lciBhcnQKbG9nbyBpbiBhYnN0cmFjdCBzdHlsZQpsb2dvIG9mIGEgY2F0IGZpZWxkIGNsaW5pYwpjbGFzc2ljIHNjdWxwdHVyZQpzdXAKbG9tbyBwaG90b2dyYXBoCnJlZCBnb2xkIGJsYWNrCjQgbGltYnMgYW5kIGNpdmlsaXplZCBiZWhhdmlvcgptaWxpdGFyeSBzb2xkaWVyIGJlaGF2aW9yCmZsb2F0aW5nISEhIGluIGEgbmVidWxhCmNpbmVtYXRpYy4gY2luZW1hdGljIGNvbXBvc2l0aW9uCmRlcGFpcgp0aGUgdHJlZSBpcyBncm93aW5nIG9uIGEgbWVhZG93CmxvbmcgLSBoYWlyZWQgc2liZXJpYW4gY2F0CmNvdWxzb24KaGFuc2EgeWVsbG93CmxvbmcgZGFyayBoYWxsd2F5CmxvbmcgaGlnaHdheQp1bHRyYSBodW1vcm91cyBvaWwgcGFpbnRpbmcKZGFyayBib2tlaCBpbiBiYWNrZ3JvdW5kCmJsYWNrIHNrZWxldG9uIHN3b3JkIGd1YXJkCmNyeXB0b2JsYWRlcwppbiBzdHlsZSBvZiBuZW9kYWRhCmJvdXJnZW9pc2UKd2Fsa2luZyBib3kKc3dlYXR5LiBzdGVhbSBpbiBhaXIKc3R5bGUgb2Ygc2FudGlhZ28gY2FydXNvCndldCBkcmFwZXJ5Cmdvcmdlb3VzIGVsZWdhbnQgYXR0cmFjdGl2ZQojY29uY2VwdGFydApiaXJ0aCBvZiB0aGUgdW5pdmVyc2UKYmlnIGRhcmsgY2F2ZXJucwpuZXN0b3IgY2FuYXZhcnJvIGh5cGVycmVhbGlzdApsb3Qgb2YgZm9hbQp0aGUgaGFuZGJhZyBpcyBvdmVyIGEgd29vZCB0YWJsZQp0byB0aGUgbW9vbgpsb3RzIG9mIG1hY2Fyb25pISBvdmVyIGEgZGVzawpsb3RzIG9mIHN3aXJsaW5nCmxvdmUgYW5kIGJlbG9uZ2luZwpmbHlpbmcgcml0dWFscwpibHVlcHJpbnQgcmVkIGluawpsb3N0IGdyaW1vaXJlCnJlZCB3cml0aW5nCmZ1bGwgcGFnZSB3cml0aW5ncwpvcm5hdGUgYm9yZGVycyArIGNvbmNlcHQgYXJ0CmNvbG9yZnVsIHdpdGggcmVkIGh1ZXMKbG92ZWNyYWZ0aWFuIGxhbmRzY2FwZQpsb3ZlbHkgY291cGxlCnNhZCBtZW4KY291Y2hlcyB2aWJyYXRpbmcgYW5kIG1lbHRpbmcKdG9kZCBoaWRvIHBob3RvZ3JhcGh5CmNvbWljIGRpZ2l0YWwgYXJ0Cm9jdGF2ZQpsb3cgZ3JhaW4gZmlsbQpoaXBwaWUgYW5kIGJvaG8gZmFzaGlvbiAxOTcwcwprcmF1dCByb2NrIHNvdW5kdHJhY2sKY2xvc2V1cCBvZiBhIGJ1dGNoZXIgd29ya2luZwo0ayBwaG90byBnaWdhcGl4ZWwKbW9lYml1cyEhIQpjYXBpdGFsIGNpdHkKcnVpbmVkIHRlbXBsZSBjb3ZlcmVkIHdpdGggbW9zcwpoYW1sZXRzCnJ1aW5lZCB0ZW1wbGUKb2xlZCBsaWdodHMgaW4gY29ybmVycwpsb3cgcG9seSB2ZWN0b3IgaWxsdXN0cmF0aW9uCmhvbHl3b29kIGFjdHJlc3MKZGlsYXBpZGF0ZWQgaG91c2VzCiggKCAoIGJ1c2VzCnRyYW1zICkgKSApCjkgMCBzIGZpcnN0IHBlcnNvbiBzaG9vdGVyCmFuZHJvaWQgam9uZXMgYW5kIGF0ZXkgZ2hhaWxhbgpsdWNpZmVyIHRoZSBzdGFyCndvb2RlbiB0b2lsZXRzCmRlbGljYXRlIGRldGFpbHMKcGlucyBvZiBsaWdodAphcnRodXIgY2xhcmtlCmx1dGhpZW4Kc2hlIGlzIGRhbmNpbmcuIHJlYWxpc3RpYwpsdXh1cnkgYmVzcG9rZSBraXRjaGVuIGRlc2lnbgp1bmRlcnN0YXRlZCBhZXN0aGV0aWMKbHV4dXJ5IGpvdXJuYWwgY292ZXIKc3BlbGwgY2FzdGluZyB3aXphcmQKZmluZSBhcnQgcGhvdG9ncmFwaApjb21wbGV4IGFyY2hpdGVjdHVyZQpkb24ndCB0cmlwCmluIGRheXoKbWFjYXF1ZSBpbnNpZGUgYWxpZW4gYmFzZQpuZW9nb3RoaWMKbWFjaGluZSBnYXJkZW4KbWFja2VuemllIGZveQptYWNybyBwaG90byBvZiBhIGh1bWFuIGV5ZQrGki81LjAKZm9jYWwgbGVuZ3RoOiA0Ni4wIG1tCmV4cG9zdXJlIHRpbWU6IDEvNjAKcGFsbSBsaW5lcwpsYXllcnMgb2Ygc3RyYXRhCmxvbmcgdGFibGUKc2xvd3RpbWUKZ3JlZW4gbWF0cml4IGxpZ2h0Cm11cmFsaXNtCm5vcm1hbiBtaW5nbyBwYWludGluZwptYWQgbWFuIHNjcmVhbWluZwptYWQgbWF4IGZ1cnkgcm9hZCBmaWxtIHN0aWxsCmJyYWlud2FzaGluZwptYWQgdHJhc2ggYmFncwptYWdpYyBnbG93aW5nIGJsdXIKaGlnaGx5IGRldGFpbGVkIHJlYWxpc20KbWFkaXNvbiBiZWVyIGFzIGxlZWxvbwpoeXBlcmRldGFpbGVkIGNvbnRlbnQKbGVmdCBhbGlnbiBjb250ZW50CndlZXBpbmcgdGVhcnMgb2YgYmxhY2sgb2lsCmJvdXRpbmVsYSBiaWtpbmkKbWlzdHkgY2FzdGxlCnVsdHJhIHdpZGUgYW5nbGUgaG9yaXpvbgptYWdlIHNtb2tpbmcgcGlwZQpjYXJuaXZhbCBiYWNrZ3JvdW5kCmF3YXJkIHdpbm5pbmcgaC01MTIgdy01MTIgbi02CmhvbGRpbmcgYSBraXRjaGVuIGtuaWZlCmZlZWxzIGdvb2QgbWFuCmJhbGxzIG9mIHJpY2UKZ2lhbnQgZXRoZXJlYWwgY3JlYXR1cmUKbWFnaWMgZmFpcnkgZm9yZXN0Cm1hZ2ljIGZyb3plbiBpY2UgcGhvZW5peCBlZ2cKc2VhIGtpbmcKbWVjaGFuaWNhbCB3YXJyaW9yCm1hZ2ljIHNtb2tlIGV2ZXJ5d2hlcmUKcGVyY2hlZCBvbiBpbnRyaWNhdGUgdGhyb25lCmlsbHVzdHJpb3VzCmZyb3plbiByaXZlcgpzZWNyZXQgb2YgbWFuYQpiZWF1dGlmdWwgZmFpcmllcwptYWdpY2FsIGxlYWZzIGZhbGxpbmcKc3dlZXBpbmcgbGFuZHNjYXBlCnZvbHVtZXRyaWMgbGlnaHRpbmcgZnV0dXJpc3RpYwpzb21lIHZhZ3VlbmVzcwpncmVlbiBsZXR0ZXJzCnF1ZWVuIG9mIGhlbGwKZ3JlZyBydXRrb3dza2kgYW5kIGNhcnZhZ2dpbwptYWplc3RpYyBpbnRlcnN0ZWxsYXIgcG9ydGFsCm1vdW50YWlucyBhbmQgbGFrZXMKbWFqZXN0aWMgbmF0dXJlIHNjZW5lcnkKdmVydGlnbyAtIGluZHVjaW5nCnJlc3RhdXJhbnQgbWVudSBwaG90bwpzdXBlciByZWFsaXN0aWMgZm9vZCBwaWN0dXJlCm1ha2luZyBhIGRlYWwgd2l0aCB0aGUgZGV2aWwKdHlwaW5nIG9uIGxhcHRvcApzaG9vdGluZyBmaXJlIHdhcgppbnRyaWNhdGUgd2hpdGUgYXJtb3IKc2xlZWsgY29vbCB3YXRlcnByb29mIGRlc2lnbgpnb2xkIGFuZCB3aGl0ZSByb2JlcwptYWxlIGRyb3cKdHJlYXN1cmUgcm9vbQptYWxlIGZ1bGwgYm9keSBvcmdhbmljIGFybW9yCmZpcmVtYWdpYwpzdGVhbXB1bmsgZXllCm1hbGUgcGFsYWRpbgptYWxlIHBvbGFyIGV4cGxvcmVyCmhpZ2hseSBkZXRhaWxlZCAzIGQgYXJ0Cm1hbGUgc29sZGllciBpbiB0aGUgZm9yZXN0CnB1cnBsZSBjcnlzdGFsIGdsYXNzIGlubGF5cwptYWxlIHdhcnJpb3Igc2lsdmVyIGFybW9yCmJsb29kIHJlZCBhcm1vcgpkYXJrIGJsYWNrIGxvbmcgZHJlc3MKbWFuIGNhcnZpbmcgaGltc2VsZiBvdXQgb2Ygc3RvbmUKc2VhIG9mIHBhcmZhaXQKYmx1ZSBhbmQgY3lhbiBzY2hlbWUKbWFuIGZpbmRzIGhhcHBpbmVzcwptYW4gZ3JhYmJpbmcgYSB3b21hbnMgd2Fpc3QKbWFraW5nIGxvdmUKbWVudGFsIHBhbmRlbW9uaXVtCm9sZCBzZXBpYSBwaG90b2dyYXBoeQpzdW5zIHNldCBvbiBhIGRlc2VydCBwbGFuZXQKbWVkaXRhdGluZyBwb3NlCm1hbiBpbiBob3JzZSBjb3N0dW1lCmhvcnNlIGluIGNvc3R1bWUgYXN0cm9uYXV0CmJsb29keSBrbmlmZSBpbiByaWdodCBoYW5kCnJlZCBibG9vbWluZyBmbG93ZXJzCnBob3RvIC0gcmVhbGlzdGljIHdhbGxwYXBlcgptYW4gbG9va3Mgb3V0IG9mIGEgdHJhaW4gd2luZG93CnNtb2tlIHN3aXJsaW5nCm1hbiBzaXR0aW5nIGZhY2luZyBhd2F5CnN0aWNrIGZpZ3VyZXMKZHJhd2luZyBzdHVkeQpqZXQgZmlnaHRlciBiYWNrZ3JvdW5kCmJsb29kIGRyaXBwaW5nIGZyb20gZXllcwptYWRkeSBzdHlsZQp3YWxraW5nIGRvd24KYmlnIGJydXNoCmF0aGVucyBpbiB0aGUgYmFja2dyb3VuZApibGFjayBnbG92ZXMhISBhbmQgYm9vdHMKZGFvaXN0CmFjY2VudHMgb2YgcmVkCmR5c3RvcGluIGZ1dHVyZQpqYXBhbmVzZSBjb21pYyBib29rCm11c2N1bGFyIGNoYXJhY3RlcnMKam90YXJvIHZzIGRpbwpmbG9lZXJzIGluIGhhaXIKY3VzaGFydCBrZW56CnVuZGVyIGFydGlsbGVyeSBmaXJlCm1hcCBvZiBhIGR1bmdlb24gaW4gd2F0ZXJkZWVwCjEgNyAwIDAgcyBhdGxhcwptYW5zaW9ucyBvZiBtYWRuZXNzCmFyaGFtIGhvcnJvcgpiYXNzIHdvb2QKYXJjaGl0ZWN0dXJhbCBwcmVzZW50YXRpb24KbWFyIC0gYSAtIGxhZ28gZmJpIHJhaWQgbGVnbyBzZXQKbWFyYSBqYWRlIGFuZCBsdWtlIHNreXdhbGtlcgptYXJiZWxsYQpyZW5laXNzYW5jZQptYXJibGUgd2hpdGUgc3RhdHVlIG9mIGEgZHJhZ29uCm1hcmdvdCByb2JiaWUgYXMgYSBmYWlyeQp5ZWxsb3cgbmVvbiBjeWJvcmcgZXllcwp0aGUgZ29sZGVuIGh1bWFub2lkIHJvYm90Cm1hcmllIGN1cmllCnZpbnRhZ2UgcGluIHVwCmZ1bGwtc2l6ZQpvZmZpY2VycyB1bmlmb3JtCm1hcmlvIHJpZGluZyBhIGdpcmFmZmUKYm90aCBsYXVnaGluZwpsb29raW5nIHRvd2FyZHMgdGhlIGNhbWVyYQptYXJrZXQgaW4gYW5jaWVudCByb21lCmhpc3Ryb2ljYWwKbmlnaHQgdGltZSBwaG90b2dyYXBoCm1hcnRpYWwgYXJ0aXN0IGRyeWFkCndvbWFuIG1hZGUgb2YgcGxhbnRzCm1hcnRpYWwgYXJ0cyB0b3VybmFtZW50CmRhcmsgYmFja2dyb3VuZCB0ZXh0dXJlCm1hc3RlcndvcmsgY29tcG9zaXRpb24Kc3Ryb25nIHByZXNlbmNlCnBhbnRvbmUgbWFya2VyIHBvcnRyYWl0CjEgOSA4IDAgcyBhbmQgMSA5IDIgMCBzIGFpcmJydXNoCnRyaWFuZ2xlIG1ha2V1cApzZWN0CmJ1dHRlcmZseSBlbWJyb2lkZXJ5Cmh1Z2UgZmljdXMgbWFjcm9waHlsbGEKbWFnaWNhbCBwbGFudHMKc3lkIG1lYWQgYW5kIG1hcmsgYnJvb2tzCmh5cGVyLWZ1dHVyaXN0aWMgY2l0eQptYXN0ZXIgY29sb3Igd29vZGJsb2NrIHByaW50CmRpcnR5IGFuZCBvbGQKaGVhdnkgZ29sZCBvYnNpZGlhbiBhcm1vcgpjbG9zZSBmYWNlIHZpZXcKZWxkZW4gcmluZyBjbGFzcwpzdHlsaXplZCBmcmFjdGFsIGJhY2tncm91bmQKZnVsbCBzdGVlbCBhcm1vdXIKZHJhbWF0aWMgbGlnaHRpbmcgd2l0aCBnb2QgcmF5cwppcmlkZXNjZW50IG1vdGggd2luZ3MKcmVmbGVjdGlvbiBpbiB0aGUgd2F0ZXIKZmxvd2VyIHNoYW1hbgpoLiByLiBnaWdlciBhbmQgdG9tIGJhZ3NoYXcKZGFyaXVzIHphd2FkemtpIGFuZCB0b20gYmFnc2hhdwpvYWsgdHJlZXMgYW5kIGRyeSBncmFzcwpmbGF0IG1ldGFsIGhpbmdlcwpjcnlzdGFsIGluY3J1c3RhdGlvbnMKZW1vdGlvbmFsIHBpY3R1cmUKZGFybGluZyB3YXNoIG9mZiBpbiB0aGUgcmFpbgpzY3JhcGUgb2ZmCnllbGxvdyBnbG93aW5nIGJhY2tncm91bmQKY3JpbXNvbiBkYXJrbmVzcwp2aXZpZCBjb2xvdXJzLiBzaGFycCBmb2N1cy4gd293IQp3aXN0ZnVsIGV4cHJlc3Npb24KbWFzdWltaSBtYXgKbG9nb3R5cGUgZGVzaWduCmVxdWF0aW9uIGhlYXZlbgptYXRoIGVxdWF0aW9ucyBpbiB0aGUgYmFja2dyb3VuZAptYXRyaW9zaGthIGJyYWluCnNjaWVuY2UgbWFnYXppbmUKbWF0dCBtdXJkb2NrIHZzIHNhdWwgZ29vZG1hbgppcmlkZXNjZW50IHRlY2hub2xvZ3kgYW5kIHdlYXBvbgp3aWxkIGhhaXJzCnN1cnJlYWwgbXlzdGljYWwgYXRtb3NwaGVyZQptYXR0aGV3IG1jY29uYXVnaGV5Cm1hdHRoZXcgcGVycnkgZ3JhcGhpYyBub3ZlbAptZWdhbGl0aHMKaWtlIGluIHJlYWwgbGlmZQp3ZXQgcmVmbGVjdGl2ZSB0aWxlIGZsb29yCnJvdWdoIHdvb2QKc3dlZGlzaCBzdHlsZQptYXkgMSAwCnZhbnRhYmxhY2sgY2FwZQpjeWJlciBzcGFjZSBjb3dib3kKb3V0dGVyIHNwYWNlCm1jZG9uYWxkCm1lY2ggc2hhcGVkIGxpa2UgYSBtYW5hdGVlCndpdGggamFwYW5lc2UgaW5zcGlyYXRpb24Kam9uYXMgcm9zY2luYXMKbWVjaGFnb2R6aWxsYQptZWNoYW5pY2FsIGZyb2cKbWV0YWwgc2NhcGVzCm1lY2hhbml6ZWQgdmFsa3lyaWUgZ2lybAppbiB0aGUgZ2xhbW91ciBzdHlsZQpoZWFydCBvcGVyYXRpb24KaGVsbWV0IHZpZXcKbWVkaWV2YWwgYmF0dGxlCnN0b25lIHJvYWRzCmljZWxhbmQgcGhvdG9ncmFwaHkKd2FybSBnbG93IGNvbWluZyB0aGUgZ3JvdW5kCmFib3V0IHRvIGVudGVyIGRvb3JmcmFtZQpjYXN0bGUgZ3JlYXQgaGFsbApob3VzZXMgYW5kIHJvYWRzCnRhbGwgZmFybWVyCm1lZGlldmFsIHN3b3JkIG9uIHN0b25lCmFscGluZSBhcmNoaXRlY3R1cmUKbWVkaWV2YWwgem9tYmllIHBlYXNhbnQKZm9jdXMgb24gZmFjZSBhbmQgZmFjaWFsIGRldGFpbHMKaHVncwp0b20gYmFnc2hhdyBkb25hdG8gZ2lhbmNvbGEKYXMgZmFzaGlvbiBlZGl0b3JpYWwgOTBzCm1lZGl1bSBnYXJnb3lsZSBzb2Z0IGxpZ2h0Cm1lZGl1bSBoZWFkIHRvIHNob3VsZGVyIHNob3QKbWVkaXVtIHBvcnRyYWl0IG9mIGEgZ29ibGluCnNoYXJwIGhpZ2ggZGV0YWlsIGlsbHVzdHJhdGlvbgoxODQwNTcyNTc4CmFuaW1lIG1vZSBhcnRzdHlsZQouIGJhY2tncm91bmQ6IGp1bmdsZSByaXZlcgp2ZXJ5IGhlYXZ5IHZpZ25ldHRlISEhCmh1bWFuIHN0YXJpbmcgYmxhbmtseSBhaGVhZAphcnQgaG91c2UgZmlsbSBhZXN0aGV0aWMKY29sb3IgZ3JhaW4gMyA1IG1tCnBhaW50aW5nIG9mIHdpbGQgaHVudCBpbiB0aGUgc2t5Cmluc2lkZSB0aGUgZmxvd2VyCnNoYWxsb3cgZGVwdGgKbWVkdXNhIG1hZGUgb2Ygd2F4Cm1lZXRpbmcgcm9vbQp0aWx0IHNoaWZ0IHN1YnVyYmFuCmNvbGQgd2FyIGVyYSAxIDkgNiAwCnN0eWxpc3RpYyBwYWludGluZwptZWdhbiBmb3ggYXMgbGFyYSBjcm9mdAptZWdhbiBmb3ggY29sb3JmdWwgcG9ydHJhaXQKaXBhZCBwcm8KbWVnYW4gZm94IHdpdGggaGVhdnkgZXllIG1ha2V1cApwbGFzdGljIGRvbGwKZXh0cmEgaGlnaCByZXNvbHV0aW9uCmluc2lkZSBhIGdhcyBzdGF0aW9uCmVzdGhldGljIHBob3RvCm1lcmN5ICggb3ZlcndhdGNoICkKbWVyZm9sayByaWRpbmcgc2VhaG9yc2VzCm1lcm1haWQgY3lib3JnIHdpdGggYSBsYXNlciB3aGlwCm1lc2EgcGxhdGVhdQpkZXBpY3RpbmcgYSBmbG93ZXIKbWVzc2FnZQphbnRob255IGhvd2UKbWV0YWwga2V5IGZvciB0aGUgZG9vcnMKbWV0YWwgb3JjaGlkIGZsb3dlcgptZXRhbGxpYyBuZW9wcmVuZSB3b21hbgpueWxvbiBmYXNoaW9uCmFydCBzdHlsZSBvZiBub2VsIGNveXBlbAp2ZXJ5IHZlcnkgY3JlZXB5CmNob3pvCnZhcmlhIHN1aXQKbWV4aWNhbiB3YXJyaW9yCndvb2RlbiBoZWFkcGhvbmVzCmJyb3duIHBhbGV0dGUKbW92aWUgYW5ub3VuY2VtZW50CmNsZWFyIHNob3QKbWljaGFlbCBteWVycyBtYXNrCm1vbnN0ZXIgdGhlbWUKZnJ5aW5nIG5haWxzCm1hcmMgZGF2aXMgYW5kIGdsZW4ga2VhbmUKZHNsciAyNG1tCm1pY3JvcG9ob25lCm1pY3Jvc2NvcGljIHRhcmRpZ3JhZGVzCmluIGRhcmsgcHVycGxlIHJvYmVzCmhlYWQgYW5kIGZ1bGwgYm9keSB2aWV3CmJpZyB3aGl0ZW5lZCBoYWlyCmthenVraSB0YWthaGFzaGkKbWlnaHR5IHBsdW1wIGZlbWFsZSBzb3JjZXJlc3MKYmx1ZSB0aWFyYQptaWdodHkgcHJpbmNlc3Mgb2YgdGhlIHdhc3RlbGFuZAptaWthZG8KamFja3N0cmF3cwpyZW0gcmV6ZXJvCndpc2NvbnNpbgp2aW9sZXQgcG9sc2FuZ2kKbWluYWdobwpvcm5hdGUgZGFzaGluZyByZWQgZ2FybWVudHMKYXNoZW4gYmxvbmRlIGhhaXIKY3liZXIgZW1iZWxsaXNobWVudAp2aXZpZCBhYnN0cmFjdCBsYW5kc2NhcGUKc2xlZXAgd2l0aCBsb3ZlCm9ybmF0ZSB0dXJiYW4KZ3JlZW4gY29sb3JlZCBza2luISEKZ3JlZW4gY29sb3JlZCBza2luCm1pbmlhdHVyZSBjYWZlIGRpb3JhbWEKbGl2aW5nIGluIHRoZSBkYXRhYmFzZSEhIQpqYW1lcyBuYXJlcwpzaGFycCByb2NrcwptaW5pbWFsaXN0IGluayBkcmF3aW5nIG9mIGEgY2l0eQpzaW5nYXBvcmUgKCAyIDAgMSA4ICkKZmlyc3QgZHJhZnQKd2l0aCByb3VsZXR0ZXMgaW4gdGhlIHJvb2YKc21hbGwgZXllYnJvd3MKcmVkc2ZoaXQgcmVuZGVyCm1pbmlvbiBhcyBhIGRhcmtzb3VscyBib3NzCm1pbmlvbiBpbiBzcGFjZQptaW5pb24gaXJvbiBtYW4KY2xheSBtb2RlbAptaXJyb3IncyBlZGdlIGluIHJ1c3NpYQptaXNzIGZvcnR1bmUgbGVhZ3VlIG9mIGxlZ2VuZHMKbXlzdGljIGxpZ2h0CmZpcmVmbGllcyBhbmQgc3BhcmtsaW5nIHdpc3BzCm1pc3R5IHdvb2QKbWl0Y2ggbWNjb25uZWxsIGFzIGEgdHVydGxlCnB1ZGd5CmNlbHRpYyBub3JzZSBmcmFua2lzaAptaXh0dXJlIGJldHdlZW4gYW4hIG93bCBhbmQgd29sZgpzdXBlciBzdXBlciBkeW5hbWljIGR5bmFtaWMgcG9zZQptb2FpIHNlZWRsaW5nCmlzb21ldHJpYyBzdGFpcmNhc2UKbW9iaWxlIGxlYXJuaW5nIGFwcCBwcm90b3R5cGUKbW9kZWwgb2YgYXRvbQptYW4gcmF5IC0gaCAxMjAwCjMgeW91bmcgYW5kIGJlYXV0aWZ1bCB3b21lbgpzb2xkIGZvcgpwcm9maWxlIHB1dGluCmxpZ2h0IHJlZmxlY3Rpbmcgb2ZmIHdpbmRvd3MKbW9kZXJuIGNoaWNhZ28gc3RyZWV0cwpvcGVuIGJhY2sgZHJlc3MKaGFyYm91ciBpbiBiYWNrZ3JvdW5kCnNvZnRseSBsaXQKYXJ0aWZpY2lhbCBsaWdodG5pbmcKd2V0IGZsb29yIG9uIHN0cmVldHMKbGlnaHQgcGluayBjbG91ZHMKZGV0YWlsZWQgcGVud29yawpwb3J0cmFpdCBiaWcgZGFyayBwdW5rCm1vbGx5IGZyb20gbmV1cm9tYW5jZXIKbW9uYSBsaXNhIGFzIGEgZ290aCBnaXJsCnN0cmVzcwpyZXRybyA1IDAgcyBzdHlsZQpwZXRlciBtb2hyYmFjaGVyIGFydHN0eWxlCjEgOSA4IDAncyBzY2lmaQpkYXJrIGFuZCBkcmFtYXRpYyBhdG1vc3BoZXJlCmhyIGdpZ2VyIGFydHdvcmsKaGlnaGx5IGRldGFpbGVkISEhISEhIQptb29ubGl0IGtlcmFsYSB2aWxsYWdlCmNhc3RsZSBjb3JlCnJvZGVudAo4IGsgcnBnCm1vcmluZ2Egb2xlaWZlcmEgbGVhdmVzCm1vcm5pbmcgY29mZmVlCjEgOSA0IDEKbW9ydGFsaXR5CnN1biBmbGFpcnMKc3VuIG9uIHplbml0aApvcmMgdmlsbGFnZQphbGR1aW4KbW9zdCBiZWF1dGlmdWwgd29tYW4gb24gZWFydGgKd3JpdGluZyBvbiBhIGNsaXBib2FyZApleGhpYmFudCBhdSBuYXR1cmVsCmFraXJhIGFuZCBidW1ibGViZWUKbW90b2Nyb3NzIGJpa2UKbW90b2Nyb3NzIHJpZGVyIG9uIGRpcnQganVtcApuZW8gLSBjbGFzc2ljYWwgY29tcG9zaXRpb24KbW91bnRhaW4gcGFzcwp3aWxkIGFuZ2xlIGxlbnMKdmlzaWJsZSBoZWFkCm1vdXNlIHdpdGggZHJ1bQptb3VzZWZvbGsKcmVhbGlzdGljIGh1bWFuIG1vdmVtZW50CmNsZWFuIGJydXRhbCBibG9vZGVkIGZhY2UKY29tbWVyY2lhbCBiaWxsYm9hcmQKbWVnYWxvcGhvYmEKbW92aWUgcG9zdGVyIGZvciB0aW1lY29wIGFjYWRlbXkKYWlyYnJ1c2hlZCBhcnR3b3JrCnN1cHBvcnRpbmcgY2hhcmFjdGVycwpkcmFtYXRpYyBleHByZXNzaW9ucwpsYXJnZSBtb29uIGluIHRoZSBza3kKbmVvbiBsaWdodGluZyBtZWRpdW0gZnVsbCBzaG90CnJlYWwgYmF0cwp3aW5kIGJsb3dpbmcgbGVhdmVzCm1hZ2ljIHBhcmFkZSBmbG9hdAp3aWRlIGFlcmlhbCBzaG90CnRyaWNlcmF0b3BzCm1vdmllIHN0aWxsIG9mIGF6dGVjIGN5Ym9yZwptb3ZpZSBzdGlsbCBvZiBjeWJvcmcKZ2lhbnQgeW9kYQptb3ZpZSBzdGlsbCBvZiByb2JvdCBldmFuZ2VsaW9uCm1vdmllIHN0aWxsIG9mIHJvYm90IGdva3UKZnV0dXJpc20gYWVzdGhldGljCmFuY2llbnQgYmF0dGxlZmllbGQKaW1wcmVzc2l2ZSB3aW5uaW5nIHBob3RvCmNoZXN0IGxlZ3MKY2x1YiBwaG90b2dyYXBoeQptcnMgZG91YnRmaXJlIGFzIGEgd2l0Y2gKbXRnIGNhcmQgdHJhZGluZwpraXRzdW5lIGhvbGRpbmcgdG9yY2gKOGspKQptdWxlCmZpdCBjdXJ2eSBwaHlzaXF1ZQpleHBsb3Npb25zIQpleHRyZW1lIG1vdGlvbiBibHVyIG9uIHBlb3BsZQpmdWxsIG9mIHllbGxvdyBmbG93ZXJzIGZsb3dlcnMKb2xkIHNjaG9vbCBmcHIKcG9wdWxhciBpbnRlcmlvciBkZXNpZ24gc3R5bGUKbXVzY3VsYXIgYmFsZCBtYW4KamVhbi1zZWJhc3RpZW4gcm9zc2JhY2gKZGV0YWlsZWQgbmVvbiB0YXR0b29zCmNodW5reSBnYXVudGxldHMKd2VhcmluZyBtZXRhbCBnYXVudGxldAptdXNjdWxhciBmZW1hbGUgZ25vbWUgZW5naW5lZXIKbWFydmVsIG1vdmllIGZvb3RhZ2UKaGQgbW92aWUgcGhvdG8Kc3RvbmUgcmVsaWVmCnRhdHRvb2VkIGJhY2sKbXVzY3VsYXIgbWFnaWNpYW4gbWFuCmdvZ2dsZXMgYXJvdW5kIGhpcyBuZWNrCm11c2N1bGFyIG1lbiBlbnR3aW5lZCB0b2dldGhlcgpyb21hbiBjb2xpc2V1bQp3b21lbiBmaWdodGluZyBtZW4KbXVzaHJvb20gY2FwCmJva2VobGljaW91cwptYW5nYSBjb3ZlciBzdHlsZQp2b2x1bWV0cmljIGxsaWdodApkYW5jaW5nIGNoYXJhY3RlcgptdXNpYyBpcyBsaWZlCm11c2sgKCAyIDAgMiA0ICkKZmFudGFzeSBib3NzCmRpc3RhbnQgdmlsbGFnZSBiYWNrZ3JvdW5kCmRpc3RhbnQgdmlsbGFnZXNjYXBlCm11dGVkIHZhcG9yd2F2ZSB1bnJlYWwgb21icmUKbXkgY29tcHV0ZXIgaWNvbgpteSBoZWFydCBpcyBodW1hbgpteSBibG9vZCBpcyBib2lsaW5nCnJlYWRpbmcgdGhlIGJvb2sgYWJvdXQgbG92ZQpyZWFkaW5nIG5ldyBib29rCmdyYXZpdHkgaXMgc3Ryb25nCm15IHRydWUgaWRlbnRpdHkKb25lIHBlcnNvbiBpbiBmcmFtZQpteWFubWFyCm15bGx5cHVybyB3YXRlciB0b3dlcgpteXN0ZXJpb3VzIGFuZCBzY2FyeSBmb3Jlc3QKcG9sYXJvaWQgYXJ0aXN0aWMgcGhvdG8KZHJhbWF0aWMgZmlyZSBnbG93IGxpZ2h0aW5nCndlYXJpbmcgYW4gZWxhYm9yYXRlIGhlbG1ldApteXN0aWNhbCBrZXcgZ2FyZGVucwp3aWxsaW0gYmxha2UKaW50cmljYXRlIG9ybmF0ZQphdG1vc3BoZXJpYyBjaW5lbWF0b2dyYXBoeQpiZWF1dGlmdWwgY3JhZnRzbWFuc2hpcApuYWdhc2ggZWRpdG9yaWFsCmFuZ3J5IGZlbWFsZSBhbGllbgplcGljIHNhbXVyYWkgd2FycnJpb3IKdWtpeW9lIHBhaW50aW5nCm5ldyBoYW1wc2hpcmUgbW91bnRhaW4Kc3VwZXIgZGV0YWlsZWQgaW1hZ2UKYmFja2dyb3VuZCBpcyBzcGFjZQpuYXRhbGllIGZyb20gZXBpYyBiYXR0bGUgZmFudGFzeQpyYXkgLSB0cmFjZWQgbGlnaHRpbmcKbmF0aXZlIGFtZXJpY2FuIHdhcnJpb3IKZ3JvdW5kIHBlcnNwZWN0aXZlCm5hdHVyZSBlbnZpcm9ubWVudApyYWluZmFsbCBhbmQgbXVkCm5iYSAyIGsgMiAxCnN0YXJzIGdsaXR0ZXJpbmcgaW4gYmFja2dyb3VuZApuZWJ1bGEgd2l0aCB0aGUgc2hhcGUgb2YgYSBza3VsbApsYXRlcmFsIHZpZXcKcG9vZnkKbm8gaG9vZCB8IHwgcmVhbGlzdGljIHNoYWRlZApkYXJrIGJsdWUgYW5kIGdyZWVuIHRvbmVzCmZ1dHVyaXN0aWMgYXJjaGl0ZWN0dXJhbCBhcnQKdHJlbmRpbmcgYXQgYXJ0IHN0YXRpb24KbmVvbiBhbmNpZW50IHJ1aW5zCm5lb24gb3BlcmF0b3IgbWFyZ290IHJvYmJpZQo4IGsuIGZpbGxpbmcgb2YgdGhlIHZpZXcKYmlnIGFmcm8KY2VsbHVsYXIKcmljZSBwYXBlciB0ZXh0dXJlCmVwaWMgaG9ycm9yCm1ha2VzaGlmdCB3ZWFwb25zCm5ldyAtIHlvcmsgc2t5bGluZSBpbiB3aW50ZXIKbmV3IGFkaWRhcyBsb2dvIGRlc2lnbgpvZmZpY2lhbCBpbGx1c3RyYXRpb24KbmV3IHlvcmsgaW4gdGhlIGZ1dHVyZQpwb2xpY2VtYW4gY2xvc2V1cApvY2VhbiBjbGlmZiB2aWV3Cm1hcGxlIHRyZWVzIGFsb25nIHN0cmVldApuZXkgbWF0b2dyb3NzbyB3aXRoIG1hbGljZQp0aWJldGFuIHNrZWxldG9uIGRhbmNlcgpkYXJrIHNoYWRvd3MgdW5kZXIgZXllcwpzdXBlcmhlcm8gbW92aWUKcGhvdG9yZWFsaXN0aWMgbG9nYW4gbW92aWUgc3RpbGwKbWF0ZXJuYWwgcGhvdG9ncmFwaHkgNCBrCmZvb2QgY29tbWVyY2lhbCA0IGsKZ2F1Z2VkIGVhcnMKYmVhdXRpZnVsIGRldGFpbGVkIGJvZHkgYW5kIGZhY2UKZ3Jhc3Mgc3BpcmFsIG1vdW50YWluIGxhbmRzY2FwZQpuaWdodCBvbiBhIHN1bW1lciBtaWFtaSBiZWFjaAphd2Ugc3VibGltZQpjcnlzdGFsIGNsZWFyIG5lb24gd2F0ZXIKbmlnaHQgd2l0aCBtb29uIGFuZCBjYW5kbGUKaW4gdGhlIGhpZ2ggZ3Jhc3MKZGlnaXRhbCBhcnQgI29uZXNob3RnYW1lCm5pbGFoCm5pbmV0ZWVudGggY2VudHVyeSBsb25kb24KbmluamEgd2Fycmlvcgpwb3JjaGUKbml0ZSAtIG93bApzb2Z0IHdoaXRlIGdsb3cKbm8gbWFucyBsYW5kCm5vIG1hbnMgc2t5IHNwYWNlc2hpcApub2JsZSBlbGYgbWFsZSBpbiBibGFjayByb2Jlcwpwb3AgYXJ0IHN1cnJlYWxpc20Kbm9pciBmaWxtIHdvcmxkIGNoYXJhY3RlciBkZXNpZ24Kc2t5IG1hZGUgb2YgY2VpbGluZyBwYW5lbHMKc3VwZXJub3ZhIGluc2lkZSBmYWNpbGl0eQpjdWJpYyBhbmQgcmlnaHQgYW5nbGVzCmN1YmUgcG9ydGFscwpub3J0aCBhZHVsdCBmZW1hbGUgd2Fycmlvcgpub3NmZXJhdHUgcHJpbmNlc3MKbm90IGEgc2luZ2xlIHRlYXIKbnVjbGVhciBleHBsb3Npb24gZnJvbSBzcGFjZQpmZXcgc3VuIHJheXMKYm9zdG9uIG1hc3NhY2h1c2V0dHMKc2hhbmdoYWkgY2l0eQpudWdnZXQgYW5kIHNhdXNhZ2Ugb24gcGxhdGUKbnVtZW5lcmEKbnVyZW1iZXJnCm51cnNpbmcKcmVhbGlzdGljIG9sZCBwaG90b2dyYXBoCnNlYW1sZXNzIHdvb2RlbiB0ZXh0dXJlCm9iYW1hIGtpc3NpbmcgZG9uYWxkIHRydW1wCm9iYW1hIHJpZGluZyBhbiB1bmljb3JuCmFjY3VyYXRlIHVsdHJhIHJlYWxpc3RpYyBmYWNlcwpvYmplY3QgY29uY2VwdCBhcnQKY29sb3IgMyA1IG1tCmdsb3cgaW4gZGFyawpvY2VhbiBzd2VsbHMKZG10IHdhdGVyCmVhcnRoIHRvbmUgY29sb3Igc2NoZW1lCnNhbmR5IHdoaXRlIG1vb24gbGFuZHNjYXBlCmYgMS4gMwpvY3RvYmVyZmVzdCBwb3N0ZXIKb2N0b3B1cyB3cmVzdGxpbmcgd2l0aCBhIHNwaGVyZQpvY2VhbiBkZXB0CmNyZWVweSBjdXRlIGNyZWF0dXJlcyBldmVyeXdoZXJlCnRvdGFsbHkgbWFkIGFuZCB5ZWxsaW5nCnNodXR0ZXIgc3BlZWQgaXMgOCAwCmNvbmNlcHQgZWNsZWN0aWMKZ2xvc3N5IGFuZCBkcmlwcHkKb2YgYSBzbmlwZXIgZ2lybCBpbiB3YXIKYXJpc3RvY3JhdCByb2JlCnlvdW5nIGJlYXV0aWZ1bCBhbW91cmFudGgKb2YgZXRoZXJlYWwgZmFudGFzeQpiamFya2UgaW5nZWxzCmZpZWxkIGRlcHRoCm1hbnkgc3RhcnMgaW4gc2t5CnN0YW5kaW5nIGJlc2lkZSBhIHNlYSBzaGVlcAptZWNoYW5pY2FsIGhlYXJ0IGluIGNlbnRlcgpyb3NzIHRyYW4gYW5kIHN0dWRpbyBnaGlibGkKMSA5IDYgMQpncmVnIHJ1dGtvd3NraSBhbmQgd2x1bQpwb3J0cmFpdCBvZiB3b21hbidzIGZhY2UKb3B0aWNhbCBjYXVzdGljcwp0aGVyZSBhcmUgZmxvd2VycwpiaWcgb2FrIHRyZWVzCndlYXJpbmcgcmVkIGZ1cgp3ZWFyaW5nIGxlYWYgY2xvYWsKd2VhcmluZyBodW50ZXIgY29hdAp3ZWFyaW5nIHdhciBwYWludAp3ZWFyaW5nIGludHJpY2F0ZSBmdXIgYXJtb3IKbWlzY2hpZXZvdXMgbG9vawpwaWxlcyBvZiBib25lcwpwZW9wbGUgd2F0Y2hpbmcgYXJvdW5kCmJsYWNrIGFuZCByZWQgamFja2V0CmluIHJvdWdoIHNlYXMgd2l0aCBsYXJnZSB3YXZlcwpkYXJrIGNsb3VkcyBhbmQgbGlnaHRuaW5nCnNlYSAtIGdyZWVuIGFuZCB3aGl0ZSBjbG90aGVzCndpcmVzIGFuZCBjb3JkcwpkcnVpZCBnb2RkZXNzCnNoaW5pbmcgY3J5c3RhbHMKdnIgZ29vZ2xlcwpvaWwgcGFpbnRpbmcgb2YgYnJlYWtmYXN0CndlYXJpbmcgd2hpdGUgcm9iZXMKd2FybSBjb2xvciBzY2hlbWUgYXJ0IHJlbmRpdGlvbgpob2xkaW5nIGdvbGQKYmVyZXRzCmZ1bmVyYWwgdmVpbApvaWwgcGFpbnRpbmcgb2YgcmVhbGlzdGljIHdvbWFuCmZvbGRzIG9mIGZhYnJpYwp0YWJsZWNsb3RoCmNpbmVtYXRpYyBibHVlIGxpZ2h0aW5nCmNhdmUgd2l0aCB3YXRlcmZhbGwKc25vdyBibGl6emFyZCBpbiB3b29kbGFuZCBtZWFkb3cKdW5kZXJncm91bmQgbGFrZQpiaW9sdW1pbmVzY2VudCBjeWJlciAtIGdhcmRlbgp3aWxsaWFtIGdvZGRhcmQgcG9zdGVyCm9sZCAtIHNjaG9vbCBkYXJrIGZhbnRhc3kgYXJ0Cm9sZCBhc2lhbiB2aWxsYWdlCnRlbnRhY2xlcyBhcm91bmQKdG9tbXkgZ3VuCnBhcGVyIGdyYWluCm9sZCBjaGFyaXNtYXRpYyBtZWNoYW5pYwpzY2FubmluZyBpdGVtcyB3aXRoIHNtYXJ0cGhvbmUKaG9sZCB1cCBzbWFydHBob25lCnNtYXJ0cGhvbmUgZGlzcGxheXMgcXIgY29kZQpoeXBlcnJlYWxpc3RpYyBkcmF3aW5nCmhlYXZ5IGdlc3R1cmUgc3R5bGUgY2xvc2V1cApiZWF0ZW4gdGVjaC4gbmVvIG5vaXIgc3R5bGUKamFwYW5lc2UgaG91c2UKc2hpbiBtZWdhbWkKcmVkIGR5ZWQgaGFpcgpvbGQgbWFnYXppbmUgY292ZXIgd2l0aG91dCB0ZXh0Cmdvb2dsZSBpbWFnZXMgc2VhcmNoIHJlc3VsdApzY3JhdGNoeQpkaWFibG8gZGlnaXRhbCBjb25jZXB0IGFydApjYW4KbGVhdmUKbWlzcyBhbmllbGEKZ2VtbXkgd291ZCAtIGJpbmVuZGlqawpvbGQgcGhvdG8gb2YgYSBjcmVlcHkgbGFuZHNjYXBlCmZpc2hleWUgNApoaWVyb2dseXBocyBvbiB3YWxsCmxhdGUgMSA5IDYgMCdzCm9sZCBzY2llbnRpZmljIGRvY3VtZW50cwpvbGQgd2V0cGxhdGUgZGFndWVycmVvdHlwZQprZXR0bGUKb25lIG9iamVjdCBjb250ZW50Cm9sZ2EgYnV6b3ZhCmZlbWFsZXYgYmVhdXR5Cm5vcm1hbCBwaHlzaXF1ZQphcnQgZGVjbyBpbnRyaWNhdGUgcmlwcGxlcwpvbHltcGljIGRpdmluZyBzcHJpbmdvYXJkCmNyeWluZyBxdWVlbiBvZiBmZWF0aGVycwpmZXJhbCBsYW5ndWlkIGVtbWEgcm9iZXJ0cwp3aGl0ZSBsb25nIGhhaXIhIQpvbW5pIG1hbiB2cyBpbnZpbmNpYmxlCm9uIGEgZGFyayBkZXNlcnQgaGlnaHdheQpvbiBhIGRhcmsgd2ludGVyJ3MgZGF5CnZpbnRhZ2Ugc2NpZmkgcG9zdGVyCmZvcndhcmQgbGlnaHRpbmcKbmVhcmx5IG5hcHBpbmcKc3VkZGVubHkgdGhlcmUgY2FtZSBhIHRhcHBpbmcKb25lIC0gZXllZCBtb25zdGVyCm9uZSBibG9uZGUKb25lIGRvZwoyIGQgY2FydG9vbgpicmlnaXR0ZQphY3R1YWwgcGhvdG8KZHluYW1pYyBibHVlIHNreQpvbmUgcmluZyB0byBydWxlIHRoZW0gYWxsCm9uZSBzYW5kd2ljaCB3aXRoIGZyaWVkIHRvZnUKb25lIHRvbWF0byBzbGljZQpvdmVyY2FzdCBjb2xvciBzY2hlbWUKZnVsbC1mYWNlIHBvcnRyYWl0CmVsYXRlZCBnYXVudCBvbmlvbiBoZWFkCm9ubHkgcmVkIGNvbG91cgpjcm93ZCBjaGVlcnMgaGltCnJvbWUgaW4gYmFja2dyb3VuZAptZWRpZXZhbCBkZW1vbnMKc2F5IGFoaApvcGVuIHBvcnRhbCB0byBhbm90aGVyIGRpbWVuc2lvbgp0cmFuc2x1Y2VudCBlZ2dzCm9wZXJhdGlvbgpyb3NldHRpIGFuZCBtb25ldAppbnRyaWNhdGUgZWxlY3Ryb25pY3MKYXdhcmQgd2lubmluZyBjaW5lbWF0aWMgc3RpbGwKb3JjaGlkIG1hZGUgb2YgbW90aGVyIG9mIHBlYXJsCm9yZ2FuaWMgdGV4dHVyZQpyYW5kb20gY2lyY3VsYXIgcGxhdGZvcm1zCnJhaW5pbmcgZ2xhc3Mgc2hhcmRzCm9yaWFubmEKbWluaW1hbGlzdCBsb2dvIHZlY3RvciBhcnQKYXJ0IG5vdXZlYXUgaGllcm9nbHlwaGljcwpyaXNpbmcgZnJvbSBtb3VudGFpbiByYW5nZQpzdGFtcGVyaWEKZ3JhcGhpYyA0IDUKb3JuYXRlIGRpbmluZyBoYWxsCmJvbmUgamV3ZWxsZXJ5CnNvZnQgbGlnaHQgbWlzdHkKZXNwb28Kc3dpcmxpbmcgZ2FsYXhpZXMKb3V0bGl2ZSBzdHJlZXR3ZWFyIGNvbGxlY3Rpb24KYnJpZ2h0IGNvbG9yZnVsIGNvbG9ycwpzdHJlZXRzIG9mIHNhbHZhZG9yCm92ZXJhbGwgYXJjaGl0ZWN0dXJhbCBkZXNpZ24Kb3Zlcmdyb3duIGNhdmUKaW4gc3R5bGUgb2Ygc2ltcGxpZmllZCByZWFsaXNtCnN0b3JlZnJvbnRzCmJyb2NraG9sZXMKdHdpc3RlZCBpdnkgdmluZXMKcm9vZmluZyB0aWxlcyB0ZXh0dXJlCnBob3RvIDNkCm92ZXJoZWFkIGJpcmRzZXllIHZpZXcKc2F3cwpzd2F5aW5nIHRyZWVzCnJpcHBsaW5nIHRyZWVzCndhcm0gaW50ZXJpb3JzCmNvbGQgc25vdyBvdXRzaWRlCmZpcmUgcGxhY2Ugcm9hcmluZwpiZWFyIHJ1ZwphcnQgb24gd2FsbHMKcHN5Y2hlZGVsaWMgZmxvd2luZyBoYWlyCnVuZGVhZCBza2VsZXRvbiBraW5nCmVsaXRlcwpiZWF1dGlmdWxseSBkaXRoZXJlZCBncmFkaWVudHMKb3ZlcndhdGNoIHRyYWNlciBpbiBhIGJpa2luaQpvd2wgcHJpbmNlc3Mgd2l0aCBjcm93bgpzdHlsZSBvZiBlbW9qaQpvbiB0cmVlcwpvbiBncm91bmQKb2xkIHBhcmNobWVudAp3aXRoIGlsbHVzdHJhdGlvbnMgYW5kIGRpYWdyYW1zCmdyZWVuIHRlYQpzaGVyYmVydCBza3kKZ2xvd2luZyByYWluYm93IG5lb24gaW5rCmJsdWUgbGVhdGhlciBhcm1vcgppY2UgYXJyb3dzCnBhaW50ZWQgdG93ZXIgb2YgdGhlIG1vb24KaG9sZGluZyBwYWludGJydXNoZXMKZ2lhbnQgZXllcyBpbiB0aGUgZ3Jhc3MKYXJvbiB3aWVzZW5mZWxkIGRhcmsgZmFudGFzeQpwYWludGluZyBhbHBob25zZSBtdWNoYQpsaWdodCB3aW5kCmpvaG4gbG9uZ3N0YWZmCnNub3cgd2FzdGVsYW5kCndoaXRlIG1hY2hpbmVyeQpleHRyZW1lIHJhZ2UKcGVha2VkIHdvb2RlbiByb29mcwp3aGVyZSB0aGUgYXNoIGdhdGhlcmVkCmh1Z2UgZ2lhbnQgb2xkIHJ1aW5zCnNraW5ueSBnaXJsIGluIHdoaXRlIGJvaG8gZHJlc3MKc2VhIHN0b3JtIGFuZCBiaWcgd2F2ZXMgY2xpZmZzCnN1bW1lciBzaWJlcmlhbiBmb3Jlc3QgdGFpZ2EKdmlldyBmcm9tIGFib3ZlIGZyb20gcGxhbmUKd2VsbCBkZWNvcmF0ZWQKdGhlYXRyZSBlcXVpcG1lbnQKYSBjb25maWRlbnQgc21pbGUKY2F0IG1hc3RlcnBpZWNlCmluIGEgcGFpbnRpbmcgb2YgYSBjYXQKNCBrIGNpbmVtYXRpYyBlcGljCnJ1aW5lZCBnYXMgc3RhdGlvbiBhbmQgY2FycwpyYXBoYWVsaXRlcwpibG9ja2J1c3RlciBnaG9zdGJ1c3RlcnMgbW92aWUKd2VhcmluZyBhIHBpbmsgaG9vZGllCnBhaW50aW5nIG9mIGEgaHVtbWluZ2JpcmQKd2VhcmluZyBiZWF1dGlmdWwgY2xvdGhlcwpiYWtlZCBiZWFuIHNraW4gdGV4dHVyZQphbmltZSBiYWNrZ3JvdW5kIGtleSB2aXN1YWwKb3RoZXIgYmVkcm9vbXMgY2FuIGJlIHNlZW4KYmFsZCB3aXRoIHNob3J0IGJlYXJkCnllbGxvdyByb3NlCnBhaW50aW5nIG9mIGJlYXV0aWZ1bAphZGFtIGRyaXZlciBiZWhpbmQKc2FndWFybyBjYWN0aQpzY2VuZSBpbnNpZGUgZm9yZXN0CnRhcHMgd2l0aCBydW5uaW5nIHdhdGVyCmZ1ciBob29kCmJhcnJlbiBzYW5kcwpjYW1lbCBzdGF0dWUKcGFpbnRpbmcgb2YgbGFuZHNjYXBlIG9mIGZhcm9lCmluIHRyaWFuZ3VsYXIgZm9ybWF0aW9uCnZpZXcgZnJvbSBzbGlnaHRseSBhYm92ZQpwYWludGluZyBvZiBtb25hIGxpc2EKc2FuZG1hbiBlbmRsZXNzCmRpbSBzdHJlZXQgbGlnaHRzCnBhaW50aW5nIG9mIHNhbWFya2FuZApzZWEgdHVydGxlcwpjb3p5IGFlc3RoZXRpYwpwYWludGluZyBvZiB3aGl0ZSBodW1hbiBmaWd1cmVzCmhhdW50ZWQgZ3JhdmVzdG9uZXMKZXhwbG9pdGVkCnN0b25lIHBhdGhzCnBhbGUgd29tYW4gY292ZXJlZCB3aXRoIGJsb29kCnBhbGUgd29tYW4KbmlnaHRjbHViIGJhY2tncm91bmQKcGFscyBoYXZlIGEgYmlydGhkYXkgcGFydHkKd2VhcmluZyBidWxsZXQtcmlkZGxlZCBhcm1vcgpkZXRhaWxlZCB3aXRoIHNoYWRvd3MKY29tYmF0IGdvb2dsZXMKcGFub3JhbWljIHdpZGVzY3JlZW4gdmlldwpwYXBhIGxlZ2JhCjM1bW0gZmlsbSBjYW1lcmEKcGFwZXIgY3VwCmFmdGVyIHJhaW4gYW5kIG5vIGdpcmxzCndoaXRlIGJlYWNoZXMKdGhlIG1vdGhlciBvZiBhIG1pbGxpb25zIHNvdW5kcwpkaXN0aW5jdGl2ZSBmZWF0dXJlcwpwb2xhcm9pZCBjb2xvdXIgZmFkZWQKcGF0aCBpbnRvIGx1c2ggZm9yZXN0CmFtZXJpY2FuIHNjaG9vbAp3b21hbiBhbmQgcm9ib3QKcGF0dGVybiBhcnQKZGFyayBtYXR0ZQpwYXVsIGF0cmVpZGVzIGFzIGVtcGVyb3Igb2YgZHVuZQpwZWFjZWZ1bCBiZWF1dGlmdWwgd2F0ZXJmYWxsCnBlYWNlZnVsIGVsdmVuIGZvcmVzdApwZWFjZWZ1bCBsdXNoaW91cyBmb3Jlc3QKNyAwIHMgYXJ0IGRlY28KcGVhc2VudApwZWVwbyB0aGUgZnJvZyEhIQpjeWJlcm5ldGljIGZ1dHVyZSBwZXJmZWN0CmNoaW5lc2Ugc3VycmVhbGlzbQpwZW5jaWwgZHJhd2luZyBvZiBta2JoZApnbG93aW5nIHBvb2xzIG9mIGxhdmEKYmVlcGxlIGRhaWx5IGFydApmYW4gaG8gcGhvdG9ncmFwaHkKcGVvcGxlIGxvb2tpbmcgYXQgYSBob3VzZQpiaXRjb2luIGV2aWwKanVuZ2xlcyBpbiB0aGUgYmFja2dyb3VuZApwZXBlIHRoZSBmcm9nIHNub3dib2FyZGluZwpwZXBlIHRoZSBtaW5lcgpwZXJjZXB0dWFsIGRlY291cGxpbmcKcGVyZmVjdCBhbmltZSBjeWJvcmcgd29tYW4Kb2lsIGRlcmVrcyBvbiBob3Jpem9uCmNlbnRyYWwgY2FsaWZvcm5pYQpjaGFybGl6ZQpha2FzdWtpIHZvaWRzdGFyCnBlcmZlY3Qgd29ybGQKdGhlIHBlcmZlY3QgaHVtYW4gbWFsZSBzcGVjaW1lbgpoaWdoIGRlZmluaXRpb24gdGV4dHVyZXMKbWV0aWN1bG91cyBkZXRhaWxzCnNsaW15IHB1cyBvb3ppbmcgc3BlY3VsYXIKaW50cmljYXRlIGFic3RyYWN0IHVwcGVyIGJvZHkKdW5yZWFsIGVuZ2luZSA7IHJvbWFudGljIHRoZW1lCnNwaWRlciAtIGd3ZW4KaW4gYSBidXNpbmVzcyBzdWl0CmxpZ2h0IGZhbGxpbmcgb24gZmFjZQpyb21hbnRpYyBzaW1wbGUgcGF0aCB0cmFjZWQKYmlnIHNwYXRpb3VzIHJvb20KZnJlbmNoIGRvb3Igd2luZG93CmFuYW1vcnBoIGxlbnNlcwplbGFpbmUKcGVyc29uaWZpY2F0aW9uIG9mIG1hcmlqdWFuYQpoZCBwaG90b3JlYWxpc20KcGV0aXRlIGdpcmwKcGV0cmkgZGlzaCBhcnQuIGFuaW1hbCBleWVzCnRyaWFuZ2xlIHRvIHVzZSBzcGVsbApmcm9udCBtaXNzaW9uCnZlcnkgbHVtaW5vdXMgZGVzaWduCnBoaWxvc29waGVyIGFsdmluIHBsYW50aW5nYQpwaG9lbml4IHdhcnJpb3IKcGhvbmUgd2VhcmluZyBhIGNvd2JveSBoYXQKamFwYW5lc2UgZHJpZnQgY2FyCmJhY2tncm91bmQgKCBkYXJrIF8gc21va2UgKQp2ZXJ5IGludHJpY2F0ZSBwaG90b3JlYWxpc3RpYwpwaG90byBmcm9tIHRoZSAxODUwcyBvZiBhIGZhcm1lcgppbnNpZGUgYSBtYXNzaXZlIGRhcmsgY2F2ZQpha2lyYSBtb3RvCnNwYWNlc2hpcCBmYXIgb24gdGhlIGJhY2tncm91bmQKZHNsciBkZXB0aCBvZiBmaWVsZApyaWRpY3Vsb3VzbHkgaGFuZHNvbWUKYmVsbHkgYnV0dG9uIHNob3dpbmcKdWdseSBhcHBlYXJhbmNlCnN0YWluIGdsYXNzCnBob3RvIG9mIGEgYmlnIHRoZWF0ZXJzdGFnZQpmYWtlIHdpbmRvd3MKZXZlcnl0aGluZyBpbiBhIGJlYXV0aWZ1bCBsaWdodApzdHlsaXNobHkgZGVzaWduZWQgYmFja2dyb3VuZApwaG90byBvZiBhIGNyYXp5IHdhc3AKd2FycGVkIHJlYWxpdHkKZGFyayBicm93biBleWVzIGFuZCBleWVsYXNoZXMKZnVsbCBib2R5IHNob3QgaW4gYmlraW5pCmF3YXJkLXdpbm5pbmcgbWFnYXppbmUgcGhvdG8Kd2FyaGFtbWVyIG1vZGVsCmd1YXJkaWFuIG9mIHRoZSBob2x5IGxha2UKZm9nIHZvbHVtZQpjeWJlcnB1bmsgY2l0eSBiYWNrZ2VvdW5kCndhdnkgYmVhdXRpZnVsIGhhaXIKZmFyIGF3YXkgZHJlYW15IGF0bW9zcGhlcmUKb29tcGEgbG9vbXBhIHZpcnVzCndpbGx5IHdvbmthIHBhbmRlbWljCmV4YWdnZXJhdGVkIGRldGFpbHMKcHVycGxlIHR1YmVzCnBhaW50ZWQgb24gYSBicmljayB3YWxsCnRyZW5kaW5nIG9uIGNnaXNvY2lldHkKcm9ja3kgZm9yZWdyb3VuZApwb2xhcm9pZCA2IDAgMCBmaWxtCndhcmZyYW1lIGFybW9yISEKdmlsbGFnZSBmYXIgYXdheQpoaWdoIHJlc29sdXRpb24gbGlnaHRuaW5nCmJ1bm55cHVuawp3aXRoIHN5bW1ldHJpY2FsIGhlYWQgYW5kIGV5ZXMKcm9ja2V0IGxlYWd1ZSB0YW5rCmZ1ciB3aXRoIG11ZAptdWRkeSBmdXIKdGFuc3BhcmVudCB3YXRlcgpyZWR1Y2VkIHZpc2liaWxpdHkKcGhvdG8gb2YgYmFyYWNrIG9iYW1hCmxhcmdlIGdsb3dpbmcgbW9vbgp3ZWVwaW5nIHdpbGxvd3MgYW5kIGZsb3dlcnMKaGlnaCBkeW5hbWljIHJhbmdlIGNvbG9yCnBob3RvIG9mIGN0aHVsaHUKMiA1IHllYXIgb2xkCmJyb256ZSEhIChlb3MgNWRzIHIKbWFyYmxlISEgKGVvcyA1ZHMgcgpwaG90byBvZiBmdXR1cmlzdGljIGNpdHlzY2FwZQp0cmVuZGluZyBvbiBtZW50YWxyYXkKdHYgcHJvZ3JhbQpzYnQKcGhvdG8gb2YgcGVuZWxvcGUgY3J1egpjcmV3c29uIHBob3RvZ3JhcGh5CnBob3RvIG9mIHJlYWwgbGlmZSBwb2tlbW9ucwpsYXZpc2ggcm9jb2NvIGJhcm9xdWUgc2V0dGluZwpncmF2ZXNpZGUKdHdvIGNydXRjaGVzIG5lYXIgYmVuY2gKa29kYWsgcGhvdG8KbW9vZHkgZGltIGxpZ2h0aW5nCmJydXRhbCBqb3lmdWwgZmFjZSBleHByZXNzaW9uCnRvcmNoZXMgYWxpdCBpbiB0aGUgYmFja2dyb3VuZApibHVlIGFjY2VudCBsaWdodGluZwpmYW1vdXMgd2FyIGNyaW1pbmFsCndpdGggYmxhY2sKbWlkIC0gbGVuZ3RoIGhhaXIKeWVsbG93IHVuZXZlbiB0ZWV0aAp2ZXJ5IHNvZnQgZGlmZnVzZXMgbGlnaHRzCnBlcmZlY3QgY2luZW1hdGljIGxpZ2h0CnBob3RvIHJlYWxpc3RpYyBwb3J0cmFpdApwb3NpbmcgaW4gYmVkCjggNSBtbSBmIDEuIDggbiAtIDkKYXJjaGl0ZWN0dXJhbGRpZ2VzdCBsaXZpbmcgcm9vbQpraWVyYSBrbmlnaHRsZXkKZ2xvd2luZyBtYWdpYwplbW1hIHdhdHNvbiBzaXR0aW5nIGluIGNoYWlyCnNjdWxwdHVyZSBvbiBkaXNwbGF5CmhlbGxpc2ghISEKYmxhY2sgaGVhdnkgZXllbGluZXIKY2hld2luZyB0b2JhY2NvCnNhbG1hIGhheWVrIGluIGEgaGkgdmlzIHZlc3QKbW9kZXJuIGNpdHkgc3RyZWV0CnRocmVlIGhhaXJ5IGZhdCBjYXZlIHBlb3BsZQpvdmVyY2FzdCEhIQooc21va2UpCnZpYmluZyB0byBtdXNpYwpwaG90b2dyYXBoIG9mIHNhbiBmcmFuY2lzY28Kc2hvcnQgZGFyayBibG9uZCBiZWFyZApsYW50ZXJuIGZseQp0b3JvbnRvIGNpdHkKY2Fub24gZW9zIHI3IDIwMDYKc2xpY2sgZGVzaWduCnRvdXJpc3RzIGluIGJhY2tncm91bmQKcXVhbnR1bSBwcm9jZXNzb3IKcGhvdG9ncmFwaCBvZiBhIHNsZWV2ZSB0YXR0b28KbG9uZyBsYXNoZXMKcGhvdG9ncmFwaCBvZiBjaHJpc3RvcGhlciB3YWxrZW4KZGFyayBmaWd1cmluZ3MKMSBnbG93aW5nIGJyaWRnZSBjcm9zc2luZyByaXZlcgpjbG91ZHkgbmlnaHQgc2t5CnRha2VuIG9uIDE5NzBzIGtvZGFrIGNhbWVyYQphbiBhbmNpZW50IGdyZWVrIHRyaXJlbWUKcGV0ZXIgc2luZ2hvZgpwb3JzY2hlIHJzcgppcm9jCnBob3RvZ3JhcGhpYyBpc29tZXRyaWMgY2F0aGVkcmFsCndoaXRlIGlyaXNlcyBhbmQgZGFyayBleWUgbWFrZXVwCmhvbGRpbmcgZ3VuIGRvd24KYWxlbmEgYWVuYW1pIGFuZCBsaWxpYSBhbHZhcmFkbwp3ZWFyaW5nIGZhc2hpb24gY2xvdGhpbmcKbWl0b3NlCm9ybmFtZW50IGNyb3duCm9yZ2FuaWMgY3J5c3RhbHMKcGhvdG9ncmFwaHkgb2YgZW5jaGFudGVkIGZvcmVzdApkc2xyIGZhbnRhc3kKcGhvdG9ncmF2dXJlCmJlbmRpbmcgcG9zZXMKcG9ydHJhaXQgb2YgYm9qYWNrIGhvcnNlbWFuCmNvbG91cnMgcmVkIGFuZCBncmVlbgptdWx0aWNvbG9ycy4gYmVrc2luc2tpCmJlYXV0aWZ1bGwgZXllcwp3aW5kIGJsb3duIGhhaXIKcGhvdG9yZWFsaXN0aWMgaHVtYW4gZ29rdQpnb2t1IGFzIGFuIGFzaWFuIG1hbgpvcmFuZ2UgZ2kKaHVtYW4gZ29rdQoyMDBtbSBwcmltZSBsZW5zCm9ybmF0ZSBwYWludGluZwpncmVlbiBjb3JkdXJveSBwYW50cwpiYWNrZ3JvdW5kIGhvZ3dhcnRzCmN5YmVycHVuayBkeWVkIGhhaXJjdXQKd2VhcmluZyBhIGJhZ2d5IHBhamFtYXMKcGhvdG9yZWFsaXN0aWMgcG9ydHJhaXQgb2YgYmpvcmsKcmV0cm8gNiAwIHMgZmFzaGlvbgpzdGlsbCBwaG90byBvZiBqYW1lcyBib25kCnBob3RvcmVhbGlzdGljIHJvb20KZGlmZnVzaW9uIGxpZ2h0CmV4dHJlbWVseSBjbG9zZSBzaG90CnRleHR1cmVkIGRldGFpbGVkIHNrZWxldG9uCmRldGFpbGVkIOKAk24gOQpwaWNoYWN1IGNvb2tzIGEgc3F1aWQKcGlja2xlIHJpY2sgZnJvbSByaWNrIGFuZCBtb3J0eQp3ZWxsIGRvbmUgcGljdHVyZSBoaWdoIHF1YWxpdHkKcGljdHVyZSBpbnNpZGUgY292ZW5zIGRlbgpwaWN0dXJlIG9mIGFuIGludGVyaW9yIGxvZnQKc3RlYW1wdW5rIHRlY2gKZmVycmVkIC0gdGhlbWVkIHJvYmVzIGFuZCBoYXQKZ3JheXNjYWxlIG1vbm9jaHJvbWF0aWMKZnVsbCBib2R5IDhrCmZ1dHVyaXN0IHN0eWxlCnBpa2FjaHUgb24gYWNpZApwaW5rIGxhbWJvcmdoaW5pIGF2ZW50YWRvcgpjYXJ0b29uaXNoIHZlY3RvciBzdHlsZQp5b3VyIG5hbWUgbW92aWUgc3R5bGUKcGluayBhbmdyeSBidWJibGUKcGluayBhc3BhcmFndXMKcGluayBheG9sb3RsIGluIGEgYnVja2V0CnVuZGVyIGJsdWUgY2xvdWRzCnBpbmsgYW5kIHRlYWwgY29sb3IgcGFsZXR0ZQp3YXRlciBjdWFzdGljcwpwaW5vY2NoaW8KcGlwZSBvcmdhbiBhbGJ1bSBhcnQKbGlnaHQgZ3JvdW5kIGZvZwpjZCBjb3ZlciBhcnR3b3JrCnBpcmFuZXNpJ3MgY2hhbWJlcgpwaXhhciAzZCByZW5kZXIKKGZyZW5jaCBiYW5kZSBkZXNzaW7DqWUpCm5lb24gdHViZSBqZXdlbHJ5CnBpeGFyIGNhcnMgaW4gbWFkIG1heCBmdXJ5IHJvYWQKd2FyIGJveXMKc21lbHRpbmcgcGl0J2JlZXBsZQpmbHlpbmcgaW4gc2t5CmJsYWNrIGZlZG9yYQpnb2xkZW4gcmF0aW8gamV3ZWxyeSBsaWdodHMKcGl4ZWwgYXJ0IGRpbm9zYXVyCmVwaWMgY29tcGlzaXRpb24KaHVtYW4gYW5hdG9teSBmZWF0dXJlcwpjYXN0aW5nIGEgbXVsdGkgY29sb3JlZCBzcGVsbApiYXR0bGUgYWN0aW9uCnBsYW5ldGFyeSBjaXR5CnBsYW5ldHMgY29sbGlkaW5nCmRldGFpbGVkIGN5YmVycHVuayBpbGx1c3RyYXRpb24KbmF6Z3VsIG1hbmRlbGJ1bGIKcGxheWluZyBwb2tlciBpbiBhIHNhbG9vbgpwbGVzaW9zYXVyCjEgOSA2IDAgcyBhcnQKbmVvIC0gcmVuYWlzc2FuY2UKdGhlIG1pbGsgd2F5Cndvb2RlbiBwbGF0Zm9ybXMKcG9rZW1vbiBmaWdodGluZyBhdCB3b3JsZCB3YXIgMgpwb2tlbW9uIG1pbGl0YXJ5IGRyaWxsCnRyYWluaW5nCmFzaCBrZXRjaHVwCnJlYWxpc3RpYyBzaGFwZXMKcG9sYXJvaWQgY29sbGFnZQpibGVhY2hlZCBzdHJvbmcgbGlnaHRzCmh1bmRyZWRzIG9mIGNoYWlycyBhbmQgdGFibGVzCnRpbnkgZmFlcmllcwpwb25kIGxhbmRzY2FwZQptYWdpY2FsIGJvdGFuaWMKbG9uZyBiZWFjaCBiYWNrZ3JvdW5kCnBvcCBmaWd1cmUgb2YgbW9tIHdpdGggbG9uZwpyb21hbnRpYyBnb3duCmphcGFuZXNlIHJlbGF0ZWQgd2l0aCBmbG93ZXJzCnBvcnNjaGUgZ3QgMyBpbiBoYXdhaWkgY2l0eQpob2xsb3N5IHNpbW9uIGFuZCBkYSB2aW5jaQpsb25nIGhhaXIgYmx1ZSBjZW50cmVkCmxpY2tpbmcgdG9uZ3VlCnBvcnRhbCBnYW1lIDkgNCA0IDkgOSB2YWx2ZQpwb3J0YWwgdG8gdGhlIGV0aGVyZWFsIHJlYWxtCnBvcnRsYW5kIG9yZWdvbgpncmVlbiBleWVzIGZpbmUgZmFjZSBwcmV0dHkgZmFjZQpmaW5lIGRldGFpbHMuIGFuaW1lLiBza2lucwpwb3J0cmFpdCBhbmltZSBrYXlhIHNjb2RlbGFyaW8KZG9vbSBiZWF1dGlmdWwgZmFjZQpwb3J0cmFpdCBoYXBweSBjb2xvcnMKcG9ydHJhaXQgYW5kcm9neW5vdXMgZ2lybApoZWxtZXQgdmlzb3Igc21hc2hlZApvcm5hdGUgZ29sZCBjcm93bgphdCByYWNlciB0cmFjawpwb3J0cmFpdCBiZWF1dGlmdWwgc2NpIC0gZmkgZ2lybApwb3J0cmFpdCBiZW5kZXIgZnJvbSBmdXR1cmFtYQptYXR0IHdoaXRlIGNvbG9yIGFybW9yCmhpZ2ggc29jaWV0eQpjbGFzc2ljIGtpbW9ubwpwb3J0cmFpdCBidXN0IG9mIG9sZCB3b21hbgphcyB3ZWRuZXNkYXkgYWRkYW1zCmJlYXV0aWZ1bCBodWdlIGV5ZXMKY2xvdGhlZCBpbiBzY2ktZmkgbWlsaXRhcnkgYXJtb3IKZ3RhIHYgY292ZXIhIQpwb3J0cmFpdCBjbG9zZSB1cCBvZiBndXkKYXJldXoKcG9ydHJhaXQgZGVhdGggY2xvd24KcG9ydHJhaXQgZGVtb24gaGFsZiBodW1hbgpydXNzaWFuIGFjYWRlbWljaXNtCmdyZWVuIGFjY2VudCBsaWdodGluZwpyZWdlbmN5LWVyYQpnZW9yZ2lhbiBkcmVzcyBhbWF6aW5nIGZhYnJpYwp0cnVlLXRvLWxpZmUKZmxvd2luZyByZWFsaXN0aWMgZmFicmljCmNhcmFjdGVyIHdpdGggYnJvd24gaGF0CnBvcnRyYWl0IGZlbm5lYyBmb3ggYW5pbWFsCmRhcmsgdm9sY2FubyBiYWNrZ3JvdW5kCmJhY2tncm91bmQgMTk3MHMgb2ZmaWNlCnBvcnRyYWl0IGZ1dHVyaXN0aWMgc29saWRlciBnaXJsCnBvcnRyYWl0IGdpcmwKZHJhcGVkIHdpdGggcmVkIGh5YmlzY3VzCm1hdHRlIHBhaW50aW5nIG9mIHN0ZWFtIG1hY2hpbmVzCmFpcnNoaXBzIG9uIGJhY2tncm91bmQKZXlhcmR0Cm1vc3N5IGhlYWQKcG9ydHJhaXQga25pZ2h0IGZlbWFsZQooYmVhdXRpZnVsIGV5ZXMpCnR3byBtYWxlCndlYXJpbmcgc2hpcnRzCm9kc3QKYnJvd24gaGF0CnZlcnkgbG9uZyBzaWx2ZXIgaGFpcgp2ZXJ5IGxvbmcgc2lsdmVyIGJlYXJkCnBvcnRyYWl0IG9mIGFubmFzb3BoaWEgcm9iYgpkaWdpdGFsIHBhaW50aW5nIC0gbiA1CmxlYWd1ZSBvZiBsZWdlbmQgaWxsdXN0cmF0aW9uCnBvcnRyYWl0IG9mIGJlcm5pZSBzYW5kZXJzCnBvcnRyYWl0IG9mIGJlcnRyYW5kIHJ1c3NlbGwKZmFudGFzeSBkcmVzcwp3aGlybHdpbmQKbHVzaCBnYXJkZW4gc3BhY2VzaGlwCnBvcnRyYWl0IG9mIGRhbm55IGdvbnphbGV6CnBvcnRyYWl0IG9mIGVsbGUgZmFubmluZwpwb3J0cmFpdCBvZiBlbHNhIG9mIGFyZW5kZWxsZQp0aGUgcHJvcGhldCBvZiB0aGUgY29tbW9uIHBlb3BsZQpwb3Npbmcgb24gd2hlYXQgZmllbGQKYmxhY2stYW5kLXdoaXRlIHBob3RvZ3JhcGh5CnBvcnRyYWl0IG9mIGppbSBtb3JyaXNvbgpwb3J0cmFpdCBvZiBraW0gcGV0cmFzCnBvcnRyYWl0IG9mIGxhZHkgZ2FnYQpwb3J0cmFpdCBvZiBsdWZmeSBmcm9tIG9uZSBwaWVjZQpwb3J0cmFpdCBvZiBtw6lsZW5jaG9uCmFiYW5kb25lZCBydWlucyBsYW5kc2NhcGUKc2V0IG9uIGludGVyc3RlbGxhciBzcGFjZQpwb3J0cmFpdCBvZiBzYXVyb24KcmV0dXJuIG9mIHRoZSBraW5nLiBjaW5lbWF0aWMKcmVhbGlzdGljIGd1biBkZXNpZ24KcG9ydHJhaXQgb2YgdmlyZ2luIG1hcnkKcG9ydHJhaXQgb2Ygd2FyaW8gZnJvbSB3YXJpb3dhcmUKcG9ydHJhaXQgb2Ygd29uZGVyIHdvbWFuCmZyb20gc2x1bWRvZyBtaWxsaW9uYWlyZQpsb25nIGhhaXIgd2l0aCBwYXN0ZWwgY29sb3JzCnNuZWVyaW5nLiBjaW5lbWF0aWMgbGlnaHRpbmcKcm9tYW4gZ2xhZGlhdG9yCm9mIGEgb2xkIDE2dGggY2VudHVyeQpyb3lhbCBlbXBlcm9yCnNvbGRpZXIgb3V0Zml0CnBvcCBhbmQgdmlicmFudCBjb2xvcnMKeGt1bmcgd29yawpwb3J0cmFpdCBvZiBhIGFzdHJvbmF1dCBza2VsZXRvcgp3aXRjaHkgY2xvdGhpbmcKYWlyYnJ1c2hlZCBjbG91ZHMKa2V0ZSBidXRjaGVyCmxpZ2h0IGNyZWFtIGFuZCB3aGl0ZSBjb2xvcnMKY2EuIDIwMDEKYmVhY2ggcGljCnBvcnRyYWl0IG9mIGEgYmVhdXRpZnVsIGFuZ2VsCm5hdHVyYWwgc3RyYWlnaHQgZXllYnJvd3MKd2hpdGUgeGVub21vcnBoCmNhcnJ5aW5nIGEgcmlmbGUKd3JpbmtsZWQgYmlnIGNoZWVrcwpwb3J0cmFpdCBvZiBhIGJlYXV0aWZ1bCBnZWlzaGEKc25vdyBsYW5kc2NhcGUgYmFja2dyb3VuZApkcmVzc2VkIGluIGEgd2hpdGUgdC1zaGlydAotIGggOCA1IDAgLSB3IDYgMCAwCnNvZnQgYXV0dW1uIHN1bmxpZ2h0CmhlbGxpc2ggc2NlbmUKZmxvd2luZyBwaW5rIGhhaXIKY2Fub24gYTEKcG9ydHJhaXQgb2YgYSBiaWcKd2VhcmluZyBhIG5lb24gYmx1ZSBob29kaWUKZnVsbC1ib2R5LXNob3QKbW92aWUgaW1heCBzaG90CnBvcnRyYWl0IG9mIGEgYmxvb2Rib3JuZSBodW50ZXIKcnVuaWMgcmluZ3MKZXh0cmVtZWx5IHJlYWxpc3RpYyBhbmQgcmVhbApibG9uZGUgaGFpciBhbmQgYmx1ZSBleWVzCnJlYWwgZXllcyB0aGF0IGFyZSBkZXRhaWxlZAp1bnJlZmluZWQgc3BhcmtsaW5nIGdvbGQgbnVnZ2V0CnN5bW1ldHJpY2FsIGZhY2UgaWxsdXN0cmF0aW9uCnBzeWNoZWRlbGljIHN1cnJlYWwgYXJ0CnBvcnRyYWl0IG9mIGEgY29zbWljIGVudGl0eQp0cmF2ZWxsZXJzCmVtYnJvaWRlcmVkIGJyb2NhZGUgcm9iZXMKd2VsY29taW5nIGF0dGl0dWRlCndoaXRlIGZveCBlYXJzCndpdGggbG9uZyB0dXJxdW9pc2UgaGFpcgpyYXZlbiBtYXNrCnBvcnRyYWl0IG9mIGEgY3V0ZSBnaXJsCnBvcnRyYWl0IG9mIGEgY3V0ZSBtb25zdGVyCmZ1bGwgbW9vbiBpbiB0aGUgc2t5IG92ZXJoZWFkCnBvcnRyYWl0IG9mIGEgZGFyayBnb2RkZXNzCnBvcnRyYWl0IG9mIGEgZGV0ZWN0aXZlCndpdGggMyBkIHJlbmRlcgpwb3J0cmFpdCBvZiBhIGRvZwpwb3J0cmFpdCBvZiBhIGRyZWFtZXIKYmx1ZSAtIHBldGFscwptZWx0aW5nIGFuZCBkcmlwcGluZy4gZWVyaWUKbWFuZGVsYnJvdCBmcmFjdGFscwpwb3J0cmFpdCBvZiBhIGZlbWFsZSBkZW1vbgpwb3J0cmFpdCBvZiBhIGZlbWFsZSBlbGYgd2FybG9jawpuZW9pbXByZXNzaW9uaXN0CnBvcnRyYWl0IG9mIGEgZmVtYWxlIG1hZ2UKcG9ydHJhaXQgb2YgYSBmZW1hbGUgcmFuZ2VyCmhlIGdvdCBhIGJpZyBmcmVuY2ggbXVzY3RhY2hlCm1hZGUgZnJvbSBtZWNoYW5pY2FsIHBhcnRzCnNoZSBpcyBhYm91dCAxIDYgeWVhcnMgb2xkCnJlYWxpc3RpYyB3YXJzaGlwIGRlc2lnbgpibHVlIGFuZCBwaW5rIGhpZ2hsaWdodHMKcG9ydHJhaXQgb2YgYSBnb2Qgb2YgZGVhdGgKc3R5bGlzaCBkYXJrIGRyZXNzCnJlZCBjb250YWN0cwpwb3J0cmFpdCBvZiBhIGdyZXkgYWxpZW4KYmxhY2tlbmluZyBlZmZlY3QKcG9ydHJhaXQgb2YgYSBoYW5kc29tZQptYXJrIG1hbm4KcG9ydHJhaXQgb2YgYSBoaXBzdGVyIHNrZWxldG9yCnBvcnRyYWl0IG9mIGEgaHllbmEgZ2lybApqYW1haWNhbiBjb2xvcnMKZXhjZWxsZW50IHRleHR1cmVzCjggLSBiaXQgcGl4ZWwgYXJ0CmRlY29yYXRlZCB3aXRoIG9wZXJhIG1vdGlmcwptYWxlIGVtYWNpYXRlZApwb3J0cmFpdCBvZiBhIG1hbGUgcHVuawp3ZWFyaW5nIGJsYWNrIHNpdGggcm9iZXMKYXJhYmlhbiBmZWF0dXJlcwpwZXJmZWN0IG1pbGl0YXJ5IGNvbXBvc3VyZQpkaXN0cnVzdGZ1bCBhbmQgYXJyb2dhbnQKaGUgaXMhIGFib3V0IDMgMCB5ZWFycyBvbGQKaGUgaXMgYWJvdXQgNyAwIHllYXJzIG9sZApoZSBsb29rcyBsaWtlIHR5ZSBzaGVyaWRhbgpwcmlkZWZ1bApmcm9tIGFsaWVucyBmcmFuY2hpc2UKbG9va3MgbGlrZSBkb21obmFsbCBnbGVlc29uCmFycm9nYW50IGFuZCBzaW5pc3RlciBhdHRpdHVkZQpvbGQgYm91bnR5IGhhbnRlcgpoZSBpcyBhYm91dCA4IDAgeWVhcnMgb2xkCmZvcmtlZCBzbmFrZSB0b25ndWUgc3RpY2tpbmcgb3V0CmNyeWluZyBtYW55IHRlYXJzCmJsaW5kaW5nIHdoaXRlIGhhaXIKZHJlc3NlZCBpbiBhIGJsdWUgY2xvYWsKY2xvY2sgaWNvbm9ncmFwaHkKZHJlc3NlZCB3ZWxsCnN1aXQgYW5kIHdhaXN0Y29hdApsZWF0aGVyIHJvYmVzCnNvZnQgZmlsbWljIHRvbmVtYXBwaW5nCmZpbG1pYyB0b25lbWFwcGluZwooICggY3liZXJwdW5rICkgKQpwb3J0cmFpdCBvZiBhIG5hdnkgc2VhbCBzb2xkaWVyCnBvcnRyYWl0IG9mIGEgbm9yc2UgbW9vbiBnb2RkZXNzCnBvcnRyYWl0IG9mIGEgb2xkCnJlZ2FsIGRhcmsgYmx1ZSBjbG90aGVzCnBvcnRyYWl0IG9mIGEgcGluayBnYW5nCnBvcnRyYWl0IG9mIGEgcHJpZXN0ZXNzCnB1bmsgcm9jayBjbG90aGVzCnJvY2thYmlsbHkgaGFpcgppbiBzdHlsZSBvZiBsaXNhIGZyYW5rCnBvcnRyYWl0IG9mIGEgcmF0IG1hZCBzY2llbnRpc3QKcG9ydHJhaXQgb2YgYSBydWdnZWQgeW91bmcgbWFuCmludHJpY2FudCBkZXRhaWxzCnNhbHQgZWZmZWN0cwpwb3J0cmFpdCBvZiBhIHNjb3JwaW9uIGdvZGRlc3MKMy80IHZpZXcgcmVhbGlzdGljCmRpZmZ1c2Ugc3VubGlnaHQKdmVsdmV0IHdpdGggbGFjZSBnb3duCnNoYXJwZWQgbm9zZQpmcmVja2xlcyBvbiBjaGlja3MKZmxvcmFsIGZsb3dlcnMgY29sb3JmdWwKcmFpbmJvdyByZWZsZWN0aW9uCnBvcnRyYWl0IG9mIGEgc2xlbmRlciBlbHZlbiBtYW4KZHJlc3NlZCBpbiBtZWRpZXZhbCBjbG90aGVzCmFnYWluc3QgYSByZWQgY3VydGFpbgp6b290b3BpYSBtb3ZpZSBzdHlsZQpwb3J0cmFpdCBvZiBhIHNtaWxpbmcKaXQgaWRuJ3QgZ3JlYXN5CnBvcnRyYWl0IG9mIGEgc3BhY2UgY3lib3JnCnJlbmFpc3NhbmNlIGVyYSBjbG90aGluZwpwb3J0cmFpdCBvZiBhIHN0ZWFtcHVuayBpY2UgbGFkeQpwb3J0cmFpdCBvZiBhIHN0b3JtdHJvb3BlcgpkZWNvcmF0aXZlIGRhcmsgYmx1ZSBjbG90aGluZwp3ZXQgcGFpbnQKaGUgaXMgd2VhcmluZyBhIGJsYWNrCmhlYXZ5IC0gbGlkZGVkIGV5ZXMKbHVzaCB1bmtlbXB0IGJsYWNrIGhhaXIKaGlnaCBhcmNoZXMKYW5ndWxhciBhbmQgYWx0ZXJtb2Rlcm4KcmVkIHJvbmFsZCBtY2RvbmFsZCBtZXNzeSBoYWlyCmNocmlzdGlhbmlzbQpwb3J0cmFpdCBvZiBhIHZpY3RvcmlhbiBlcmEgZHVjCnBvcnRyYWl0IG9mIGEgdmljdG9yaWFuIGVyYSBkdWtlCnBvcnRyYWl0IG9mIGEgdmlnaWxhbnRlCnJvZ3VlIHRoaWVmCnBvcnRyYWl0IG9mIGEgd29sZgpzaGUgaXMgYWJvdXQgNCAwIHllYXJzIG9sZAppbGx1c3RyYXRpb24gaXJpZGVzY2VudAp3ZWFyaW5nIGEgYmxhY2sgYm9keXN1aXQKd2VhcmluZyBhIHBsYXN0aWMgYmx1ZSBkcmVzcwphZ2FpbnN0IGEgd2ludGVyIGdhcmRlbgpwb3J0cmFpdCBvZiBhIHdvbWFuJ3MgZmFjZQphZ2UgMiAwCnN0b25lIHdhbGwgaW4gYmFja2dyb3VuZAppbiBmcm9udCBvZiBhIHNjaSBmaSBjaXR5c2NhcGUKYmx1ZSBmaXJlIGV2ZXJ5d2hlcmUKaGVucnkgZGUgdG91bG91c2UgbGF1dHJlYwpvbmUgZXllIGNsb3NlZApzY2VuZSA6IHN1bmZsb3dlciBmaWVsZApjb2xvcnMgOiB5ZWxsb3cgc3VuZmxvd2Vycwpob2xkaW5nIGEgYmFndWV0dGUKbHVzY2lvdXMgd2l0aCBzZXNhbWUgc2VlZHMKbWFuZGVsYnVsYi4gYmxhY2sgYW5kIHdoaXRlCmFydC4gYXJ0IGRlY28KY2luZW1hdGljLiBhcnQgZGVjbwpkcmFtdGljIGxpdApwb3J0cmFpdCBvZiBhIHlvdW5nIGdpcmwKc3RyZWV0IHBpYwpzZWR1Y3RpdmUgc21pcmsKd2Fpc3QgbG9uZyBoYWlyCnJvZ3Vpc2ggc21pcmsKcG9ydHJhaXQgb2YgYSB5b3VuZyB0ZWVuYWdlIGdpcmwKYmxhY2sgZXllcGF0Y2gKcG9ydHJhaXQgb2YgYSB5b3VuZyB3aXRjaCBnaXJsCnBvcnRyYWl0IG9mIGFkYW0gamVuc2VuCmluc2lkZSBhIG1lc3N5IHJvb20KcmVkIGFuZCB5ZWxsb3cgY29sb3Igc2NoZW1lCnBvcnRyYWl0IG9mIGFoc29rYSB0YW5vCnNhdGFuaWMgYm9keQpoZWFkIG9mIG9sZCBtYW4KYW1iZXIgZ2xhc3Nlcwpjb3JhbCBzbmFrZXMgZ3JvdyBmcm9tIGhlciBoZWFkCmVwaWMgZWxkZXIgc2Nyb2xscyBhcnQKcG9ydHJhaXQgb2YgYW4gYWkgYXN0cm9uYXV0CmNyeXN0YWwgcnVmZgpwb3J0cmFpdCBvZiBhbiBhZHZlbnR1cmVyCnNleHkgbXVzY3VsYXIgYm9keQpwb3J0cmFpdCBvZiBhbiBhbnRocm8gZm94CmQgJiBkIHJvZ3VlCnN0YWxrIGV5ZXMKZWx2ZW4gY2hhcmFjdGVyIHdpdGggc21pcmsKcG9ydHJhaXQgb2YgYW4gZWx2ZW4gd2Fycmlvcgpwb3J0cmFpdCBvZiBhbiBvY3RvcHVzIGdvZGRlc3MKcG9ydHJhaXQgb2YgYW4gb3JrCnJ1bmljIHdvcmRzCmFuY2llbnQgZXZpbCBsZXR0ZXJzCnZpYnJhbnQgdGVhbCBhbmQgbWFyb29uIGhhaXIKcG9ydHJhaXQgb2YgYW5nZWxpbmEgam9saWUKcG93ZXJpbmcgdXAgYXVyYQpwb3J0cmFpdCBvZiBhbmltZSB3b21hbgpleHRyZW1lbHkgZGV0YWlsZWQgOCBrCmFuZ3J5IGxvb2tpbmcgYXQgY2FtZXJhCm11c2N1bGFyIGJvZHkgdGF0dG9vZWQKZHJ5IGJydXNoIGJhY2tncm91bmQgY29sb3JzCmJsb29kIHNwbGF0dGVyIGJhY2tncm91bmQKcmVkIGdyZWVuIGJsYWNrIHRlYWwKc3R1ZGlvIGdoaWJsaSBhbmQgZGFuIG11bWZvcmQKaGVhZCBhbmQgdXBwZXIgYm9keSBwb3J0cmFpdApwb3J0cmFpdCBvZiBiZWF1dGlmdWwgc2FtdXMgYXJhbgpnbG93eSBnb2xkIGV5ZXMKc21vb3RoIGhlYWx0aHkgc2tpbgp3b25kZXJmdWwgdGVjaG5vIHBhcnR5CmV1Z2VuZSBjYXJyaWVyZQpuZWNrIHVwCndpdGggZmFjaWFsIHRhdHRvbwptb3JlIGFuZCBtb3JlIGN5YmVycHVuawphcm55IGZyZXl0YWcKY3VybHkgYmFuZ3MgYW5kIHBvbnl0YWlsCnBvcnRyYWl0IG9mIGJleW9uY2UKc2FkIGdydW1weSBmYWNlCmhvb2sgYXMgcmluZwpwb3J0cmFpdCBvZiBibGFkZSBydW5uZXIgcmFjaGFlbApkcmFtYXRpYyByZW5kZXJpbmcKcG9ydHJhaXQgb2YgYm9iIG9kZW5raXJrCnBob3RvcmVhbCBlbGVnYW50CnBvcnRyYWl0IG9mIGNlbHRpYyBnb2RkZXNzIGRpYW5hCm1lY2hhbml6ZWQgcG9saWNlIGluZmFudHJ5CnNjb3V0IHBvbGljZSByb2JvdApjbG9ja3dvcmsgYXV0b21hdG9uCnBvcnRyYWl0IG9mIGNoaW1wYW56ZWUgaW4gc3BhY2UKd2VhcmluZyBhIHB1cnBsZSBjYXAKYmlnIGdvbGQgZXllcwpwb3J0cmFpdCBvZiBjaHVjayBjbGF5dG9uCnBvcnRyYWl0IG9mIGNpcmNlCndpZGUgbG93IGFuZ2xlCmNydWVsbGEgZGV2aWwKYXMgc2FtdXJhaQpwb3J0cmFpdCBvZiBjcmF6eSBwb3N0IG1hbG9uZQpvY3RhbmUgdW5yZWFsIGVuZ2luZSA1CnBvcnRyYWl0IG9mIGN1dGUgYW5pbWUgZ2lybApwb3J0cmFpdCBvZiBjdXRlIHBpbG90IGdpcmwKaG9sZGluZyBhIGNhY3R1cwpib2R5IGZ1bGwgZ2xvd2luZyB2YWN1dW0gdHViZXMKZ3JlZyBydXRrb3dza2kgcnVhbiBqaWEKcG9ydHJhaXQgb2YgY3lib3JnCnNoYXJwIGZvY3VzIG9uIHRoZSBmYWNlCmFuY2llbnQgcnVpbnMgYmFja2dyb3VuZApwb3J0cmFpdCBvZiBkZW1pIHJvc2UKYmxhY2sgaXJvbiB0aWFyYQpwb3J0cmFpdCBvZiBkb24ga25vdHRzCiggKCBleWUgZ2xhc3NlcyApICkKKCAoIGRhcmsgc2tpbiApICkKcG9ydHJhaXQgb2YgZHJpenp0IGRvJ3VyZGVuCmxvbmcgY3VybHkgZ3JlZW4gaGFpcgpza3VsbCBmYWNlIHBhaW50CnBvcnRyYWl0IG9mIGVtcGVyb3Igbm9ydG9uCnNldmVuIHNpbnMKY29sdApibGFjayBhbmQgZ29sZGVuIGFybW9yCmV2YSBncmVlbiBhbmQgZ2VtbWEgYXJ0ZXJ0b24KYXlhbmFtaWtvZG9uIGFuZCBpcmFrbGkgbmFkYXIKcGFuYXZpYSB0b3JuYWRvCnVzIGFpcmZvcmNlCnBvcnRyYWl0IG9mIGZpbiB3aWxkY2xvYWsKcG9ydHJhaXQgb2YgZm9yZXN0IGdvZwpnZW5lcmFsCmJhcnRvbG9tZSByb3MKanVhbiBqb3NlIHNlcnJhbm8Kc2h1dCBleWVzCnBvcnRyYWl0IG9mIGdlaXNoYQp2aXNpYmxlIG5lcnZvdXMgc3lzdGVtCmFydCBkZWNvIG91dHJ1biBhbmltZSBhZXN0aGVzdGljCmVsZWN0cmljIGJyYWluc3Rvcm0KbHV4dXJ5IGNvbmRvIGludGVyaW9yCnBvcnRyYWl0IG9mIGhlIC0gbWFuCnNpbmdsZSBiYW5nbGEgZmFybWVyIGZpZ2h0aW5nCnBvcnRyYWl0IG9mIGhlbnJ5IGNhdmlsbApvcmFuZ2UgaGFpciBib3cKcG9ydHJhaXQgb2YgaGlsZGVnYXJkIHZvbiBiaW5nZW4Kc3R5bGUgb2YgZGFudGUgZ2FicmllbCByb3NzZXR0aQpwYWxlIHRoaW4gbGlwcwpkaXZpbmUgcmF5IG92ZXIgaGVyIGhlYWQKYmx1ZSBmZWF0aGVycwpodW5nYXJpYW4gZmxhZyBpbiB0aGUgYmFja2dyb3VuZApkYW1vbiBzYWx2YXRvcmUKdHdvIGNvbG9yIGhhaXIKbG9va2luZyBpbnRvIGEgbXlzdGVyaW91cyBjYXZlCmJyb2FkIHNob3VsZGVyCnNpeCBwYWNrcwpwb3J0cmFpdCBvZiBqb3JkYW4gcGV0ZXJzb24KcG9ydHJhaXQgb2Yga3JhdG9zCjggZGV0YWlsZWQKcG9ydHJhaXQgb2YgbHVjaGEgbGlicmUgZGoKcG9ydHJhaXQgb2YgbWFjaSBob2xsb3dheQpsYXZlbmRlciBhbmQgcGluayBleWVzCnBvcnRyYWl0IG9mIG1hZ2ljYWwgeW91bmcgZ2lybAoxIDogMSBhc3BlY3QgcmF0aW8KcG9ydHJhaXQgb2YgbWFyayB6dWNrZXJiZXJnCnBvcnRyYWl0IG9mIG1lZ2FuIGZveCBhcyBkZW1vbgpwb3J0cmFpdCBvZiBtZXJtYWlkIHF1ZWVuCnBvcnRyYWl0IG9mIG1pY2hhZWwgamFja3NvbgppY2UgYW5kIGdsYWNpZXJzCnB1cnBsZSByb2JlIGFuZCB2ZWlsCnNtaWxpbmcgYXMgYSBxdWVlbiBvZiBmYWlyaWVzCm1yIGJlYW4gZmFjZQpvdmVyZmxvd2luZyB3aXRoIGJha2VkIGJlYW5zCmJlYW5zIGluIGhpcyBleWVzIHNvY2tldHMKbW91bnRhaW4gZm9yZXN0IGluIGJhY2tncm91bmQKYW50aHJvcG9tb3JwaGljIGNyYWIKc3Ryb25nIHBpeGFyIHdoZWF0IGJyZWFkIHdhcnJpb3IKdGhlIGJhY2tncm91bmQgaXMgYmxhY2sKcG9ydHJhaXQgb2Ygbmlrb2xhIHRlc2xhCnNoYXJwIGlsbHVzdHJhdGlvbgpwb3J0cmFpdCBvZiBvcnNvbiB3ZWxsZXMKcG9ydHJhaXQgb2YgcGFyaXMKbHVjaWFuIGZyZXVkIGFuZCBkcmV3IHN0cnV6YW4KcmVkIHNreSBiYWNrZ3JvdW5kCmxvbmcgdGllCnBvcnRyYWl0IG9mIHByaW5jZXNzIGxlaWEKeWVsbG93IHB1cnBsZSBncmVlbiBibGFjawpwb3J0cmFpdCBvZiBxdWV0emFsY29hdGwKZHJhY3VsYSBmYW5ncyEgaGF1bnRlZCBob3VzZQpkYW5jaW5nIGFyb3VuZCBhIGZpcmUKaW4gcmF5cyBvZiBzdW5saWdodAptZWFuIHNtaXJrCnZlcnkgdWdseSBmYWNlCnBvcnRyYWl0IG9mIHJpY2t5IGdlcnZhaXMKcG9ydHJhaXQgb2YgcnV0Z2VyIGhhdWVyCnBlcmRpdGEgd2Vla3MhCnJnYiBzaGlmdApwcmlzb24ganVtcHN1aXQKcG9ydHJhaXQgb2Ygc2FkYWtvIG9mIHRoZSByaW5nCnBvcnRyYWl0IG9mIHNhbm5hIG1hcmluCm1hc3RlcnBpZWNlIHRpbnR5cGUKbGF3eWVyIGNsb3RoaW5nCmRyYW1hdGljIGVudHJ5CnBvcnRyYWl0IG9mIHNoZXJseW4gY2hvcHJhCmRlYXRobHkgc2tpbgpwb3J0cmFpdCBvZiBzbm93IHdoaXRlCnBvcnRyYWl0IG9mIHNvbmljIHRoZSBoZWRnZWhvZwphbmFsb2dpYyBmbGlnaHQgY29udHJvbHMKaXJvbiBoZWxtIG1heGltYWxpc3QKc3Bpa2VkIHNjcmFwIG1ldGFsIGFybW9yCmN1cmx5IGNvcHBlciBjb2xvcmVkIGhhaXIKYmxhY2sgdGVlbmFnZSBib3kKc2xpZ2h0bHkgZGVmaW5lZCBqYXdsaW5lCnN1YnRsZSBhd2t3YXJkIHNtaWxlCmdyZXkgY29udGFjdHMKbGlnaHQgZ3JleSBjcm93bgpjcm93biB3aXRoIHBpbnMKc3ltbWV0cmljYWwgY3Jvd24Kc2xpZ2h0IGZyaWVuZGx5IHNtaWxlCnBvcnRyYWl0IG9mIHRoYW5jcmVkCnJ5dWljaGkgc2FrYW1vdG8KY29sb3JmdWwgaXJpZGVzY2VudCBhbmQgcGxheWZ1bApmcmF6ZXR0YSBhbmQgdmFsbGVqbwpwb3J0cmFpdCBvZiB0aGUgZ29kIG9mIGRlYXRoCnBvcnRyYWl0IG9mIHRoZSBob2x5IGZhdGhlcgpkaXNuZXkgYXJ0c3R5bGUKZXllcyBsaWtlIHN0YXJzCnJ1bGVzIGRyZWFtIHdvcmxkCnNpdHRpbmcgYXQgdGhlIHJlc29sdXRlIGRlc2sKaGVhdmlseSBnb3RoaWMgb3JuYW1lbnRhbApwb3J0cmFpdCBvZiB0aW50aW4KcG9ydHJhaXQgb2YgdG9tIGhvbGxhbmQKcG9ydHJhaXQgb2YgdHdvIGdpcmxzIGtpc3NpbmcKcmV0YXJkZWQKc2lja2xlCnBvcnRyYWl0IG9mIHZlcnkgYmVhdXRpZnVsbCBnaXJsCmVsZWdhbnQgc3R5bGUKb3JuYXRlIHdpdGggZGlhbW9uZHMKdG91YXJlZwpzaG9ydCBibG9uZGUgYWZybwpsYXZlbmRlciBoYWlyCmNvb2wgbmlnaHQgY29sb3IKbGlrZSBsaWFuZ2NoYW8gd2VpCmhpZ2hseSBiZWF1dGlmdWwKZGF6LiBkZXRhaWxlZApvbmUgcGllY2UgYXJ0c3R5bGUKcG9ydHJhaXQgcGFpbnRpbmcgb2Ygc2tlbGV0b3IKcG9ydHJhaXQgcGhvdG8gb2YgdGF5bG9yIHN3aWZ0CmhlIGxvb2tzIGxpa2UgYSBodW1hbiBtaW5pb24KcG9ydHJhaXQgcGhvdG8gb2YgYW4gb2xkIG1hbgpmaW5lIGN5Ym9yZyBsYWNlCnllbGxvdyBvcm5hdGUgZHJlc3MKcG9ydHJhaXQgc2FicmluYSBsbG95ZAo1IDAgbW0ga29kYWsKd2luZCBraXNzZWQgcGljdHVyZQpyZWQganVtcHN1aXQKcG9ydHJhaXQgemV1cwpjZW50ZXJlZCBvbiBmYWNlCmFuZ2VyZWQKY2xvdGhlZCBpbiBjeWJlciBhcm1vdXIKdHJlbmR5IHdoaXRlIGNsb3RoaW5nCndoaXRlIHRyZW5keSBjbG90aGVzCmZ1ciBsaW5lZCBjYXBlCmNlbHRpYyBhbnRsZXJlZCBnb2QKY3V0ZSBib3kKbGVhdGhlciBwaWxvdHMgdW5pZm9ybQpmYW50YXN5IGJlYXJkbGVzcyBkd2FyZiBjbGVyaWMKdGhlIGxhZHkgb2YgYXNoCmZ1amluCmluIHRyaWNvcm4gaGF0Cm9mIGEgMTV0aCBjZW50dXJ5CmN5Ym9yZyBtZXJjaGFudCBnaXJsCmN5Ym9yZyBtZXJjaGFudCB3b21hbgpvZiBlbHZlbiBxdWVlbiBnYWxhZHJpZWwKZmFpciBjdXJseSBoYWlyCmplZGkgd2l0aCBsaWdodCBzYWJlcgprcmFrZW5zCnF1ZWVuIG9mIGRlYXRoCnRoZSBsb3N0IHZhbGxleQp2YW1waXJlIG51bgp3b21hbiB3aXRoIGJsYWNrIGhhaXIKcG9ydHJhaXRzIG9mIGEgd29tYW4gZW5yYWdlZApwb3J0cmUgb2YgYSBwc3lzY2hvbmF1dCBkZW1vbgpldGhlcmVhbCBhbmQgbWVjaGEgdGhlbWUKcG9zaW5nIGZvciBhcnQgcGhvdG9ncmFwaHkKbGl0dGxlIGRldGFpbApwb3N0IC0gYXBvY2FseXB0aWMgY293Ym95CmF0dGFja2luZyB3aXRoIGF4ZQpkcnkgYXJjaHdheXMgYW5kIHNwaXJlcwpqdXBpdGVyIG1vb24gbWFycwp0aGUgbWFnaWMgZWNsaXBzaW5nCmlyaWRlc2NlbnQgdHViZXMKcG9zdCBhcG9jYWx5cHRpYyBmYWN0b3J5CnRhciByb2Fkcwp1bHRyYSB3aWxkIGxlbnMKcG9zdCBhcG9jYWx5cHRpYyBzaG9wcGluZyBjZW50ZXIKcG9zdCBhcG9jYWx5cHRpYyB0aGVtZSBwYXJrCnBvc3RhcG9jYWx5cHRpYyBleHBsb3JlcgpkZXNlcnQgZmlnaHRlciBhbmNpZW50IG1hZ2UKdG9uZXMgb2YgYmx1ZSBhbmQgZ3JlZW4KZmllcmNlIGV4cHJlc3Npb24gNGsKa2Fyb2wgYmFrIG1ham9yIGJ1c3RlciBrZWF0b24Ka2Fyb2wgYmFrIG9mIGVtbWEgd2F0c29uIG51bgpzaW1wbGUgbm9zdGFsZ2ljCmJsYWNrIGhvb2RpZSB0ZWNoaWUKY2VudGVyIG9mIGZvY3VzCnBvc3RlciBmb3IndW5saW1pdGVkIGp1aWNlICcKcG9zdGVyIG9mIGEgdGVjaG5vIG5pZ2h0CnBvc3RlciBvZiBjb3JvbmEgdmlydXMKbm91dmVsbGUgdmFndWUgc3R5bGUKYm9sbHl3b29kCnBvdHJhaXQgb2YgYSBmZW1hbGUgZmFjZQptYWdpY2FsIGZhbnRhc3kgMiBkIGNvbmNlcHQgYXJ0CnN1cnJlYWwgZGFyayBmYW50YXN5CmNpbmVtYXRpYyB2b2x1bWV0cmljIGxpZ2h0cwpwcmVkYXRvciBhbGllbgpyb2JvdCBhbmF0b215IGVsZW1lbnRzCmZlbWFsZSBib2R5IGVsZW1lbnRzCmdhc3RvbiBidXNzaWVyZS4gYmxvbmQgYnJhaWQKY2F2ZSB3YWxsCnByZW1pdW0gYmF0aHJvb20gZGVzaWduCmdpbGRlZC4gZmxvcmFsCmxhc2VyIGxpZ2h0cyBiYWNrZ3JvdW5kCnByZXR0eSBzYW11cmFpIHdpdGggYWZybwo0IGsgcG9zdApwcmllc3Rlc3Mgb2YgdGhlIGRhbW5lZAphc3RyYWwgYXVyb3JhCmFzaWFuIGJlYXV0aWZ1bCBmYWNlCnByaW1hIGJhbGxlcmluYQppbnNpZGUgcHJpbWl0aXZlIGh1dApwcmltb3JkaWFsIHdhdGVycwpvZmZpY2lhbCBmYW4gYXJ0CmFydGdlcm0gY29taWMKcHJpbmNlc3Mgb2YgdGhlIHdhc3RlbGFuZAp0aWx0IGJsdXIKZWFybHkgY2dpCnByb2NyYXN0aW5hdGlvbgpibHVlIHBhaW50IG9uIHRvcAplbXB0eSBlZGdlcwp3aGl0ZSBiYWNrZ3JvdW5kIGFuZCBmaWxsCnRhbiBhbmQgYnJvd24gZnVyCnZlcnkgc2FkIGZhY2UKYWR2YW5jZWQgZWNvbm9teQpmcmFueiBzY2h1YmVydCBsb29rIGFsaWtlCnByb2Zlc3Npb25hbCBsb2dvCm9uIHRoZSBiZWFjaCBhdCBub29uZGF5Cm9yaWdpbmFsIHNpbXBzb25zIGNhcnRvb24gc3R5bGUKYmFsYW5jZWQgbGlnaHRpbmcKZXBpYyBsb3N0IGluIHNwYWNlCm1hcnMgYmxhY2sKY2hhcmFjdGVyIGRlc2lnbiBza2V0Y2gKcm9tYW4gY2l0eQp2ZXJkYW50IGdyZWVuIGZpZWxkcwpyZWQgY2FwIHdpdGggYSBjYXBpdGFsIG0KY3VzdGVyJ3MgbGFzdCBzdGFuZApkZXNwZXJhdGUgYWN0aW9uCmludGVuc2UgZHJhbWF0aWMgaGRyCnNhdHVyZGF5IG5pZ2h0IGZldmVyICggZmlsbSApCnJlZCBmZWF0aGVyZWQgd2luZ3MgZm9yIGFybXMKcHJvbXB0IHlvdW5nIHdvbWFuCnBlYWNvY2sgZmVhdGhlciB3cmFwIHRoZSBoZWFkCm1hbmdhIGFuZCBhbmltZSAyMDEwCm1hbmdhIGFuZCBhbmltZSAxOTkwIGhpZ2ggZGV0YWlsCmdvbGRlbiByYXRpb24gY29tcG9zaXRpb24KY3lib3JnIGFuZCB3aXJlIGRldGFpbHMKc29mdCBkYXJrIGxpZ2h0CmFuY2llbnQgY3Jvd24KbWFuZ2EgYW5kIGFuaW1lIDE5OTAKcG9zdGVyIGNvbXBvc2l0aW9uCnByb3Rlc3RlcnMgaG9sZGluZyBwbGFjYXJkcwpzbW9vdGggY3VydmF0dXJlcwpubyBlcGF1bGV0dGVzCnBzIDEgaGFncmlkCnVucmVhbCA0IHNjcmVlbnNob3QKZXBpYyBzdGFyayBsaWdodGluZwppbnRyaWNhdGUgZGV0YWlscyEhISEKcHN5Y2hlZGVsaWMgZ29kZGVzcwpvY3RvcHVzIGNhdApwc3ljaGVkZWxpYyBsdXNoIHBpbmUgZm9yZXN0CnBzeWNoZWRlbGljIG9yZ2FuaWMgc2hhbWFuCmFyY2hpdGVjdHVyYWwgcGxhbnMKY2hlc3RlcmZpZWxkCndvbWFuIGFzdHJvbmF1dApncmFpbnkgYmxhY2stYW5kLXdoaXRlIHBob3RvCnB1bGxlZCBwb3JrIHNhbmR3aWNoCm15c3RlcmlvdXMgaGlnaGx5IGRldGFpbGVkCnRyYXZpcyBiaWNrbGUgaGFzIGEgbW9oYXdrCnB1cHB5IGFzIGEgZGoKcHVycGxlIGN5YmVycHVuayBjaXR5CmNsb3NlIHVwIGNhbWVyYSBhbmdsZQpwdXJwbGUgc2NlbmUgbGlnaHRpbmcKaW4gYSBzb2xkaWVyIHVuaWZvcm0KcHVycGxlIHNoYXR0ZXJlZCBwYWludApjb25nbG9tZXJhdGUKc2x1c2gKcHV0aW4gYXMgamFtZXMgYm9uZCAwIDAgNwpwYXRoZXRpYwpkZXNwaWNhYmxlCmxlcHJhCnNjYXJ5IGNvbG9yIGFydCBpbiA0IGsKY3V0ZSBjb2xvcmZ1bCBhZG9yYWJsZQpxdWVlbiBpbiBhIGdsYXNzIHByaXNvbgpiaWcgbG9uZyBoZWxsIHNlcnBlbnQgb2N0b3B1cwpxdWVlbiBvZiBsb25naW5nCnF1ZWVuIG9mIHRoZSBmYWlyaWVzCnJheW1hbiByYXZpbmcgcmFiYmlkcwppbiByZWQgZ2FyZGVucwpkb3JzCnJhY2VjYXIKbmlnaHRzCnJhZGlhbnQgb3dsCmtuaWdodCBhbmQgcHJpbmNlc3MKYnJpZ2h0bHkgY29sb3JlZCBmbG93ZXJzCnJhbHBoIG1jcXVhcnJpZSBjb25jZXB0IGFydAplbG0gdHJlZQpyYW0gc2hlZXAgcm9ib3QKZWxlZ2FudCBhc3ltbWV0cmljYWwKc2hlCnJhcHRvciBqZXN1cwpjb3ZlcmVkIGluIHJlZCBzbGltZQpyYXNwdXRpbiBhcyBncnViaHViIGNoYXJhY3Rlcgpzb2RhIGNhbnMKcmF2ZW4gbW9uc3RlcgpyYXZlbiB3aW5nZWQgZmVtYWxlIHZhbXBpcmUKaW1wYXNzaW9uZWQKcmF5IGxld2lzIHllbGxpbmcKcmF5IGxld2lzCnBvbGFyb2lkIGNvbG9yIHBob3RvZ3JhcGgKcmVhbCBpbWFnZQpoaWdobHkgbGlmZS1saWtlIGFycmlmbGV4IDM1IGlpCnJlYWwgbGlmZSBwaG90byBvZiBhIHN5cmlhbiBtYW4KbGFrZSBzZXR0aW5nCnJlYWwgbGlmZSB0b3Rvcm8KYmFja2xpZ2h0aW5nIHN1bnNldCBnb2xkZW4gaG91cgptb29kIHNjYXJ5CmNvbnZlcnNlCnB1cnBsZSBhbmQgYmx1ZSBsZWF0aGVyCmludGVuc2UgYmx1ZSBleWVzCmFudGFydGljIG5pZ2h0CnJlYWxpc3RpYyBhbGllbgohISEhISBodW1hbiBleWVzISEhISEhCmdyZWVuIGJvZHkuIHJlZCBleWVzCmd1d2VpeiBvbiBhcnRzdGF0aW9uIHBpeGl2CmxvbmcgY3VybHkgZnVyCmZ1bGwgc2t1bGwgc2hhcGVkIGZhY2UgY292ZXIKbWFnZSByb2JlIGJhc2VkIG9uIGEgdG91Y2FuCjYgdG91Y2FuIGJlYWtzCnZpZGVvIGFuaW1hdGlvbgpob2d3YXJ0cyBsZWdhY3kKc3VwZXIgbmF0dXJhbApvcnRob2RveCBpY29uIG5lby1nb3RoaWMKYW5hbW9ycGhpYyBsZW5zZXMuIGhpZ2ggcXVhbGl0eQpyaWNoIGRlZXAgbW9vZHkgY29sb3IKMjk5NTU5OTIwNgpzZXh5IG1hc2N1bGluZQpsb25nIGx1eHVyaW91cyBibG9uZCBoYWlyCnRob3VnaHRmdWwgcG9zZQpsZWZ0IGhhbmQgcHJvcHBpbmcgdXAgdGhlIGhlYWQKcHJlcHB5IHN0eWxlCnNtYXJ0IGNhc3VhbApheWFtaW4ga29qaW1hCnNob3J0IHNoYXZlZCBoYWlyCmplYW4gZGVsdmlsbGUgZmVydGlsZQpmZWN1bmQKYWxsYW4gaG91c2VyCmFsaWNlIGh1bnQgYW5kIHBldGVyIGh1cmQKbmVvLXBhZ2FuCmhvb2RlZCBmaWd1cmUgc3VycmVhbApyaWNoIGRlZXAgY29sb3JzIGEgbWFzdGVycGllY2UKZWd5cHRpYW4gZ29kcwpiZXJuYXJkIGR1bWFpbmUKZGllc2VsIHB1bmsgZmVtYWxlCnBhcnRlZCBsaXBzCmNoYXJsaWUgYm93YXRlciByaWNoIGRlZXAgY29sb3JzCm1hbW1hbHMKb2lsIGdsYXplCmR5bmFtaWMgY2xvc2V1cApyZW1icmFuZHQhCnJlYWxpc3RpYyBkZXRhaWxlZCByZXZvbHZlcgpibHVlIGV5ZXMgYmx1ZSBpcmlzCmNyYWNrZWQgYm9keSBmdWxsIG9mIHNjYXJzCmphbWVzIGUgcmV5bm9sZHMKY29tbW9uIHN0cmVldAp0ZW50YWNsZWQgY3JlYXR1cmUgbWl4CmtyeXB0b24gaW9uCmhlYXZ5IG1ldGFsIDE5ODEKYXV0aG9yaXR5IDo6IGhpZ2ggZGV0YWlsCmRpc3RhbnQgcmFpbnN0b3JtCmNhYWF0cwpjYXRzIGNhdCBkcmVhbWNhdHMKemVpc3MgMTRtbSBmMS44CmxhcmdlIGFsaWVuIGV5ZXMKZGltIGZsYXNobGlnaHQgbGlnaHRpbmcKZ3JleSBzbmFrZSBzY2FsZSBza2luCmVwaWMgY2luZW1hdGljIHRvbmUKNCBrIHBvc3Rwcm9jZXNzaW5nCmNsZWFyIGNyb3NzIGhhdGNoaW5nCmVsZWN0cm9uaWMgbWljcm9zY29wZSAxIDkgOSAwCm5hdHVyYWwgd2luZG93IGxpZ2h0aW5nCmJhcmVkIHNob3VsZGVycwp1bHRyYSBsb25nIGxlbnMKaW4gdGhlIGFydCBzdHlsZSBvZiBxdWV0emVjb2F0bAp1c2luZyB3YXRlcmNvbG9yCmJyYXNzIGJlYWsKc3BoZXJpY2FsIGJsYWNrIGhlbG1ldHMKdGhlIHNreSBpcyBncmV5IDIgMCAwIDAKY29uZSBoZWFkcwpoaWdoIGNvbG9yZWQgdGV4dHVyZQp3b29kZW4gd2FsbHMgYnJhc3MgcGFuZWxzCmJyYXNzIGVxdWlwbWVudCBhbmQgY29tcHV0ZXJzCmJlYXV0aWZ1bCBzeW1tZXRyaWNhbCBmYWNlcwpyZWFsaXN0aWMgcGhvdG8gc3R1ZGlvIHBob3Rvc2hvcAphcmNoaXZhbCBwaG90b2dyYXBoeQpncmFzcGluZyBpbnRyaWNhdGUgZmlsaWdyZWUKZ29sZGVuIGhvdXIgbGlnaGluZwppbiBzdHlsZSBvZiBqdWVyZ2VuIHRlbGxlcgppbiBzdHlsZSBvZiBib2xhZGUgYmFuam8KanVsZXMgYmFzdGllbiBsZXBhZ2UKY3JhZnRpbmcgc3BlbGxzCmZlc3RpdmUgY29sb3JzCnJlZCAtIGlyaXMKZmFudGFzeSBtYWdlCmRhcmsgdGFpbnQgOjogYXRobGV0aWMKaW1hZ2UgZnVsbCBvZiByZWZsZWN0aW9ucwpyZWFsaXN0aWMgcmVuZGVyaW5nIGZvciBzdG9vbApicnV0YWxpc20gc3R5bGUgc3Rvb2wKcG9ydCBzY2VuZSBiYWNrZ3JvdW5kCmZ1dHVyZSBjb25jZXB0IGFydApyZWFsaXN0aWMgcm9jayBmaWd1cmluZQpwaG90b3JlYWwgb2N0YW5lIHJlbmRlcmluZwpjdXRlIHlvdW5nIHJlZGhlYWQgZ2lybApjb21wbGV4IHZvcnRleAppbiBzdHlsZSBvZiBwZXRyYSBjb2xsaW5zCmluIHN0eWxlIG9mIGFsYXNkYWlyIG1jbGVsbGFuCnN0b2ljIHBvc2UKZmVtYWxlIG1hZCBoYXR0ZXIKc2xpZGUgc2hvdwpmcmFjdGFsIGluc2FuZQpyZWN1cnNpdmUgcG9ydHJhaXQKcmVkIC0geWVsbG93IC0gYmx1ZSBidWlsZGluZwphcXVhbWFyaW5lIHdpbmRvd3MKbWVnYXRhbGwgYnVpbGRpbmcKY29sb3JmdWwgYnVpbGRpbmcKcmVkIGN1bXVsb25pbWJ1cyBjbG91ZHMKYm9hcmRlZCB1cApwYWRsb2NrcwpyZWQgd2VicwpyZWQgaG9vZGVkIG1hZ2UKaG9sZGluZyBhIGdvbGRlbiBiZWxsCnBhdHJpY2sgd2VzdHdvb2Qgc3R5bGUKYmxhY2sgcGVuIGRyYXduIGVkZ2VzCnJlZCBwYW5kYSBvbiBhIHByb3BhZ2FuZGEgcG9zdGVyCnJlZCBwbGFuZXRvaWQgZXhwbG9kaW5nCnJlZCBzaG9lcwpyZWQgc3ByaXRlcyBpbiB0aGUgYXRtb3NwaGVyZQp3aXJlcyBjYWJsZXMgc2t1bGxzCmxhcmdlIGNyb3duIGhlbG1ldApyZWRwaW5rIHN1bnNldApyZWxheGVkIG9jdG9wdXMgb24gbW9vbgpkeW5hbWljcwpyZW5haXNzYW5jZSBhdXR1bW5hbApyaWNjYXJkbyBzY2FtYXJjaW8Kb2xkIGFtZXJpY2FuIG1pZHdlc3QKcmVuYWlzc2FuY2UgcGFpbnRpbmcgb2YgZXZpbCBtZW4KZHJlc3NlZCBpbiBzcGFydGFuIGFybW91cgpjdXJseSBsb25nIGhhaXIKcmVuYW1vbgp3aGl0ZSBzaWx2ZXIgYmlraW5pCmhpZ2hyaXNlIGJ1c2luZXNzIGRpc3RyaWN0Cm1lZGlldmFsIGZhbnRhc3kgZ2FtZSBhcnQKb3ZlcnNpemVkIHBhdWxkcm9ucwp5ZWFyIDEgOSAxIDQKcmVwb3Vzc29pcgpyZXNpZGVudCBldmlsIDQKY3liZXJwdW5rIGFyY2hpdGVjdHVyZQpsZSBjb3JiZXVzaWVyCmFpIHJvYm90IHRlbmRyaWwgcmVtbmFudHMKYmlvbWFjaGluZSB3YXIgYWdhaW5zdCBodW1hbml0eQpyZXRpcmVkIGJhcm5leQpkcmFtYXRpYyBzaW1wbGUgc2hhcGVzCmFsdW1pbml1bQpza3lsaWdodHMKZnJvbSAxOTc3CmN5Ym9yZyByb2JvdCB3ZWFyaW5nIHZyIGhlYWRzZXQKcmV0cm9mdXR1cmlzdGljIGZlbWFsZSBhbmRyb2lkCm9yYml0YWwgZ3JhcGhpY2FsIGxpbmVzCnJldHVybiBvZiB0aGUgbWFueSB0byB0aGUgb25lCnJldW5pb24gaXNsYW5kCnRyaWJhbCBzbGVldmUgbGVmdCBhcm0KaW5zaWRlIHRoZSB0YXJkaXMKcmFpbiEhISEKcmhpem9tYXRpYyBsaWZlZm9ybQpncmFmZml0aSBlbGVtZW50cwpmaXJzdCAtIHBlcnNvbiB2aWV3CmF6dXJlLiBkZXRhaWxlZCBoYWlyCnJpYmJlZCBtYW4gZmFjZSBwb3J0cmFpdApjb3ZlcmVkIGluIG9yZ2FuaWMgZmxlc2ggbWVhdApodW50aW5nIHRyb3BoaWVzCmRhcmtzbGF0ZWdyYXkgd2FsbAplcGljIHNjZW5lIGZyb20gbWFydmVsIG1vdmllCnJpY2hseSBkZWNvcmF0ZWQgdmljdG9yaWFuIGhvdXNlCnBhcGVyIGNyYWZ0IGxvdyBwb2x5CnJpY2t5IGJlcndpY2sKcmltdXJ1IGFuZCBtaWxpbQpyZWluY2FybmF0ZWQgYXMgYSBzbGltZQp3YXRhcnUga2FqaWthCmdyYXBoaWMgY29tcG9zaXRpb24Kcml2ZXIgZGVsdGEKZmxvb2RwbGFpbnMKYmVhdXRpZnVsIG1vcm5pbmcKaWNlIGNvbG9yIHNjaGVtZQpyaXZlciBvdHRlciBkcmFnb24Kcm9hZCBpbiBhIGZvcmVzdCByb2FkCnJvYXJpbmcgYmx1ZSBsaW9uLiBtYWplc3RpYwpjb29raW5nIG9pbApkYXJrIGJhY2tncm91ZApyb2JvY29wIGR1Y2sKcm9ib3QgYmlyZApodW1hbiBwcmlzb25lcnMKMyBkIG1ldGFsbGljIGNlcmFtaWMKcm9ib3QgaW4gYSBzZXJ2ZXIgcm9vbQpyb2JvdCBtYWRlIG9mIGEgY2FyZGJvYXJkIGJveApyb2JvdCBvdmVybG9yZHMKcm9ib3QgcG9wZQpyb2JvdCByZXBhaXIgc2hvcApyb2JvdCByZXBhaXIgd29ya3Nob3AKcm9ib3Qgc2VpemVzIHRoZSBmb3Jlc3QgY3Jvd24KaW4gYSB0aWtpIGJhcgpyb2JvdCB0b3JzbwpodW1hbiBoZWFkIHdpdGggYmxvbmRlIGhhaXIKYmxvbmRlIGhhaXIgaHVtYW4gaGVhZApodW1hbiByZWFsaXN0aWMgZmFjZQpodW1hbiBoZWFkIHNraW4KeWVhciAxODUwCnJvYm90aWMgcGlnCnJvY2tldCBsYXVuY2hpbmcgaW50byB0aGUgc2t5CnJvY2t5IGdyb3VuZCB3aXRoIGEgZGlydCBwYXRoCmdyYXNzIHN1cnJvdW5kaW5nIGl0CnJvZHJpZ28gZHV0ZXJ0ZQppbWFnZXJ5CnJvZ3VlIGFuaW1lIGdpcmwgYXlhbmFtaSByZWkKcGV0aXRlIHBlYXIgc2xpbSBmaWd1cmUKdmljdG9yeSBsYXAKc3R5bGUgb2YgdG9ueSBoYXdrCnZpYnJhbmNlIHNjaGVtZQpiZWF1dGlmdWwgbGlnaHRpbmcgdWhkCmNoYXJtaW5nIGV5ZXMKYmVkIGlzIG5vdCBtYWRlCnJvb3RzIHVuZGVyd2F0ZXIKbWFoZXIgbW9yY29zCnNwYW5pc2ggcHJpbmNlc3MKcm9zZSBvZiBqZXJpY2hvCm5ldXJvbG9naWNhbCBtYXJ2ZWwKMyAyIG1tIHBob3RvZ3JhcGgKYnJpZ2h0IHNtaWxlcwpyZWFkaW5nIGVuZ2luZWVyaW5nIGJvb2sKY2VyZWJyaSBtb3ZpZSBwb3N0ZXIKcm91bmQgZGFuY2UKbG9uZyBncmFzcyBpbiB0aGUgZm9yZWdyb3VuZApmb2N1c2VkIGZhY2UKcm95YWwgZmFtaWx5IGR1cmluZyBhbiBhcmd1bWVudApycGcgaXRlbSByZW5kZXIKa2lkcyBmYW50YXN5IGRyYXdpbmcKcnVnZ2VkIG1hbGUgbWVkaWV2YWwga25pZ2h0CnNvbG8gbWFsZSB3ZWFyeSBzb2xkaWVyCnJ1bm5pbmcgY2F0CnBvc3QgLSBjeWJlcnB1bmsKcnVzc2lhbiBjaXR5IG9mIHRoZSBmdXR1cmUKc292aWV0IGN5YmVycHVuawpydXNzaWFuIGZvbGsgZmFpcnl0YWxlCnJ1c3NpYW4gZ2lybGZyaWVuZApydXNzaWFuIGxhbmRzY2FwZQpyeWFuIGdvc2xpbmcgYXMgcm9tYW4gc3RhdHVlCnJ5YW4gZ29zbGluZyBmdXNlZCB3aXRoIGEgZ29vc2UKcnlhbiByZXlub2xkcyB3ZWFyaW5nIGEgZmF0IHN1aXQKcnl1IGZyb20gc3RyZWV0IGZpZ2h0ZXIKc2FiZXJ0b290aCBjYXQKc2FjaSBwZXJlcmUKbGljaHRlbmJlcmcgZmlndXJlCnNhZCBjb3AgbG9va2luZyBhdCBhCnNhZCBlbW9qaQpzYWQgcHJpc29uZXIgaG9sZGluZyBpcGFkCnNhZCBzdGV2ZW4gc2VhZ2FsIGluIGphaWwgY2VsbApzYWRuZXNzIHBlcnNvbmlmaWVkCjNkIHN0eWxlIGxpZ2h0IHJlZnJhY3Rpb24Kc2FpbnQgbWFuCnNhaW50IHNrZWxldG9uIHF1ZWVuCnNjYW5kZWxvdXMgZmFudGFzeSBhcm1vcgpjcnlzdGFsIGhvbG9ncmFwaGljIHVuZGVydG9uZXMKcmlpY2hpIHVlc2hpYmEKc2FrdXJhIGtpbm9tb3RvCmNsYW1wIHN0eWxlCnNhbG1hIGhheWVrIHBvcnRyYWl0CnNlcnZpbmcgc3VnZ2VzdGlvbgpzYWxvbWUKc2FsdCBmbGF0cyB3aXRoIHNjYXR0ZXJlZCBydWlucwpzYW0gaHlkZSBpbiB0ZWFtIGZvcnRyZXNzIDIKc2FtdWVsIGphY2tzb24Kc3VwZXIgc2xvd21vdGlvbgphbHNvIG9uZSB0b21hdG8gc2xpY2UKdHdvIG9uaW9uIHJpbmdzCmluIGEgcmVkIGRpc2gKa25vd2luZyBleHByZXNzaW9uCmJlYXV0aWZ1bCB3aW50ZXIgYXJlYQpzYXVkaSBmdXR1cmlzdGljIHdhcnJpb3IgbWVjaGEKc2lnbWEgYXJ0IDggNSBtbSBmIDEuIDQKc2F6ZWQKc2NhcmFtb3VjaAp3ZWFyaW5nIGxlYXRoZXIgc3dpbSBzdWl0ZQp3ZWFyaW5nIHRoZSBudW1iZXIgMSBoZWFkYmFuZApzdHVmZiBvZiBuaWdodG1hcmVzCm1hbiBpbiBhIGplc3RlciBjb3N0dW1lCnNjYXJ5IGVsbW8gd2l0aCBsb25nCmdhbmdseSBhcm1zCm5pZ2h0IGNhbSBmb290YWdlCnNjYXJ5IGZpc2gKc2Nhcnkga25pZ2h0CmV4aXRpbmcgZnJvbSBhIHdhcmRyb2JlCnNjZW5lIGZyb20gc3RhciB3YXJzIDE5NzcKd29ybXMgaW50cmljYXRlZApzY2VuZSBmcm9tIGR1bmUgMiAwIDIgMSBtb3ZpZQpkYXkgb2YgYWxsIHRoZSBkZWFkCnNjZW5lIGZyb20gdGhlIHZvaWNlIG9mIGFtZXJpY2EKaGlnaCAtIHJhdGVkCmF1ZGllbmNlIHNlbGZpZQpzaGFycCBmb2N1cyBvbiBzY2VuZXJ5Cm92ZXJjYXN0IGRhd24KaXNsYW1pYyBpbnRlcmlvciBkZXNpZ24Kc2NpIC0gZmkgbW9uc3RlciBodW50ZXJzCmxpdHRsZSBnaXJsIG1lZXRzIHJvYm90CndpdGggYW5jaWVudCBjaGluZXNlIGFlc3RoZXRpYwpmYXNoaW9uIG1vZGVsIGZhY2UgY2xvc2VkIGV5ZXMKc2NpIGZpIGRhdGEgcmVhZG91dHMKZGFyayBzY3JlZW4Kc2NpIGZpIGxhbmRzY2FwZQpzY2ktZmkgY2FyCmluIGxpZ2h0aW5nIG9mIGJsYWRlIHJ1bm5lciAyMDQ5CnNjaS1maSBjeWJlcnB1bmsgY2l0eSBzdHJlZXQKbmVvbiBob2xvZ3JhbXMKaW4gc3R5bGUgb2YgdWx0cmEgaGlnaCBkZXRhaWwKc2NpLWZpIG5pZ2h0IGNsdWIKc21va2UgYW5kIGF0bW9zcGhlcmUKb25seSBvbmUgcm9ib3Qga2lkIG9uIHRoZSBncm91bmQKdGVudGFjbGVzIGFuZCBib25lcwpmbG9vZGVkIHN0YXRpb24Kc2NpZW5jZSBwb3N0ZXIKc2NpZW50aWZpYyBkb2N1bWVudApmdW5jdGlvbmFsIGFuZCBlbGVnYW50IGxvb2sKYnV0IG1pbmltYWxpc3QKc2NpZmkganVua3Nob3AKc2NvcnBpb24gZnJvbSBtb3J0YWwga29tYmF0CnNjcmVlbiBzaG90IG9mIGNvZAppbiB6b290b3BpYSBjaXR5CnNjcmVlbnNob3QgZnJvbSBhbiBmcHMKcG9zdCBtb2Rlcm4gYXJjaGl0ZWN0dXJlCnNjcmVlbnNob3QgZnJvbSB0aGUgYW5pbWUgZmlsbQpmdXR1cmlzdGljIHNjaWVudGlmaWMgbGFib3JhdG9yeQpzaW1iYQo0ayBzdGlsbCBmcmFtZQptYXJrIGhhbW1pbCBwb3J0cmFpdApodXN0bGUgYW5kIGJ1c3RsZQpheHVyZSBza3kKd2VhcmluZyBncmVlbiBjbG90aGluZwpjYXJ0b29ueSBsaWdodGluZwpkaXNuZXl3b3JsZCBhdCBraW5nZG9tIGhlYXJ0cwptYW5jaGVzdGVyIGNpdHkKdGhlIGxvc3Qgc3RhciB3YXJzIGZpbG0Kc2VnYSBnZW5lc2lzIHZpZGVvIGdhbWUKaW5zaWRlIGVsZW1lbnRhcnkgc2Nob29sCndpdGggeW91bmcgamVkaSBhcm15IGJlaGluZCBoaW0KaWNvbmljIHNob3QKc2FpbnRzIHJvdyBmdXJzdWl0IHRhaWxzIG1vZApmdXJyaWVzIHdlYXJpbmcgdGFpbHMKYmVhdXRpZnVsISEhISBtdXNldW0gcGhvdG8KdW5ob2x5IGFib21pbmF0aW9uCnNlYSBtb25zdGVyIGxvb2tzIGxpa2Ugc2hpcAptYXJpbmUgYW5pbWFsCmRhbWFzayBwYXRlcm4KcmFpbmJvdyBsaXF1aWRzCnNlYW4gY29ubmVyeSBhcyBiaWcgYm9zcwpzZWFzb25zIG9mIGVtb3Rpb24KdGhlIHdvbmRlciBvZiBkZXZvdGlvbgp0aGUgdG9yY2ggd2UgYWxsIG11c3QgaG9sZAp0aGUgbXlzdGVyeSBvZiB0aGUgcXVvdGllbnQKd2l0aCBhbnRpIGFpcmNyYWZ0IGd1bnMKZ2xhc3MgY292ZXIKc2NhcnkgbW9uc3RlciBzdGF0dWVzCm5vIHdvbWVuCnNlY3JldCByb21hbmNlCnNlY3JldCB1bmRlcmdyb3VuZCBsYWIKZmlnaHRpbmcgZWFjaCBvdGhlcgpzZWxlbmEgZ29tZXogbWFkZSBvdXQgb2YgY2VsZXJ5CnNjaWVudGlmaWMgZXF1aXBtZW50CmtuaWdodCBvZiBjdXBzCnNob3dpbmcgc3Ryb25nIG11c2NsZXMKaG9sZGluZyBhIHB1ZyBmb3IgYSBwaWN0dXJlCnNlbGZpZSBvZiBlbG9uIG11c2sgb24gbWFycwpzZWxmaWUgb2YgYSBtYW4Kc3R1ZGlvIHBob3Rvc2hvdApzZWxmaWUgb2YgYSB5b3VuZyB3b21hbgpmMSBjYXJzIGJsdXJyZWQgaW4gYmFja2dyb3VuZApjaGFvdGljIHNlYSBzZXR0aW5nCmNvbG9yIG92ZXJsYXkKc295bWlsawpzZXRoIGFhcm9uIHJvZ2VuCmJhZCBjYW1lcmEgZm9vdGFnZQpzZXZlcmlhbiBvZiBuZXNzdXMKZGFyayBncmVlbiBzbW9rZXkgZXllc2hhZG93CmludHJpY2F0ZSBibGFjayBvYnNpZGlhbgpiYWNrZ3JvdW5kIGlzIHN1bnNldCBjbG91ZHMKc2lkZS12aWV3LiBoaWdobHkgZGV0YWlsZWQKc2V4eSB5b3VuZyB3b21hbgpzaGVsdmVzIGZpbGxlZCB3aXRoIHRvbWVzCnNoYWtlc3BlYXJlCnNoYWRvdyBvZiBjYXRob2xpYyBjaHVyY2ggY3Jvc3MKc2hhbmUgbWNnb3dhbgpsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlCnNoYXJrIGNhdCBoeWJyaWQKOTEyNmsgZmlsbQo3MDAwbW0gZmlsbQoxIDggNSAwIHMgZXJhIGNsb3RoZXMKMzU4NDBrIGZpbG0KMTYzODRrIGZpbG0KcHJvZmVzc2lvbmFsIGhpZ2ggcXVhbGl0eSBzY2FuCjEgOSA1IDAgcyBzY2lmaQpyZWQgYW5kIGJsdWUgYmxhY2sgbGlnaHQKc2hpYmEgZmlndXJpbmUKc2hpYmEgaW51IGhvbGRpbmcgYSBiYXNlYmFsbCBiYXQKc2hpbmluZyBtZXRhbApiIC0gMiBib21iZXIKc2ltcGxlIHJlZCBiYWNrZ3JvdW5kCnNoa2tlbGVkIGluIHRoZSB2b2llZApzaG9wcGluZyBjYXJ0IGljb24Kc2hvcnQgYmx1ZSBoYWlyZWQgd29tYW4KcGhvdG9zIG9mIGZhbWlseSBvbiB3YWxsCnNob3Qgb2YgZmlsbQpwbGF5ZnVsIHBvc2Ugb2YgYSBkYW5jZXIKc2hvdCBvbiBrb2RhY2hyb21lCmV5ZXMgYXJlIHJhaW5ib3cgc3BpcmFscwpzaG92ZWwga25pZ2h0IGFzIGRhZnQgcHVuawpnb2RseSBhbmQgZXRoZXJlYWwKc2hyZWsgZG9pbmcgYmFsbGV0CnNodXR0ZXJlZCBtYWxsIHN0b3JlCm1ldGFsbGljIHNodXR0ZXIKc3RhbmRpbmcgaW4gY29ybmVyIG9mIHJvb20Kc2lkZSBjZW50ZXJlZCBwYWludGVkIHBvcnRyYWl0CnNob3J0IGxlYXRoZXIgY29hdAp5ZWxsb3cgY2FycmVyYSBnbGFzc2VzCnNpZGUgcG9ydHJhaXQgb2YgZWx2ZW4gcm95YWx0eQpzaWRlIHBvcnRyYWl0IG9mIGltb2dlbiBwb290cwpwYWxhZGluIQpjb2xvcmZ1bCBzd2lybHkgcmlwcGxlcyBvZiBtYWdpYwp0YXJvdCBjYXJkIGxheW91dAp3aW5kIHNvcmNlcmVyIQpzaWRlIHByb2ZpbGUgYXJ0d29yawpzaWRlIHByb2ZpbGUgY2VuZXRlcmVkIHBvcnRyYWl0CnJhZGlhbnQgYmFja2xpZ2h0aW5nCm1hbGUgYmxvbmRlIGVsZiByYW5nZXIKem9vbWVkIHZpZXcgb2YgYSBiYW5rbm90ZQpjb2xvcmZ1bCBzd2lybHkgbWFnaWNhbCBjbG91ZHMKZGVtb24gYXJtb3IKYnJpZ2h0IGNpbmVtYXRpYyBiYWNrbGl0CnN1cGVyIHNtYXNoIGJyb3NzCmh5cGVyYm9yZWEgcHJpbmNlc3MKZmVlbGluZyB0aGUgbmF0dXJlCnNhdGluIHNpbHZlcgpzaWduIHRoYXQgc2F5cyAxIDAgMApzaWdvdXJuZXkgd2VhdmVyIHNtaWxpbmcgYWdlIDIgNQpzaWxob3VldHRlIG9mIGEgZ2lybCBhbmQgaGVyIGNhdAppbnNpZGUgYSBjb3p5IGFwYXJ0bWVudApzdGVsbGFyCnNpbW9uIHBlZ2cgcG9ydHJhaXQKc2ltcGxlIGNvbmNlcHQgYXJ0IHBvcnRyYWl0IG9mCnRob3VnaHQtcHJvdm9raW5nCmJhcm9xdWUgZnJhbWUgYm9yZGVyCnVwc2NhbGUgcGhvdG8Kc2ltcGxlIHRyZWUgZnJhY3RhbApwLiBqLiBuCm1lcmdlCnRlY2huaWNhbCBlbnZpcm9ubWVudApjb2xvcmZ1bCBtdXNjdWxhciBlbGRyaXRjaAptb2Rlcm4gLSBhcnQgLSB2ZWN0b3IKbHVzaCBsaWdodGluZwpzaW5nIGZvciB0aGUgbGF1Z2h0ZXIKc2luZyBmb3IgdGhlIHRlYXIKc2luZ2xlIGF6dGVjIHNrdWxsCnNpbmdsZSBjbGF5IG11c2V1bSBzY3VscHR1cmUKZXhwbG9yaW5nIGFiYW5kb25lZCBjaXR5CnNpbmdsZSBzY2FyeSBmZW1hbGUgdmFtcGlyZSBudW4KY2xvdGhlZCEgb2lsIG9uIGNhbnZhcwpjcmFja2VkIHN0ZWVsCmFydGlzdCBza2V0Y2gKZnVudGltZSBjb3Jwb3JhdGlvbiBicmFuZGluZwpzaXggZnJvbSBsaXR0bGUgbmlnaHRtYXJlcwpoZXhhZ29uYWwgcGxhbmV0YXJ5IHNwYWNlIGJhc2UKc2FkIGxvb2sKbXNjb3cKc3BvcnRjYXIKOCAwIHMgY2hlY2tlcmJvYXJkIDYgNiA2Cmplc3NpY2EgbmlncmkgZmFjZSEhCmZsYXNoIHBvbGFyb2lkIHBob3RvCmhhbGZyZWFyCnNrZWxldG9uIHdpdGggZXllcwpjbGFzc3Jvb20gZG9vZGxlCmluIG1pY3Jvc29mdCBwYWludAoyIDUgNiBjb2xvdXJzCnNraW5ueSBtYWxlIGZhbnRhc3kgc2NpZW50aXN0CnNraW5ueSBtYWxlIG1hZ2ljaWFuCnNrdWxsIG1hZGUgb2YgcmVkIHJvc2VzCm9yZ2FuaWMgaG9ycm9yCndheW5lIGJhcmxvd2UgY29uY2VwdCBhcnQKc2t5IHdoYWxlcwptZXBoaXRpYyB2YXBvcnMKc2t5c2NyYXBlcnMgd2l0aCBncmVlbmVyeQpzbGF2aWMgY2l0eS4gYmlnIG11c2hyb29tcwpvcmNzIGxvcmQgb2YgdGhlIHJpbmdzCmZ1amljb2xvciBzYW1wbGUKY29ycG9yYXRlIGJvc3MKc2x1bSBtb3VudGFpbiBmdXR1cmlzdGljIHVyYmFuCnZpbmUgYXJ0CndpY2tlciBhcnQKcmV0cm8gc3R5bGlzZWQKc21hbGwgYmVkcm9vbQpzbWFsbCBib2F0IGluIHRoZSBmb3JlZ3JvdW5kCnJhbSBhbnRsZXJzCmJsYWNrIHJvdW5kIGhvb2QgYW5kIGNsb2FrCnNtYWxsIHJvb20gaW4gdG9reW8Kd2luZG93IG9wZW4Kc21hbGwgYmVkIG5vdCBtYWRlCnBob3RvZ3JhcGhpYyBzdGlsbHMKcmVkd29vZCB0cmVlcwpyaXZlciBydW5uaW5nIHBhc3QgdGhlIGNvdHRhZ2UKZ2FsYXh5IGluIHRoZSBuaWdodCBza3kKYnJvbnplIGhlYWRkcmVzcwp0YWkgdHJhZGl0aW9uYWwgYnJvbnplIGhlYWRkcmVzcwpzbWcKc211ZGdlZCBlZGdlcwpzbW9vdGggb3JnYW5pYyBwYXR0ZXJuCnNoYXJwIGhpZ2ggZGV0YWlsIHVsdHJhIGRldGFpbGVkCmNoZXN0IHVwIGh1bWFuIGxvd2VyIGhhbGYgc25ha2UKdmlzaWJsZSBza3kgYW5kIGh1bWlkIGF0bW9zcGhlcmUKc25ha2VzIG9uIGEgcGxhbmUKc25lZXJpbmcgcm9tYW4gbGVnaW9uZWVyCnNuaXBlciEgbWlkZGxlIGFnZSBtYW4Kc25vb3AgZG9nZyBhcyBhIGJhcmJhcmlhbgpzbm9vcCBkb2dnIGFzIGEgbWFnZQpiaWcgZGlzYyBvZiBwbGFuZXQKYmxhY2sgd2hpdGUgcHVycGxlCndlYXJpbmcgZ29yZ2VvdXMgY2xvdGhpbmcKZGlnaXRhbCBjaGFyYWN0ZXIgaWxsdXN0cmF0aW9uCmhleGFnb24gbW9vbgpzb2xhciBzYWlsIGluIHNwYWNlCnNvbGFyIHNhaWwgaW5mcm9udCBvZiBzdW4Kcm9vZnRvcCBzb2xhciBwYW5lbHMKcmVkc2hpZnQgaG91ZGluaQpzb2xpdGFyeSBjb3R0YWdlIGluIHRoZSB3b29kcwpzb2xpZCBjb2xvciBiYWNrZHJvcApzb21hbGlhCnNvbWV0aGluZyBoYXBwZW5lZApmb2N1cyB1bmZvY3VzCmNob2NvbGF0ZS4gaW50cmljYXRlIGJhY2tncm91bmQKZGV0YWlsZWQgYmVhdXR5IHBvcnRyYWl0CnNvbmljIHRoZSBoZWRnZWhvZyBpbGx1c3RyYXRpb24KcmVjdXJzaXZlIGZyYWN0YWxzCmdldHR5IGltYWdlcyBwcm9zaG90CmRhcmsgY3liZXJwdW5rIG5lb24gYXRtb3NwaGVyZQpzb3V0aGRhbGUgY2VudGVyCnNvdmlldCBidXMgc3RvcApob2xkaW5nIHdvb2Qgc2F3CmNpbmVtYXRpYyBzY2lmaSBzaG90CnNpZ21hIDM1bW0gZi8yLjggZGcgZG4gYXJ0CnNwYWNlIG1hZ2ljYWwgd2hhbGUKc3BhY2Ugb3BlcmEgZ3VuZmlnaHQKc3BhY2UgcHJvYmUKYXJ0aXN0aWMuIGFsZW5hIGFlbmFtaQpzcGFjZSBzb2xkaWVyIG9uIG1hcnMgd2l0aCBhIGd1bgpzcGFjZSBzdGF0aW9uIG9uIHRoZSBtb29uCnN0YXJmaWdodGVyCmZ1bGwgbW9vbiB3aXRoIHN0YXJzCndvbGYgaG93bGluZyBhdCBmdWxsIG1vb24Kc3BlYyBvcHMgbWFzawpzcGVlZGluZyB0aHJvdWdoIGxvbmRvbgpyZWQgdGFpbCBsaWdodHMKY29zbWljIHNvdWwKY29zbWljIG5pZ2h0IGJhY2tncm91bmQKc3BpZGVybWFuIGdyZWVrIG1hcmJsZSBzdGF0dWUKZGFyayB2aHMgYnJva2VuIGhlYXJ0cwpzY2FyeSBzaGFkb3cgcGVvcGxlCnBlYWNlIGF0bW9wc2hlcmUKc3Bpcml0dWFsIGltYWdpbmF0aW9uIG9mIGR1YWxpdHkKc3BsYXNoZXMgb2YgbmVvbiBnYWxheGllcwpwdW5rIHBvcnRyYWl0IG1hZGUgb3V0IG9mIHBhaW50CmJsYWNrIGFuZCByZWQgY29sb3VyIHBhbGV0dGUKaW4gcGVyc3BlY3RpdmUKdGFibGV0b3AgZ2FtZSBwcm9wcwpzcHkga2FuZ2Fyb28Kc3F1YWQgZmlnaHRpbmcgZW5lbXkKc3F1aWR3YXJkIHRha2luZyBhbiBhY2lkIHRyaXAKc3RhZGl1bSBmdWxsIG9mIHBlb3BsZQptYWplc3RpYyBvY2N1bHQgZ2F0ZXMKbWFnaWNhbCB3ZWlyZApzdHJhbmdlIGZhbnRhc3RpYwpzdGFpcnMgZnJvbSBoZWxsIHRvIGhlYXZlbgplcGljIGNvbWljIGJvb2sgc3R5bGUKc3RhbmRpbmcgYWdhaW5zdCB0aGUgc3Rvcm0Kc3RhbmRpbmcgb24gbmVwdHVuZQpzdGFubmlzIGJhcmF0aGVvbgpza3kgc3RyZXduIHdpdGggc3RhcnMKc3RhciBidXR0ZXJmbHkKc3RhcmdhdGUgc3RhbmRpbmcgaW4gZGVzZXJ0CnRoZSBtaWxreSB3YXkgZXhwcmVzcwpzdHAKaHVibGUKb3JhbmdlIHNhZmV0eSBsYWJlbHMKc3RhdHVlIG9mIGEgY3ViZXMgYW5kIHJpbmdzCmJsdWUgc3RlZWwKc3RhdHVlIG9mIGFuZ2VsYSBtZXJrZWwKc3RhdHVlIG9mIGhlcmN1bGVzIGxvb2tpbmcgYW5ncnkKYWJzdHJhY3QgbmVvbiBzaGFwZXMKc3RhdHVlIG9mIHZlbnVzIGNhbGxpcHlnaWFuCnN0ZWFtcHVuayBqZXN1cwpzdGVhbXB1bmsgYXp0ZWMgb3dsIHBvY2tldHdhdGNoCmJyYXNzIHBsYXRlcwpkdXN0IGFyb3VuZApzdGVhbXB1bmsgaGVsbWV0CnN0ZWFtcHVuayBob3QgYWlyIGJhbGxvb24Kc3RlYW1wdW5rIGludmVudG9yIGdpcmwKc3RlYW1wdW5rIGthdGFuYQpwZXNwZWN0aXZlCnN0ZWFtcHVuayBvd2wgcG9ja2V0d2F0Y2gKc2hpbnkgZ29sZGVuCmxpZ2h0IG9uIHRvcApzdGVhbXB1bmsgc3VibWFyaW5lIQpjb21pY3Mgc3R5bGUgYXJ0CnN0ZWFtcHVuayB3YXJyaW9yCnB1cmUgd2hpdGUgb3ZlcmNhc3Qgc2t5CnN0ZXZlIGpvYnMgYXMgaG9rYWdlCnN0ZXZlIGpvYnMgdnMgYmlsbCBnYXRlcyBtYW5nYQpzdGlja2VyIG9mIGEgaG9tZSBpbiB0aGUgZm9yZXN0CnN0aWxsIGZvcm0gYSBzaWxlbnQgZmlsbQphIHNhZCBjaGVlc2UgcHVwcGV0Cm1hc3NpdmUgY2xvdWRzCm5hdHVyZSBmdXR1cmlzbQpkYW50ZSBmcm9tIGRldmlsIG1heSBjcnkgMiAwIDAgMQp0aGUgaGVkZ2Vob2cgaXMgaG9sZGluZyBhIHJpZmxlCjEgOSA3IDAgcyBmaWxtCnNwYWNlc2hpcHMgaW4gdGhlIGNsb3VkeSBza3kKb3ZlcnR1cm5lZCBvcm5hdGUgY2hhbGljZQpveXN0ZXJzCnNpbHZlciBwbGF0dGVyCmN1cnNlZCBiYXJvcXVlIHdpdGggZWJvbnkgaW5sYXkKc3Bpa3kgdGVudGFjbGVzCm9yZ2FuaWMgZmxlc2gKcm90dGVuIG1vbGR5IGJsYWNrIG1vbGQKYmxhY2sgaHVtYW4gc3BpbmUKc3VycmVhbCBhbGllbiByaWJiZWQgd2hpdGUgZnJ1aXQKdmVsdmV0IHRhYmxlY2xvdGgKZXh0cmVtZSBmb2cKcm9ib3RpYyBleHRlbmRlZCBhcm1zCnN0dWRpbyBxdWFsaXR5IGVmZmVjdHMKbWFycyBzZXR0aW5nCmluIGF2ZW5nZXJzIG1vdmllCjIwMDkgY2luZW1hdG9ncmFwaHkKcHV0dGluZyBtYWtldXAgb24KYnJva2VuIGZvcmVzdHMKMyBkZXgKc3RveWEgZXhwcmVzc2l2ZSBvaWwgcGFpbnRpbmcKc3RyYW5nZSBhbGllbiBmb3Jlc3QKc3RyYW5nZSBhdHRyYWN0b3IKc3RyYW5nZSBnaWFudCBpbnNlY3RzCmNoYXJsaWUgaW1tZXIgYW5kIGplbm55IHNhdmlsbGUKZHJpcHB5IG9pbCBwYWludGluZwpzdHJlYW0gb2YgbG92ZSBhbmQgaGFwcGluZXNzCndhcmhhbW1lciBlbXBlcml1bSBzdHlsZQpnb3RoaWMgbG9jb21vdGl2ZQpmZW1hbGUgb3V0Zml0CnNtb2tlIG9uIHRoZSBzdHJlZXQKc3RyZWV0IG9mIG5ldyB5b3JrCmdyZXkgY29iYmxlIHN0b25lcwpmb3ggcGVvcGxlCmJyaWdodCBibHVlIHNoaW55IGxpbmdlcmllCm1vZWJpdXMgYXJ0d29yawpyZXN0aW5nIG9uIGNoZXN0CnJlYWwgZ3VpdGFycyBoYW5naW5nIG9uIHRoZSB3YWxsCnBpYW5vcwptdWx0aXBsZSBndWl0YXJzCm11bHRpcGxlIGJhc3MgZHJ1bXMKc291c2FwaG9uZXMKY2VudGF1ciBob3JzZQpjaGlyb24KaW50cmljYXRlIG1hdGhlbWF0aWNhbCBzaGFwZQpzdHVkeSBvZiBhIGZsb3dlciBmYWlyeQpzdHVmZmVkCndlbGwgZGVzaWduZWQgaGVhZApzdHVubmluZyBsYXJnZSBmb3JtYXQgcGhvdG9ncmFwaApzcHJpbmcgY29sb3JzCnN1ZmlzbQpsYXlpbmcgYmFjayBvbiBhIHBpbGxvdwpwcmltYSBiYWxsZXJpbmEgaW4gcm9zZSBnYXJkZW4KY3V0ZSBrb3JlYW4gYWN0cmVzcwp3YXRlciBzd2lybGluZwpzdHlsZSBvZiBodWJlcnQgcm9iZXJ0CmJsYWNrIGxhZ29vbiBtYW5nYQpzdHlsaXNoIHNob2UgZGVzaWduCnN0eWxpemVkIGN5YmVycHVuayBtaW5vdGF1ciBsb2dvCmhpZ2h3YXkgYW5kIHN1bnNldCEhCnN0eWxpemVkIHBvcnRyYWl0IGZvcm1hbCBwb3NlCmNsZWFuIGJyaWdodCBoYXBweQpzdWJhdG9taWMgZWxlY3Ryb25zISBpbiBsb3ZlCnN1bGFjbyBzdGFyIGRlc3Ryb3llciBkcm9wIHNoaXAKY2l0aWVzIG9mIG1lc29wb3RhbWlhCmZsb3dlcnMgZ2FyZGVuCnN1bW1lciBnbGF1IGFzIGNvcnRhbmEgZnJvbSBoYWxvCnN1bW1lciBtZWFkb3cKc3VtbWVyIHN0cmVldCBuZWFyIGEgYmVhY2gKc2xlZWshISEKaG9sZGluZyBob3Qgc2F1Y2UKd2lsbGlhbSBoZW5yaXRzCndhcm0gc2F0dXJhdGVkIHBhbGV0dGUKc3Vuc2V0IG9uIG1hcnMKYmlnIGdyYXBoaWMgc2VpbmVyIHNoaXAKc3VwZXIgbWFyaW8gaW4gbWF0cml4CmRzbHIgZmlsbQpxdWFsaXR5IHJlbmRlcmluZwpjb21pYyBkcmF3aW5nIHN0eWxlCnN1cGVybm92YSBleHBsb3Npb24Kc3VwcGx5IGNoYWluIGVjb25vbWljcwpzdXJmYWNlIHdpdGggYmVlci10ZXh0dXJlCm9jaHJlIGFuY2llbnQgcGFsZXR0ZQpyb2NvY28gbWVjaGFuaWNhbCBhbmQgZWxlY3Ryb25pYwppc29tZXRyaWMgdmlldyEhISEKcmV0cm9mdXR1cmlzdGljIGRlcHJlc3NpbmcKdW5maW5pc2hlZCByb290cyBvZiB3aGl0ZSBzYW5kCnN1cnJlYWwgbmVpbCBnYWltYW4ncyBzYW5kbWFuCmhhdW50aW5nIGFwcGVhcmFuY2UKZW1wdHkgYW5kIHVuY2FueSBleHByZXNzaW9uCnN1cnJlYWwgdGVhcnMgZnJvbSB0aGUgbW9vbgpmdXR1cmlzdGljIGluIHRoZSBkZXNlcnQKaW4gdmljdG9yaWFuIGFyaXN0b2NyYXQKcHVycGxlIGNoZWNrZXJib2FyZApzdXJyZWFsaXN0IGxhbmRzY2FwZQptb2Rlcm4gZGVza3RvcCB3YWxscGFwZXIKc3V0cm8gdG93ZXIgaW4gc2FuIGZyYW5jaXNjbwpkcmFtYXRpYyBuaWdodCBsaWdodGluZwpmcm96ZW4gdGltZSBlZmZlY3QKZW1wYXRoeSBtYWNoaW5lcwppbnRlciBkaW1lbnNpb25hbCBjbG9ja3dvcmsKc3dpcmx5IGxpcXVpZCBmbHVpZCBhYnN0cmFjdCBhcnQKc3lsYXMKdGhlIHNoYWNrbGVkCmFydGVtIGRlbXVyYSBhbHBob25zZSBtdWNoYQpibGFjayBhbmQgcmVkIGZhbnRhc3kgc3dvcmQKc3ltbWV0cmljYWwgZGllIGN1dCBzdGlja2VyCnllbGxvdyBnZW1zdG9uZXMgc3Bpa2VzCmNyeXN0YWxsaWMgc3VuZmxvd2VycwpsdW1pbm91cyBmaXJlIGhhbG8KZXh0cmVtZWx5IGxvbmcgZm9yZWhlYWQKaWxsdXN0cmF0aW9uIGJsYWNrIG91dGxpbmluZwpwZW5uZWQgd2l0aCB0aGluIGNvbG9ycyBvbiB3aGl0ZQp3YW5pbmcgbW9vbgpjdXAgb2YgZGVhdGgKbWFnaWMgbGlnaHRuaW5nIHJpbmcKZmlyZWJhbGwgaGFuZAp3aXRoIGEgcG9ueXRhaWwKc2hhcnAgLSBmb2N1cyEhCnN5bW1ldHJ5ISEgcG9ydHJhaXQgb2YgYSBjb3dib3kKc3ltbWV0cnkhISBwb3J0cmFpdCBvZiBha3VtYQpleHByZXNzaXZlIGV5ZXMhISBpbnRyaWNhdGUKbG9uZyBjdXJseSBoYWlyIGludHJpY2F0ZQpob3Jyb3IhISBoaWdobHkgZGV0YWlsZWQKZ2F0ZXdheSB0byBhbm90aGVyIGRpbWVuc2lvbgpzeW1tZXRyeSEhIHBvcnRyYWl0CmZ1dHVyaXN0aWMgcG9zdGVyCnRyYWNrc3VpdApmb3JjZWQgd2l0bmVzcwpiYWRhc3MgYW5pbWUgOCBrCmZ1bGwgYm9keSEhIG1heGltYWxpc3QgZGV0YWlscwphcmNoaXRlY3R1cmUgY2FydmVkCndlYXJpbmcgcmFpbmJvdyBraW1vbm8Kd2hpdGUgd2hpdGUgYW5kIGdvbGQga2ludHN1Z2kKdCAtIHJleCBkcmlua2luZyBhIGdpYW50IGlwYQpzdHJhaWdodCBhcm1zCmhvbHkgbWFuIGxvb2tpbmcgYXQgZ3JvdW5kCnBsYXRmb3JtIDkgMyAvIDQKdGFjdGljYWwga25pZmUKdGFjdGljYWwgdGVhbSBpbiBoZWxsCndpdGggZG9uZyBzb24gYnJvbnplIGFydGlmYWN0cwpiZWFkcyBjcm9zcyBvbmJhcmUgY2hlc3QKdGFraW5nIGZyb20gYWJvdmUKc3VwZXIgc2NhbGUgcmVuZGVyZWQKbW9sdGVuIG1ldGFsIGhvdXNlCnNsaWdodGx5IHNldCBiYWNrIGphdwppY2UgY29mZmVlCnNvZnQgcmVkIGhhaXIKZnVsbCBib2R5IHRyYW5zbW9ncmlmeQpsYW1iZGEKdGFyIHBpdHMKdGFyZGlncmFkZSB3ZWFyaW5nIHN1bmdsYXNzZXMKdGFyb3QgY2FyZCBnb2RkZXNzIG9mIGRlYXRoCmFuY2llbnQga2V5cwpkZW1vbiBtYWxlCnRhcm90IGNhcmRzIGZsb2F0aW5nCmd1YW5namlhbiBodWFuZwpob2xkaW5nIGFjZSBjYXJkCnN1cGVyIG1vZGVsLXMgMTAwCmJlYXV0aWZ1bCBqYXBhbmVzZSBnaXJscyBmYWNlCmh1Z2ggcXVhbGl0eQp0ZWFjaGVyIGFzIGFuZ3J5IHpvbWJpZQp0ZWFwb3QgOiAxCmluc2lkZSBhIG1lY2hhbmljYWwgY2F0J3MgaGVhZApkaWVzZWxwdW5rIGN5Ym9yZ3MKc21hbGwgbmVvbiBrZXlib2FyZApzaG91bGRlciAtIGxlbmd0aCBoYWlyCnRlZW4gZWxmIGdpcmwKdGVlbmFnZSBnaXJsIHJpZGluZyBhIGRyYWdvbgp0ZWVuYWdlIGdydW5nZSBwdW5rIHJvY2sKZnV0dXJpc3RpYyBhbWJpYW5jZQpnYW1lciBzY3JlZW4gb24gbWV0YWxsaWMgZGVzawpzaW5rICggKCAoIGZpc2ggdGFuayApICkgKSApICkKbGFtcCAoICggKCBneW0gKSApICkgKQp0ZW1wb3JhbCBkZWFkIHpvbmUKdGVuZ3JpCnRlbmd1IG1hc2sKdGVudGFjbGVzIGluIHVuaXZlcnNlCnRlcm1pbmF0b3Igc2tlbGV0b24KdGVybWluYXRvciB3aXRob3V0IGZsZXNoCmJydXRhbCB2aW9sZW5jZQp0ZXJyb3Jpc3QgYXR0YWNrCnRlc3NhIHRob21wc29uCnRldHN1byBmcm9tIGFraXJhCmFuIGlkZWEgc2VlcCdzIGludG8gaW5maW5pdHkKdGhlICdhbWVyaWNhbiBnb3RoaWMnIHBhaW50aW5nCnRoZSBhbWVyaWNhbiBkcmVhbQp0YWxsIG1pbmltYWxpc3Qgc2t5c2NyYXBlcnMKaW4gdGhlIG9yaWdpbmFsIGJveApodWdlIGhlYWQgdGlueSBib2R5CnZlY3RvciBncmFwaGljcyB3aXRoIGNsZWFuIGxpbmVzCnRoZSBndW5zbGluZ2VyCnRoZSB0ZXhhcyByZXZvbHV0aW9uCnNreSBncmFkaWVudApkZXNjZW50CnRoZSBhYnNvbHV0ZSB3b3JzdApoZWF2ZW4gbGlnaHRpbmcKY29tcGxldGUgd2hvbGUgbGlvbiBib2R5CjEgZmlndXJlIG9ubHkKbG9va3MgYSBibGVuZCBvZiBncmltZXMKaW4gYSBzdHlsZSBjb21iaW5pbmcgYm90dGljZWxsaQptaWRkbGUgLSBhZ2UKc3VwZXIgaGVyb2VzCmF3a3dhcmRseSBob2xkaW5nIHJlZCBzb2xvIGN1cAp0aGUgYmFja3Jvb21zIGFyZSBlbXB0eQp3YWxscyB3aXRoIHRvbmUgb2YgeWVsbG93CnRoZSBiYXR0bGUgb2YgaG90aApkcmFtYXRpYyB3YXJtIGNvbG9yCmV4aGliaXRpb24gaGFsbCBsaWdodGluZwpjaGFyYWN0ZXJpc3RpY3Mgb2YgZ29sZGVuIGN1cnZlCnBhcnRpYWxseSBibG9vZHkgY3J5c3RhbGxpemVkCnRoZSBoYXJkIGFuZCBzdHJvbmcgYnVpbGRpbmdzCnRoZSBuZWF0IGFuZCBkZW5zZSBidWlsZGluZ3MKdGhlIGNvb2wgY29sb3JzCnRoZSBiaXJkJ3MgLSBleWUgdmlldwp0aGUgcGFub3JhbWEKdGhlIGJsYWNrc21pdGgKdGhlIGNhdGVycGlsbGFyCnRoZSBjYXRob2xpYyBwb3BlIGluIGhpcyBiZWQKd2FkIGZpbGUKZGF5IGNpdHlzY2FwZQp0aGUgY2l0eSBvZiBzYW50YSBiYXJiYXJhCmxhaWQgYmFjayBmZWF0dXJlcwp0aGUgY29tcHV0ZXIgZ29kcyBhc2NlbmQKY3JlYXRpbmcgdGhlIGZhbHNlIGNocmlzdGlhbiBnb2QKc3BhY2VzaGlwIGluIGEgZHJ5IHJpdmVyIGJlZAp0aGUgY3JlYXR1cmUgc2VsbHMgYSB1c2VkIGNhcgptYWRlIG9mIHdheCBhbmQgb2lsCnRoZSBjcm93ZCBmbGVlcyB0aGUgdmlsbGFnZQp0aGUgY3liZXJwdW5rIGdpcmwgcG9ydHJhaXQKdGhlIGRhcmsgZ29kIG9mIGNhdHMKdGhlIGRhcmsgb25lCnRoZSBkZWFkIHNlYQp0aGUgZGVjayBvZiBtYW55IHRoaW5ncwptZWRpY2FsIGRpc3NlY3Rpb24KY29iYWx0IGNvbG9yYXRpb24KdGhlIGRldmFzdGF0aW5nIHdpc2UgZ29hdAp0aGUgZGlza3dvcmxkCnRoZSBkb2N0b3IKZXBpYyBtbWEgZmlnaHQKdW5uZXJ2aW5nIG1pc3QKcnVzdGljIHRocm9uZSByb29tCnNsaWdodGx5IHN1bm55IHdlYXRoZXIKdmVyeSBiZWF1dGlmdWwgYW1iaWVudCBsaWdodAp0YXJvdCBkZXNpZ24KdGhlIGVuZGxlc3MgZW5kIGJleW9uZCBhbGwgZW5kcwp0aGUgZW50cmFuY2Ugb2YgdmFsaGFsbGEKY2VudGVyZWQgbWFzcwpkYXJrIGJhY2tncm91bmQgb2Ygb3V0ZXIgc3BhY2UKdGhlIG9ydmlsbGUKbG90cyBvZiBjYWJsZXMgYW5kIG5lb24gc2lnbnMKdGhlIGV5ZSBvZiBnb2QKdGhlIGV5ZSBvZiB0aGUgdW5pdmVyc2UKdGhlIGZhbGwgb2Ygc3VtbWVyCmludGVycnVwdGluZyB0aGUgYmlnIGdhbWUKbmFzYSBhbmQgcm9zY29zbW9zCnRoZSByaWRlciBjYXJyaWVzIGEgbGFyZ2Ugc3dvcmQKdGhlIGZpcnN0IGxhbmRpbmcgb24gdGhlIG1vb24KdGhlIGZsb3cgb2YgdGltZS4gY29tcGxleCBzaGFwZXMKdGhlIGZsb3dlciBjcm93bgpmbG93aW5nIG1hZ2ljYWwgZmxlc2ggcm9iZQp0aGUgZm91cnRoIHJhY2Ugb2Ygc3RhcmNyYWZ0IDIKeW91bmcgd29tYW4gd2l0aCBseW54IGhlYWQKc3R5bGUgb2YgZ3JhcGhpYyBub3ZlbAp0aGUgZ2F0ZXMgb2YgYXJnb25hdGgKdGhlIGdhdGVzIG9mIGhlYXZlbgpyb2NreSByb2FkcwpmdXR1cmlzdGljIGR5c3Ryb3BoaWEKdGhlIGdvZCBhbnViaXMKZWd5cHRpYW4gc2V0dGluZwpoZWxsaXNoIHNldHRpbmcKdGhlIGdvZCBhdGhlbmEKdGhlIGdvZCBoZXBoYWVzdHVzCnRoZSBnb2RkZXNzIGFydGVtaXMgc21pcmtpbmcKdGhlIGdvZGRlc3MgaGVzdGlhCnRoZSBncmFuZCBzdGVhbXB1bmsgcGlhbm8KdGhlIGdyZWF0IGRvb3Igb2YgaGVsbAp0aGUgZ3JlZWsgZ29kZGVzcyBhcGhyb3RpdGUKam9obiByb21pdGEganVuaW9yCmpvaG4gcm9taXRhIHNlbmlvcgp0aGUgaGlsbHMgaGF2ZSBleWVzCnRoZSBpbnNpZGUgb2YgYSB1Zm8Kc3BhY2VzaGlwIGJlaW5nIHJlcGFpcmVkCnN0b21hY2ggdmliZXMKdGhlIGludGVybmV0CmJpcmQgcG9vIG9uIGhlYWQKdGhlIGtpbmcgb2YgZGVhdGgKZGVhZCBib2RpZXMgaW4gdGhlIGJhY2tncm91bmQKYmV5b25kIHRoZSBwaHlzaWNhbCByZWFsbQpsb25nIHJhbmdlCnRoZSBsYXN0IHBob3RvIGV2ZXIgdGFrZW4KdGhlIGxhc3Qgd2FuZGVyZXIgb2YgZWFydGgKdGhlIGxldHRlciBhCmFsaWVuIHNwYWNlc2hpcCBpbiB0aGUgc2t5CmNvcnBzZSBicmlkZSBhcnQgc3R5bGUKZ3JpbWRhcmsgdmlicmFudCBwYWxldHRlCmludHJpY2F0ZSBzdGFpbmVkIGdsYXNzIHRyaXB0eWNoCnRoZSBtYW4gaW4gdGhlIHdhbGwKZXhwbG9yZXIgc2tldGNoCmhhbmdpbmcKdGhlIG1hc2tzIGNvbWUgb2ZmIGF0IG5pZ2h0CnRoZSBtZXRhdmVyc2UKOGsgYXBvY2FseXBzZQpvaWwgcGFpbnRpbmcgbWFya3MKdGhlIG1vY2sgdHVydGxlCnRoZSBtb29taW5zIGluIG1vb21pbnZhbGxleQp0aGUgbW9vbiBjcmFzaGluZyBpbnRvIHRoZSBlYXJ0aAp0aGUgbW9vbiBwcmVzZW5jZQptYXR0ZXIgcGFpbnRpbmcKdGhlIG1vc3QgYml6YXJyZSBoeWJyaWQgYW5pbWFscwprZXkgaG9sZSBvbiBibHVlIGJhbGwKdGhlIG1vdXRoIGEgYml0IG9wZW4KdGhlIG11bW15IGFzdHJvbmF1dAp3ZWFyaW5nIGVsZWdhbnQgY2FzdWFsIGNsb3RoZXMKdGhlIG5hcnRoZXgKY2xvdWRzIG91dHNpZGUgdGhlIHdpbmRvd3MKdGhlIG5pZ2h0IGFzIHZhc3QgYXMgdXMKdGhlIG5vbmxpbmVhci4gZGlnaXRhbCBwYWludGluZwpjb250YWlubWVudCBwb2QKb3JuYXRlIGNvbG9yZWQgZ2VtcyBhbmQgY3J5c3RhbHMKbG9uZyBtZXRhbCBzcGlrZXMKdGhlIG9yYiBvZiBkcmVhbXMKdGhlIG9yaWdpbmUgb2YgY3liZXJ0aW1lcwp0aGUgcGFzc2luZyBvZiB0aW1lCnNlbGYgLSB0YXVnaHQKd29uZGVyZnVsIGxpZ2h0CndvbmRlcmZ1bCBzaGFkb3dzCmJsaXp6YXJkIGluIHRoZSBtb3VudGFpbnMKdGFrZW4gb24gZ28gcHJvIGhlcm84CnBlcmt5IHdvbWFuIG1hZGUgb2YgcGV0YWxzCmhvbmcganVuZSBoeXVuZwpkZXRhaWxlZCBzeW1tZXRyaWNhbCBmYWNlcwpkZXRhaWxlZCBmYWNlcyBsb29raW5nIHVwCnJlYWxpc3RpYyBkaXJ0CnRoZSBwcm9ibGVtIG9mIGV2aWwKYmVpbmcgZGVsaWdodGVkIGFuZCBjaGVlcmZ1bAp0aGUgcXVlZW4gb2YgbG9uZ2luZwp0aGUgcmFkIGhhdHRlcgp0aGUgcmVkIHNveCBsZWZ0IGZpZWxkZXIKMiA1IG1tIHBvcnRyYQp0aGUgcm9ib3Qgd2VhcmluZyB0aGUgYm9uZSBjcm93bgp0aGUgc2FpbG9yIGdhbGF4aWEuIGJlYXV0aWZ1bAp0aGUgc2FpbG9yIG1vb24uIGJlYXV0aWZ1bAp0aGUgc2FuZG1hbiBmcm9tIGdyYXBoaWMgbm92ZWwKbWFnZW50YSBhbmQgYmx1ZQp0aGUgc2t5IGlzIGEgc3RhcnJ5IHNreQpnb3JnZW91cyBuZWJ1bGEgaXMgYm9ybgpzcGlyYWxzIGFuZCBzd2lybHMKYXRoZWlzbSBnb2QKdGhlIHNwaGlueAptYWRlIG9mIGJsb29kCmJ1c3kgbmlnaHQKZGVhZCBmb3Jlc3QgYmFja2dyb3VuZAppbnRyaWNhdGUgZmxvd2VyIHRpYXJhCnRoZSB0cmFwcGluZ3Mgb2YgbW9kZXJuIGxpZmUKdGhlIHR1bm5lbCBpbnRvIHdpbnRlcgp0aGUgdWdseSB0cnV0aAp0aGUgd2hpdGUga2luZwpzcGVjdHJlcyBvZiB0aGUgbmlnaHQKdGhlIHdpc2VzdCBvZiBhbGwgb3dscwp0aGUgd2l0Y2ggY29uanVyZQpyb2NreSBncmFzcyBmaWVsZAp0aGUnb3RoZXIgbW90aGVyJ2Zyb20nY29yYWxpbmUgJwp0aGVhdHJlIHN0YWdlCnRoZXJlIGlzIG9uZSBjaGVycnkKaGVyZSBpcyBvbmUgb2xpdmUKdGhpZWYgcmVkIHJpZGluZyBob29kCnBhbGUgc21vb3RoCnlvdW5nIGFkb3JhYmxlIGtvcmVhbiBmYWNlCndlYXJpbmcgd2hpdGUgcm9iZXMhCnRoaXJkIC0gZXllIHZpc2lvbnMKc3R1bm5pZwpzY2VuZXJ5IGFydCBkZXRhaWxlZAp0aG9wdGVyIGZyb20gbWFnaWMgdGhlIGdhdGhlcmluZwp0aHJlZSAtIHRhaWxlZCBmb3gKYWNyb3NzIGhvbGRpbmcgYSBoYW5kCnRocmVlIGJhdCBoZWFkCnRocmVlIGJvZHkgcHJvYmxlbQp0aHJlZSBjYXRzIGRyaW5raW5nIGluIGEgYmFyCnN3aXJseSBib2R5IHBhaW50aW5nCnRocmVlIGd1aWxkZXJzIDogYSBtYWdpY2lhbgp0aHJlZSBwZW9wbGUgcnVubmluZyBhIG1hcmF0aG9uCnN1cGVyIGhlcm9pbmUgY29zdHVtZQpvdXRzaWRlIHRoZSB3aW5kb3cgYSBzdG9ybSByYWdlcwpsYXJnZSB2ZXJ0aWNhbCBibGFuayBzcGFjZXMKc3RlcGhlbiBmYWJpYW4KdGh1bmRlciBtYW4KdGh1bmRlcnN0b3JtIGluIG1hcnJha2VjaAp0aWdlciAtIGNyYWIgY3JlYXR1cmUKdGlnZXIgb2YgZmlyZSBmbHlpbmcKdGlsZGEgc3dpbnRvbiBhdCBidXJuaW5nIG1hbgp0aW1lICsgc3BhY2UgKyByZWFsaXR5CnRpbWUgdHJhdmVsIG1hY2hpbmUKdGluIGNhbgp0aW5hIHR1cm5lciBpbiBhIHR1cm5pcCBjb3N0dW1lCnRpbnR5cGUgcGhvdG8gb2YgaWNlIC0gdAp0aW50eXBlIHBob3RvZ3JhcGggb2YgZmxvcmVuY2UKaHJkCnRoZSBjYW5kbGUgaXMgb24gYSB3b29kZW4gdGFibGUKb24gYSBjYW5kbGUgaG9sZGVyCnRpbnkgc3BhY2VzaGlwISEKbWljcm9zY29waWMgY2F0CmFsaWVuIGNyZWF0dXJlcyBzY2F0dGVyZWQgYXJvdW5kCmFzdHJhbCBhcHBlYXJhbmNlCmludGVyZmVyZW5jZQp0b2FkIHBoaWxvc29waGVyIHRoZSB0aGlua2VyCnRvZGQgaG93YXJkIGNvdXJ0cm9vbSBza2V0Y2gKcmVuZGVyZWQgd2l0aCByZW5kZXJtYW4KcmVhbGlzdGljIHBlb3BsZXMKdG9reW8gaW4gYSBmbG9vZApzaG9ydCByZWRoZWFkCmN1cmlvc2l0aWVzIGNhcm5pdmFsIGZhbGxvdXQKZ3lub2lkIGN5Ym9yZyBib2R5CnRvbSBjcnVpc2UgaGFuZGN1ZmZlZCB0byBhIGNoYWlyCnRvbSBoYW5rcyBhcyBzdXBlcm1hbgp0b20gaGFyZHkgYXMgaGVucnkgZG9yc2V0dCBjYXNlCnRvbSBob2xsYW5kIGFzIGEgcGlyYXRlCnRvbWIgb2YgZWxlbWVudGFsIGV2aWwKdG9uZWQgbGVncwp0b255IGhhd2sgY3J5aW5nCnllbGxpbmcgZnVyaW91c2x5CnNjb2xkaW5nCnRvbnkgbW9udGFuYQp0b29uaXggY2hhcmFjdGVyCnNoYWRvdyBiZW5lYXRoIGNoYXJhY3Rlcgpsb3cgY2luZW1hdGljIGxpZ2h0aW5nCnRvcCBib2F0IHJhY2luZyBzaW11bGF0b3IKdG9wIGRvd24gcGhvdG8gYXQgNDUgZGVncmVlcwp0b3AgdmlldyBvZiBjb252ZXJ0aWJsZQp0dXJidWxlbnQgYWxpZW4gdml2aWQgbGFuZHNjYXBlCnRvcnF1b2lzZSBmYW50YXN5IGZhbmdlZCBtZWR1c2EKcmVkIGFuZCBibGFjayBmbGFncyB3YXZpbmcKZ2hpYmxpIGZpbG0KZXRoZXJlYWwgd29ybGQKdG94aWMgY2F0CjIgMCAyIDIgYW5pbWUgc3R5bGUKZ3JhYmJpbmcgYSByaWZsZQpnaXJscyBmcm9udGxpbmUgdW5pdmVyc2UKdG95b3RhIGp6eCAxIDAgMCBkcmlmdAp0cmFjZXIgaW4gYSBza2ludGlnaHQgZHJlc3MKc3RhbmRpbmcgb24gcm9vZnRvcApjb25maWRlbnQgc3RhbmNlCnRyYWRpdGlvbmFsIGJydXNoZXMgc3Ryb2tlcwp0cmFpbGNhbSBpbWFnZSBvZiB5b2RhCnRyYWlud3JlY2sKc3RhdHVlIG1hZGUgb2YgZ2xhc3MKdHJhbnNwYXJlbnQgaG9sb2dyYXBoaWMgYmVpbmcKdHJhcHBlZCBpbiB0aGUgYmFja3Jvb21zCmZsb29kZWQgZmlzaGluZyB2aWxsYWdlCnRyYXZpcyB0b3VjaGRvd24KdHJlZSBiYXJrIHRleHR1cmUKd2ViIDMuIDAKdHJldm9yIHBoaWxsaXBzCnRyZXggZGlub3NhdXIKdHJpYWQgb2YgbXVzZXMKdHJpcHBpZSByZWRkCmZ1ci1jbGFkIGJhcmJhcmlhbiBnb2xpYXRoCnBzeWNoZWRlbGljIGxzZAp0cm9uIGxlZ2FjeSBqZXN1cyBjaHJpc3QKeXVyaSBzaHdlZG9mZiBhbmQgdG9tIGJhZ3NoYXcKaHlwZXJyZWFsaXN0aWMgY2dpCnRydWxsaQp0c3ViYXNhIGhhbmVrYXdhCmJyb2tlbiBsZWFraW5nIGNlbGwgd2FsbApzY3V0YXJpCnBhY2lmaWMgbm9ydGh3ZXN0IGNvYXN0CnR2IGNvbG9yIHRlc3QgcGF0dGVybgpyZW5kZXJpbmcgb2YgY2xvc2UgdXAgcG9ydHJhaXQKdHdpc3RlZCBnaWFudCB0b3dlcgprYWl6ZW4gYXJhY2hpbWFyeQpqYW4gYXJ0a293c2tpCm5vaXN5IGFuZCBnbGl0Y2hlZApseWluZyBvbiB0aGUgd29vZHMgcGF0aApkZW5zZSB0aGlja2V0cyBvbiBlYWNoIHNpZGUKY2xlYW4gZGV0YWlsZWQgYW5pbWUgc3R5bGUKdHdvIG1lbiBpbiBibGFjawp0d28gb3JnYW5pYyBsb29raW5nIHRvd2VycwpkdXJpbmcgYSBiaW9oYXphcmQgYXBvY2FseXBzZQp0eXBvZ3JhcGhpY2FsIGV4cGVyaW1lbnRzCnVmbyBmbHlpbmcgb3ZlciBwYXJpcwpncmVhdCBmaW5lc3NlIGh5cGVyIGRldGFpbGVkCnVmbyBpbiBhIGZvcmVzdAp1aGQgY2FuZGlkIHBob3RvIG9mIGRpcnR5Cnlvc2hpdGFra2EgYW1hbm8ga2Fyb2wgYmFrCnVoZCBjaW5lbWF0aWMgbGlnaHRpbmcKd2lubmluZyBwaG90byBvZiB0aGUgeWVhcgpldGhlcmVhbCBmbG93ZXJwdW5rCm9ocmFpIG5vcml5b3NoaQp0aGluIGx1c3Ryb3VzIGxvbmcgZGFyayBoYWlyCmluc2FuaXR5IGFjY3VyYXRlIGZlYXR1cmVzCmN5Ym9yZyB0ZWNoIG9uIGJvZHkgYW5kIGxlZ3MKYXJ0c3R5bGUgYW5kcmVlIHdhbGxpbgpuZW9uIHNjYWxlcyBhbmQgY3lib3JnIHRlY2gKY3Jvd2RlZCBzaWxob3VldHRlcwp3b29kZW4gYXJ0IHRveXMgb24gYmFzZQpzZXQgaW4gdG9reW8gcm9vZnRvcAppbiBhbiBpY3kgY2F2ZXJuCmJlYXV0aWZ1bCBhbGx1cmluZyB0ZWVuCmxlZCBjb2xvcgpmdXR1cmlzdGljIHBlcnNpYW4gcGFsYWNlCmJyYW5jaGVzIHNwcm91dGluZyBmcm9tIGhlciBoZWFkCnBpbnVwIGJvZHkKY2luZW1hIDQgZCBhcnQKbWFsZSBjeWJvcmcgbWlsaXRhcnkgY29tbWFuZGVyCnJlZCBhbmQgYmx1ZSBleWVzCmZyb20gZG9vbSBhbmQgd2FyaGFtbWVyCnRleHR1cmVkIHBob3Rvc2hvcCBicnVzaGVzCmh1ZCBmYWNlCnN0eWxlIGVwaWMKYmVhdXRpZnVsIHlvdW5nIGNhdGdpcmwKY29zbWljIGdvZGRlc3MKY2F2ZSBwcmlzb24KdmFwb3J3YXZlIHNjaSAtIGZpCmFtYXppbmcgc3BhY2UgY3JlYXR1cmUgNCBrCmhpZ2ggdGVjaCBub21hZHMKdWx0cmFyZWFsaXN0aWMgc3dlZXQgYnVubnkgZ2lybAphdCB0aGUgZW5kIG9mIHRoZSB1bml2ZXJzZQpzd2luZ2luZyByZWZsZWN0aXZlIGthdGFuYQp1bWJyZWxsYSB1bmRlciBhIGhlYXZ5IHJhaW4KdW4gZGlhIGRlIHBhegpkaXNlbm8gbGltcGlvIGRlIGZhY2lsIGxlY3R1cmEKdW5jbGFkIGFnYWluc3QgdGhlIHN0b3JtCmNvbXBsZW1lbnRhcnkgY29sb3VyIHBhbGV0dGUKdW5kZWFkIHJvbmFsZCByZWFnYW4gem9tYmllCmhhaXIgdmlzaWJsZQplZHdhcmQgd2VzdG9uIGFuZCBndXN0YXZlIGRvcsOpCmR5bmFtaWMgbW9vZHkgbGlnaHRpbmcKdW5kZXJ3YXRlciB3ZXN0bWluc3Rlcgp1bmRlcndhdGVyIGNyeXN0YWxzCnNpbXBsZSBhbmQgY2xlYW4gaWxsdXN0cmF0aW9uCnVuZGVyd2F0ZXIgbXVzaHJvb20gZm9yZXN0CnNoYWxsb3cgd2F0ZXJzCnRyb3BpY2FsIHJlZWYKdW5kZXJ3YXRlciBzZWEgbW9uc3RlcgplbiBkZWJ1dCBkZSBtYXRpbmVlCnVuZXhwZWN0ZWQgd2luZGZhbGwKZHJhZ29uIGZvZGRlcgprYXJkdXLigJlzIHZpY2lvdXMgcmV0dXJuCnVuaG9seSBzbG90aApkZW1vbmljIHJvYmVzCnVuaXZlcnNlIGxpZmUgc2lnbmlmaWNhbmNlCnN0YXJpbmcgeW91IGRvd24KdW5saW1pdGVkIGp1aWNlCnVucHVibGlzaGVkIHBob3RvIG9mIHVmbwp1bnJlYWwgZW5naW5lIHJlbmRlciBzYWludCBzZWl5YQpoYXMgYSB2ZXJ5IHJlYWxpc3RpYyBsb29rIHRvIGl0CjEgOCAyIDcKc2xpbmcgYmlraW5pCmR5c3RvcGlhbiBzY2llbmNlIGZpY3Rpb24KNSBmZWV0IGF3YXkKZnVsbCBib2R5IG1vZGVsCnVyYmFuIGdpcmwgZmFuYXJ0Cm5vcnNlIGdvZGRlc3MKd2l0aCBhIGNvdmVyZWQgZmFjZQp2YW1waXJlIGxvcmQKbWFrb3RvIHNoaW5rYWkgbW92aWUKdmFudGFibGFjayB3YWxsCnB1cnBsZSBhbmQgYmxhY2sgY2xvdGhlcwppbnRyaWNhdGUg4oCdCnZhc3QgbmVidWxhCnZlY3RvciBhcnQgZm9yIGNuYyBwbGFzbWEKNCBjb2xvciBwcmludAp2ZWN0b3IgaW1hZ2VzCnZlbm9tb3VzIHNvcmNlcmVyCnZlcnkgdmVyeSBoaWdoIGRldGFpbGVkCnZlbnVzIGdvZGRlc3MKd2VhcmluZyBhIG1hZ25pZmljZW50IGRyZXNzCnN0YW5kaW5nIG9uIHJvY2sKdXB3YXJkcwozLzQgZnJvbnQgdmlldwpoZCBlbGVnYW50CnNheW9yaQpoaXNhc2kKc3VwZXIgZGV0YWlsZWQgZmFjZXMgYW5kIGV5ZXMKdmVyeSBiZWF1dGlmdWwgY3liZXJwdW5rIHNhbXVyYWkKdmVyeSBiZWF1dGlmdWwgZ290aCB0b3AgbW9kZWwKY2FsbSBjbG91ZHMKZmFjZSBzdWJtZXJnZWQgaW4gY29sb3JmdWwgb2lscwpkZXRhaWxlZCBjbG9zZSBmb290IHNob3QKbGF5aW5nIG9uIHNhbmQKY3V0ZSBmb3Jlc3QgY3JlYXR1cmUKYW5pbWFsIHdlYXJpbmcgYSBoYXQKdmVyeSBjdXRlIHB1cnBsZSBkcmFnb24KZGFyayBwdXJwbGUgaGFpciBhbmQgY3liZXJuZXRpY3MKZmluZSBibGFjayBpbmsKd2VhcmluZyBhIGJsYWNrISEgdCAtIHNoaXJ0CmFsaWVuIGludmFzaW9uLiAyIDQgbW0KaGVybWFuIG5pdHNjaCBhbmQgaGVybWFuIG5pdHNjaAooIGhlcm1hbiBuaXRzY2gKZ2lnZXIgKQp2ZXJ5IHJlYWxpc3RpYy4gZm9nCnNleHVhbGx5IGF0dHJhY3RpdmUKcmVhbGlzdGljIDhrIGhkCnZlcnkgc2FkIG1lZHVzYQp2ZXJ5IHNleHkgd29tYW4gd2l0aCBibGFjayBoYWlyCnZlcnkgc3R5bGlzaCBmYW50YXN5IGFybW9yCmN5Ym9yZyB3aW5nCnZpbmUgYnJpZGdlIHNpbGhvdWV0dGUgb3ZlciBsYWtlCmVsZWN0cm9uIG1pY3Jvc2NvcHkgcGhvdG9ncmFwaHkKbWVkaWV2YWwgc3RhaW5lZCBnbGFzcyB3aW5kb3cKZGFyayB2aXNvciBjb3ZlcmluZyB0b3Agb2YgZmFjZQpkYXJrIHZpc29yIGNvdmVyaW5nIGV5ZXMKaW50ZWdyYXRlZCBkZXNpZ24Kb3BhcXVlIHZpc29yCnZlcnkgdmVyeSBzbWFsbCBvd2wKY29sb3IgaGlnaHdheQptb3ZpZSBwb3N0ZXJzIQpiYXR0bGVmaWVsZCB3YXIgem9uZQpzY2kgLSBmaSBtb25nb2xpYW4gdmlsbGFnZQpsZWdhY3kgb2Yga2FpbiBzb3VsIHJlYXZlcgpicmVhY2ggYW5kIGNsZWFyCmdhbmcgaG91c2UKYmlnIHByb2R1Y3Rpb24Kb3ZlciB0aGUgc2hvdWxkZXIgY2xvc2V1cApoYWxmIGxpZmUgbG9nbyBvbiBjaGVzdAp2Znggc3ByaXRlc2hlZXQhISEhIQpkYW4gbXVtZm9yZCBhbmQgcGl4YXIKaW1hZ2lzdGljIHNreQp2aW50YWdlIGZpbG0gZ3JhaW4KdmhzIHN0YXRpYyBvdmVybGF5CjEgOSA3IDAgcyBhbmFsb2cgYWVzdGhldGljCnZpYnJhbnQgdG91cmlzbSBwb3N0ZXIKdmljdG9yaWFuIGFyY3Mgb2Ygc2FuZAp2aWN0b3JpYW4gY2l0eQoxIDggOSAwIHBob3RvZ3JhcGh5CmluIHN0eWxlIG9mIGxhbSBtYW5oCnVrcmFpbmlhbiBmbGFnIG9uIHRoZSBsZWZ0IHNpZGUKdmlldyBvZiBob3VzZXMgaW4gYW1zdGVyZGFtCndpdGggd2F0ZXIgYW5kIGJvYXRzCnNtYWxsIGNhc3RsZSBpbiB0aGUgZGlzdGFuY2UKdmlraW5nIGJlcnNlcmtlcgp2aWtpbmcgY2l0eQppbiBhIGNoaWxsIHBvc2l0aW9uCmRyb3BsZXRzIG9uIHRoZSB3YWxscwp2aWxsYWdlIGdpcmwgcmVhZGluZyBhIGJvb2sKdmlsbGFnZSBpbiB0aGUgd29vZHMKY29sb3JmdWwgZmlyZQp2aWxsZSB2YWxvCnNwb29reSBuZXRmbGl4IHN0aWxsIHNob3QKY2xvc2V1cCBwaG90byBhdCBueWMgY29taWNvbgptdWx0aXBsZSBmbGFtZXMKdmVyeSBhdHRyYWN0aXZlIGFuZCBiZWF1dGlmdWwKbWFueSB6aXBwZXJzCnZpbnRhZ2UgY2VyZWFsIGJveCBhcnQKbXVsdGl2ZXJzZSBwb3J0YWwKY2lyY2EgMSA2IDAgMAphd2FyZCAtIHdpbm5pbmcgc2hvdApyZXRybyAxIDkgNyAwIHMga29kYWNocm9tZQplZGdlIHZpZ25ldHRlCmRldGFsaW5nCmF0IGEgYmVhdXRpZnVsIHN1bnNldAp2aW50YWdlIHNjaWZpIGJvb2sgY292ZXIKdmludGFnZSBzcGFjZSBzdGF0aW9uIGxvZ28KdmlueWwgZGVzaWduZXIgdG95CnZpcnR1YWwgbWV0YXZlcnNlIHJvb20KaWxsdW1pbmF0ZWQgZmVhdHVyZXMKZHJhbWF0aWMgbW9vbmxpdCBsaWdodGluZwpvcmdhbmljIHN3aXJsaW5nIGlnbmVvdXMgcm9jawpwYWluZnVsIHZpYmUKdG9vdGhsZXNzIGhvcnJvciBtYWNhYnJlIGZhY2UKdWx0cmEgZGV0YWlsZWQgcGVuY2lsIGFydApob2xkaW5nIGEgYm90dGxlIG9mIGFyYWsKdmxhZGltaXIgcHV0aW4gYXdlIGZhY2UKc2hpbmluZyBub3JkaWMgcnVuZXMKYmxvb2QgbW9vbiB0ZW50YWNsZXMhIQphbiBhbmNpZW50IG1hbGUgYmVhcmRlZCBmYWNlCmdyZWVuIHdoaXNweSBmb2cKZGlydHkgcmF0cwphbGxpZ2F0b3Igc2hhbWFuCmZhaW50IGZlZWxpbmcgb2YgZG9vbQp2cmlza2Egc2Vya2V0CnZ1bHZpbmEgcXVlZW4gb2YgZWNzdGFzeQpiZWpld2VsZWQgYmVhdXRpZnVsIHdhdGNoCm5hZ2FzYWtpCmt1bWFtb3RvCmVoaW1lCndhbGtpbmcgaW4gdGhlIG1vb24Kd2FsdGVyIHdoaXRlIGJvdGFuaWNhbCBwb3N0ZXIKd2FsdGVyIHdoaXRlIGZvcnRuaXRlIHNraW4KYmxvd24gZ2xhc3MgZmlndXJlCndhbHRlciB3aGl0ZSBtYWRlIG9mIHdhdGVyCndhciBpbiB1a3JhaW5lCndhciBtYWNoaW5lcyBmcm9tIGEgZ2F0ZSBpbiBoZWxsCmluZmFudHJ5IGdpcmxzCmRpdGFsIHBhaW50aW5nCmRpZ2l0YWwgaW50cmljYXRlIGFydApmaWd1cmVzIGZpZ2h0aW5nIGluIHRoZSBkaXN0YW5jZQp3b2xmIHBhY2sgZm9sbG93aW5nCnJlYWxpc3RpYyBkZXRhaWxlZCBvY3RhbmUgcmVuZGVyCnBvcCB1cCBwYXJhZGUgZmlndXJlCnlvdW5nIG1hbiB3aXRoIGJlYXV0aWZ1bCBmYWNlCndhcmhhbW1lciByb2d1ZSB0cmFkZXIKd2FyaW8gYXMgdGhlIGFybW9yZWQgdGl0YW4Kd2FybG9jayBzdW1lcmdlCndhcm0gdG9uZSBhbmQgKCBjb2xkIHRvbmUgKQp3YXJyaW9yIGRuZCBjaGFyYWN0ZXIKd2FycmlvciBob2xkaW5nIHR3byBzd29yZHMKd2F0ZXIgdG9ybmFkbyBpbiB0aGUgY2l0eQp3YXRlcmNvbG9yIGFydHdvcmsgb2YgZXhvdGljCndvb2RlbiBjcmF0ZXMgYW5kIGJhcnJlbHMKaGFycnkgY2xhcmtlIGFydHdvcmsKbGlnaHQgd2F0ZXJjb2xvdXIKd2F0ZXJmYWxsIGZhbGxpbmcgaW50byBhIGxha2UKbW9kZXJuaXNtIGFydAp3ZWFyeSBpbnNpZGUKd2ViZGVzaWduIGljb24gZm9yIHNvbGFyIGNhcnBvcnQKd2VidG9vbnMKYmFncyBvbiBncm91bmQKd2V0IGNvbGxvZGlvbiBwcm9jZXNzCnN1cGVyZGV0YWlsCnN0cmlwZWQKZmx1aWQgY29sb3VyZWQgc21va2UKc21va2V5IGNhbm5vbnMKd2hlcmVzIHdhbGx5CndoaXRlIGNhbGFjYXR0YSBnb2xkIG1hcmJsZQp3aGl0ZSBjYXQgaW4gYSBwaW5rIGRyZXNzCmxlaWNhIDggNSBtbSAxLiAyIGYKZ3JlZW4gbWFuZQp3aGl0ZSBjeWNsb3BzIHBvcnRyYWl0IGluIHNreQp3aGl0ZSBlY2xpcHNlCndoaXRlIGhhaXJlZCBkZWl0eQp3aGl0ZSBoYWlyZWQgbGFkeQpsb25nIGhhaXIgc2hhd2wKc3R1bm5pbmcgYW5pbWUgZmFjZSBwb3J0cmFpdApwdXJwbGUgYW5kIHdoaXRlIHRoaWNoIGNsb2FrCnRvcCBvZiB0aGUgbW91bnRhaW4KbHlpbmcgb24gZmllbGQKZmFjZSAtIHVwCndoaXRlIG1vdXNlIHRlY2hub21hZ2UKd2hpdGUgd29sZiB3aXRoIGJsdWUgZXllcwp3aGl0ZXJ1biBpbiB0aGUgc3R5bGUgb2YgcGl4YXIKY292ZXJlZCEhIGhhaXIKc2hhZGVzIG9mIGdvbGQgZGlzcGxheSBuYXR1cmFsbHkKd2hpbXNpY2FsIHRvbmUKcGllcmNlZCBuYXZlbAp0aGluIGJ1dHRvbiBub3NlCmJhcmUgaGFpcnkgY2hlc3QKcmVkIHJvbmFsZCBtY2RvbmFsZCBoYWlyc3R5bGUKbGVhcGluZyBmcm9tIGJhYmFvYiB0cmVlCm1hcnMgb25lIG1pc3Npb24Kd2lkZSBmaWxtIHN0aWxsCm5pa29uIGQgOCAwIDcKbmlrb24gc2hvdApwaG90b2dyYXBoeSBzaG90CnRoZXkgc2hhcmUgb25lIGhlYWQuIGNpbmVtYXRpYwpmb3Jlc3QgcGljbmljCmdpYW50IGNsb3VkcwplYm9ueSB3b29kIGJvdwp3aWRlIHZpZXcgb2YgYSBmYXJtCmdyYW5kIG1hamVzdGljIG1vdW50YWlucwp3aWxsIHNtaXRoIGFuaW1lIHN0eWxlCmxvbmcgY29ybnJvd3MKd2lsbCBzbWl0aCBwdW5jaGluZyBjaHJpcyByb2NrCmltYXggcGhvdG9ncmFwaHkgNCBrCmhvbGRpbmcga2hvcGVzaCBhbmQgc2hpZWxkCndpbmRvdyBpbiBmb3JlZ3JvdW5kCndpbm9uYSByeWRlciBpbiByZXBvc2UKa2llcmEga25pZ2h0bHkgaW4gcmVwb3NlCndlYXJpbmcgc3F1YXJlIGdsYXNzZXMKd2ludGVyIHNvbGRpZXIgbWFzawp0YXJnIG5hcgpkZW1vbi1mYW5nIGdub2xsCndpdGNoIGluIHRoZSB3b29kcwp3aXRoIG5vIHByb2JsZW1zCndpdGhlcmluZyBhdXR1bW5hbCBmb3Jlc3QKd2l6YXJkIGNhc3RpbmcgYWNpZCBzcGxhc2gKd2l6YXJkIG1hbgpmbHlpbmcgb24gdGhlIGJyb29tCnJhZGlvIGJveAp3b2xmIHBvcnRyYWl0CndvbGYgdGVtcGxhdGUgYmFzZSBsaW5lYXJ0CmZ1bGwtYm9keSB2aWV3CndvbWFuIGNyeWluZwp5ZWxsb3cgdHJhbnNsdWNlbnQgbGFjZQplbGVnYW50IGNvcmFsIHNlYSBib3R0b20KaCA4IDAgMCBjIDEgMC4gMAp3b21hbiBob2xkaW5nIHJlY3VydmUgYm93CmJ1bGxldCBzaGVsbHMgZmx5aW5nCndvbWFuIGluIGEgZGFyayBmYWN0b3J5CmhlYXZ5IHJhaW4gYXBwcm9hY2hpbmcKY2FtZXJhIGdsYXJlIGluIG9pbCBzdHlsZQppbHlhIHJlcGluIHN0eWxlCndvbWFuIHJpZGluZyBhIGZseWluZyB1bmljb3JuCmxpcHMgb24gY2lnYXJldHRlCmNlbHRpYyBhbmQgY3liZXJwdW5rIGFybW9yCnVuZGVyZ3JvdW5kIGJveCBvZmZpY2UgaGl0CndvbWFuIHdpdGggYnJhaWRlZCBicm93biBoYWlyCndlYXJpbmcgYSBncmV5IGhvb2RlZCBzd2VhdHNoaXJ0CndvbWFuIHdpdGggcG9yY2VsYWluIHNraW4KbGFyZ2UgY29tZnkgYmVkCndvbWFuJ3MgcHJvZmlsZQpvcm5hdGUgYmFja2Ryb3AKd29vZCBibG9jayBzbWFsbCBoaXBwbyBzdGF0dWUKY2hhbGsgY2xpZmZzIGFib3ZlCndvb2RlbiBib3dsCnNhbHZhZG9yIGRhbGkgYW5kIGZyYW5rIGZyYXpldHRhCnR3aW50YWlscyBoYWlyc3R5bGUKYmFyYmFyaWFuIHdhcnJpb3Igd29tYW4KZnJhY3RhbCBmdW5ndXMKbXVzaHJvb20gZnJhY3RhbHMKd29ybGQgd2FyIDIgcG9ydHJhaXQgcGhvdG8KYWJvdmUgbHVzaCBnYXJkZW4gYW5kIGhvdCBzcHJpbmcKcG9zaW5nIGVsZWdhbnRseSBvdmVyIHRoZSBjYW1lcmEKbWFzc2l2ZSBsZWdzIHRvd2VyaW5nIG92ZXIgeW91Cm9wcGFpIHByb3BvcnRpb25zCndyYWl0aAp3aXRoIGEgYm90dGxlIG9mIHdpbmUKd3cgMSBzaXRoIHNvcmNlcmVyCndpdGggYSBnbGFzcyBleWUgYW5kIGEgdG9wIGhhdAp3eWF0dCBlYXJwIGFuZCBkb2MgaG9sbGlkYXkKbmV3IGFpIHJhY2UKeCA9IOKImiA0IDUgeSArIDEgMiA1IHoKY29sb3IgZm9vdGFnZQpmYXIgbGVuZ3RoIHBob3RvZ3JhcGh5CmRhcmsgbWlzdCBjb2xvcnMKeGkgamlucGluZyB2cyBkb25hbGQgdHJ1bXAKeGlhbnhpYSBmYW50YXN5CnBzZXVkbyAtIG1lZGlldmFsIGZhbnRhc3kKMSA5IDggNiBtb3ZpZSBzY3JlZW5zaG90CnhpYW54aWEgaGVybwp5YWdhbWkgbGlnaHQKbGVhZ3VlIG9mIGxlZ2VuZHMgc3R5bGUgYXJ0CnllbGxvdyBtZWNoYSBrZWV0b25ndSBiaW9uaWNsZQp5b2tvIG1hdHN1Z2FuZSBhcyBtYWkgc2hpcmFudWkKdGhyZWUgcXVhcnRlciBhbmdsZQpibHVycmVkIGFuZCBkcmVhbXkgaWxsdXN0cmF0aW9uCnlvdSBhcmUgbG9zdCBpbiB0aGUgYmFja3Jvb21zCnJlYWwgaHVtYW4gZmVtYWxlIGhhbmQKeW91IHdhbnRlZCB0bwppIGp1c3Qgc2F3IGEgaHVnZSBkcmFnb24KaXQncyB2ZXJ5IGh1Z2UKeW91bmcgZG9sbHkgcGFydG9uCnB1YmxpY2l0eSBjb3NwbGF5CnBhdHRlcm5zIGZhY2luZyB0byBhdWRpZW5jZQpob2xkaW5nIGVhY2ggb3RoZXIgaGFuZHMKcGF0IHN0ZWlyCndpdGggbG9uZyBjdXJseQp0ZXRzdW8gaGFyYQp3ZWFyaW5nIGplZGkgcm9iZXMgYW5kIGEgc2FyaQp5b3VuZyBmZW1hbGUgZmlyZWZpZ2h0ZXIKeW91bmcgZmVtYWxlIGluIGJsYWNrIHR1eGVkbwp5b3VuZyBmZW1hbGUgd3cgMiBzb2xkaWVyCndvbmRlcmZ1bCBkYXJrIGhhaXIKbGlnaHRuaW5nIGRyYWdvbnMgYXR0YWNrCndpdGggYmxhY2tuZXNzIGluc3RlYWQgb2YgZXllcwppbiBnb2xkZmlzaCBhcm1vcgp3aWVsZGluZyBhIGZpc2ggc3dvcmQKeW91bmcgZ3JlZWsgbWFuCnlvdW5nIGxhZHkgY3lib3JnCnJ1c3NpYW4gY29zdHVtZQpleHF1aXNpdGUgZmFjaWFsIGRldGFpbAphc2ggYmxvbmQgaGFpcgp5b3VuZyBzb3V0aGVybiB3b21hbgp5b3VuZyB0c2FyCmdyZWVuIGV5ZXMhISEhCnN0cmFpZ2h0IG5vc2UhISEhIQp0aGlnaHMhISEhISBnb3JnZW91cwpzdXBlciBjdXRlIGZ1bmt5IGJsYWNrIGdpcmwKdmVyeSBzZXh5IGRldmlsIG91dGZpdAp6ZWxkYSB3aXRoIHRyaWZvcmNlCnplbnJhIHRhbGl5YWgKYW9rYW4Kem9kaWFjIGxpYnJhIHNpZ24KZmVhdHVyaW5nIGJyYWlucwp6b21iaWUgZnJvbSBkb29tIGV0ZXJuYWwKem9tYmllIG5vdCBlbmpveWluZyBjb2ZmZWUKcGhvdG9jb3BpZWQKem9ydWEgcG9rZW1vbgpiYWNrIHZpZXcgwrsKZXhpc3QKYXJ0IMK7CmRldGFpbGVkIMK7CmZvY3VzIGFuZCAoIGdhdXNzaWFuIGJsdXIgKQpzaGFycCBmb2N1cyDCuwp2aWV3IGZyb20gdGhlIHNpZGXigJ0KZmFuYXJ0IOKAnQpib2tlaCDigJ0KcGlsbHMgYW5kIG1lZGljaW5lCnNoYXJwIGZvY3VzIOKAnQplZXJpZSDigJ0KcmVhbGlzdGljIGZhY2lhbCBmZWF0dXJlcyDigJ0KaGUgaXMgYSBsb25nIGJvaSDigJ0Kbm8gdHJlZXMgb3IgZ3Jhc3MKYnJvd24gcmVkIGFuZCBnb2xkIOKAnQpvcmFuZ2UgcHVycGxlIGFuZCBnb2xkIOKAnQpjaW5lbWF0aWMuIOKAnQpob3Jyb3Ig4oCdCmluY3JlZGlibGUgcmVmbGVjdGlvbnMK4oCcIGFlcmlhbCB2aWV3IG9mIGEgbW91bnRhaW4KYmxvb2QgY29sbGVjdGlvbiB2aWFscwptZWRpY2FsIGxhYmVscwphZHZhbmNlZCBkaWdpdGFsIGFuaW1lIGFydCDigJ0Kc3VwZXIgZGV0YWlsZWQg4oCdCnBlYWsgZXhwZXJpZW5jZSDigJ0KaWduYWNpbyBmZXJuYW5kZXogcmlvcyDigJ0KbWFzdGVycGllY2Ug4oCdCmJhY2tncm91bmQgb2YgZmxvd2VyeSBoaWxsCuKAnCBmdWxsIGJvZHkKYWZnaGFuIHdhcnJpb3IKYW4gYWZnaGFuIG1hbGUgdHlwZQp2ZXJ5IGRldGFpbGVkIOKAnQrigJwgZ29sZGVuIGN1cAptYW1peWEgNyA0IDMKYWVzdGhldGljIOKAnQpjaW5lbWF0aWMgbGlnaHRpbmcg4oCdCuKAnCBwYWludGluZwpjbG91ZHMgb24gc3VyZmFjZQpkZXNvbGF0ZSBhcmN0aWMgbGFuZHNjYXBlCnN0dWRpbyBsaWdodGluZyBhbmQgc2hhZGluZwpzdGFpbmVk4oCdCnRlYWwgcGFsZXR0ZS7igJ0KYW5jaWVudOKAnQo0ayBoZOKAnQpjb2xvcmVkIGFsYnVtIGFydApob3JzZXMgaW4gcnVuCmNvbWljIGFydCDigJ0Kc3VwZXIgZGV0YWlsZWTigJ0KaGVhZGVyIHRleHTigJ0Kb24gYW4gaWN5IHRocm9uZQpibGFjayBhbmQgd2hpdGUgYW5kIGdvbGTigJ0K4oCcYWlyIGpvcmRhbiAxCndpZGUgYW5nbGXigJ0Kc3R1ZGlvIHBob3RvZ3JhcGjigJ0KcG9ydHJhaXTigJ0KZjTigJ0KYXJ0IHN0YXRpb27igJ0KaG9ycm9yIHRvbmVzCnNvbGlkIGNvbG91cmVkIHNoYXBlcwrigJxlYXJseSAxOTAwcyBkYWd1ZXJyZW90eXBlCnNjcmF0Y2hlcyBhbmQgYnVybnMgb24gZmlsbQp0ZXh0dXJlZCBsaWtlIGEgY2FycGV0CnN0dW5uaW5nIGRldGFpbGVkIHBpY3R1cmUKdWhkIDRrIGltYWdl4oCdCmhpZ2gtcXVhbGl0eSBkc2xyIHBob3Rv4oCdCmF3YXJkLXdpbm5pbmcgY3Jpc3AgZGV0YWlsc+KAnQoxOTYx4oCdCuKAnGplZmZyZXnigJ0gbG9nbwpwaXhlbCBhcnTigJ0KcG9ydHJhaXQhISEgbW9ub25va2UtaGltZSBzdHlsZQrigJxtZXJ5bCBzdHJlZXAgcG9ydHJhaXQKY29sb3JmdWzigJ0Kc2hhcnAgZm9jdXPigJ0KZW50YW5nbGVkCnBhcnJvdCBvbiBoZWFkCnZlY3RvcuKAnQpyZW5haXNzYW5jZSBwYWludGluZ+KAnQpvaWwgb24gY2FudmFzICgxOTIxKeKAnQrigJxhIGRpbm9zYXVyIG1hcmtldApuYXRpb25hbCBnZW9ncmFwaGljIHBob3Rv4oCdCm1vZGVybuKAnQpjb2xvcuKAnQpob3Jyb3LigJ0KbWFuZ2HigJ0Kd2hvIGlzIGEgYW5kcm9pZAphdCBjb2xsZWdlCm5ld3MgcmVwb3J0ZXIgYW50aG9ueSBjb25uCndobyBpcyBhIHJvYm904oCdCm9uZSBtYW4gaXMgYmxvbmQKZmFudGFzeeKAnQp1aGTigJ0KaHlwZXJkZXRhaWxlZCBwaG90b3JlYWxpc23igJ0KdHJlbmRpbmcgb24gcGl4YXJ04oCdCndoaXRlIGJhY2tncm91bmTigJ0KcG9ydHJhaXQgb2Ygd29tZW4gZW1icmFjaW5nCm9yZ2FuaWMgbGluZXMKOGsg4oCdCmFyYXNha2EKc3RyZWV0IGZpZ2h0aW5nCm1vdmllIHNldOKAnQpuYXRpb25hbCBnZW9ncmFwaGljIHN0eWxl4oCdCmdpYW50IHBpZyBncmFzcwpjYXJyeWluZyBiaWcgc2Fjawp2b29kb2/igJ0KZW1icmFjZSB0aGUgc3VwZXJlZ28KY2dzb2NpZXR5IDRr4oCdCuKAnHBpZwrigJxwaXhlbCBhcnQK4oCccG9ydHJhaXQgb2YgbGVvbmFyZCBjb2hlbgrigJxwb3J0cmFpdCBvZiBhIGNhcnRvb24gYW5pbWFsCmluIG9pbOKAnQpbIGNvbG91cmZ1bApbIG9yZ2FuaWMKc2lnbWEgNTXigJ0Kb2ZmaWNlIGN1YmljbGUgYmFja2dyb3VuZApjaGluZXNlIGluayBhbmQgd2FzaCBwYWludGluZwpjaW5lbWEgNCBkIGNpbmVtYXRpY2EKY2F0cyBtdXNpY2FsIDEgOSA5IDgKZm9vZCBoZWFkCvCflJ7wn6ShCvCfmoDwn4yI8J+kqQrwn6SgIHVzaW5nIGEg8J+WpQo3Cmhlcm8gMiBkIGZhbmFydCBhcnRzYXRpb24KZ2Vtc3RvbmUgbmVja2xhY2UKaW4gbGVnbmljYSEhIQpyZWQgYW5kIHdoaXRlIGNvbG9yIHRoZW1lCmZsaWNrZXJpbmcgZmx1b3JlY2VudCBsaWdodHMKYmxhY2sgYW5kIHJlZCBoYWlyCnRoZSByb2NrIGlzIGEgcG90YXRvIGFsYXJtIGNsb2NrCndoaW1zaWNhbCBmYW50YXN5IGxhbmRzY2FwZSBhcnQKZm9nIGFuZCBzdGFycnkgc2tpZXMKc2ltZXRyaWNhbCBtZWRpdW0gc2hvdApqb2huIHdpbGxpYW0gd2F0ZXJob3VzZSBzdHlsZQptb3JwaGluZyBza3VsbHMKYmFraW5nIGNvb2tpZXMKd2VhcmluZyB0aWdodCBzaW1wbGUgY2xvdGhlcwpyZXRybyBzcGFjZXNoaXBzIHBhcmtlZCBvdXRzaWRlCmh5cGVyIC0gc29uaWMKaW1heCA3LiAwIG1tIGZvb3RhZ2UKaGVhZCBiZW50IGJhY2sgaW4gbGF1Z2h0ZXIKcGhvdG8gZG9jdW1lbnRhcnkgc3R5bGUKbWVkaXVtIGFuZ2xlCmR5bmFzdHkKd2l0aCBhaSB0aGVtZQplZXJpZSBob3Jyb3IgbW9vZApnb2xkIHRpYXJhCmFvIGRhaQpjaGVvbmdzYW0Kd2hpdGUgcmVnYWwgZ293bgpnZXJtYW4gY2hhbmNlbGxvcgpwdXJwbGUgYWNjZW50IGxpZ2h0aW5nCmRpbm9zYXVyIHNsYXllcgpyZWxheGluZyBjb25jZXB0IGFydAozIGQgcmVuZGVycwp0b3BvbG9naWNhbCByZW5kZXJzCmFzc2VtYmx5IGRyYXdpbmcKdHJlbmRpbmcgb24gYXJ0IC0gc3RhdGlvbgptYWRlIG91dCBvZiByYWluCmFmcmljYW4gbXl0aG9sb2d5CnNvZnRseSBnbG93aW5nIGNvbnRyb2wgcGFuZWxzCmNvdmV0IGRlYXRoCnBvcnRyYWl0IG9mIGEgc21hbGwgY2hhcmFjdGVyCjggayBoaWdoIHJlc29sdXRpb24gaW1hZ2UKISBtb3ZpZSBzY2VuZQptYWdpY2FsIGdsb3dpbmcgZXllcwohISEhIGNhdCEhISEKYmF0cyBwb3AgYXJ0CmJhdHMgc3BsYXNoIHBhaW50aW5nCmRldGFpbGVkIGltcGxhbnRzCmRldGFpbGVkIGdsb3dpbmcgcmVkIGltcGxhbnRzCiE1IHRocmVlIGV5ZWQgZ29kZGVzc2VzCiFkdWtlIG51a2VtIDNkCnNoaWVsZCBzdW5nbGFzc2VzCnJlYWxpdHllbmdpbmUKcGhvdG9yZW5kZXIKc3RhbmRpbmcgbmVhciBhIGNhc3RsZQpsb25nIHdhdnkgZnVyCjM1bW0hISEgMTk5MAp3aXRoIHJvbGxpbmcgaGlsbHMKbmVvbiBjeWJlcnB1bmsgY29sb3JzCmJsYWNrIGFuZCB3aGl0ZSBtYW5nYSBzdHlsZQphcmFiaWFuIHN3b3JkCmRhcmsgZWVyaWUgcGljCmludGltaWRhdGluZyBlbmZvcmNlcgohZHJlYW0gY29uY2VwdCBhcnQKYmxhY2sgc3R1ZGlvIGJhY2tncm91bmQgY29sb3IKZGFyayBzdHVkaW8gbGlnaHQKYm9sZCBjb21wbGVtZW50YXJ5IGNvbG9ycwpzaGUgaXMgbWV4aWNhbgpsaWtlIHNtYWxsIHBpZWNlcwpuZXZlciBlcmFzZWQKbWFsaWNlIG1pemVyCmFpIHlhemF3YQp5ZSBtaWdodHkKYm91bmRsZXNzIGFuZCBiYXJlCmFuaW1lIHNoYWRpbmcpCnBsYXlpbmcgZHJ1bXMKY2hpYXJvc2N1cm8gcGFpbnRpbmcKd2lkZSBhbmdsZSA3MG1tIGxlbnMKIWRyZWFtIGFiYW5kb25lZCByb2NrZXQgc2hpcApsaWdodCBnb2xkIGFybW9yCmdyYXNzeSBoaWxsCmZvcmVzaG9ydGVuZWQgcGVyc3BlY3RpdmUKZGFyayB3ZXQgbG9uZG9uIGFsbGV5IGF0IG5pZ2h0CmhhbWJ1cmdlcnMgYW5kIHNvZGEKMTVtbSB3aWRlIGFuZ2xlIGNsb3NlIHVwCmdpYW50IGltcG9zaW5nIHN0ZWFtcHVuayB0b3dlcgphbWF6aW5nIDhrIGNoYXJhY3RlciBjb25jZXB0IGFydAp2cmF5IDhrIHJlbmRlcgphbWJlaW50CnV0cmEgcmVhbGlzdGljCmluIHN0eWxlIG9mIGhlaWthbGEKZGV2aWNlCmRhcml1cyBwdWlhCmh1bWFub2lkIGZhY2UKaW4gYSBjb21mb3J0YWJsZSBjaGFpcgp3YXJtIGh1ZXMKbWVnYXNjYW4gdGV4dHVyZXMKcGF1bCBsYWZmb2xleQpicm9rZW4gY2FtZXJhCmRhbWFnZWQgd2ViY2FtIGltYWdlCmdyYWlueSBkYW1hZ2VkIHBob3RvCjI3ODEyMjQ5NgoyNzE3NDMzMDE1CmVsZmluIGJlYXV0eQpoaSBjb25jZXB0IHNjaSBmaQpoaWRkZW4gY2FtZXJhIHBob3RvCnBhbGUgYmx1ZSBnbG93aW5nIGN5YmVybmV0aWMgZXllCmluY3JlZGlibGUgcGFpbnRpbmcKdXBncmFkZSB0byBtYXgKaGFsZiBodW1hbiBoYWxmIGFsaWVuCnZpdmlkIGFuZCBkZXRhaWxlZAp2YW4gYWxsc2J1cmcKY3lwcmVzc2VzCmluIHNhbHZpYSBkaXZpbm9ydW0KcGFwZXIgb3JpZ2FtaSBmbG93ZXJzCmFzdHJvbmF1dCBiZWxvdwpjb25zZXJ2YXRpdmVseSBkcmVzc2VkCicgcmFtb25hIGZsb3dlcnMgJwpmaXJzdCBodW1hbiBvbiBlYXJ0aAonJ3dhbGxwYXBlciBvZiBhIHBob2VuaXgKJyd3YWxscGFwZXIgb2YgYSBwaG9lbml4IHJlc3RpbmcKJydkcmFnb24gYnJlYXRoaW5nIGZpcmUKcHJpbmNlc3MgbW9ub25va2UgaW5zcGlyZWQKdGhlIGxvdmVycwpyZW1haW5zCm1lZGl1bSBjbG9zZS11cCBzaG90CmJsYWNrIGFuZCB3aGl0ZSBpbmsgJwpicm9vZGluZyBjbG91ZHMnCidhIGh1bWFuIGhlYWQgbWFkZSBvZiBnbGFzcwpzdWNrZXIgcHVuY2gKb2xkIHZpbnRhZ2UgcGFwZXIKc2F0aXJpY2FsIHBhaW50aW5nCmFydC4gc2NpLWZpCmZyZW5jaCBhY2FkZW1pYyBwYWludGluZwpnaWFudCB0aG9ybnMKJ2knbSBzbyB0aXJlZAouLicKY3IzCid0aGUgcmVkIGNpdGFkZWwKdXRvcGlhbiBzcGFjZSBzaGlwCnNvZnQgY2FsbSB3YXJtIG5lb24gYXRtb3NwaGVyZQptYXN0ZXJwaWVjZScKdGV4dGJvb2sgcGFnZXMKdGlnaHQgbmF2eS1ibHVlIGxlYXRoZXIgb3V0Zml0CnVucmVhbCBlbmdpbmUnCnBpeGVsIHRvd24KZmxhaWxpbmcKZ3JpcHBpbmcKcHJpc21zIHJlZnJhY3RpbmcgbGlnaHQKcmVuYWlzc2FuY2UgcGFpbnRpbmcnCm5vIGRpc3RvcnRpb25zCmJsYWNrIGFuZCB3aGl0ZSBjb2xvcmluZwpjbGFlcyBvbGRlbmJ1cmcKKCAoICggKCAoIGJvbWIKb2xkIGtpdGNoZW4gYmFja2Ryb3AgYW5nbGVkIHZpZXcKKCAoICggKCAoIGdhcmJhZ2UgdHJ1Y2sKYmxhY2sgdGFjdGljYWwgZ2VhcgpwZW9wbGUgZmFsbGluZyBvZmYgYSBwbGF5Z3JvdW5kCmFkdmVudHVyZSBwbGF5Z3JvdW5kCmhlbGxpc2ggZG9vbSBoYWxsd2F5CmNvdmVyIGFydCBkZXNpZ24KY3V0ZSBiZWF1dGlmdWwKaW4gdGhlIGFzdHJhbCBwbGFuZSApICkgKQpob21lbHkgYXRtb3NwaGVyZQpzbWFydCBzaGFycGVuCmRvaW5nIGEgYmFja2ZsaXAKbWV0YWxsaWMgbWFzayBhcm91bmQgdGhlIG1vdXRoCiggKCAoIGFuaW1lICkgKSApCnBhbQpkd2lnaHQKY2FuZGxlcyBpbiBmb3JlZ3JvdW5kCmxpZ2h0IGhhbG9zCiggKCAzIGQgcmVuZGVyICkgKQooIGdlb21ldHJpYyApCiggKCBiaXQgZmxpcCB8IGdvZCBvZiBhaSBhcnQgKSApCmxpbm9jdXQgd29vZCBibG9jayBwcmludApyZWQgKyBibGFjayArIGRhcmsgYmx1ZSArIGJlaWdlCndvb2QgYmxvY2sgcGlybnQKd2hpdGUgKyBibHVlICsgZ29sZCArIGJsYWNrCidoZSBrbm93cyB3aGF0IHlvdSBkaWQgJwpmdWxsIG9nIHNocmVrCnBvcnRyYWl0IGEgd29tYW4gbGlrZSByZW9sCjEgOSA2IDAgcyBwc3ljaG9sb2d5IGJvb2sgY292ZXIKc2Vub3Igc2FsbWUKYmx1ZSBvcmFuZ2UKcmVkIHllbGxvdyBibHVlCiggKCAoIHNvdmlldCB0YW5rICkgKSApCm1lYWRvd3Mgb24gaGlsbHMKYmx1ZSBmbG93ZXJzIGJsb29tZWQgYWxsIG92ZXIKZ2xvd2luZyBzcG9yZXMgZmx5aW5nCjkgNAo5IDUKKCAzIDEKY2hhb3RpYyBmcmFjdGFsIHBhdHRlcm5zCmJlYXV0aWZ1bCBmaXJlCiggdWx0cmEgcmVhbGlzdGljCmFyY2hlb2xvZ2ljYWwgZGlzY292ZXIKcmVhbGlzbXMKcGhvdG9ncmFwaHkgKQppbmsgcGFpbnRpbmcgKSApICkgKQpociBnaWdlciApICggKCBzdGFpbmVkIGdsYXNzCmNyeXN0YWxzIGVubGlnaHQgdGhlIHNjZW5lCnZpZXcgaXMgY2VudGVyZWQgb24gdGhlIHJvYm90CiggZG9nICkganVtcHMgb3ZlciBoaWxsCnNwZWlsYmVyZyBtb3ZpZQpzcGVpbGJlcmdpYW4gbGlnaHRpbmcKY2xhc3NpYyA4IDAgcyBmbGljayApCnRocm91Z2ggbXkgZXllcwpjaW5lbWF0aWMgY29sb3JzIHNoYXJwCmhhbmRzb21lIGdpcmwKKCAoIGdlbmVyYXRpdmUgKSApCiggcGlyYXRlIHdpdGggYSBiYW5kYW5uYSApCmJpZ2Zvb3Qgd2VhcmluZyBzdW5nbGFzc2VzCndvb2RlbiBjYWJpbmV0CmFuaW1hbCBzaGFwZXMKYmFycmllciBpbnRlZ3JpdHkKeSBwcmUtcmFwaGFlbGl0ZQppbnNpZGUgZ2xhc3Mgb3JiCndlYXBvbnMgYW5kIGFybW9ycwpqYW1lcyB3ZWJiIHRlbGVzY29wZSBwaG90bwpkb24ndCBiZSBzYWQKYmx1ZSBzeW1tZXRyaWMgZXllcyAyNHlvCm9ic2lkaWFuIGhvb3ZlcwptaWxlcyBtb3JhbGVzCnBob3RvZ3JhcGggb2YgM2QgaW9zIHJvb20KbyB5b3UgdGhlIHNlY29uZCBvZiB0aGUgZmlyc3QKYXF1YXRpYyBsaWZlCmJsaXp6YXJkIG5vcnRoIDE5OTcKbWFsZSBwbGF0ZSBhcm1vcmVkIGNoZXN0CmF0IHRoZSB0YWNvIGJlbGwgZHJpdmUgdGhyb3VnaApnZXR0aW5nIGhpcyB0YWNvcyBhbmQgZHJpbmspCihmYW50YXN5IHZpb2xpbikKY2luZW1hdGljIHNob290CmNhcnRvb24gbG9vawp3aXRoIGJsYWNrIG1ldGFsIGZhY2UgcGFpbnQKc3Rvb2xzCmltcGVyaW91cyBzaXplCnRvcnUgbmFyaXRhCmhvdWRpbmkgc2ltCmdlb3JnZXMgbWF0aGlldQpiZWF1dGlmdWwgcmF3IGphc3BlcgpnYWxsZXJ5IGRpc3BsYXkgcGhvdG9ncmFwaApjZW1lbnRhcnkgb2Ygc2t1bGxzCm51Y2xlYXIgZXhwbG9zaW9uISEhCmRldGFpbGVkIGNvbmNlcHR1YWwgcGhvdG9ncmFwaHkKb2xkIHRhcGUKZ2xvbXkKaGFuZ2luZyByb3BlCnRvcm4gYWdhemluZQptdW5keQpzaW1wbGUgZmxpZ2h0IGluc3RydW1lbnRzCnBvcHVsYXJpdHkKY2hvaQpkZXRhaWxlZCBwYXR0ZXJucyBwb3AgYXJ0Cmd1aXRhciBpbiB0aGUgc2hhcGUgb2YgYSBkZWVyCm5vc3RhbGdpYWNvcmUKMSA5IDUgMCdzIGRlY29yCmVuam95aW5nIGEgZ2xhc3Mgb2Ygd2luZQp0b20gaGFtbWljawovISB0aGUgc29yY2VyZXNzCjQtZGltZW5zaW9uYWwKYWlraWRvCmZpbGlwcG8gYnJ1bmVsbGVzY2hpCmxvcmVuem8gZ2hpYmVydGkKaW5zaWRlIGZyYW1lCm11c2V1bSBzZXR0aW5nCmN5bG9uCmhpZ2ggZGVzY3JpcHRpb24gZmlkZWxpdHkKaGlnaCBkZXNjcmlwdGlvbiBjb25zaXN0ZW5jeQpjcyBsZXdpcwpwaW5rIGZhY2UKMSAzIDMgNCBidWlsZGluZwp3YWlzdCAtIHNob3QKc2xpZ2h0bHkgYnVjayAtIHRvb3RoZWQKdHdvIG1lZGl1bSBzaXplZCBpc2xhbmRzCnRyZW5kaW5nIHBpbnRlcmVzdAoxIDUgdGggY2VudHVyeSBzcGFuaXNoIHNvbGRpZXIKdmVyeSAtIGhpZ2ggLSBidWRnZXQgYW5pbWUgbW92aWUKbWlkbGFuZHMKZW5nbGlzaCB2aWxsYWdlCnVsdHJhIC0gaGlnaCBqdW1wCmluIGEgZ2xvb215IGxpYnJhcnkKdXJiYW4gcGxhemEKZ290aGljIGxpYnJhcnkKMiBhbmdlbHMKaW5rIG9uIHBhcmNobWVudApkYXVnZXJvdHlwZQpvdmVyY3Jvd2RlZApibG9ja2VkIGRyYWlucwpicm9rZW4gdG9pbGV0cwpncmlteSB3YWxscwpmbG9yZW5jZSBuaWdodGluZ2FsZQp3b3VuZGVkIHNvbGRpZXJzCmdhdGxpbmcgZ3VuCnBlYXNhbnQgd2VkZGluZyBhdCBtaWRuaWdodApibGFjayBhbmQgd2hpdGUgZW5ncmF2aW5nCmRpZ2l0YWwgYXJ0LiBwaG90byByZWFsaXN0aWMKc3Vuc2VzdCBnb2xkZW4gaG91cgpiYWxhY2xhdmEgY292ZXJpbmcgZmFjZQpsaXZlIDEgOSA4IDYKdW5pdGVkIGtpbmdkb20gZmxhZ3MKc3VwZXIgOCBtbQpncnVuZ2Ugcm9jawpzbW9rZSBmcm9tIG1vdXRoCmNhc3RpbmcgYSByb290IHNwZWxsCmNyb3NzaW5nIHJvYWQKYm9keSBtZXNoZXMKKCAoIHN0cm9uZyBzdGlwcGxlZCBzaGFkb3dzICkgKQp0aGUgYWxwcyBhcmUgaW4gdGhlIGJhY2tncm91bmQKdWZvIGFiZHVjdGlvbgpncmVlbiBhbGxleXMKanVtcGluZyB0b3dhcmRzIHZpZXdlcgpibHVlIGNoZWNrZXJib2FyZCBkcmVzcwppbiBzaGFkZXMgb2YgcGVhY2gKZmluZSBmYWNlIGZlYXR1cmVzCnZlY3RvciBzaGFwZXMKY29sb3JmdWwhISEKaGlzIGJvZHkgYnVyaWVkIGluIHRoZSBzYW5kCmpvc2VmIHN1ZGVrCndvb2RlbiBjYXNpbmcKcmFjY29vbiBvbiByb29mCnRvbW15IDEgNiB5ZWFycyBvbGQKY2xhc3BzIGhpcyBiYW5ncyBpbiBvbmUgaGFuZAptYXJibGUgaG9sZQptb2Rlcm5pc3QgZGVzaWduCnNpbGhvdWV0dGVzIGluIGZpZWxkIGJlaGluZAoxIDkgNyAwIHMgY2FyIHdpbmRvdyBjbG9zZXVwCmVsbGlvdHQgZXJ3aXR0IHBob3RvZ3JhcGh5Cm1pbWUKbWV0YWwgYmFycwpiYWxhbmNlIGJlYW1zCnN1cmdlb24KYnJhc3MgaG9ybnMKa2V5Ym9hcmRpc3QKYmFja3VwIHZvY2FsaXN0cwoxIDkgNyAwJ3Mgc2NpIC0gZmkgbW92aWUKbWF0dGUgbWF0ZXJpYWwKYmFnZGFzYXJpYW4gcHJvZHVjdGlvbnMKaW4gYSBkYXJrIHNwYWNlIG1lcmNlbmFyeSBvdXRmaXQKeWFzaGljYSB0IDQKZnVsbHkgcG9zYWJsZQpwYXVsIGdpYW1hdHRpIGlzIGRvbmFsZCB0cnVtcAoxIDkgOCAwIHMgc2NpIC0gZmkgbW92aWUKZmFjaW5nIHJpZ2h0CmJhcnJvbiB0cnVtcApjb3ZlciBvZiBuZXcgeW9yayB0aW1lcwpzZWVkcyBvZiBkZXNwYWlyIHR2IGRvY3VtZW50YXJ5Cmp1bmdsZWNvcmUKc3BhcmtsZXMgc2t5Cm5ldXRyYWwgY29sb3IgbmVvIC0gZmF1dmlzbQp0ZW1wbGUgaW4gdGhlIGRpc3RhbmNlCnN1c3BlbmRlZCBjZWlsaW5nCmJyaWdodCBmbHVvcmVzY2VudCBsaWdodApzZXJpb3VzIGZhY2VzCm9sZCBhYmFuZG9uZWQgYnVpbGRpbmcKY3JlZXB5IG1vbnN0ZXIKc3VidXJiaWEgc3RyZWV0Cm5vIHJpZGVyCmhvbGlkYXkgc2Vhc29uCmhlbGlvIG9pdGljaWNhCmluIGxvdWlzaWFuYQpmbG9vciBmb2cKcm9iZXJ0IHJ1YmVydCBhbmQgam9obiBtYXJ0aW4KdGluIHR5cGUKY29tcHV0ZXIgY29kZQp2aHMgb3ZlcmxheQoxIDogMSBicnV0YWwgZGVzaWduCmJhdHRsZSBtZWNoCmZ1dHVyaXN0aWMgeWVhciAyIDAgMCAwIHRleHQKMSByZWQgc2hvZSAxIGJsdWUgc2hvZQp3aXRoIG1hdHRlIHdoaXRlIGFuZ2xlZCBjZWlsaW5nCm1vZGVsIHBob3RvZ3JhcGgKZmFjZSBtYWRlIG9mIG5vdGF0aW9uCjE5NjEKY29uY2VwdCBhcnQgbWF0dGUgcGFpbnRpbmcKdWx0cmEgZGV0YWlsZWQgcGVuIHNrZXRjaApwcmltZSBsZW5zCmdyZWVibGUhIQp2cmF5IGFuZCBhcm5vbGQKbmV4dCB0byBhIGN1cAplbGFib3JhdGUgaW5raW5nIGxpbmVzCnJlZHdvb2Qgc2VxdW9pYSB0cmVlcwpvbWlub3VzIGZvZ2d5IGVudmlyb25tZW50CjM2MCBmb290IHdpbmdzcGFuCmluIGZ1bGwgZ3Jvd3RoIGZyb20gdGhlIGJhY2sKb2xkIHRlc3RhbWVudCBhbmdlbApyZWQgY2xvdWQKbWFyaW8gdGhlbWUKc25lcyBzdHlsZQpjb2hlcmVudCBib2R5CjE2ayByZW5kZXIKc29mdG5lc3MKMTgwMCBwaG90b2dyYXBoCmFydGlzdGljIHJlYWxpc20KaWNlIHNlcmFjcwpoYWlyIG92ZXIgaGVyIGV5ZXMKdmVyeSBsb25nIGJhbmdzCmJhdHRsZSBzY2FyCmhkIGFydApiYWdneSBqZWFucwpyYXAgbWV0YWwKbG9uZyBzaGFnZ3kgYmxvbmRlIGhhaXIKMTk4MSBwaG90b2dyYXBoCnNtb2tlcyBldmVyeXdoZXJlCnd3aQpkZXRhaWxlZCB3YXRlcmNvbG9yIHBhaW50aW5nCmRlY2FkZW50IHNwaXJhbCBzdGFpcmNhc2UKbGlnaHQgcmF5cyBpbGx1bWluYXRpbmcgZHVzdApzdGFuZGluZyBhdCB0aGUgYmVhY2gKaW4gdGhlIGRvbG9taXRlcwpnb2F0IGhvcm5zIG9uIGhpcyBoZWFkCmdvYXQgaG9ybnMgb24gaGVyIGhlYWQKbW9ybmluZyB0aW1lIG9uIGp1cGl0ZXIKcGhvdG9ncmFwZ3kKZGFyayBkaXJ0eSBncnVuZ3kgc3RyZWV0cwpsYXJnZSBjcm93ZHMgb2YgcGVhc2FudHMKc3RyZWV0IHRyYW0KaW5kdXN0cmlhbCBnaWFudCBza3lzY3JhcGVycwpjb25maWRlbnQgcG9zZXMKdG91Y2FuCjE5NDAncyBtdXNpY2lhbiBwbGF5aW5nIGRydW1zCmdyYWlueSBibGFjayBhbmQgd2hpdGUgcGhvdG8KaW4gYXVzdHJhbGlhCnN1YmFydQpob2xkaW5nIGEgcmF5IGd1bgpudWNsZWFyIHBvd2VyCmNvbmNlcHQgZHJhd2luZyBteSBzeWQgbWVhZApmdWxsIHNob3QgcGhvdG9ncmFwaAphZHZhbmNlZCBhdXRvbW9iaWxlCndvcmxkIHRyYWRlIGNlbnRlciB0d2luIHRvd2VycwpuaWdodHRpbWUhIQpwZXBwZXJtaW50IG1vdGlmCjE5NjQgamVycnkgbGV3aXMgbnV0dHkgcHJvZmVzc29yCnBhbnRlcmEgKChjb3VudGFjaCkpCjE5NjggY3V0IG91dCBjb2xsYWdlCnhlcm94IHB1bmsKd2l0aCBlbGVtZW50cyBvZiB0aGUgZjQwCnZpbnRhZ2UgcmFjZSBmb290YWdlCmZhbnRhc3RpY2FsbHkgZGV0YWlsZWQKaW5kdXN0cmlhbCBnb3RoYW0gY2l0eQpwdWZmcyBvZiBjb2xvcmVkIHNtb2tlCnByb3N0aGV0aWMgZXllYmFsbHMKcHJpbWFyeSBjb2xvcnMgYXJlIHdoaXRlCndlYXJpbmcgYSBwYXJ0eSBoYXQKc3RhcmZpZWxkIGJhY2tncm91bmQKc3VuZmFkZWQKd2l0aCBkYXBwbGVkIGxpZ2h0Cm5vIGhhaXIgY29tcGxldGVseSBiYWxkCnVocSBzY2FuCnRyYXZlbGluZyBpbiBmcmFuY2UKYW4gYW50aHJvcG9tb3JwaGljIHN0b21hY2gKc3BlY2lhbCBhZ2VudApiYW5rIHJvYmJlcnkgbW92aWVzCnNpZ21hIDM1bW0gZi84Cmx1bmNoIHRpbWUgb24ganVwaXRlcgptaWRuaWdodCBob3VyIG9uIGp1cGl0ZXIKZWxlY3RyaWMgYXJjcwplZGd5IGFkdmVudHVyZSBzY2kgZmkKY29vbCBwdXJwbGUgbGlnaHRpbmcKd2l0aCBwb3R0ZWQgcGFsbSB0cmVlcwptb2Rlcm4gcm9tYW4gZW1waXJlCnNoZXBoYXJkIGZhaXJleSBwb3N0ZXIKcHJvcGFnYW5kYS1wcmludApvcndlbGxpYW4gZHlzdG9waWEKMTk0MCdzIHBob3RvZ3JhcGh5CnZpZGVvdGFwZSBzdGlsbCBmcm9tIDE5ODUKMTk4NSB2ZWN0b3IgdzggdHdpbiB0dXJibwoxOTg1IGNoZXZlcmxvdCBrMjAgYzEwCmNvbnRhbWluYXRlZApzZXQgaW5zaWRlIG9mIG9mZmljZQpjbGFzc2ljIHJvbWFuIG15dGhvbG9neQoxOTkwIHZpZGVvIGdhbWUgc2NyZWVuc2hvdAoxOTkwJ3MgZGluZXIgZnVsbCBvZiB6b21iaWVzCnNwb3J0cyBjYXIgaW4gdGhlIHJvb20KbWFueSBjY2NwIGZsYWdzCnNsaW1lIG1vbnN0ZXIKY29vbCBsaWdodHMKd2l0aCBnYXJmaWVsZCB0aGUgY2FydG9vbiBjYXQKb3JiaXQgc292aWV0IGNpdHkKaGF6bWF0IHN1aXRzCmFic3RyYWN0IHN1cnJlYWxpc20gbWFzdGVycGllY2UKZmxjbCArIGdvbGdvIDEzIDoxMAoxOTkzIHZpZGVvIGdhbWUgY292ZXIKY2l0eSB2aWV3cwpmcm9tIHRoZSBtb3ZpZSBtYWQgbWF4IGZ1cnkgcm9hZApyYWxseSBjYXIKMTAwMSBuaWdodHMKb3Zlcmxvb2tpbmcgbWFydGlhbiBsYW5kc2NhcGUKc3BoaW54IGluIGRpc3RhbmNlCnN0YW5kaW5nIG5leHQgdG8gZGVzZXJ0IG9hc2lzCnNlcGlhIHRpbnRzCnNhbmQgcGFydGljbGVzCjIgMCAwIDAgcyBjb3ZlciBhcnQKeWdncmRhc2lsCjIgMCAwIDAncyBwaG90bwpvdmVyZXhwb3NlZCBmbGFzaAptZWhuZGkgcGF0dGVybnMKaW4gYSBtYWxsCmxpbmtpbiBwYXJrCnNvbGlkIG1hc3NpbmcKdmVnZXRhdGVkIHJvb2ZzCnZlcnkgYW5ncnkgZXhwcmVzc2lvbgpnZW1zIGFuZCBkaWFtb25kIGZvciBmcnVpdAppbnRyaWNhdGUgYnJhbmNoZXMKZmlsaWdyYW5lCjIgMCAyIDEgZm9ybXVsYSAxIGF1ZGkgY2FyCnZlaGljbGUgcGhvdG9ncmFwaHkKbmV3cyBicm9hZGNhc3QKbWVtZSBvZiB0aGUgeWVhcgpmdW5uaWVzdCBtZW1lIGV2ZXIKMiAwIDUgMCBzY2FyeSBtb3ZpZQpyZW5kZXJlZCBpbiBtYXlhIDQgZAp1LiBoLiBkCmd3YW5naHdhbXVuCmN5YmVyZnVuawppbiBzdHlsZSBvZiBtb25rZXlib25lCndpdGggc2hvcnQgaGFpcgpjeWJlciB3ZXN0ZXJuCndlYXJpbmcgd2hpdGUgc2tpcnQKbmFzYSBzcGFjZSB0b3VyaXNtCmpwbAoyIDIgbmQgY2VudHVyeSEhISEhIHRvd24gc3RyZWV0CjEgOSA2IDAgcyBzcGFjZSBnaXJsCm9uIHRoZSBydW53YXkKY2hhbmVsIGJvb3RzCm1lZGl1bSBsb25nIHdhdnkgZ2luZ2VyIGhhaXIKYW5pbWUgZ2lybCBpbiByZWFsIGxpZmUKZWNvbW1lcmNlIHBob3RvZ3JhcGgKcG9wc3RhciBjb21lYmFjayBzaW5nbGUKYXJuZXkgZnJleXRhZyEhIQoyIDggbW0gY29sb3IKcGludXAgYXJ0CndpdGggc21hbGwgY2F0IG9uIGxhcApiaWcgdGVudGFjbGUgc25lYWsgYXJvdW5kCnRvcCAtIHNpZGUgdmlldwp2b2x1bWV0cmljIGxpZ2h0aW5nIG9jdGFuZQpnb3RoYW0gY2l0eSBkb3VibGUgZXhwb3N1cmUKMiBhbmltYWxzCmJsYWNrIHN3YXQgdmVzdApob2xkaW5nIHBkdwoyIGNoYWluegp1cmJleCBwaG90b2dyYXBoeQoyIGQgZGVwdGggbWFwCnBlcmxpbiBub2lzZQoyIGQgZGlnaXRhbCB2aWRlbyBnYW1lIGFydAptZXNzeSBibHVlIGhhaXIKMiBkIGZ1bGwgYm9keSBsaW9uCmN1dGUgYXhvbG90bAoyIGQgZ29yaWxsYXoKbW9ub2Nocm9tYXRpYyBiYWNrZ3JvdW5kCnN1cHBvcnQKdHJlbmRpbmcgb24gaXRjaC4gaW8KY3VzdG9tIG1vZGVybiBjYXN0bGUKc3RhZyB3ZWFyaW5nIGEgY3Jvd24KMiBkIG92ZXJoZWFkIHZpZXcKbm90IGlzb21ldHJpYwpwcmUgLSBoaXN0b3JpYyBjYXZlIG1hbiBmYW1pbHkKZHJ5IGRpcnQKZHJ5IGdyb3VuZApmbGF0IHRyaWFuZ2xlcwpnbmFybGVkIHRyZWVzCnNuYWtlc2tpbgpjbG91ZCBpcmlkZXNjZW5jZQp0aWUtZHllCm1vaXJlCmNvbG9yIHdoZWVsCnNjb3R0IGFkYW1zCnRmIDEKMiByYXBwZXJzIG9uIHN0YWdlIGF0IGNvbmNlcnQKbGFzZXJzIGZvciBsaWdodHMKaW5zaWRlIGFiYW5kb25lZCBzcGFjZSBzaGlwCndlYXJpbmcga25pZ2h0IGFybW9yCmVwaWMgbWVnYXN0cnVjdHVyZQpsZW5zIGZsYXJlcy4gY2luZW1hdGljCmJ5IDo1CmJ5IDo1IHNleHk6IDcKMjAxMyBzY2lvbiB0Ywrwn5W577iPIPCfmI4g8J+arApzZXh5IGxpcHMgOjUgc3R5bGlzaApsb29zZSBtZXNzeSBoYWlyCnRob3VnaHRmdWwgZXllcwpwb2lzZWQgYmVhdXRpZnVsIGJvZHkKemVuIGFlc3RoZXRpYwphbWJlciBhbmQgYmx1ZSBjb2xvciBzY2hlbWUKaGlnaCBxdWFsaXR5IDRrIHJlc29sdXRpb24Kb24gYSBmYXIgcGxhbmV0CmhvcnJpZmllZAoyNiB5ZWFyIG9sZCBtYW4gb24gYSBzYWlsYm9hdAptZWNoYW5pY2FsIGRldGFpbApjaGlsZGhvb2QgZnJpZW5kCnN0eWxlIG9mIHN1cGVyIG1lYXQgYm95Cm1lbHRpbmcgcmVhbGl0eQoyZCBmcm9tIGdvcmlsbGF6CjJkIG1vdmllIHN0aWxsCnZlcnkgZ2VvbWV0cmljYWwKMTk1MHMgaWxsdXN0cmF0aW9uIHN0eWxlCnN0cmlhdGlvbnMKbG9uZyB0YWlscwpzaGFkeSBkYXJrIGJhY2thbGxleSBhdCBuaWdodApodXNreSBpbiBzaGlueSBhcm1vcgprb3dsb29uIGN5YmVycHVuayBjaXR5c2NhcGUKYmlvbWVjaGFuaWNhbCBvcHBhaQppbiBvcGFsIGFybW9yCmZ1dHVyaXN0aWMgZmFzaGlvbiBjbG90aGluZwpsb29zZSBicmFpZGVkIGhhaXIKbWFsZSB2YW1waXJlIG9mIGNsYW4gYmFudSBoYXFpbQpmdWxsIGhhaXIKcmljaCBmcmVzaCBjb2xvcnMKdHJldm9yIGNhcmx0b24Kc3VtbWVyIHNoaXJ0CmRyYW1hdGljIGNpbmVtYXRvZ3JhcGh5CmxvcyBhbmdlbGVzIDIgMCAxIDUKbWlhbWkgc3ludGh3YXZlCmNhdmVybm91cwpvdGhlciB3b21lbiBkYW5jaW5nIGJlaGluZAozIDggLSB5ZWFyIC0gb2xkCmphcGFuZXNlIGNpdHkgc3RyZWV0IGZhc2hpb24Kc3R5bGUgaXMgYSBibGVuZCBvZiDDpm9uIGZsdXgKMyBzcHJpbmcgZGVpdGllcwptYXkpCmp1bHkKanVuZ2lhbiBzeW1ib2xzIG9mIHdpbnRlcgpkcmFtYXRpYyBtb29keSBjb2xkIGxhbmRzY2FwZQpkb2ZmCmxpdHRsZSBsaWdodAozIGQgYXBlIHNoYW1hbiBwcm9maWxlIHBvcnRyYWl0CjMgZCBiZWUKZ3RhIHYgYXJ0d29yawpmYXJtdmlsbGUKMyBkIGNlbHRpYyBrbm90CmNoaW5lc2UgYXJjaGl0ZWN0dXJlCmJsb3Nzb20gc2FrdXJhCm1vYmlsZSBzdWl0IGd1bmRhbQpvbiBjbGVhciBiYWNrZ3JvdW5kCmRlY29yYSBpbnNwaXJlZCBpbGx1c3RyYXRpb25zCnJlYWRhYmxlIGZvbnQKY3lib3JnIC0gZ2lybApkaWdpdGFsIGJpbGxib2FyZHMKMyBkIGZpbGFtZW50CmZpc2hlcyBmbG9hdGluZyBpbiBiZWRyb29tCmZyYWN0YWwgZGltZW5zaW9ucwp2b2x1bWV0cmljIGxpZ2h0aW5nIC0gaCA3IDYgOApqZWxseWZpc2ggcGhlb25peApzb25nbGluZXMKc2Vhc2hlbGwKaW5kaWFuIHRlbXBsZQphdG90b2xpbgpvaWwgb24gd2F0ZXIKMyBkIGdvZGRlc3MgbWluZXJ2YQp3YXZlIGZyZXF1ZW5jaWVzCmRldXggZXggbWFjaGluYQptZXhpY2FuIG11cmFsaXNtICkgcmF2aSBzdXBhCnN1YmRpdmlzaW9uCnVsdHJhIGdsb3NzeQpqYXBhbmVzZSBtYXNjb3QKcG93ZGVyZWQgc3VnYXIKdmludGFnZSByb3lhbHR5CmFudGlxdWUgcGVyZnVtZQpwb2xhciBleHByZXNzCmdvdGhpYyBhbnRpcXVlIHRoZW1lCnRlYWxzCmRhcmsgY29udHJhc3QKdmlkZW8gZ2FtZSBpdGVtCmhhcm1vbmljIGNvbG9ycwpoYWxmIHRleHR1cmVkIGhhbGYgd2lyZWZyYW1lCnBzeCBzY3JlZW5zaG90CmNsYXkgbWF0ZXJpYWwKOCAwLiBsdgpyZW5kZXJlZCBpbiBjZ2kKYXJtaWxsYXJ5IHJpbmdzIGpld2VscnkKamVhbiBqYW1lcwpzaGUgaXMgd2VhcmluZyBhIGhhdApiZWF1dGlmdWwgc3BhY2Ugc3RhciBwbGFuZXQgbmVvbgozIGQgb2N0YW5lIHJlbmRlcmluZwozIGQgb2YgdGhlIGV0aGVyZXVtIHN5bWJvbAozIGQgb3JuYXRlIGNhcnZlZCB3YXRlciBoZWFydAptYWRlIG9mIGxpcXVpZCBwdXJwbGUgbWV0YWwKZ3JlZW4gYmlvbHVtaW5lc2NlbnQgY2hyb21ldHlwZQpiaW9sdW1pbmVzY2VudCBjaHJvbWV0eXBlCnVuZGVyIGEgc2VhIG9mIHN0YXJzCnByZWNpb3VzIG1vbWVudHMKZGFpbHkgbGlmZQpzaXR0aW5nIGluIGEgY2FzdGxlCnVudXN1YWxseSB1bmlxdWUgYmVhdXR5CmdyYXNzeSBrbm9sbAphcnQgbm92ZWF1IGZyZXNjbwpsaXF1aWQgYWNyeWxpYyBwYWludGluZwo0IDAgMCAwIHNhbXBsZXMKaGlnaCBkZXRhaWwgYWlycGxhbmUgY2FiaW4KMyBkIGdlb21ldHJpYyBuZW9uIHNoYXBlcwpmcmFjdGFsIGRldGFpbHMgZGlhbW9uZCBlbGVtZW50cwpjb21pY3MgZ3RhIDUgY292ZXIKZ3JheSBmb2cKaW50ZW5zZSBkZXRhaWxzCnNtYWxsIHVwdHVybmVkIG5vc2UKMyBkIHJlbmRlciBvZiBhIGZ1bGwgZmVtYWxlIGJvZHkKaW4gc2VyZW5lIGZvcmVzdCBzZXR0aW5nCmFnZ3Jlc2l2ZQpnZW5pdXMgZGVzaWduCnZpZGVvZ2FtZXMKMyBkIHJlbmRlciBvZiBhbiBhc3RvbiBtYXJ0aW4Kb2N0YW5lIGVuZ2luZSByZW5kZXIKbHV4Y29yZSByZW5kZXIKd29ybiBtb25vIC0geWVsbG93IHdhbGxwYXBlcgppbiBhIGxpbWluYWwgc3BhY2UKaXNvbGF0ZQpkb2xsYXIgc2lnbiBwdXBpbHMKZXh0cmVtZWx5IHVuY29tZm9ydGFibGUKZGVtb2JhemEKYnJ5Y2UgMyBkIHN0eWxlCmpvdXJuZXkgdGhhdGdhbWVjb21wYW55CmRpc25leSBwaXhhciBtb3ZpZSBzdGlsbApwdXJwbGUgYW5jaWVudCBhbnRsZXIgZGVpdHkKYnJpZ2h0bHkgbGl0IHBpbmsgcm9vbQp3ZWFyaW5nIGRlbmltIHNob3J0IHNob3J0cwpmdXIgY292ZXJpbmcgaGVyIGNoZXN0Cm5vIGZ1cgpibHVlIHNjYWxlcyBjb3ZlcmluZyBoZXIgY2hlc3QKY3Jpc3AgZGV0YWlsZWQgMyBkIHJlbmRlcgphbGwgbWFyYmxlCnRoZSBpbWFnZSBpcyByZWZpbmVkIHdpdGggdWhkCmxpZ2h0IHJlZnJhY3RpbmcKdmVyeSBkZXRhaWxlZCBiYWNrZ3JvdW5kcwpjb3Ntb2xvZ3kKbWFueSBwaXBlcwppY29uIHN0eWxlCjMgZCB0b3kgYXp0ZWMgZ29kcyBhcyBmdW5jbyB0b3kKMyBkIHZpcnR1YWwgbGFuZHNjYXBlIHBhaW50aW5nCmFtYXppbmcgdm9sY2FuaWMgZXJ1cHRpb24Ka29yZWFuIGhhbmJvawpmcm93biBmYXNoaW9uIG1vZGVsCmdyZWVuIHNuYWtlcyBiYWNrZ3JvdW5kCmdyaW0gZmFzaGlvbiBtb2RlbCBsb29raW5nIHVwCnNtaWxpbmcgZmFzaGlvbiBtb2RlbApwZW9wbGUgbG9vayBpbnRvIHRoZSBmcmFtZQpzd29vc2gKYXJ0IHRveXMKbGlnaHQgcmVkIGFuZCBkZWVwIG9yYW5nZSBtb29kCmxpZ2h0IGdyZWVuIGFuZCBkZWVwIGJsdWUgbW9vZApmYngKaGlnaC1kZWZpbml0aW9uIHBob3RvZ3JhcGgKcHVycGxlIGdsb3dpbmcgaW5zY3JpcHRpb24KKDEgYXMgZGVjZW1iZXIKMSBhcyBqYW51YXJ5CjEgYXMgZmVicnVhcnkpCmRpZmZlcmVudCBoYWlyIGNvbG9ycwozIGxheWVycyBvZiBza3kgYWJvdmUgZWFjaCBvdGhlcgpjYXJ0b29uaXNoIGFuZCBzaW1wbGlzdGljCjMgbWFyeSdzCmJyZWF0aHRha2luZyBjb21wb3NpdGlvbgozIG1vb25zCnNwYXJzZSBmcm96ZW4gbGFuZHNjYXBlCjMgbnltcGhzIGNpcmNsaW5nIGEgZm91bnRhaW4Kbm8gdHdvIHJvb21zIGFyZSBpZGVudGljYWwuIDRrCm1hbnkgbnBjcyBvbiB0aGUgc3RyZWV0cwpvbmUgYmxvbmRlIGFuZCBvbmUgYnJ1bmV0dGUKYXBlcnR1cmUgZ3JhZGllbnQKYXJ5IHNjaGVmZmVyCjMgd29vZGxhbmQgY3JpdHRlcnMKcG9saXRpY2FsIG1lZXRpbmcgaW4gdGhlIHdvb2RzCmdyZWVuIGZsYWdzCmRvcm1hbnQgbmF0dXJlCnN1cGVyZmluZSBpbmtpbmcKZG9ua2V5IGVhcnMKbW9kZXJuIGNhcnRvb24gdHYgc2hvdwplZGl0b3JpYWwgcGhvdG8gZnJvbSBtYWdhemluZQpvbiBmb3Jlc3QganVuZ2xlIHBhdGgKaW4gbW9zY293IGNlbnRyZQp2aW50YWdlIHNob3djYXNlIG9mIHRoZSA2MHMKd2VhdGhlcmVkIHBhZ2VzCm1lZGljYWwgcmVzZWFyY2ggZmFjaWxpdHkKc3R1ZGlvIDU0CnZpcCByb29tCjM1bW0gY29sb3IgcGhvdG8KaW5zaWRlIGEgc2hlZApmYXNjaXN0IHBvbGljZQpjbG9uZSBsYWJvcmF0b3J5CmRldGVudGlvbiBjZW50cmUKbWVhdCBmYWN0b3J5Cm1pc3QgaW4gdmFsbGV5CnJldmVyc2FsIGZpbG0gc3RvY2sKYmxhY2sgc2NyaWJibGVzIGFuZCB3aWdnbGVzCmZsYXQgdmVjdG9yIGFydApsdXNoIHBsYW50IGFuZCBtYWdpY2FsIGRldGFpbHMKc2ltcGxlIG1pbmltYWwKaW4gMTk2MHMgbmV3IHlvcmsKZmlzaGluZyBwb2xlCndoaXRlIGJ1aWxkaW5ncyB3aXRoIHJlZCByb29mcwpzdHJhbmdlIHZpYmVzCnptb256aGVuZwp0aGUgc3RhbmxleSBwYXJhYmxlCnB1cnBsZSBleWUKcGluayB3aXNweSBoYWlyCnNpdHRpbmcgb24gYSBtb29uCmNvZGUgdmVpbgpncmFkaWVudCBjb2xvcgpkaWdpdGFsIGFydCBzdGF0aW9uCjNkIGNoYXJhY3RlciByZWFsaXN0aWMKcGludGVyZXN0IGZpbHRlcgphbWF6aW5nbHkgZXBpYyB2aXN1YWxzCmVwaWNhbGx5IGx1bWlub3VzIGltYWdlCmFtYXppbmcgbGlnaHRpbmcgZWZmZWN0CmFic29sdXRlbHkgb3V0c3RhbmRpbmcgaW1hZ2UKcGVyZmVjdCBmaWxtIGNsYXJpdHkKYW1hemluZyBmaWxtIHF1YWxpdHkKaXJpZGVzY2VudCBpbWFnZSBsaWdodGluZwoxNmsgdXBzY2FsZWQgaW1hZ2UKc29mdCBpbWFnZSBzaGFkaW5nCmNyaXNwIGltYWdlIHRleHR1cmUKaW50ZW5zZWx5IGJlYXV0aWZ1bCBpbWFnZQpsYXJnZSBmb3JtYXQgcGljdHVyZQpncmVhdCBwaW50ZXJlc3QgcGhvdG8KYXJib3JlYWwKY2lyY3VpdHJ5LiA4ayAzZCBnZW9sb2d5CmNvbXBsZXggYXJ0aXN0aWMgc3R5bGUKY29sb3IgaW5rIHBlbiBpbGx1c3RyYXRpb24KaW4gc3R5bGUgb2Ygd29sZCBvZiB3YXJjcmFmdApmaXJzdCBwbGFjZQphbWJpZW5jZSBsaWdodGluZwo4MW1tCnJlbmRlcmh1YiBuZXh0MjAyMApmbGFuZGVycwpoaW5kaSB0ZXh0CmluZGlhbiBzY3JpcHQKNzDigJlzCmxvdmVyc2xhYgozZCByZW5kZXIgb2YgYSBtYW4ncyBib2R5CnR1b21hcyBrb3JwaSBib3VndWVyZWF1CmR1cmluZyBzYW5kc3Rvcm0KYmlvcHVuayBjeWJvcmcgd2FzcApoaW5nZWQgdGl0YW5pdW0gbGVncwpjeWJlcnB1bmsgY3lib3JnIHdhc3AKd2F2ZXMgb2YgbGlnaHRzCmlhIGJvdHRsZSBuIHRoZSBzaGFwZSBvZiBzaHJlawpyZWFsaXN0aWMgOGsgYmVybmluaSBzY3VscHR1cmUKM2Qgc3RhdHVlISEhCigoKGNvbmdsb21lcmF0ZSEKc2x1c2gpKQp3ZWFzZWwKM2QgYW50aHJvcG9tb3JwaGljIHJhdApwbGF5aW5nIGd1aXRhciBvbnN0YWdlCmNlbGwgam91cm5hbApjZWxsIGJpb2xvZ3kKbmF0dXJlIGpvdXJuYWwKZnVsbCBib2R5IGFkb3B0YWJsZQozZCBkcmFnb24gZ2lyYWZmZSBoeWJyaWQKaGlnaGx5IGRldGFpbGVkIGZ1ciBhbmQgc2NhbGVzCmdsaXR0ZXJpbmcgYW5kIHNvZnQKbGlnaHQgb3JhbmdlIHZhbHVlcwpkZWVwIGJsdWUgc2hhZG93cwphZG9wdGFibGVzCmFkb3B0Cmh5cGVyZGV0YWlsZWQgc2tpbgozZCBmcmFjdGFsCm1hZ2ljIHRyZWUKaGlnaCBkZXRhaWxzIQpwaWN0dXJlIHRocm91Z2ggdGhlIHNjcmVlbgpvcGFydApyYXp6bGUgZGF6emxlCnJhaW5ib3cgc2hlZXAgbGlrZSBjb3R0b24gY2FuZHkKa2F3YWlpIGphcGFuZXNlIHN0eWxlCmZyYWN0YWwgcmVuZGVyCmJpZyBzcGFya2x5IGV5ZXMKc3RhbmRpbmcgd2l0aCBhIHBhcmFzb2wKYXJ0IHN0eWxlIG9mIGRhcmsgY2xvdWQgMgozZCBtb2RlbCBvZiBhIGphcGFuZXNlIG1hc2NvdAozLzQKM2QgcmVuZGVyIGJsZW5kZXIgY3ljbGVzCmJva2VoIGZvcmVzdCBiYWNrZ3JvdW5kCmRhcmsgYnJvd24gbG9uZyBoYWlyCnNsaWdodCBib2tlaApjaW5lbWEgNGQgOjkgZGV0YWlsZWQgZmFjZTogOAozZCByZW5kZXIgb2YgaG9tZXIgc2ltcHNvbgp0d28gYnJhaWRzCmxvdyBtb29kCndoaWxlIHBvc2luZyBpbiB0aGUgc2FtZSBiZWQKZ3JlZW46IDAuNQpjcm9jb2RpbGUgbG9raQpyaXBwbGUKd2hpdGUgbWV0YWxsaWMKd2hpdGUgcm9ib3QKZmxvYXRpbmcgaW4gdGhlIG9jZWFuCmhvbGRpbmcgcGF3cwp3YWxraW5nIHRvZ2V0aGVyCmlzb21ldHJpYyA4awphbGllbmF0aW9uCmphbWllIGxhbm5pc3RlcgptYXJrZXQgcGxhY2UKY3JlYXR1cmVzIGRhbmNpbmcKZGlhZ3JhbSBzY2hlbWF0aWMKM2Qgc2N1bHB0IG9mIGEgY2lyY3VzIHdhZ29uCmNvbmNlcHQgbW9kZWwKZml0IGJ1aWxkCnN1cnByaXNlZCBmcm93bgpzaGF2ZWQgYmFsZCBoZWFkCmdyZWVuIHdhdGVycwpkcmFtYXRpYyBsaWd0aHRpbmcKc3RhcmsgY2hpYXJvc2N1cm8gbGlnaHRpbmcKZnJlbmNoIGZhY2lhbCBmZWF0dXJlcwphbmNpZW50IGdvZApkYXJrIGludHJpY2F0ZQpvaWwgb24gY2FudmFzIGhpZ2ggYW5nbGUgdmlldwpncmFmZml0aXMKbGFyZ2UgY3JlYXR1cmVzIGluIGRpc3RhbmNlCmhpZ2hseSBkZXRhaWxlZCBsaWdodCByZWZyYWN0aW9uCndpdGggYmx1ZSBmdXIgYW5kIGJsdWUgZXllcwpkcmVhbXkgYXRtb3NwaGVyaWMKaGlwIG1vZGVybiBkZXNpZ24KcHV0IG9uIGEgbWFubmVxdWluCmluIGEgZGVzZXJ0IG9hc2lzIGxha2UKd2l0aCBuZW9uIGxpZ2h0aW5nCmx1c2ggcmFpbmZvcmVzdAo0IGsgc2VhbWxlc3MgbXVkIHRleHR1cmUKc3RhcnJpbmcgZHdheW5lIGpvaG5zb24KZXh0cmEgLSBkZXRhaWxzCnVsdHJhIHdpZGUgY2FtZXJhCmxlYmFub24ga2lyc3RlbiBkdW5zdApnb29nbGUgbWFwcyBzdHJlZXQgdmlldwpzaG93cyBhIGxlZwpqYXBhbmVzZSBnbGFzcyBob3VzZQpjcnlzdGFsIGNvbHVtbgpkcnkgbGFuZHNjYXBlCm1vc3MgYmFsbAp0ZW1wbGUgZmFpcgplbHZlcyBob3VzZQptaW5pYXR1cmUgbW9kZWwKdHdvIHBvaW50cyBwZXJzcGVjdGl2ZQo0NSBkZWdyZWUgcGVyc3BlY3RpdmUK8J+SiyDwn5KEIPCfkaAg8J+Rlwo0ayBkaWdpdGFsIHBhaW50aW5nCnNvbWUgYXJlIGNyeWluZyBvZiBqb3kKdG9kYXkncyBmZWF0dXJlZCBwaG90b2dyYXBoIDRrCnBhc3RlbCBjb2xvdXJzIG92ZXJsYXAKcm9nZXIgZGVha2lucyBjaW5lbWF0b2dyYXBoeQphbGxlbiBhbmRlcnNvbgpiYW9iYWIgdHJlZQpwaW5rIGxhbmRzY2FwZQpleHRyYSB0ZXJyZXN0cmlhbCBwbGFudHMKc21hbGwgd2hpdGUgZG9nIGF0IGhlciBzaWRlCmhvbHkgZW5lcmd5Cmxvb2tzIHNtYXJ0CmdyZXkgdHJpbW1lZCBiZWFyZAp3aGl0ZSBzdHJhdyBmbGF0IGJyaW1tZWQgaGF0CnVuZGVyIGxhcmdlIGdyZWVuIHVtYnJlbGxhCjUgaG90cm9kcyBkcml2aW5nIGRvd24gYSBzdHJlZXQKc21hbGwgY2hhcmFjdGVyLiB1bnJlYWwgZW5naW5lIDUKamVhbi1qb3NlcGggYmVuamFtaW4tY29uc3RhbnQKNTAKc2lsdmVyIGdsYXNzZXMKc21hbGwgamF3Cm1vb2R5IHRvbmVzCmRhcHBsZWQgaW4gZXZlbmluZyBsaWdodApzdGlsbCBwaWN0dXJlCmRpZmZlcmVudCBleHByZXNzaW9uCnByZWNpc2UgZmFjZXMKY2FzaW9wZWEKNyAwIG1tIHBvcnRyYWl0CnZhcG9yd2F2ZSBwaXhlbCBzb3J0aW5nCm1hbnRpcyBoZWFkIG1vbnN0ZXIgZ29kIHRlbXBsZQpiYWNrIHJvb20KZHJhbWF0aWMgZGlmZnVzZWQgbGlnaHRpbmcKcHJvdWRseSBob2xkaW5nIGEgc2FsbW9uCjcgMCBzIHN0cmVldCBwaG90b2dyYXBoeQp5dWdpb2ggYXJ0IHN0eWxlCmZpZWxkIGpvdXJuYWwgbGluZSBhcnQKaW4gYSBnYXJkZW4gb2YgYSBob3VzZQp3b3JkCnJpZGluZyBhIGJsYWNrIGhvcnNlCnRoZSBzZWFsIG9mIGZvcnR1bmUKeWFzaGljYSBtZSAtIDEKd2F0Y2hpbmcgbmlnaHQgc3RyZWV0cwp2aW50YWdlIG1vdmllCm1pY2hhZWwgamFja3NvbiBtb29uIGRhbmNlCmJsYWNrIGZsdWlkIHNpbXVsYXRpb24KaW50cmljYXRlIGRldGFpbGVkIHBob3RvZ3JhcGh5CnNvbWUgb2YgdGhlbSB1c2UgZ2FzayBtYXNrCnJlYWwgc2NhbGUKdGlnaHQgZHJlc3MKdmljdG8Kd2hpdGUgcGxhc3RpYyBhcm1vdXIKOCBrIHVoZCBjaW5lbWEgNCBkCmxpbmUgZGFuY2luZyBhdCBhIHBhcnR5CnJ1c3NlbGwgZGF1dGVybWFuCjggayB1aGQgZGV0YWlsZWQKYW50aSBhbGlhc2VkCnVoZCBmYWNlIGRldGFpbHMKaGVyIGZhY2UgZnJhbWVkIHdpdGggY3VybHMKOCBrIHVoZCBwb3NlcgpzdGFnZSBwaG90b2dyYXBoeQptb3VudAoxIDMgZ2hvc3RzIG1vdmllIGFydHdvcmsKbGFkeSBnYWdhIHdpdGggaGVyIHZlbnVzIGhhaXIKODAncyBqYXBhbmVzZSBwaG90bwpwc3ljaGVkZWxpYyBhcnQgc3R5bGUKYmVhdXRpZnVsIGRldGFpbGVkIG1pbmlhdHVyZQpvY3RhbmUgdW5yZWFsIHJlbmRlcgpzaG9ydCBqYWNrZXQKZGl2aW5nIHN1aXQKc3RvbWFjaCBza2luCmNsb3RoZWQgaW4gc3BhY2Ugc3VpdAphYmRvbWluYWwgbXVzY2xlcwpwaW5rIG1pbmktc2tpcnQKY2xvdGhlZCBpbiB3aGl0ZSBzaGlydApjeWJlciBnb2dnbGVzCmJhZwp3aGl0ZSBibG91c2UgYW5kIGdvdGhpYyBib290cwpzbGVldmVsZXNzIHRvcHMKY29jYSBjb2xhIGluIGNhbWVsIGhlYWQKZGVzdHJveWVkIHJvYm90IGRvZ3MgcmVtYWlucwpzbGlrIGRlc2lnbgp2aHNyaXAKODBzIGNvbG9yIHNjaGVtZQo4MHMgcmVkIHNwb3J0cyBjYXIKcmV0cm93YXZlIHZpYmVzCm1vb2R5OjphbGVqYW5kcm8gam9kb3Jvd3NreQpsb3cgd2lkZSBhbmdsZSBzaG90CnN1cHJlbWUgcGl6emEKYmxhY2sgdm9sY2FubyBhZmFyCnNhdHVybiBhbmQgc3VwZXJtb29uIGluIHRoZSBza3kKZnJvbSB0aGUgYm9yZGVybGFuZHMgc2VyaWVzCjNkIHBvcnRyYWl0CjE4IG1tIGxlbnMKc2FkaXN0aWMKd2FsbHBhcGVyIQp2b3hlbGFydAo4ZnQgdGFsbApzb2Z0IGNvb2wgdG9uZXMKc2hlIGhhcyBwYWxlIGJsdWUgc2tpbiEhIQo4ayBvY3RhbiBhZHZlcnRpc2luZyBwaG90bwpsb3RzIG9mIGxpZ2h0Cm1vb2xpZ2h0Cmluc3RhZ3JhbSBhcnQKd2hpdGUgdC1zaGlydCB3aXRoIHJlZCBzbGVldmVzCmhlciBoYWlyIGlzIG9uIGZpcmUKbG90cyBvZiBmb2xpYWdlCnJlZCBoYWlyIGFuZCBmcmVja2xlcwpkZWNhaW5nCnRyYW5zZm9ybWVycyBnMQp2Zi0xcyBqZXRmaXJlCmNoYW90aWMgZ29sZCBsZWFmIGZsb3dlcnMKOSAvIDEgMQo5IDAgbW0gc3R1ZGlvIHBob3RvZ3JhcGggdGlueQo5IDAgcyBjZ2kKbWFjcGFpbnQKb2RkIGxpZ2h0aW5nCmNyZWVweSBnb3RoaWMgcG9ydHJhaXQKeWFtaSBrYXdhaWkKOSA5IDkgOSBpbnNpZGUgb2YgYSBkYXJrIGNhdmUKZ2l2aW5nIGEgdGh1bWJzIHVwCjkgc3RlZWwgYmFycmVscyBpbiBhIGdyYXZleWFyZAoyIDQgbW0gd2lkZSBhbmdsZQo5MCdzIHBob3RvCjkwJ3MgY29sb3IgcGhvdG8KYSBiZWF1dGlmdWwgd29tYW4gaW4gd2hpdGUKOTBzIGNvbWljIGJvb2sgY2hhcmFjdGVyIGRlc2lnbgpyZWFsaXN0aWMgcG9sYXJvaWQgcGljdHVyZQppbnNhbmVseSBwcmVjaXNlCjoga2VuZHJpY2sgbGFtYXIKc2hlcGFyZCBmYWlyeSBzdHlsZSBhcnQKY2Fubm9uIHBob3RvCmphaGJ1IGFydApjZWx0aWNzCmJleW9uZCB2aXNpYmxlIGxpZ2h0Cm9jdGFuZSByZW5kZQo6IGphaXllIGZhcnJlbGwgYXJ0Cjoga2FueWUgd2VzdCB3ZWFyaW5nIHZyIGdvZ2dsZXMKOyB2aXN1YWwgbm92ZWwKZ3JleSBtZXRhbCBib2R5CnN0eWxlIG9mIGguci4gZ2lnZXIKd2llbGRpbmcgYSBsb25nc3dvcmQKPGhkCnJvZ3VlbGlrZSBzdHlsZQo8d2VhcmluZyBicm93biBsZWF0aGVyIGFybW9yPgpuYXR1cmFsIGhhbmRzIGFuZCBhcm1zCmdlb21ldHJpYyBzdHlsZQpzb21lIGN1cnZlZCBhcm1vcgood2F0ZXJmYWxsKQphIDE1IGZvb3QgdGFsbApmYW50YXN5IG9pbCBjYW52YXMKdGhlYXRyaWNhbCEKcG9wZXllCmlua2VkIGRyYXdpbmcKbmVhdCBkcmF3aW5nCmJsYWNrICYgd2hpdGUgcGhvdG9ncmFwaAphZ2ZhIHBob3RvCndpdGggb3JhbmdlIHN0cmVldCBsaWdodHMKaXQncyBsYXRlIGF0IG5pZ2h0CmEgMzVtbSBwaG90bwpvZiB0b3Rvcm8Kc3RhbmRpbmcgYnJhdmVseSBvbiB0aGUgcm9hZApiYWNrIHRvd2FyZHMgY2FtZXJhCmhpZ2ggcXVhbGl0eSB2b3hlbCBhcnQKdHJlbmRpbmcgb24gYXJ0YnJlZWRlcgpsb3RzIG9mIGxpdHRsZSBkYWlzaWVzCmNvbG9ya2V5IHNjZW5lCndhciBhbmQgYmF0dGxlCmVtb3RlCmluY29oZXJlbnQKZWxlY3RyaWMgYmx1ZQpmcm9tIHN0YXIgdHJlawppbiBhbiBpZ2xvbwpoaWdoLWRldGFpbHMKYSBjcHUgd2l0aCBodW1hbiBicmFpbnMKY2hpY2FubyBhaXJicnVzaCBhcnQKcGFpbnRpbmcgb24gc2lsawozZCBjb25jZXB0IHJlbmRlcgphIGNsb2Nrd29yayBvcmFuZ2UKaG90IHBpbmsgYW5kIGJsYWNrCnRvb3RocGFzdGUgYmxhc3QKZWRpc29uIGJ1bGIKMTQwMHMKbXVzaHJvb21zIGFuZCBwZXlvdGUgYXQgdGhlIGJhc2UKd2l0aCBheGUKci9za3l3aW5kCnIvbW9ycm93aW5kCm1vbnN0cm91cyBza3VsbApteXN0aWNhbCBzY2ktZmkgY29uY2VwdCBhcnQKbWVjaGFuaWNhbGx5IGVuaGFuY2VkIGhvbmV5Y29tYgppbiBkdW53YWxsCnNjYXJsZXQKd2VhcmluZyBhIGdvdGhpYyBkcmVzcwptZWRpZXZhbCBmYW50YXN5IGlsbHVzdHJhdGlvbgphIGZhbnRhc3kgd2FycmlvcgpzdGFuZGluZyBvbiBhIGNsaWZmc2lkZQpjcmF5b25zIGFuZCB3YXRlcmNvbG9yIHNrZXRjaAphIGZydWl0IGJhc2tldApsYSBsbG9yb25hCmEgZ2xhY2VvbiBpY2UgcHJpbmNlc3MKYW4gb3ZlcnNpemVkIGJlcmV0CndlYXJpbmcgYSBncmV5IGZ1ciByb2JlCmNoaWxkcmVuJ3MgaWxsdXN0cmF0aW9uCmFuY2llbnQgY2hpbmEgYXJ0IHN0eWxlCmVub3Jtb3VzIHRyZWVzCmRyYWdvbmxhbmNlIGlsbHVzdHJhdGlvbgpjbG9zZSB0byBkZWZlYXQKaGlnaCBxdWFsaXR5IGRpZ2l0YWwgY29uY2VwdCBhcnQKYSBsaW1pbmFsIHNwYWNlCnRhbmdpYmxlCjE5NzAgcGhvdG8gZnJvbSBsaXZlIG1hZ2F6aW5lCmtyeXB0b24KYSBtYWdpY2lhbidzIGNoYW1iZXIKMTM1bW0gY2FtZXJhIGxlbnMKbnVjbGVhciBibGFzdCBpbW1pbmVudAphIG1jZG9uYWxkcyBndW5kYW0KdGhlIGJyaWxsaWFudCBkYXduIG9uIHRoZSBtZWFkb3cKMTUwMCdzCmEgbW9vZ2xlIGluIHRoZSBsZWdlbmQgb2Yga29ycmEKZGVyZWsgcmlkZ2VycwphIG5hdGl2ZSBhbWVyaWNhbiB3YXJyaW9yCnRoZSB0aGUgbWFuIGlzIHdyYXBwZWQgaW4gY2hhaW5zCmEgcGlsZ3JpbQpzdGFyIGxpdCBza3kKdGhlIGpva2VyIGFuZCBwYXRyaWNrIGJhdGVtYW4KYSBwb3J0YWwgdG8gdGhlIGxvc3QgZmxhbWUgcmVhbG0KaWYgaGUgaGFkIGljZSBwb3dlcnMKd2l0aCBpY2UgcG93ZXJzCmd1d2VpeiBtYXN0ZXJwaWVjZQoxOTAxCmVzcmIKYSByZXRyb3B1bmsgbmF0dXJld2F2ZSBkZWZlbmRlcgpwcm9kdWN0IGFkdmVydGlzaW5nCnN0dWRpbyBxdWFsaXR5IHByb2R1Y3QKYSBydWJpaydzIGN1YmUKbXVsdGkgdG9uZWQKaGFsZiByZWFyIGxpZ2h0aW5nCm5hc2EgYXJjaGl2YWwgcGhvdG8Kdm9zdG9rLTEKYSBzcGFjZXNoaXAgdGhyb3VnaCB0aGUgbmVidWxhCmtvZGFrIHBob3RvZ3JhcGgKd2F0ZXIgZHJpcHBpbmcgb2ZmIGhpbQpzd2lzcyBhcmNoaXRlY3R1cmUKY2hhbW9uaXgKc3R5bGUgb2Ygc3RhbmxleSBkb253b29kCmFsbW9zdCBuaWdodAppbiBhIG9pbCBwYWludGluZyBzdHlsZQp0aGUgZm9yZWZvb3QgdG8gbWFrZSBhIHYgZ2VzdHVyZQphZnJlbW92IGxlb25pZApjaGFvdGljIGNvbXBvc2l0aW9uCl8zZC10ZXJtc18Kc29mdCBvcmdhbmljIGFic3RyYWN0aW9uCmhvdCB0ZW1wZXJhdHVyZQp0cm9waWNhbCBtb29kCmEgYW5jaWVudCBjcmFzaGVkIHNwYWNlc2hpcApyZWRkaXQgbWVtZQp3b3JuIGNsb3RoZXMKd2FzaGVkLW91dAo4ayByZXNvbHV0aW9uLm9pbCBvbiBjYW52YXMKbXVoYW1tYWQgYWxpCmJpb2hhemFyZAoyIHBlb3BsZQp3aXRoIG5hdmlnYXRvciBzaGFwZWQgZ2xhc3NlcwphIGJhbGQKYSBiYXJuIGF0IGFuIGlvd2FuIGZhcm0KcHJlY2lvdXMgbWV0YWwKZ2FsYXh5IGNvbG9yIHNjaGVtZQphIHBhcmFkaXNlIGxpa2UgYSBmYWlyeWxhbmQKc3VwZXIgd2lkZSBhbmdsZSBsZW5zCjY0awpjb250ZW1wb3JhcnkgYXJ0IGFlc3RoZXRpYwp0aWJldAphIGJlYXV0aWZ1bCB0cmVlCnNvbGlkIGJsYWNrICMwMDAwMDAgYmFja2dyb3VuZAp1bmRlciBhIG5pZ2h0IHNreQpkZXRhaWxlZCBwbGFudHMKdHJlZXMgYW5kIGNsaWZmcwpoeXBlcnJlYWxpc20gY29uY2VwdCBhcnQKZHlzdG9waWFuIGNlbGVicmF0aW9uCnN3ZWRpc2ggdXJiYW4gbGFuZHNjYXBlCmNpbmVtYXRpYyB3aWRlc2NyZWVuIHNob3QKZGF6emxpbmcgZ2VtIGluIHRoZSBoaWx0CmNvbmNlcHQgYXJ0IHdhbGxwYXBlciA0awphbiBlc2NhcGUgcm9vbSBpbiBhIHNtYWxsCndpZGUtYW5nbGUgcGhvdG9ncmFwaApjb21wbGltZW50YXJ5IGV5ZWxpbmVyCnBpbmsgc21va2UKZ29vZCBhZ2FpbnN0IGV2aWwKYmxpbmRpbmcgYmFja2xpZ2h0IGV2ZW5pbmcgc3VuCmZ1bGxib2R5IHJwZyBwb3J0cmFpdApoYWxmLWZyYW1lIHNxdWFyZSBnbGFzc2VzCnJlZCBhbmQgYmxhY2sgcm9ib3RpYyBwYXJ0cwpzdW1tZXIgY29sb3Igc2NoZW1lCmRlZXAgc2VhIGZpc2gKOGsgcmVzb2x1dGlvbiBjb25jZXB0IGFydApjb25jZXB0IGFydCBkaWdpdGFsIGlsbHVzdHJhdGlvbgphbmNpZW50IGNhdGVkcmFsIGJlaGluZCBoZXIKYnVybmluZyB3aW5ncwpiaWtpbmkgYXJtb3VyCmFtYXppbmcgY29udHJhc3RpbmcgYmFja2dyb3VuZApzeW1tZXRyaWNhbCB0YXJvdCBpbGx1c3RyYXRpb24KdmVyeSByZWFsaXN0aWMgZmFjZQpmYWRlZCBvdXRsaW5lCmEgYmVhdXRpZnVsIGZlbWFsZSB3aXphcmQKYW50aHJvIGNvbmNlcHQgYXJ0CmEgYmVhdXRpZnVsIGZveCBsYWR5CmhpZ2hseSBkZXRhaWxlZCBicnVzaCBzdHlsZQp0aGljayBmbHVmZnkgdGFpbApkdW5jZQpkZXJweQp0cmFuc3BhcmVudCB2ZWlsCm1vcmsgYm9yZwpnbG9iZXMKc2lnbmF0dXJlcwp3ZWFyaW5nIGpld2VsbGVyeQpuYXNhIGltYWdlcwo4ayB2ZXJ0aWNhbCB3YWxscGFwZXIKZmlsbWljIGx1dApzaGUgaXMgZWF0aW5nIGEgcGVhY2gKcGFsZXIuIG1pbGxpb25zIG9mIGdsYXNzLXdhbGxlZApmaXJlZmxpZXMgZmx5aW5nIGFyb3VuZAphcG9jYWx5cHRpYyBzdHlsZQppbiBmYWxsCnNjZW5jZSBvZiBzbGFtIGR1bmsKc2hpZnQgcGh0b2dyYXB5CnN1bW1lciBzdW5zZXQKcHVycGxlIGFuZCByZWQgZmxvd2VycwpwdXJwbGUgYW5kIHJlZApoZXJ6b2cgZGUgbWV1cm9uCmRhbiBtdW1mb3JkIGFuZCBhbGJlcnQgYmllcnN0YWR0CmEgYmVhdXRpZnVsIG1pbmUKd2l0aCBjcnlzdGFscyBvbiB0aGUgd2FsbHMKamF1bnR5CmdvbGQgZmxha2VkIGZsb3dlcnMKbmF0dXJlIHdhbGxwYXBlcgpqd3N0Cmhpcm9zaGkgc3VnaW1vdG8KY2luZW1hdGljIG1vb2QgbGlnaHRpbmcKZmFpcnlsYW5kCmhvdXNlcyBpbiB0aGUgc2hhcGUgb2YgbXVzaHJvb21zCmNvbnRyYXN0IGxpZ2h0CnNlZW4gZnJvbSBmYXIgYXdheQpkZXRhaWxlZCBza2VsZXRvbiBoYW5kcwpmbHlpbmcgZmFpcmllcwpsb25nIGRpc3RhbmNlIHNob290aW5nCmFuZHJ6ZWogbWFyc3phbGVrCmJsdWUgYnJhaWRlZCBoYWlyCjM4bW0gcGhvdG9ncmFocHkKZnJvbnQgZmFjaW5nISEKaHlwZXIgZGV0YWlsZWQgbWFuZ2EgZHJhd2luZwpvcmFuZ2U6IDAuNQpwaG90b3JlYWxpc3RpYyBzcGVjaWFsIGVmZmVjdHMKYW4gYXdhcmQgd2lubmluZyBtYXN0ZXJwaWVjZQphIGJlYXV0aWZ1bCB0ZWVuLWFnZWQgZ2lybAppbiBmcm9udCBvZiBhIHR3byBzdG9yeSBob3VzZQoyZCBnYW1lIGJhY2tncm91bmQKYmVhdXRpZnVsIGNhc3RsZQo4ayBpbGx1c3RyYXRpb24Kc2Vhd2VlZCBmbG9hdGluZwpsaWdodCBjb21pbmcgZnJvbSBhYm92ZQptYXNjdWxpbmUgamF3bGluZQpsb25nIGJsYWNrIGJyYWlkZWQgaGFpcgpqb2hhbm5lcyB2ZW1lZXIKYnJpZ2h0IGJsdWUKc291dGggZWFzdCBhc2lhbiB3aXRoIHJvdW5kIGZhY2UKYnJpZ2h0IHllbGxvdyBjb2xvciBzY2hlbWUKc3Rvcm15IGxhbmRzY2FwZQo0OGsKI2lsbHVzdHJhdGlvbgphIGNvbGQKd2FybSBhbmQgc29mdCBhbmQgc3ViZHVlZCBjb2xvcnMKdGltIHdoaXRlIGFydC4gNjQgbWVnYXBpeGVscwphaSBlbmhhbmNlZCBkaWdpdGFsIGFydAo0ZCBtYW5kZWxidWxiIHBzeWNoZWRlbGljcwpob2xvZ3JhcGhpYyBvcHRpY2FsIGlsbHVzaW9ucwpibHVlIGFuZCByZWQgY29sb3Igc2NoZW1lCmNocm9uaWNsZXMgb2YgbmFybmlhCnN0YW5kaW5nIGluIHRoZSBzbm93CmphbWVzIGNhbWVyb24gYXZhdGFyIHN0eWxlCmFtYmllbnQgYXJ0CnZpY3RvcmlhbiBlcmEgcGFpbnRpbmcKYWZyaWNhbiBhcnRzCmNpcmNhIDE5NDBzCnBlZGVzdGFsCm1ha290byBzaGlua2FpLiBoaWdoIGRldGFpbAp3ZWFyaW5nIHBpbmsgZmxpcCBmbG9wcwp0cmFmZmljIGluIGJhY2tncm91bmQKYSBibGFjayBtYW4gd2l0aCBsb25nIGN1cmx5IGhhaXIKZm9vdCBwYXRoCmEgYmxvbmQKbmVvLW5vaXIKd2l0aCBzb2Z0IHBpbmsgY29sb3JzCmxvbmcgc3RyYWlnaHQgYmVhdXRpZnVsIGhhaXIKZmxpY2tyIHBob3RvZ3JhcGh5CmEgYm90IGluIHRoZSBnYW1lIHN1cGVyIG1hcmlvIDY0CmhhcnJ5IHZvbGsgY2xpcCBhcnQgc3R5bGUKYSBib3kgbWFkZSBvdXQgb2YgZ29sZAphZ2VkIDEzCmEgYm95CmEgYnJpY2sgY2FiaW4gaW4gdGhlIHdvb2RzCm5hY3JlIHBhaW50aW5nCmRlZXAgd29vZHMKYnJpY2sgYnVpbGRpbmcKZnVsbCBvZiBjb2xvdXJzCm1pbmltYWwgYXJ0aWZhY3RpbmcKdGhlIHNwYWNlIG5lZWRsZQphIGJ1c3kgYXJjYWRlCmNhdGhlZHJhbCBpbiB0aGUgYmFja2dyb3VuZAphIGNha2Ugd2l0aCBhbGwgcGxhbmV0cyBvbiBpdApleG90aWMgYWxpZW4gZmxvcmEKd2l0aCBvcm5hbWVudGFsIGVkZ2VzCmx1c3RmdWwgdmVnZXRhdGlvbgptYWdpYyBzcGVsbHMgYW5kIHdlYXBvbnMKY2l0eSBvbiBmaXJlIGJhY2tncm91bmQKdGhyZWUgYmlyZHMgZmx5aW5nIGFyb3VuZCBpdAphIGNhdCBpcyBzbWlsaW5nCnBldHMKYSBjYXQgd2VhcmluZyBhIHNwaWtlZCBoZWxtZXQKbWluaW1hbGlzdCBwaG90b3JlYWxpc3QKaW50cmljYXRlIGZpcmUgZGVzaWducwphIGNhdGhlZHJhbCB1bmRlciBhbiBvdmVycGFzcwphIGNlbnRhdXIKcHJvZmVzc2lvbmFsIGFydCBwaG90b2dyYXBoeQpvcHRpeAphIGNoYXJhY3RlciBiYXNlZCBvbiBhIGhhZ2dpcwpwZWFybHkgZmxhZ3N0b25lcwphbmNpZW50IGphcGFuZXNlIGFyY2hpdGVjdHVyZQpnaWFudCBjaGVycnkgdHJlZXMKZmxvd2luZyBnb2xkZW4gc2NhcmYKaGF5YW8gbWl5YXpha2kncyBtb3ZpZXMKcmVhbGlzdGljIG9jdGFuZSAzZAp1aHEKY29sb3IgZHJhd2luZwpuYXRpb25hbCBnZW9ncmFwaHkgcGhvdG9ncmFwaHkKYSBjaHJpc3RpYW4gamVkaQpkZXRhaWxlZCBjaW5lbWF0aWMgcGhvdG9ncmFwaHkKNGsgdWx0cmEgaGQgcGhvdG9ncmFwaApncmllZiBhbmQgZGVzcGFpcgpmb3JrcwpzcGFjZXNoaXBzIGZseWluZwpuZW9uIGxpZ3RocwprYXRzdWhpcm8gb3RvbW8gc3R5bGUKYW5jaGllbnQKY3liZXIgcHVuayBzZXR0aW5nCjE5ODBzIHN0eWxlCnllYXIgMjA5OQp0ZWFtIGZvcnRyZXNzIDIgc2NyZWVuc2hvdAptaWQtdHdlbnRpZXMKc3BhY2UgcHJlc3N1cml6ZWQgc3VpdApicmlnaHQgeWV0IGNvb2wgY29sb3JzCmludHJpY2lhdGUgZGV0YWlsCmEgY2xvc2UgdXAgc2hvdCBvZiBhIGNyeWluZyBleWUKbmlrb24gODVtbSBmLzUuNgpicmlnaHRseSBnbG93aW5nIGV5ZXMKc29mdCBidXR0ZXJmbHkgbGlnaHRpbmcKZnVqaWZpbG0gdmVsdmlhCmhpZ2hseSBkZXRhaWxlZCB2aXNpb25hcnkgYXJ0CjE5NzMgcGhvdG8gZnJvbSBsaWZlIG1hZ2F6aW5lCnNpbW9uIHN0YWxlbmhhZy4gbWFzdGVycGllY2UKc3VuIGxpZ2h0aW5nIGZyb20gYWJvdmUKbGVhdmluZyBmb3IgYmF0dGxlCjhrIGhkIHBob3RvCjE5MDAgaWxsdXN0cmF0aW9uIGFydHdvcmsKYmx1ZSBwdXBpbAphIGNvbGxhZ2Ugb2Ygc3BhY2UgdHJhdmVsCnBob3RvZ3JhcGh5OiBqb3VybmFsaXNtCm5vIGZ1cm5pdHVyZQptaWNoYWVsIGthbHV0YSBhbmQgamlhIHJ1YW4KYXF1aWxpbmUgZmFjaWFsIGZlYXR1cmVzCm1lZGlldmFsIGZhbnRhc3kgZGVzaWducwpyYWYgc2ltb25zCmRyaWVzIHZhbiBub3Rlbgp3b3JsZCBvZiBkYXJrbmVzcwptYWdlIHRoZSBhc2NlbnNpb24KaW4gYSB3b29kZW4gYm94LiB0b3AgZG93biBwaG90bwpuYXJyb3cgYmx1ZSBncmV5IGV5ZXMKbW9sZSBvbiBjaGVlawpwaG90byBvZiBlYXJ0aCBmcm9tIHNwYWNlCnRhbWFuZHVhCmdlcmVudWsKY3V0dGxlZmlzaAp0cmVlIGthbmdhcm9vCmhhbGYtbWFuCnRlZCBuYXNtaXQKMS81MDBzCnZlcnkgdmVyeSBiZWF1dGlmdWwgc2NlbmVyeQphIGNvbnRlbXBvcmFyeSBhcnRpc3RpYyBjb2xsYWdlCnN0YXJzIGZpbGxlZCBza3kKYSBjb3NtaWMgY2FuYWRhIGdvb3NlCmEgY29zbWljIGVudGl0eSBtYWRlIG9mIHN0YXJzCmx1eHVyaW91cyB3ZWRkaW5nCm90dG9tYW4gZW1waXJlIGVyYQpzcHJpbmcgZGF5CmhlciBoYWlyIGlzIGxvbmcgYW5kIHN0cmFpZ2h0Cm5hdHVyYWwgbW9ybmluZyBsaWdodAppbiByZW5haXNzYW5jZSBzdHlsZQo4ayB0cmVuZGluZwphIGNvenkgb2xkIHZpY3RvcmlhbiBsb2Z0CmRyYW1hdGljIGxpZ2h0aW5nIC0gbiA5CmluIGEgYmxhY2sgY2hpZmZvbiBsYXllcmVkIHJvYmUKaW4gYSBwYXJhbGxlbCBkaW1lbnNpb24KYm9keSBmb3JtYXQKY3Jvc3MgaGFjaGluZwpmcmFuY2lzY28gZ295YSBzdHlsZQpkaXN0YW50IG1lbW9yaWVzCmEgY3J5c3RhbGxpbmUgcm9vbQpibGlzc2Z1bCBhdG1vc3BoZXJlCiNvYwphIGN1dGUgYW5kIGJlYXV0aWZ1bCB5b3VuZyB3b21hbgpsYXJnZSBleWVzIHdpdGggdmlzaWJsZSBwdXBpbHMKcWkgYmFpc2hpIHN0eWxlCndlYXJpbmcgYSBmcmVuY2ggYmVyZXQKYSBjdXRlIGNhdApsYXJnZSBwbGFuZXRzIGluIHRoZSBiYWNrZ3JvdW5kCmFkZGFtcwpqYXBhbmVzZSBjYXJ0b29uIHN0eWxlCmEgY3V0ZSBsaXR0bGUgYmx1ZSBkcmFnb24KcmVmbGVjdGl2ZSBzY2FsZXMKMzUgbW0gcGhvdG8Kc2hlIGlzIGluIHRoZSBwb3Rpb25zIHdvcmtzaG9wCm5lYXIgdGhlIGJsYWNrIGNhdWxkcm9uCmphbWVzIGJheHRlciBhbmQgbWFyayBoZW5uCnNoZSBpcyBsYXlpbmcgb24gaGVyIGJhY2sKcHJvZHVjdCBwaG90byBzdHVkaW8gbGlnaHRpbmcKOGsgd2lkZSBhbmdsZQp1bnRyYSByZWFsaXN0aWMKYSBjeWJvcmcKdGhlIGltYWdlIGlzIGZ1dHVyaXN0aWMKaGFzIGN5YmVycHVuayBzdHlsZQpoYXMgY2FibGVzCml0IGlzIHBob3RvcmVhbGlzdGljCmEgY3lib3JnIG1lZGl0YXRpbmcKdGhlIGFydCBvZiBiaW9uaWNsZQpvaWwgb24gY2FuZXZhcwptb3ZpZSBhY2N1cmF0ZQpnb3RoYW0gY2l0eSBzdHlsZQpjb2xvcmZ1bCA0awpmYWludCBkeW5hbWljIGxpZ2h0aW5nCmhpZ2hseSByZWFsaXN0aWMuIGxpdmUgY2FtCmJsdWUgbGFtcHMgb24gdGhlIGNlaWxpbmcKaGUgaXMgZmxvdW5kZXJpbmcKYSBkYXJrIHBob2VuaXgKdmVyeSBiZWF1dGlmdWwgbWF0dGUgcGFpbnRpbmcKYSBkYXJrIHVuZGVyd2F0ZXIgc2NlbmUKd2VhcmluZyBhbiBhc3Ryb25hdXQgaGVsbWV0CnN0dW5uaW5nIGZhbnRhc3kgaG9ycm9yCm1vcmJpZCBmYW50YXN5CmNvc21pYyBkZXN0cnVjdGlvbgppbiBzdHlsZSBvZiBtYW5nYQpsaWdodHMgYW5kIHNtb2tlCnZlZ2dpZXMKcGFydGljbGUgc2ltCndpdGggY3J5IGVuZ2luZQptdWZmbGVkIGNvbG91cnMKaGFsZiAmIGhhbGYgaGFpciBkeWUKcGFydGVkCm1peGVkIG1lZGlhIHRvcm4gcGFwZXIgY29sbGFnZQpuZW8tcm9jb2NvIGV4cHJlc3Npb25pc3Qgc3R5bGUKbWlsaXRhcnkgcm9ib3QKYXJ0eW9tIHR1cnNreWkKbG9uZ3F1ZSBjaGVuCndhdGVyIGRyb3BzIG9uIHRoZSBsZW5zZQpsYWtlIGluIHRoZSBiYWNrZ3JvdW5kCmhvcmRlM2QKbGlnaHR3YXZlIDNkCmFuaW1lIHRoYWkgZ2lybAphIGRpZ2l0YWwgZHJlYW1zY2FwZQp3YWtmdSBjb2xvcnMgKyBzeW1tZXRyeQpzY2ktZmkgb2YgaWNlbGFuZCBsYW5kc2NhcGUKc29sZGllcnMgY2hhcmdpbmcgdGhlIGVuZW15Cmhpcm9uYWthCmNvbG9yZnVsIGNvbXBvc2l0aW9uCmEgZGlzZW1ib2RpZWQgaGVhZCBzY3JlYW1pbmcKbW9kZXJuIGhlbG1ldAppbnRyaWNhdGUgdm9sdW1ldHJpYyBsaWdodGluZwpnZW5lcmljCnNlZWluZyBhIGNhdApuZXN0IGlzIG1hZGUgb2Ygc3RpY2tzCmZpZXJ5IHBhbGV0dGUKc3R5bGl6ZWQgYXMgYSAzZCByZW5kZXIKbG9nbyB2ZWN0b3IgYXJ0CmFydCBzdGF0aW9uIGF3YXJkIHdpbm5pbmcKZmlyZSByZWZsZWN0aW9uCmEgZHJhZ29uIG1hZGUgb2YgY2xvdWRzCmEgZHJhZ29uIHN0YXR1ZSBtYWRlIG9mIGphZGUKdGFrYXRhIHlhbWFtb3RvIHN0eWxlCmNvbmZpZGVudCBzaGFkZWQgZXllcwp3cm91Z2h0IGlyb24gYXJjaGl0ZWN0dXJlCmNyYXp5IGZ1bgpyZWJlbGxpb3VzbmVzcwpubyBob3JzZXMKaG9sZGluZyByZWQgdW1icmVsbGEKc3VibGlnaHRpbmcKZGlzbmV5LXN0eWxlCmJ1cm50IGVkZ2VzCmEgZHJlYW0Ka2lyYmkgZmFnYW4KY2luZW1hdGljIDRrIG9jdGFuZSByZW5kZXIKNGsgcGhvdG9ncmFwaHkgaGlnaCBxdWFsaXR5CmRhcmsgY2l0eSBydWlucwphcm1vdXIgbWVyZ2luZyB3aXRoIGJvZHkKcGh5c2ljYWxpdHktYmFzZWQgcmVuZGVyCmEgZHlzdG9waWFuIGZ1dHVyZQpzdGFuZGluZyBpbiB0aGUgcGxhaW5zIG9mIHJvaGFuCnRyZW5kaW5nIGluIGFydHNhdGlvbgpzbGltZXMKZnVsbCBzdW4KZmluYWxlIGZhbnRhc3kKZGV2aWwgbWF5IGNyeQpzeW1tZXRpY2FsIGZhY2UKY2hhcmFjdGVyIGFydC4gc2MtZmkuIGNvdmVyIGFydApzdG9yeSBhcnQKYXMgYXRsYW50ZWFuIHJlcHRpbGlhbiB3YXJyaW9ycwpzdXNhbiBoYXl3YXJkCnRyaWJhbCB0YXR0b28KY2F1Y2FzaWFuIGV5ZXMKaHlicmlkIG9mIGdhbCBnYWRvdAplbWlseSBibHVudApjb3J5IGNoYXNlIGFzIGFuIGF0bGFudGVhbgpsYWR5YnVnCmFjY29tcGFueWluZyBjb3J5IGNoYXNlCjMwIG1tCnVsdHJhIGRldGFpbGVkIGZhY2VzCnJlbmRlciB0byByZXNvbHV0ZSBwZXJmZWN0aW9uCmNyaXNwIGNsZWFyIHJwZyBwb3J0cmFpdAphIGZhbnRhc3kgZm9yZXN0Cm1hZGUgb3V0IG9mIHN3ZWV0cwp0b3JuIHNob3J0cwpoaWdoLWZhbnRhc3kKa3lvdG8gYW5pbWF0aW9uIHN0aWxsCmEgZmVycmV0IGFzIHN1cGVybWFuCndoaXRlIHN0YXJzIGluIHRoZSBiYWNrZ3JvdW5kCiEhaGlnaGx5IGRldGFpbGVkISEKbG93a2V5IGxpZ2h0aW5nCmRhcmsgc2hhZGluZwpzcGFjZSBnYWxheHkKdGhlIGxpZ2h0aW5nIGlzIGRhcmsKdGhlIHNreSBpcyBhbGwgdGhhdCBpbGx1bWluYXRlcwpwaG90byByZWFsaXR5CnBzMiBnYW1lCm1paGFseSBtdW5rYWNzeQpoaWdoIHNwZWVkIHRyYWlucwpwbGFudHMgb24gcG90cyBhbmQgb24gdGhlIHdhbGxzCmRlZXAgbmlnaHQgc2t5CnR1cm1vaWwKZmxvd2luZyBzYWt1cmEgc2lsawphIGZvbGRpbmcga25pZmUKbWFyY2VsIG1hcmNlbCBhbmQgbWV0emluZ2VyCnRvdG9ybyBoaWRpbmcgYmVoaW5kIHRyZWUKYSBmb3Jlc3Qgd2l0aCBidW5uaWVzCmJyaWdodGx5LWxpdAptaWNoZWxhbmdlbG8gMTU1MHMKYSBmcmllbmRseSB3aXNwCmJhc3RpZW4geW9zaGl0YWthIGFtYW5vCmZsb3dpbmcgY2xlYXIgd2F0ZXIgY3JlZWsgYmVkCmEgZnJvbnRhbCBwb3J0cmFpdCBvZiBhIGRlbGljYXRlCm11c2N1bGFyIGFuZCBleGhhdXN0ZWQgd29tYW4Kd2VhcmluZyBoZWF2eSBhcm1vciB3aXRoIGNhcGUKd2l0aCBjYXBlCmJyb2Fkc3dvcmQKaG9sZGluZyBhIGJyb2Fkc3dvcmQKaG9sZGluZyBicm9hZHN3b3JkCmZ1bGwgbW9vbiByYWluaW5nIG5pZ2h0CmV5ZXMgYXJlIHllbGxvdwpzeW1tZXRyaWNhbCBtb3V0aApuZXdzcGFwZXIgc3R5bGUKYWZyaWNhbiBhcnRzIG1hZ2F6aW5lCmEgZnVsbCBwb3J0cmFpdCBvZiBub3JkaWMgZmVtYWxlCmJyb3duIHJlZCBsb25nIGhhaXIKaW4gZWNzdGFzeQozZCByZW5kZXIgZGlnaXRhbCBhcnQKdGl0ZSBrdWJvIGFuZCB0YWthc2hpIG11cmFrYW1pCmhhbmdpbmcgdmVpbnMKaG91c2VzIG9mIHBhcmxpYW1lbnQKY296eSByb29tCmNvdmVyZWQgd2l0aCBibGFua2V0CnNjZW5hcmlvIGFzc2V0cwpqZWZmcmV5IHNtaXRoIGFydAphIGdoZXR0byBpbiBnZXJtYW55CnBvbGlzaCBtYW5zaW9uIGtpdGNoZW4KcGhvdG8gdGFrZW4gZnJvbSB0aGUgZ3JvdW5kCndhaXRpbmcgdG8gc3RyaWtlCndpdGggZ2xvd2luZyBwdXJwbGUgZXllcwphbGllbiBkZXNpZ24KY2luZW1hdGljIHN0b3JteSBza3kKMTAgbW0KZ2lnYW50aWMgc2NhbGUKdml2aWQgdmVnZXRhdGlvbgpkaXNuZXkgYW5kIGRhbiBoaWxsaWVyCmRlc3Ryb3lpbmcgdGhlIGNpdHkKd2l0aCBhIGNpdHkgaW4gdGhlIGJhY2tncm91bmQKc3RyYW5nZSBzeW1ib2xzIGxpbmUgdGhlIHdhbGxzCndhbGtpbmcgaW4gYSBiYW1ib28gZm9yZXN0CmdyYXkgY29sb3IKaHVnZSBjcmFiCmRlc3Ryb3lpbmcgbmV3IHlvcmsgY2l0eQpuZW9uIGxpZ2h0cyBldmVyeXdoZXJlCnRlbXB1cmEgb24gcGFuZWwKc2FpbCBib2F0IG9uIHRoZSBiYWNrZ3JvdW5kCm1ham9yIGFyY2FuYSBwYWxhY2Ugb2NjdWx0CmF0IHRoZSBkZXNlcnQKZGlub3NhdXIgc2tlbGV0b25zCnJhaW5pbmcgb3V0c2lkZSB0aGUgY2FmZQphIGdpcmwgd2l0aCBibG9uZGUgaGFpcgpncmVlbiBiaWtpbmkKZGV0YWlsZWQgYW5kIGJyaWdodAphIGdvYXQKaGlnaCBkZXRhaWxlZCBzdG9yZQp3b2xmIGFybW9yIG1lY2gKYSBnb2RkZXNzIGluIGEgZmllbGQgb2YgZmxvd2VycwpsaWtlIHBldGVyIHRhcmthCmZ1bGx5IGRldGFpbGVkIHJlbmRlcgpjb250ZW1wb3JhcnkgM2QgYXJ0CnN1YmplY3QgaW4gdGhlIGNlbnRyZQpoYXJkIGJydXNoIHN0cm9rZXMKYSBnb3JnZW91cwpzb2FyaW5nIGFib3ZlIGEgZGVuc2UgY2l0eQphIGdyZWVuCm5leHQgZ2VuZXJhdGlvbiBncmFwaGljcwppbnNhbmUgZW5naW5lCnRoZW9waGFuZXMKaW4gYSBkYXJrIGR1bmdlb24KZm9ydHVuYXRvIGRlcGVybyBwYWludGluZyBzdHlsZQpiaWcgdGVjaCBjb3Jwb3JhdGUgYXJ0IGRlc2lnbgpzaW1wbGUgZ3JhZGllbnRzCmxpa2UgYSBjeWJlcnB1bmsgd29ya3Nob3AKYWxsIGFyb3VuZApkaXNwbGF5aW5nIHN0b2NrIGNoYXJ0cwpvbiB0aGUgd2FsbHMKYSBncm91cCBwaG90byBvZiBhIHNlYWwKYWZ0ZXJtYXRoCmRpZmZlcmVudCBzdHlsZXMKOGsgaGlnaGx5IGRldGFpbGVkIGZhY2UKZXJpYyBsYWNvbWJlCmRzbHIgY29sb3IKd2V0IHBsYXRlIHBob3RvCnNsaWdodCBibHVyCmV4dHJlbWVseSBoaWdoIGxldmVsIG9mIGRldGFpbApoaXMgZXllcyBnbG93aW5nIHllbGxvdwphIGhhbmRzb21lIG1hbu+8jGJsYWNrIHNob3J0IGhhaXIKYW5pbWUgc2hhZGluZwpmdWxseSBjb3ZlcmVkIGluIGNvbG9yZnVsIHBhaW50CndheW5lIGJhcmxvd2UgcGllcnJlIHBlbGxlZ3JpbmkKb3JhbmdlIGdhcyBnaWFudAphIGhpZ2ggYW5nbGUgc2hvdApzdGFuZGluZyBpbiBmcm9udCBvZiB0aGUgYWx0YXIKZnVsbCBzaG90IHJwZwpzdGFycmluZyBjaGV3YmFjY2EKNzBzIHJldHJvIHNjaS1maQpwbGF5aW5nIGluIHdhdGVyZmFsbHMKbGFuZGluZyBsaWdodHMKZXhoYXVzdCBzbW9rZQpiaW9kaXZlcnNpdHkgaGVyaXRhZ2UgbGlicmFyeQpkJmQgYXJ0d29yawpncmFwaGljIG1hbmdhCndpdGggbWF0c3UgcGluZSB0cmVlcwpnYXMgbGFtcHMKZGVmdW5jdCB0ZWNobm9sb2d5CnRyZW5kaW5nIG9uIHNwb3RpZnkKd2l0aCBsb3RzIG9mIGZpcmUgY29taW5nIGZyb20gaXQKZ3JlZW4gYW5kIGJsYWNrIGNvbG9yIHNjaGVtZQptdXNjbGUgYm9keSB3aXRoIGJhdHRsZSBzY2Fycwpzb2Z0IG5lb24gcHVycGxlIGxpZ2h0aW5nCmRlZXAgbW9vZHkgY29sb3JzCmhvcnJvciBtb3ZpZSBjaW5lbWF0aWMKcmFpbiBzdG9ybXkgZm9nCnRlcnJpZnlpbmcgbmlnaHRtYXJlCm9sZGVyIG1hbGUKcmVwcmVzZW50aW5nIGVkIGhhcnJpcwpsb25nIGRpc3RhbmNlCmEgaG9vZGVkIGtpbGxlciBhIGNhbmUKYSBob29rYWggc21va2luZyBjYXRlcnBpbGxhcgpoaWdoLWNvbnRyYXN0IGxpZ2h0aW5nCmhvYmJpdGhlYWQKZ2lnYXBpeGVsIG1heGltdW0gdXBzY2FsZQptZXJyaWFtIGRhbmllbApoaWdoIHF1YWxpdHkgcGhvdG9zCm9pbCBwYWludGluZ3MKYSBodWdlIGdsYXNzIHRhbmsKZnVsbCBvZiBncmVlbmlzaCBsaXF1aWQKaW5zaWRlIGppbW15IGhlbmRyaXgKYSBodW1hbgphIGh1bWFuIGJhcmQKbG93ZXIgaGFsZiBvZiBoaXMgYm9keSBpcyBzbmFrZQpuYWdhLXRpcnIKbmFnYS1oYWthc2gKbWl4ZWQgd2l0aCBzbmFrZQptb3NzIHBsYW50cwpjb21pYyBzdHlsZWQKaW4gcmFiYXQgaGVucnkgY2FydGllciBicmVzc29uCmEgaHVtYW4tbGlrZSBqdWljeSBwZWFjaAphIGh1bWFub2lkIG1vc3F1aXRvIHdvbGYKZHVhbmUgbG9vc2UKY29ycG9yYXRlIGFuaW1hdGlvbiBzdHlsZQpsZXZpdGF0aW5nIGFncmljdWx0dXJhbCBzcGhlcmUKY29zcGF5CnJpZGluZyBhIGhvcnNlIG9uIHRoZSBtb29uCnNlYW4geW91bmcKc2hvdWxkZXIgbGVuZ3RoIGJsYWNrIGhhaXIKdmlldyBmcm9tIHRoZSBzdHJlZXRzCmhhaXIgdGllZCBpbiBhIGJ1bgphIGh5cGVyIHJlYWxpc3RpYwpkaWdpdGFsIG1peGVkIG1lZGlhIHBhaW50aW5nCmhlcm9pYyBzY2VuZQppbiBjcmltc29uIHJlZAppbiBzdHlsZSBvZiBjeXJpbCByb2xhbmRvCnN1cGVybWFuIHBvc2UKc3RpbGwgZnJvbSB0aGUgbWF0cml4Cm5hw692ZSBhcnQKZXBpYyByZWFsbQp1bmRlciBhIGZ1bGwgbW9vbgptb25zdGVycyBpbiB0aGUgYmFja2dyb3VuZAphIGxhbmRzY2FwZSBvZiBoZWRnZSBtYXplCmNoaWxseQpvaWx5IHB1ZGRsZXMKY3JhdGVzIGFuZCBwYXJ0cyBvbiB0aGUgZ3JvdW5kCm9uZSBjYXZlbWFuIGlzIGNvd2VyaW5nIGluIGZlYXIKYXV0dW1uIG1hcGxlcwpjYWxtIGFmdGVybm9vbgpnbG9vbXkgc2tpZXMKYSBsYXJnZSBzcGhlcmUgb2YgcmVkIGVuZXJneQpieSBzdHVkaW8gZ2hpYmxpCnNvcmEgYXMgYSBjYXQKd2Fsa2luZyB0byB3b3JrIHdpdGggYSBicmllZmNhc2UKYWNjdXJhdGUgZGVwaWN0aW9uCmJsYWNrISEhISEgYmFja2dyb3VuZAphcnRpc3RpYyBkaWdpdGFsIGFydApwcm9mZXNzaW9uYWwgbG9nbyBkZXNpZ24KZGlnaXRhbCBtYXJrZXRpbmcKaWNvbiBibGFjayBhbmQgd2hpdGUKZGVlcCBpbWFnZQpiYWNrIGZhY2luZyB0aGUgY2FtZXJhCmEgbG9uZWx5IHdvbWFuCmRpc2NvdmVyZWQgZm9yIHRoZSBmaXJzdCB0aW1lCnZvbHVtZXRyaWMgc3VuIHJheXMKdGlsZWQgZmxvb3IKZGFyayBjb29sIHR3aWxpZ2h0Cmhhcm1vbnkgY29sb3IKaW50ZXJzdGVsbGFyIGJsYWNrIGhvbGUKdG9uYWwgY29sb3IKbWFzdGVycGllY2UgcGhvdG9ncmFwaHkKaG9sZGluZyBhIHNrdWxsCm9pbCBvbiBjYW52YXMgNGsKZmxvYXRpbmcgYW5kIGZseWluZyBpc2xhbmQKYSBtYWlkIGluIGEgbWFnaWNhbCBmb3Jlc3QKYSBtYWplc3RpYyBnb3RoaWMgaW5kaWFuIGRyYWdvbgpmYW50YXN5IHBhaXRuaW5nCihzaGFycCkKcG9sYXJvaWRlIHBob3RvCmhpZ2ggd2FsbGVkIHR1bm5lbApncmVlbiBmbG9vcgpoYXJvbGQgbWNjYXVsZXkKYSBtYW4gc2l0dGluZyBvbiBhIGpldHR5CmEgbWFuIHdlYXJpbmcgYSBibGFjayBqYWNrZXQKaW4gZGFyayBzb3VsCndlYXJpbmcgcmVkIHRhbmsgdG9wCndlYXJpbmcgYmxhY2sgdHNoaXJ0CndvcmtpbmcgY2xvdGhlcwplZXJpZSBhbmQgZ3JpbSBhcnQgc3R5bGUKY2xvc2UtdXAhISEhISEKYSBtYXNzaXZlIGNhdGhlZHJhbCBpbiBhIGZvcnJlc3QKYSBtYXNzaXZlIHRvcm5hZG8gYXBwcm9hY2hpbmcKZ2xvd2luZyByZWQgbXVzaHJvb21zCnV0b3BpYSBzY2ktZmkgc3R5bGUKYSBtZWRpZXZhbCBrZWVwCmEgbWVkaWV2YWwKc29mdCBvdmFsIGZhY2UKd2F2eSBzaG9ydCBoYXplbCBoYWlyCnNvZnQgZmlsdGVyZWQgb3V0ZG9vciBsaWdodGluZwoxMDBtbSBzaWdtYSBsZW5zCnNvbGlkIHNtb290aCB0ZWV0aApzaG93aW5nIGZvcmVoZWFkCndpdGggYSBsYXJnZSBicmVhc3RzCnN0cmFpZ2h0IHRlZXRoCmhhaXIgdGllZCBiYWNrCnNoZSBoYXMgYmx1ZSBleWVzCmN1cmxzIG9uIHRvcApjYW5vbiBlb3MgNWQgbWFyayBpdgpmYWNpYWwgYWN0dWFyeQpyb2JlZCBmaWd1cmVzIHNhdCBhcm91bmQgYSB0YWJsZQphIG1lcm1haWQgaW4gdGhlIHNlYQpkcmF3aW5nIGZvciBjaGlsZHJlbgppbnRyaWNhdGVseSBkZXNpZ25lZApzY2FycnkgY2FzdGxlKSkuIG15c3RpY2FsCnBob3RvbW9ycGgKaW4gYSBjb2xpc2V1bQpzcGFydGFuIGFybW9yCmVwaWMgc2NpLWZpIGNoYXJhY3RlciBhcnQKNjAncyBjYXJ0b29uLXNwYWNlIGhlbG1ldAp3aGl0ZSBoaWdoIHdhaXN0ZWQgc3dpbXN1aXQKY2xvdGhlZCBpbiB2aW5lcwpibG9vZCBkcm9wbGV0cwptb2Rlcm4gZWFydGh5IG5ldXRyYWwgZWFydGh5CmludGVyaW9yIHBob3RvZ3JhcGh5CndpdGggYmFjayB0byB0aGUgY2FtZXJhCmx1eHVyaW91cyB3b29kZW4gY29mZmVlIHRhYmxlCndpbGRsaWZlLiBhdG1vc3BoZXJpYwp0dWxpcHMKaGQgY29uY2VwdCBhcnQKZmFudGFzdHkgYXJ0CmNhbiBiYXNkb2dhbgpiYXIgdG9zeiBkb21pY3plawpwaG90by1yZWFsaXN0aWMgbWF4aW11bSBkZXRhaWwKYXVnbWVudGVkIGN5Ym9yZwp0YWtlbiBpbiB0aGUgbGF0ZSAyMDAwcwpsaWdodCBjb21pbmcgZnJvbSB0aGUgd2luZG93cwphIG15c3RlcmlvdXMgbGFuZHNjYXBlCmEgbXlzdGljYWwgdGVtcGxlCmF1dG9kZXNrIDNkcyBtYXgKZWxlY3Ryb24gbWljcm9zY29wZSBwaG90b2dyYXBoeQo4ayB1bHRyYSBoaWdoIGRldGFpbAplbGVjdGlvbiBwb3N0ZXIKbW9ub2Nocm9tYXRpYyBhaXJicnVzaCBwYWludGluZwo4ayB1bHRyYS1yZWFsaXN0aWMgZGVwdGggc2hhZGluZwpkcmFtYXRpYyBhbmQgYXRtb3NwaGVyaWMKYW50aHJvcG9tb3JwaGljIGRvZwp3aGl0ZSBkcmVzcyBzaGlydAooKG1vbm9saXRoKSkKYmVhdXRpZnVsIGZlYXRoZXIKZXh0cmVtZWx5IGhpZ2ggYXBlcnR1cmUKd2F0ZXIgY29sb3Igc3BsYXNoCmRhcmsgZWFydGh5IGNvbG91cnMKMiBwb2ludCBwZXJzcGVjdGl2ZQp3aXRoIGl2eQpzdW4gcmF5cyB0aHJvdWdoIHRoZSB0cmVlcwppbiBiYXJjZWxvbmEKY2hyaXN0bWFzIHRyZWUKaW4gYSBwb3N0LWFwb2NhbHlwdGljIHdhc3RlbGFuZAphIHBhaW50aW5nIG9mIGFuIGlwaG9uZQplYXJ0aHkgY29sb3VycwpzaW5pc3RlciBleWVzCmRlZXAgZWFydGh5IGNvbG91cnMKa8SBcmxpcyBwYWRlZ3MKbWF1dmUgYW5kIGNpbm5hYmFyIGFuZCBjeWFuCmEgcGFpbnRpbmcgb2YgdHdvIHBlb3BsZQp5ZWxsb3cgYW5kIGJsdWUgY29sb3Igc2NoZW1lCmEgcGFpbnRpbmcgb2Ygd2hpdGUgc2lsdmVyCigoc3RpbGwgbGlmZSkpCmEgcGFsYWNlIHdpdGggYSB0aG91c2FuZCBsb25nCmEgcGFsZSBza2luCmRlY2lzaXZlIGFuZCBzdHViYm9ybiBwb3J0cmFpdAphIHBhbG0gdHJlZQp0aGUgdmFuaXNoaW5nIG9mIGV0aGFuIGNhcnRlcgpjaW5lbWF0aWMgbGlnaHRpbmcgcGhvdG9ncmFwaHkKaW4gYW4gYWJhbmRvbmVkIGJhcm4Kbm8gbGVzcwphIHBob2VuaXgKZiAyLjUKc2NhcnkgYXRobW9zcGhlcmUKc2luZ2xlIHZhZ3VlIGxpZ2h0CmphY2tpZSBjaGFuIGRvaW5nIGxzZAphdCBjaGVja291dApkZWFkIGluc2lkZQpwZXJ1dmlhbiBib3kgbG9va2luZwp0cm9waWNhbCBwYWxtcwpjaW5lbWF0cm9ncmFwaHkKcHJvb2YKYXJnZW50aW5hIGZsYWdzIGJlaGluZApjcmFja2VkIHZhcm5pc2gKcHJpbnRlZCBvbiBhIGNyZWFtIGxpbmVuIHQtc2hpcnQKcG9saXRpY2FsIGFydAp3ZWFyaW5nIGEgd2hpdGUgZmxvd2luZyBkcmVzcwppbiBhIGxhdmVuZGVyIGZpZWxkIGluIGZyYW5jZQoxLjIKcHJldGVudGlvdXMKYm9tYmFzdGljIG9zdGVudGF0aW91cwpmYW5jaWx5IGRlY29yYXRlZCBmbGFtYm95YW50CmZsYXNoeSBmbGFzaCBlbGVnYW50Cm92ZXJkb25lCnByb2Z1c2UKbWVzc3kgYmxvbmRlIGhhaXIKaGUgbG9va3MgdmVyeSBzb3BoaXN0aWNhdGVkCmRyZWFteSBmZWVsaW5nCnd3MiBwaG90bwpjYXN1YWwgb3V0Zml0Cm9mZmljZSByb29tIGludGVyaW9yCnRpZSBkaWUgc2hpcnQKYWxpZW4gc2t1bGwKYSBwaG90byBvZiBhbiBlbGVwaGFudAphIHBob3RvIG9mIGFuIG9sZCBvcGVuZWQgY2FtZXJhCmludGVybmFscyByZXZlYWxlZAppb3dhCmEgcGhvdG8gb2Ygc2VwaGlyb3RoCmplZmYKd2Fsa2luZyBhd2F5IGZyb20gY2FtZXJhCnBob3RvZ3JhcGggdGFrZW4gaW4gMTk4OQozNW1tIG1hY3JvIHBob3RvZ3JhcGh5Cih2aW5lcykKKCgoZHJhZ29uZmx5KSkpCnZlbnVzIGVmZmVjdAoxLjhmCnByb3VkbHkgd2Fsa2luZyBkb3duIHRoZSBzdHJlZXQKcGhvdG8gdGFrZW4gaW4gMjAxOApiYWQgbGlnaHQKbWFnaWNhbCBzb3ZpZXQgdG93bgpjb3p5IGFybSBjaGFpcnMKdGFrZW4gaW4gdGhlIGVhcmx5IDE5MzBzCjI1IHllYXJzIG9sZApzdXJyZWFsIGRpZ2l0YWwgYXJ0CnZlcnkgc3VubnkKaW4gZnJvbnQgb2YgYSBjb21wdXRlcgppbiB0aGUgY2VudGVyIG1pZGdyb3VuZAphIHBob3RvcmVhbGlzdGljIHJlbmRlcmluZwpmdWxsIGZhY2UgYW5kIGJvZHkgcG9ydHJhaXQKaGVtZXJhCnBob3Rvc2hvcHBhaW50aW5nCndpdGggcGhvdG9yZWFsaXN0aWMgbGlnaHRpbmcKZnVsbGhkCmEgcGljdHVyZSBvZiBhIGtsaW5nb24gb3BlcmEKYSBwaWN0dXJlIG9mIGEga2xpbmdvbiBtdXNpY2FsCmZhbnN0YXN5CmpvcmRhbiBncmltbWVyIGFuZCBuYXRhc2hhIHRhbgpndWlsZCBjb21taXNzaW9uCmFsIGZyZXNjbwpiaWcgZ3VucwphIHBpcmF0ZQpzdHlsZSBvZiBlaWljaGlybyBvZGEKb2N0YW5lIHRyZW5kaW5nIG9uIGNnc29jaWV0eQphIHBsYW5ldCBvZiBlbmRsZXNzIHN1ZmZlcmluZwpkeXN0b3BpYW4gZGlnaXRhbCBhcnQKYSBwbGFudCBtb25zdGVyCm1pbmlhdHVyZSBraXR0ZW4KZm9vZCBuZXR3b3JrCmhpZ2ggZGVmaW5pdGlvbi4gZGlnaXRhbCBhcnQKY2xvdWR5IG92ZXJjYXN0IHNreQo2MDBtbQpiaWcgZmxhbWVzCmEgcG9vbCBpbnNpZGUgdGhlIGdpYW50IHBhbGFjZQpjcm9jaGV0IHNraW4KbWVzb3BvdGFtaWMKYSBwb3J0YWwgdG8gdGhlIGRlcHRocwphIHBvcnRyYWl0IG9mIEBoeXBub3Nfb25jCmV4dHJlbWVseS1kZXRhaWxlZAphIHBvcnRyYWl0IG9mIGR3YXluZSBqb2huc29uCmluIHN0eWxlIG9mIGZ1dHVyaXNtLmRpZ2l0YWwgYXJ0CmRhcmsgc291bHMgYXJ0Cmxvb255IHR1bmVzIHN0eWxlCmEgcG9ydHJhaXQgb2Ygam9zaCBicm9saW4KYSBwb3J0cmFpdCBvZiBqdWR5IGhvcHBzCmNhbnZhcyBhcnQKYSBwb3J0cmFpdCBvZiBsYW5hIGRlbCByZXkKYSBwb3J0cmFpdCBvZiBsaW5rCmEgcG9ydHJhaXQgb2YgcmFodWwga29obGkKYmVhdXRpZnVsISEhIGRpZ2l0YWwgYXJ0CmxlYXJuaW5nCmV5ZSByZWZsZWN0aW9uCmN1dGUgYmxhY2sgZHJlc3MKc2lnbWEgODUgbW0gZi8xNApkdWFsIHdpZWxkaW5nIHR3byBtYWdpY2FsIHN3b3JkcwphIHBvcnRyYWl0IG9mIGEgZ2lybApzeW1ldHJpY2FsIGZhY2Ugc3RydWN0dXJlCndsb3AgcGFpbnRpbmcgc3R5bGUKbG9uZyBtYWdlbnRhIGhhaXJlCmFub3JleGljIGZpZ3VyZQphIHBvcnRyYWl0IG9mIGEgbWFuCnNlYSBzaGVsbApiYXR0bGUgd29ybiBhcm1vdXIKYSBwb3J0cmFpdCBvZiBhIHN1aWNpZGFsIGdpcmwKdm9sdW1lIG5vaXNlCnNwaWt5IHNraW4KbXVzaHJvb20gY2xvdWQgaW4gdGhlIGJhY2tncm91bmQKd2luZCBibG93aW5nIGFuZCBoYWlyIGZsb3dpbmcKYmVhdXRpZnVsIGxvbmcgYnJvd24gaGFpcgpiZWF1dGlmdWwgbG9uZyBmaXJlIGhhaXIKd2VhcmluZyBpY2UgY3J5c3RhbHMKaGUgaXMgYWJvdXQgMjAgeWVhcnMgb2xkIHwgc2hvcnQKZHlzdG9waWFuIHNjaS1maSBjaGFyYWN0ZXIKaGVhdmVubHkgYnJpZ2h0IGxpZ2h0CmhpZ2ggY29oZXNpb24KYXJ0IGNvdmVyIGlsbHVzdHJhdGlvbgpkZXRhaWxlZCBnZW9tZXRyeQpzaGFudHkgdG93bgpwYWludGVkIGluIHRoZSBzdHlsZSBhcmNhbmUKcGVyZmVjdCBtb21lbnQKYSBwc3ljaGVkZWxpYyBleHBlcmllbmNlCnNsaWdodGx5IG1pbmltYWwKYSByYWdkb2xsIGNhdCB3aW5kc3VyZmluZwpzdXBlciByZWFsaXN0aWMgcGFpbnRpbmcgc3R5bGUKZGVlcCBhbmQgY2hhcm1pbmcgZXllcwpkZWxpY2F0ZSBwYWxlIHBpbmsgbGlwcwpwaXhpdnMKZXRoZXJlYWwgdmFwb3JvdXMgdGFuIHNraW4KaXJpZGVzY2VudCBldGhlcmVhbCB2ZWlscwp3YXRlciBwYXJ0aWN1bGVzCmV4dHJhIGRldGFpbGVkIGJvZHkKY3Jvb2tlZCBsZWdzCm5lb24gbGFuZHNjYXBlCmRlYWQgcGVvcGxlcwpzdW5ueSBsYW5kc2NhcGUKYWxpZW4gZ3JvdW5kCmNwbCBmaWx0ZXIKY2xhc3NpY2FsIGFuY2llbnQgZ3JlZWsgYXJ0CnBhcGVyIGJhY2tncm91bmQKaHlwZXItcmVhbGlzdGljIHRhdHRvbwpkZXRhaWxlZCBhY3J5bGljIHBhaW50aW5nCmEgcmVkIGJlYXJkZWQgZ3V5IGRyaXZpbmcgYSBndDNzCmEgcmVkIGRyYWdvbgpuZXV0cmFsIGZsYXQgbGlnaHRpbmcKZmVhdHVyZWQgaW4gbGlmZSBtYWdhemluZQpoaWdobHkgZmFzaGlvbmFibGUKbiAtNAppdCBpcyB0aGUgY2FwdGFpbiBvZiBhIGNyZXcKc3RhcnMgZ2xpc3RlbmluZyBpbiB0aGUgbmlnaHQKcGFzdGVsIG92ZXJmbG93CndhbGxwYXBlciBvbiB0aGUgd2FsbHMKYSByb29tCnRyYW5xdWlsbGl0eQpzdW4gc2V0dGluZyBpbiB0aGUgYmFja2dyb3VuZAphIHJ1c3RpYyBhbGJ1bSBjb3ZlciBvZiBhIGNsb2NrCmZlbGxpbmkgYWxtb2RvdmFyIGpvaG4gd2F0ZXJzCmluIGEgZGVuc2UgZm9yZXN0CmxhcmdlIHNlbnNvciBkc2xyIHBob3RvCmRlYXRocwpyYWluYm93IGluIHRoZSBza3kKZ3JlZW4gc3BhY2VzCmhhbGYtbGlmZSAyCmxpdmluZyByb29tIHZpYmUKY2luZW1hdGljIGNvbG91ciBncmFkaW5nCmZ1dHVyZSB3YXJyaW9yCjNkIHNvY2lldHkKYnVybmluZyBvY2VhbgphZXJpYWwgdmlldyBmcm9tIGFib3ZlCmRyb25lIGNhbWVyYSBhbmdsZQpsdXNoIHBsYW50cyBhbmQgYm9uc2FpIHRyZWVzCmFnb255IGFuZCBzdWZmZXJpbmcKc3R1ZGlvIHNvZnQgbGlnaHRpbmcKZXllbGV2ZWwgcGVyc3BlY3RpdmUgaW1hZ2UKdW5lYXJ0aGx5IGFydCBzdHlsZQp4ZW5vbgpsYWtlIHJlZmxlY3Rpb24Kc21hcnRwaG9uZSBmb290YWdlCmEgc2hvcnQgYW5kIGF2ZXJhZ2UgYnVpbHQKZHJlc3NlZCBpbiBhIGJlYXV0aWZ1bApmYW5jeSBzaWx2ZXIgZHJlc3MKaW5zYW5lbHkgc3VwZXIgZGV0YWlsZWQKZmFtb3VzIGlsbHVzdHJhdGlvbgpmbG9hdGluZyBpbiBwZXJmdW1lCjMtZApvZmZpY2lhbCB3aGl0ZSBob3VzZSBwb3J0cmFpdApuaWdodCBjYW1lcmEKYSBza2VsZXRvbiBzbW9raW5nIGEgY2lnYXIKaGlnaGx5IGRldGFpbGVkIHNrZWxldG9uCmEgc2t1bGwgb2YgYW4gYWxpZW4gY3JlYXR1cmUKYW5ndWxhciAxNi1jb2xvcgp3b29kbGFuZCBjcmVlawphIHNtYWxsIG1lZGlldmFsIHZpbGxhZ2UKZGV0YWlsZWQgcHJvZHVjdCBzaG90CjE5ODBzIGNhcnRvb24KbWVkaXVtIHBlcnNwZWN0aXZlCnBob3RvIHN0dWRpbyBiYWNrZ3JvdW5kCmEgc29sZGllciBhaW1pbmcgYSBndW4KaGlnaC10ZWNoIHJlZCBhcm1vcgpncmVlbiB2aXNvcgpzY2ktZmkgc29sZGllcgpwYXRoIHRyYWNpbmcgcmVuZGVyCmEgc29yY2VyZXNzIGNhc3RpbmcgYSBpY2UgYmFsbApncmV5IGhvb2RpZQoxLzYgZ2FyYWdlIHJlc2luIGtpdApjaW5lbWF0aWMgOGsgdWhkCm1hcnZlbCBjb21pYyBib29rIGRyYXdpbmcKc2hyb3VkZWQgaW4gZGFya25lc3MKYSBzcG90dGVkIGRvdmUgZmx5aW5nCnN1biBzdHJlYW1pbmcgaW4KYSBzdGVhbXB1bmsgY2l0eQp0ZjIgc2NyZWVuc2hvdAoob2lsKSBwYWludGluZwooKChydXN0eSkpKQp5YXJuIGJhbGwKY2Fzc2V0dGUKc2hvdCB3aXRoIHNvbnkgYWxwaGEgMSBjYW1lcmEKc3VwZXIgcGFuYXZpc2lvbiA3MAprYXRhbmFzIHN0cmFwcGVkIHRvIGhlciBiYWNrCndoaXRlIGhhaXIgYW5kIGJlYXJkCmEgc3RpbGwgb2Yga293bG9vbgpiaWcgcG9vciBidWlsZGluZwppbiBhIHN0YXIgd2FycyBzZXF1ZWwKZWFzdG1hbiBrb2RhawpydWxlIGZvciB0aGlyZHMKaG9sZGluZyBhbiBhY3RpdmF0ZWQgbGlnaHRzYWJlcgo4ayByZXNvbHV0aW9uLiB0dXBhYwpzZXQgb24gbmlnaHQKbm9zdGFsZ2ljIGxpZ2h0aW5nCnNwYXJrbGVzIGFuZCBzdW4gcmF5cwphIHN0aWxsIG9mIGEgaGFwcHkKYSBzdGlsbCBvZiBhbiBldGhlcmVhbAp3aXRoIGEgYnVuY2ggb2Ygc3R1ZmYKd2VhcmluZyBhIHZyLWhlYWRzZXQKdHN1a2FzYSBkb2tpdGUKNzAgeWVhcnMgb2xkCnN0eWxlIHN0ZXZlIG1jY3VycnkKbW9tZW50IGZyb3plbiBpbiB0aW1lCm1pY3JvbmF1dHMKbmV3IGdvZHMKdGFya292c2t5IGNvbG9yIHBhbGV0dGUKd2VsbCBtYWRlCmlzIGJlaW5nIGRyYXduIGludG8gYSBibGFja2hvbGUKdGhlIG1vcm5pbmcgc3Rhcgprbml0dGVkIGhhdAphIHN1aXRlZCBtYW4gaW4gYSBoYXQKZGFyayBjbG91ZHMgaW4gdGhlIGRpc3RhbmNlCmNvbG9yIHBhbGV0dGUgaXMgZGFyayBvcmFuZ2UKZGFyayBzaWVubmEgYW5kIHdoaXRlCmEgc3VwZXItc21hcnQKYmx1ZSBob3VyIGxpZ2h0aW5nCnJ1bGUgb2YgdGhyaWRzCm5lb24gdGludAp2b2lkIHZvcnRleApvbiB0dgphIHN1cnJlYWxpc3RpYyBiaXJkCmEgc3dvcmQgc3R1Y2sgaW4gdGhlIGdyb3VuZAphbnRocm9wb21vcnBoaWMgcmFiYml0CmEgdGF0dG9vIG9mIGEgZm94CmEgdGVlbiBibGFjayBjeWJvcmcKYSB0ZW1wbGUKdmlkZW8gZ2FtZSBpY29uCmhpcyBleWVzIGdsb3dpbmcgcmVkCmRyYXdpbmQgc3R5bGUKaW5zdGFsbGF0aW9uIHZpZXcKd2l0aCBhbnRocm9wb2xvZ3kgb2Ygd29uZGVyCmV4aGliaXRpb24gZGlzcGxheQo1MHMgc3R5bGUKZmlyZSB0eXBlCmhpZ2ggZGVmZW5pdGlvbgpibGFjayBhbmQgd2hpdGUgY29sb3IgcGFsZXR0ZQpnYXVnZXMKdmluZXMgZXZlcnl3aGVyZQpiaWcgY2xvY2sKYSB0cmFuc2x1Y2VuY3kKZmFudGFzeSBjaXR5IGJhY2tncm91bmQKdG9ybiBzYWlscwpzYWRkbGUgdXAKbG92ZWNyYWZ0aWFuIG5pZ2h0bWFyZQpzcHJpbmcgdmliZXMKbWFrb3RvIHNoaW5rYWkgYW5kIGJpb3dhcmUKZ3V3ZWl6IGFuZCBtYWtvdG8gc2hpbmthaQphIHVuaWNvcm4KYSBwYXJrCndlcyBhbmRlcnNvbiBhbmQgZ3VjY2kKcnVncwpnbG9vbXkgd2VhdGhlci4gaGlnaCBxdWFsaXR5CmEgdmVyeSBiZWF1dGlmdWwgYmVyc2Vya2VyIHdvbWFuCmFydGdlcm0gYW5kIGdpbCBlbHZncmVuCndlYXJpbmcgYSB0aWFyYQpyL2F3dwpjcnlzdGFsIHRlZXRoCnBlYWsKdWx0cmF2aW9sZXR0ZSBjb2xvciBzY2hlbWUKaW5mcmFyZWQgY29sb3Igc2NoZW1lCmxhbmRzY2FwZSBmcm9tIGEgY2FyIHdpbmRvdwoyMDA3IGJsb2cKcGxhc3RpYyBjaGFpcgpiYWNrc2NhdHRlciBvcmJzCmEgdmVyeSBzYWQgbWFuCmRlZXAgYmx1ZSBiYWNrZ3JvdW5kCnJlYWxzdGljIGxpZ2h0aW5nCmF3YXJkIHdpbm5pbmcgbWFrZXVwCmxpZ2h0aW5nIGZyb20gc3BvdGxpZ2h0cwp3b3cgYXRtb3NwaGVyZQp0b3AgaG9ycmlibGUgY3JlYXR1cmVzCm1hY2FicmUgdy0gNzY4CmEgdmlvbGVudCBzdG9ybSBhdCBzZWEKbXV0ZWQgYnJvd25zCnllbGxvd3MgYW5kIGJsYWNrcwphIHdhbmRlcmVyIG9uIGEgbW91bnRhaW4KYmxhY2sgcm9jb2NvCmEgd2VpcmQgY2lyY3VzCnBhdGggYmFzZWQgcmVuZGVyaW5nCmZseWluZyB0aHJvdWdoIHRoZSBjbG91ZHMKYmVhdXRpZnVsIGZsb3dpbmcgZmVlbGluZwpidXR0ZXJmbGllcyBhbmQgYmlyZHMKMjAwbW0gZi8yLjAKcmF5IGNpbmVtYXRpYwpzdG9uZSByb29mCmNvbG9yZnVsIGFuY2llbnQgZWd5cHRpYW4gY2l0eQpjb2xvcmZ1bCBjaXR5IGluIGFuY2llbnQgZWd5cHQKYSB3aWRlLWFuZ2xlCnJlZCBjdXJ0YWluCnNoYXJrcyBzdXJmYWNpbmcgZnJvbSB0aGUgbGFrZQphIHdpemFyZCdzIGFwb3RoZWNhcnkKYmlyZHMgZmx5aW5nIGF3YXkKY2xvc2UgdXAgcG9ydHJhaXQgc2hvdApzaGUgaXMga29yZWFuCmVsZWdhbnQgaW50ZXJpb3IKYSB3b21hbiB3ZWFyaW5nIHJlZCBoaWdoIGhlZWxzCjE4dGggY2VudHVyeSBwaG90b2dyYXBoCnN0YW5kaW5nIGluIGdvbGQgZm9pbApoZXIgZmFjZSBpbiBkaXNjcwpzaGUgaGFzIGEgZGlhbW9uZCBleWUKc3VwZXIgcGhvdG8tcmVhbGlzdGljCmEgd29tYW4ncyBmYWNlCnNpdCBvbiBhIGJlbmNoCnRyZWU7IG9uIHRoZSB0ZW5uaXMgY29hdAoxOTkwJ3MgcGhvdG8KY3liZXJwdW5rIHRlbXBsZQp3aXRoIHByb2Zlc3Npb25hbCBsaWdodGluZwppbnNpc3RlZCBvbiBjdXR0aW5nIGluIGxpbmUKc28gaSBhZHZpc2VkIGhlciB0byBnZXQgaW4gbGluZQppbiBhIHN1aXQgb2YgYXJtb3VyCm9uIHRoZSBkZWNrIG9mIGEgc2FpbGluZyBzaGlwCm5vYnV0YWthIGlrZQp0cnlpbmcgdG8gcmVhZApsb25nIGZsdWZmeSBoYWlyCndlYXJpbmcgYSBibHVlIGRyZXNzCmxvb2tpbmcgb3V0IGludG8gdGhlIGNvc21vcwoxOXRoIGNlbnR1cnkgb2lsIHBhaW50aW5nCndlYXJpbmcgYSB0b2dhIGFuZCBzYW5kYWxzCnNoZSBpcyB3ZWFyaW5nIGEgd2V0IGNvYXQKcHJvZmVzc2lvbmFsIHN0dWRpbyBwaG90b2dyYXBoCmEgeW91bmcgbWFuCm9uIGEgaG9yc2UKbGF2aXNobHkgZGVjb3JhdGVkCmFjcm9iYXRpYyBwb3NlCndlYXJpbmcgYSB3aGl0ZSBob3NwaXRhbCBnb3duCndhbGtzIGRvd24gZGFyayBoYWxsd2F5CmhkIGZvb2QgcGhvdG9ncmFwaHkKYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQphY2FiCmFpIGFydApwb3N0IHByb2Nlc3NlZCA0awpoYWxmIGZpZ3VyZSBzaG90CmdvbGQgaG91ciBsaWdodAphbGwgdGhlc2Ugd29ybGRzIGFyZSB5b3VycwphbiA4ayByZXNvbHV0aW9uCmZyYWN0YWwgc2hhcGVzCmRlbW9ub2xvZ3kKYWFyb24gcm9kZ2Vycwp1bHRyYS1zaGFycCBkZXRhaWxzCmFiYW5kb25lZCB0b3duCmxvdCBvZiB2ZWdldGF0aW9uCnNldmVyYWwgc29sZGllcnMKbGFzZXIgc2lnaHRzIG9uIHdlYXBvbnMKcHJvdGdyYXBoeQpzdG9ybSB3ZWF0aGVyCmFib21hc25vdwpub3QgY2xlYXIKYmx1ZSBhbmQgb3JhbmdlIHRvbmVzCnRyYWZmaWMgd2l0aCBsaWdodCB0cmFpbHMKYWJzdHJhY3QgZmFjYWRlcyBvZiBidWlsZGluZ3MKY29zbWljIGNyeXN0YWxzCmFjY2lkZW50cwpvZiBjb3Vyc2UKYmxhY2suIHllbGxvdwphY3JvcGhvYmlhCnNlYWxlZCBzaW5jZSAxOTg5CnN1bnNldCBkYXJrIGRyYW1hdGljCnZpYnJhbnQgY2l0eSBsaWdodHMKaW4gYW4gYXJlbmEgaW4gbW92aWUgZHVuZS0yMDIxCmFpbWluZyBhIGJvdyBhbmQgYXJyb3cKaHVtYW4gdG9yc28gb24gYSBob3JzZSBib2R5CmFkYW0gZHJpdmVyIGFzIG1hc3RlciBjaGllZgptb3ZpZSBwb3N0ZXIgcHJvbW8KcmVuYWlzc2FuY2UgbGlnaHRpbmcKc3R5bGUgYWxleCBncmF5CnN0eWxlIGRhbiBoaWxsaWVyCnN0eWxlIG9mIGRjIGNvbWljcwphZGFtIGFuZCBldmUgaW5zaWRlIHRoZSBicmFpbgpzbWFsbCBjbG9ja3MgYXMgbGVhdmVzCmFkYW0gd2FybG9jawphZG9sZiBoaXRsZXIgZnVua28gcG9wCmJlYXV0aWZ1bCBwb3J0cmFpdCBpbWFnZQphZHJpYW4gbW9uawo2MG1tIHBvcnRyYWl0CnNpbHZlciBjaHJvbWUgY29sb3IKbWluaW1hbGlzdCBsaW5lcwphd2FyZCB3aW5uaW5nIGFkdmVydGlzaW5nCmFlbGEgdGhlIGh1bnRyZXNzCmNyZW5lbGxhdGVkIGJhbGNvbmllcwp3b29kIG9ybmFtZW50cwp0aW55IG9ybmF0ZSB3aW5kb3dzCmJyaWdodGx5IGNvbG9yZWQgYnVpbGRpbmdzCnNwYXJzZSBiYXJlIHRyZWVzCmFlcmlhbCB2aWV3IG9mIG1vc2NvdyBrcmVtbGluCnN0eWxlIG9mIG1hY2llaiBrdWNpYXJhCmFmcmljYW4gYW1lcmljYW4KYWZyaWNhbiBjeWJlcnB1bmsgd2l6YXJkcwphZnJpY2FuIGVsZXBoYW50cyBpbiB0aGUganVuZ2xlCmZsb3dpbmcgbWlsawpjaGFyYWN0ZXIgY3JlYXRpb24Kd2hpdGUgY3ljCmFoIHB1Y2gKYmx1ZSBzb2Z0IGxpZ2h0CmFpbmNyYWQKYWlyIGpvcmRhbiAxIGhpZ2gKamFwYW5lc2Ugc3R5bGUgcGFpbnRpbmcKYW1hemluZyBjb2xvdXJzCmdyZWVuIGxpdGhhbSB2ZWlsCmZ1bGwgZmFjZSBmcm9udGFsIGNlbnRyZWQKYWthc2hpYwpoaWdoc2Nob29sIGR4ZApldHN1a28gbWl1cmEKZmlnaHRpbmcgc2NlbmUKYWtpeXVraSBzaGluYm8KbWlycm9ybGVzcyBjYW1lcmEKYWxhbiBtb29yZSBpcyBhbmdyeSBhYm91dCB5b3UKYWxhbiBtb29yZSBwb3J0cmFpdApwc3ljaGVkZWxpYyBwYWludGluZwphbGJlZG8gZnJvbSB0aGUgYW5pbWUgb3ZlcmxvcmQKYmFjayBhbmQgc3RhbmRpbmcKZnJvbSB0aGUgZHVjaHkgb2YgbGl0dWFuaWEKb24gYSBtaXN0eSBmb3Jlc3QKZGFyayBmYW50YXN5IGZvcmVzdApkcmFtYXRpYyBjaW5lbWF0aWMgYWN0aW9uIHNob3QKYWxiZXJ0IGVpbnN0ZWluIGFzIGEgdGVlbmFnZXIKcGhvdG9ncmFwaHkgcGhvdG9yZWFsaXNtCnRha2VuIG9uIGlwaG9uZSAxNCBwcm8KYWxiZXJ0IHVkZXJ6bwpncmVhdCBteXN0aWNhbCB3aW5nZWQgc2VycGVudAphbGJlcnQgd2Vza2VyIGZ1bGwgYm9keSBwb3J0cmFpdApyZWQgYmlydGhtYXJrCndhaWtpa2kgYmVhY2ggc2t5bGluZQpqYW1pZSByZWlkCm9pbCBwYWludGluZyA0awptbWEgc291dGhwYXcgc3RhbmNlCnZlcnkgY29oZXJlbnQgc3ltbWV0cnkKaG9sZGluZyBhIHJlZCBiYW5uZXIKbmV0IG9mIGJlaW5nCmFsZXggam9uZXMgd2l0aCBmcm9nIGxlZ3MKMjAwMiBtb3Jyb3dpbmQgZ3JhcGhpY3MKYWxleGFuZGVyIGx1a2FzaGVua28gaW4gc2NhcmZhY2UKaG9sZGluZyBhci0xNQpoaWdoIGRlZmluaXRpb24gc2NyZWVuc2hvdAphbGV4c3RyYXN6YQpzaWRlIGZyb250IHZpZXcKYWxmYSByb21lbyBwcm9qZWN0IGNhcgphbGZyZWRvIGFuZCB0aGUgYWZ0ZXJsaWZlCmFsZnJpYyBvdmVyZ3VhcmQKa2F3YWlpIG1hbmdhIHN0eWxlCmFsaWNlIGN1bGxlbgphbGljZSBnb2VzIGRvd24gdGhlIHJhYmJpdCBob2xlCmFsaWNlIGluIHdvbmRlcmxhbmQgc3luZHJvbWUKdmVyeSBsb25nIGZpbmdlcm5haWxzCmF1cm9yYSBha3NuZXMgYW5kIHplbmRheWEKc3BlY2tsZWQKbWFyYmxpbmcgZWZmZWN0CnR1bGxlIGFuZCBsYWNlCmF1cm9yYSBha3NuZXMgYW5kIHpvw6sga3Jhdml0egpzd2VldCBhbmQgaW5ub2NlbnQKaGVuIG9mIHRoZSB3b29kcyBtdXNocm9vbXMKbWFzdGVyZnVsIHBhaW50aW5nCmhxIDRrIHBob25lIHdhbGxwYXBlcgpwaGFudGFzbWFnb3JpY2FsCmRyZWFtIHNlcXVlbmNlCjE5OTYpCnN5ZCBtZWFkIGFuZCByYXBoYWVsIGxhY29zdGUKbmVvbiBkaWdpdGFsIGFydApkYXJrIG5lb24gY29sb3JlZCB1bml2ZXJzZQo1IHllYXJzIG9sZAphbGllbiBjaXZpbGl6YXRpb24KZHVuZSAoMjAyMSkKbWF0ZXJpYWwgYnJhc3MgJiBjb3BwZXIgZ29sZAphbGllbiBmbG93ZXIKY2luZWdyYXBoaWMKZGlnaXRhbCBhcnQgLSBuIDUKcmlwbGV5Cm5leHQgdG8gYSB0cm9waWNhbCBwb29sCm1hcmMgc2lsdmVzdHJpCmFsaWVucyBsYW5kIGhlcmUKMTkyMHMgcGljdHVyZQphbGlzb24gaGFubmlnYW4KZGlnaXRhbCBhbmltYXRpb24KeW91IGJldHRlciBydW4KYWxsdXJpbmcgbWVzbWVyIHdvbWFuCmdyb3duIHVwCmR1YWwgc3dvcmRzCmFsbHVyaW5nIHRpZWZsaW5nIGRydWlkCmNpdHkgcnVpbnMgaW4gdGhlIGJhY2tncm91bmQKYWxwaGFiZXQgc291cAppbiB0aGUgaGlnaCBzY2hvb2wgZ3ltCmdyZXkgc2tpcnQKdGhlIHN0cmF3IGlzIGluIGhpcyBtb3V0aApob2xvZ3JhcGhpYyBuZW9uIGhpZ2hsaWdodHMKYW1hemluZyBhbGllbiBsYW5kc2NhcGUKd2FybSBhbmQgY29vbCBjb2xvcnMKYW1hem9uIG1pbGsgZnJvZwphbWJlciBoZWFyZCBzcXVhdHRpbmcgb24gYSBiZWQKYW1iZXIgaGVhcmQgYXMgY2FwdGFpbiBhbWVyaWNhCmN1cnNlZCBvaWwgcGFpbnRpbmcKYW1lcmljYW4gcHJvZ3Jlc3MKc2l0dGluZyBvbiBhIHNvZmEKYW1lcmljYW4gd2VzdCBzY2VuZXJ5CnhpeHRoIGNlbnR1cnkgcGFpbnRpbmcKdGhlIGdyZWVuIGxhbnRlcm4Kd3dpaSBwcm9wYWdhbmRhIHBvc3RlcgphbW9uZyB1cyBpbXBvc3RvcgpvbiBhIHlvdW5nIGJlYXV0aWZ1bCB3b21hbiBuZWNrCjRrIGhkIGYyLjggNTBtbQpzb25pYyAoc2VyaWVzKQooKGZpc2ggZXllKSkKd2lja2VyIGNoYWlyCnJldm9sdmVyIG9uIGNoYWlyCmFuIDgwJ3MgYmVkcm9vbQpjb2xvcmVkLXBlbiBkcmF3aW5nCmFuIGFsY2hlbWlzdAphbiBhbGllbiByb2JvdCBuYXVnaHR5IG51cnNlCmdvb2Qgc21pbGUgY29tcGFueSBmYW50YXN5CmFuY2llbnQgZXJhCmhpcm8KcGl4YXIgY2FycyBtb3ZpZSBzdHlsZQp0aGUgY2FycyBoYXZlIGZhY2VzCmtpZHMgbW92aWUKYW4gaWNlIHZvbGNhbm8KZmlyZSBhbmQgaWNlCmdhbWluZyBtb25pdG9ycy4gYXJ0c3RhdGlvbgpzcG9ydHMgbWFzY290Cm5hc2EgYXJjaGl2ZXMKNTBtbSBmLzIuOAphd2FyZCB3aW5uaW5nIG1vdmllCm9taW5vdXMgcGhvdG8KZG9vbSBhbmQgZ2xvb20KcG9zdC1hcG9jYWx5cHRpYyB0aW1lcyBzcXVhcmUKcm9vdAphbiBhZG9yYWJsZSBraXR0ZW4KYW4gYWVyaWFsIHRlbm5pcyBjb3VydAp3aW50ZXIgdGltZQpkYXJrIHBpbmUgdHJlZXMKYWl6b21lIHBhdHRlcm5zCnBpbmsgY29sb3Igc2NoZW1lCigocHVycGxlKSkKKCgoeWVsbG93KSkpCigoYmx1ZSkpCigocGluaykpCihkaWdpdGFsIGFydCkKKGFydCBzdGF0aW9uKQp0diEKKCh0cmVlcykpCmFuIGFsaWVuIGNpdHlzY2FwZQphIHBhaXIgb2YgcmliYmVkCnJpY2ggYW5kIGRlZXAgY29sb3JzCmhyIGdpZ2VyIGFuZCB6ZHppc8WCYXcgYmVrc2nFhHNraQphbiBhbG1pZ2h0eSB3YXJsb2NrCnZlcnkgdmVyeSB2ZXJ5IGVwaWMKd2F0ZXJmYWxsIGZsb3dpbmcgZnJvbSB0aGUgc3RvbmUKY2xhc3NpYyBncmVlayBhcnQKaW50cmljYXRlIGVuZ3JhdmluZwphbiBhbmltZSBuZW5kb3JvaWQgb2Ygc25vb3AgZG9nZwpuZW9uIGdlbmVzaXMKZmFudGFzdGljIHNjcmVlbnNob3QgYXJ0CmhlciB3aG9sZSBoZWFkIGluIHRoZSBmcmFtZQp3ZWFyaW5nIGFuIGFybW9yCmhvdWRpbmkgdmZ4Cmxvb2tpbmcgdXAgYXQgdGhlIHN0YXJzCnN0YW5kaW5nIGluIGZyb250IG9mIGEgd2F0ZXJmYWxsCmFuIGFuaW1lIGdpcmwKY29zbWljIHRpZWZsaW5nIGQmZAphbiBhbmltZSBwb3J0cmFpdCBvZiBjaXJubwphbiBhbmltZSBwb3J0cmFpdCBvZiBkYXZpZCBib3dpZQp3ZWFyaW5nIGEgZGFyayBkcmVzcwpnb2xkIGFuZCB5ZWxsb3cgbm90Y2hlZCBhbnRsZXJzCmJyb3duIHRhaWwKYW4gYW50aHJvIGNhdApjaXR5IGhpZ2gtcmlzZQpsYXJnZSBwbGFuZXQgaW4gdGhlIGJhY2tncm91bmQKYW4gYW50aXF1ZQplYXN5IHRvIHVuZGVyc3RhbmQKbG9yZCBvZiB0aGUgcmluZ3MgY29uY2VwdCBhcnQKYXRsYXMKYW4gYXN0cm9uYXV0IGhvbGRpbmcgYSBiZWFjaGJhbGwKaGUgaGFzIGEgYmlnIGVnZwphbiBhdG9tIGJvbWIgZXhwbG9zaW9uIGluIG11bWJhaQoxayBoZAphbiBhd2FyZCB3aW5uaW5nIHBob3RvCmNvbGQgbGlnaHQgZnJvbSB0aGUgd2luZG93Cm1hY3Jvc3MgZnJhbmNoaXNlCnZhbGt5cmllIGZpZ2h0ZXIgamV0CmFuIGF4b2xvdGwKYW4gZGl2ZXIgaXMgdW5kZXIgdGhlIHNlYQp0cmVuZGluZyBvbiBhcnRzdGF0dGlvbgpkZXRhaWxlZCByZWFsaXNtIHBhaW50aW5nCnRob3VzYW5kcyBvZiBnYWxheGllcwphbiBlbnRpdHkKd2l0aCB3aW5ncy4gdWx0cmEtZGV0YWlsZWQKY2hhaW5lZCBza2VsZXRvbgphbiBlcGljIGZhbnRhc3RpYyByZWFsaXNtCnZpYnJhbnQgYnJpZ2h0IGNvbG91cnMKZ2lsZGVkIG1hcmJsZWQgcGFwZXIgYmFja2dyb3VuZApkYXJrIGNvc21vcyBhbmQgZ2xvcmlvdXMgbmVidWxhCnN0YXJzIGluIHRoZSBuaWdodCBza3kKZmxvd2VycyBibG9vbWluZwp3ZWFycyB0aGUgYW5raCBzeW1ib2wKdGhlIGtleSBvZiBsaWZlCnRoZSBrZXkgb2YgdGhlIG5pbGUKcGV0cm9sIGVuZXJneQpyZW1icmFuZHQgb2lsCnN0YW5kaW5nIG9uIGEgc2thdGVib2FyZApjYXZlIHNldHRpbmcKc3Rvcm15IHNldHRpbmcKaG9sZGluZyBhIHJlZCByb3NlCnN0aWxsIGZyb20gYWtpcmEgKDE5ODgpCmJsb25kZSBoYWlyIHdpdGggYSBwb255IHRhaWwKaG9sZGluZyBhIHBhaXIgb2YgZmFucy4gdW5yZWFsIDUKd2VhcmluZyByZWQgY2xvdGhlcwpzaG9ydCBibGFjayBza2lydApjeWFuIGNvcnNldAphdG1vc3BoZXJpYyBmYW50YXN5IHNldHRpbmcKZGVtb24gc2xheWVyIGFydHN0eWxlCmNpbmVtYXRpYyBsaWdoaXRuZwphbiBlcGljIG1hamVzdGljYWwgZGVnZW4gdHJhZGVyCmFsaWVuIGZhdW5hCmV1cm9wZWFuIGZvbGtsb3JlCmFuIGV2aWwgZm9yZXN0CmFuIGV4cGxvc2lvbiBvZiBjb2xvcnMKYW4gZXh0cmVtZSBjbG9zZXVwIHNob3QKMTEyMG1tIGxlbnMKc2l0dGluZyBhdCBoaXMgbG91aXMgeGl2IGRlc2sKYnJpZ2h0IGhhcHB5IGF0bW9zcGhlcmUKZXZpbCBhbmQgZ29vZAppbiB3b25kZXJsYW5kCmRyaWJiYmxlIDhrCmFubmEgbmlrb25vdmEKZnVsbCBvZiBpbnNlY3Qgcm9ib3RzCnNub3d5IHdlYXRoZXIKZm9udGF3ZXNvbWUgc3R5bGUKcmljaCB0cmVlCm9uIGEgcmVkIGJhY2tncm91bmQKY29ycG9yYXRlIG1lbXBoaXMgc3R5bGUKYW4gaW1hZ2Ugb2YgYSBtb29ubGl0IGZvcmVzdAp3aXRoIGEgcml2ZXIgcnVubmluZyB0aHJvdWdoIGl0Cml0IGhhcyBhIGxha2UgaW4gdGhlIGRpc3RhbmNlCmFuIGltYWdlIG9mIGEgdG9ybmFkbwphbiBpbXBlY2NhYmxlIGJlYXV0eQp0YWtlbiBhdCBnb2xkZW4gaG91cgpjb21pbmcgZG93biB0aGUgc3RhaXJzCnNpbHZlciBhcm1vciB3aXRoIHRoaW4gZ29sZCB0cmltCmFuIGluZGlnbyBmb3Jlc3QgaW4gamFwYW4KZ3JpZGxlc3MgZG5kIG1hcAphbiBpbnRydWRlcgphbiBpc2xhbmQgZmxvYXRpbmcgaW4gdGhlIGFpcgp1bHRyYSByZWFsaXN0aWMgaGQKYW4gb2Jlc2UKKHRyb3BpY2FsaXNtKQplbmVyZ3kgdm9ydGV4CmdyYW50aW5nIGhpbSBhIG5vYmxlIHRpdGxlCmFyZW5hIGJhY2tncm91bmQKd2l0aCBtdWx0aXBsZSBleWVzCmRpc2NvIGVseXNpdW0gYXJ0d29yawp2LXJheSBlbmdpbmUKdGFrZW4gaW4gdGhlIDIwMDBzCmFuIG9sZG1hbgpzdGVhbHRoeQphbiBvcGVuIGJvb2sKbG93IGtleSBvaWwgcGFpbnRpbmcKc2lnbWEgODUvMS4yIHBvcnRyYWl0CmV0aGVyaWFsCmFuIG92ZXJncm93bgphdCBhbmNpbmV0IGFnb3JhIG9mIGF0aGVucwpmdWxsIHVwcGVyIGJvZHkKc3R5bGUgb2YgbWFjcm9zcwpyZWFsaXN0IGFldGhlcnB1bmsKc3RhcmsgY29udHJhc3QKYW4gdW1icmVsbGEgdG9wCmZlbWluaW5lIGFuYXRvbXkKYXp0ZWMgZmFudGFzeQphbmF0b21pY2FsIGRyYXdpbmcgb2YgYSBtaW5pb24Kb2JzZXNzaW9uCmxhbmRzY2FwZSB3aWRlIHNob3QKaGVybyBmcm9tIGRvdGEgMgphbmNpZW50IGVneXB0IGFydApyZWdpc3Rlcgp0aW50eXBlIHBob3RvZ3JhcGh5CnRoZSBhcmdvCnNjeWxsYSBhbmQgY2hhcnliZGlzCmFuY2llbnQgamFwYW4KYW5jaWVudCBwaG90b2dyYXBoCmdhbWUgaWxsdXN0cmF0aW9uCmphY3F1ZXMgbG91aXMgZGF2aWQKdGhlIHdvcmxkIG9mIGxvc3Qgc291bHMKbXlzdGljIGlsbHVzdHJhdGlvbgpsYXJnZSB4ZW5vbW9ycGggYXBwcm9hY2hpbmcKaW4gc3R2bGUgb2YgZ3JlZyBydXRrb3dza2kKYW5kIGJ1cmJsZWQgYXMgaXQgY2FtZQphbmRyZXcgdGF0ZSBkcml2aW5nIGEgYnVnYXR0aQphbmRyZXcgd3lldGggYXJ0d29yawpoeXBlciByZWxhc3RpYwpyZWRuZXJlZCB3aXRoIHJheXRyYWNpbmcKcmVkIGJsdWUgYW5kIGdvbGQgY29sb3Igc2NoZW1lCmFuZHJ6ZWogZHVkYQpicnVzaCBhcnQKYW5nZWwgaW4gaGVsbAphbmdlbCBpbiB3aGl0ZSBsaW5lbgpnbG93aW5nIHN3b3JkIGluIGhhbmQKdHJhbnNsdWNlbnQgd2luZ3MKaG9sb2dyYXBoaWMhISEKZmlyZSBzdGFpbmdsYXNzCmFuZ2VsYSBtZXJrZWwgYXMgdGhhbm9zCmFuZ2VsYSBtZXJrZWwgaW4gZ3RhIHYKbWFydmVsIG1hcnZlbCBtYXJ2ZWwKdGhlIGFsaWVuIGZyb20gdGhlIG1vdmllICdhbGllbicKZG9uYWxkIHRydW1wIGFyZSBiZXN0IGZyaWVuZHMKYW5nZWxpbmUgam9saWUKYW5nZWxzIGluIHdoaXRlIGdhdXplIGRyZXNzZXMKYW5nZXdvbW9uIGZyb20gZGlnaW1vbgpkaWdpbW9uIGFuaW1lIGtleSBhcnQKcmljaCB3b29kZ3JhaW4Kd2hpdGUgYW5kIG9yYW5nZQphbmdyeSBib2Igcm9zcwphbmlnaXJsIGJhdG1hbgphbmltYWwgY3Jvc3NpbmcgY2hhcmFjdGVyCmFuaW1lIGVsb24gbXVzawphbmltZSBqb2UgYmlkZW4Kc3RyZWFtaW5nCmJyb3RoZXJzCmhpZ2gtd2Fpc3QtYmxhY2stc2tpcnQKdW5zaGVhdGhpbmcgaGVyIGthdGFuYQp0b2t5byBmdXR1cmlzdGljIGFuZCBjbGVhbgpsaXZlMmQgdmlydHVhbCB5b3V0dWJlciBtb2RlbApjb3ZlciBjb3JwCmxpdmUyZAphbmltZSB5dXJ1IGNhbXAKeWFtYSBubyBzdXN1bWUKYmVhdXRpZnVsIGxlZ3MKdGlueSBub3NlCnRpbnkgY3V0ZSBub3NlCnRoaWNrIHRoaWdzCnRpbnkgYmxhY2sgYnJhCm5lYXIgcG9uZApnYXJ5CmZ1bGwgcGlhbm8KdmljdG9yaWFuIGZpcmUgc2hpcAphbmltZSBjaGFyYWN0ZXIgcmVmZXJlbmNlIHNoZWV0CmxvdHMgZGUgZGV0YWlscwpwYXJvZHkgd29yawphbmltZSBnaXJsIHdpdGggY29zbWljIGhhaXIKaG9sZGluZyBhIG1hZ2ljIHdhbmQKbm9ydGgKbWFnaWNhbCBpc2xhbmQKdG9wIHJhdGVkIG9uIHBpeGl2CmFuaW1lIG1hbmdhIHJvYm90ISEgYW5pbWUgZ2lybAplcGljIGZ1bGwgY29sb3IgaWxsdXN0cmF0aW9uCmZ1bGx5IHJvYm90aWMhISBjYXRnaXJsCmN1dGUhISBjaGliaSEhISBjYXRnaXJsCjRrIC0gbiA2CjgwcyBmYXNoaW9uCnRvdGFsaXRhcmlhbiBzZXR0aW5nCnNoZSBpcyB3ZWFyaW5nIGEgYmxhY2sgZHJlc3MKYXRtb3NwaGVyaWMgcGhvdG8KYW5uaWUgbGVvbmhhcnQKaGliaXRlZAphbm9tYW5kZXIgcmFrZQpmcm9tIGF2ZW5nZXJzOiBlbmRnYW1lICgyMDE5KQphcnQgZGVjbyBpbnRlcmlvcgpza3lsaWdodCBvcGVuIGNlaWxpbmcKZG9pbmcgdGhlIGJhdGVtYW4gc3RhcmUKcGxheW1hdGVzIHRveXMKaW4gdGhlIGJhY2tncm91bmQgaXMgbHVzaCBqdW5nbGUKYW50aHJvcG9tb3JwaGljIGJpcmQKMzVtbSBwaWN0dXJlCmRldGFpbGVkIC00CnNwbGFzaGNyZWVuIGNoYXJhY3RlciBhcnQKbWFnaWMgc2hvcApoYW5kcyBvbiBjb3VudGVyCm5ldmVyIGJlZm9yZSBzZWVuCmFudGlkaXNlc3RhYmxpc2htZW50YXJpYW5pc20Kc2hvcHdpbmRvd3MKcGl4ZWwtYXJ0CmFueGlldHkgaW5kdWNpbmcgYmFja3Jvb21zCmNyZWVweSBibGFjayBmaWd1cmUgc3RhbmRpbmcKYW55YSBmb3JnZXIKc3B5IHggZmFtaWx5CmFueXRoaW5nIHRoYXQgY29tZXMgaW50byBteSBtaW5kCnRhbmdsZWQgY2FibGVzCjIwMjMgNGsKb3JuYXRlbHkgZGV0YWlsZWQKYXBvY2FseXBzZSBzdG9ybQphcHBhIGZyb20gdGhlIGxhc3QgYWlyYmVuZGVyCnZpYnJhbnQgZGlnaXRhbCBhcnQKc29mdCBmbG93ZXJzCmxvbmcgYXp1cmUgYmx1ZSBoYWlyCnllbGxvdyBhbmQgY2hhcmNvYWwgbGVhdGhlcgphcmFiIHlvdW5nIG1vbmljYSBiZWxsdWNpCmFyYWJpYyBvcmMKb3RoZXJ3b3JsZGx5IGZhbnRhc3kKYXJhZ29ybiB3aXRoIG1lZGlldmFsIGFybW91cgpmcm9tIGxvcmQgb2YgdGhlIHJpbmdzCmFyY2EgYWxidW0gY292ZXIKMDAwIHllYXJzIGFnbwphcmNoaXRlY3R1cmFsIGRldGFpbGVkCnZ1ZSAzZCByZW5kZXIKaGRyIGNpbmVtYXRpYyBsaWdodGluZwphcmNoaXRlY3R1cmUgemFoYSBoYWRpZApyZXNpZGVudGlhbAphcmNoaXRlY3R1cmUgdGVjaG5pY2FsIGJsdWVwcmludApjdWx0aXZhdG9yCm90aGVyd29ybGR5CmRhcmsgdGhlbWVzCmFyaWFuYSBncmFuZGUgYXMgYSBzaXRoCmFyaWFuYSBncmFuZGUgYXMgYSBtZXJtYWlkCmFyaWFuYSBncmFuZGUgaW4gZ3RhIHYKYXJpYW5hIGdyYW5kZSBwaG90b2dyYXBoeQp2aWJyYW50IGV5ZXMKcG9rZW1vbiBhcnQgc3R5bGUKYmlraW5pLiBiYWNrZ3JvdW5kIG9mIGhlbGwuIGdvcmUKZGlzZW55IGFuaW1hdGlvbiBzdHlsZQphcm1hIDMgc2NyZWVuc2hvdAphZHZlcnRpc2VtZW50IHBvc3RlcgpoaWdoIGRldGFpbHMgcGhvdG8KcmVkd29vZCBmb3Jlc3QgdGhlbWVkIGFybW9yCnJlZHdvb2QgYmFja2dyb3VuZApoaWdoLWFuZ2xlCm92ZXItZGV0YWlsZWQKcmVhbGlzdGljIGNhcnRvb24KdGFjaXR1cm4KbW92aWUtY292ZXItYXJ0IGhlYWRzaG90CmZsYXQgY3VydmVzCnNtb290aCBiZXZlbHMKbHVzaCBnYXJkZW4gbGVhdmVzIGFuZCBmbG93ZXJzCmRpbm9zYXVyIGJvbmUKbGF2ZW5kZXIgcGxhbnRzCmFydCBhbHBob25zZSBtdWNoYQp2aWN0byBuYWdhaQptYXNrIGluc2lkZSBtYXNrCnZ3ZXRvIGlpCmFydCBub3V2ZWF1IGZlcmFycmkgY2FyCmludHJpY2F0ZSBnYWxhY3RpYyBkZXNpZ25zCmxsYW1hIGhlYWQKYXJ0aGFzIG1lbmV0aGlsCmFydGhhcwpyZWFkYWJsZSBkaWFncmFtCmFydG9yaWEgcGVuZHJhZ29uCnNhbmRyYQpzdWJsaXR0b3JhbCBqZWxseWZpc2ggc2Nob29scwpzb2Z0LXNhbmRlZCBjb2FzdGxpbmVzCmRpc3RhbnQgbGlnaHQgZnJvbSBhIGZhciBzdW4KYXJ5YSBzdGFyayBhcyB2ZW51cwpjb21pYyBib29rIGhlcm8KYXNoIGtldGNodW0KYXNoZnVyIGZyb20gd2FycmlvciBjYXRzCmRldGFpbGVkIDRrIGNvbmNlcHQgYXJ0CmlsbHVzdHJhdGVkIHBvc3Rlcgphc2lhbiBtYWxlCmNvbG9yYWRvIG1vdW50YWlucwpidXQgY2FuIG9ubHkgYmUgYnVybmVkCnN1cGVyIGRldGFpbGVkIHBhaW50aW5nCmh1Z2UgYXJtaWVzCnJldHJvIGZ1dHVyaXNtIHN0eWxlCnByb2Zlc3NvciBjYWxjdWx1cwphc3Rlcml4CmRhc2ggY2FtCmFyY2hpdGVjdHVyYWwgYW5kIHRvbSBsZWF2ZXMKYmlzbXV0aCBhcnQKbWVnYXN0cnVjdHVyZSB0aGVtZSBlbmdpbmUKZ2F0ZXdheSB0byBhbm90aGVyIHVuaXZlcnNlCmFzdWthIGxhbmdsZXkgc29ocnl1CmdvbGRlbiBob3VyIGluIHRva3lvCmFzdWthIHN1aXQgdW5kZXIgY2xvdGhlcyEKYXN1a2EgZnJvbSBldmFuZ2VsaW9uCnBpeGFyIGFydCAzZAphc3VuYSBmcm9tIHNhbwptYWdpY2FsIGZhdXZpc20KbWFydmVsb3VzIGV5ZXMKaW50cmljYXRlZCBkZXNpZ24KdmVyeSBkZXRhaWxlZCBhbmQgcmljaCBjbG90aGluZwpibHVlIHJheXMgb2YgbGlnaHQKYXRobGV0aWMgbWFuIGluIGhpcyAzMHMKcGFpbnRlZCBpbGx1c3RyYXRpb24gcG9zdGVyCjNkIHJlbmRlcmVkIG1hdHRlIHBhaW50aW5nCmF0dGFjayBvZiB0aGUgZWxkcml0Y2ggZHJhZ29uCnNoZSBoYXMgb2xpdmUgYnJvd24gc2tpbgpzb2FrZWQKc2NhcnkgbWFnaWNhbCBiYWNrZ3JvdW5kCnNsZW5kZXIgc3ltbWV0cmljYWwgZmFjZQpzbm93eSBhcGVubmluZXMKcG9saWNlIHNjZW5lCjIwMjkKcG90LWJlbGxpZWQKd2l0aCByb3VuZCBjaGVla3MKZ2xvd2luZyBkYW5kZWxpb24gc2VlZCBzdG9ybQpnaWFudCByYWluZG9ycHMKcmVkISEgc2FuZAphdXN0cmFsaWFuIHdpbnRlciBuaWdodApvdmVybG9hZApmcmFuayBzdGVwaGVuc29uCnRyZW5kaW5nIG9uIGRlemVlbgphdmEgbWF4CmRldGFpbGVkIGZhbnRhc3kgZGlnaXRhbCBhcnQKYXZhdGFyIGFhbmcKYXZlcmFnZSBodW1hbiBmYWNlCmF2ZXJhZ2UgcmVkZGl0b3IKYXZvY2FkbyBjaGFpcgphdm9jYWRvIGNhcgphYnN0cmFjdCBsaWdodGluZwpzbW9rZSBhbmQgZW1iZXJzCnNpdGggbG9yZC4gZHJhbWF0aWMgbGlnaHRpbmcKaXJpZGVzY2VudCBjeWJlcm5ldGljIHByb2Nlc3Nvcgpjb3JvZmxvdApiZWhhbmNlLm5ldApyb2JvdCBtb2RlbCBraXQKcm9ib3QgbWFkZSBvZiBqZXQgcGFydHMKZGltZW5zaW9uYWwKbWV0cm9pZHZhbmlhCmRpc25leSByZW5haXNzYW5jZSBmaWxtCmhpZ2gtcmlzZSBidWlsZGluZ3MKZHVyaW5nIGFuIGVjbGlwc2UKYXp0ZWMgcXVlZW4KYXp0ZWMgd2FycmlvciB3aXRoIGphZ3VhciBtYXNrCmdsb3dpbmcgc2NyZWVucwphenRlYyB5YW90bCB3YXJyaW9yCmFuZMKgYmx1ZQp5ZWxsb3dzIGFuZCByZWRkaXNoIGJsYWNrCmJhZGFzcyBmaWx0ZXJzIGFuZCBlZmZlY3RzCmJheWMKYmlnIGJhZAptZXRhbCBhcnQKdmlicmFudCBjb2xvcnMgaHlwZXIgcmVhbGlzbQpjaHJvbWUgYm9keXN1aXQKOjogbW9ybmluZwp3aWxkIHJhdmUgb3V0Zml0CmRpc25leSBjb25jZXB0IGFydCA6OiBuaXhyaQpmdW4gcmF2ZSBvdXRmaXQKY2hyaXMgYm91cmFzc2EgYnJvb2tzIGdvcmRvbgpsb3cgc2F0dXJhdGlvbiBjb2xvcnMKbG9uZyBkZXRhaWxlZCBvcm5hdGUgc2N5dGhlCmJhY2twZmVpZmVuZ2VzaWNodApiaWcgYmVhdXRpZnVsIHN0cmVldCBsYW1wcwpwYXJpcyBiYWNrZ3JvdW5kCm1hZ2F6aW5lIHBob3RvIGZyb20gMjAwNwpkZWVwIHRvbmVzCmJhbmZmIG5hdGlvbmFsIHBhcmsKYmFuZ2Fsb3JlCmJhbmpvIGthem9vaWUKcGVvcGxlIGRyaW5rIGNvY2t0YWlscwppY29ub3N0YXNpcyBpbiB0aGUgYmFyCmNodXJjaCBjaGFuZGVsaWVyCmR2ZCBzY3JlZW5jYXB0dXJlCmJhcmFjayBvYmFtYSBpbiBhdHRhY2sgb24gdGl0YW4KYmFyYWNrIG9iYW1hIGluIGd0YSB2CmJhcmFjayBvYmFtYSB3ZWFyaW5nIHN1bmdsYXNzZXMKZ29yaWxsYXogYWxidW0gY292ZXIKaW4gcmljayBhbmQgbW9ydHkgYXJ0IHN0eWxlCmNvenkgbmlnaHQgZmlyZWZsaWVzCmR1YWwgd2llbGRpbmcgYXhlcwpsb25nIG1lc3N5IGN1cmx5IGhhaXIKbG9uZyB1bmtlbXB0IGJlYXJkCmFyc3RhdGlvbmhxCnVua2VtcHQgaGFpciBhbmQgYmVhcmQKbm8gZXh0cmEgaGFuZHMKZGV0YWlsZWQgcHJvZHVjdCBpbWFnZQpiYXJuZXkgYW5kIGZyaWVuZHMKYmFybmV5IHRoZSBwdXJwbGUgZGlub3NhdXIKaW4gc3R5bGUgb2Ygc3RhbmxleSBkb253b29kCjEwODBwIDRrIHJlc29sdXRpb24KYmFycnkgY2h1Y2tsZQp5ZWFyIDIxMzQKbWFyYmxlIHJlZmxleGVzCnNlY3VpcnR5IGNhbSBmb290YWdlCnNuYXBjaGF0IHBob3RvCnJlZCBmbHVpZApiYXRtYW4gYXMgYSB6b21iaWUhISEhISEhCmJhdG1hbiB3aXRoIGd1bnMKYmF0bWFuIGhvcnJvciBtb3ZpZQpwdW5pc2hlcgpiYXRtYW4gYXMgdGhlIGpva2VyCndpdGggZG9uYWxkIHRydW1wCmJpcGVkCmJhdHRsZSBvZiB3YXRlcmxvbwphcnRpc3QgLSBwaGlsIG1vc3MKYmF0dGxlYXhlCmJheW1heCBmcm9tIGJpZyBoZXJvIDYKbWVhbiBmYWNlCmFsZXhhbmRyYSBmb21pbmEgYXJ0c3RhdGlvbgpiZWFzdGFycyBsZWdvc2hpCnBhcnUgaXRhZ2FraQp3ZWFyaW5nIHNvbWJyZXJvCnN0cmVldCBhcnQ6MiBzYWNoaW4gdGVuOjQKcnVsZSBvZiB0aGlyZHMgaGlnaGx5IGRldGFpbGVkCnlvdXRoZnVsIGFwcGVhbAphc2lhbiBvcmlnaW4KYmVhdXRpZnVsIGN5YmVycHVuayBnaXJsIGZhY2UKYmVhdXRpZnVsIGVuZ2xpc2ggZ2FyZGVuCmNhbWVyYXBob25lIDIwMDIKZGV0YWlsZWQgcGxhbnQgbGlmZQpoYW5kcyBkb3duCm90aGVyIGRpbWVuc2lvbnMKc3VwZXIgaGlnaCBxdWFsaXR5IGFydAphbGZvbnNlIG11Y2hhIGRldGFpbGVkCmRheS1saWdodApmdWxsIGxlYXRoZXIgYXJtb3IKY29uZmlkZW50IGhvbGRpbmcgdmVnZXRhYmxlcwpwb3NlcyBmb3IgdGhlIGNhbWVyYQpsdXNoIGZhcm0gbGFuZHMKZHVyaW5nIGF1dHVtbgp0ZWNod2VhciBsb29rIGFuZCBjbG90aGVzCmxvb2tzIGxpa2UgY2hyaXN0aW5hIHJpY2NpCmhlZGdlcwpzd2lybGluZyBmbG93ZXJzCmNyb3Agc2hpcnQgYW5kIHN0cm9uZyBhYnMKd2hpdGUgbWluaW1hbGlzdGljIGJhY2tncm91bmQKZXZlcnl0aGluZyBpcyBpbiBiYWxhbmNlCmFuZHLDqWUgd2FsbGluCnN5bW1ldHJpYyBhenVyZSBleWVzCm5pZ2h0IGFtYmllbmNlCmJlYXV0aWZ1bCBjeWJvcmcgYW5nZWwgZ2lybApmdXR1cmlzdGljIHJvb20gYmFja2dyb3VuZApiZWF1dGlmdWwgZ2FyZGVuIG9uIGJhY2tncm91bmQKcHVuayBvdXRmaXQuIGN1dGUKYmVhdXRpZnVsIGVkZW4gZ2FyZGVuCm1hZ2ljIGJsdWUgZmlyZQp3aXRoIHN0cmF3IGhhdApibGFjayBhbmQgcHVycGxlIGhhaXIKaW50cmljYXRlIGdyZWcgcnV0a293c2tpCmFydGVmYWN0CnNob3J0IGdvbGRlbiBjdXJscwpubyBleHRyYSBlYXJzCmNyb3NzLWhhdGNoaW5ncwpiZWF1dGlmdWwgbG9uZWx5IGdpcmwKdHJ1ZSBwcm9wb3J0aW9ucwpsaWdodCBncmV5IG1pc3QKKGxpZ2h0IG9yYW5nZSBtaXN0KQpsaWdodCBibHVlIG1pc3QKc2NhcmxldCB0b25lcwptYW5pbGEKYW5hdG9taWNhbGx5IGFjY3VyYXRlIHNrZWxldG9uCmluc3RhZ3JhbSBzdG9yeQpsaXR0bGUgcmVtYWluaW5nCmF0IGEgZm9yZXN0LiBkaWdpdGFsIGFydAp0cnVlIHJvbWFuY2UKd2ludGVyIGF0bW9zcGhlcmUKZ2xvcmlvdXMgc3VubGlnaHQKd2F0ZXIgb24gdGhlIGZsb29yCmJlYXV0aWZ1bCB0b3JuYWRvCmJsYWNrIGFuZCByZWQgc2lsayBjbG90aGluZwpyZXRybyBwaG90b2dyYXBoeQpqYW4gc2F1ZGVrCmJlYXV0aWZ1bCB3b21hbiB3aXRoIGxvbmcgaGFpcgppbiBhIGx1eHVyaW91cyBwb29sCmZ1enp5IHBvbGFyb2lkIHBob3RvZ3JhcGgKc21vb3RoIHN5bW1ldHJpY2FsIGNoaW4Kb25seSBhIGZldyBiYW5ncyBvZiBoYWlyCm1lZGl1bSBicm93biBoYWlyCnVsdHJhd2lkZSBzaG90cwpjaGluYSBzaWxrIDNkIGRyYWdvbgpibHVyOi0xCmJlZm9yZSB0aGUgYmlnIGJhbmcKdGhlIHNlY29uZOKApsKgbGlrZSBhIGNhbGYKdGhlIHRoaXJk4oCmIGhhZCBhwqBmYWNlIGxpa2UgYSBtYW4KZWFjaCBoYXZpbmcgc2l4IHdpbmdzCmJlaGFlbHRlcnZlcmZvbGd1bmcKZjIyIGNyaXNwIGZvY3VzCmN5Ym9yZyBkciBkb29tIGluIG9ybmF0ZSBhcm1vdXIKZXZpbCBsaWdodGluZwpiZWxsYSBwb2FyY2gKZ3RhIHYgYXJ0IGNvdmVyCmJlbiBmb2xkcyBwb3J0cmFpdApiZW4gc2hhcGlybyBhcyB0aGUgam9rZXIKYmVuZGVyCmJ1dHRlcmZsaWVzIGZsb2F0aW5nIGluIHRoZSBza3kKbW9ybmluZyB0aW1lCnNvY2NlciBzdGFkaXVtCmxlYWRpbmcgc3BhcnRhbnMgaW50byBiYXR0bGUKaW4gZm9jdXMgZmFjZQpiZXJzZXJrIGd1dHMKYmV0dHkgcGFnZQpiZXR0eSBsYSBmZWEKYmV5b25jZSBhcyB0aGUgcG9wZQphbWF6aW5nIGV5ZXMKYmx1ZSB0aGVtZWQKaHVuZHJlZHMgb2YgZXllcwpudXJzaW5nIGhvbWUKYmlnIGJyb3RoZXIgaXMgd2F0Y2hpbmcgeW91CmJpZyBjaHVuZ3VzIGFzIGVsZGVuIHJpbmcgYm9zcwoxOTQzCmJpZyBidWRnZXQgaG9ycm9yIG1vdmllIHNjZW5lCmF0IHRoZSBib3R0b20gb2YgdGhlIG9jZWFuCnVuZGVyd2F0ZXIgZXhwbG9zaW9uCmJpZyBmdWxsIG1vb24KY2hpbmF0b3duIGJhcgpqYWNrIGJ1cnRvbiBkcmlua2luZyBiZWVyCnBvbGFyb2lkIGltYWdlCmJpa2VyCnN0cmFuZ2xlaG9sZApob2xkaW5nIGEgc3lyaW5nZQpmcmFjdGFsIGZyYW1lCmJpbGwgbnllIHRoZSBzY2llbmNlIGd1eQpiaWxsaWUgZWlsaXNoIGFzIGEgbnVuCmJpbGxpZSBlaWxpc2ggYXMgYSBzYWQgbnVuCmNlbGwgc2hhZGVkIGFydApiaWxsaWUgZWlsaXNoIHBvcnRyYWl0CnRoZSBzZXQgb2YgamVvcGFyZHkKYmluZ3VzCmJpb2x1bWluZXNjZW50IHdhdGVyZmFsbApjaGVycnktYmxvc3NvbS10cmVlCmJpb3B1bmsga25pZ2h0CjNkIGNoYXJhY3RlcnMKYmrDtnJrCmJsYWNrIGFhcmFrb2NyYSBlYWdsZSB3YXJsb3JkCmJsYWNrIGxpZ2h0IG1vdmllIHBvc3RlcgpibGFjayB0aG9yCjE4NTIKYmxhY2sgYW5kIHdoaXRlIGRldGFpbGVkIHNrZXRjaApzcGFjZXRpbWUgZW52ZWxvcG1lbnQKc2hhcGUKYmxhY2sgY2F0IGluIGEgY2l0eSBtYWRlIG9mIHlhcm4KbGlnaHQgZW50ZXJpbmcgdGhyb3VnaCBhIGJsaW5kCmJsYWNrIG1lY2hhCmFkaWRhcyBwYWludGluZwpibGFjayBzdGVlbCBidWlsZGluZ3MKZGVzZXJ0IHdhc3RlbGFuZApibGFkZWUgZnJvbSBkcmFpbiBnYW5nCnVwLWFuZ2xlIHZpZXcKZmluYWwgZmFudGFzeSB4aXY6IGVuZHdhbGtlcgpibG9vZCBtZXJpZGlhbgp1bnJlYWwgZW5naW5lIDUgcmVuZGVyIDE2awp2aWN0b3JpYW4gZ290aGljCmJsb3cgbXkgbWluZApibHVlIGFyYXJhCmJsdWUgYmFja2Ryb3AKYmx1ZSBtY2RvbmFsZHMKYmx1ZSB0ZXh0IHRoYXQgc2F5cyAza2xpa3NwaGlscApibHVlIGhvdXIgcGhvdG9ncmFwaHkKd2hhbGUgY2FyY2FzcwpzZWN0aW9uZWQKb3JuYW1lbnRhbCBlZGdlcwppbiB3b3JsZCBvZiB3YXJjcmFmdAo0ayBzdHVkaW8gbGlnaHRpbmcKYm9iIHJvc3MgYXMgMDA3CmJvYiByb3NzIGFzIHNjYXJmYWNlCmJvYiByb3NzIHBhaW50aW5nIGJvYiByb3NzCmJvYnMgYnVyZ2VycwpvbHltcGljcyBjZXJlbW9ueQpzY3JlYW1pbmcgaW50byBhaXIKYm9lIGppZGVuCmJvamFjayBob3JzZW1hbiBpbiByZWFsIGxpZmUKY2xvc2V1cCA0awpjaGVycnkgZXhwbG9zaW9uCnNpbmtob2xlcwo6OSBkZXRhaWxlZCBmYWNlOiA4CmJvcmlzIGpvaG5zb24gZ2lnYWNoYWQKZmlyaW5nIGl0IGludG8gYSBidWlsZGluZwptZWRpdW0gc2hvdCBwaG90byA4ayB1bHRyYWhkCmJvcmlzIGpvaG5zb24gYXMgY2FwdGFpbiBicml0YWluCmJvcmlzIGpvaG5zb24gYXMgZG9jdG9yIHN0cmFuZ2UKYm9yaXMgam9obnNvbiBhcyBkci4gc3RyYW5nZQp4LW1hbiBjb3N0dW1lCmJvcmlzIGpvaG5zb24gYXMgaHVsawpib3JpcyBqb2huc29uIGFzIGlyb24gbWFuCmJvcmlzIGpvaG5zb24gYXMgcmFtYm8Kb25lIGV5ZWJyb3cKYm9yaXMgam9obnNvbiBhcyB0aG9yCmhvcnJpZmllZCBleHByZXNzaW9uCjYwcyBrdW5nIGZ1IGZpbG0KYnJva2VuIGZ1cm5pdHVyZQpmYWNlIHRvIGZhY2Ugc3RhcmluZwpoYXBweSBzbWlsZXkKamF5c29uIHRhdHVtIGFzIG1vdGhlciBtYXJ5CmJydWdodCB0b25lcwo1MG1tIHByaW1lCmJvdWxldmFyZCBvZiBicm9rZW4gZHJlYW1zCmJvdyBhc2hpZ2FydQpzYWQgc2t5CmJveSB3aXRoIG5ldXRyYWwgZmFjZQpicmFhdm9zCmJyYW5kIGNvbG91cnMgYXJlIGdyZWVuIGFuZCBibHVlCnBvaW50IGJyZWFrCmJyYW5kaSBsb3ZlCmJlaGluZCB0aGUgc2NlbmVzIHBob3RvZ3JhcGh5CmJyYXppbCBjYXJuaXZhbAphcnQgY2h1Y2sgY2xvc2UKYnJlYWtpbmcgYmFkIGFzIGEgbWFuZ2EKYnJlYXRoLXRha2luZyBiZWF1dGlmdWwgYmVhY2gKYnJpY2sgd2FsbCB0ZXh0dXJlCmJyaWRlIG9mIGNodWNreQp3ZWFyaW5nIGEgd2VkZGluZyBkcmVzcwpmdWxsIGJvZHkgd2l0aCBjb3N0dW1lCmFuZG5vcm1hbiByb2Nrd2VsbApkZXRhaWxlZDogY29ybmVhCmtub3duIGFzIHZvcnluIGRhZ290aCBpbiBsaWZlCmJsYWNrIGFuZCB3aGl0ZSBmaWxtIGdyYWluCjE4dGggY2VudHVyeSBhcnQKdGFrZW4gaW4gMjAyMgpyZWFsaXN0aWMgZGlnaXRhbCBpbGx1c3RyYXRpb24KbWF4aXMKa3VuZy1mdQp0ZW5zZSBsb29rCmJydWggbW9tZW50CmNvbG9yIHNsaWRlIGZpbG0KZmlsbSBzdGlsbCBmcm9tIGhhbGYtbGlmZSBtb3ZpZQptYXJ2ZWwgYW5pbWF0aW9uCmJyeWFuIGNyYW5zdG9uIGFzIHRob3IKYnJ5Y2UgZGFsbGFzIGhvd2FyZApidWNrZXRoZWFkCmJva2VoIHBob3RvZ3JhcGgKdGhhbmdrYQphbnRocm9wb2xvZ2ljYWwgcGhvdG9ncmFwaHkKYnVkZGhpc3QgbW9uYXN0ZXJ5IG9uIG1hcnMKYnVmZiBtYW4Kc2hpbmluZyBwaW5rIGFybW9yCmJ1bG1hIGZyb20gZHJhZ29uIGJhbGwKY2xpbnQgY2xlYXJsZXkKYnVybHkgbWFuCm1hbmxpbmVzcyBnaXZlbiBmb3JtCnllYXIgMjEwMApidXNpbmVzcyB3b21hbgpmYWl0aGZ1bAppbnZlcnRlZCBmaXNoZXllIGxlbnMhISEKZXllbGV2ZWwhISEgdmlldyEhISBwaG90b2dyYXBoeQpmaXNoZXllIGxlbnMhISEKc3R5bGUgPSByZXRyby1mdXR1cmlzbQp0aGUgZmlmdGggZWxlbWVudCBtb3ZpZQphcG9sbG8gMTEKbG9uZyBkcmVzcyBmZW1hbGUKaXNvbWV0cmljIGRyYXdpbmcKaGlnaCBkZXRhaWxlcwpzdGVhbSBwdW5rIHBhcnR5CmJsYWNrIGFuZCB3aGl0ZSB3aXRoIG1peGVkIG5vaXNlCmdlbWluaSBnb2xkIGNsb3RoCmxpZmUtc2l6ZQp2ZXJ5IGRldGFpbGVkIHNraW4KZWxlY3Ryb3N0YXRpYyBodW0Kd2F2ZSBicmVha2luZwplYXJ0aCB0b25lcyBhbmQgYmx1ZXMKYW5jaWVudCBkcmVhbQpzbW9rZXkgY2hpbW5leQpjYWVybmFyZm9uIGNhc3RsZQpicnV0dXMKbWFwbGUgc3lydXAgJiBob3QgZnVkZ2UKaWNlIGNyZWFtIG9uIHRoZSBzaWRlCmxvb2tpbmcgZnJvbSBzbGlnaHRseSBiZWxvdwpzaW5nbGUgcGFuZWwKZ3Jvb21lZCBmYWNpYWwgaGFpcgptY2dpbGwKY2FtcGJlbGwncyBzb3VwIGNhbgpjYW4gb2Ygc2hhcmsgc3BhbQpjYW5hZGEgZ29vc2UKc3VwZXIgZGV0YWlsZWQgY29sb3IgZ3JhcGhpY3MKY2FubmVzCmV4cGxvcmUKZnV0dXJlIGZ1bmsKbWFkZSBvZiBicm9uemUKaHVnZ2luZyBlYWNoIG90aGVyCmNhcHRhaW4gamVhbi1sdWMgcGljYXJkCmNvbW1hbmRlciByaWtlcgpjYXIgbWFkZSBvZiBtZWF0CnZlbnVzIG9mIHVyYmlubwptYWdlbnRhIHNoaXJ0CmdlYXJzIG9mIHdhciBjb3ZlciBhcnQKc3R5bGUgbGV0dGVyaW5nCmNhcmRjYXB0b3Igc2FrdXJhCnNlcnZpbmcgcmFjayBvZiByaWJzCmluIHRoZSBtaWRkbGUgb2YgdGhlIHN0cmVldApmdWxsIGljZSBob2NrZXkgZ29hbGllIGdlYXIKcGxhc3RpYyBhY3Rpb24gZmlndXJlCmNhcm91c2VsCmNhcnBhdGhpYW4gbW91bnRhaW5zCmZ1dHVyaXNtICYgaGFybGVtIHJlbmFpc3NhbmNlCnNvZnQgdG9wIHJvb2YgcmFpc2VkCmNhc3RsZXZhbmlhIHdpdGNoCmNhdCBhcyBzdXBlciBtYXJpbwpwaWN0b3JpYWwgbG9nbwpzbmVha2luZwpsaWNraW5nCjE4NDgKY2F0IHJvYm90CmNhdCBzbW9raW5nIGEgY2lnYXJldHRlCmNhdCBzdW1tb25pbmcgYSBzcGFjZXNoaXAKY2F0IHdlYXJpbmcgYSB0b3AgaGF0CmNhdCB3aXRoIGEgcGVhcmwgZWFycmluZwpjYXQgcGhvdG9ncmFwaHkKY3VwaGVhZOKAmXMgYXJ0IHN0eWxlCmNhdGUgYmxhbmNoZXR0IGFzIG1lZGlldmFsIHF1ZWVuCnN0YXJ0CmMuIG0uIGNvb2xpZGdlCmFscGhvbnNlIG11Y2hhIHBvc3RlcgpmdWxsIHBvc3Rlcgp3aXRoIGNhdHMgb24gaGVyIHNpZGUKZmFsbGluZyBmbG93ZXIgcGV0YWxzCmNhdmUgcGFpbnRpbmcgb2YgdGhlIG1vbmEgbGlzYQpkZXN0aW55IGNvbmNlcHQgYXJ0CmNlbGVyeSBtYW4KbWFsZSBjZW50YXVyIGNlbnRhdXIgY2hpbWVyYQpjaGFrcmEgZGlhZ3JhbSBmYWNlCmluc2lkZSBjYXRoZWRyYWwKY29sZCBibG9vZApzdHlsZSBvZiB0aGUgZ2FtZSByaW13b3JsZAp2aWRlb2dhbWUgc3ByaXRlCmpldCB3aW5ncyBvbiB0aGUgYmFjawp2ZXJlc2hjaGFnaW4KYm9keSB3aXRoIGJsYWNrIGFuZCByZWQgbGF2YQpsaXphcmRtYW4gYXJ0Cm11c2N1bGFyIG1hbGUgYm9keQpsYXJnZSBmaWxtIGdyYWluCm1hbiBpbiBkYXJrIGJsdWUgZnVsbCBib2R5IHN1aXQKc3R1ZGlvIGdoaWJsaSBhbmltZSBzY3JlZW5zaG90CmNoYXJhY3RlciBjZW50cmVkCjE5MzBzIHBob3RvZ3JhcGgKMTkyMHMgdmliZXMKY2hhdGVhdSBmcm9udGVuYWMKY2hlZXRhaCBydW5uaW5nIG92ZXIgY2xvdWRzCmNoZWxsCmNoZXNoaXJlIGNhdCBkZWF0aCB0YXJvdCBjYXJkCnNpZ21hIDUwbW0gZi81LjYKbWluaWZpZ3VyZQpjaGV3YmFjY2Egcm9iYmluZyBhIG1jZG9uYWxkJ3MKY29udHJhaWxzCndhbGtpbmcgb24gdGhlIHN0cmVldAptdW5jaGluZyBwaXp6YQpjaGljYWdvIHNreWxpbmUKY2hpY2tlbiBudWdnZXRzCmhvbGRpbmcgZmxhbWV0aHJvd2VyCnN0aWxsIGZyb20gYSBtdXNpYyB2aWRlbwptb29uIGJhc2UKZ2lybHMnIGxhc3QgdG91cgpzeW1tZXRyaWNhbCEhIHNjaS1maQpjaGluZXNlIHBhbGFjZQpnb2xkZW4gbWFzawpjaGluZXNlIGNyZXN0ZWQgcG93ZGVycHVmZiBkb2cKYmF0dGxlIHdpdGggZHJhZ29uCmZsYW1pbmcgbW91bnRhaW4KYmF0dGxlIHRoZSBkcmFnb24KaW4gc3R5bGUgb2Ygc291dGggcGFyawp1bnJlYWwgdmlzaW9uCnRrbWl6CmNobG9lIG1vcmV0egpjaGxvZSBwcmljZSBmcm9tIGxpZmUgaXMgc3RyYW5nZQphYnN0cmFjdCBvY2N1bHQgZXBpYyBjb21wb3NpdGlvbgpjaG9ua2VyIGNhdApjaHJpcyBjaGFuCmNocmlzIGV2YW5zIHBvcnRyYWl0CmNocmlzIGV2YW5zIHdpdGggYSBiZWVyIGJlbGx5CmRvY3VtZW50YXJ5IGxpZ2h0aW5nCnNldCBwaG90b2dyYXBoCnNpeC1wYWNrCnN0aWxsIGZyb20gc3RhciB3YXJzICgxOTc3KQpyZWVkIHJpY2hhcmRzCmNocmlzdG9waGVyIGxsb3lkIGFzIGJlbGlhbAptZWRpdW0gZm9ybWF0IGRpZ2l0YWwgY2FtZXJhCmN3Ywpjb3N0dW1lIHdlaXJkCnJlZCBzd2VhdGJhbmQKY2hhcmFjdGVyIHByb2ZpbGUgYXJ0CmZvcnRuaW50ZQpjaHVuIGxpIGF0IHRoZSBneW0KZ290aCBuaW5qYQpjaWRlci1tYW4KZmlsbSBzdGlsbCBmcm9tIGR1bmUgMjAyMAptYXhmaWVsZCBwYXJyaXNoISEhIQp0aWx0IHNoaWZ0IG1pcnJvciBiYWNrZ3JvdW5kCmZvY3VzIG9uIGZlYXJmdWwgbW9kZWwKbGlxdWlkIHNpbXVsYXRpb24gYmFja2dyb3VuZApjaXJjdWxhciBsb2dvCnByaW5jZXNzIHBvcnRyYWl0CmNpdHkgb2YgYXRsYW50aXMKY2l0eSBzY2VuZQpjbGFpcmUgZm9ybGFuaQpjbGFzaCByb3lhbGUgZ29ibGluCjIwMzBzCmdyZWVuIGZlYXRoZXJzCndlYXJpbmcgZnV0dXJpc3RpYyBjbG90aGluZwppbXByZXNzaW9uaXN0IGFydGlzdHMKY3liZXJuZXRpYyBpbXBsYW50IGggNzY4CndpdGggYW4gb3dsIG9uIGhlciBzaG91bGRlcgpjbGF1ZGlhIHNjaGlmZmVyCnNvZnQgbGlnaHQgZWZmZWN0CmNsZW9wYXRyYSBpbiBoZXIgcGFsYWNlCnJlZCB3aGl0ZSBiYWNrZ3JvdW5kCmNsZXZlciBtb25rZXkgd2l0aCBhIGxvbmcga25pZmUKY29uZnVzaW5nIG9wdGljYWwgaWxsdXNpb24KY2xpZmZvcmQgdGhlIGJpZyByZWQgZG9nCmFydCBhbHBob25zZSBtdWNoYSBhbmQgbG9pc2gKYnJhbmRpc2hpbmcgY29zbWljIHdlYXBvbgpzbW9vdGggYXJ0IHN0eWxlCmFwcGFyZW50IHRvb3RoCm9uZSByZXB0aWxpYW4gZXllCm1lbHRpbmcgaW4gY29yYWwgcGF0dGVybgpndW0gdGlzc3VlCmV5ZWxpZHMKYnVtcHkKcmVwdGlsaWFuIHNsaW1lCmJ1bGJvdXMKYmxhY2sgbHVuZyBkZXRhaWwKd3cyIGhpc3RvcmljYWwgcGhvdG8Kc2xpZ2h0bHkgc21vb3RoCm9wdGFuZSByZW5kZXIKMTkyMHMgYXJjaGVvbG9naWNhbGx5IHBob3RvCmluIHRoZSBtb29kIGZvciBsb3ZlCmdhdW50IGNoZWVrcwpwaG90byAzNW1tCm1pbGRseSBzY2FycmVkIG9uIGhpcyBmYWNlCnRoaW4gc29mdCBoYW5kIGhvbGRpbmcgY2lnYXJldHRlCjEybW0KdGlsdGVkIHBlcnNwZWN0aXZlCmxvdy1rZXkgbGlnaHQKcG9uZGVyaW5nCndlYXJpbmcgYSBibGFjayBhbmQgcmVkIHN1aXQKbGlnaHQgYnJvd24gaGFpciBibHVlIGV5ZXMKYmlsbG93aW5nIHN0ZWFtIGFuZCBzbW9rZQozZCBoYXJkIHN1cmZhY2UgZGVzaWduCmFudGhyb3BvbW9ycGhpYyBwZW5ndWluCnNwcmluZ3RyYXAKYW5pbWUgd2FsbGFwZXIKc2xlZWsgcm9iZXMKY2xvdWQganVtcGVyCmNsb3VkIHNlcnZlcgppbmZvZ3JhcGhpY3MuIGxvZ28Ka2luZyBwZXBlIHdpdGggcmFpbmJvdyB3aWcKY2xvd24gd29ybGQKY2xvd24gbWFrZXVwIGFuZCByYWluYm93IHdpZwpjbHViIHBlbmd1aW4KZWFnbGVzCmNvY2EgY29sYSBsb2dvCmZvdG8gcmVhbGlzdGEKdGhlIG5ldyBraW5nIG9mIGdyZWF0IGJyaXRhaW4KY29nbml0aXZlIHRyYW5zY2VuZGVuY2UKYmVhdXRpZnVsIGFuZCBjcmVlcHkKdGhlIGVsZWN0cmljIGJveQp5b3VuZyBzcGFuaXNoIG1hbgpsZWFkIGd1aXRhcgpsb29raW5nIGluIGEgbWlycm9yCmZ1bGwgY29sb3JlZApwYW5kb3JhIGp1bmdsZQpjb2xvbmlhbCBtYXJpbmVzCmNvbG9ueSBvbiBtYXJzCmxvc3QgYm95cwp0aW5rZXJiZWxsCm1lcm1haWRzCmluc2lkZSBhcmVhIDUxCmNvbG9yZWQgY29uY2VwdCBhcnQKcmFjZSBjYXIKcmF5dHJhY2VkIGxpZ2h0cyBhbmQgc2hhZG93cwpjb2xvcmZ1bCBkcmFtYXRpYyBwdWZmeSBjbG91ZHMKZW1wdHkgc3RhZ2UKYXJlYSAzCmlubmVyIHJpbmcKY29sb3NzYWwgcmF0CnBzMyBnYW1lCnBjIGdhbWUgd2l0aCB1aQpjb21meWNvcmUKYXJ0c3RhcnRpb24KdXNzYQptaWxpdGFyeSBwYXJhZGUKY29tbXVuaXN0IGRyYXZlbgpjb21tdW5pc3Qgc3RhdGVzIG9mIGFtZXJpY2EKM2QgbWFuZGVsYnVsYgpzYWlsYm9hdHMgc29hcmluZyBpbiB0aGUgd2luZApjb25hbiB0aGUgYmFyYmFyaWFuIGlsbHVzdHJhdGlvbgpzaGlwcGluZyBjb250YWluZXJzCjE5eHggOjIgYWtpcmEgbW92aWUgc3R5bGUgOiA4CnRob21hcwphbHBob25zZQpqYWNrCjNkLXJlbmRlcgpwbGFudGVkIGNoYXJnZQpjaGFyZ2UgZXhwbG9zaXZlcwptYXJ0eXJkb20Kd2lkb3dtYWtlcidzIGZvcm1lciBsb3ZlcgphbnRpLXRhbmsgcmlmbGUKaW4gdGhlIHN0eWxlIG9mIHNpZnUg8J+UpSDwn5iOIPCflbnvuI8g8J+RgCA6Mgpjb25jZXB0IGFydCBvZiBhIHdhcnJpb3IKY29uY2VwdCBhcnQgb2YgYSBkYXJrIGZvcmVzdApwb3R0ZWQgcGxhbnQKZ2VybWFuIGFuZCBzb3ZpZXQgdGFua3MgZmlyaW5nCnNvbWUgdGFua3MgZGVzdHJveWVkCnNlcmlvdXMgc2FtIGFzIHNtYXNoIGNoYXJhY3RlcnMKc2hpbmluZyBpdHMgbGlnaHQgYW1vbmcgc3RhcnMKaW5zaWRlIGFuIGVtcHR5IHVzc3Igc3VibWFyaW5lCmZvZ2d5IGFuZCBkYXJrCmRvb3J3YXlzCmNvbmRvcml0bwpuYXR1cmUgcGhvdG9ncmFwaHkgNGsKY29hdGluZyBhIHN0dWJib3JuIGNvcmUuJwpibGFjay4gYWlycG9ydHMKc3Vid2F5cwphcHVsaWEKY29ud2F5J3MgZ2FtZSBvZiBsaWZlCmxvb2tpbmcgZXhoYXVzdGVkCnNwcmF5cGFpbnRlZCBvbiBhIHdhbGwKaGllcm9nbHlwaGljIG9jY3VsdApjb3JnaSBhbmQgY2F0IGZpeGluZyB0aGUgd2Vic2l0ZQplYXJ0aCBpbiB0aGUgc2t5CmNvcnRhbmEgZnJvbSBoYWxvCmNvcnZvIGF0dGFubwpjb3NtaWMgdGlnZXIKd29ybGQtYmVhcmluZyB0dXJ0bGUKdHJhZGluZyBhcnQgc3RhdGlvbgo4ayBjaW5lbWF0aWMgc2hvdApjb3NtaWMgdHJlZSBvZiBsaWZlCnRyZWUgaW4gYSBnYWxheHkgbWFkZSBvZiBzdGFycwp3aXRoIGVpZmZlbCB2aWV3Cm9wdGltaXN0IGZ1dHVyZQpmbG93ZXIgYnV0dGVyZmx5IHZlc3QKY3liZXJwdW5rIG1ha2V1cApjb3R0YWdlIGhpcHBpZSBuYXR1cmFsaXN0CmZ1dHVyZSBhY3RpdmlzdApza3lzY3JhcGVyIGZvcmVzdCBjb21tdW5pdHkKbWFybWFsYWRlCmxldmVscwptdWx0aWV4cG9zdXJlCndoaXRlIGJvcmRlcnMKY292aWQtMTkgYXMgYSBodW1hbgpsaWdodGJyaWdodApyZWQgcm9vZnMKY3JhaXlvbgo0ayBzdGlsbAp3ZXN0ZXJuIHBhaW50aW5nCmNyYXp5IGNhdCBsYWR5CnN0dWRpbyBnaGlibG8KY3JlZXB5IGNsb3duIGdpcmwKYXJ0aG91c2UgY2luZW1hCnNob3Qgb24gbGVpY2EKd2hpdGUgc3RyaXBlcyBhbGwgb3ZlciBpdHMgYm9keQpkcmFnb24ncyBkb2dtYQpjcmlzdGlhbm8gcm9uYWxkbyBhcyBiYXRtYW4KY3Jpc3RvIHJlZGVudG9yCnRlbnNlIGRlc2lnbgpjYXJ0b29uIGJyZXcKaHEgOGsgY2luZW1hdGljCm9uIHRoZSBjb25jcmV0ZSBncm91bmQKY3Jvd24gb2YgdGhlIGdvZHMKaXJpZGVzY2VudCBjcnlzdGFscwpjcnlwdG9wdW5rIHdpdGggcGl0IHZpcGVycwpjaXJjYSB0aGUgeWVhciAyOTk0CnB5cmFtaWQgc2NoZW1lCmhpZ2ggZmFzaGlvbiBtb2RlbGluZwpnbG9zc3kgbWFnYXppbmUgcGhvdG9zaG9vdApkZWVwIHNlYSBob3Jyb3IKZ2VuZXJhbCB1bmlmb3JtCmN0aHVsaHUgZWF0aW5nIHRvYXN0CmRhdmlkIGx5bmNoIGZpbG0KY3RodWxodSByaXNpbmcgZnJvbSB0aGUgb2NlYW4KM2Qgc2hhZGVycwpoaWdoIHNhbXBsZSByZW5kZXIKY3ViaXNtIHBhaW50aW5nIG9mIGEgdHJlZQpjdWx0dXJlIHdhcnMKY3VwaWQKZXhxdWlzaXRlIGhhbmRsZQp2aWJyYW50IGdvdWFjaGUgcGFpbnRpbmcgc2NlbmVyeQppbnRlZ3JhdGluZyB3aXRoIHRlY2hub2xvZ3kKY29ybmVsaWEgZ2VwcGVydApuZW9uIGxpZ2h0IGVkZ2UKYmx1ZSBmZWRvcmEKY3V0ZSBhbmltZSB3YWlmdSBpbiBhIG5pY2UgZHJlc3MKbW9uZ29saWEKaW4gc3R5bGUgb2YgdGltIGJ1cnRvbgphc3BlY3QgcmF0aW8gMTY6OQpjdXRlIGxpdHRsZSBnaXJsCmFkb3JhYmxlIGZyaWVuZGx5IHJvYm90CmNyb3B0b3AgYW5kIHNob3J0cwpjaHJpcyBtY2dyYXRoCmdyZWcgcnV0aAphY2hpbGxlIG1hdXphbgp3ZWFyaW5nIG1lZGlldmFsIGNsb3RoZXMKZGlzbmV5IGV5ZXMKc21vb3RoIGRpZ2l0YWwgYXJ0d29yawpmcmFjdGFsIGNoYW9zIGJhY2tncm91bmQKdHdvIG1vb25zIGxpZ2h0aW5nCmRlbGV0ZQpjeWJlcm5ldGljIGZpcmUgYXJtb3IKY3liZXJuZXRpYyBmbGFtZSBhcm1vcgpjaGktZ29uZwpiZWpld2VsbGVkIGFuZCBlbmNydXN0ZWQgcm95YWx0eQpnb3RoaWMgYXJtb3IKd29tYW4gaW4gZmxvd2VycwpwdW5rZHJvbmUKbG9vbWluZyBkcm9uZQpob3ZlcmluZyBkcm9uZQpkZWFkbHkgZHJvbmUKY3liZXJwdW5rIGNhc3RsZQpjeWJlcnB1bmsgZmxhbWUgc3VpdApyZWZsZWN0aW9uIG9uIGhlbG1ldApjeWJlcnB1bmsgamVzdXMgY2hyaXN0CnBhc3RlbCBjb2xvcmVkCmN5YmVycHVuayBhcGFydG1lbnQKdHJhbnNodW1hbgpyZWZsZWN0aW9uIG9uIHdhdGVyCnJpdmVyIHRoYW1lcwpmbHlpbmcgYWlyY3JhZnRzCmV4dGVuZGVkIHJvYm90aWMgYXJtcwpjeWJlcnB1bmsgZHJlYW1zY2FwZQpjeWJlcnB1bmsgZHVkZQo5MHMgYWVzdGhldGljCmN5YmVycHVuayBoYWNrZXIKY3liZXJwdW5rIGlrZWEKY3liZXJwdW5rIGluIGEgY3liZXJwdW5rIGNpdHkKaHVtYW4gZmVtYWxlCmN5YmVycHVuayBzcGFjZSBjb2xvbnkKa293bG9vbiB3YWxsZWQgY2l0eSBzdHlsZQpjeWJlcnB1bmsgc3RyZWV0cyBhdCBuaWdodAphcnRzdGF0aW8KZGVjZXB0aW9uIGFuZCBnb3RoIGNvbG9ycwpjeWJvcmcgbWFyayB6dWNrZXJiZXJnCmVlcnkgZGVhZCBzd2FtcCBzZXR0aW5nCnN1bm55IGFmdGVybm9vbgpibGFjayBjbG9hayBoaWRkZW4gaW4gc2hhZG93cwptZWRpZXZhbCBjbG90aGVzCmNhdmUgc3lzdGVtCmZ1bGwgYm9keSBwb3J0cmFpdHMKZCZkIHN0eWxlIGZhbnRhc3kgbWFwIGRlc2lnbgpzdHJvbmcgZmlnaHRlciBpbiBsZWF0aGVycwo2IGp1bmUgMTk0NApkLiBiLiBjb29wZXIgc2t5ZGl2aW5nCmQuIGIuIGNvb3BlcgppbmsgYnJ1c2gKdmlnbmV0dGUgZWZmZWN0CnB1cnBsZSBhbmQgZ29sZCBjb2xvciBzY2hlbWUKbGl2ZS1hY3Rpb24gYWRhcHRhdGlvbgpkaiBhdCBhIHBhcnR5CmRsZQpzY3JlZW5zaG90IGZyb20gYmxhY2sgY2xvdmVyCndlYXJpbmcgc2hvdWxkZXIgY2FwZQpob2xkaW5nIGdyaW1vaXJlCmRtdCBnb2QKZG10IGVudGl0aWVzCmhvbGRpbmcgYSBnb2xkISBjYW5lIQp0YWxsIHNrZWxldGFsIGZpZ3VyZQpoZWF2eSBib2tlaAp3ZWxsIGxpdCBzdHVkaW8gbGlnaHRpbmcKc3R1bm5pbmcgY29sb3JzCmtpc3NpbmcgdGhlIGpva2VyCnRlY2hubyBjb25jZXJ0IGFkdmVydAoxODk0CmR5c3RvcGlhbiBzb2NpZXR5Cm1hcmlvIGJyb3MgZ2FtZSBzY3JlZW4KeW91IGdyb3cuIHRoZW4geW91IGZvY3VzIG9uIHNoaXQKZGFuIG11bWZvcmQgcGFpbnQKZGVhdGggc2t1bGwKY2FzdGluZyBjaGFvcyBtYWdpYwpjb2xvcmZ1bCByb2JlcwpyZWFwZXIgbWluaWF0dXJlcwpkYW5keSBmcm9tIHNwYWNlIGRhbmR5IGFuaW1lCmp1bmtvIGVub3NoaW1hIGZyb20gZGFuZ2Fucm9ucGEKZGFuaGF1c2VuCjE5ODBzIGFlc3RoZXRpYwpkYW5ueSBkZXZpdG8gYXMgZHIuIGVnZ21hbgpkYW5ueSBkZXZpdG8gYXMgZHIuIHJvYm90bmlrCmRhbm55IGRldml0byBhcyB0aGUgdGVybWluYXRvcgo4LWJpdCBwaXhlbCBhcnQKc29ueSB1bHRyYSBjYW1lcmEgaGQrCmRhbm55IGRldml0byBhcyBhIGhvYmJpdApkYW5ueSBkZXZpdG8gYXMgdGhlIG1vbmEgbGlzYQpzdGlsbCBmcm9tIGRlc3BpY2FibGUgbWUgMjAxMApjcmlzcCBwaG90bwpkYW5ueSBkZXZpdG8gaW4gc2t5cmltCnR3ZWVkIGNvbG91ciBzY2hlbWUKc3RpbGwgaW1hZ2UgZnJvbSBiYXRtYW4gbW92aWUKc2hvdCBvZiBmYWNlCmRhbm55IGRldml0byBhcyBpcm9uIG1hbgpkYW5ueSBkZXZpdG8gYXMgam9obm55CmRhbm55IGRldml0byBhcyB0aGFub3MKZ3JlZW4gcG93ZXIgcmFuZ2VyCmluZmxhdGFibGUKdmVyeSBodWdlIHNtaWxlCmhvbGRpbmcgYSBiYXNlYmFsbCBiYXQhIQpzZXQgcGhvdG8gaW4gY29zdHVtZQpkYW5ueSBkZXZpdG8gYXMgYSBtdXBwZXQKZGFubnkgcGhhbnRvbQpxdWFrZSBlbmdpbmUKZGFuemEgYXp0ZWNhIGRhbmNlcnMKZGFyayBmb3ggbWFnZQp3YXRlcmNvbG9yIGluawpkYXJrIGxvcmQgYmlkZW4KZ29kIGVtcGVyb3IgYmlkZW4KZ3J1bmd5IG5pZ2h0bWFyZQpuaWdodG1hcmUgY3JlYXR1cmUKZGFyayBnb2RkZXNzIHdpdGggc2l4IGFybXMKc3VwZXIgaW50cmljYXRlIHJlYWxpc20KZGltIHJlZCBsaWdodApkYXJrIHNraW4gZmVtYWxlIGdvZGRlc3Mgb2YgbG92ZQp0aHJlZS1xdWFydGVyIGJvZHkKZGFyayBzdG9ybXkgbmlnaHQKYm9va3NoZWx2ZXMgb24gc2lkZXMKZGFyayB3YXJlaG91c2UKc3BvdGxpZ2h0IG9uIHN1YmplY3QKZGFya3NlaWQgYXMgbWluaSBmaWd1cmUKZGFya3NlaWQKZW1wZXJvciBiaWRlbgpkYXJ0aCBtYXVsIGluIGdlYXJzIG9mIHdhcgpkYXJ0aCB2YWRlciBhcyBhIGNhdGVycGlsbGFyCmFyY2hpdmVkIHBob3RvZ3JhcGgKc2l0dGluZyBpbiBoaXMgdGllIGZpZ2h0ZXIKbWFkIG1heCBmdXJ5IHJvYWQgc3R5bGUKZHJhZ29uIGluIHRoZSBza3kKZGF0YW1vc2hpbmcKZGF2aWQgYm9yZWFuYXogYXMgY2hyaXMgcmVkZmllbGQKYnVyZ2VyIG9uIGEgcGxhdGUKZGF2aWQgYm93aWUgaW4gc3VwZXIgc21hc2ggYnJvcwphYnN0cmFjdCBhbGJ1bSBjb3ZlcgpkYXZpZCBzcGFkZSBhcyBiYXRtYW4KZGF2aWQgdGVubmFudCBhcyBzcGF3bgpkYXZpZCB0ZW5uYW50IGFzIHRoZSBqb2tlcgpqb2huIHdhdGVycyBtb3ZpZQpkYXkgYWZ0ZXIgcmFpbmluZwpkZWFkIGNsb3duCmRlYWQgc29sZGllcnMgb24gdGhlIGJhdHRsZWZpZWxkCmRlYWRwb29sIGxpdmUgYWN0aW9uIGNvc3R1bWUKcnlhbiByZXlub2xkcyBkZWFkIHBvb2wKc21pbGluZyBhdCB0aGUgdmlld2VyCmRlYW4gd2luY2hlc3Rlcgpyb3lhbCBqZXdlbHMKdGF0dG9vIGluawphbWJpZW50IGxpZ2h0aW5nIGZyb20gdG9wCmRlY2sgb2YgbWFueSB0aGluZ3MKdGhlIGphbWVzIHdlYmIgdGVsZXNjb3BlCnJvYWQgdHJpcCBleGNpdGluZwpkZWVyIGluIHNoZXJ3b29kIGZvcmVzdApodWdlIGNsb3Vkcwp1bHRyYSBsb3cgY2FtZXJhIGFuZ2xlCmhpZ2ggc3BlZWQgbW90aW9uCmRlbWkgbW9vcmUKZGVtb24ga25pZ2h0IG9mIGRlYXRoCmRlbW9uIHNhbXVyYWkgbWFzawp0cmVuZGluZyBvbiBhZXRzdGF0aW9uCmppYW5nIHN3b3JkCmV2ZXJ5dGhpbmcgaW4gZm9jdXMKbWVyY3VyeSBkcmVzcwpvaWxmaWVsZCBzY2VuZQphZ2FpbiBhbmQgYWdhaW4Kc29mdCB0b3AKZGVuaW0gYmx1ZSBhdWRpIGE0IGI2CmJsYWRlIHJ1bm5lciAyMDQ5IGNvbG9ycwpkZW5uaW5nCmluayB3YXNoIHBhaW50aW5nCnRoZSBzdW4gaXMgc2hpbmluZwpzb255IHVsdHJhIGNhbWVyYQpoZCBkc2xyIDhrKwpjYXRhY2x5c20KZGVyc2UKZGVzY2VuZCBpbnRvIHRoZSBkZWVwCmRpdmlkaW5nIGl0IGludG8gbmluZSBxdWFydGVycwo4ayBmYW50YXN5IGFydApkZXNwYWNpdG8KcGFydGljbGUgbGlnaHRpbmcKZGV0YWlsIG9uIHNjZW5lCmJlYXV0aWZ1bCBzaWxreSBkcmVzcwpsaWdodCBvZiBpbmZpbml0eQpkYXduIGF0bW9zcGhlcmUKc2hhdHRlcmluZyB3YWxscwpnaWdhbnRpYyBuZW9uIHNpZ25zCmRldGFpbGVkIGRyYWdvbgpiZWF1dGlmdWwgYW5kcm9neW5vdXMgcHJpbmNlCmJhbWJvbyBodXRzCnJlYWRpbmcgZ2xhc3NlcwpzdW4gYmVhbWluZyBkb3duIG9uIGhpbQp3ZWFyaW5nIG9ubHkgcGFudHMKaW4gZ2FtZSBzdHlsZSA4awpvcmFuZ2Ugc2tpZXMKZmxlc2h5IHNrZWxldGFsIGJvZHkKc2tlbGV0YWwgd2l0aCBleHRyYSBmbGVzaHkgYml0cwpoZCAzZCBtaXhlZCBtZWRpYSBjb2xsYWdlCmRldGFpbGVkIHBob3RvIG9mIHZpcnR1YWwgd29ybGQKYmVhdXRpZnVsIHZpb2xldCBleWVzCmluc2lkZSBhIHBhbGFjZQphcnRzdGFyaW9uCmEgdGVsZXBob25lIHJlY2VpdmVyIGluIGhhbmQKaWxsZWdhbAplbGVjdHJvbWFnbmV0aWMgZmllbGQgZG10IGxzZAp2aXZpZCB1bHRyYXZpb2xldCBjb2xvcnMKZmFyaWRhaCBtYWxpawpwaWxlcyBvZiBtb25leQppbiB0aGUgb2ZmaWNlCmVvbiBmbHV4CmhlYXJ0cyBvZiBpcm9uIHBvcnRyYWl0IHN0eWxlCm1vb25saXQgbGlnaHRpbmcKYnVsbGV0IHRyYWlscwpiYXJlIGJhY2sKd2F0ZXIgcmVzZXJ2b2lyCnplbml0aCBwZXJzcGVjdGl2ZQpob2xkaW5nIGEgZHNsciBjYW1lcmEKb24gcGVudGF4IDY3CnRvcCBkb3duIGRyYXdpbmcKZGlnaXRhbCBwYWludGluZyBvZiB6dXJpY2gKc291dGhlcm4gZ290aGljIHNjZW5lCmFuaW1hbHMgaW4gdGhlIHN0cmVldHMKZGlsYXBpZGF0ZWQgaG91c2UKcmI2cykKbWF0dCByaG9kZXMKbGFyZ2Ugd2luZG93cyB0byBmb3Jlc3QgYXQgbmlnaHQKZGlvIGJyYW5kbwp3aXRoIHN0cmF5IGRvZ3MKaW4gYSBtZWxhbmNob2x5IG1vb2QKbHVuYXIgd2Fsawp5ZWFyIDE5NjgKd2l0aCBzdHJlZXQgZm9vZCBzdGFsbHMKY2luZW1hdGljIG1vdmllIHBob3RvCmRpc2t3b3JsZApkaXNuZXkncyBiYW1iaSBjYXQKdGhlIGN1dGVzdCBraXR0ZW4gZXZlcgphd2FyZCB3aW5uaW5nIHN0dWRpbyBwaG90bwpwdXJwbGUgY3JpbXNvbiBjb2xvciBzY2hlbWUKZGlzdGFudCBtb3VudGFpbnMgbGlnaHRzIHBob3RvCnNhY3JlZCBmcmFjdGFsIHN0cnVjdHVyZXMKdW5lYXJ0aGx5IGdlYXJzCmV2ZXJsYXN0aW5nCmRpdmluZSBjb3NtaWMgZmVtYWxlIHBvd2VyCmluc3BpcmluZyBkaWdpdGFsIHBhaW50aW5nCnVnYW5kYSBrbnVja2xlcwpkb2N0b3IgaG91c2UKYXJ0IGFsaWVuCmRvZyBhcyBhIGdyZWVrIGdvZApkb2phIGNhdCBhcyBjYXQgd29tYW4Kc3F1YXR0aW5nIGRvd24gbmV4dCB0byBhIHBvb2wKYnJpZ2h0IGdyZWVuIGRhcmsgb3JhbmdlCnNhbXNhcmEKaG9sZGluZyBsaWdodHNhYmVyCndpdGggZ29kIGJsdXNoaW5nCm1vb25saXQgcHVycGxlIHNreQpoaWdoLXF1YWxpdHkgNGsgcG9ydHJhaXQKMmQgaWNvbgpkb25hbGQgZHVjayBhcyBhbiBhc3Ryb25hdXQKZG9uYWxkIGR1Y2sgaW4gcmVhbCBsaWZlCmRvbmFsZCBnbG92ZXIgYXMgbWlsZXMgbW9yYWxlcwpkb25hbGQgdHJ1bXAgZm9ydG5pdGUgc2tpbgpkb25hbGQgdHJ1bXAgYXMgZ29sbHVtCmRvbmFsZCB0cnVtcCBhcyBhIGN5Ym9yZwpnb2JsaW5jb3JlCmRyIHpldXMKYSBoYXJtb25pb3VzIGludGVncmF0aW9uCmRpdmluZSBkZXRhaWxzCmludHJpY2F0ZSBhZnJpY2FuIGpld2VsbGVyeQpsZW9uYXJkbyBkYXZpbmNpIGRldGFpbApkb25hbGQgdHJ1bXAgYXQgdGhlIGJlYWNoCmRvbmFsZCB0cnVtcCBjbG93bgplbmpveWluZyBsaWZlIHRvIGl0cyBmdWxsZXN0CmZ1bGwgb2Ygam95CmRvbmFsZCB0cnVtcCBodWdnaW5nIGpvZSBiaWRlbgpkb25hbGQgdHJ1bXAgaW4gc3VwZXIgbWFyaW8gNjQKZG9uYWxkIHRydW1wIGtpc3Npbmcgam9lIGJpZGVuCmZiaSByYWlkCmdvbGRlbiB0b2lsZXQKZnVua28gcG9wIG9mIGRvbmFsZCB0cnVtcApzaG90IGZyb20gY2luZW1hdGljCmRvbmFsZCB0cnVtcCBhcyB0aGUgcG9wZQptdXNldW0gb2YgYXJ0CnRha2VuIGluIHNpbHZlciBkb2xsYXIgY2l0eQpwZXJmZWN0IGZjZXMKZGV0YWlsZWQgY2xheSBtb2RlbAphIGJhZGRhc3MgZHJhZ29uCmdyZWVuIGRvb20gZ3V5CmRvb20gaWkKZG9vbSBndXkgcmVzZW1ibGluZyBzYW11cwpnYW1lIHNjcmVlbnMgaG90CmRvb21ndXkgYXMgYSBzb3ZpZXQgc29sZGllcgpnb2xkIHN0cmlhdGVkIHN3aXJsaW5nIGZpbmlzaApsYXJnZSB0d2luIHN1bnNldAptb3VudGFpbiBzY2VuZSBpbiBhIGxsYW1hIGZhY2UKZG91Z2xhcyBhZGFtcwpkb3dudG93biBzb2xhcnB1bmsgdXRvcGlhCm1lbidzIGZhc2hpb24KbWFydmVsIGNvc3R1bWVzCm1ldGFsbGljIGJ1dHRvbnMKZ290aGljIHBhaW50aW5nCmRhcmsgbW91bnRhaW5zCmJhdHMgaW4gc2t5CmRyYWdvbiBrbmlnaHQKZHJhZ29uIHBvcGUKb24gYSBiYXR0bGUgZmllbGQKZHJhZ29uIG1hZGUgb3V0IG9mIG1vbHRlbiBsYXZhCmRyYWdvbiBwb3J0cmFpdApkcmFnb24gc3BpdHMgZmlyZSBvbiBhIG1hbgpidXJuaW5nIHZpbGxhZ2UgaW4gYmFja2dyb3VuZApwbHVtZXMgb2Ygc21va2UgaW4gYmFja2dyb3VuZAptaWNoZWxhbmdlbG8gcGFpbnRpbmcKaW1wb3J0YW50OiBubyBleHRyYSBjaGFyYWN0ZXJzCmRyYWtlIGluIGd0YSB2CmFydCBzdHlsZSBvZiBwb2x5Z29uMTk5MwpibHVlIHN3ZWF0ZXIKdGhlIGxvcmQgYW5kIHNhdmlvcgp0aGUgY2VwaGVpZCBnb2Qgb2YgbG9zdCB0aGluZ3MKZW50ZXIgdGhlIGRyYWdvbiAxOTczCm1lcm1haWQgYm9keQpob3VzZSBib2x0b24KcGVuIGFuZCBpbmsgcGFpbnRpbmcKZHJlYW0gcG9ydGFsCmRyZWFtaW5nIG9mIG91dGVyIHNwYWNlCmNvbmZvdW5kaW5nCmRyZWFtc2NhcGUgYXJjaGl0ZWN0CndpbmdzIG9mIGEgc3dhbgpkcmVhbXdvcmtzIGFuaW1hdGVkIGJqb3JrCnN0YXJzIGFzIHB1cGlscwptYWdhemluZSBwaG90byBzaG9vdApzdXJyZWFsIGRyYXdpbmcKZHJ1aWQgcG9ydHJhaXQKZHVjayB0aGVtZWQgc3BhY2VzaGlwCnJlZCB0YW5rLXRvcApkdWtlIG51a2VtIDkwcyBjb3ZlciBhcnQKd2l0aCBjaW5lbWF0aWMgbGlnaHRpbmcKMTk4MCBjYXJzCnBva2Vtb24gY2FyZCBvZiBkdWtlIG51a2VtIQpkdW5lIG1vdmllIHBvc3RlcgpwaG90b2dyYXBoaWMgcmVhbGl0eQp5b3VuZyBjb21tb25lcgphbnhpb3VzIHN0ZXdhcmQgb2YgYSBuZXcgY2FzdGxlCmR1bmdlb25zIGFuZCBkcmFnb25zIGNoYXJhY3RlcnMKY2xvZ3MKZnVsbCBvZiBmbG93ZXJzCmR1dGNoIHBvcnRyYWl0IGZyb20gdGhlIDE2MDBzCnNjb2lhJ3RhZWwpCmR3YXluZSBqb2huc29uIGFzIGtyYXRvcwpkd2F5bmUgam9obnNvbiBhcyBzdXBlcm1hbgpkd2F5bmUgam9obnNvbiBhcyB3b25kZXIgd29tYW4KZHdheW5lIGpvaG5zb24gYXMgaGFycnkgcG90dGVyCnN0cm9uZyBtYW4KZHdheW5lIGpvaG5zb24gaW4gZmFtaWx5IGd1eQpkcmFtYXRpYyBsaWdodGluZzsgNGsgOGsKZHVzdCBpbiBhaXIKbW9yb2NjYW4KZHlzdG9waWFuIGFsaWVuIGxhbmRzY2FwZQpzdHJhbmdlIGZvcm1hdGlvbnMKZGVwaWN0aW5nIGEgY29yZ2kgbWFkZSBvZiBmaXJlCmJlYWNoIHBhcnR5CmRyaXZld2F5CjE5MDIKMTk1NApibGFjayByYWluYm93IG9wYWwKcmFpbmJvdyBhdXJhIHF1YXJ0egp6aGFuZyBkYXFpYW4Kd2luZG93cyA3CmMxOTcwCmVjbGlwc2Ugb2YgYXVyb3JhIG9uIG1hcnMKZWQgc2hlZXJhbgplZGQKbiBlZGR5IHRha2UgYSB0cmlwIHRvIHRva3lvCmFzIGEgdmFtcGlyZQplZGRpZQplZGVuIGdhcmRlbgpoaXMgbm9zZSBpcyBhIGJsYWNrIGJlYWsKZWRnYXIgYWxsYW4gcG9lCmVkaW5idXJnaCBjYXN0bGUKcGVyZmVjdCBjcmlzcCBtb29ubGlnaHQKYmlnIHBpZXJjaW5nIGV5ZXMKb2xkIGphcGFuZXNlIGFydAp0aGUgZm94LWxpa2UgZXZvbHV0aW9uIHBva2Vtb24KZWZmZWN0aXZlIGFsdHJ1aXNtCmVneXB0aWFuIGNhdCBnb2RkZXNzCmVlcmllIGxvb2tpbmcKZ29sZGVuIG1lYW4KZWd5cHRpYW4gbXl0aG9sb2d5CmhhbWxldAplaWZmZWwgdG93ZXIgaW4gaXN0YW5idWwKd2F0ZXJwYWludCBhcnQKZWlmZmVsIHRvd2VyIGluIHRoZSBtaWRkbGUKZWlmZmVsIHRvd2VyIGxlZnQKbG9uZG9uIGJpZyBiZW4gYXQgYmFja2dyb3VuZAplbCBkb3JhZG8KZG10IHZpc2lvbnMKZWxhaW5lIGJlbmVzCmljZS1ibHVlLWV5ZXMKc2lnbWEgMzVtbQpzY2VuZSEhCmFybXMgb3V0CmZpbG0gc3RpbGwgZnJvbSAndG9tYiByYWlkZXInCmVsZXZlbi9taWxsaWUgYm9iYmllIGJyb3duCmVsZiB3aXRoIGJsdWUgc2tpbgplbGllemVyIHl1ZGtvd3NreQptYWxlIGFuaW1lIHN0eWxlCmVsaXphYmV0aCBvbHNlbiBhcyBzY2FybGV0IHdpdGNoCnJlZCBtYWdpYyBzdXJyb3VuZHMgaGVyCnNleHkgbG9vayBhdCB0aGUgY2FtZXJhCnBjIGdhbWluZwplbGl6YWJldGggZnJvbSBiaW9zaG9jayBpbmZpbml0ZQpzbWlsaW5nIHN3ZWV0bHkKam9oYW5uZXMgdm9ybWVlcgpkcmFtYXRpYyBncmVlbiBsaWdodGluZwpob3RlbCByb29tCmFydC1zdGF0aW9uCmVsbGllIChsYXN0IG9mIHVzKQpvbiB0aGUgZGVjayBvZiBhIHNoaXAKZmlsbSBzdGlsbCBmcm9tICd0aG9yJwpob2xkaW5nIGEgbWluaWF0dXJlIGVhcnRoCndlYXJpbmcgYSBzdWl0IG9mIGFybW91cgpzaG93aW5nIGhlciBmYWNlCmNsb3NldXAgb2YgYXJtcwpjbG9zZXVwIG9mIGZpc3QKZWxsaW90IGFuZGVyc29uCjcwcyBwcm9ncmVzc2l2ZSByb2NrIGxvZ28KMTk2MHMgY29sb3IgcGhvdG9ncmFwaAo5MOKAmXMgdmliZQplbG1vIGluIGZvcnRuaXRlCnNpdHRpbmcgaW4gZnJvbnQgb2YgYSBtaWNyb3Bob25lCmVsb24gbXVzayBjcnlpbmcKc3RpbGwgZnJvbSBtYXJ5IHBvcHBpbnMgKDE5NjQpCmVsb24gbXVzayBhcyBhIHNvbGRpZXIKZWxvbiBtdXNrIGluIGZvcnRuaXRlCmVsb24gbXVzayBzbW9raW5nIHdlZWQKYW4gYW5pbWUgbmVuZG9yb2lkIG9mIGVsb24gbXVzawplbG9uIHR1c2sKZXZlbmx5IGxpdAplbG9uIG11c2sgd29ya2luZyBhdCBtY2RvbmFsZHMKZWx0b24gam9obiBhZ2UgMjUKZG9kZ2VycyBzdGFkaXVtIGNvbmNlcnQgaW4gMTk3NQplbmhhbmNlZCBxdWFsaXR5IHBvbGFyb2lkIHBob3RvCmRpZ2l0YWwgYXJ0IGNhcnRvb24KZWx0b24gam9obgp0aW5rZXJjb3JlCmVtaWxpYSBjbGFya2UgYXMgYSBncmVlayBnb2RkZXNzCmRldGFpbGVkIHNtaWxlCmJlYXRpZnVsIHZpdmlkIGxpZ2h0cwplbW1hIHN0b25lIGFzIGEgcGludXAgZ2lybAplbW1hIHN0b25lIGluIHZpY3RvcmlhIHNlY3JldApncmFzc3kgc3RvbmVzCmVtbWEgc3RvbmUgd2l0aCBibG9uZCBoYWlyCjEvMTI1MHNlYyBhdCBmLzIuOApzaHV0dGVyCmVtbWEgd2F0c29uIGFzIGRyaWFkYQplbW1hIHdhdHNvbiBhcyBnYWxhZHJpZWwKZW1tYSB3YXRzb24gYXMgaHVsawplbW1hIHdhdHNvbiBhcyBqb2FuIG9mIGFyYwplbW1hIHdhdHNvbiBhcyBwcmluY2VzcyBsZWlhCmVtbWEgd2F0c29uIGFzIHN1cGVyZ2lybAplbW1hIHdhdHNvbiBhcyBhIGdyZWVrIGdvZGRlc3MKbW9yZ2FuYSBmcm9tIGxlYWd1ZSBvZiBsZWdlbmRzCmhlYWQgYW5kIHVwcGVyIGJvZHkgaW4gZnJhbWUKZW1tYSB3YXRzb24gYXMgYSB0YWxsIG5iYSBwbGF5ZXIKc2NyZWVuc2hvdCBmcm9tIG1vcmJpdXMgKDIwMjIpCmVtbWEgd2F0c29uIGFzIGFuIGFuZ2VsCmVtbWEgd2F0c29uIGFzIHNwaWRlcm1hbgplbW1hIHdhdHNvbiBhcyB0aGUgc2NhcmxldCB3aXRjaApmdWwgZHJlc3NlZAplbW1hIHdhdHNvbiBmb3IgY29zbW9wb2xpdGFuCmRyZXNzZWQgYXMgYSB3ZXN0ZXJuIHNoZXJpZmYKd2VhcmluZyBhIHRvd2VsCmN1dGUgc3BvcnRzd2VhcgplbW1hIHdhdHNvbiBpbiB0ZWQgbGFzc28gcG9zdGVyCmVtbWEgd2F0c29uIGlzIGhhcmxleSBxdWlubgplbW1hIHdhdHNvbiBtb2RlbGluZyBmb3IgZ3VjY2kKZW1tYSB3YXRzb24gd2VhcmluZyBhIHN3aW1zdWl0CmVtbWEgd2F0c29uIHdlYXJpbmcgZmFuY3kgZmlzaAplbW1hIHdhdHNvbiB3ZWFyaW5nIGZhbmN5IGhhdAoxNnRoIGNlbnR1cnkgcGFpbnRpbmcKY2hpbGQgb2YgZGFyawpwcm9maWxlIHBpY3R1cmUgMTAyNHB4CmNydXN0CmVtcHlyZWFuIGNpdHkKcGxhbnRzIGluc2lkZSBjYXZlCmludHJpY2F0ZSBtaW5lCndpdGggYXVyb3JhIGJvcmVhbGlzIGluIHRoZSBza3kKbm8gZ3JvdW5kIHZpc2libGUKZW5kbGVzcyBsb29wCmVuZXJnZXRpYyBqYXp6IHBpYW5vIHBvcnRyYWl0CmVuZ2FsbmQgcG9yY2VsYWluIHRlYSBzZXQKc3RpbGwgbGlmZSBwaG90byBzdHVkaW8KbGluZSBkcmF3bgp3aXRoIGJydWNlIGxlZQplbnRyYW5jZSB0byBhbiBhbmNpZW50IGR1bmdlb24Kc2h1aSBtbyBodWEKcmVkIGluawpuZW9uIHZpYmUKbWlycm9yIHNoYWRlcwplcGljIHRpdGFuIHdpbm5pZSB0aGUgcG9vaAplcGljIGNhc3RsZSB3aXRoIHRhbGwgc3BpcmVzCmVwaWMgZHJhZ29uCmVwaWMgZWx2ZW4gd2FycmlvcgpzbW9raW5nIHJvY2sKYnJvd24gaGFpciBmbG93CndheW5lIGJhcmxvd2UgYW5kIGFydGVtIGRlbXVyYQplcGljIHZpa2luZyBraW5nCmFydHdvcmsgaW4gdGhlIHN0eWxlIG9mIGd1d2VpegphcnR3b3JrIGluIHRoZSBzdHlsZSBvZiB6LncuIGd1CmJhbGxzIG9mIGZpcmUKZXJpYyB3YXJlaGVpbSB3aXRoIGEgY29yZ2kKZXJpYyBjYXJ0bWFuIGluIHJlYWwgbGlmZQp2ZXJ5IGNsZWFyIHZpZXcKZXNwZW9uIHdpdGggYSBzbmlwZXIKcHl0aGFnb3JlYW4gdGhlb3JlbQpwYWludCBrbmlmZQphcmkgYXN0ZXIKZXN0ZWZhbmlhIHZpbGxlZ2FzIGJ1cmdvcwpldGVybmFsIGJlYXV0eQpldGVybmFsIGRhcmtuZXNzCnBvaW50ZWQgbm9zZQpldGhlcmVhbCBmb3gKcm95YWwgYmlyZApibGFjayBhbmQgZ29sZCByaWNoIGNvbG9yCmRldGFpbGVkIGhkIHBob3RvZ3JhcGh5CmV1cm9wYSB1bml2ZXJzYWxpcyBpdgpzaG90IG9uIDg1bW0KZXVyb3BlYW4gdW5pb24KdmFzaWx5IGthbmRpbnNreQpnaWxkZWQgb3V0Zml0CnNvIGNvbWUgb24KZXZlcnl0aGluZyBpbiBmaXJlCnRvb2wgYmVsdApldmlsIHB1Zwpzb25nCmV2b2x1dGlvbiBvZiBtYW4KYmVrc2luc2tpIG1hc3RlcnBpZWNlCmV2b2tlcyBkZWxpZ2h0CmRhcmsgc2NoZW1lCnNtb2tpbmcgYSBjaWdhcmV0dGUgaW4gdGhlIGZpZWxkCndpdGggY2luZW1hdGljIGNvbG91ciBwYWxldHRlCmZyb20gaGFsZi1saWZlIDIKc29tYmVyIGF0bW9zcGhlcmUKbmVnYXRpdmUgc2VsZi10YWxrCnBhaW50aW5nIG9uIGdyZXkgc2NhbGUgZmFjZQpodW1hbiBmYWNlIHdpdGggYnJpZ2h0IHJlZCB5ZXMKZXh0cmVtZWx5IGhvdAp2ZWN0b3IgaW5rIGRyYXdpbmcKYWJzdHJhY3QgZ2VvbWV0cmljIGNvbmNlcHQKZi0yMgpzdHlsZSBvZiBmcmF6ZXR0YQpjaHJvbWF0aWMgZmlsYW1lbnQKZmZ4aXYgaGVhdmVuc3dhcmQKY2xlYXIgcmVzb2x1dGlvbgpwczUgZ2FtZQpnYW1lcGxheSBzY3JlZW5zaG90IHdpdGggdWkKbWFueSB3aXJlcwphcGVydHVyZSBmMTIKcGx1bWUgbWFkZSBvZiBmcmFjdGFscwppbnRpbWlkYXRpbmcgd29tYW4Kc21vb3RoIHBhbGUgc2tpbgpldGhlcmVhbCBza2luCmZhY2Ugb2YgYSBwYWxlIGFsaWVuIGN1bHRpc3QKbGFyZ2UgZmlzaCBleWVzCmZlYXIgaW5zcGlyaW5nCnJvdWdoIGFic3RyYWN0IHNrZXRjaApsb25nIGZsb3dpbmcgYmxhY2sgaGFpcgpnb2xkIGFuZCBwZWFybCBuZWNrbGFjZXMKYml0aW5nIGxpcApkaXNndXN0ZWQKZGlzZ3VzdGVkLiBmZWFyIGluc3BpcmluZyBtb29kCmJ5IGRlbHBoaW4gYW5qb2xyYXMKY29udGVudG1lbnQKbWVzc3kgc2hvdWxkZXItbGVuZ3RoIGRhcmsgaGFpcgp5b3VuZyB3b21hbiBpbiBhIGRyZXNzCnBpY2tpbmcgZmxvd2VycwpzaGFycCBjb3JuZXJzCmZhbGNvIGxvbWJhcmRpIGZyb20gc3RhcmZveApsb3cgcG9seWdvbiBlZmZlY3QKdW5kZXJ3YXRlciBwZXJzcGVjdGl2ZQp1bmRlcndhdGVyIGZyb2cgcGVyc3BlY3RpdmUKZmFsbGVuIGNyb3duCnNjcmVlbnNob3QgZnJvbSBmYWxsb3V0ICgxOTk3KQp1bnJlYWwgZW5naW5lIDMKZmFsbG91dCBhaXJwbGFuZSBjb25jZXB0IGFydApzb2xkaWVyIHdpdGggYSBnYXNtYXNrCmZlbWFsZSBtYWdlIQp3aWRlIGdyYW5kIHN0YWlyY2FzZQppY2UgcGxhbmV0CnJlcHRpbGlhbiBjeWJvcmcKZ29sZGVuIGRhcHBsZSBsaWdodGluZwpmYW50YXN5IG92ZXJncm93biB3b3JsZApmYW50YXN0aWMgY29sb3JzCnRpbnkgdmlsbGFnZXJzCmFydGh1ciByYWNraGFtIHBhaW50aW5nCmZseWluZyBnaWFudCBhbmltYWxzCmRpc2Vhc2VkCmZhdCBjYXQKb24gYSByb2FkCmZheWUgdmFsZW50aW5lIGZyb20gY293Ym95IGJlYm9wCmZlYXIgZW1vamkKcGxheWluZyBoYXJwIGluIG1hZ2ljYWwgZm9yZXN0CmZlYXJvdwpkYW4gZGVjYXJsbyBzdHlsZQpjMTk3Ngpyb2xlcGxheWluZwpmZW1hbGUgZHJhZ29uYm9ybgpmZW1hbGUgZ29rdQphbmdlbC10aGVtZWQKbWFkZSBvZiBiYWtlZCBiZWFucwphdGhsZXRlIHBob3RvZ3JhcGh5Cm90b21vIG1hbmdhCmxvb2tpbmcgZnJvbSBzaWRlIQpsb29raW5nIGZyb250YWwgdmlldwpmZW1hbGUgZGVhdGggaG9sZGluZyBhIGNvY2t0YWlsCnJldHJvLWZ1dHVyaXN0aWMgYXJtb3IKZmVtYWxlIGluIG9mZmljZSBkcmVzcwpmZW1hbGUgaW52ZXN0aWdhdG9yCmJyb3duIGZsb3dpbmcgaGFpcgptZWRpY2FsIGJhY2tncm91bmQKYmx1ZSBsaXBzCmZlbndheSBwYXJrCmRzcmwgcGhvdG8KZ3Jhc3N5IHBsYWlucwpib3pvIHRoZSBjbG93bi4gY2lyY3VzIG1vdGlmCmluZmluaXRlIGZyYWN0YWwgbWFuZGFsYSB0dW5uZWwKaGQgNGQKZnJvbSBzdGFyIHdhcnMgKDE5NzcpCmZpbG0gc3RpbGwgb2YgYmFyYWNrIG9iYW1hCmZpbG0gc3RpbGwgb2YgY2hld2JhY2NhCmZpbG0gc3RpbGwgb2YgZGFydGggdmFkZXIKZmlsbSBzdGlsbCBvZiBnYWwgZ2Fkb3QKZmlsbSBzdGlsbCBvZiBoYXJsZXkgcXVpbm4KZnJvbSBqYXdzICgxOTc1KQpmaWxtIHN0aWxsIG9mIGpvZSBiaWRlbgpmaWxtIHN0aWxsIG9mIHJ5YW4gcmV5bm9sZHMKZmlsbSBzdGlsbCBvZiB0aGUgam9rZXIKb3JhbmdlIGFuZCByZWQgbGlnaHRpbmcKcmVkIGNhcnBldGVkIGZsb29yCmJ1c2h5IG1vdXN0YWNoZQp3YWxraW5nIHRvIHdvcmsKc3VraGFzYW5hCndpdGggcmFkaWF0aW5nIGhpbGwKaHVnZSB2aWV3c2NyZWVuIGF0IGZyb250CnNpbXBsZSBjZWlsaW5nCmx1eHVyaW91cyB0aGVtZQphbm5pZSBsZWlib3ZpdHogcGhvdG9yZWFsaXN0aWMKc2hhZnQgb2Ygc3VuIHRocm91Z2ggd2luZG93CnNpbG1hcmlsbGlvbgp0aGUgY2xlYXIgc2t5Cmh1bWFuIHBob3RvCmZpcmVmbHkgZm9yZXN0IGF0IG5pZ2h0CmZpcmVzIGdsb3cgbG9uZWx5CmVjc3Rhc3kgYW5kIGNyeSBmcm9tIGZhcgplYXJ0aCBjb3ZlcnMgbGlnaHRseQppbGx1c3RyYXRpb24gb2YgMiBjYXRzCmNvbm5lY3Rpb25zCmNyYWNrZWQgZ2xhc3MKZGFyayBmbGFtZXMKaGF1bnRlZCBrb2RhY2hyb21lCndldCBtdWQKZmlzaGVyIHByaWNlIGd1aWxsb3RpbmUKdGhpcmQtcGVyc29uIHZpZXcKamFtYWljYW4gdmliZQpmaXNoZXllIGxlbnMgcGhvdG8KZml2ZSBmb290IGJhdCBpbiB0aGUgcGhpbGlwcGluZXMKaGVscCBtZQpmbGFzaCB2cyBzb25pYwpzbW9rZSB0cmFpbApnbG93aW5nLWV5ZXMtYW5kLW1vdXRoCm1hY3Jvc3MgZnJvbnRpZXIgc3BsYXNoIGFydApmbGlydHkgYW5pbWUgd2l0Y2ggY2FzdGluZyBtYWdpYwpkcmlwcGluZyBpbiBuZW9uIHBhaW50CmVjby1mcmllbmRseSB0aGVtZQpndGEgdiBzY3JlZW5zaG90Cm9sZCBjaXR5CnN0cmF3YmVycnkgZmllbGRzIGZvcmV2ZXIKZmxvcmFscHVuayBlbHlzaWFuIG1haWRlbgpnZW9tZXRyaWMgc2hhcGVzIGJhY2tncm91bmQKZmxvcmlkYSBtYW4Kb2lsIG9uIGNhbnZhcyBkZXRhaWxlZApib3pvIHRoZSBjbG93bi4gY2xvd24gbW90aWYKcG9ueSBmYWNpbmcgYXdheQrwn46o8J+WjO+4jwphcnRzdGF0aW9uIHBhaW50aW5nCjYwcyBzY2ktZmkgYm9vayBjb3ZlcgpmbHlpbmcgdG9hc3RlcnMgaW4gaGVhdmVuCmZvZyBiaW9uaWMgdm9ndWUKc2FyYWgKY2xhc3NpZmllZCBwaG90bwpmb290YmFsbCBwbGF5ZXJzIGJ1dGt1cwphcyBjaGVmcyBpbnNpZGUgY3RodWxodQpmb3JkIGZ1c2lvbgpibHVlIGdyb3VuZC4gZmFudGFzeQpwbHVtZSBvZiBzZWF3ZWVkCmJyb3duaXNoIGZvc3NpbApyZXZlbGF0aW9uCmNsZWFyIGRlZmluaXRpb24KZm94ZXMgcGxheWluZyBpbiBhIG1lYWRvdwp0cmVuZGluZyBvbiB1bnJlYWwgNQpmcmFuayBkaWxsYW5lIGFzIHB1Y2sKZnJhbmsgZGlsbGFuZSBhcyBhIHNhdHlyCmZyZWRkeSBmYXpiZWFyJ3MgcGl6emVyaWEKdGhlIHByaW5jZXNzIG9mIHBvd2VyCmNvbmNlcHQgYXJ0LiBlcGljIGxhbmRzY2FwZQpzdGlsbCBmcm9tIHN0YXIgdHJlawpkZXRhaWxlZCByZWFsaXN0aWMgZmFjZXMKaW5kaWdvIGZpbHRlcgp1bHRyYS1kZXRhaWxlZCBkaWdpdGFsIGFydApmcmlkYQpwcm9mZXNzaW9uYWwgc2tldGNoCmhvbGRpbmcgYSBuaW50ZW5kbyBzd2l0Y2gKZnJvbSBpbnNpZGUgdGhlIGdpYW50IHBhbGFjZQpmcm9zdCBkcmFnb24KZnJ1aXRzIGluIGEgYmFza2V0CmxpdmUgYXQgbG9sbGFwYWxvb3phCjEyIG1lZ2FwaXhlbHMKc3VuZmxvd2VyIGJhY2tncm91bmQKcmlzaW5nIGluIHRoZSBhaXIgbGV2aXRhdGluZwp3ZWFyaW5nIHR3byBzaWx2ZXIgYnJhY2VsZXRzIQpjYXQgZWFycyBhbmQgY2F0IHRhaWwhCmJhdHRsZSBwb3NpdGlvbgpkZXRhaWxlZCBmYWNlIGZlYXR1cmVzIQpuZWNrbGluZQp3ZWFyaW5nIHR3byBzaWx2ZXIgYnJhY2VsZXRzCm1ldGFsbGljIGFycm93cwp0ZW1wbGUgYmFja2dyb3VuZApiYWdneSBibGFjayBwYW50cwpwdXJwbGUgbGVhdGhlciBnYXJtZW50cwpza3ktYmx1ZSB0aGljayBmdXIgcm9iZXMKb3JhbmdlIGZpcmUvYmx1ZSBpY2UgZHVhbGl0eSEKd2l0aCBkYXJrIGJyb3duIG1lc3N5IGhhaXIKbGVhdGhlciBodW50aW5nIGF0dGlyZQptYWdpY2FsIGZvcmVzdCBpbiB0aGUgYmFja2dyb3VuZAp3aGl0ZSBzdXBlcmlvciBpcm9uIG1hbgpoZS1tYW4gcmlkZXMgdGhlIGJhdHRsZSBjYXQKY3liZXJuZXRpYyBuZWNrIGltcGxhbnQKc2hlIGlzIGF0dHJhY3RpbmcgbGlnaHRuaW5ncwpoZSBoYXMgZXllcyBvZiBmaXJlCnNoZSBpcyBxdWlldAp0aGVyZSBpcyBhIGdsb3cgY29taW5nIGZyb20gaGVyCndpdGggc2NhbHktbG9va2luZyBhcm1vcgpjcmltc29uIHRoZW1lZApjdXJ2ZWQgYmxhZGVzIG9uIGVhY2ggaGFuZApzb2Z0IGdlb21ldHJpYyAzZCBzaGFwZXMKZnVsbCBib2R5IHBvcnRyYWl0IG9mIGEgc2hvcnQhCm92ZXJ3ZWlnaHQhISB0ZWVuYWdlIGJveQpwb3NpbmcgcmVhZHkgZm9yIGEgZmlnaHQKaGFsZiBtYW4gaGFsZiB3b2xmCmV5ZXMgYW5kIGxpcHMKZnVsbCBib2R5IHRhdHRvbwpoaWdobHkgZGV0YWlsZQpjbGFzc2ljYWwgd2l0Y2gKYXJtcyBjcm9zc2VkIG9uIGNoZXN0CnJlZCBtaW5pIGNvb3BlciBzCmZ1dHVyaXN0aWMgbWFycmFrZWNoIG1vcm9jY28KY29uY2VwdCBhdXRvbW9iaWxlIGRlc2lnbgpvcmdhbmljIHZvbHVtZXRyaWMgbGlnaHRzCmNvbmNlcHQgY2FyIGRlc2lnbgpzZXQgb24gZmlyZQptZWdhIGhpZ2hseSBkZXRhaWxlZApwbGFudHMgZ3Jvd2luZwpmdXR1cmlzdGljIGN5YmVyIHN1YndheSBzdGF0aW9uCmZ1dHVyaXN0aWMgaG91c2UKZnV0dXJpc3RpYyBsb3ctcG9seSBiYXR0bGUgdGFuawoxOTgwIHBob3RvCnBhc3RlbCBicmlnaHQgY29sb3JzCnJldHJvIGZ1dHVyaXN0aWMgaWxsdXN0cmF0aW9uCmJha2luZyBhIGNha2UKZ29kIGlzIGRlYWQKZ3RhIDYgZ2FtZXBsYXkKZ3RhIDYgbGVhawpwZWxvc2kKZ3RhIHNhbiBhbmRyZWFzCm5pbnRlbmRvIDY0IHNjcmVlbnNob3QKZ3JhbmQgdGhlZnQgYXV0byA1Cmxvbmcgc2hvdCB2aWV3CnVsdHJhLWhpZ2ggZGV0YWlscwpndHIgeHUxCnJhb3VsIGhhdXNtYW5uCm11cmRlciBzY2VuZQpndmMgZGVzaWduCmd3YXIKZ2FkZ2V0IGhhY2t3cmVuY2gKZ2FsIGdhZG90IGFuZCB0cmliYmxlcwp0cmliYmxlcwpnYWwgZ2Fkb3QgYXMgY2FwdGFpbiBhbWVyaWNhCmJ1dCBhIHN0ZXJuIGxvb2sgYWJvdXQgaGVyCmtvZGFjaHJvbWUgazEzNQpnYWwgZ2Fkb3QgYXMgY2FwdGFpbiBtYXJ2ZWwKZ2FsIGdhZG90IHBvcnRyYWl0CndpdGggaW5maW5pdHkKdG9sa2VpbiBhcnQKZ2FsYXh5IGluIGEgYm90dGxlCmNlbGVzdGlhbHB1bmsKdGFrZW4gdGhyb3VnaCBhIHRlbGVzY29wZQp3YXRlciBpcyBtYWRlIG9mIHN0YXJkdXN0Cm5vIHVpCmdhbWluZyBjaGFpciBhcyBhIHRvaWxldApnYW5kYWxmIChsb3RyCmluIG9yYW5nZSBjbG90aGVzKSBmaWdodApnYW5kYWxmIHRoZSB3aGl0ZQpsZWljYSBub2N0aWx1eApsb29raW5nIHRocmVhdGVuaW5nCsKvXyjjg4QpXy/CrwpwaG90b2dyYXBoIGNyZWRpdDogYXAKc2F0dXJubyBidXR0w7IKZ2FyZGVuIHV0b3BpYQp0YWxsIGZhY3RvcnkKdGVycmVzdHJpYWwgcGFyYWRpc2UKYWxleCByb3NzIGFuZCByaWNoYXJkIGNvcmJlbgpmaW5lIGJydXNoCnRoZSByb29tIGlzIHJhdWNvdXMgYW5kIGpveWZ1bApnYXRlIHRvIGhlbGwKd2FyIHRoZW1lIGdhdW50bGV0CmdhdXNzaWFuIG5vaXNlCnN0YXJyaW5nIGluIHRob3IgcmFnbmFyb2sgZmlsbQpzdXBlciBkZWZpbmVkIGNsb3VkcwppbnRyaWNhdGUgcGxhbnRzCm9ybmF0ZSBwaXJhY3kKZ29sZCBhbmQgdHJlYXN1cmUKZ290aGljIHNoaXAgb24gb2NlYW4KbWFkIG1heCBiZXlvbmQgdGh1bmRlcmRvbWUgMTk4NQoxOTYwcyBzcHkKZ2VuZSBrZWxseSBhcyB0aGUgdGVybWluYXRvcgpnZW5lcmFsIGdyZWl2b3VzCmdlbmVyYWwgZ3JpZXZvdXMgZnJvbSBzdGFyIHdhcnMKdGVhbSByb2NrZXQKZ2VuamkKZmFsbGVuIHRyZWVzCmludHJpY2F0ZSBkb3RhcnQKZ3JhaW55IG1vdmllIHN0aWxsCndoYXQgYSBidW1ibGVyIQpnZW9yZ2UgZmxveWQKZ2VvcmdlIGgudy4gYnVzaApnZW9yZ2Ugc29yb3MgZnVsbCBib2R5IHNob3QKZ2VvcmdlIHNvcm9zCjRrIGdyZXlzY2FsZSBoZCBwaG90b2dyYXBoeQpnZW9yZ2UgdyBidXNoCmxlbnMgZmxhcmUgcGhvdG8gcmVhbAphcnRzdGFpb24gdHJlbmRzCmdlcmFsdCBvZiByaXZpYSBpbiBkYXJrIHNvdWxzCndvbGYgcGVkYW50CnZpYnJhbnQgd29ybGQKZGVtb25zIG9mIGhlbGwKZ2hvc3QgaW4gdGhlIHNoZWxsIDIwMTcKaHlwZXJyZWFsaXN0IGhpZ2hseSBpbnRyaWNhdGUKZ2FtZXNob3cKZ2hvc3RseSBmaWd1cmVzCmJyaWdodCBzcGFya3MKcGFpbnQgcGVlbGluZyBvZmYgdGhlIHdhbGxzCmNyeWluZyBzb2Z0bHkgYW5kIGh1bWJseQpnaWFudCBmcmFua2Vuc3RlaW4KY29sb3NzYWwgZnJhbmtlbnN0ZWluCmF0dGFja2luZyBueWMKM2RzIG1heCByZW5kZXIKZ2lhbnQgbWVjaGEgcm9ib3QKZm9vdHByaW50cwptaW5kLWJlbmRpbmcgZGlnaXRhbCBhcnQKbWFjcm8gcGhvdG9ncmFwaHkgMjVtbQpjYWxtbHkgY29udmVyc2luZyA4awpnaWFudCBjb2x1bW5zIHBhbGFjZQpnaWFudCBjcmFiCm1hZ2VudGEgbGlnaHRpbmcuIGZhbnRhc3kKYmx1ZSBsaWdodGluZy4gZmFudGFzeQpsaWdodCBtb3JuaW5nIGZvZwpnaWFudCBnb2xkZW4gbnVjbGVhciBob3JuZXQKaXQga2lsbHMgeW91IGluc3RhbnRseQpzdXBlciA4bW0gcGhvdG9ncmFwaAp0YXVyZW4Kc21hbGwgbWFuCmhvcnJvciBhcnR3b3JrCndpdGggYSBkaXN0YW50CmdpZ2EgY2hhZCBjcnlpbmcKZ2lnYWNoYWQgaW4gbWluZWNyYWZ0CmdpZ2FudGljIHRpdGFuIHdpbm5pZSB0aGUgcG9vaApnaWxsaWdhbidzIGlzbGFuZApnaW1saSBmcm9tIGxvcmQgb2YgdGhlIHJpbmdzCmdpb3JnaW8gYS4gdHNvdWthbG9zCmdpcmF0aW5hCmFua2ggc3ltYm9sCmxvbmcgc2hhZ2d5LWhhaXJlZCByb2NrZXIKcmVkIGxpcHN0aWNrIG9uIGZhY2UKZ2lybCBpbiBmbG93ZXJzCmdpcmwgaW4gbG92ZQpkcmFtYXRpYyB3aWRlIGFuZ2xlIHNob3QKdGVhc2VyCmdpcmwgd2l0aCBwZWFybCBlYXJyaW5nCmdpcmwgd2l0aCBhIGJpcmRjYWdlIG9uIGhlciBoZWFkCmh1bWFuIGNoaW1lcmEKaHEgNGsgd2FsbHBhcGVyCnN0cm9uZyBzdW5saWdodApnbGFtb3JvdXMgcnVud2F5IG1vZGVsCjEwbW0Kc3RyZWV0IGFydDoyIGhpZ2hseSBkZXRhaWxlZApwb3N0LXByb2Nlc3NpbmcuIGhpZ2ggZGV0YWlsCnJpZGluZyBhIGNhbWVsCmdub21lIGlsbHVzaW9uaXN0CmdvYmxpbiBmZW1hbGUgcG9ydHJhaXQKZ29ibGluIGdpcmwgZG5kIGNoYXJhY3RlcgpoYXRjaGVkIHBvaW50ZWQgZWFycwp3YXJoYW1tZXIgNGsKZ29kIGhhZCBkb2cgY2hpaHVhaHVhJ3MgaGVhZApnb2QgaXMgYSB3b21hbgpzaGl0IGNvYndlYnMgYW5kIHNoaXQKZ29kZGFtbiEgcGx1cwpnb2Qgb2YgY2F0cwpnb2RkZXNzIG9mIHNwcmluZwpnb2RkZXNzLiBleHRyZW1lbHkgaGlnaCBkZXRhaWwKc21va2UgYW5kIGRlYnJpcwpnb2R6aWxsYSBwb3J0cmFpdApncmVlbiBydWJiZXIgc3VpdCBnb2R6aWxsYQp0aG9tYXMga2lua2FkZSBhbmQgcGF1bCBsZWhyCmdva3UgZnJvbSBkcmFnb24gYmFsbApnb2t1IGZyb20gZHJhZ29uYmFsbCB6Cmdva3UgZnJvbSBkcmFnb24gYmFsbCB6Cmdva3UgZnVzZWQgd2l0aCBvcHRpbXVzIHByaW1lCmdva3UgaW4gZm9ydG5pdGUKd2VhcmluZyBkaXNjbyBzdWl0CmJsdWUgZmlyZSEKaGluZHUgYWVzdGhldGljCm10ZyBhcnQgc3R5bGUKZ2lhbnQgZXllYmFsbHMKZ29sZGVuIGF1dHVtbgpjb2xvcmZ1bCBhdXR1bW4gdHJlZXMKcmVkLXllbGxvdyBjb2xvcnMKZ29sZGVuIGZpc2ggaW4gd2F0ZXIgZXhvc2tlbGV0b24KZ29sZGVuIG9yZ2FuaWMgc3RydWN0dXJlcwpqZWxseWZpc2ggZWxlbWVudApuaWdodHRpbWUgcGhvdG9ncmFwaHkKd2F0ZXJtYXJrZWQKd2VhcmluZyBhIHRyYWNrc3VpdApnb29naWUgbW90aWZzCnJlYWxpc3RpYy1uIDkKZ29waGVyCnN1cmZhY2VzIGJsZW1pc2hlcwpyZWFsLWxpZmUgcGhvdG9ncmFwaApodWdlIHByaXNtYXRpYyBnbG93aW5nIHN1bgpkYXJrIGdyZXkgcm9iZXMKYm9uZSBzY2VwdGVyCmhvbGRpbmcgaXQgb3V0IHRvIHRoZSBjYW1lcmEKc2hvcnQgZGFyayBoYWlyY3V0CmZpbmVseSBwYWludGVkCnNoYXJwIGRldGFpbCA4awpnb3RoaWMgMgpnb3RoaWMgZ2lybCBmYWNlCmdvdGhpYyBnaXJsIHNtb2tpbmcgYSBjaWdhcmV0dGUKZ290aGljIGdpcmwgc21va2luZwpncmFmZml0aSBvZiBhIGhvbWVyIHNpbXBzb24KcmVkIGZvcm1hbgpub2lzeSBmaWx0ZXIKZ3JhbmQgYWRtaXJhbCB0aHJhd24Kb3Jhbmd1dGFuCnNraW5sZXNzIGhlYWQKdHJpZ3VuCmdyZWF0IHB5cmFtaWQgb2YgZ2l6YQpncmVhdCB3YWxsCmdyZWVrIGdvZCBpbiBtZWNoYSBzdHlsZQpzZWF0ZWQgb24gYSB0aHJvbmUKZ3JlZWsgZ29kZGVzcyBhdGhlbmEKZ3JlZW4gYmxlc3NpbmcKcm9tYW50aWMgbGlnaHQKbm90IGVub3VnaCBkZXRhaWxzCnByb3BvcnRpb25zIG9mZgptYWdpY2FsIGdpcmwgYW5pbWUgbWFob3Ugc2hvam8KbmF0aGFuIGZpZWxkZXIgYW5kIGdyb3VjaG8gbWFyeAp0aGUgZ3JlbWxpbnMgYXJlIHRvbyBkYW1uIGhpZ2gKY2F0YWxvZ3VlIHBob3RvZ3JhcGh5CmdyZXRhIHRodW5iZXJnIHNtaWxpbmcKZ3JldGEgdGh1bmJlcmcKY29sb3VyZWQgbGluZSBhcnQKZ3JleSBhcm1vcgpncmltZXMgLSBib29rIDEgYWxidW0gY292ZXIKbGFtYmVudCBsaWdodGluZwpncml6emx5IGJlYXIgcmlkaW5nIGEgaG9yc2UKZ3JvZyBzdHJvbmdqYXcKc3RpbGwgZnJvbSB0aGUgbWFuZGFsb3JpYW4gc2hvdwpoaXBwaWUgbW90aWZzCmZsb3dlciBwb3dlciBtb3RpZnMKbGF5aW5nIG9uIGhlciBiYWNrIG9uIGEgYmVkCm1vdW50YWlub3VzIGFyZWEuIHJhcmUgZmxvcmEKZ3J1IGZyb20gZGVzcGljYWJsZSBtZQp3aGlsZSBzbWlsaW5nIGZvciBhIHBob3RvZ3JhcGgKZ3VhbmFqdWF0bwpndWFueWluIG9mIHRoZSBzb3V0aGVybiBzZWFzCjRrIHByZXNzIGltYWdlCmd1aWxsb3RpbmUgcmdiCnNoYXJwbmVzcy4gY2xlYW4KZ3VtYmFsbCB3YXR0ZXJzb24KY2F1Z2h0IG9uIGNhbWVyYQpoeXBlciBkZXRhaWxlZCBhcnQKZ3VuZ25pcgp0aGUgc3BlYXIgb2Ygb2Rpbgprb2RhayAyMzgzCnBvd2VyZnVsIGF1cmEKZ3V5IGZpZXJpIGluIHN0cmFuZ2VyIHRoaW5ncwppbWFnZSBjcmVkaXQgbmF0IGdlbwo3MG1tIGZpbG0gc2NyZWVuc2hvdApnd3luCmxvcmQgb2YgY2luZGVyCnNvZnQgb3V0bGluZQp5ZWxsb3cgY2FwCmphc29uIGhhcmtuZXNzCmJsdWUgc2NhbGVzCnBvcnRyYWl0IG9mIGJhcmJhcmEgcGFsdmluCnJlbmRlcmVkIGltYWdlCmZsYW1lIGNvbmp1cmluZyBhcm1vcmVkCmhpbWFycyBpbiBjYXJzIHBpeGFyIG1vdmllCmhpbWFycwpvdXRzaWRlIG9uIHRoZSBncm91bmQKdGlueSBtaWNlIGxpdmluZyBpbnNpZGUKYXdlc29tZSBhcnQKZ2VpZ2VyIGFydApoYWdyaWQgaW4gY3V0ZSBhbmltZSBzdHlsZQptZWxsb3cgYW5kIHNvZnQKc2hhcnBlbiBoaWdoIHF1YWxpdHkKcGxheXN0YXRpb24gMiBzY3JlZW5zaG90CmhhamltZSBzb3JheWFtYSBkZXNpZ25lZCBnaXJsCmdyaXR0eSByZWFsaXNtCnNoaW55IGxpZ2h0aW5nCmhhbGYgbGlmZSAyIG9uIGEgbmludGVuZG8gNjQKaGFsZiB3b2xmIGhhbGYgc2hhcmsKZ29kLiBkcmFtYXRpYyBnb2xkIGJsdWUgbGlnaHRpbmcKaGFsZi10dXJuZWQgbGFkeSBpbiBldmVuaW5nIGdvd24KZmxvYXRpbmcgZ2hvc3QKaGFsbG93ZWVuIHdhbGxwYXBlciB3aXRoIGdob3N0cwpqYWNrLW8tbGFudGVybnMKanVpY3kgbWVhdAp0aGUgdHdpbGlnaHQgem9uZQpoYW5kcyBvZiBtZW4KaGFuZHNvbWUgZG9uYWxkIHRydW1wCmRyYW1hdGljIGxpZ2h0aW5nIG1hbgpsaWdodCBsaWdodCBhdG1vc3BoZXJlCmhhbmsgaGlsbCBmcm9tIGtpbmcgb2YgdGhlIGhpbGwKMTk0MHMgcGhvdG9ncmFwaHkKaGFwcHkgdHJlZSBmcmllbmRzCmhhcmxleSBxdWVlbgpmdWxsIGJvZHktbiA5CmhhcnJpZXQgdHVibWFuIHNrYXRlYm9hcmRpbmcKZG9pbmcgYSBraWNrZmxpcCBvdmVyIHN0YWlycwotLW4gNgpoYXJyeSBwb3R0ZXIgaW4gYSBtYWlk4oCZcyB1bmlmb3JtCm1hcnkgcG9wcGlucwpyb24gd2Vhc2xleQp5ZWxsb3cgbGlnaHQgc3BlbGwKaW50cmljYXRlIGRldGFpbCBhbmQgcXVhbGl0eQpoYXJyeSBwb3R0ZXIgcG9ydHJhaXQKaGFycnkgcG90dGVyIHJpZGluZyBhIGJyb29tc3RpY2sKbWlub3IgYmx1cgp5aXFpYW5nIGFuZCBzaHVyYWtyZ3QKaGFydW5vIHNha3VyYQpmaWdodGluZyBkYXJ0aCB2YWRlcgp2aWJyYW50IC0gYyAxMApoYXRzdW5lIG1pa3UgY29zcGxheQp3aXRoIGEgcGFyayBpbiB0aGUgYmFja2dyb3VuZApoYXRzdW5lIG1pa3UgcG9ydHJhaXQKaG9sb2dyYXBoaWMgdGV4dHVyZQpkJmQgbWFwCmhvcnJvciBtb3ZpZSBhZXN0aGV0aWMKbGlsaWVzIGFuZCBkYWZmb2RpbHMKdGVsZWtpbmV0aWMgYXVyYQpnZWxhdGlub3VzIGdyZWVuIGdvb3AKY292ZXJlZCBpbgp3ZXN0ZXJuIGV1cm9wZWFuCmJ1dCBub3QgcXVpdGUKZG9taW5hdGluZyBwZXJzb25hbGl0eQp3aXRoIHR3byBwYWlycyBvZiB3aW5ncwphIGhvcm5lZAphZXRzdGF0aW9uaGQKd2VhcmluZyBvcmdhbnphIGdvd24KYm9yb3F1ZQp0cmlwbGUgaApjaGVlc3kgaXJvbiBtYWlkZW4gbW90aWZzCm9yawoxOTcwcyBjaW5lbWEgY2FtZXJhCmhlZGdlaG9nIG1hZ3VzCmFuZHJvaWQgaGVyb2luZQptYW55IGludHJpY2F0ZSBkZXRhaWxzCmhlbGVuZSBmaXNjaGVyIGluIGRvd250b24gYWJiZXkKaGVsbGhvdW5kcwpoZWxsbyBkYXJrbmVzcyBteSBvbGQgZnJpZW5kCmNvcHBlciBlbGVtZW50cwpzZWEgYW5lbW9uZQpib2IncyBidXJnZXJzCmhlbnJ5IGNhdmlsbCBhcyBhcnRoYXMgbWVuZXRoaWwKaW5zdGFncmFtIHBvc3QgNGsKaGVucnkgY2F2aWxsIGFzIHdvbHZlcmluZQp0aGlnaHMhISEKbHV4dXJpb3VzIHN1aXQKaGVucnkgY2F2aWxsIGlzIGEgZ3JlZWsgZ29kCmhlbnJ5IHZpaWkKZ2xvd2luZyBoYWxvIGFib3ZlIGhpcyBoZWFkCnJwZyBsYW5kc2NhcGUKaGV4dGVjaApoaWRlZW4gdmlsbGFnZSBpbiB0aGUgZm9yZXN0CmJ5IGphbWVzIGplYW4KZmFiaWFuIHdhZ25lciBjaW5lbWF0b2dyYXBoeQpmb3Jlc3QgcGxhaW5zIG9mIG5vcnRoIHlvcmtzaGlyZQpmYWNlIHNob3dpbmcKd2VhcmluZyBmYW50YXN5IGZvcm1hbCBjbG90aGluZwpoYXNhbmFiaQphbGllbiBodW50ZXIKc29ueSBhNwp3aXRoIHNwYXJrbGluZyBnZW1zIG9uIHRvcApoaWdoIHNjaG9vbCBnaXJscwpjb2xvcmZ1bCBob3VzZQpjYW5vbiB0cy1lIDE3IG1tCndhcm0gYnJpZ2h0IHdoaXRlIGxpZ2h0CmhlYXZlbiBwbGFuZXQgaW4gYmFja2dyb3VuZApnb2RsaWtlIHRlbXBlcmF0dXJlCmNvbG9zc2FsIHRvd2VyCmhpZ2hseSBkZXRhaWwgd2lkZSBhbmdsZSBwaG90bwpkYXJrIG5lb24gY29sb3JlZCByYWluZm9yZXN0Cmh1Z2UgYmxhY2sgZ2xvd2luZyBzdW4Kd2lsZCBmbHVmZnkgbGxhbWEgcG9ydHJhaXQKcHVscCBzY2ktZmkKYXBwbGVzIG9uIHRoZSBncm91bmQKZGVwcmVzc2VkIHNhZCBleHByZXNzaW9uCjV0aCBnZW4gZmlnaHRlcgphaXIgZm9yY2UKaGlnaGx5IGRldGFpbGVkIHBvcnRyYWl0IG9mIGdva3UKaW4gYSBmcmFjdGFsIGZvcmVzdApoaWdoIGRldGFpbCB0ZWV0aApoaWtpbmcgY2FuZQpoaW0KdGhlIGJlc3Qgb2YgZWxlcGhhbnRzCnB14bmja2FyYWPFq+G4jWEKaXRhbG8gY2FsdmlubwpiYW5rCmhvZyByaWRlcgpob2d3YXJ0cyBzdGFpcndlbGwKb2xkIHJ1aW5zIHRvd2VyCnNoaXAgb24gbGFrZQpob2xnYSAxMjBuCnRoYXRjaGVkIHJvb2YKcmF5bWFuIGxlZ2VuZHMKc3Rvcm1pbmcgdGhlIGJlYWNoZXMgb2Ygbm9ybWFuZHkKaG9sbHl3b29kIGNpbmVtYXRpYwpoZXhhZ29uYWwgd2FsbApiZW4gZ2Fycmlzb24gY29taWMKc3VwZXJoZXJvIGZyb20gdGhlIGJveXMgdHYgc2hvdwpzaXR0aW5nIGluIGFuIGVtcHR5IHdoaXRlIHJvb20KaG9tZWxvYWYKaG9tZXIgc2ltcHNvbiBhcyBtb25hIGxpc2EKcnR4IDMwODAKaG9tZXIgc2ltcHNvbiBpbiBndGEgdgpob21lciBzaW1wc29uIGluIGdlYXJzIG9mIHdhcgpob21lciBzaW1wc29uIGluIG1pbmVjcmFmdApob21lciBzaW1wc29uIGluIHN0cmFuZ2VyIHRoaW5ncwptb3VzZSBib2R5CnN0cm9uZyBiYWQKc2xpY2sgdGlyZXMKaG9waSBrYWNoaW5hCmZseWluZyBkcmFnb25zCm5pbnRlbmRvNjQKdmVyeSBkZXRhaWxlCmhvcnNlIHdhcnJpb3IKY29sb3JmdWwgY29uY2VwdCBhcnQKbGlmdGVkCmZvcmQgZi0xNTAgcmFwdG9yCmZhc3QgJiBmdXJpb3VzCnNhbGVlbiBzNwpob3QgZmlyZSBnaWFudGVzcwpob3QgZmlyZSBnb2RkZXNzCmJvZHkgbWFkZSBvZiBmaXJlCnRpbnkgcGVyc29uIHdhdGNoaW5nCndlYXJpbmcgbGFiIGNvYXQgYW5kIGEgYmxvdXNlCmhvd2wncyBtb3ZpbmcgY2FzdGxlIGF0IG5pZ2h0Cm1pc3QgYXJ0IG9mIGlsbHVzaW9uCmluIGZyb250IG9mIHRoZSB0ZW1wbGUKYmFraSBzdHlsZQpiYWtpCndhdGVyIGJvdHRsZSBxdWVlbgpjYW5kaWQgcGljdHVyZQphIGxhc2VyIHJpZmxlCmhvbGRpbmcgYnJ1c2gKaHVudGVyIGJpZGVuIHNtb2tpbmcgY3JhY2sKaHVza3kgZG9nCmFmdGVybWFya2V0IHBhcnRzCnJlYWxsaXNtCnJpY2ggYmx1ZSBjb2xvcgpjb25jZXB0IGFydCBmb3IgbW92aWVzCmNyYWNrcyBpbiB0aGUgYXJtb3IKbGl0IGNhbmRsZXMKc3RhbmRpbmcgaW4gc2FuZApzdXBlciBzdHJvbmcKY3ViaXNtIGJydXRhbGlzbSBhcmNoaXRlY3R1cmUKY3liZXJwdW5rIHNwYWNlIHN0YXRpb24Kb3ZlcndhdGNoIGluc3BpcmVkCmJhY2tncm91bmQgb2YgYSBnb2xkZW4gYmFsbHJvb20KZmluYWxyZW5kZXI6MC44fGRldmZpYW50YXJ0CjE2ayByZXNvbHV0aW9uOjAuNnxwZW9wbGUKaHVtYW5zOi0xCm1hbnRlZ25hCmFwb2NhbHlwc2UgaW5jYXJuYXRlCmkgYW0gZ3Jvb3QKdGhlbiBhbm90aGVyCm5pY2UgY2xvdWRzCmN5YmVycHVuayBhbmdyeSBnb3JnZW91cyBkcnVpZAppIGhhdmUgbm8gbW91dGgKZGVsYWNyb2l4CnRoZXJlIGZvciBpIGFtCmJsYWNrIGNvd2JveQpleHRyZW1lIGVtb3Rpb24KaSd2ZSBoYWQgYSByb3VnaCBkYXkKaGVhbHRoY2FyZSB3b3JrZXIKaWNibQpjbG93biBmaXNoCmdob3N0bHkgdGVlbmFnZXIgYmVkcm9vbQpjaXR5c2NhcGUgaW4gdGhlIHdpbmRvdwooKG1lc3N5KSkKb21pbm91cyEgbGFuZHNjYXBlIG9mIG5vcnRoIGJlbmQKJ2xvbmUgZGFyayBmaWd1cmUnISEKcmVhbCBkZXRhaWxzCmlzaG93c3BlZWQKZGFuCmljZSBzb3JjZXJlc3MKZ3JhdmUKaWNvbiBmb3IgYW4gYWkgYXBwCmljeSByb2FkIG9uIGEgcGxhbmV0IG9mIGxhdmEKZmxhbWVzIGFsb25nc2lkZSB0aGUgcm9hZAppZ2d5IHBvcAphc3Ryb25hdXRzIHdhdmluZyBoZWxsbwpzaGVldCBvZiBwYXBlcgppbGl0aGlkIG1pbmQgZmxheWVyCmlsaXRoaWQKdmVyeSBkZXRhaWxsZWQgZmFjZQppbGx1c3RyYXRpb24gb2YgYm9yaXMgam9obnNvbgpvbiBhIGZsYXQgY29sb3IgYmxhY2sgYmFja2dyb3VuZAp0YWxsIGJyaWRnZSB3aXRoIGNpdHkgb24gdG9wCmJhZ3MKcmF5IHRyYWNlIDhrCmltcGVyaWFsIHJ1c3NpYQpwdXJwbGUgZnV0dXJlIGNpdHkKaW4gc2VhcmNoIG9mIGxvc3QgdGltZQppbiBhIGJsYWNrIHJvb20KaW4gYSBkYXJrCnRoZSBjeXRvcGxhc23igJ0KaGlwZXJyZWFsaXN0YQppbiBpdHMgZHlpbmcgYnJlYXRoCnRvIHByb3RlY3QgdXMKc3BhcmtsaW5nIGluIHRoZSBmbG93aW5nIGNyZWVrCmhvbmUgZmluaXNoZWQKKChyZXN0cmFpbmVkKSkKaW4gdGhlIGZvcmVzdCBhdCBuaWdodAppbiB0aGUgbW9ybmluZyBsaWdodAp0aGUgYXJ0aXN0IGhhcyB1c2VkIGJyaWdodAppbiB0aGlzIHBhaW50aW5nCmluZGlhbmEgam9uZXMgb24gbW9ua2V5IGlzbGFuZAplcGljIHBzeWNobwppbmZvZ3JhcGhpYyBvZiBhY3RpdmUgdm9sY2Fub2VzCmFuYWx5c2lzIGNpdHkKaW5zaWRlIGEgZ2FuZyBoaWRlb3V0Cm1hbnkgcmVmbGVjdGlvbnMKaG91ZGluaSBhbGdvcml0aG0gZ2VuZXJhdGl2ZSBhcnQKc21hcnQgYW50cwp3aXphcmQgc2l0cyByZWFkaW5nIGF0IGEgZGVzawppbnNpZGUgYW4gb2xkIHdlYXBvbiBzaG9wCmluc2lkZSBhbiBvbGQgbWFnaWNhbCBzd2VldCBzaG9wCmluc2lkZSBvZiBhIGJsYWNrIGhvbGUKaW5zaWRlIG9uIGEgcmFpbnkgZGF5CmZvZyBhbmQgc3dhbnMgb3ZlciB0aGUgcml2ZXIKZm9nIG9uIHRoZSB3YXRlcgp3ZWxsLWdlbGxlZCBoYWlyCnBob3RvcmVhbGlzdGljIHF1YWxpdHkKdml2aWQgY2FydG9vbnkgY29sb3JzCmludGVyaW9yIG9mIHN0YXRlbiBpc2xhbmQgZmVycnkKbG9va2luZyBvdXQgb2YgdGhlIHdpbmRvdwppbnRlcmlvciBvZiBhIHNtYWxsCmxpZ2h0IG9mIHRoZSBnb2RzCmJlYXV0aWZ1bCBzdXJyZWFsIHBvcnRyYWl0CmJyaW5naW5nIHBlb3BsZSB0b2dldGhlcgphbmltZSBhbmQgbWFuZ2EKYnJpZ2h0IHRoaW4gd2lyZXMKcmFuZG9tIGNvbG9ycwphenVyZQphcnRzdGF0aW9uLiBjIDExLjAKaGlnaCBmb2NhbCBsZW5zCmN1cnZpbmcKc3VycmVhbCBtZXRhbCBzY3VscHR1cmUKZnVsbCBibG9vZCBtb29uCnRoaWNrIHN3aXJsaW5nIHRvcm5hZG8KbXVuaWNoCmZpZ2h0aW5nIGFydAppb24gaWxpZXNjdQpjb2xkIHRlbXBlcmF0dXJlCnBvdHMgb2YgZ29sZApzaGVsdGVyCmlzIHRoaXMgbG9zcz8KZWFzeSBnbwp0byBtZQppc2FiZWxsYQp1bml0eTNkCmlzb21ldHJpYyAzZCBmYW50YXN5IGlzbGFuZAp1bHRyYSBkZXRhaWxlZCBpbGx1c3RyYXRpb24Kc2ltIGNpdHkgNAphbm5vIDIwNzAKaW5jcmVkaWJsZSB2ZngKZWxlY3RyaWZ5aW5nCmNvbWJpbmUKaXQgaXMgd2VkbmVzZGF5IG15IGR1ZGVzCnN0aWxsIGxpZmUgd2l0aCBzbm93Cml0IHdhcyB0aGUgd29yc3Qgb2YgdGltZXMKaXQncyBhIGRlZXAgbmlnaHQKaW4gdGhlIHlhcmQKaXQncyBhbGwgaW4geW91ciBoZWFkCmh5YnJpZCBodW1hbi90YW5rCmdhaW5heCBhbmltZSBzdHlsZQppdGFsaWFuIG1lZGl0ZXJyYW5lYW4gY2l0eQppdGF0Y2hpIHVjaGloYQpqZmsgYXNzYXNzaW5hdGlvbgpqawptaXNjZWxsYW5lb3VzIG9iamVjdHMKamFiYmEgZWwgaHV0dApqYWNrIGJha2VyIGZyb20gcmVzaWRlbnQgZXZpbCA3CnllbGxvdyBmdXIgZXhwbG9kZXMKaGlzIG9uZSB5ZXMgZ2xvdyByZWQKamFjayBza2VsbGluZ3RvbgpqYWNrc2VwdGljZXllIGFzIGEgbXVwcGV0CmJsb29kYm9ybgpmNC4wIDEyMG1tCmhvbGRpbmcgYSBsaWdodCBzYWJlcgpqYWltZSBsYW5uaXN0ZXIKY2xvc2UgdXAgb2YgbGFpbiBpd2FrdXJhCm1ldGggbGFiCnBob3RvcmVhbGlzdGljIGZlYXR1cmVzCmpha2UgZ3lsbGVuaGFhbAppaW50cmljYXRlCmhvcnNlIGluIGJhY2tncm91bmQKdHJvcGljYWwgdW5kZXJ0b25lcwpqYW1lcyBsZWJyb24KcGhvdG8gdGFrZW4gZnJvbSBiZWhpbmQKd2luZG93LiBuZXRoZXJsYW5kcyB0YXZlcm4KcmVhbGlzdGljIHBvcnRyYWl0IHBob3RvCjE4NjMKamFwYW4gdHJhdmVsIHNjcmFwYm9vawpsb3RzIG9mIG5lZ2F0aXZlIHNwYWNlCmNyYWZ0cyBhbmQgc291dmVuaXJzCmNsZWFuIHNwb3QgY29sb3IKamFwYW5lc2UgdG9yaWkgaW4gYSBtb3V0YWluCnBpbmsgc2NoZW1lCnBpbmsgYW5kIGJsdWUgZ3JhZGllbnRzCmRyZWFtbGlrZSEKamFwYW5lc2UgZ29kCmphcGFuZXNlIG1haWQgY2FmZQpqYXBhbmVzZSBvbnNlbgpqYXBhbmVzZSByb2JvdCBnZWlzaGEKdWtpeW8Kd2hpdGUgY2VyYW1pYyBzaGFwZXMKcmVkIG5lb24gZGV0YWlscwpsb25nIGJyYWlkZWQgdmlraW5nIGJlYXJkCmZyb20gd2l0Y2hlciAoMjAyMSkKamF5IGJhdW1hbgpyJmIKamF5bmUgbWFuc2ZpZWxkIGluIGEgc3dpbXN1aXQKamVhbiBsdWMgcGljYXJkCmJvd2xpbmcKdGhlIG9uZSB0cnVlIGdvZAp0aGUgd2FsbHMgYXJlIHBpbmsKdmlkZW8gZ2FtZSByZW5kZXIKcGFzdGVsIHN0eWxlIHBhaW50aW5nCnJheSB3aWxsaWFtIGpvaG5zb24KaW4gcmVkIGRlYWQgcmVkZW1udGlvbiAyCmplbmdhIHRvd2VyCnZlbHZldCBmcm9jayBjb2F0CmhvbGRpbmcgY291cnQKY2luZW1hdGljIGNsb3NldXAKY2xvc2UtdXAgc2hvdCB0YWtlbiBmcm9tIGJlaGluZApob2xkaW5nIG1qb2xuaXIKOGsgc2VsZmllIHBob3RvZ3JhcGgKb24gc2hpcApqZXJlbWUgbW9tb2EgYXMgdGFyemFuCmJhZGFzcyBsb29rCnNjcmVlbnNob3QgZnJvbSBza3lyaW0Kb24gdGhlIHN0cmVldHMKamVybWE5ODUgYXMgdGhlIGpva2VyCmF0dGFjayBvbiB0aXRhbiBjb3ZlcnQgYXJ0Cmplcm1hOTg1IGluIGZvcnRuaXRlCmhpZ2hseSBkZXRhaWxlZCBvaWwtcGFpbnRpbmcKamVyb21lIHBvd2VsbCBwdW5jaGluZyBhIGJlYXIKamVyb21lIHBvd2VsbAppbiBicmVha2luZyBiYWQKZ3Vud29vIGtpbSBhbmQgai5kaWNrZW5zb24KamVzc2UgbWNjcmVlCmplc3NlIHBpbmttYW4gYXMgc3BpZGVyLW1hbgpqZXNzZSBwaW5rbWFuIGluIGd0YSB2CnBvc2luZyBhdSBuYXR1cmVsCnJlZCBnaWFudApzdHlsaXplZCBvaWwgcGFpbnRpbmcKb3V0c2lkZSBsaWdodGluZwpibHVlIHRpZWZsaW5nCjM1bW0gc3ViamVjdCBwaG90b2dyYXBoeQpqZXN1cyBjaHJpc3QgaXMgdGhlIGRvb20gc2xheWVyCmplc3VzIG9mIG5hemFyZXRoCmplc3VzIHJpZGluZyBhIGRyYWdvbgpqZXN1cyB3YWxraW5nIG9uIHdhdGVyCmpldHN0cmVhbSBzYW0gZnJvbSBtZXRhbCBnZWFyCmpldHN0cmVhbSBzYW0KdmlydHVvc28KcGFyayBqaS1taW4KYWxleGFuZGVyCmxhdXJpZQpqaW0gY3JhbWVyCnJlZCBhbmQgY3lhbiBpbmsKcGxheXN0YXRpb24gNSBncmFwaGljcwpsb25nIGJyYWlkZWQgYmx1ZSBoYWlyCmpvZGllIGZvc3Rlcgp3ZWJjYW0gc2NyZWVuc2hvdApvcm5pdGhvcHRlcgpleHRyZW1lbHkgZGV0YWlsZWQgYW5kIHNoYXJwCmpvZG9yb3dza3kncyBkdW5lCmpvZG9yb3dza3kncyByb2JvY29wCmNvbG9yZnVsIGZhc2hpb24Kam9lIGJpZGVuIGFzIHN1cGVybWFuCmpvZSBiaWRlbiBhcyB0aGFub3MKam9lIGJpZGVuIGFzIHRoZSBqb2tlciBpbiBiYXRtYW4Kam9lIGJpZGVuIGFzIGEgam9qbyBjaGFyYWN0ZXIKam9lIGJpZGVuIGFzIGEgc2l0aCBsb3JkCmpvZSBiaWRlbiBhcyBhIHRyYW5zZ2VuZGVyIHdvbWFuCm1hbmlhYyBsb29rCmJldGEgbWFsZQpqb2UgYmlkZW4gYXMgYW4gYW5pbWUgdmlsbGFpbgphcyBhbiBhaXIgYmFsbG9vbgpsYXJnZSBhbmQgaW4gY2hhcmdlCmluIGEgbGlzYSBmcmFuayBhcnQgc3R5bGUKdWx0cmFyZWFsaXN0aWMgcGhvdG9ncmFwaHkKam9lIGJpZGVuIGNyeWluZwpwcmVzaWRlbnQgam9lIGJpZGVuCnNwb29rZWQKam9lIGJpZGVuIGluIG1pbmVjcmFmdApqb2UgYmlkZW4gaW4gdGVhbSBmb3J0cmVzcyAyCmpvZSBiaWRlbiBpbiB0b3kgc3RvcnkKam9lIGJpZGVuIGxvb2tpbmcgc2luaXN0ZXIKam9lIGJpZGVuIHJpZGluZyBhIGRyYWdvbgpqb2UgYmlkZW4gcmlkaW5nIGEgc2thdGVib2FyZApodW1hbiBkcmVzc2VkIGFzIGEgYnVsbApqb2UgYmlkZW4gd2l0aCBsYXNlciBleWVzCnJvYmxveApqb2UgcGVyYQpoeXBlciByZWFsaXNtIHJlbmFpc3NhbmNlIGFydApqb2UgYmlkZW4gZnVua28gcG9wCnlvdSB3ZXJlIGp1c3QgbGlrZSBtZQpidXQgd2hvJ3MgdG8ganVkZ2UKdGhlIHJpZ2h0IGZyb20gd3JvbmcKdGhhdCB2aW9sZW5jZSBicmVlZHMgdmlvbGVuY2UKbWljaGFlbGFuZ2VsbyBzdHlsZQpqb2huIGxhc3NldGVyIHBvcnRyYWl0CndpdGggaGF3YWlpYW4gc2hpcnQKam9obiBtY2FmZWUgYXMgaXJvbm1hbgphd2FyZCB3aW5uaW5nIG9uIGRldmlhbnRhcnQKbWFuaWNhbGx5IGxhdWdoaW5nCmluc2FuaXR5IGluIGhpcyBleWVzCmNsb2VzZS11cApqb2huIHBhdWwgaWkKc2xpZ2h0IHllbGxvdyBodWUKam9obiBzbm93CihjYW5vbgpqb2hubnkgY2FzaApiaWJsZSBpbGx1c3RyYXRpb24Kam9obm55IGRlcHAgYXMgdG9ueSBzdGFyawpqb2hubnkgZGVwcCBhcyBjYXB0YWluIGFtZXJpY2EKcmVhbGl0eSB0dgp1bmRlYWQgZmFjaWFsIGZlYXR1cmVzCmpva2VyIGFzIG5hcnV0bwpqb2tlciB3ZWFyaW5nIHZhZGVyJ3MgYXJtb3IKdmVpbnkgaGFuZHMKaW4gY3liZXJwdW5rIDIwNzcKYXMgYSBjeWJlcnB1bmsgZHlzdG9waWEKam9uIHRyb24gYXMgbG9raSBpbiB0aGUgYXZlbmdlcnMKam9udHJvbgpoaWdobHkgZGV0YWlsZWQgcHJvZHVjdCBwaG90bwpkaWdpdGFsIGFydC4gYXJ0c3RhdGlvbgpqb3JkYW4gcGV0ZXJzb24gYXMgYSBsb2JzdGVyCm1ldGFsIGJpa2luaQpqb3JnZSBsdWlzIGJvcmdlcy4gZWxkcml0Y2gKc3RpbGwgZnJhbWUgZnJvbSB0aGUgc2ltcHNvbnMKdGVsZXZpc2lvbiBzaG93Cmpvc2h1YSBjb3R0ZXIKcHJldHR5IGZlbWFsZSBhbXkgYWRhbXMKZnVsbCBlbnRpcmUgYm9keSBmdW4gcG9zZQpzY2FyeSB2YW1waXJlCmZ1bGx5IGJsYWNrIGV5ZXMgbm8gcHVwaWxzCnNhcmNhc3RpYyBldmlsIHNtaWxlCmxvbmcgc3RyYWlnaHQgZ29sZGVuIGhhaXIKbmVidWxvdXMKY295IHNtaWxlCndoaXRlIG1vaGF3awozZCBzaGFkZWQgYXJ0CnBhaW50ZWQgZGlnaXRhbCBhcnQKanVkeSBob3BwcyBmcm9tIHpvb3RvcGlhCmp1bGVzCnN5bW1ldHJpY2FsISEgZmFjZQptdXRlZCBzdGFnZSBlZmZlY3RzCmR1c3QgcGFydGljbGUKanVuamkgaXRvJ3MgdXp1bWFraQpqdXJpIGhhbiBmcm9tIHN0cmVldCBmaWdodGVyCmp1c3RpbiBoYXJ0bGV5IGFzIHN1cGVybWFuCmtmYyBjaGlja2VuCnNob3J0IGZsYXQgaG91cmdsYXNzIHNsaW0gZmlndXJlCmthZ2FtaW5lIHJpbgppbnV5YXNoYQprYWd1eWEgxY10c3V0c3VraQppc2hpcsWNIGhvbmRhCnZpbnRhZ2UgbW92aWUgc2hvdAptaXNzaWxlIGV4cGxvc2lvbnMKaGVhdnktZ2F1Z2UgZmlsaWdyZWUKZ2xvd2luZyBjeWFuIGJsdWUgcGxhc21hCmthbGV2YWxhCmluIHRoZSBzdGFycnkgbmlnaHQKa2FuZSBmcm9tIGNvbW1hbmQgJiBjb25xdWVyCnNoaXBnaXJscwprYW55ZSB3ZXN0IGFsYnVtIGNvdmVyCnN0b3J5Ym9vayB3aWRlIHNob3QgOjogaGQKa2FueWUgd2VzdCBmdW5rbyBwb3AKbGVhZ3VlIG9mIGxlZ2VuZHMgc3BsYXNoc2NyZWVuCmd0YSA1IGFydHdvcmsKdmVyeSBzYWQgYyAxMi4wCnN1cGVyIGNsb3NlIHVwIHNob3QKa2FybCBtYXJ4IGZ1bmtvIHBvcApiZWRyb29tIGJhY2tncm91bmQKb3J0aG9kb3ggbW9zYWljCmV4dHJlbWVsbHkgZGV0YWlsZWQKZGFsZSBlYXJuaGFyZHQganIKc3R1bm5pbmcgc2lnaHQKa2F0YW5hIHplcm8Kd2hpdGUgYmFja2dyb3VuZCB3aXRoIHNoYWRvd3MKaGlnaCBmb3YKY29uY2VwdCBhcmUKY3Jvd2R5CmVhdGluZyBidXJnZXJzCmRldGFpbGVkIGpld2VsbGVyeQpjbG9zZXVwIGNoYXJhY3RlciBwb3J0cmFpdAprYXRuaXNzIGV2ZXJkZWVuIHJvY2sgY2xpbWJpbmcKa2F3YWlpIGN1dGUgZG9nCmtlYW51IHJlYXZlcyByaWRpbmcgYSB1bmljb3JuCmtlYW51IHJlZXZlcyBhcyBpcm9uIG1hbgprZWFudSByZWV2ZXMgYXMgd29sdmVyaW5lCjNkIGNpbmVtYXRpYwpwaXhlbGF0ZWQgYXJ0CmtlYW51IHJlZXZleiBpbiBkaXNjbyBlbHlzaXVtCmtlZmthIGZmNgp0aGUgZ29kIG9mIGNoYW9zCmtlbiBrYW5la2kKa2VubmV0aCBjb3BlbGFuZAphZHZlcnRpc2luZyBwaG90b2dyYXBoCmtlcWluZyBmcm9tIGdlbnNoaW4gaW1wYWN0CmZyeQprZXJtaXQgdGhlIGZyb2cgYXMgdGhhbm9zCmtlcm1pdCB0aGUgZnJvZyBhcyBkYXJ0aCB2YWRlcgpzaXR0aW5nIG5lYXIgYSByaXZlcgprZXZpbiBvJ2xlYXJ5CmtoYWJpYgpwYWdlIGZyb20gaW5pdGlhbCBkIG1hbmdhCmtpYSBzb3VsCmtpa2kncyBkZWxpdmVyeSBzZXJ2aWNlCmtpa2kKY292ZXIgaW1hZ2UKYmxhbWUhIGJydXRhbGlzdCBhcmNoaXRlY3R1cmUKbG9va2luZyBzbXVnCmJ1dHRzaGFwZQpvdXRmaXQ6IGNvcApraW5nIG9mIHBpcmF0ZXMKc3R1bm5pbmcgdmlzdWFscyB3aXRoIHJ0eCBvbgp3aWxzb24gZmlzawpraW5vJ3Mgam91cm5leQpraW5vJ3Mgam91cm5leSAoMjAwMykKY29tbWlzc2lvbmVkCmtpcmlzYW1lIG1hcmlzYSBmcm9tIHRvdWhvdQpoeXBlcndhdmUgdmliZXMKcHJvZmlsZSBwZXJzcGVjdGl2ZQpraXRib2dhCmtpdGFuYSBmcm9tIG1vcnRhbCBrb21iYXQKa2l0YXZhCmZhbnRhc3kgY29sb3VycwpraXR0eS1iaXJkIGh5YnJpZApraXdpIGZydWl0CmtsYXVzIHNjaHdhYiBlYXRpbmcgYnVncwp3YXJ0b3JuIGVudmlyb25tZW50CmZpc3RmaWdodGluZwprbmlnaHQgaW4gYXJtb3IKdmVjdG9yIGxpbmUKZnV0dXJpc3RpYyBhc3Ryb25hdXQKaHVtYW4gZmFjaWFsIGZlYXR1cmVzCmtvYWxhIHBsYXlpbmcgYSBndWl0YXIKdW5zcGxhc2ggcGhvdG8gY29udGVzdCB3aW5uZXIKa29kYWsgaGllIGluZnJhcmVkIGZpbG0Kc29mdCBjb2xvdXJzIHNjaGVtZQpob3cgcHJlLXJhcGhhZWxpdGVzCnRoZSBoYWlyIGZsb2F0cyBvbiB0aGUgd2F0ZXIKZ29sZC1zaG90CndoaXRlb3V0IGV5ZXMKcHJpc29uIHNjZW5lCnRlYSBjZXJlbW9ueSBzY2VuZQp0aGVhdGVyIGRhbmNlIHNjZW5lCmZyaWVuZHMgc2NlbmUKa29yZWFuIHdhcgprb3JyYSBmcm9tIHRoZSBsZWdlbmQgb2Yga29ycmEKc2VkbGVjIG9zc3VhcnkKa290ZWdhd2EgeXVpCm9yYW5nZSB0b25lCndhcm0gdG9uZWQgZ3JhZGllbnQgYmFja2dyb3VuZApncml0dHkgaW1hZ2UKa3Jpc3RlbiBiZWxsIGFzIGEgZ3JlZWsgZ29kZGVzcwprcnp5c3p0b2Yga29ub25vd2ljego0ayBmYW50YXN5IGFydAprdXJkaXNoIHNvbGRpZXIKd2l0aCBiYWNrZHJvcCBvZiBuYXR1cmFsIGxpZ2h0Cm1vdmllIGluc3BpcmVkCnJldHJvIHZpbnRhZ2UgYXJ0Cmt2b3RoZSBmcm9tIG5hbWUgb2YgdGhlIHdpbmQKbGdidCBmbGFnCnBvcGUgc3VycmVuZGVycwpiYWNrZ3JvdW5kIGNhbm9uCmxhIGNhdHJpbmEKbGFkYQptaWNyb3Njb3BpYyBkZXRhaWwKZ3JpdHR5IGZpbG0gbm9pcgpsYWR5IGdhZ2EgYXMgaGFybGV5IHF1ZWVuCmxhZHkgZ2FnYSBpcyBoYXJsZXkgcXVpbm4KZHJlc3NlZCBpbiBhIGJlYXV0aWZ1bCB3aGl0ZQpsYWR5IGtpbWEKaGFsZmluZwpkYXJrIGF1YnVybiBoYWlyCmxhZHkgb2YgdGhlIGVudHJvcHkKc3VtbWVyIHBhbGV0dGUKbGFsaXNhIG1hbm9iYWwKaHlwZXItcmVhbGlzdGljIHBob3RvZ3JhcGh5CnRleHRib29rIGlsbHVzdHJhdGlvbiBpbiBjbG9sb3VyCmxhbmNlIHJlZGRpY2sKaW5zYW5lbHkgcmVhbGlzdGljCnRoZSBzZWEgc2VlbiBiZWhpbmQgdGhlIGNpdHkKaW1wZXJpYWwgY2l0eSBpbiB0aGUgZGlzdGFuY2UKYmF0dGxlIGZvciB3aGl0ZXJ1bgpsYW5kIHJvdmVyIGRlZmVuZGVyCnRoZSBkYXJrIHN1bgpkb3duLXRvd24Kc2F0dXJuIHYKd2hpdGUgZGVzZXJ0CnJpc2Ugb2YgdGhlIHRvbWIgcmFpZGVyCmxhcmEgY3JvZnQgZWF0aW5nIGR1cmlhbgpmb2N1cyBvbiBnaWFudCB0b3J0b2lzZQpsYXNlciB0dXJyZXQKcGVubmVkIGluIGN5YW4gaW5rCnN1cnJlYWwgYW5kIGZhbnRhc3kgYXJ0Cmxhc3Qgc2VsZmllIGV2ZXIgdGFrZW4KbGF1Z2hpbmcgYmVhciBtdXNpY2lhbgpsYXVnaGluZyBlbW9qaQphZHZlbnR1cmluZwpsYXVuY2ggb2YgYSByb2NrZXQKYmVya2V5CmJsb25kZSBmbG93aW5nIGhhaXIKYXJ0IHN0eWxlIG9mIGpvaG4gYmxhbmNoZQpsZWQgemVwcGVsaW4KbGVlIGt1YW4geWV3CmxlZ28gY2l0eQo4ayBoaWRnIGRlZmluaXRpb24KbGVnb2xhcyBmcm9tIGxvcmQgb2YgdGhlIHJpbmdzCmxlZ29sYXMKc3dhbXAgZm9yZXN0Cmxlb25hcmRvIGRpY2FwcmlvIG1lbWUKc3VycmVhbCBjb21wb3NpdGlvbgpyYWluIGFlc3RoZXRpYwp2aW55bCBjb3ZlciBmcm9tIDE5ODgKcmF5cyBvZiB2b2x1bWV0cmljIGxpZ2h0CnNtb2tlIHRlbmRyaWxzCnNhbG1vbiBraG9zaHJvbwo4ayA1MG1tIGlzbyAxMApsaWx5IGFsbGVuCmhvbGRpbmcgaGFuZGd1bgpleHBlcmltZW50IGluIHZpc3VhbCBhcnQKY29sb3JpemVkIGJhY2tncm91bmQKdHYgc2V0CnBhcGVyIHF1aWxsaW5nCnJhcCBhbGJ1bSBjb3ZlciBhcnQKc3F1aXNobWFsbG93CnRyaXBweSB2aXN1YWxzCnBlcmZ1bWUgYm90dGxlCm9mZmljZS90aHJpZnQgc3RvcmUvc29jaWFsIGhhbGwKcG9vciBmbHVvcmVzY2VudCBsaWdodGluZwpnbGFzZ293Cm1vdmllIHN0aWxscyBwaG90b2dyYXBoeQpsaW5hCmRpc3NvbHZpbmcgaW50byB0aGUgYWlyCnl1c3VrZSBuYWthbm8KbGludXMgc2ViYXN0aWFuCmxpbnVzIHRlY2ggdGlwcwpsaW51cyBmcm9tIGxpbnVzdGVjaHRpcHMKdHJhZGluZyBzdG9ja3MKcm91bmQgYW5kIHdlbGwtZHJhd24gZXllcwptb3V0aCBpcyBzaW1wbGUgYW5kIHBsZWFzYW50CmVhcnMgYXJlIGxpc3RlbmluZwpib2R5IGlzIHN0cm9uZyBhbmQgdXByaWdodApwYXdzIGZpcm0gdG8gdGhlIGdyb3VuZAp0YWlsIHNsaWdodGx5IHdhdnkKbGlvbiB3aXRoIGNyb3duCmFzIHBob3RvZ3JhcGgKYnVybmluZyBjaXR5IGluIGJhY2tncm91bmQKb2ZmaWNpYWwgc2ltcHNvbnMgbW92aWUgYXJ0d29yawpiYWxhbmNlZCBjb2xvcnMgaGQKZGFyayBhbWJpZW50IGJlYXV0aWZ1bApjaW5lbWF0aWMgbGlnaHRzIGh5cGVyZGV0YWlsZWQKd2VhcnMgYnJvd24gYm9vdHMKY3VkZGxpbmcgaGVyIGdyZW1saW5ncwptb25ldCBwYWludGVkCmNwMjA3NwpsaXR0bGVmb290CnNwYWNlc2hpcCBsYW5kaW5nCmxsYW1hIGFuZ2VsIG9mIHN1bnJpc2UKbGxhbWEgYWxsIHRoZSB3YXkKbW91bnRhaW4gc2NlbmUKbWFzdGVycGllY2UgYW50aHJvIHBvcnRyYWl0CmxvZmkgYmlvc2hvY2sgc3RlYW1wdW5rIHBvcnRyYWl0CnNpZGV3YXlzIGdsYW5jZQpzd2ltc3VpdCBtb2RlbApyZWNvZ25pemFibGUKbG9raSBwb3J0cmFpdApsb2x0aApsb21vIHNhbHRhZG8KbG9uZG9uIHVuZGVyZ3JvdW5kIHR1YmUgc3RhdGlvbgpsb25kb24gYXQgbmlnaHQKbG9uZG9uIGJ1cwp0cmFkaXRpb25hbCBvaWwgcGFpbnRpbmcKdGhlIHRoYW1lcyBpcyBkcnkKYXBvY2FseXB0aWMgZnV0dXJlCmJsaXNzZnVsIGxhbmRzY2FwZQpsb25nIGJvaQpjb25jZXJ0IGxpZ2h0cwpub2lyZSBtb29keSBzY2VuZQphIGdyZWVuIGdvbGQgZm9yZXN0IGluIGphcGFuCmxvb2tpbmcgZG93biBhdCB0aGUgZm9yZXN0IGZsb29yCmluIHRoZSByZWR3b29kIGZvcmVzdApsb29uZwpjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQKY2hlZWt5IGRldmlsCmxvdHVzIGZsb3JhbCBjcm93biBnaXJsCnBpbmsgbG90dXMgcXVlZW4KYnVyc3Rpbmcgd2l0aCBwb3NpdGl2ZSBlbmVyZ3kKbG92ZSBkZWF0aCArIHJvYm90cwpkZW5zZSByYWluCmRldGFpbGVkIGxpZ2h0aW5nIGFuZCB0aHVuZGVyCnNtYWxsIHJpdmVyIG9uIHRoZSBncm91bmQKdmFyaW91cyBhbmdsZXMKbG93ZXIgYmFjayBvZiBhIGJlYXV0aWZ1bCB3b21hbgpsdWNpbmEgZnJvbSBmaXJlIGVtYmxlbQppbi1nYW1lIDNkIG1vZGVsCndoaXRlIHBvZXQgc2hpcnQKbHVmZnkgKG9uZSBwaWVjZQoxOTk3ICkKbHVmZnkgZHJlc3NlZCBhcyBuYXJ1dG8KbHVmZnkgZnJvbSBvbmUgcGllY2UKbHVmZnkgZ2VhciA1CnN5bW1ldHJpY2FsIGZyYW1pbmcKYmxhZGUgcnVubmVyIDE5ODIKbHVuYXIgZ29kZGVzcwpseW54CnZlcnkgc2NhcnkgcGhvdG8KbWMgZXNjaGVyIHBhaW50aW5nCmRhbiBmbGF2aW4KZG91ZyB3aGVlbGVyCnByb2NlZHVyYWwgdGV4dHVyZXMKbWtiaGQgYXMgaXJvbiBtYW4KZWF0aW5nIGEgZG9udXQKcmF0IGZpbmsgc3R5bGUKdWx0cmEgaGkgcmVzb2x1dGlvbiBwaWN0dXJlCm1hY2hvIG1hbiByYW5keSBzYXZhZ2UKY29udGVtcG9yYXJ5IGFydCBzdHlsZQpoaWdoIGRldGFpbGVkIHByaW50CmhvbGRpbmcgYSB0ZWRkeSBiZWFyCm1hY3JvbiB3aXRoIGFmcm8gaGFpcgp2aXNjb3VzIHJhaW5ib3cgcGFpbnQKcmFpbmJvdyBiZwpuaWNrIGxhbmQKbWFkb25uYSBwb3J0cmFpdAptYWRvdHN1a2kKZGVlcCBzaGFkb3dzIGhkCm1hZ2ljIHBvcnRhbCB0byBhbm90aGVyIHdvcmxkCmVsZHJhemkKbWFnaWM6IHRoZSBnYXRoZXJpbmcKZmFudGFzeSBkJmQgbWFnaWMgaXRlbQo2NCBiaXQgcmVhbGlzdGljIHBhaW50aW5nCmx1c2ggZ3JlZW4gZGVlcCBmb3Jlc3QKZGFya2VzdCBkdW5nZW9uIHN0eWxlCm1hZ2ljYWwgb2NlYW4KZ3JlYXQgZGlnaXRhbCBhcnQgd2l0aCBkZXRhaWxzCnB0ZXJvZGFjdHlsCm1hZ251cyBjYXJsc2VuCnRoZSBzZXZlbnRoIHNlYWwKYXVyb3JhY29yZQpmYXQgY2xvdWQKaGVhZGxpZ2h0cyB0dXJuZWQgb24Kc2hvdCBvbiByZWQgY2FtZXJhCm1haG11ZCBiYXJ6YW5qaQphaSByZXNlYXJjaGVyCmluayB1bmRlciBkcmF3aW5nCnNhdHVyYXRlZCB3YXRlcmNvbG9yCm1hamVzdGljIHNhaW50IHdvbWFuCm1hbGUgYmFyYmFyaWFuCmhlYWQgaW4gcHJvZmlsZQpoaWdoIGNvbmNlcHQgc2NpLWZpCmdxIG1hZ2F6aW5lIGNvdmVyCmJvdWd1ZXJlYXUuIGZ1bGwtc2hvdAptYWxldm9sZW50IHNocmluZQptYWxsYXJkIChhbmFzIHBsYXR5cmh5bmNob3MpCm1hbiBhbmQgd29tYW4gaW4gbG92ZQptYW4gYW5kIHdvbWFuIHdhbGtpbmcgdG9nZXRoZXIKbGF0ZSBuaWdodCBtZWxhbmNob2xpYyBwaG90bwphd2FyZCB3aW5uaW5nIG1vdmllIHN0aWxsCm1hbiBpbiBoaXMgNDBzCm1hbiBtdXRhdGluZyB0byB6b21iaWUKbWFuIHByb3Bvc2luZyBoaXMgZ2lybGZyaWVuZAotbiAyCihzeW50aHdhdmUpCmZ1bGx5IHZpc2libGUKb3JuYXRlIGZpbGlncmVlIGFybW9yCmthbWkKaGFydmVzdCBmYWxsIHZpYnJhbmNlCnN0eWxlIG9mIGluawppbiBhbiBhYmFuZG9uZWQgd2FyZWhvdXNlCm1hbm4KbWFueSBnaWFudCBleWUgYmFsbHMKb24gYSBmb290YmFsbCBmaWVsZAp0cm9waWNhbCBsb2NhdGlvbgpmb3Jlc3RzLiBtYXAtc3R5bGUgc2t5cmltCmRyYXdpbmcgb24gYSBwYXJjaG1lbnQKbjQKbWFyYSBqYWRlCm1hcmJsZSBtYXRlcmlhbAptYW5kZWxidWxiIGZsb3dlcnMgYW5kIHRyZWVzCm1vbmEgbGlzYSB3aXRoIGEgbXVzdGFjaGUKbWFyY28gdGhlIHBob2VuaXgKbWFyZ290IHJvYmJpZSBhcyBjYXQgd29tYW4KbWFyZ290IHJvYmJpZSBhcyBwcmluY2VzcyBsZWlhCmRlZmluZWQgZXllcwpwaW51cCBnaXJsCmVkd2luIGxvbmdzZGVuIGxvbmcKbWVjaGFuaWNhbCByb2JvdCBib2R5CnNwYW5pc2gKbWFyaWp1YW5hIGxlYWYKa29uaWNhIG1pbm9sdGEKd2hpdGUgdW5pY29ybgpzbGlnaHRseSBkZXNhdHVyYXRlZCBjb2xvcnMKbWFyaW8gYXMgYSByZWFsIHBlcnNvbgptYXJpbyBhcyBhIHNvbGRpZXIKbWFyaW8gYXMgYSB3b3JsZCB3YXIgaSBzb2xkaWVyCmNyZWVweSBhbmQgdW5zZXR0bGluZwptYXJrIHR3YWluIGFzIGh1Y2tsZWJlcnJ5IGZpbm4KZGVlcGZha2UKcGlja2xlCm1hcmsgenVja2VyYmVyZyBhcyBhIGh1bWFuCm1hcmsgenVja2VyYmVyZyBpbiBndGEgdgptYXJrIHp1Y2tlcmJlcmcgcGxheXMgdGVybWluYXRvcgptYXJsb24gYnJhbmRvIGFzIHRoZSBnb2RmYXRoZXIKbWtiaGQKbWFycmFrZWNoCjNkIHBhcmFsbGF4IHZpZXcgZWZmZWN0Cm1hcnRpYW4gY2l0eQpwcmVzaWRlbnQKaW4gdmFsaGFsbGEKbWFzdGVyIGNoaWVmIGluIGN5YmVycHVuayBjaXR5Cm1hc3RlciB5b2RhCm1hc3RlciBvZiBydWluCndvcmxkIGJvc3Mga2l0dGVuCndpdGggbGlnaHQtc2FiZXIKbWFzdGVycGllY2UhIHBvcnRyYWl0IG9mIGFyd2VuCm1hdGhlbWF0aWNzIHVuaWZ5aW5nIHNjaWVuY2UKbWF0dCBiZXJyeQpwcm9tb3Rpb24gYXJ0d29yawpsZWdlbmRzIG9mIHRvbW9ycm93Cmlzb21ldHJpYyAzZCByZW5kZXIKbWF0dGVvIHNhbHZpbmkKdmVyc2FjZQptYXlhIGZleSBmcm9tIGFjZSBhdHRvcm5leQpibHVlIHdhbGxzCmNvY2EgY29sYSBib3R0bGUKbWNkb25hbGRzIHJlc3RhdXJhbnQKbWlsa3NoYWtlCmhhdmluZyBhIHRpbWUgb2Ygb3VyIHVuLWxpZmUKbWVjY2EKbWVjaGFuaWNhbCBrZXlib2FyZAptZWNoYW5pY2FsIHN0eWxlCmdpYW50IGNsb2NrCmZsb3VyaXNoaW5nIG5hdHVyZQpsYWtlcyBhbmQgd2F0ZXJmYWxscwpyYW5kb20gYW5kIGRyYW1hdGljIHNjZW5lCnNwcmluZyB3aW50ZXIgbmF0dXJlIG1lbHRlZCBzbm93Cm1lZGlldmFsIHBob3RvZ3JhcGgKbWVkaWV2YWwgd2FycmlvcgpjcmVhdGl2ZSBsaWdodGluZwpzaGFydCBmb2N1cwptZWRpdGF0aW9ucyBvbiBtb2xvY2gKc3BpZGVybWFuIGluIHRoZSBtb3NocGl0CnBpZXJjaW5ncyBhbmQgYSBtb2hhd2sKZml0bmVzcyBtb2RlbApkYW55IGRldml0bwptZWdhbiBmb3ggYXMgYSBtY2RvbmFsZHMgY2FzaGllcgpmbGFzaGluZyBjb25jZXJ0IGxpZ2h0cwpyZXZvbHV0aW9uYXJ5Cm1lbHRpbmcgaWNlIGN1YmUKZnJvbSBibGFkZSBydW5uZXIgMjA0OSAoMjAxNykKYmxhY2sgYW5kIGdyZWVuIHNjaGVtZQpyYWluIHNlbnNvcgpoZWFkbGlnaHQgd2FzaGVyCnRlbGVwaG9uZQptZXJjeSBmcm9tIG92ZXJ3YXRjaCBnYW1lICgyMDE2KQppbiBnYW1lIGVuZ2luZQpibGFjayBob3JucwphdmFsb24KbWFnaWMgc3RhcgptZXNzaSBhcyBhIHZpa2luZwptZXNzaSBhcyBjeWJvcmcKbWV0ZW9yIGltcGFjdCBiZWhpbmQgYSBkaW5vc2F1cgpkYW5pc2ggZmxhZwpibGFjayBhbmQgd2hpdGUgcGljdHVyZQpodW1hbiBwaHlzaXF1ZSBzdHVkeQptaWNoYWVsIGphY2tzb24gcG9ydHJhaXQKbWljaGFlbF9qYWNrc29uCm1pY2hhZWwgbWNkb25hbGQKY29taWMgYm9vayBhcnRpc3QgbW9lYml1cwpjb21pYyBib29rIGFyemFjaCBzdHlsZQpmbHlpbmcgcGlnCm1pY2sgamFnZ2VyCnN1cHBvcnRpdmUKY3JhY2sgcGlwZQptYXN0ZXJwaWVjZSBwaG90b2dyYXBoCmxvdWlzIHhpdgptaWNrZXkgbW91c2UgaXMgdGhvcgptaWNyb3NvZnQgd2luZG93cyBsb2dvCjE5ODAgbWFuZ2EKbWlkLXNob3QgcG9ydHJhaXQgb2YgYSBiZWF1dGlmdWwKMzAteWVhci1vbGQgZnJlbmNoIHdvbWFuCm1pa2Ega3VyYWkgZGVtb24KbWlrdWRheW8Kc3BpZGVybWFuIGFzIGVsZWN0cm8Kc3RpbGwgZnJvbSBzdHJhbmdlciB0aGluZ3MgbW92aWUKbWlsYSBrdW5pcyBhcyBkYWVuZXJ5cyB0YXJnYXJ5ZW4KbWlsb8WhIHplbWFuCm1pbWlreXUKY29sbGFnZSBhcnQgYmFja2dyb3VuZAptaW5kIGZsYXllcnMKbWluZWNyYWZ0IHNraW4KbWluZWNyYWZ0IGNyZWVwZXIgaW4gcmVhbCBsaWZlCm1pbmVjcmFmdCBnYW1lcGxheQptaW5lY3JhZnQgbGFuZHNjYXBlCiN0cmVuZGluZwptaW5lY3JhZnQgd2F0Y2h0b3dlciBidWlsZHMKbmFnYXRvcm8KZ2xvd2luZyBsYW1wcwp3aGl0ZSBsIHNoYXBlZCBjb3VjaAp3b29kZW4gY29mZmVlIHRhYmxlCmJpZyBjaGFuZGVsaWVyCmZsb29kIGxpZ2h0aW5nCm1pbmlvbnMgc2NyZWFtaW5nCmhvbGRpbmcgYSBzbmFrZQphbmR5IHdvcmhvbAptaW5vdGF1ciB3YXJyaW9yCm1pcmFpIG5pa2tpCnBvc2luZyB3aXRoIGEgc3dvcmQKbWlycm9yIHdvcmxkCm91dHNpZGUgdGhlIHNpbXVsYXRpb24Kc3R5bGUgb2YgaGllcm9ueW11cyBib3NjaApnYXMgbGFudGVybnMKbWlzdHkgZ2hvc3QgdG93bgptaXp1dHN1bmUKbW8gc2FsYWgKbW9haSBzdGF0dWUgZ2l2aW5nIGEgdGVkIHRhbGsKbW9iIHBzeWNobyAxMDAKYW1lcmljYW4gZmxhZyBpbiBiYWNrZ3JvdW5kCm1vZGVybiBuZXcgeW9yawpib25zYWkgdHJlZSBvbiByb29mCnJlZCBzd2VhdGVyIGFuZCBncmF5IHBhbnRzCmFwaXBoZW55CmNsZW5jaGluZwpicmlnaHQgbGltaXRlZCBjb2xvciBwYWxldHRlCnRydXN0d29ydGh5IGV5ZXMKaGFwcHkgZmFjaWFsIGV4cHJlc3Npb24Kd2hvc2UgbWluZCBpcyBwdXJlIG1hY2hpbmVyeQptb20ncyBzcGFnaGV0dGkKbW9tCm1vbW9zaGlraSDFjXRzdXRzdWtpCm1vbmEgbGlzYSBhcyBhIHJlYWwgcGVyc29uCmVlcmkKcnVzc2lhbiBhY2FkZW1pYyBwYWludGluZwphcmNoaXRlY3R1cmFsIHBhaW50aW5nCmhhcnNoIGNvbnRyYXN0cwpleHBlcmltZW50IGluIGxhYm9yYXRvcnkKbW9ua2V5IHJlYWRpbmcgYSBib29rCjIwMDYgcGhvdG9ncmFwaApqZWFuLWhvbm9yZSBmcmFnb25hcmQKbW9vbiBjcmFzaCBpbnRvIGVhcnRoCm1vb25saWdodCBuaWdodApjaW5lbWF0aWMgYWN0aW9uCm1vcmdhbiBmcmVlbWFuIGFzIGdvcmRvbiBmcmVlbWFuCmhldiBzdWl0CmNvbmUgc2hhcGVkCmFycm93IHNoYXBlZApzdHVubmluZy1kZXNpZ24KbW9ycmlnYW4Kc2V2aWxsZQptb3Njb3cga3JlbWxpbiBpcyBvbiBmaXJlCm1vc2NvdyBrcmVtbGluCmRlZXJzIGRyaW5raW5nIHdhdGVyIGluIHRoZSBsYWtlCmJpdGluZwpqdW1wc3VpdHMKdGV4dCBzYXlzOiBzY2h3YXJ6bGljaHQKaW5kaWUgZmlsbQptaW5pb25zIGRpZ2ltb24KbW92aWUgcG9zdGVyIG9mIHRoZSBwdW5pYyB3YXJzCmRldGFpbGVkIHNwYWNlY3JhZnQKbW92aWUgc3RpbGwgZnJvbSB0aGUgbWF0cml4Cm1vdmllIHN0aWxsIG9mIGEgc25hcmxpbmcKbW92aWUgc3RpbGwgb2YgYSB0aXJlZAptciBiZWFuIGFzIHRoYW5vcwptciBiZWFuIGluIHRoZSBtYXRyaXgKbXIga3JhYnMKbXIgc2FuZG1hbgpwYXVsIGJyYXNvbgptci4gYmVhbiBkZXBpY3RlZCBhcyBhIG11cHBldApsb29rcyBhdCB0aGUgYmlnIGV4cGxvc2lvbgptcnMgYmVhbgptdC4gZnVqaQptdWdzaG90IG9mIGRhcnRoIHZhZGVyCm1vdmllIHNldHVwCm11cHBldHMgaW4gbWFkIG1heAptdXBwZXRzIG1vdmllCmF3YXJkIHdpbm5pbmcgY2luZW1hdGljCm11cmRvYyBuaWNjYWxzCnJvc3dlbGwgYWlyIGJhc2UKMTk4NyBwdWxwIGFydAp3ZWFyaW5nIGJhcmJhcmlhbiBjYXZlbWFuIHBlbHQKdGlnZXIgcGVsdApodW1hbi1za2luIHBlbHQKZWxlY3RyaWNpdHkgYXVyYQpiYXR0bGUgc2NhcnMgYWNyb3NzIGJvZHkKYmFyYmFyaWFuIHBlbHQKbXVzY3VsYXIgdWx0cmF2aW9sZW50IHdvbWFuCmhlYXZ5IGNoZXN0cGxhdGUgYXJtb3IKaG9sZGluZyBqYWdnZWQgc2NpbWl0YXIKcHJvZmVzc2lvbmFsIGNnaQptdXRhaGFyIGxhdWdoaW5nCm15IGZhdm9yaXRlIGZyaWVuZAp0aGUgYWZyaWNhbiBwYWludGVkIGRvZwphcyBhIG11cHBldApteSBuZWlnYm9yIHRvdG9ybwphdCB0aGUgc3Vuc2V0Cm15c2VsZgpjb3VydGVzeSBvZiBtYmFyaQp3aWxsaWFtIGJsYWtlIGFuZCByZXBpbgpteXN0aWNhbCBhbnViaXMgdmFsa3lyaWUKbXlzdGljYWwgYXRsYW50ZWFuIHZhbGt5cmllCm15dGhvbG9naWNhbCBtYXAKdm9sdW1ldHJpYyBsaWdodGluZyA0awptw7pzZWNhIGlsbGlsCm5hcwpuYmEgc3R5bGUgYnVsbGRvZyBtYXNjb3QKbmlnaHQgc2VhCm5hY2hvcwpuYWdpdG8ga29tYWVkYSBmcm9tIGRhbmdhbnJvbnBhCm5hbWkgb25lIHBpZWNlCmJlYXV0aWZ1bCBibHVlIGdsb3dpbmcgZXllcwpuaW5qYSB0dXJ0bGUgZWF0aW5nIHBpenphCm5hcnV0byBpbiBndGEgdgpuYXRhbGllIHBvcnRtYW4gYXMgYSBnb2RkZXNzCm5hdGhhbGllIGVtbWFudWVsCmluIGFuIGFuaW1lCm5lY3JvbWFuY2VyIHNvcmNlcmVzcwpuZWQgZmxhbmRlcnMKbmVmZXJwaXRvdQpuZWlsIHlvdW5nIGRlc2lnbgrinI/vuI/wn46oCmhvdGRvZ3MKbmVvIGZyb20gbWF0cml4CmZ1bGwgYm9keSBwb3J0cmFpdCBwYWludGluZwpjaGFyYWN0ZXIgY29uY2VwdCBhcnQgcG9ydHJhaXQKbG9va2luZyBvdmVyIGNpdHkKbmVyZiBvciBub3RoaW5nCmNhdCB0YWlsCm5ldXRyYWwgbWlsayBob3RlbApuZXcgcG9rZW1vbgpuZXcgeW9yayBjaXR5IGF0IG5pZ2h0CmZpcmVzIGJ1cm5pbmcgZXZlcnl3aGVyZQpuZXcgeW9yayBjaXR5IGluIHRoZSB5ZWFyIDIxMDAKbmV3IHlvcmsgY2l0eSBza3lsaW5lCm5ldyB5b3JrZXIgY2FydG9vbgo4ayBoZCByZXNvbHV0aW9u4oCdCnRyZWUgZmVybnMKbmV3IGVtb2ppIG9mIGJpdGluZyB5b3VyIGxpcApwdXJwbGUgYW5kIHJlZCBjb2xvcnMKbmV3dG9uJ3MgY3JhZGxlCm5leW1hciBpbiBmb3J0bml0ZQpuZXltYXIgaW4gZ3RhIHYKc2NpLWZpIG1vdmllIGNpbmVtYXRpYyBmcmFtZQpob3N0IG9mIHRoZSBuaWdodG1hcmUKbmljaG9sYXMgY2FnZSBhcyBtb25rZXkgZCBsdWZmeQpuaWNob2xhcwp0aGUgY293Ym95IGluIHRoZSB3ZWlyZCB3ZXN0CnJpZGluZyBpbiB0aGUgdG93biBvZiBkb29tCmJlYXV0aWZ1bCB3YXRlcgp3ZWFyaW5nIHByZXNpZGVudGlhbCBiYW5kCnN1cGVyIGRldGFpbGVkIHBpY3R1cmUKbmljb2wgYm9sYXMKaXQncyBtb3JiaW4gdGltZQpibHVlIHN3aXJsaW5nIGRyZXNzCm5pY29sYXMgY2FnZSBhcyBhbiBhbmRyb2lkCnRocmVlIGV5ZXMKbmljb2xhcyBjYWdlIG1vc3N5IHN0YXR1ZQpncmVlbiBtb3NzIGFsbCBvdmVyCnN0aWxsIGZyb20gdGhlIGF2ZW5nZXJzCmRydWdzdG9yZQphZ29uaXppbmcKbWFuIHNjcmVhbWluZwpuaWtlIGFpciBtYXgKbmlrb2xhIGpva2ljIGFzIHRoZSBqb2tlcgp0ZXNsYSBsb2dvIG9uIGNoZXN0Cmh5cGVycmVhbGlzbSBwaG90bwpuaW5qYSBqZXN1cwpuaXNoaW1peWEgc2hvdWtvCm1vYnN0ZXIKYmxhY2sgZm9yZXN0Cm5vIG1hbidzIHNreSByaWdodGVvdXMgYXVkaXRvcgp3ZSdyZSBhbGwgdmVyeSB0aXJlZApub2N0dXJuZSBmcm9tIGxlYWd1ZSBvZiBsZWdlbmRzCm5vbmFnb24gaW5maW5pdHkKbGltaW5hbCBzcGFjZSBoYWxsd2F5Cm5vcndlZ2lhbiBsYW5kc2NhcGUKMTk1MHMgcGhvdG9ncmFwaApub3N0YWxnaWEgZ3V5IGFuZCBzbWFsbCBjcmVhdHVyZQpzdG9ybSBhcnJpdmluZwpub3Qgb2Z0ZW4Kbm92YQpyaWNoYXJkIHJpZGVyCmhkIG1hc3RlcnBpZWNlCnpvbWJpZSBnaG91bHMKcmVuZGVyZWQgaW4gaGlnaCBvY3RhbmUKd2luZCBjaGltZXMKcmFmdCBnYW1lcGxheQpudWthIGNvbGEKdGhlIGNyYXdsaW5nIGNoYW9zCnNldCBpbiB0aGUgd29ybGQgb2YgZ3VpbGR3YXJzMgpvJ25laWxsIGN5bGluZGVyIGNvbG9ueQpyYXl0cmFjZWQgaGlnaGxpZ2h0cwpvYmFtbmEKc2tldGNoIGJvb2sKb2JhbWEgYXMgYmF0bWFuCm9iYW1hIGFzIGEgc2FtdXJhaQpvYmFtYSBpbiBza3lyaW0KZmxhbWVzIGFyZSBidXJuaW5nIGJlaGluZCBvYmFtYQp0aGUgZHJvbmUga2luZwpvYnVuZ2EKbW9vZHkgYW5kIGF0bW9zcGhlcmljCm9jdGFuZSByZW5kZXIgMTZrCnJlYWxpc3RpYyBzY2hvb2xnaXJsCm9jdG9wdXMgZ29kZGVzcwpvY3Rvcm9rCnBlcmhhcHMKMTg0MAoxODcyCmJhbGQgaGVhZCBhbmQgbWVuYWNpbmcgbG9vawpkZXRhaWxlZCBhbmQgY29uY2lzZQpvaWwgcGFpbnRpbmcgb2YgY2F0IHdpdGNoCm9pbCBwYWludGluZyBvZiBjYXQKcmVkIG92YWwgdHVyYmFuCnJlYWxpc3RpYyBleHRyZW1lbHkgZGV0YWlsZWQKYSB0aWFyYSB3aXRoIGVtZXJhbGRzCmR5bmFtaWMgcG9ydHJhaXQgc3R5bGUKb2theQpvbGQgcGlyYXRlIHNoaXAKb2xkIHNjaG9vbCBydW5lc2NhcGUKb2xkIHdlc3QgdG93bgpwYXJ0aWFsbHkgY292ZXJlZCB3aXRoIGR1c3QKcm9jb2NvIGJhcm9xdWUKcG9ydHJhaXQuIGhpZ2ggZGV0YWlsCmV4YWN0bHkgNSBmaW5nZXJzCm9tZW4gZnJvbSB2YWxvcmFudApvcmMgb24gdmluZXMKb3JjIGZ1c2VkIHdpdGggdmluZXMKb3JjIG1lcmdlZCB3aXRoIHZpbmVzCm9wcG9zaXRlIHRoZSBsaWZ0LXNoYWZ0Cm9uIHRvcCBvZiBpdApwb3N0IGFwb2NhbHlwdGljIGF0bW9zcGhlcmUKd2VsbCBkZWZpbmVkCm9uZSBoaXQgd29uZGVybGFuZApkZXNpcmFibGUKb25lIGRheQpmYWNpbmcgb2ZmIGluIGEgZHVlbApiYXJvcXVlIHBhaW50aW5nLiBzdGFyIGxpdCBza3kKc3Rvcm15IHdoZWF0ZXIKb25lIHRoaW5nCm9wYWxlc2NlbnQgcGFsYWNlCmFydHN0YXRpb24uIHZpZXcgZnJvbSBzcGFjZQpvcmMgbG9va2luZyBpbnRvIHRoZSBjYW1lcmEKbGVhdGhlciBmdXIgamFja2V0Cm9yYyBtYWxlIHJlYWRpZXMgaGlzIHJpZmxlCm9yZWdvbiB0cmFpbApwaW5rIHdhdGVyIGluIGEgbGFyZ2UgYmF0aApiZWF1dGlmdWwgd2l6YXJkCm9yd2VsbGlhbiBzdHlsZQpvdGhlcndvcmRseSBmdXR1cmlzdGljIGNpdHkKc3VwZXIgcmVhbGlzdGljIGZhY2lhbCBmZWF0dXJlcwpvdHRvIGRpeCBhbmQgcnlvaGVpIGhhc2UKc3RpbGwgY2FwdHVyZQpyYXlzIG9mIGdvZCBzaGluaW5nIGZyb20gYWJvdmUKb3Zlcmxvb2tpbmcgYSBtb2Rlcm4gY2l0eQpvdmVyd2F0Y2ggY2hhcmFjdGVyIGNvbmNlcHQgYXJ0Cm93bCB3aXphcmQKYXRtb3NwaGVyaWMgcGFpbnRpbmcKb3lhc3VtaSBwdW5wdW4KcG92IG9mIGFuIGFudApwczEgZ2FtZSBsYW5kc2NhcGUKcGFjYWwgdm90YW4KdHdpc3RlZCBmbHV4CndoaXRlIGFuZCBwYWxlIGJsdWUgdG9uZWQKYnJva2VuLXN0YWluZWQtZ2xhc3MKaG9saSBmZXN0aXZhbCBvZiByaWNoIGNvbG9yCmRpYXBoYW5vdXMgdHJhbnNsdWNlbnQgY2xvdGgKaGVyIGhhbmQgaXMgb24gaGVyIHdhaXN0CnBveW8KcGFpbnRpbmcgb2YgdGhlIGJlYXRsZXMKY29uY2VwdCBwaG90b3NldAprYXRzdXNoaWthIGhva3VzYWkgc3R5bGUKbG9uZyBibG9uZCBkcmlsbCBjdXJscwpkZWxpY2F0ZSBhbmRyb2d5bm91cyBwcmluY2UKZXhoaWJpdGVkIGF0IHRoZSBicml0aXNoIG11c2V1bQpwYWxhY2UgZmxvYXRpbmcgaW4gaGVhdmVuCmJlYWNoIGFuZCB0cm9waWNhbCB2ZWdldGF0aW9uCmJsYWNrIGhpbWUgY3V0IGhhaXIKZ290aGljIGphY2tldApwYW0gZnJvbSB0aGUgb2ZmaWNlCmNvc3kgZW5jaGFudGVkIHNjZW5lCm1hc3NpdmUgY29uc3RydWN0aW9uIG1hY2hpbmVzCm1peGVkIG1lZGlhIHN0eWxlIGlsbHVzdHJhdGlvbgp3YXJlaG91c2VzCnN0ZWFtcHVuayBtb3RvcmN5Y2xlCmZ1bGwgb2Ygc2t5c2NyYXBwZXJzCnBhcGEgam9obiBlYXRpbmcgNTAgcGl6emFzIGEgZGF5CnN0eWxlIG9mIGpvaG4gaG93ZQpwYXJhZGlzZSBjaXR5CmRyb3VnaHQKcGFyZW50cyB3YXRjaGluZwpwYXJpc2lhbiBzdHJlZXQgYXQgbmlnaHQKZGVsYXJvY2hlCmx1aWdpIGxvaXIKZWRvdWFyZCBsZW9uIGNvcnRlcwpwYXJrIHNoaW4gaHllIGFzIGEgc3VwZXIgdmlsbGFpbgpmZW1hbGUgYWN0cmVzcyBmcm9tIGtvcmVhCnNpbXBsZSBhZXN0aGV0aWMKY3liZXJzdGVhbXB1bmsKYXdhcmQtIHdpbm5pbmcgcGhvdG9ncmFwaHkKcGFzc3BvcnQgcGhvdG8KZmVtYWxlIGltYWdlIGluIHNoYWRvdwpjbGVhciBbYnJvbnplXSBmYWNlCmNsZWFyIFtbYnJvbnplXV0gZmFjZSBbbWFza10Kb3JhbmdlIGFuZCByZWQgc2t5CjM1bW0gZmlsbSBzdGlsbCBmcm9tIDE5ODkKcGF1bGluZSBoYW5zb24gYXMgYSBjbG93bgo0ayBoaWdobHkgZGV0YWlsZWQgZGlnaXRhbCBhcnQKYnJpZ2h0IHNoaW5pbmcgZXllcwpwZWUgd2VlIGhlcm1hbgpkcmFnb27igJlzIGxhaXIKaGVhdnkgbWV0YWwgdGhlIG1vdmllCnBlaW50dXJlIGQndW5lIGbDqWUgc2FuZ3VpbmFpcmUKYXZlYyBkZXMgZGVudHMgcG9pbnR1ZXMKY29mZmVlIGFuZCBzdGFycyBiYWNrZ3JvdW5kCnBlbmd1aW4gc3VyZmluZyBvbiBhIGJvbmcKcGVuZ3VpbnowCnBlb3BsZSBpbiBiZWFjaApiZWFjaCBpcyBiZXR3ZWVuIHRoZSB0d28gdmFsbGV5cwpzY2h1dHp0cnVwcGUKbm9ydGgga29yZWEgcHJvcGFnYW5kYSBzdHlsZQpkb2cgbWFuCnBlcHBhIHBpZyByb2JiaW5nIGEgYmFuawpkeW5hbWljIGFuZCBhdG1vc3BoZXJpYyBsaWdodGluZwpzdXJyZWFsIGRhcmsgb3RoZXJ3b3JsZGx5IG1vb2QKdW5yZWFsIHJlbmRlcmVkCnBlcnBldHVhbCBtb3Rpb24gbWFjaGluZQpwZXJzZXBob25lIGluIHNwcmluZwpwZXJzaWFuIGNhdAp3aWxsaWFtIGFkb2xwaGUtYm91Z3VlcmVhdQpwZXJzb25pZmljYXRpb24gb2YgZ3JlZWQKYmlvbWVjaGFuaWNhbCBmbHVpZApwZXRlIGRhdmlkc29uIHdhbGtpbmcgYSBrYW5nYXJvbwpwZXRlciBkdXR0b24gYXMgYSBwb3RhdG8KcGV0ZXIgZ3JpZmZpbiBhcyBhIHJlYWwgcGVyc29uCjE5OTAgcGhvdG9ncmFwaApzYWQhCmJvaXN0ZXJvdXMKcGV0ZXIgdGhlIGdyZWF0CnBldGVyIHRoZSBncmVhdCBvZiBydXNzaWEKcGV0c2NvcApwZXdkaWVwaWUgc2VsZmllIGF0IGEgYnJpZGdlCnBoYW50b20gZHVzdCBnYW1lcGxheSBzY3JlZW5zaG90CnBoYXNtb3Bob2JpYQpwaGlsIGhhbGUgYXJ0d29yawpwaXhhciBtb3ZpZSBzY2VuZQp2aWV3IGZyb20gYm90dG9tCm1lbXBoaXMgcmFwCnB1cnBsZSBkcmFuawp0cmlwbGUgc2l4CmxpbWl0ZWQgZWRpdGlvbiBwcmludApzaXR0aW5nIGF0IHRoZSBwYXJsYW1lbnQgbWVldGluZwpnaXZpbmcgYW4gaW50ZXJ2aWV3CjE4NjAgcGhvdG9ncmFwaApwaG90byBvZiBtYXJrIHp1Y2tlcmJlcmcKc2tpbGxlZCBnZWlzaGEgb2YgdGhlIGphcGFuZXNlCmV4dHJhIGdyZWFzeQpvaWx5IHNoZWVuCnRoZSB3aXRjaCBxdWVlbgpwaG90byBvZiBzaGVyeWwgc2FuZGJlcmcKbW91bnRhaW4gd2F0ZXIKYm9uZGkgYmVhY2ggaW4gdGhlIGJhY2tncm91bmQKcGhvdG8gb2YgYSByb3NlCmNoYW9zIGlzIHZpc2libGUKc3RpbGwgZnJvbSBhIG5hdHVyZSBkb2N1bWVudGFyeQpwaG90byBvZiBhIG1hbgphcmNoaXZhbApmcmFpbApnb2xkIGFuZCBibGFjayBjb2xvciBzY2hlbWUKdGhyaXZpbmcgZWNvc3lzdGVtCmJyaWdodCBmYXVuYQpzeW5jaGVkCnBob3RvIG9mIHRoZSBtaWRkbGUgb2YgdGhlIG9jZWFuCm1pbmlhdHVyZSBvZiBhIHNwb3J0cyBjYXIKZGV0b25hdGlvbgpyYWluYm93IHdpbmdzCm11c2V1bSBleHBvc2l0aW9uCnBob3RvIDUwbW0KZ2xpdGNoZXMgaW4gcmVhbGl0eQo4MiBtbSBzaWdtYQpjb3ZlcmVkIHdpdGggY29id2VicyBhbmQgZHVzdApjb3ZlcmVkIHdpdGggdmVnZXRhdGlvbgpiZXR0ZXIgaG9tZXMgYW5kIGdhcmRlbnMKbW9kZWxpbmcgc2hvb3QKdHJpLXggNDAwIHNpZGUgbGlnaHRpbmcKZnJvbnQgZWxldmF0aW9uIHZpZXcKZHJpbmtpbmcgYW5kIHNtb2tpbmcKY3Jvd24gYW5kIGdvd24KbGVucyBmbGFyZS4gb21pbm91cwp6IGJydXNoY2VudHJhbAo4OG1tIGxlbnMKNzDigJMyMDBtbSBmLzIuOGwgY2Fub24gZWYgaXMgbGVucwpleHBvLXN1cmUgMS84MDAgc2VjIGF0IGYvOAoxMGsgcmVzb2x1dGlvbgpwaWNrIHVwIGJlaGluZCB5b3UKc2t1bGwgYW5kIGJvbmVzCnNpbXBsZSBjaHJvbWF0aWMgeHJheQpwaWN0dXJlIG9mIGEgZmVtYWxlIGJpa2VyCnJhaW55IGRheSBvdXRzaWRlCnBpY3R1cmUgb2YgYW4gYWR1bHQgbWFsZSB3YXJyaW9yCnZlcnkgZGFyayBicm93biBza2luIQptaXhlZCBwbGF0ZSBhbmQgbGVhdGhlciBhcm1vcgpwaWRnZXkKcGllcmNlIGJyb3NuYW4gYXMgamFtZXMgYm9uZAp0aGUgZ29kIG9mIHRodW5kZXIKcGlrYWNodSBhcyBhIGh1bWFuCmRldGFpbGVkIDRrIHJlbmRlcgpwaWthY2h1IGVhdGluZyBhIGhhbWJ1cmdlcgpwaWthY2h1IGluIHNwYWNlCmxpZ2h0IHRvbmVkCmNvbGxvZGlvbiBwaG90b2dyYXBoCnJlYWwgZW5naW5lIHJlbmRlcgpwaW5lIG1hcnRlbgpwaW5rIHRyZWUgYmVzaWRlIGEgbGFyZ2UgbGFrZQpnYXppbmcgb2ZmIGludG8gdGhlIGhvcml6b24KcGlua2llIHBpZSBlcXVpbmUKcGlyYXRlIHJvYm90CnBpcmF0ZXMgaW4gYSB0YXZlcm4KcGl4YXIgY29yb25hdmlydXMgbW92aWUKY2luZW1hdGljIGZyb250IGxpZ2h0bmluZwptYXlhbiBzdHlsZQphbGllbiBzcGVjaWVzCnR3aXN0ZWQgdHJlZXMKaGFuZ2luZyB0cmVlcwpmbG9hdGluZyB0cmVlcwpwbGFuZXQgb3Zlcmdyb3duCnBsYW5ldCB0ZXJyb3IgcGxhbmV0CnBsYW5ldCBvZiB0aGUgY2F0cwpwbGFudCBtb25zdGVyCnN0YW5kaW5nIG9uIHRoZSBzdHJlZXQKcGxhdGZvcm0gZ2FtZQpwbGF5Ym9pIGNhcnRpIHBvcnRyYWl0CnBvZXRpYyBzZXF1ZW5jZSBpbiBtci4gY2xlYW4Kd29vZGN1dCBhcnQKcG9raW1hbmUKMjA0OQpwb2xpY2UgdGVzbGEKZXBpc29kZQp0aGlnaHMhISEhIGdvcmdlb3VzCmh5cGVyc3BlZWQKcG9udGlmZXgKcG9yc2NoZSA5MTEgaW4gdGhlIGZ1dHVyZSBlbmdpbmUKcG9yc2NoZSBtYWRlIG91dCBvZiBsZWdvCnBvcnRhbCBndW4Kd2l0aCBjZWxhZG9uIGdsYXplCnNvYXJpbmcKaW4gdGhlIGNvY2twaXQgb2YgYSBmaWdodGVyIGpldApwb3J0cmFpdCBiYXRtYW4gYW5jaWVudCBiaWJsaWNhbApwb3J0cmFpdCBiZXJzZXJrZXIgYmFyYmFyaWFuCjEvNCBwcm9maWxlCndvb2QgYnJhbmNoIG1vc3MgcGxhbnRzCmVuY2hhbnRyZXNzCnBlcnNvbiBtYWRlIG91dCBvZiBnbGFzcwo4MHMgdmVyc2FjZSBhZApwb3J0cmFpdCBkZSBzaGFua3MgbGUgcm91eAptYWxlIHJvZ3VlCnBvcnRyYWl0IG9mIDE0IHllYXJzIG9sZCBib3kKYnVzdCB2aWV3CnZvbHVwdHVvdXMgZmlndXJlCmJhY2tncm91bmQgaXMgbWFkZSBvZiBzdGFycwpwb3J0cmFpdCBvZiBhaHJpCnBvcnRyYWl0IG9mIGFsZXhhbmRyYSBkYWRkYXJpbwpwb3J0cmFpdCBvZiBhbnlhIHRheWxvci1qb3kKcG9ydHJhaXQgb2YgYXN0cm9uYXV0CnBvcnRyYWl0IG9mIGJhcmJpZSBkb2xsCnRvbWIgcmFpZGVyIGJlYXV0aWZ1bApwb3J0cmFpdCBvZiBib2Igcm9zcwpqYXlzb24gdGF0dW0gYXMgZ3VlcmlsbGEgaGVyb2ljYQpwb3J0cmFpdCBvZiBjaHJpcyBldmFucwpibG9uZGUgc2hhZ2d5IGhhaXIKaW4gYSBob3JuZWQgaGVsbWV0CmludGltYXRlIGxpZ2h0aW5nCmJ1cm5pbmcgd2hpdGUgZXllcwpjb21wb3Nlcgp0cmljb2xvciBiYWNrZ3JvdW5kCmluIGEgbW92aWUgc3RpbGwgY2luZW1hdGljCnBvcnRyYWl0IG9mIGRvbGx5IHBhcnRvbgpmaWVyY2UgYW5kIHdpbGQgbG9vawpwb3J0cmFpdCBvZiBlbHNhIGZyb20gZnJvemVuCihicmF2ZSBwb2xpY2UgaiBkZWNrZXIpCmludGVuc2UgZ2F6ZQpubyBmYWNpYWwgZmVhdHVyZXMKcG9ydHJhaXQgb2YgaGFkZXMKcGVyZmVjdGx5IGRyYXduIGhhbmRzCmlsaWFkCnBvcnRyYWl0IG9mIGhvbGxvdyBrbmlnaHQKcG9ydHJhaXQgb2YgaG9tZWxhbmRlcgpwb3J0cmFpdCBvZiBodWdoIGxhdXJpZQpoYWxmIGh1bWFuIGZhY2UKcG9ydHJhaXQgb2YgamlueCBmcm9tIGFyY2FuZQpwb3J0cmFpdCBvZiBqb2hubnkgZGVwcApreXJpZSBpcnZpbmcgYXMgY2hlIGd1ZXZhcmEKcG9ydHJhaXQgb2YgbGFkeSBtZWNoYW5pa2EKdmluY2VudCB2YW4gZ29naCBzdHlsZQpwb3J0cmFpdCBvZiBsaW51cyB0b3J2YWxkcwpwb3J0cmFpdCBvZiBsdWNhcmlvCnBvcnRyYWl0IG9mIGx1bWFzdGluYSBjZWxlcnJhcmlhCnN0cm9uZyByZWQgaHVlCmNvZ3M6MTAwMApwb3J0cmFpdCBvZiBtb3JnYW4gZnJlZW1hbgpwb3J0cmFpdCBvZiBvYmFtYQpuaWhpbGlzbQpwb3J0cmFpdCBvZiBwYXVsZXR0ZSBnb2RkYXJkCnBvcnRyYWl0IG9mIHBlbGUKcG9ydHJhaXQgb2YgcGVwZSB0aGUgZnJvZwpwb3J0cmFpdCBvZiBwdXRpbiBpbiBzcGFjZQpwb3J0cmFpdCBvZiBwdXRpbgpwb3J0cmFpdCBvZiBxdWVlbiBlbGl6YWJldGggaWkKY293YXJkbHkKaG9ybnMgdW5kZXIgaGlzIGNoZWVrCnN1a2kKaGFpciBsb29wcwpwb3J0cmFpdCBvZiBzb2ZpYSB2ZXJnYXJhCnBvcnRyYWl0IG9mIHNwYWNlIG1hcmluZQpwb3J0cmFpdCBvZiB0aGUgaHVsawpzY2FycmVkISBkJmQKc2V4eSBleWVzCnBvcnRyYWl0IG9mIHplcmFvcmEKcnVhbiBraWEgYW5kIGpvaG4gc2luZ2VyIHNhcmdlbnQKMTgwbW0gZi8xLjgKcG9ydHJhaXQgb2YgYSBjeWJvcmcgcXVlZW4KcG9ydHJhaXQgb2YgYSBnbm9sbApvcm5hdGUgdHVya2ljIHBhbGFjZSBiYWNrZ3JvdW5kCmRpYW1vbmQgc2tpbgpwb3J0cmFpdCBvZiBhIG1hbGUgaHlkcm9tYW5jZXIKbmF2eSBoYWlyCm1ldGFsbGljIHNjZXB0ZXIKYnViYmxlIGJhY2tncm91bmQKY2VudGVyZWQgZnVsbC1ib2R5IHNob3QKbGluZ2VyaWUhIQpkcmVhZGxvY2sgaGFpcgpncmVlayBmYWJyaWMKaGFpciBwb255dGFpbApwb3J0cmFpdCBvZiBhIGJsb25kZSB3b21hbgpzdWl0IG1hZGUgb2Ygc3RhcnMKcG9ydHJhaXQgb2YgYSBjb3NtaWMgZ29kZGVzcwpwaW5rIGFuZCBnb2xkIGNvbG9yIHBhbGV0dGUKYmVhdXRpZnVsIGxvbmcgd2hpdGUgZHJlc3MKcG9ydHJhaXQgb2YgYSBjdXRlIHdvbWFuCnBvcnRyYWl0IG9mIGEgY3liZXJwdW5rIHNhbXVyYWkKY3liZXJuZXRpYyBleWVzIGltcGxhbnRzCnBvcnRyYWl0IG9mIGEgZGFyayBmYW50YXN5IG55bXBoCnBvcnRyYWl0IG9mIGEgZHdhcmYgd2FycmlvcgpkZXRhaWxlZCBzZW5zdWFsIGZhY2UKcG9ydHJhaXQgb2YgYSBmZW1hbGUgbmVjcm9tYW5jZXIKcG9ydHJhaXQgb2YgYSBmdXR1cmlzdGljIHJvYm90CmNvbXBsZW1lbnRhcnkgcmltIGxpZ2h0cwpjeWJlcnB1bmsgY2l0eSBiYWNrZHJvcAo4LzgKYmFja2dyb3VuZCB5ZWxsb3cgYW5kIGJsdWUKZXh0cmVtZWx5IGRldGFpbGVkIGZyb250YWwgYW5nbGUKZXBpYyBhcnQgbm91dmVhdSBmcmFtaW5nCnZlcnkgY29tZnkKcHJvbWluZW50IGphdyBhbmQgdmlzaWJsZSBmYW5ncwpjcnlzdGFsIGNyb3duCnBvcnRyYWl0IG9mIGEga2l0dGVuCnBob3Rvc2hvb3QgZm9yIHZvZ3VlIG1hZ2F6aW5lCnBvcnRyYWl0IG9mIGEgbGlvbgpmYXQgY2F0IG9uIGRlc2sKd2luZG93IGluIHJvb20KcG9ydHJhaXQgb2YgYSBtYWQgZ2VuZXJhbApjb29sIGRhZCB2aWJlcwpoZSBpcyB3ZWFyaW5nIGEgYmxhY2sgdC1zaGlydAptaXh0dXJlIHR1cmtpc2ggYW5kIHJ1c3NpYW4KY29pZmZlZCBicm93biBoYWlyCmNoaWxlYW4Kc291dGhlcm4gc2xhdiBmZWF0dXJlcwp1c2luZyBhIHZyIGhlYWRzZXQKMzVtbSBmaWxtIGNvbG9yIHBob3RvZ3JhcGh5CnBvcnRyYWl0IG9mIGEgbWVkaWV2YWwgbm9ibGVtYW4KcGhvdG9nZW5pYyBkZXRhaWxzIG9uIGFybW9yCnBvcnRyYWl0IG9mIGEgbmVjcm9tYW5jZXIKcG9ydHJhaXQgb2YgYSBwb2xhciBiZWFyCnBvcnRyYWl0IG9mIGEgcHVnIGFzIHRoZSBwb3BlCmRyZXNzZWQgaW4gYSBzYXJpCnBvcnRyYWl0IG9mIGEgcnVnZ2VkIHdhcnJpb3IKYmxhY2sgYW5kIHJlZCB0dXhlZG8KcG9ydHJhaXQgb2YgYSBzdGVhbXB1bmsgY2F0Z2lybApzaGlueSBqZXdlbHMKcG9ydHJhaXQgb2YgYSBzdW5rZW4gc2hpcApzdGVlbCBza2luCmxvbmcgY3lhbiBoYWlyCnBvcnRyYWl0IG9mIGEgd2Fycmlvcgpwb3J0cmFpdCBvZiBhIHdvbGYgaGVhZApicm93biBsb25nIGFuZCBzdHJhaWdodCBoYWlyCnByZXR0eSBvdmFsIGZhY2UKb2xkZXIgc2lzdGVyIHZpYmVzCmFubm95aW5nIHNpc3RlciB2aWJlcwpibGFjayB3YXZ5IGhhaXIgd2l0aCBiYW5ncwpzaGUgaXMgYWJvdXQgNDAgeWVhcnMgb2xkCnNoZSBpcyBhYm91dCA1MCB5ZWFycyBvbGQKZW1hY2lhdGVkIGJsYWNrIGV2ZW5pbmcgZ293bgp1bmRlcndhdGVyIGJ1YmJsZXMKcG9ydHJhaXQgb2YgYSB5b3VuZyBlbGYgd2l6YXJkCnRhbGwgZm9yZWhlYWQKd29vZGVuIHN0YWZmCnBvcnRyYWl0IG9mIGFuIGFuaW1lIGdpcmwKcG9ydHJhaXQgb2YgYmFsZApwb3J0cmFpdCBvZiBjaXJjdXMgYXJ0aXN0Cm1lY2hhIGh1bWFuCnBvcnRyYWl0IG9mIGRvZwpzaG9ydCBzcGlrZWQgaGFpcgplbWJlcnMgYWRyaWZ0IGluIHRoZSBhaXIKYmxhY2sgYW5kIHJlZCBzdWl0CnBvcnRyYWl0IG9mIGZlbWFsZSByb2d1ZQp1bmRlcmN1dCBoYWlyY3V0Cmdsb29tY29yZSBpbGx1c3RyYXRpb24Kd2VhcmluZyBnaWxkZWQgcmVkIHJveWFsIHJvYmVzCm1pbnQgZ3JlZW4gZXllcwpzYWQgbXVwcGV0IGV5ZXMKcG9ydHJhaXQgb2Ygbm9yZGljIGdpcmwKcG9ydHJhaXQgb2YgdGhlIGFuZ2VsaW5hIGpvbGllCnBvcnRyYWl0IG9mIHRoZSBtb25hIGxpc2EKc3RhcnMgYW5kIHN0cmlwZXMKNThtbQpwb3J0cmFpdCBvZiB4ZW5vbW9ycGgKc2hlIGhhcyBhIGRpc3RhbnQgZXhwcmVzc2lvbgpkaXN0YW50IGV4cHJlc3Npb24KdmlicmFudCBkYXJrIGhhaXIKaHVtYW5zIG9mIG5ldyB5b3JrIHN0eWxlCnRoZSBib2R5IG9mIHJvbmRhIHJvdXNleQpwb3J0cmFpdCBzdHVubmluZwp0aGUgc3VuIGlzIGV4cGxvZGluZwpmZWVsaW5nIG1pc2VyYWJsZQpib2R5IGNlbnRlcmVkCmlyaWRlc2NlbnQgc2NhbGVzIG9uIGhlciBib2R5CndpdGggdHJpZGVudCBhbmQgY3Jvd24KcG9zdCBhcG9jYWx5cHRpYyBkaXN0cmljdApwb3N0LWFwb2NhbHlwdGljIGVhcnRoCndlYXJpbmcgaG9nd2FydHMhISEgcm9iZXMhISEKemlnb3Igc2FtYW5pZWdvIHN0eWxlCmhhd2tpbnMKdmlldyBmcm9tIHRoZSBib3R0b20KY2FwcHVjY2lubwpwb3QgbGVhZgpwb3Rpb24gb2YgaGVhbGluZwp2YXJpZXR5IG9mIHNoYXBlcyBhbmQgdGV4dHVyZXMKcG93ZXIgZ2lybApsb2NhbCBoZXJvZXMKaW4gc3R5bGUgb2Yga2F0c3VoaXJvIG90b21vCm1pY2hhZWwgZ2FybWFzaCBhbmQgcm9iIHJleQpmcm9tIHRoZSBtb3ZpZSBwcmVkYXRvciAxOTg3CnNlYSB3ZWVkCnN5bW1ldHJpY2FsIGZhY2UhIQpmYWNlIGZvY3VzIQp3bG9wIGFuZCBhbmRyZWkgcmlhYm92aXRjaGV2CnNvbG8gcG9ydHJhaXQg8J+OqPCflozvuI8KcHJpbmNlIGluIHBhc3RlbCEhISEKd2VhcmluZyBhIHBhcGVyIGNyb3duCnZpY3RvcmlhbiBuZXdzcGFwZXIgYXJ0aWNsZQpoaWdoIGRldGFpbGVkIGZhY2lhbCBmZWF0dXJlcwpzbGlnaHQgc21pbGUgYW5kIG9wZW4gZXllcwp0YWNrIHNoYXJwIGZvY3VzCndvcnN0Cmd1bnNtaXRoaW5nCnBvbnl0YWlsIGFuZCBiZWFyZApwcm9qZWN0IHpvbWJvaWQgc2NyZWVuc2hvdApwcm9tZXRoZXVzIGVuZ2luZWVyCmJpb2xvZ2ljIGhyIGdpZ2VyIHN0eWxlCnBhc3Npb24gZnJ1aXRzCmRyYWdvbiBmcnVpdHMKcHN5Y2hlZGVsaWMgZHJvcGxldHMgb2Ygd2F0ZXIKcHN5Y2hlZGVsaWMgZm9yZXN0CnBzeWNoZWRlbGljIGZyb2cKcmVwZWF0IHBhdHRlcm4KcHN5Y2hlZGVsaWMgdmlzdWFscwppIHNlZSB5b3UKcHVlcnRvIHJpY2FuIHN1cGVyIGhlcm8Kc3RhcmZpc2ggbW9uc3RlciBtb3ZpZQp1bmJlYXJhYmxlIGFueGlldHkKYW5jaWVudCBzeW1ib2wgYmVoaW5kIGl0CnB1bnB1biBvbm9kZXJhCm1hZ2ljIHRoZSBnYXRoZXJpbmcgY2FyZHMKcHVycGxlIGFsaWVuCnB1cnBsZSBoYWlyIHBvcnRyYWl0IG9mIHdvbWFuCjRrIGhkLiBzbm93IHdoaXRlIGhhaXIKcHV0aW4gcG9ydHJhaXQKZmFjZSBvZiBmZWFyCnB1dGluIHdpdGggYmVhcmQKcHlyYW1pZCBoZWFkIGZyb20gc2lsZW50IGhpbGwKcHlyYW1pZHMgb2YgZWd5cHQKbWV3CmJlcmtlcmsKZ29kaGFuZApxdWFrCnRoZSBtYWNobyBkdWNrCnN0YWdlIGxpZ2hydAphd2FyZCB3aW5uaW5nIGZhc2hpb24gcGhvdG8KaGVhdnkgbWV0YWwgY29uY2VydApxdWVlbiB2aWN0b3JpYQpxdWVlbiBvZiBhdGxhbnRpcwpxdWVlbiBvZiBpY2UgYW5kIHN0b3JtCm9sZWQgOGsKcnVzdHkgY2hhaW4gZmVuY2luZwpxdWVlbiBvZiB0aGUgbmlnaHQKcjJkMgpndW5zbGluZ2VycwpyZ2IgZ2FtZXIgdG9pbGV0Cndobwptb3VudGFpbnMgYW5kIHJpdmVycwpyYWJiaXQgd2FycmlvcgppbiBsYWJvcmF0b3J5CnJhY2hlbCBhbWJlcgp3ZWFyaW5nIGEgc2FyaQpyYWRvc2xhdiBzdnJ6aWthcGEKcHJldHR5IGV2YSBncmVlbiB2YW1waXJlCnByZXR0eSBmZW1hbGUgZXZhIGdyZWVuIHZhbXBpcmUKZmVubmVjIGZveCBhbmltYWwKd2F0ZXIgZGVtb24KbGJsc2NrIGhhaXIKbCB2YW1waXJlCjE5OTQgdmhzIHF1YWxpdHkKcmFodWwgZ2FuZGhpIGhhaXJzdHlsZQpyYWh1bCBnYW5kaGkgZmFjZQpncm9vdCBjb3N0dW1lCmNyaXNwIHZlY3RvciBsaW5lCnJhaW5ib3cgcm9hZApyYWlueSBkYXkgaW4gbWluZWNyYWZ0CmFjdGlvbiBtb3ZpZSBzY2VuZQpleHBlcnQgc2hhZGluZwplbGlzYWJldGggbW9zcwpvbGQgZm9vdGFnZQpnYW1lcnMga2V5Ym9hcmQKcmF0IGtpbmQgbWVjaGEKcmF0IHdpdGggY3Jvd24KZ2xvYXRpbmcKZm90bwpyYXZlbmhvbG0KcmF3IG1hbGFjaGl0ZQpkaXNndXN0aW5nIGZvb2QKZHVzdCBhbmQgcGFydGljbGVzCnJlYWwgbGlmZSBwaWthY2h1CnJlYWwtbGlmZSB0b20gYW5kIGplcnJ5CnN1cGVyIHN5bW1ldHJ5CnBhcmFsbGVsaXNtCmRhcmstbWF0dGVyCnJlYWxpc3RpYyBsaWZlbGlrZSBkcmFnb24Kc3R1ZHlpbmcKc3BvdGxpZ2h0cyBmcm9tIGNlaWxpbmcKcXVlc3Rpb24gbWFya3MKaWYgaXQgd2VyZSBhIHJlYWwgcGVyc29uCjRrKQpkYXJrIGZsYXQgY29sb3IgYmFja2dyb3VuZAoxODY2CmJvdHRsZSBvZiB3aW5lCmNvcHBlciBjdXAKdGhyZWUgZHdhcmYgYnJvdGhlcnMKcmVhbG0gb2YgbGlmZQpvdHRvbWFuIG1pbmlhdHVyZSBzdHlsZQpyZWQgZm9ybWFuIGFzIGlyb25tYW4KcmVkIHNrdWxsCmhnIHdlbGxzCnJlZCBoYWlyZWQgZ29kZGVzcwpmaXQgcGh5c2lxdWUKcmVkIG9ncmUgcmlkaW5nIGEgaG9yc2UKcmVkIHN1biBvdmVyIHBhcmFkaXNlCmFzIGEgcmV0cm8gZnV0dXJpc3RpYyBoZXJvaW5lCnJwZyBtYWtlcgpyZWkgaGlubyBhcyBhIHByaW5jZXNzCnJlaW5kZWVyIG1hZGUgb3V0IG9mIHNoYWRvd3MKcHVycGxlIGxvbmcgaGFpcgp1bnJlYWwgZW5naW5lIGdlbmVyYXRpb24KcmVsdXZ5NTIxMwpwYXJ0aWNsZXMgc2ltdWxhdGlvbgpwc3ljaGljIHR2IGNvbmNlcnQKYW5pbWF0ZWQgbW92aWUgc2NlbmUKd2l0aCB2aXZpZCBibHVlIGV5ZXMKc2VyaW91cyBhbmQgc3Rlcm4gZXhwcmVzc2lvbgpnb2xkZW4gc2tpbiB0b25lCmNvenkgaG9tZSBiYWNrZ3JvdW5kCnN0YWRpdW0gc2V0dGluZwpicmFpZGVkIGhhaXIgbG9vcHMKc3BpcmFsaW5nIHVwd2FyZAptZXNzeSBzcXVhcmUgdmlicmFudCByZWQgaGFpcgpzaW1vbiBzdGFsZW5oYWcgaGlnaGx5IGRldGFpbGVkCmJyeWFuIHNvbGEKYm9nbmEgZ2F3cm/FhHNrYQrDoXN0b3IgYWxleGFuZGVyCmJvZ2RhbiByZXp1bmVua28KcmVwdGlsaWFuIHNwYWNlIGFsaWVuCnJ1cmFsIGxhbmRzY2FwZQpyaGV0dCBhbmQgbGluawpza2lpbmcKcmljayBhbmQgbW9ydHkgaW4gbWluZWNyYWZ0Cm1pbmVjcmFmdCBtb2RzCmRyYWdvbiBiYWxsIHogc3R5bGUKcGFuYXZpc2lvbiBwc3Igci0yMDAKbW9kIGdyZWVuIGJvYiB3aWcKaG9vZGVkIGZ1ciBjb2F0CnRoZSByaW5nbGVzCm5vIGJ1aWxkaW5ncwpyb2Igc2NobmVpZGVyIGlzIGEgc3RhcGxlcgpwaWMKcm9iaW4KZXhsaWJyaXMKZXggbGlicmlzCnJvYmluIHdpbGxpYW1zIGFzIHRoZSBqb2tlcgpyYXl0cmFjZWQgcmVuZGVyCnJvYm9jb3AgcG9ydHJhaXQKcm9ib3QgY2hpY2tlbgozZCB3aXJlZnJhbWUKcm9ib3QgZmFjZSBidXN0Cmd1cmVuIGxhZ2FuCnJvYm90IGxpb24Kcm9ib3QgZmFjdG9yeQpmYWxsaW5nIHN0YXJzCnJvYm90IHdhcnJpb3IKd2VhcG9uaXplZApyb2dlciByYWJiaXQKcm9qYXZhCnJvbGFuZHMgemlsdmluc2tpcyAzZCByZW5kZXIgYXJ0CmRpdmluZSB3b3JrCmV2ZWx5bgpmYXNoaW9uaXN0YQpyb21hbnRpYyBjb3VwbGUKZXBpYyBiZWF1dGlmdWwKZ290aGljIHJvbWFuY2UKcm9uIGRlc2FudGlzIGFzIHNhdGFuCnJvbmFsZCBtY2RvbmFsZCBhcyBhIG11cHBldApjb2xvciBzcHJlYWQKcm9uYWxkIHJlYWdhbiB3ZWFyaW5nIGEgYmlraW5pCmluIGEgc3BhY2Ugc3RhdGlvbgp5b2tpIHNoaW5rYXdhCndhdGNobWVuIGNvbWljcyBjb2xvciBzY2hlbWUKbWFuZ2EgYW5pbWUKemVsZGEgdHdpbGlnaHQgcHJpbmNlc3MKY2Vzc25hIGdsaWRlciBwbGFuZQpzdGV2ZW4gdW5pdmVyc2Ugc3R5bGUKcm9zZW4gbWFpZGVuCndlIGRpZG4ndCBzdGFydCB0aGUgZmlyZQpyb3NlcyBtYWRlIG9mIGNvbG9yZnVsIHNtb2tlCnJvc3RvdiBjaXR5CndvcnN0IHBsYWNlIHRvIGxpdmUgaW4gZXVyb3BlCnNreSBoaWdoIGxldmVsIG9mIGFsY29ob2xpc20Kcm90dHdlaWxlciBmaXJlZmlnaHRlcgpyb3R0d2VpbGVyIGRpbm9zYXVyIGh5YnJpZApyb3R0d2VpbGVyIHJhYmJpdCBoeWJyaWQKcnVnZ2VkIG1hbGUgcmFuZ2VyIGluIGJhdHRsZQpydWdnZWQgc29sZGllcgpmbHlpbmcgaXNsYW5kcwpkdXN0IGFuZCBzbW9rZQpydWlucyBvZiBoZWxsCmFuIG9taW5vdXMgZmFudGFzeSBpbGx1c3RyYXRpb24KcnVsZXIgb2YgZXZlcnl0aGluZwppbnRpbWlkYXRpbmcgc3RhbmNlCnJ1cGVydCBtdXJkb2NoIGFzIHRoZSBkZXZpbApzdGFuZGluZyBpbiBoZWxsCmhlbGwgaW4gdGhlIGJhY2tncm91bmQKdG9tIGJhbmdzaGF3CmltbWVuc2UgZGV0YWlscwpydXN0ZWQgbWV0YWwgdGV4dHVyZQp2ZW50dXJlIGJyb3RoZXJzCnN0eWxlIG9mIHRpdG1vdXNlIGFuaW1hdGlvbgpyeWFuIGdvc2xpbmcgYXMgYmxhY2sgcGFudGhlcgpzaGlueSBtZXRhbGxpYyBnbG9zc3kgc2tpbgpyeWFuIGdvc2xpbmcgYXMgZGVhZHBvb2wKZ3JlZW5pc2ggbGlnaHRpbmcKZGV0YWlsZWQgZGVwdGggb2YgZmllbGQKcnlhbiByZXlub2xkcyBhcyB0aGFub3MKYWJzdHJhY3QgbWluaW1hbGlzdCBwYWludGluZwpzY3AgMTczCnNjcC0wNDkKc2NwLTEwNgpzY3AtMTczCnNjcC05MTQKc29tYSBnYW1lIHN0eWxlCmJvb2tzaG9wcwppbiBhbiBlY28gY2l0eQpzbW9rZSBhbmQgZ2FzCmRyYW1hdGljIHByZXNzIHBob3RvCnN6YQp2aW50YWdlIGhhbGxvd2VlbiBwb3N0Y2FyZApzYWNoaWtvIG1peWF6YWtpCmtyaXMga3Vrc2kKdHN1YmFzYSBuYWthaSdzIHN0eWxlCnNhZCBtYW4gcHV0cyBvbiBhIGJlYXIgbWFzawpzYWQgdmFtcGlyZQpzYWQgd29tYW4gc21va2luZyBhIGdpZ2FyZXR0ZQpzYWhhcmEgY29taWNzIGxvZ28KbmF0dXJlIHVuaXR5CnBsYW5ldHMgYWxpZ24Kc2FpbnQgamVyb21lIGFzIGFuIGhlcm1pdApyZWFkaW5nIGEgYm9vayBuZXh0IHRvIGEgbGlvbgp0aGVyZSBpcyBhIHNrdWxsIG92ZXIgYSB0YWJsZQpieXphbnRpbmUgcGFpbnRpbmcKc2FrdXJhIGhhcnVubyBpbiBzbHVnIHNhZ2UgbW9kZQp3ZWFyaW5nIGNyb3AgdG9wCmludGVuc2UgYXRtb3NwaGVyaWMKc2FrdXJhIGZyb20gY2FyZGNhcHRvciBzYWt1cmEKc2FsbWEgaGF5ZWsgYXMgYSBzb3JjZXJlc3MKbWluaW1hbGlzdCBwaG90bwpzYW0gaHlkZSBpbiBnb2Qgb2Ygd2FyIDQKYmlnIGFuZ2VsIHdpbmdzIHdpZGUgb3BlbgpzYW1oYWluIGZpZ3VyZQpzaXR1YXRpb24Kc2FtdXJhaSBjaGFpbnMgaW5rIHVuZGVhZApuLSA5CnNhbXVyYWkgbW92aWUgcG9zdGVyCm9jdGFsCnNpbmdsZSBjb2xvcgp3ZWFyaW5nIGhlciBoZWxtZXQKbWFwIGNhcnRvZ3JhcGh5CmhhdW50aW5nIGZhY2UKc3BlZWQgKDE5OTQpCnNhbmRyYSBidWxsb2NrCnBsYXlmdWwgcGVhc2FudCBtYW4Kc2Fuc2Egc3RhcmsKc2lnbWEgODBtbQpzYW50YSBpbnNpZGUgYSBydXN0aWMgYmFybgpkcmFnb24gaW4gdGhlIGJhY2tncm91bmQKdGlnaHQgb3V0Zml0CjE5NTBzIGZhbWlseQpzdWJ1cmJhbiBob21lCmJlYXV0aWZ1bCBjb2xvciB0aGVtZQpzYXR1cmRheSBuaWdodCBpbiBhIHNhbG9vbgpjcmFpZ3ZpbGxlCm1pbm4Kc2VwdGVtYmVyIDE5MzcKc2F1bCBnb29kbWFuIGFzIGNhcHRhaW4gYW1lcmljYQpzYXVsIGdvb2RtYW4gYXMgYSBtdXBwZXQKc2F1bCBnb29kbWFuIGluIGdhbWUgb2YgdGhyb25lcwpzYXVsIGdvb2RtYW4gaW4gc3VwZXIgbWFyaW8gNjQKc2F1bCBnb29kbWFuIGluIHRoZSBzaW1wc29ucwpwbGF5aW5nIGEgZ2lic29uIGxlcyBwYXVsIGd1aXRhcgpibGVuZGVyIHNjcmVlbnNob3QKc2F1cm9uIGZpZ2h0aW5nIHNhcnVtYW4Kc2F2YWdlIGNsb2FrCnNwZWxscyBtYWdpYwo7Y2luZW1hdGljIGxpZ2h0aW5nCmhvbGRpbmcgYmF0CmhpZ2h5bCBkZXRhaWxlZApnbG93aW5nIHB1bXBraW5zIHVuZGVyIGEgdHJlZQpzY2FyeSBzZWEgbW9uc3RlcgppbnNpZGUgaXJvbiBhbmQgbWFjaGluZXMKam9obiBlYXZlcwpzY2kgZmkgZW5naW5lIHJvb20gbGl2aW5nIHJvb20KY3liZXJuZXRpYyB3YWxscGFwZXIKZWxlY3RyaWMgd2FsbHBhcGVyCmdvbnphbGV6CnBldGVyIG1vaHJiYWNoZXIgYW5kIHRha2F5dWsKc2NpLWZpIGFybW9yCnNjaS1maSBzd29yZApzY2ktZmkgY29tcHV0ZXIKZGFyayB2aWRlbyBnYW1lIGljb24gZGVzaWduCmxhb3MKcG9pbnQtYW5kLWNsaWNrIGFkdmVudHVyZSBnYW1lCmNydWlzZSBtaXNzaWxlIHN0cmlrZXMKaGlnaCBzYW1wbGVzCnNjaWZpIHNwYWNlc2hpcApyZWFsaXN0aWMgLSBuIDkKaGFsZi1saWZlIDI6IGVwaXNvZGUgMiAocGMpCnNjcmVhbWluZyB0cmVudCByZXpub3IKc2luZ2VyIHNvbmd3cml0ZXIgbmluCmZyaWN0aW9uYWwgZ2FtZXMKbW9kZXJuIGN5YmVycHVuayBhbmltZQo4NW1tIGY0Cm1ha2VzIHRoZSBzZWEgYXJlYSBnbG93aW5nIHdhdGVyCnNlYSBsaWtlIGplbGx5CnNlYWd1bGwgd2VhcmluZyBsdWlnaXMgaGF0CnN1YnN0YW5jZSBkZXNpZ25lciBoZWlnaHQgbWFwCnNlYW4gY29ubmVyeSBhcyBnYW5kYWxmCmdpZ2FjaGFkIG1lbWUKc2ViYXN0aWFuIG1pY2hhZWxpcwphcnQgZGVjbyBzY2kgZmkKc2VjdXJpdHkgY2FtIHZpZGVvCnRoZSBsaXZpbmcgcm9vbQpwaW9uZWVyaW5nIGFlc3RoZXRpYwppcm9yaSBmaXJlcGxhY2UKc2VraXJvIGluIGJsb29kYm9ybmUgd29ybGQKc2VsZW5hIHF1aW50YW5pbGxhIHBlcmV6CnNlbGZpZSEhISEhIG9mIGEgbWFuCnRoZSBnYW1lIGRlc2lnbmVyCmZyb250IGZhY2luZyBzaG90CnN1bnNldCBwYW5vcmFtYQptZXRhbCBnZWFyIHJpc2luZyByZXZlbmdlYW5jZQpiYWtlbW9ub2dhdGFyaQpzZW5rby1zYW4KZGlscmFiYSBkaWxtdXJhdApseWluZwpyZWQgZHJlc3MgYW5kIG1hZ2ljIHdpdGNoIGhhdAprb25vc3ViYSBhbmltZSBzdHlsZQpzZXBoaXJvdGggZnJvbSBmaW5hbCBmYW50YXN5CmluIGZhbGxvdXQgY292ZXIgYXJ0CnNlcmVuYSB3aWxsaWFtcwpzZXJpb3VzIGxvb2tpbmcgbWFpbmVjb29uIGNhdApjb3JkcwpuYXppIGdlcm1hbnkKc2V0dGxlcnMgb2YgY2F0YW4Kc2hhY28gZnJvbSBsZWFndWUgb2YgbGVnZW5kcwpmaXNoIHNlYWZvb2QgbWFya2V0cwpzZWFmb29kIGluIHByZXNlcnZlZCBpbiBpY2UKc2hha2lyYQpzaGFsbHRlYXIgZnJvbSBvdmVybG9yZApnb2xkZW4gcmF0aW8gcGF0dGVybnMKYW5pbWUgc2NlbmVyeSBjb25jZXB0IGFydAp2YW5kYWxpc20KaW5nbGF6ZQpicmVuaXplciBtZXRob2QKcG9seWhlZHJvbgpjYXJiaWRlIGxhbXAKc2hhcmsgYW5kIGd1aXRhcgpjaXR5IG9mIHRvd2Vycwpjb3ZlcmVkIHNvbGFyIHN5c3RlbQpzaGVyeWwgc2FuZGJlcmcgYXQgc291bGN5Y2xlCnJ1bm5pbmcgdG93YXJkcyBjYW1lcmEKc2hpYSBsYWJlb3VmCmhhcHB5IGRvZwp0aGUgc2hpbmluZyAxOTgwCnNoaWJhIGludSBwb3J0cmFpdApzaGlidSBpbnUKbGlnaHQgdHJhY2luZwpncmV5IGVhcnMKY29tcGxldGVseSBuZXcKc2hpcHMgb24gZmlyZQpzaGlybyBmcm9tIGRlYWRtYW4gd29uZGVybGFuZApzaG9kYW4KYmVzdCBvZiByZXRhaWwKc2hvcHBpbmcgY2FydApoaWdoIGNvaGVzaXZlbmVzcwpzaHJlayBhcyBjYXB0YWluIGFtZXJpY2EKc2hyZWsgcG9ydHJhaXQKc2hyZWsgd2l0aCByZWQgZXllcwpjdXJzZWQgaW1hZ2VzCnNpYmVyaWFuIGh1c2t5CnNpZGUgdmlldyBvZiBhIGdhdW50CnNtb2tlIGFuZCBmb2cKb2MKc2lsZW50IGhpbGwgMyBnYW1lIHNjcmVlbnNob3QKc2lsdmlvIGJlcmx1c2NvbmkKc2lsdmlvIHNhbnRvcwp3aXRoIGJpZyBjaHJvbWUgdHViZXMKc2ltdWxhY3J1bSBvZiBhIHNwYWNlIGZ1bmd1cwpiZWF1dGlmdWwgbmF0dXJhbCBmb3JtcwpwZWFybGVzY2VudCBodWVzCm1hcmt1cyByZXVnZWxzCnNpbcOzbiBzdGFhbGhhZyBzdHlsZQpzaW5nYXBvcmUgY2l0eQphZXJvbiBhbGZyZXkKc2lyZW4gc29uZwp0aGUgc3RvbmUgaXMgcm91bmQKdW5kZWFkIGtuaWdodApza2VsZXRvbiB3YXJyaW9yCnNrZWxldG9uIGNvd2JveQpmYWxsZW4gZ29kCnNrZWxldG9ucyBzbW9raW5nIGNpZ2FycwpmYXJtIGxhbmQKc2NvcmNoZWQKc2tldGNoIG9mIGEgbHVjaWQgZHJlYW0KcGxheWluZyB3aXRoIGZpcmUKY29sb3JmdWwgYW5kIHZpYnJhbnQKZHVzdHkgbGlnaHRpbmcKcmVzY3VlIGZyb20gdGhlIHVuZGVyd29ybGQhISEhISEKdGhlIHByaW5jZSBvZiBwbGVhc3VyZQpiZWF1dGlmdWwgZG9nIGhlYWQKc2xlbmRlcm1hbiBpbiB0aGUgd29vZHMKZGFyayBpbWFnZXJ5CnNsaWZlciB0aGUgc2t5IGRyYWdvbgpsb25nIG9yYW5nZSBzd2VhdHNoaXJ0CmNvbG9yIGxpZ2h0cwpwbGFuZXQgd2l0aCByaW5ncwp0cm9waWNhbCBzdHlsZQpnb2luZyBmb3J3YXJkIHRvIHRoZSBzdW5zZXQKd29tZW4gaGFuZApsb3cgcHVycGxlIGZsYW1lCndoaXRlIHNraW4gY29sb3IKY2hpbGRyZW4ncyBib29rIGRyYXdpbmcKc25vcmxheAp1bnJlYWwgZW5naW5lIDUgc2hvd2Nhc2UKcmVhbGlzdGljIHBhaW50aW5nIGVmZmVjdAp5YXJkCmZyZWRlcmljIGJlbm5ldHQKc29sYXJwdW5rIHNwYWNlIHNoaXAKc3BlY3VsYXRpdmUgZnV0dXJlcwpjbG9zZS11cCBmaWdodApydXN0IGJhY2tncm91bmQKc29tZXRoaW5nIGJlYXV0aWZ1bApzb25hIGlzIGEgc2xlbmRlcgppbmRvb3Igc21vb3RoIGxpZ2h0CnNvbmljIHlvdXRoCmZ1bGwtY29sb3IKc3RlYW1ib2F0IHdpbGxpZQpzb3BoaWEgbGlsbGlzCnRvb255CmZpYm9uYWNjaSBmcmFjdGFscwplbGVjdHJpYyBhcmMKc21vb3RoIGN1cnZhdHVyZSBkZXNpZ24Kc291dGhlcm4gY2FsaWZvcm5pYQppdCBpcyBhZnRlcm5vb24KdGhlIHN1biBpcyBzaGluaW5nIHdpZGUgc2hvdApzb3lqYWNrCnNwYWNlIGluc2VjdCBhbmRyb2lkCnNwYWNlIHNoaXAgY2VtZXRlcnkgb3V0ZXIgc3BhY2UKcGljYXJkIG9uIGEgc3RhcmJvYXJkCmNyZWRpdCBlc2EKemVuaXRoYWwgdmlldwpzcGFya2xpbmcgbWFnaWNhbCBnaXJsCnNwZWx1bmt5CnR1YmluZwp2ZW5vbSBkdW5raW5nIG9uIHNwaWRlcm1hbgpzcGlkZXJtYW4gYXMgdGVybWluYXRvcgpzcGlsdCBjb2ZmZWUKc3Bpcml0IG9mIHJhZ2UKc3BsYXNoIGFydCBhbmltZSBsb2xpCmJsb25kIGhhaXIgd2l0aCBwaWd0YWlscwpsYXJnZSBoaXBzCmhlciBoYWlyIGlzIG1hZGUgb3V0IG9mIGZpcmUKcnViYmVyaG9zZSBzdHlsZQpzcG9uZ2Vib2IgY2lyY2xlIHBhbnRzCnNwb25nZWJvYiBjdGh1bGh1IG5pZ2h0bWFyZQpsdW5hciBob3Jpem9uCmV4dHJlbWUgcGhvdG9yZWFsaXNtCm1yLiBrcmFicwpzcXVpZCBnYW1lCnRvd24gaW4gdGhlIGJhY2tncm91bmQKc3RhbGluIGFuZCBsZW5pbiBpbiBnYXktYmFyCm5la3JvIGlpaQpzdGFyZmlyZQp0d2lua2xpbmcgZGlzdGFudCBzdGFycwphbGllbiBzdHJ1Y3R1cmUKc3RlYW0gZGVjawpzdGVhbXB1bmsgYWlyIGhhdmVuCmRpZ2l0YWxseSBwYWludGluZwpzdGVhbXB1bmsgZG9nCnNvZnQgcGluayBsaWdodHMKemVwcGVsaW4gaW4gdGhlIGFpcgpzdGVhbXB1bmsgZ3VpdGFyCmJsdWUgZmxvd2VyIGZpZWxkCnNwYW5pc2ggbW9zcwpzdGVhbXB1bmsgbGl2aW5nIHJvb20Kc3RlYW1wdW5rIHJ1YmJlciBkdWNrCnN0ZWFtcHVuayBzdG9ybXRyb29wZXIKc3RlZWwgaW5xdWlzaXRvciBmcm9tIG1pc3Rib3JuCnN0ZWVsIHN3b3JkCnN0ZWVsIG1pbGwKc3RlcGhlbiBoYXdraW5nIGluIHJvY2tldCBsZWFndWUKb25lIG9mIGhpcyBleWVzIGlzIHNjcmF0Y2hlZApoaWdoIGRldGFpbGVkIGRyYXdpbmcKd2F0ZXJjb3JlCnN0ZXZlIGJ1c2NlbWkgd2l0aCBzdW5nbGFzcwpzdGV2ZSBidXNjaGVtaQpzdGV2ZSBoYXJ2ZXkgYXMgdGhlIGZsYXNoCnN0ZXZlbiBzcGllbGJlcmcgbW92aWUgc2hvdApzdGlsbCBhcnQKYmlnIHNtaWxlIG9uIGhlciBmYWNlCnN0aWxsIGZyYW1lIHRoZSByZXRybyB0d2luIHBlYWtzCnN0aWxsIGZyb20gaGFycnkgcG90dGVyIG1vdmllcwpkaXNqb2ludCBoYXBoYXphcmQKaGFwaGF6YXJkbHkgZXhlY3V0ZWQKc2lnbWEgMS82CnN0aWxsIGZyb20gYSB0ZXJlbmNlIG1hbGlrIGZpbG0KcGFyaXMgMTk4MgpzdGlsbCBmcm9tIHRoZSBtb3ZpZSBzaGFya25hZG8KbG91dnJlIGNvbGxlY3Rpb24KZHJpZWQgZmxvd2VyCnN0aWxsIGxpZmUgd2l0aCB3aGl0ZSB2YXNlCmJlaW5nIGJyaWVmZWQgb24gdGhlIGNsb25lIHdhcnMKd2l0aCByMi1kMgpjb25maWRlbnRpYWwgZG9jdW1lbnRzCmVwaWMgbW9tZW50CmFxdWFyZWwgcGFpbnRpbmcKc3RvY2tob2xtIGNpdHkKYXQgbmlnaHQgd2l0aCBmdWxsIG1vb24KZnV0dXJpc3RpYyBjaXR5IGluIGJhY2tncm91bmQKd2hvcmwuIGNsb3VkcwpzdG9ybXRyb29wZXIgZmlnaHRpbmcgaW4gd3cyCm9sZCB3b29kZW4gc2hpcApzdG9ybXkgc2t5IHdpdGggdGh1bmRlcnMKZ2xvd2luZyB3aGl0ZSBvd2wKc3RyYW5nZXIgdGhpbmdzIHZlY25hCnJvc2UgYmFja2dyb3VuZAoxN21tCmxhcmdlIGZvcm1hdCBmaWxtCnRoZXkgYXJlIHNtb2tpbmcKa2FidWtpIG1ha2V1cApza2lubnkgdXBwZXIgYXJtcwpzdHJlZXRzIG9mIGhlaWRlbGJlcmcKdGhlIHRocmVlIGJvZHkgcHJvYmxlbQp3ZWFyaW5nIGEgYmFnZ3kKdGYyIHNjcmVlbnNob3QgY29sb3VyIHBhbGV0dGUKc2VjdGlvbiBtb2RlbAppbW1hY3VsYXRlIGRldGFpbApwb3dlciBwbGFudHMKbHVzaCBmb3Jlc3QgaW4gYmFja2dyb3VuZApmdWxsIG1vb2QKc3R5bGl6ZWQgZ3Jhc3MgdGV4dHVyZQplZG8gZXJhCmNyZWVweSBhbWJpZW5jZQpzdWNjdWJ1cyBpbiBzdW5kcmVzcyBwb3J0cmFpdApzdWNjdWJ1cyBpbiB0aWdodCBzaG9ydCBkcmVzcwpoZWVscwpibGFjayBpbmsgcGFpbnRpbmcKbmlnaHQgc2hvdApwaXNjZXMKc3VuZmxvd2VyIHN0YWluZWQgZ2xhc3MKc3VubnkgbGVvbmUKc3Vuc2V0IGF0IHRoZSBiZWFjaApzdXBlciBtYXJpbyBwaXhlbCBhcnQKY2cgZ3JhcGhpY3MKc3RvcmUKc3VwZXIgc2FpeWFuIGJsdWUKc2hlbnJvbgpzdXBlciBzYWl5YW4gZG9uYWxkIHRydW1wCmluIHN0eWxlIG9mIGp1bmppIGl0bwpzdXBlciBjYXIKc3VwZXJmbGF0IHBvcApzaGFycCBibGFjayBleWVicm93cwpzdXJwcmlzZWQgcGlrYWNodQpjaW5lbWF0aWMgZW52aXJvbm1lbnQKc3VycmVhbCBudWNsZWFyIGVjbGlwc2UgYmxhc3QKd2hpdGUgc3dlZXBpbmcgYXJjaGVzCmdyZWdvcnkgZXVjbGlkZQpjcnlwdGlkY29yZQppdnkgdmluZSBsZWFmIGFuZCBmbG93ZXIgdG9wCnZpbnRhZ2UgMTk1MHMgc3RhbXAKc3dhbXAgbW9uc3RlciBvZiBpY2UKd2luZG93cyBsaXQgdXAKZGVlcCBhenVyZSB0b25lcwpzeWRuZXkgb3BlcmEgaG91c2UKc3lsdmVzdGVyIHN0YWxsb25lIGFzIGJhdG1hbgpzw6lhbmNlCnQtMTAwMAp2aW50YWdlIHNhdHVyYXRpb24Kcm91bmQgYmFja2dyb3VuZApoZWF2eSB3ZWFwb25zIGd1eQpzdGVhbWNvbW11bml0eQppIHNlZSBmaWVsZHMgb2YgZ3JlZW4KbGVmdCBiZWhpbmQKaW5maW5pdGUgcG9zc2liaWxpdGllcwpzZWUgeW91IG9uIHRoZSBvdGhlciBzaWRlCnRvbyBsYXRlCnR2IG5ld3MKNzBtbS9mMi44CnRhYmF4aSA6OiByb2d1ZQp0YWogbWFoYWwgbWFkZSBvZiBjaGVlc2UKbmFycm93IG5vc2UKYXRtb3NwaGVyaWMgZnVsbCBtb29uCnRhbGwgbW91bnRhaW5zCnRhbGxpbm4KNDBtbSBmb2NhbCBsZW5zZQpmbGFzaCBhdCBub29uCnRhbGx5IGhhbGwgYWxidW0gY292ZXIKZGFyayBmb3JiaWRkaW5nCndpbmQgd2FrZXIKdGFyZGlncmFkZSBpbiBzcGFjZQptb2Rlcm4gYWVzdGhldGljCm9uIGJsYWNrIHBhcGVyCm1vcmUgZGFya25lc3Mgb24gYm90dG9tCmhpZ2ggcXVhbGl0eSBvZiBza2V0Y2hpbmcKbWlzcyB1bml2ZXJzZQphcyBhIHRhcm90IGNhcmQKdGFyc2tpIGZpdW1lCmxhbGFmZWxsCmZ1bGwgYmxhY2sgZHJlc3MKbG9sYSBidW5ueSBmYW5hcnQKc2FtdXMgYXJhbiBmYW5hcnQKdGF5bG9yIHN3aWZ0IGFzIGNhcHRhaW4gYW1lcmljYQp0aWt0b2sgdmlkZW8KdGF5bG9yIHN3aWZ0IG1hZGUgb2YgcHVycGxlIGljZQpkYXZpZCBoYW1pbHRvbgpkaWZmZXJlbnQgcG9zZXMKaGlnaCBmYW50YXN5IGNvbmNlcHQgYXJ0CnRoZSBweXJvCmN5YmVybmV0aWMgcGFydHMKc2VsbCBvdXQgZXZlbnQKcHJvY2Vzc29yCnRlY2hub3Zpa2luZyBtYWxlIHdpdGggbm8gc2hpcnQKbGFyZ2UgbXVzY2xlcwp0ZWNobm9sb2dpY2FsIGFuZ3Vpc2gKdGVkIGNydXogaXMgdGhlIHpvZGlhYyBraWxsZXIKbGFyZ2UgcG9yZXMKaW4gdGhlIG1pZGRsZSBvZiB0aGUgd29vZHMKdGVlbmFnZSB2aWtpbmcgc2hpZWxkbWFpZGVuCmluIGEgc2Nob29sIGNsYXNzcm9vbQp0ZWwgYXZpdiB1bmRlciByb2NrZXQgYXR0YWNrCmhpZ2gtZGV0YWlsZAp0aHVuZGVyY2xvdWRzIGluIHRoZSBza3kKZGVuc2xleSBvdmVyZ3Jvd24gd2l0aCBtb3NzCnNvbWUgZmlyZWZsaWVzIGZseWluZyBpbiB0aGUgYWlyCmFtYXppbmcgYW5kIGltbWFjdWxhdGUgc2NhbGUKdGVtcGxlIG9mIGhlYXZlbgpmb3Jlc3QgYW5kIHdhdGVyZmFsbApnaWFudCBtYWplc3RpYyBhcmNod2F5cwpwYXJhbGxheCBwb3N0ZXIgY29tcG9zaXRpb24KZHVua2lyawpzaXR0aW5nIGluIGEgdHJlZQpsZXdpcyBjYXJyb2wKdGVub2NodGl0bGFuCm1vdmllIGNpbmVtYXRvZ3JhcGh5CnRlcm1pbmF0b3IgMgpodWdlIHRlZXRoCnRlcnJ5IGRhdmlzCmNvbmNlcHQgYXIKc2hhZG93YnJpbmdlcnMgY2luZW1hdGljCm11Y2hhIGFydCBub3V2ZWF1Cmd1eXMKdGhhbm9zIGFzIHZpbiBkaWVzZWwKdGhhbm9zIGVhdGluZyBhIGJpZyBtYWMKdGhhbm9zIGhlbGljb3B0ZXIKdGhhbm9zIHBvcnRyYWl0CnRoZSA0dGggZGltZW5zaW9uCm51bWVyaWNhbApwb3N0YWdlCmFtYmVyIGFuZCBjaGFvcwptb25vIHByaW50aW5nCmFydCBzdGF0aW9uIGF3YXJkIHdpbm5lcgp0aGUgYmFja3Jvb21zIGxpbWluYWwgc3BhY2UKdGhlIGJhbmFuYSBibHVlIGdhbmcKeWFzdXNoaSBuaXJhc2F3YSBzdHlsZQp0aGUgYmxhY2sgYm94CnRoZSBib2RoaSB0cmVlIGF0IHN1bnNldAp0aGUgYnVkZGhhCnRoZSBidXR0ZXJmbHkgZ29kZGVzcyBvZiBmaXJlCml0IGdsb3dzIGZyb20gdGhlIG91dHNpZGUKaGQgcGhvdG9yZWFsaXN0aWMKZ29sZGVuIGhvdXIgcGhvdG9ncmFwaApoeXBlciBkaW1lbnNpb24KdGhlIGNvbmNlcHQgb2YgaW5maW5pdHkKdGhlIGNvdW5jaWwgb2Ygc3Bvb2t5IGJpdGNoZXMKbG9ja2JveAp0aGUgZGFyayBzaWRlIG9mIHRoZSBtb29uCnRoZSBkZXB0aHMgb2YgZGVwcmF2aXR5CnRoZSBkb29tIHNsYXllcgpsb25nIGdvYXRlZSBiZWFyZAp0aGUgZWFydGggZnJvbSBzcGFjZQphcmNoaXRlY3R1cmFsIGlsbHVzdHJhdGlvbgp0aGUgZW1wcmVzc+KAmSBoYW5naW5nCnRoZSBlbXByZXNz4oCZIHN3aXJsaW5nIGdhcmRlbnMKdGhlIGV2aWwgd2l0aGluIG1vbnN0ZXIKdGhlIGV5ZSBvZiBwcm92aWRlbmNlCnRoZSBmaXJlIGtpbmcKdGhlIGdhdGUgdG8gaGVsbApsb25nIGdsb3dpbmcgaGFpcgpsb25nIGdsb3dpbmcgY29sb3VyZnVsIGhhaXIKdHJhbnNwYXJlbnQgYm9keQp0aGUgZ3JhbmQgdGVtcGxlIG9mIGZsb3dlcnMKaW50cmljYXRlIHN0b25lIGNhcnZpbmdzCnN0b25lIGNhcnZpbmdzCnRoZSBncnVmZmFsbwphZXN0aGV0aWMhISEhISEhIQp0aGUgaGFycnkgcG90dGVyIHRyaW8gKGhhcnJ5CnByb3AKdGVjaG5pY2FsIGRvY3VtZW50CnRoZSBpbmNhbAptYWRlIG9mIGdsYXplZApmaXJlIGluIGV5ZXMKb3JuYXRlIGFybW9yIGNvdmVyZWQgaW4gdGhvcm5zCm9ybmF0ZSBkcmFtYXRpYyBiYXQgd2luZyBoZWxtZXQKaGFpciBtYWRlIG9mIHNoaW1tZXJpbmcgZ2hvc3RzCnRoZSBrcmFrZW4Kc25ha2Ugd29tYW4KdGhlIGxlYW5pbmcgdG93ZXIgb2YgcGl6emEKZ2Fub25kb3JmCnJlYWxpc3RpYyBtZWdhIHN0cnVjdHVyZQpzY2VuaWMgbGFuZHNjYXBlCmJ1aWx0IGluIHRoZSBlZ3lwdGlhbiBkZXNlcnQKdGhlIG1hZGhhdHRlcgplbWFpbApjaXR5IHNreWxpbmUgaW4gdGhlIGJhY2tyb3VuZAp0aGUgbWljcm9jaGlwCnVudGV4dHVyZWQKZGFyayBkcmFwZXJ5CnRoZSBuZXZlcmVuZGluZyBzdG9yeQpnZXJhbGQgYnJvbSBzdHlsZQp0aGUgcGxhbmV0IG1hcnMKaW50ZW5zZSBjb21iYXQKaGFja2VybWFuCnRoZSByYWZ0IG9mIHRoZSBtZWR1c2EKYXJ0aXN0IGFscGhvbnNlIG11Y2hhCnRoZSByZWQgcXVlZW4Kd2FsbHBhcGVyIGQmZCBhcnQKYmx1IHJheSBjb3ZlciB1c2EKdGhlIHNoaW5pbmcgb3Zlcmxvb2sgaG90ZWwKZW50cmFuY2UKdGhlIHNpbmdhcG9yZSBza3lsaW5lCnRoZSBzdHVwZW5kaXVtCnRoZSB0YWxsIG1hbiBmcm9tIHBoYW50YXNtCnRoZSB0YXJkaXMKY2xldmVsYW5kCnRoZSB0ZXNzZXJhY3QKd2VhdmluZwp0aGUgdWZvIGlzIG92ZXIgdGhlIGNpdHkKdGhlIHZpbGxhZ2Ugb24gdGhlIGNsaWZmCmhhbmdpbmcgb3V0IHdpdGggb3JicwpoaWdobHkgYSBkZXRhaWxlZAp0aGUgd2hpdGUgcmFiYml0Cm1vbm9jb2xvcgp0aGUgeWVhciAyMDg5CmFybXMgZXh0ZW5kZWQKZXhwbG9yZXJzCnRoZSBhdmVyYWdlIHJlZGRpdG9yCnJlZnJhY3RlZCBtb29uIG9uIHRoZSBvY2VhbgpvbmUgb2YgdGhlIHdlYXZlcnMgb2YgZGVzdGlueQptYWdpY2FsIGNhdmUKc2VlCnRoZSBibGVzc2VkIGFpc2xlcwpieSByb3NzZHJhd3MKdGhlIGNhciBpcyBjb3J2ZXR0ZSBjMiAxOTY5CnJvY2hhCnRoZSBjZWFzZWxlc3Mgd2FraW5nIG5pZ2h0bWFyZQpyZWZyYWN0ZWQgbW9vbiBzcGFya2xlcwo4MG1tIGZvY2FsIGxlbmd0aApwZWFjZWZ1bCBhbWJpZW5jZQpzd2luZGxpbmcKdGhlIGZhbGwgb2YgZ29uZG9saW4KdGhlIGNpdHkgb2YgcGFyaXMKbm9zdGFsZ2ljIGZlZWxpbmcKdGhlIGNpdHkgb2YgdG9yb250bwp3aG8gaXMgYm9ybiBmcm9tIHRoZSBzZWEKY2hpbmVzZSBzdHlsZSBwYWludGluZwp0aGUgY3Vyc2Ugb2YgbW9ua2V5IGlzbGFuZAptZWRpdW0gc2hvdC4gYnkgaGF5YW8gbWl5YXpha2kKdGhlIGRlYXRoIG9mIGFydAprb2RhayBwb3J0cmEgZmlsbQp0aGUgZHJlYW1pbmcKdGhlIGVuY3J5cHRlZCBtZXRhdmVyc2UKaHlwZXIgcmVhbGlzdGljIGFydHdvcmsKZ3JlZW4gYmx1ZSByZWQgY29sb3JzCnJpcHBpbmcgZGVtb25zIHRvIHNocmVkcwpibHVlcy4gYmVhdXRpZnVsCmZ1dHVyaXNtIHN0eWxlCnRoZSBmYWxsIG9mIG1hbgp0aGUgZmFsbCBvZiB0aGUgZ2FsYWN0aWMgZW1waXJlCm1vdmllIHNvbmljCnRoZSBmaW5hbCBiYXR0bGUgaW4gaGVsbAptYWNoaW5lIHZzIGRlbW9ucwpteSBob21lCmNpcmNhIDE5NjkKdGhlIGZpcnN0IHNlbGZpZSBvbiBlYXJ0aAp0aGUgZmlyc3Qgc3RlYW1wdW5rIGRyYWdvbgpmcmVkZXJpYyBlZHdpbgpob2x5IHJheXMKYW4gdW5kZXJzbHVuZyBqYXcKZGV0YWlsZWQgaHVtYW4gYm9keQp3ZWFyaW5nIHdoZWF0IHllbGxvdyBnYXV6ZQp0ZXh0IG9uIHBhcGVyCmluIGEgZnV0dXJpc3RpYyBzcGFjZXNoaXAKdGhlIGxhcmdlIGJpcmRzIG9mIHdhcgp2ZXJ5IGtub3duIHBob3RvCnZpZXcgZnJvbSB0aGUgc3BhY2UKZ2VvcmdlIHN0cmFpdAphbGFuIGphY2tzb24KcmFuZHkgdHJhdmlzCmFuYW1vcnBoaWMgMjQgbW0gbGVucwp0aGUgbG9zdCBiZWFjaAp0aGUgbG92ZWx5IGhhaXJ5IGZveAp0aGUgbWFnaWNhbCByaW5nIG9mIHRocmVlIHdpc2hlcwptZWNoYW5vbHVtaW5lc2NlbmNlCjE5NjAncyBvbHltcGljcyBmb290YWdlCmJ1cm5lZCBjaXR5CnByb3BvcnRpb25hbCBmYWNlcwp0aGUgbWlnaHR5IGRvbnV0CnRoZSBtb25leSBvZiBjbG93bnMKY29pbgp0aGUgZGVzZXJ0CnZpZXdlZCBmcm9tIGVhcnRoCnRoZSBtb3N0IGFkdmFuY2VkIGh1bWFub2lkIHJvYm90CmV4IG1hY2hpbmEgKDIwMTQpCnRoZSBtb3N0IGVwaWMKdGhlIGp1bmdsZQpzeW1tZXRyaWNhbCBzaGFwZQp0aGUgbmluZSBjaXJjbGVzIG9mIGhlbGwKb2Z0ZW4gZGVzY3JpYmVkIGFzIGZsYW1lLWxpa2UKdGhlIG9yYWNsZSBvZiB0aGUgbWF5YW4gZWxkZXJzCmJsaW5kIGJyb3duIG1hbgplbGZpYyBwcmllc3Rlc3MKaG9wZWZ1bCBhbmQgYnJpZ2h0CnRoZSBwZXJmZWN0IHdvbWFuCnRoZSBwaGFzZXMgb2YgdGhlIG1vb24KZmx1ZmZ5IGVhcnMgYW5kIGEgbG9uZwp0aGUgcmVhcGVyCmRhcmsgY2luZW1hdGljIGNvbmNlcHQgYXJ0CnRoZSByaW5nIG9mIHRocmVlIHdpc2hlcwpzY3JlZW5zaG90IGZyb20gZmFsbG91dCA0CnRoZSBzZWNyZXQgc2V2ZW50aCBwb3dlciByYW5nZXIKdGhlIHNlY3JldHMgaW5zaWRlIHRoZSB2YXRpY2FuCnRoZSBzb3JjZXJlc3MgY2FzdGluZyBhIGZpcmViYWxsCm1vb25zdG9uZQp0aGUgc3RhcnNoaXAgZW50ZXJwcmlzZQpsaWdodG5pbmcgaW4gdGhlIGRpc3RhbmNlCnRoZSBzdHJlZXRzIG9mIGJhbGR1cidzIGdhdGUKdGhlIHN0cm9uZ2VzdCBzdXBlcmhlcm8KdGhlIHN1cmZhY2Ugb2YgdGhlIHN1bgpvbiBhbiBlcGljIGludHJpY2F0ZSBvcm9ib3Jvcwptb3VudGFpbiB2YWxsZXkKb2N0YW5lIHJlbmRlciAtIG4gNgp0aGUgZXllIG9mIHRoZSB3b3JsZAp0aGUgdWdsaWVzdCBjYXIgaW4gdGhlIHdvcmxkCnRoZSB1bHRpbWF0ZSB3YXJyaW9yCmluIHRlaCBzdHlsZSBvZiB0b255IHN0YXJ0CnN1cGVyIGRldGFpbGVkIGRldGFpbHMKdGhlIHdlbmRpZ28KdGhlIHdlc3Rlcm4gd2FsbAp0aGUgd2luZG93CnNpZ25pbmcgYSBiaWxsCnRoZXJ0cmV2a2Fpc2VyCmJpZyBoZWFkIG9uIHN0YWdlCmh1bWFuaXR5IGxpa2UgY29zbWljIHN0cnVjdHVyZQppbnRlcmlvciBwaG90b2dyYXBoCndoeQp0aGVyZSBhcmUgdHdvIHNpZGVzIHRvIHRoZSBzdG9yeQp2YXN0bmVzcwppbXBlcmZlY3Rpb24Kc29tZXdoZXJlCmluY29uY2VpdmFibGUKaGVhdnkgbWV0YWwgYmFuZCBwcm9tbwp0ZW5lbWVudCBidWlsZGluZ3MKYW1hemluZyBjb2xvciBwaG90b2dyYXBoCm9pbCBwYWludGluZyB3aXRob3V0IGZyYW1lCmV2ZXIgY3JlYXRlZAp0aGlzIHBlcnNvbiBkb2VzIG5vdCBleGlzdApvZmZoYW5kCnllcyBpdCBnb2VzIG9uIGFuZCBvbiBteSBmcmllbmRzCnRob20geW9ya2UgbG9zdApqb25ueSBncmVlbndvb2QKc3VtbWVyIHN1bmxpZ2h0CnRob21hcyBweW5jaG9uCnRob3JzIGhhbW1lcgpsYXllciB1cG9uIGxheWVyCnRocmVlIGZ1dHVyaXN0aWMgcHJpbmNlcwpsYXJnZSB3YXZlcyBoaXR0aW5nIHRoZSBjbGlmZgppbnRyaWNhdGUgY2FydmluZ3MKdGh1bmRlcmJpcmQgMgpyb3VuZGVkCnRodW5kZXJzdG9ybSBkYXJrIG5pZ2h0IHNreQp0aWFtYXQKdGliZXRhbiBib29rIG9mIHRoZSBkZWFkCnRpZmEgbG9ja2FlcnQKYnVybmluZyBicmlnaHQKbWlkbmlnaHQgbW9vbmxpZ2h0CmJpZyBiZWFyIGxha2UgY2FsaWZvcm5pYQpncmVlbiBsaWdodCBjb21pbmcgZnJvbSB3aW5kb3cKZ2hvc3RzIG5pZ2h0IHNreQp0aG91c2FuZCB5YXJkIHN0YXJlCmxvb2tpbmcgYXQgdGhlIG9jZWFuCnRpbmEgYmVsY2hlciBhcyBhIHJlYWwgcGVyc29uCmh1bmdvdmVyCnJlYWR5LW1hZGUKYmxhZGUgb2YgZ3Jhc3MKZXhwbG9zaW9ucyBhbGwgYXJvdW5kCm9pbCBvbiBjYW52YXMgaW50cmljYXRlCnRvIGJlCm11cmRlcm91cyBjYXJuaXZhbCBmcmVhawp0b2JleSBtYWd1aXJlCmh1YSBjaGVuZwpyZWQgbWVjaGFuaWNhbCBib2R5Cm1vdG9yY3ljbGUgaGVsbWV0CmFsYmVydCBraWVmZXIKb2lsIHBhaW50aW5nIGEgYmlnZ2VyIHNwbGFzaAp0b20gY3J1aXNlIGFzIGlyb25tYW4KdG9tIGNydWlzZSBhcyBrZW5zaGlybwpkZXRhaWxlZCBkaWdpdGFsIDNkIGFydApncmVhdCB0ZXh0dXJlcyBhbmQgbGlnaHRpbmcKdG9tIGNydWlzZSBhcyB0b255IHN0YXJrCm92ZXJleHBvc2VkIHBob3RvZ3JhcGgKZmFsbGluZyBvZmYgYSBjbGlmZgp0b20gaGFua3Mgd2l0aCB0aGljayBleWVicm93cwp0b20gaGlkZGxlc3RvbiBhcyBjb3VudCBkcmFjdWxhCnRvbSBob2xsYW5kIGFzIHRoZSBodWxrCnJpdmVyIGluIGZyb250IG9mIGhpbQppbnRyaWNhdGUgZmFjaWFsIGRldGFpbAo0ayDigJRoZWlnaHQgMTAyNCDigJR3aWR0aCAxMDI0CmFnZmEgdmlzdGEgODAwIGZpbG0KdG9tIHdhaXRzIGFzIGhlbGxib3kKY29sb3IgcGhvdG9ncmFwaCBwb3J0cmFpdCA0awp1bmRlcnNpZGUKdG9tIGNydWlzZSB2cyBjYXJuaXZvcmUgZGlub3NhdXIKaGF3YWlpIGJlYWNoCm5ld3NwYXBlciBwaG90b2dyYXBoeQp0b21hdG8gbW9uc3Rlcgp0b21vcnJvdwptYWtvdG8gc2hpbmthaSBhbmQgKGNhaW4ga3VnYSkKdG9uaWMgdGhlIGZveAp0b255IGFiYm90dCBhcyB0aGUgam9rZXIKdG9ueSBkYW56YSBjb2xvcmluZyBib29rIHBhZ2UKaW4gdGhlIG1vdmllIGp1cmFzc2ljIHBhcmsKdGhlIGNhdCB3aG8gY291bGQgZHJpdmUgYSBjYXIKdG9yIGZyb20gbWFydmVsCmNvdW50cnlzaWRlIGNpdHkgc2NlbmUKdG90YWwgbHVuYXIgZWNsaXBzZQp0b3Rvcm8gc2l0dGluZyBpbiBhIGZvcmVzdAp0b3VjaApnb2xkZW4gaW5sYXlzCmZsb2F0aW5nIGNyeXN0YWxzCmJsYWNrIHN0b25lCmFtZXJpY2FuIGZsYWdzCnRyYWlhbiBiYXNlc2N1CnRyYW5zIHJpZ2h0cwp0cmFuc2x1Y2VudCBjdWJlCmFsdGVybmF0ZSBhbmdsZQozZCB1bnJlYWwgZW5naW5lIHJlbmRlcgpuZW9uIGdsb3dpbmcgd29vZApibGFjayBsaWdodG5pbmcKZm91ci1kaW1lbnNpb25hbApmaXZlLWRpbWVuc2lvbmFsCnNpeC1kaW1lbnNpb25hbApzZXZlbi1kaW1lbnNpb25hbAplaWdodC1kaW1lbnNpb25hbApuaW5lLWRpbWVuc2lvbmFsCnRlbi1kaW1lbnNpb25hbAplbGV2ZW4tZGltZW5zaW9uYWwKdHdlbHZlLWRpbWVuc2lvbmFsCnRoaXJ0ZWVuLWRpbWVuc2lvbmFsCmZvdXJ0ZWVuLWRpbWVuc2lvbmFsCmZpZnRlZW4tZGltZW5zaW9uYWwKc2l4dGVlbi1kaW1lbnNpb25hbApzZXZlbnRlZW4tZGltZW5zaW9uYWwKZWlnaHRlZW4tZGltZW5zaW9uYWwKbmluZXRlZW4tZGltZW5zaW9uYWwKdHdlbnR5LWRpbWVuc2lvbmFsCmJyb29rZSBzaGFkZW4gZGV0YWlsZWQKdHJpbml0eSBmcm9tIHRoZSBtYXRyaXgKMTk2MCdzIG9seW1waWNzCnBob2JpYQp0cmlwcHkgbXVzaHJvb20KdHJpc3MgbWVyaWdvbGQgY29zcGxheQp3YXJtbHkgbGl0IHBvc2ggc3R1ZHkKdHJpc3RhbiBlYXRvbiAmIGdyZWcgcnV0a293c2tpCnBvcmt5IHBpZwpkYXJ0aCBzaWRpb3VzCnRyb2xsZmFjZQp0cm9waWNhbCBiZWFjaCBwYXJhZGlzZQp0cnVtcCBpbiByZHIyCnRydW1wIGtpc3NpbmcgcHV0aW4KdHJ1bXAgcHJheWluZyBpbiBtb3NxdWUKdHJ1bXAgdHJhaW5pbmcgcGlrYWNodQppbiB0aGUgdW5pdmVyc2UuaGlnaGx5IHJlYWxpc3RpYwpiJncgcGhvdG9ncmFwaAprcG9wIHN0YXIKaXJpZGVzY2VudCBzb2FweSBidWJibGVzCnB1bHNhcgp0eWxlciBqYWNvYnNvbiBzdHlsZQp0dXJ0bGUgd2FycmlvcgphbGwgbWltc3kgd2VyZSB0aGUgYm9yb2dvdmVzCmVlcmllIGRhdmlkIGx5bmNoIGNpbmVtYXRvZ3JhcGh5CmthdGhlcmluZSBsYW0Kb2YgcG9ydHJhaXQgb2YganVzdGluIGJlYmVyCnJlbmRlcmluZyBhIGJsdWUgcm9zZQpyZW5kZXJpbmcgb2YgY2hlY2ttYXRlCnN0YW5kaW5ncyBkZWZpYW50bHkKdHdpbiBzb3VscwphY3J5bGljIGFuZCBvaWwgcGFpbnRpbmcKYWxiZXJ0byBzZXZlc28gYW5kIGRhbiBtY2Nhdwp0d28gYmVhdXRpZnVsIHdvbWVuIGluIGxvdmUKcmV5a2phdmlrIGp1bmlvciBjb2xsZWdlCnR3byBidWRkaWVzIHNpdHRpbmcgaW4gYSByb29tCmhvbGRpbmcgaGFuZHMgaW4gdGhlIG1vb25saWdodAphY3Rpb24gcG9zZXMgd2l0aCB3ZWFwb25zCnNoYXJpbmcgYW4gb3h5Z2VuIHRhbmsKdHdvIGN1cHMgb2YgY29mZmVlCnR3byBkb2dzCmluc2lkZSBhIGRlY2F5ZWQgb3BlcmF0aW5nIHJvb20KdGhleSBhcmUgZmlnaHRpbmcgdmVyeSBhbmdyeQp0d28gZmlndXJlcyB3ZWFyaW5nIGdhcyBtYXNrcwp0YWkgY2hpCnNjYXJ5IHNoYXJwIGljeQp0d28gbWVuIGh1Z2dpbmcKaGF0cwp0aHJlZS1kaW1lbnNpb25hbCBpbWFnZQp3b3JsZCBvbiBmaXJlCigoKGx1a2UgY2h1ZWgpKSkKZGFuaWVsIHJpY2h0ZXIKaGlnaCBmYXNoaW9uIGRlc2lnbgp0d28gc2tpbm55IG9sZCBwZW9wbGUKdHdvZmFjZQp0eXBpY2FsIGFuaW1lIGNsYXNzcm9vbQpjaGFsa2JvYXJkCmxhdmEgZXJ1cHRpbmcKc2FpbnQgcGV0ZXJzYnVyZwpsZW5zIGZsYXJlIGxpZ2h0aW5nCnJvdW5kIGFib3V0IHRvIHN0YXJ0CnVmbyBhbGllbnMKY29ycmVjdCByb2JvdCBmYWNlCnNpdHRpbmcgb24gdGhlIHBvcmNlbGFpbiB0aHJvbmUKcmVhbCBjbG93biBtYWtldXAKcmVnYWwgZmFzdCBmb29kIGpvaW50CndpdGggcmVhbCB3aW5ncwpzbGVlayB3aGl0ZQp1cyBzb2xkaWVycwpraW5nIG9mIHRoZSBzZWEKbGFyZ2UgYm9rZWggZWxlbWVudHMKZnJhY3RhbCB2aW5lcwptb2JpbGUgZ2ltYmFsbCBjYW1lcmEKc2lnbWEgYXJ0IDg1bW0gZjEuOApwcm9waGV0aWMgYXJ0CmhpZ2ggY29oZXJlbmN5CnVsdHJhIHJlYWxpc3RpYyBmYW50YXN5IHRpYXJhCmVsZWN0cmljYWwgY2FibGVzCndpdGggbWVjaGFuaWNhbCBhcm1zIHRoYXQgZml4IGl0Cmdvcmdlb3VzIGNpbmVtYXRpYyBsaWdodGluZwpidWRkaGlzdCBtb25rIG1lZGl0YXRpbmcKaHVtYW5vaWQgcm9ib3QgY2xvc2UgdXAKdW5yZWFsIGVuZ2luZS4gc2lnbWEgMzVtbQpkcmFnb24gYmFsbCBjb25jZXB0IGFydAp1bmJvdGhlcmVkCnBldHJvbGV1bSB2aXRhbWluCm5vb3Ryb3BpYyBzdGltdWxhbnQKZWRpYmxlIGNyeXB0bwp1bmNvbmRpdGlvbmFsIGxvdmUKdW5kZXJ3YXRlciBsZXZpYXRoYW4KdW5kZXJ3YXRlciBzZWEgZHJhZ29uCmJyb256ZSBwb2xpCmZvbnRlIMOgIGxhIGNpcmUgcGVyZHVlCjRrIGRyb25lIHBob3RvZ3JhcGh5CnNuZWFrZXIgcGhvdG8KdW5yZXF1aXRlZCBsb3ZlCnVyYmFuIGdyYWZmaXRpCmV1CmJydXNzZWxzCnVydXNlaSB5YXRzdXJhCmhpZ2gga2V5IGRldGFpbGVkCmZhciBhd2F5IGxhbmRzY2FwZSBzaG90CmRlbW9uaWMgbWFnaWMgcml0dWFsCnZocyBmb290YWdlIG9mIGEgbW92aWUgc2V0CmNydW5jaCB0aW1lIG9uIHVyYW51cwoxOTcwIHBvc3RlcgppbiBzdHlsZSBvZiB6ZHppc8WCYXcgYmVrc2nFhHNraQptZWxhbmNob2xpYyEhIGxpbWluYWwgc3BhY2UKZmlnaHRlcnMKbWFnZXMKc3VwZXIgY2FtZXJhCjRrIHBob3RvZ3JhcGggb2YgcGFpbnRpbmcKdmFuZWxsb3BlIHZvbiBzY2h3ZWV0egpoZWF2aWx5IGRldGFpbGVkIGFuZCBpbnRyaWNhdGUKdmFwb3J3YXZlIGp1bmdsZQpkYXJrIGZhY2UKc3RhcmJ1Y2tzCmJhcm9xdWUgYW5kIHJvY29jbyBvcm5hbWVudHMKZGVjb3JhdGl2ZSBnb2xkZW4gZWxlbWVudHMKdmVudXMgZGUgbWlsbyB3aXRoIGFybXMKdmVyZ2lsCnNvbiBvZiBzcGFyZGEKdmVybmFkc2t5cyBub29zcGhlcmUKYmxhZGUgcnVubmVyIGZpbG0KYXQgcGl4aXYKdmVyeSBkZXRhaWxlZCBpc29tZXRyaWMKbGlrZSBnb3JpbGxhCmJpZyBob3JuCm1hcnMgYXMgYmFja2dyb3VuZApzdHJhbmdlIHBvcnRyYWl0IHdpdGggZ2FsYXh5CmhlYXZ5IGNvbG91ciBjb21wcmVzc2lvbgp2ZXNhLW1hdHRpIGxvaXJpCmZpbGlncmVlIGJvcmRlcgpnb3RoaWMgaG9ycm9yIHZpYmVzCnZpY3RvcmlhbiBmZW1hbGUgcG9ydHJhaXQKdmljdG9yaWFuIHN0ZWFtcHVuayBtZWdhIGNpdHkKZHJlYW15IGFuZCBkZXRhaWxlZAptb3JiaWQgcGhvdG9ncmFwaHkKdmlkZW8gZ2FtZSBkdW5rZXkKdmlkZW9nYW1lIHBvc3RlcgphbGllbiB2aWJlcwpzZXQgaW4gYyZjMyB0aWJlcml1bSB3YXJzCmR5YmFuaWMKY3liZXJwdW5rIGV5ZSB3ZWFyCmFuZ3J5IGxvb2tpbmcKdmlraW5nIGJvYXQKd2l0aCBydW5lIHRhdHRvb3Mgb24gdGhlIGZhY2UKdmlraW5nIHBhbGFjZQp2aWtpbmcgd2FycmlvciBpbGx1c3RyYXRpb24KdHVtbXkKdmluIGRpZXNlbCB3aXRoIGEgdHVtbXkKZ3JlYXN5IGhhaXIKMzVtbSBmOApzdGFyayBjb21wb3NpdGlvbgpza2V0Y2ggb2Ygb2N1bHVzIHJpZnQKdmlvbGV0IG15ZXJzCmdyb3VwcyBvZiBwZW9wbGUKdmlydHVhbCBzZXQKaGlnaGx5IHJlZmxlY3RpdmUgbGlnaHQKaW5maW5pdGUgd2luZ3MKZmVhdGhlcnkgd2luZ3MKaW5maW5pdGUgYW5nZWxpYyB3aW5ncwppbGx1c3RyYXRpb24gLSBuIDkKam92YW5hIHJpa2Fsbwp2aXZlYyByb2JvdAppbiBhIHRlbXBsZQp2bGFkaW1pciBwdXRpbiBhbWlpYm8KZ2VuZGVyc3dhcAp2bGFkaW1pciBwdXRpbiBpbiBtaW5lY3JhZnQKdmxhZGltaXIgcHV0aW4gcmlkZXMgYSB1bmljb3JuCmNsZWFyIHBob3RvZ3JhcGh5CnJpbmcgbGl0CmxleWVkZWNrZXIKZ2FtZSBlbnZpcm9ubWVudApzcGVjaWFsCmphbnVhcnkgMjB0aAplYXJseSBtb3JuaW5nIHN1bnJpc2UKbXlzdGVyaW91cyBmaWd1cmUKd2FsZG8gZnJvbSB3aGVyZSdzIHdhbGRvCndhbGRvCndhbGsgaW4gYSBmdW5lcmFsIHByb2Nlc3Npb24KZXBpYyAxOTg2IGNpbmVtYXRpYyBzdGlsbAptb3N0IHdhbnRlZApnb3JnZW91cyBzY2VuZXJ5CmRhdGFiZW5kaW5nCndhbHRlciB3aGl0ZSBhcyBhIGZ1bmtvIHBvcAp3YWx0ZXIgd2hpdGUgYW5kIGplc3NlIHBpbmttYW4KY291cGxlIHBvcnRyYWl0CndhbHRlciB3aGl0ZSBhcyB0aG9yCndhbHRlciB3aGl0ZSBhcyBhIG1paQp3YWx0ZXIgd2hpdGUgYXMgYSBib2R5YnVpbGRlcgp3YWx0ZXIgd2hpdGUgY3J5aW5nCndhbHRlciB3aGl0ZSBkb29yIGtub2NrZXIKdGhlIGJhZAp3YWx0ZXIgd2hpdGUgaW4gYW5pbWFsIGNyb3NzaW5nCndhbHRlciB3aGl0ZSBpbiBhdHRhY2sgb24gdGl0YW4Kd2FsdGVyIHdoaXRlIGluIHRoZSBzaW1wc29ucwp3YWx0ZXIgd2hpdGUgaW4gdGhlIHdhbGtpbmcgZGVhZAp3YWx0ZXIgd2hpdGUgaW4gcm9ibG94Cm9yYml0aW5nIGEgc3RyYW5nZSBwbGFuZXQKd2FsdGVyIHdoaXRlIHNtaWxpbmcKcGVyZmVjdCBzY2VuZQptb3ZpZSBzY3JlZW5zaG90IGZyb20gc3RhciB3YXJzCmRhYmJpbmcKc2l0dGluZyBpbiB0aGUgY2xhc3Nyb29tCnBvdWNoZXMKd2FsdGVyIHdoaXRlIGFzIGEgamVkaQp3YWx0ZXIgd2hpdGUgaGlkaW5nIGluIGEgc2V3ZXIKdW5saXQKd2FsdGVyIHdoaXRlIGluIHZhbG9yYW50CndhbHRvbidzIGZpdmUgYW5kIGRpbWUKYmF0bGVncm91bmQKY2hhaW5zYXcgc3dvcmQga2F0YW5hCmxvbmcgdHJ1bmsgaG9sZGluZyBhIHdhbmQKYnJlYWRzCmNhbnMKd2FycGVkIHBlcnNwZWN0aXZlcwp3YXNoaW5ndG9uIGNyb3NzaW5nIHRoZSBkZWxhd2FyZQphaWRlbiBwZWFyY2UKcmVhbGlzdGljIGdyYXBoaWNzCnNob290aW5nIGEgZ3VuCmh1Z2UgYmF0dGxlCndhdGVyY29sb3IgcGFpbnRpbmcgc3R5bGUKbHVzaCBwYXJhZGlzZQpsaWdodCBob3VzZQp3ZWxjb21lIHRvIHdvbmRlcmxhbmQKc2xpZ2h0bHkgYmx1cnJlZAp3aGF0IHN0YWJsZSBkaWZmdXNpb24gbG9va3MgbGlrZQpmcmllbmQKd2hlYXRseSBmcm9tIHBvcnRhbCAyCndoZW4gdGhlIHdpbmQgaXMgc2xvdwp3ZSBkZWh1bWFuaXplIG91cnNlbHZlcwp3aGltc2ljYWwgZm9yZXN0CndoaXRlIGZveCBhbmltZQp3aGl0ZSBtZWNoIGJvdApyb2JvdCBjb25jZXB0IGFydApkaWZmdXNlIHNoYWRvd3MKY292ZXJlZCBzZncgaHVnZSBicmVhc3RzCnRyZW5kaW5nIGluIGNhdGVnb3J5IGVwaWMKYXJ0IHJlbmRlcgp3aWNrZWQgd2l0Y2ggb2YgdGhlIHdlc3QKc3VwZXIgc21hc2ggYnJvdGhlcnMgdWx0aW1hdGUKc2hvdCBvbiBhIDkuOG1tIHdpZGUgYW5nbGUgbGVucwpwZXJmZWN0IHByb3BvcnRpb24KZXhwbG9zaW9ucyBhbmQgcHVycGxlIGxhc2VycwpleHBsb3Npb25zIGFuZCBsYXNlcnMKaW5jcmVkaWJsZSBzaGFycCBkZXRhaWwKdHVtYmxld2VlZAp3aWxkIHJpdmVyIGluIDE5MTQKc21va2luZyBndW4Kd2lsbCBzbWl0aCBkaXNuZXkgaW5maW5pdHkKd2lsbCBzbWl0aCBhcyBuZW8gaW4gdGhlIG1hdHJpeAp0cmFuc2Zvcm1pbmcgaW50byB3ZXJld29sZgp3aWxsZW0gZGFmb2UgYXMgc3BpZGVybWFuCnRvIGJlIG9yIG5vdCB0byBiZQp3aWxsaWFtIHNoYWtlc3BlYXJlCjE5IGNlbnR1cnkKc3RpbGwgZnJvbSB0aGUgdHdpbGlnaHQgem9uZQpwcm9tb3Rpb25hbCBwb3J0cmFpdAp3aW5hbXAgc2tpbgp3aW5kIHJpdmVyIHZhbGxleQp3aW5nZWQgdmljdG9yeSBvZiBzYW1vdGhyYWNlCmJhdHRsZS13b3JuCnJlY29uc3RydWN0aW9uCnJlYWwgbGlnaHRpbmcKaW4gc3R5bGUgb2YgZnJhbmNpc2NvIGdveWEKc2hhZG93dmVyc2Ugc3R5bGUKM2QgcmVhbGlzdGljIG1hdGVyaWFscwp3ZWFyaW5nIHN3ZWF0c2hpcnQKaG9sZGluZyBiZWVyCndvbGYgaW4gYSBzbm93ZmllbGQKd29sZiBpbiBoZWxsCndvbGZnYW5nIG5vdm9ncmF0egpicmFkIGt1bmtsZSBkZXRhaWxlZAp3b21hbiB2YW1waXJlCnN0eWxlIGVkd2FyZCBob3BwZXIKYmVhdXRpZnVsIGRhcHBsZWQgbGlnaHRpbmcKaW5zcGlyYXRpb25hbCBhcnR3b3JrCnZpdmlkbHkgZW5oYW5jZWQKcmVkIHdpcmVzIHdyYXAgYXJvdW5kCnNlbGVuYXIKd2l0aCBhIHdoaXRlIGJhY2tncm91bmQKc2VyZW5lIGFuZCBwZWFjZWZ1bCBzdHlsZQptZWxsb3cgc2t5IGJsdWUgbGlnaHRpbmcKd29tYW4gd2l0aCByb3NlIHRpbnRlZCBnbGFzc2VzCndvb2QgZWxmCmQmZCBwbGF5ZXIncyBoYW5kYm9vawp3b29kcm93IHdpbHNvbgpmdWxseSBjbG90aGVkLiBwYWludGluZyBvZiBzZXh5CndlYXJpbmcgYnJhCmhpZ2ggaGVlbHMuIGFuaW1lIHN0eWxlIGF0IHBpeGl2CmV4cHJlc3Npbmcgam95LiBieSBrcmVueiBjdXNoYXJ0CmJ1bGxldHMgd2hpenppbmcgcGFzdCBjYW1lcmEKd29ybGQgd2FyIDQKd29ybGQgb2Ygd2FyY2FyZnQKd29ybGQgb2Ygd2FyY3JhZnQgc3BlbGwgaWNvbgpkYWlseSBjYXJyeQpmb3Jlc2VlCndvcmxkIG9mIHdhcmNyYWZ0IGFydCBzdHlsZQpoaWdodCBkZXRhaWxzCnJvYiBsZWUKeGtjZAp4cWNvdwoxOTYwJ3MgcmFua2luIGJhc3Mgc3RvcCBtb3Rpb24KcmVkIGxpcXVpZCBkcmlwcGluZyBmcm9tIGFib3ZlCm1hbnkgd2lyZXMgYXR0YWNoZWQgdG8gaGVyCnJpYiBjYWdlIGV4cG9zZWQKeGVub21vcnBoIG9jdG9wdXMgaW4gYSBzd2FtcApob2xsb3cga25pZ2h0IHN0eWxlCnllbm5lZmVyIG9mIHZlbmdlcmJlcmcKc2FtCjRrIHJlc29sdXRpb24gdmVyeSBkZXRhaWxlZApkcmFtYXRpYyBkdWVsIG9mIHRoZSBmYXRlcwpuZW9uIGxpZ2h0cyBpbiBiYWNrZ3JvdW5kCnNlcmVuZSBiZWRyb29tIHNldHRpbmcKdXBiZWF0CnlvciBmb3JnZXIKZmFjZSBjbGVhcmx5IHZpc2libGUKKGZhbnRhc3kpCnlvdXR1YmUgY2xpY2tiYWl0CnlvdW5nIGFsbWlnaHR5IGdvZApwbGFpbiB3YWxscyB8bGlnaHQgaGVhcnRlZApsb25nIGFzaHkgaGFpciB8IGdlbnRsZSBsaWdodGluZwp5b3VuZyBoaW1hbGF5YW4gd29tYW4KbHVtaW5lCnlvdW5nIGdpcmwgaW4gc3RlYW1wdW5rIGNsb3RoZXMKY29sb3Igc3R1ZHkKZW1vIG1ha2V1cApicm9hZCBsaWdodGluZwp6YXluIG1hbGlrCnJlYWxpc3RpYyBmYWNlIG1vb2R5IGxpZ2h0aW5nCmN1dGUgc2Nob29sZ2lybApyZWRoZWFkIGdpcmwKYmx1ZSBhbmQgcGluayBsaWdodGluZwp6ZW5kYXlhIGFzIHNoZS1odWxrCigoemVyYXRvcikpCnplcmcgaHlkcmFsaXNrCnpob25nbGkgZnJvbSBnZW5zaGluIGltcGFjdApqYW1lcyBqZWFuISEhCnppbmUgY292ZXIKemlyY29uaXVtIHBhbnRzCnpvZSBrcmF2aXR6IGFzIGFuIGFzdHJvbmF1dAp6b21iaWUgcm9uYWxkIHJlYWdhbgp2aWRlb2dhbWUgZ3JhcGhpY3MKem9tYmllIGhvcmRlCmFiYW5kb25lZCB2ZWhpY2xlcwp6b21iaWUgcGlyYXRlCnpvb3RvcGlhICgyMDE2KQp0aGljayBsaW5lIGluawpbIFsgc29mdCBdIF0KNCBrIG9pbCBwYWludGluZwpwb3AgbWFrZXVwIHN0eWxlCnNjaWVuY2UgZmljdGlvbiBhcnQgXQpuZWFyIHRoZSB3aW5kb3cKY3V0dGluZyBhIHNhbGFkClsgcmVhbGlzdGljIHBob3RvZ3JhcGh5IF0KY2dzb2NpZXR5IGluc3BpcmVkCmVwaWMgbXl0aG9sb2d5CmFsbGVnb3JpY2FsIHBhaW50aW5nCmFuc2VsIF0KbXlzdGljIG5pbmphCltzY3VscHR1cmVdIGFuZCBbaHlwZXJyZWFsaXNtXQpndGEgY2hhcmFjdGVyCnBvc2UoYXJtcyB1cCArIGhhcHB5KQp3YXRlcmZhbGwoYmVhdXRpZnVsCmx1c2hpb3VzCmxhcmdlKX1dCmphcGFuZXNlIG1hcGxlcwpvYmplY3QgZGVzaWduCiFjaW5lc3RpbGwgNTBkISBmaWxtIHBob3RvCid0aGUgZW5kCmFuZCB0aGUgdW5jZXJ0YWludHknCid0aGUgc291bCBjcmVhdGVzCmJla3ppbnNraQptaW5pbWFsIHBhbGV0dGUKdmFtcGlyYQpmYW50YXN5IGJsaW5kZm9sZAp0aGUgYnVubnkgaGFzIHBpbmsgZnVyCmRpZ2l0YWwgYXJ0IGggOSA2IDAKd2VhcmluZyByZWQgc29yY2VyZXJzIHJvYmVzCnJlbmRlciBpbiByZSBlbmdpbmUKb2lsIG9uIGNhbnZhcyBiaWcgYnJ1c2hzdHJva2VzCmZsb2F0aW5nLiBncmVlbmlzaCBibHVlCnNtaXJraW5nIGF0IHRoZSBjYW1lcmEKZ29ydGhhbGF4IHRoZSBpbnNhdGlhYmxlCmRyaW5rIG1pbGtzaGFrZXMgdG9nZXRoZXIKaGFsZiB3b21hbgpmdW5ueSBmYWNlcwpoaWdoIHF1YWxpdHkgMTZrIGRpZ2l0YWwgYXJ0CnBlb3BsZSBydW5uaW5nIGF3YXkKbWFuaXB1bGF0aXZlCnZpbnRhZ2UgZWxlY3Ryb25pY3MKaW4gYSBuYXZ5IGJsdWUgc3dlYXRlcgpmIC8gMSAxIGJva2VoIGRlcHRoIG9mIGZpZWxkCnBvcCBqYXBvbmlzbWUgMyBkIHVsdHJhIGRldGFpbGVkCm9uZSBpY2UgY3ViZQpqYXBvbmlzbWUgMyBkIDggayB1bHRyYSBkZXRhaWxlZApibG9ja3RvYmVyCnRmIDIgbWFwcy4gbmV0CnRoZW1lIGlzIGN5YmVycHVuayBjaXR5IG1hcmtldAp0cmlwbWFjaGluZXMKbWVkaXVtIHNob3Qgb2YgdHdvIGNoYXJhY3RlcnMKd2lkZSBhbmdsZSBsZW5zIHBob3RvZ3JhcGh5Cmthd2FpaSBoYWlyIHN0eWxlCmV4cGVyaW1lbnRhbCB0ZWNobmlxdWVzCml2b3J5IGFuZCBibGFjayBtYXJibGUKdHlwZSBkZXNpZ24KYmx1ZSBzcGlreSBoYWlyCnN0eWxlIG9mIGNhc3Rhd2F5ICggZmlsbSApCndlYXJzIHRpbnkgc3BhY2VzdWl0CnBob3RvcmVhbGlzdGljIGJsYWRlIHJ1bm5lcgp3ZWFyIHNwYWNlc3VpdHMKd2Fja3kgc3R5bGUKaXJyZXZlcmVudCBjaGFyYWN0ZXJzCmluIHRoZSBmYXIgZnV0dXJlCndhbHRlcgpubyBzdHViYmxlCmJlZXRzCmFydGdlcm4KYWRvcm5lZCB3aXRoIGFsbCBraW5kIG9mIHBsYW50cwp2ZXJ5IG9ybmFtZW50ZWQKbHVtaW5vdXMgY29sb3JzCnRoZSBqYXcgc2hvd2luZyB0aGUgdGVldGgKZnVsbCBib2R5IHNob3QgaHlwZXJkZXRhaWxlZAphcm1hZGlsbG8gcGF0cmlvdCBwb3R1cwphbHkgZmVsbApvbiBpdHMgb3duCnRzdXJ1ZGEKZGV0YWlsZWQgcHJvZmVzc2lvbmFsIGFydAp3ZWFyaW5nIGEgd2F0Y2gKaGFpciBnZWwgY29tYmVkIGJhY2t3YXJkcwpwaXN0b2wgb24gaGlzIGhhbmQKbmF0dXJhbCBiZWFyZApuYXR1cmFsIG11c3RhY2hlCnNsaWdodCBoYXplCndlYXJpbmcgdHV4ZWRvCmRyZXNzaW5nIHRhc3NlbHMgZ2Vtc3RvbmVzCmNhcnZlZCBpbiB3aGl0ZSBtYXJibGUKZGF5c2llcwpncmFzcy4ga29kYWsKc3BpcmFsaW5nIGRlc2lnbgpmcm9tIGEgbWFydmVsIG1vdmllCnNoYXJwIGRlZmluaXRpb24KY292ZXJlZCBpbiBvaWwgcGFpbnRpbmcKcGFpbnRlZCBsb29rCndhbGtpbmcgb24gdGhlIGJlYWNoCmNocmlzIHNhdW5kZXJzCmZpbmUtZ3JhaW5lZApjaGFyY29hbCBsaW5lIGFydAp0cmFpbCBjYW1lcmEKcGFpbnRlZCBvbiBzaWxrCnR1cm50YWJsaXN0CmhpcC1ob3AKaGlnaGx5IGRldGFpbGVkIGFuZCBjb2xvcmVkCnN3YXNoYnVja2xlciBjbGFzcyBwaXJhdGUKcmVhbGlzdGljIHN0dWRpbyBwaG90bwptYXJzaGFsIG1hdGhlcnMKc2xpbSBzaGFkeSB0ZW5uaXMgYmFsbCBtb25zdGVyCmRhcmsgc2NpLWZpIGFydApmaW5uaXNoIGNhcnRvb24KbGFyZ2UgZWRkaWVzCnN1cGVyIHBob3RvIHJlYWxpc3RpYwpncmljCmFydGZ1bApvcmFuZ2VzIGZsb2F0aW5nIGluIHRoZSB3YXRlcgpsb3cgZmlkZWxpdHkKd2l0aCBicmVhZCBpbiB0aGUgc2xvdHMKbWlsaXRhcnkgb3V0cG9zdApjYW1wcyBpbiB0aGUgYmFja2dyb3VuZApkcnVtIHBhZHMKZ2lybCB3aXRoIGZlYXRoZXJzCmZpZ2h0IGJhdHRsZQp0aGUgc3RyZWFtZXIKODM0Nzc5NTE5CjE3ODY1NjA2MzkKNTU1NDAwODMxCjMyNzQ1ODk2OTUKMTgwMTQ0NjE0MwozMjg0NDc5OTk5CjI3MDg1MTk5MzUKMTI4NTQ0NTI0N10KcGl4aWUgdW5kZXJjdXQgc2hvcnQgYmxhY2sgaGFpcgptaWRkbGUgZWFzdGVybiBza2luCmJlYXV0aWZ1bCBkeW5hbWljIGRyYW1hdGljCmRlZXAgcHVycGxlIHZlaWwKbmlra29yIDIwbW0gZjEuOCBsZW5zCmV4cG9zdXJlIDEvNDBzZWNzCmNhcHRhaW4gaGF0CndvcAphbmRyZXkgc3Vybm92CjAwMCDigJQg0LLQuNC60LjQv9C10LTQuNGPCnNoYXJwIGphd2xpbmUgd2l0aCBhIGxpZ2h0IGJlYXJkCmFubmliYWxlIHNpY29ub2xmaQp2YXBvcndhdmUgYXJ0d29yayBjb21wb3NpdGlvbgpmb3JkIG1vZGVsIHQKc21va2luZyBib2R5Cmxpa2UgbGFkeSBtZWNoYW5pa2EKY29zbWljIHNraWVzLiBieSBtYWtvdG8gc2hpbmthaQpsaWtlIGt5b3RvCmxpa2Ugaml1ZmVuCmZ1bGwgb2YgY29sb3JmdWwgdmVnZXRhdGlvbgpzaGlueSEhCnBvbGljZSBvZmZpY2VycwpzdXBlcmltcG9zZWQgY29tcG9zaXRpb24KcHJpbWl0aXZlIGF0bW9zcGhlcmUKaGFtbWVyIHdlYXBvbgptb29ubGlnaHQgbGlnaHRpbmcKc3Vycm91bmRlZCBpbiBjbG91ZHMgYW5kIGxpZ2h0Cm5lYnVsYXMgaW4gYmFja2dyb3VuZApkZXRhaWxlZCBiZWF1dGZpdWwgZmFjZQpjdWIKbW90aGVyIG9mIHdpdGNoZXJzCm9sZCBob21lIGRlY29yCmxldHRlcmluZyBjbGVhbgpvdmVyZ3Jvd24gd2l0aCBwdWZmeSBvcmNoaWRzCm9jdGFuZSByZW5kZXIgc2hhcnAgZm9jdXMKd2VhcmluZyBhbmltYWwgc2tpbiBjbG90aGluZwp3YXJ6b25lIGJhY2tncm91bmQKbmlnaHQgLSB0aW1lIGNpdHkgYmFja2dyb3VuZAphdCBsdXNoIGZvcmVzdCBiYWNrZ3JvdW5kCnRvcCAyNSBmYW50YXN5IGFuaW1lIHNlcmllcwpjdXN0b21lcgpzaWxrIGhhdApoZSdzIHZlcnkgbWVuYWNpbmcgYW5kIGV2aWwKc2l0dGluZyBvbiBhbiBhcm1jaGFpcgp1c2luZyBhIGV4b3NrZWxldG9uCmZyYW56IGZyYXpldHRhCmFuYWxvZ2ljIHN5bnRoc2l6ZXIKZmx5aW5nIG15dGhpY2FsIGJlYXN0cwpoYW5kcyB3aGljaCBleGNoYW5nZSBzZWVkcwpsZXMgY2F0YWNvbWJlcwpwaG90b2dyYXBoeSBjYW5vbgp1bmRlcmdyb3VuZCBwYXJ0eQppbmR1c3RyaWFsIHBpcGVzCmh1bWFuIGxpa2UKc3BvcnRzcGFsYXN0IGFtcGhpdGhlYXRyZQphbHRlcm5hdGUgcmVhbGl0eSBjZXJhbWljIGFnZQpibHVlIHNlYS4gYnkgbWFrb3RvIHNoaW5rYWkKYmhhcmUKY3JvcHRvcApwYWludCBzcGxhc2hlcyBhbmQgc3BsYXR0ZXIKbmVvbiBvdXRsaW5lcwpwaG90byByZWFsaXN0CmdsYWNpZXJzIGFuZCBpY2UgYW5kIHNub3cKZ2VzdGF0aW9uIGluc2lkZSBhIHdhdGVybWVsb24KbWFkYWdhc2NhcgpwcmVoaXN0b3JpYyBjYXZlIGFydApjb3ZlcmVkIGluIGNpcmN1aXRyeQptYWNybyA4bW0gcGhvdG8KdG9vayBvbiBpcGFkCnBob25lIHJlY29yZGluZwphbmF0byBmaW5uc3RhcmsuIHBlcmZlY3QgZmFjZXMKbWFzY290IGlsbHVzdHJhdGlvbgphdCB0aGUgd2hpdGUgaG91c2UKYmxhY2sgdHVydGxlbmVjawpmbG91ciBkdXN0CnBhc3RlbCByb3Nlcwprb2RhayBnb2xkIDMgNSBtbSBmaWxtCm1hbnkgY29sdW1ucwp1bmNvbnNjaW91cyBkZXNpZ24KdHNoaXJ0Cmx1eGlnb24Kcm9zc2RyYXdzIDIuIDUKY29sb3IgZG5kIGlsbHVzdHJhdGlvbgp3YXRlciBjb3ZlcnMgZXZlcnl0aGluZwpwZXRlciBzY3VsdGhvcnBlCnN0eWxlIG9mIGFuZGVycyB6b3JuCndpdGggc3ltYm9saWMgZWxlbWVudHMKZ3JlZWsgZWxlbWVudHMKYmxpbXAKbmlrb24gMjAwbW0KYXQgYSBjYW1wZmlyZSBpbiB0aGUgZm9yZXN0CmRldGFpbGVkIHRyZWVzCnRlbGVwaGhvdG8KYnl6YW50aW5lIG1vc2FpYwppbiBhbiBlcGljIHZhbGxleQpyZWFsaXN0aWMgYWlyY3JhZnRzCnJlYWxpc3RpYyBzb2xkaWVycwppbiBhIGNvc21pYyBmaWVsZApzdGFycyBhbmQgbW9vbnMgaW4gdGhlIHNreQpsaWtlIGEgY3Jvd24KdW1hbWkKaW4gY29uY2VwdHVhbCAmIGNvYnJhIHN0eWxlCnJ1bm5pbmcgZnJvbSBiZWFyCnJob2RlIGlzbGFuZApmcmFjdGFsIGJlYXJkCnN0YW5kaW5nIGluIGhpcyBjbHV0dGVyZWQgZ2FyYWdlCm1ldGFsIHdpdGggZ3JhZmZpdGkgb24gdGhlIHNpZGUKaW50cmlpY2F0ZQpvcm5hdGUgZXhvc2tlbGV0b24KY290dwpiZWF1dGlmdWwgc3ltbWV0cmljCnBvdGhvcmVhbGlzdGljCnJlYWxpc3RvYwo4ayBuIDkKaW4gdGhlIHRoaWNrIGZvZwpnaWxkZWQgc3dpcmxzIG9uIG1vbm9jaHJvbWUKb3ZlcmhlYWQgZ3JvdW5kIGZsb29yCmNhdGhvbGljIHB1bmsKbG9uZyBlYXJyaW5ncwp0aGljayBjb2xvcmZ1bCBzbW9rZQpzdGFuZGluZyB3aXRoIGhlciBiYWNrIHRvIHVzCmh5cGVyLWRldGFpbGVkIGVudmlyb25tZW50CnNpbXBsZSBkcmVzcwppbnRlbnNlIGZhY2UKc3BhdHRlcnMKbGl2ZWx5IGlycmVndWxhciBlZGdlcwpkZWFkbHkgYWxpZW4gcGxhbnRzCndlbGwgcmVuZGVyZWQuOjEKaGlnaCBzcGVlZCBjYW1lcmEKb2xpdmlhIGRlIGJlcm5hcmRpbmlzCm1lYWQKZm9vZCBjb3VydCBpbiBhIG1hbGwKaW4gZGVhZCBzcGFjZQpzdHlsZSBvZiBnaG9zdCBibGFkZQpmbHlpbmcgc3BhY2VzaGlwcwppbnRyaWNhdGUgcHN5Y2hlZGVsaWMgcGF0dGVybnMKbmluYSB0cnlnZ3ZhZG90dGlyCnBzeWNoZWRlbGljIHZlZ2V0YXRpb24KY29sb3JmdWwgdmVnZXRhdGlvbgplcGljIGZvcmVzdHMKdGFuZ2xlZCB0cmVlcwp3b29kZW4gc3RydWN0dXJlcwp0YWxsIHN0b25lIHNwaXJlcwpiZWVwbGUgY29sb3JzCm1ldHJvcG9saXMgZmlsbWljIGdvdGhhbSBjaXR5CnN0dW5uaW5nIHNjaS1maSBjb25jZXB0IGFydApzeW1tZXRyaWNhbCBkb29yd2F5CnBhc3RlbCcKc2FjaHVjY2kgOSA1CjE5ODAncyBhbmltZSBzdHlsZQpkcmFtYXRpYyBzdHVkaW8gbGlnaHQKbW91bnRhaW4gbGFiZWwKZWx0b24gam9obiBpbiBhIGZpc3QgZmlnaHQKbmVvbiB2aWJlcwpmYWNlIHN0dWR5CmluIGEgZGFyayBmb3Jlc3QgbG93IGxpZ2h0CmFyb3VuZCB0cmVlIGJhYmllcyBydW5uaW5nCmRyYWtlbmdhcmQKbW9ob2x5IG5hZ3kKcGFkZGVkIHNob3VsZGVycyBqYWNrZXQKcGVvcGxlIG9uIGEgcGljbmljCmN1dGUgZ2lybCB3aXRoIHNob3J0IHBpbmsgaGFpcgpmdXR1cmUgaW5mbGF0YWJsZSBqYWNrZXQKYmFzaWMgY2xvdGhpbmcKcnVzdCBhbmQgcGxhc3RlciBtYXRlcmlhbHMKcHV0dGluZyBvbiBsaXBnbG9zcwplZXJpZSBtb29ybGFuZHMgYmVoaW5kIGhlcgpwbGVhc2UgZG8geW91ciBiZXN0Cmh1bWFuaXR5J3MgbGFzdCBzYWNyaWZpY2UKb25seSBob3BlCmlsbHVzaW9uIG9mIGJlbnQgdGltZQpmcm9tIHJhbWF5YW4KaW4gdGhlIGFwb2NhbHlwdGljIGZ1dHVyZQpkZXRhaWwgc3RydWN0dXJlCmNvcm9uYWwgc3Rvcm0Kd2V0IHNpZGV3YWxrCnNlZW4gaW4gdGhlIGRpc3RhbmNlCnNtaWxpbmcgY295bHkKZ3JleSBwb3JjZWxhaW4gc2N1bHB0dXJlCmFtYmllbnQgY2F2ZSBsaWdodGluZwo0ayBoeXBlcnJlYWxpc3RpYwphbGVqYW5kcm8gYnVyZGlzaW8gYXJ0CnR5bGVyIGVkbGluIGZhbnRhc3kgYXJ0CmN1cnZlcyEhCm5hdHVyYWwgY29udG91ciBhZXN0aGV0aWNzISEKcmluZyBpbiB0aGUgc2t5CnNub3cgd2VhdGhlcgpsb3cgcHJvZmlsZQpmYWtlIGNhdCBlYXJzCmNvc3BsYXkgb2YgYSBjYXRib3khIG1haWQhIGRyZXNzCmhheWFvCnN2ZXRsYW5hIGJlbHlhZXZhCnNvdXRoZXJuIHdpbGRmbG93ZXJzCmJsYWNrIGZyYWN0YWwgZmlsaWdyZWUKdmFyaWF0aW9ucyBhcm91bmQgZmVtYWxlCm1hZ25pZnlpbmcgZ2xhc3MKYWRvcm5tZW50cwptaWNoYWVsIHNoYXBjb3R0CnJheXB1bmsKY3lyaWwgcm9sYW5kbyBhbmQgbS4gdyBrYWx1dGEKbmVnYXRpdmUgYW5kIHBvc2l0aXZlIHNoYXBlcwpuZWJ1bGFlLiB2b2x1bWV0cmljIGxpZ2h0aW5nCmplbGx5IGZpc2hlcwpjYWxlZG9uaWFuIGZvcmVzdAppbnJpY2F0ZQptYW55IGdvbGRlbiBsYXllcnMKbW91bnRhaW5zIHJpdmVyIHRyZWVzCmh1Z2Ugd2F0ZXJmYWxscwpiaXJkcyBmbHlpbmcgaW4gdGhlIHN1bmxpZ2h0Cm1hZ2ljYWwgc2NlbmUKZHVzdCBjbG91ZHMuIGhvbW9lcm90aWMKaGFuZC1kcmF3bgpzaGFycCBsaWdodGluZy4gYnJpZ2h0IGNvbG9yCmxhdWdoaW5nIGFsaWVuIGZhY2UKdmVyeSBsb25nc2hvdApyb3NzIHRyYW4gYW5kIG1pY2hhZWwgd2hlbGFuCnNvbWUgZmlyZWZsaWVzCmQgJiBkIGZhbnRhc3kgY2hhcmFjdGVyCmNsYWQgaW4gdmluZXMKd2VsbCBkcmF3biBleWVzCmJlYXV0eSBkaXNoCmRpdmEKaW4gYmxvb20gZ3JlZW5ob3VzZQptYWRlIG91dCBvZiBzaGlueSBzaWx2ZXIKaW1hZ2luYXRpdmUhIQpvbiBkdW5lCnNtYWxsIGxpcHMgcG9pbnR5IG5vc2UKYnJvd24gaGFpciBpbiB0d28gYnVucwptZWdhIHN0cnVjdHVyZQpkaWdpdGFsIG1hdHRlCnN1bW1lciBmZWVsaW5nCm9jdGFuZSBhcnQKdGlsdCB1cCBhbmdsZQpkZWVwIHNlYSBjeWJlcnB1bmsKcGluayBhY2NlbnRzCmNoYXJhY3RlciBpcyBzdGFuZGluZwpjaGFyYWN0ZXIgaXMgY292ZXJlZCBpbiBsaXF1aWQKY2hhcmFjdGVyIGlzIGhhbGYgaW4gdGhlIHdhdGVyCmJsYWNrIGFuZCB5ZWxsb3cgYW5kIHJlZCBzY2hlbWUKb3ZlcmxhcHBpbmcKc2tpbiB0ZXh0dXJlIG5hdHVyYWwKc3dhbGxvd3RhaWwgYnV0dGVyZmxpZXMKNCBrIGhkIHdhbGxwYXBlciBjIDEgNwpnaW5nZXIgaGFpciB3aXRoIGZyZWNrbGVzCmRldGFpbGVkIGFuaW1lIGFydHdvcmsKd2VhcmluZyBhbiBhZnJpY2FuIGRyZXNzCnVuaXF1ZSBoYWlyc3R5bGUKY2FzY2FkaW5nIGhhaXIKd2VhcmluZyBhbmNpZW50IGNoaW5lc2UgY2xvdGhlcwpjbG90aGVzIGZsb2F0aW5nCnNtb2t5IGNyeXN0YWxzCnRyYW5zbHVjZW50IGNyeXN0YWxzCmx1bWlub3VzIHNwYXJrbGluZyBjcnlzdGFscwp2aWJyYW50IHJlZCA4awptaW5pIG1hZ2ljIGNpdHkKZ2FsYXhpZXMgaW4gYmFja2dyb3VuZApmYWRlZCBkcmF3aW5nCmpvaG4gbWFydGluIGxhbmRzY2FwZQpwaW5rIGFuZCBibHVlIGNvbG9ycwpmdWxseSBjbG90aGVkIGluIHJlZCByb2Jlcwp3YXRlciBkcm9wbGV0cyBmcm96ZW4gaW4gdGltZQpzaXR0aW5nIGFsb25lIGF0IGEgYmFyCnJlYWxpc3RpYyBmZW1hbGUgcG9ydHJhaXQKZm9jdXMgY2xvc2Ugb24gbWlzY2hpZXZvdXMgZXllcwpyZWluYXNzYW5jZSBwYWludGluZwpzdW1tb25pbmcgYW4gZWxkcml0Y2ggZ29kCmluIGFuIGFuY2llbnQgYWx0YXIKY2hlcnJ5IHRyZWUgaW4gdGhlIGJhY2tncm91bmQKaW4gYSBnYXJkZW4gZnVsbCBvZiBmZXJucwptYXJpZ29sZCBmbG93ZXJzCjUwMHB4IHBob3Rvcwp2b21pdGluZyBibG9vZApkZXRhaWxlZCBsYWNld29yawp3aGl0ZSBhbmQgc2lsdmVyCmZsb3JhbCBsYWNld29yawpjaGFybGVzIGJhdWRlbGFpcmUKY3liZXJwdW5rIGdhcmFnZSBvbiBqdXBpdGVyCmNvbmNlcHQgYXJ0LWggNjQwCnRob21hcyBjb2xlIC0gaCA3IDAgNAplZGRpZSBoLiBoaW5lc3Ryb3phCmV4dHJlbWVseSBkZXRhaWxlZCByYWNjb29uCnN1cGVyIGNvbG9yZnVsCm9uIGEgY2xvdWR5IGRheQptYW5neQpzaW1wbHkgc3R5bGUKYXRsYW50aXMgY2l0eQpiZXV0aWZ1bCBmYWNlCnNsb3cgbW90aW9uIGZhc2hpb24KYWZhcgpza3VsbHMgYW5kIGdhcyBtYXNrcwpiZWF1dGlmdWwgYW5kIGNvbG9yZnVsCmNvbXBvc2l0aW9uIHN0dWR5CmZpZXJ5IHBhcnRpY2xlcwpjYXBzdWxlIGhvdGVsCmJpcmQncyB2aWV3CnN0ZWFtcHVuayBjaGFuZHJhIHF1ZWVuIG9mIGZpcmUKYmlnIGdvb2dsZXMgb3ZlciBoZXIgaGVhZApsZWFuaW5nIG9uIHRoZSB3YWxsCmRhcmsgZmxvd2luZyByb2JlCm9ybmF0ZSBmbG93aW5nIHJvYmUKZXllcyB3aXRoIGNhdGNobGlnaHQKYW5pbWUgYXJ0IHdhbGxwYXBlciA4IGsKcml2ZXIgd2l0aCBzdHVubmluZyB3YXRlcgpzdHVkaW8gZ2hpYmxpICYgamFtZXMgZ3VybmV5CnJlZCBhbmQgb3JhbmdlIGNvbG9yIHNjaGVtZQpicmlsbGlhbnQgcGVha3MKdmlicmFudCBzdW5yaXNlCndhdGVyIHJ1bm5pbmcgZG93biB0aGUgd2FsbHMKZHJhbWF0aWMgbGlnaHRpbmcuIHJlYWxpc3RpYwpjaG9jb2xhdGUgcml2ZXIKaW4gcnl1dW91IG5vIG9zaGlnb3RvIGFydCBzdHlsZQpyb21hbnRpYyBhdG1vc3BoZXJlCm5vIHllbGxvdyBjb2xvciBpbiBleWVzCm5vIHllbGxvdyBjb2xvcgpvcmFuZ2UgcmF5CmluIHRoZSBpY2VsYW5kIGNhbG0gd2F0ZXIKOGsgaGQgdHJlbmRpbmcgb24gYXJ0IHN0YXRpb24KcmFkaWF0aW5nIHJlYmlydGggZW5lcmd5CmJyaWxsaWFudCBhZXN0aGV0aWMgbGlnaHRpbmcKa2ludHN1Z2khIQpmdWxsbW9vbgpvcGFsZXNjZW50IG1pc3QKcnVzc2lhbiB2aWxsYWdlCmNhbQptb251bWVudGFsIHN0cnVjdHVyZXMKdGhlIHNreSBpcyB0aGUgZ2FsYXh5CmdsdWVkCmFzc2VtYmxlCmdlbnRsZSBzbm93Cm1hbGxzCmVhcmx5IGZvZ2d5IG1vcm5pbmcKZ29sZGVuIG51bWJlcgpncmVnIHJ1dGtvd3NraSAtIGggNyA2IDgKc3ByaW5nIGNvbG9yIHNjaGVtZQpncmVlbiBhbmQgYmx1ZQp2aXZpZCBnbG93aW5nIGNvbG9ycwphcXVhcml1cwp3aGlza3kKdXBwZXIgYm9keSBhbmQgZmFjZQp3YXZlcyBjcmFzaGluZyBhdCByb2NrcwpoYXlhbyBtaXlhemFraSdzIGFuaW1hdGlvbiBzdHlsZQpsb3VpcyBkdXByZQpoeXBlcnJlYWxpc3RpYyEKZ2FsYWN0aWMgd2F0ZXJmYWxscwpmaXJlIG9uIHRoZSBob3Jpem9uCnN5bW1ldHJpY2FsIG5lb24gcmltIGxpZ2h0CmN5cHJlc3MgdHJlZXMKY3lhbiBzaHV0dGVycyBvbiB3aW5kb3dzCnRvZG8gaGVjaG8gY29uIHBhcGVsIGRlIHBpbmF0YQpqYXBhbmVzZSBtYW5nYQpyZWQgaG9yaXpvbgpibGFjayBkb3RzCmFsbW9zdCBibGFjawpjaGFpbnNhdyBtYW4gbWFuZ2EKZXhjZWxsZW50IGNvbnRyYXN0CncgMSA5IDIgMApoIDEgMCA4IDAKYXJjaHZpcwpkaWdpdGlhbCBwYWludGluZwpvcm5hdCBjb25jZXB0IGFydCBpbGx1c3RyYXRpb24KaW5zaWRlIHRoZSBidWlsZGluZwpicmlnaHQgbW9vbmxpZ2h0IGFuZCBzdGFycwp3ZXN0c2lkZQplbGRyaXRjaCBnb2RkZXNzCmF0bW9zcGhlcmljIGFydHdvcmsKd2FzaGluZyBoZXIgZGFyayBsb25nIGhhaXIKZmFkaW5nIGF3YXkKdGhlIGxpdHRsZSBtZXJtYWlkCndvdWxkIHlvdSBsZXQgbWUgZHJlc3MgeW91CmNlbnRyYWwgY2lyY3VsYXIgY29tcG9zaXRpb24KaWxmb3JkIGRlbHRhIDMyMDAKa29kYWsgcG9ydHJhIDE2MCBwcm9mZXNzaW9uYWwKZ29kIHJheSBhY3Jvc3MgaGVyIGZhY2UKY2lyY2EgMSA4IDUgOApzdW1tZXIgc3VuCnVsdGltYXRlIG9jdGFuZSByZW5kZXIKMjAwIG1tCmV4dHJhdGVycmVzdGlhbAp3YXJtIGNvbG9ycyBzY2hlbWUKYWxsdXJpbmcgcGx1cyBzaXplZCBtb2RlbAp1bHRyYS1yZWFsaXN0aWMgZGlnaXRhbCBhcnQKZ29sZGVuIGNyYWNrcwpuZW9uIGFtYmllbmNlCmVsZWdhbnQgcmVuZGVyCmlyaWRlc2NlbnQgc2tpbgprb2RhayB0cmkteCBwYW4gZmlsbQp3aW5raW5nIG9uZSBleWUKd2V0IGxlYXZlcwpzY2llbnRpZmljIGVhcnRoIGNydXN0CmJsYWNrIHNjbGVyYSBleWVzCjEgOCAzIDAgcyBzdHlsZSBwYWludGluZwpzbm93Zmxha2VzIGZhbGxpbmcKY3liZXJuZXRpYyBvcmdhbmlzbQpvdmVyZ3Jvd24ganVuZ2xlIHJ1aW5zCndlYXJpbmcgYXRzdWtvIGt1ZG8gbGF0ZXggb3V0Zml0CmR1eSBiZW5pIHNlcmlhbAp0cmljaHJvbWF0aWMgY29sb3JzCmFtZXJpY2FuIGluZGlhbiBoZWFkZHJlc3MKd2luZ2VkIHZpY3RvcnkhISEKZnVsbGJvZHkgY29tbWlzc2lvbiBmb3IKbGFiIGNvdmVyZWQgaW4gbW9sZCBhbmQgbW9zcwpwYXRjaGVzIG9mIHllbGxvdyBza3kKbWlsaXRhcnkgaW5kdXN0cmlhbCBjb21wbGV4CnNpbHZlcu+8jGl2b3J5CnJlbGllZiBzY3VscHR1cmUKb24gYSBtYW5uZXF1aW4uIHN0dWRpbyBsaWdodGluZwpibGFjayBhbmQgd2hpdGUgbWFuZ2EgY29taWMKb3V0cnVuIHN0eWxlCmdyYXNzeSBmaWVsZHMKaGVhZHBob25lcyBvbgp3aW5kb3cgYW5kIGNpdHkgYmFja2dyb3VuZAp0b25lZCBwYXBlcgo0IGsgaGQgd2FsbHBhcGVhcgpsYW5kc2NhcGUgc2NlbmVyeQpwdWZmeSB3aGl0ZSBjbG91ZHMKdmlicmFudCBwYXN0ZWwgY29sb3IgcGFsZXR0ZQpkaXNuZXkgc3RlYW1wdW5rCndoaXRlIG9yY2hpZHMKY2FtcGZpcmUgYmFja2dyb3VuZApzZWxmIGVyb3RpYwpqdXN0IGFmdGVyIHJhaW4KdGVjaG5vIGV5ZXMKaW5kdXN0cmlhbCByb2JvdGljIGNhdHMKaW5kdXN0cmlhbCBtZWNoYW5pY2FsIHJvYm90IGRvZ3MKaGFuZCBnZXN0dXJlcwpoZWF2eSBtYWtlIHVwCmRldGFpbGVkIHdvb2QgY2FydmluZwpjaGluZXNlIGRyYWdvbnMgZmlnaHRpbmcKc2NhbGVzIG1hZGUgb2YgamFkZQplbGVjdHJpYyBjYWJsZXMKaHVtYW5vaWRzIG92ZXJncm93biB3aXRoIGZsb3dlcnMKdmlicmFudCBhbmQgY29sb3JmdWwKY2xlYXIgc2Vhcwpob2xkaW5nIGEgc2hpZWxkIGFuZCBnbGFkaXVzCmFic3RyYWN0IHBhaW50aW5nIGZhYnJpYyB0ZXh0dXJlCnRyYWNlcnMKY2xvdGhpbmcgY29uY2VwdApoaWdobHkgZGV0YWlsZWQgNCBrIHBhaW50aW5nCnJpY2ggZGVjYXlpbmcgYmxlZWRpbmcgY29sb3JzCmRpbmVyIGJhY2tncm91bmQKcGFyayBsYW5kc2NhcGUKbWFsbCBiYWNrZ3JvdW5kCmludHJpY2F0ZSByZWFsaXN0aWMgZmFudGFzeQpwaGlsIG5vdG8gYW5kIHJlYmVjY2EgZ3VheQp1cmJhbiBza3lsaW5lCnRoZSB3b21hbiBpcyBiZWhpbmQgYmFycwpyaXZlciBpbiB0aGUgYmFja2dyb3VuZAptb29uIGJlaGluZApsaWtlIHJvbGYgYXJtc3Ryb25nIHN0eWxlCmhhbmQgLSBwYWludGVkCnZpY3RvcmlhbiBhcm1vcgpjb3p5IGNhZmUgYmFja2dyb3VuZApjbG9zZSAtIHVwIHBob3RvZ3JhcGh5Cm9jdGFuZSByZW1kZXIKYW5hdG9teSBzdHVkaWVzCmhhbGYgb25lc2lkZWQgc21pbGUKbG9va3MgbGlrZSBhdWRyZXkgaGVwYnVybgp3YXRlciByZWZsZWN0aW9uISEhISEKd2F0ZXIgbWlycm9yZWQgd2F0ZXIKcmVmbGVjdGlvbiBlY2hvCm1pcmFuZGEgY29zZ3JvdmUKdGFsbCBmbG93ZXJzCmluIHN0eWxlIG9mIGFpdmF6b3Zza3kKd2VhcmluZyBhIHN1biBkcmVzcwpicm9tIGFydAp3ZWFyaW5nIDEgOSAyIDAgcyBmYXNoaW9uCmFuZ2xlIGZhY2UKZGFyayBkYW5jZSBwaG90b2dyYXBoeSBhZXN0aGV0aWMKbXVyYW5vIGdsYXNzIHNjdWxwdHVyZQpoaXMgaGFpciBtb3ZlcyB3aXRoIHRoZSB3aW5kCnRvdGFsbHkgYmxhY2sgZXllcwpkYW5jaW5nIG9uIHRoZSBiZWFjaAo1IDAgbW0gZiAxLiAyCmxvbmcgZmxvd2luZyBtZWR1c2EgaGFpcgpmdXJpbyB0ZWRlc2NoCnRpa3RvayA0IGsgdWhkIGltYWdlCmZvY3VzIGNsb3NlIG9uIGRldGVzdGluZyBleWVzCmd1aWx0eSBnZWFyIGFydCBzdHlsZQpleHRyZW1lbHkgaGlnaCBkZXRhaWwhIQp0aWx0ZWQgaGVhZAp3aXRoIHNjcmVlbnMgYW5kIHNpbGtzCm1pbmltYWwuIHNoYXJwIGZvY3VzCmJlYXV0aWZ1bCBjb2xvcmZ1bCBjb3JhbHMKIyAyIDIgMyAzIGUgNgp1bmV2ZW4gZ2xhc3MgYXBwbGUgaW4gdGhlIGRhcmsKYW50aXF1ZSBwaWVjZQpleWVzIG9wZW5lZApmYWNlIGZvcndhcmQKaW4gYSBtZW5hY2luZyBwb3NlCmxvdyB2YW50YWdlIHBvaW50CmluY29tcHJlaGVuc2libGUgc2NhbGUKcGVvcGxlcwpuZXcgbW9kZXJuCnZvbGNhbm9lcyBpbiB0aGUgYmFja2dyb3VuZApwZXRlciBncmljIGFuZCBkYW4gbXVtZm9yZApmdXJuaXR1cmUgY29uY2VwdCBwaG90byEhCnBob3RvcmVhbGlzdGljIG1hZ2F6aW5lIHBpY3R1cmUKZXh0cmVtZWx5IGRldGFpbGVkIGFuZCByZWFsaXN0aWMKY2xvc2UgdXAgZHNsciBwaG90bwpjb2xvcmZ1bCBvdGhlcndvcmxkbHkgdHJlZXMKc3RhbmRpbmcgaW4gdGltZSBzcXVhcmUKaW5ldml0YWJsZSBkb29tCnZlbmljZSBhdCBkdXNrCjQgayBwaG90b3Nob3BwZWQgaW1hZ2UKcGVvcGxlIGluc2lkZSBlYXRpbmcgbWVhbHMKcGVvcGxlIG91dHNpZGUgd2Fsawpnb2xkZW4gYXJtb3Igd2l0aCBkaWFtb25kcwpicmlnaHQgcmVkIGNhcGUgb24gaGVyIGJhY2sKcmVkIHB1cHBpbHMKcXVlZW4gY3Jvd24gb24gdG9wIG9mIGhlciBoZWFkCmN1cnZ5IGNyb3NzZml0IGJ1aWxkCmhvcnJvciBmYW50YXN5CmJhcnJvd3MKYmFja2dyb3VuZCBpcyB0aGUgcnVpbnMKdGFsbCBtb3VudGFpbnMgaW4gdGhlIGhvcml6b24KNyAwIHMgc2NpIC0gZmkgYXJ0CmRyaXZpbmcgaW4gYSBsaXR0bGUgdG95IGNhcgp0ZXJyaWJsZSBhdG1vc3BoZXJlCjE4OTgKc3BhcmtlbHMKc3VycmVhbGlzbSAtIG4gOQpmaXNoIGFyZSBnbG93aW5nIGluIHRoZSBvY2VhbgpjaGluZXNlIHZpbGxhZ2UKYnViYmxlZ3VtIGNyaXNpcwp0aGUgc3R5bGUgb2Ygc3lkIG1lYWQKbG9zdCBsb29rCmRlc3Ryb3llZCBjaXR5IG9uIGZpcmUKYnJva2VuIHdpcmVzCnJvYm90aWMgbGltYnMgb24gZmxvb3IKZXZpbCBjb2xvciBzY2hlbWUKbWFkZSBvZiBuYW5vbWF0ZXJpYWxzCmlkaWxsaWMKcGluayBiZWVzCnNtb2tlIGJpbGxvd2luZwpoZeKAmHMgd2VhcmluZyBhIHJlZCBzY2FyZgpvdmVyIGhpcyBzaG91bGRlcgpob2xkaW5nIGEgYmlnIHN3b3JkCmljZWxhbmQgaGlsbHMgaW4gdGhlIGJhY2tncm91bmQKaG9sZGluZyBhIHR3byAtIGhhbmRlZCBzd29yZApkcml2aW5nIGZhc3QKbGVtb25zIG9uIHRoZSBncm91bmQKY3lhbiBoZWFkbGlnaHRzCndlaXJkIGFuZ2xlcwpkd2FydmVuIHdlYXBvbgpqdW1waW5nIGF0IHRoZSB2aWV3ZXIKc2tldGNoYm9vayBkcmF3aW5nCmZyb20gb2YgdGhyb25lcwppbiBsZWF0aGVyIGFybW9yCm11c2ljIHRoZW1lCm9wZW4gbGFuZHNjYXBlCndhbGtpbmcgdGhyb3VnaCBhIGx1c2ggZm9yZXN0CmluIGZyb250IG9mIHRoZSBpbnRlcm5ldApuYXJyb3cgZm9jdXMKYXJhYmljIGFyY2hpdGVjdHVyZQpzcG90IGlsbHVzdHJhdGlvbgp0aGUgOSAwIHMKc2l0dGluZyBpbiBhIHdoZWVsY2hhaXIKd2lzcHMgb2YgZm9nCmJlcnNlcmsgYmxvb2QKdXB3YXJkcyBwZXJzcGVjdGl2ZQp3ZWFyaW5nIGJyb3duIHJvYmVzCmZpcmUgYW5kIGV4cGxvc2lvbnMKZHJvb2xpbmcgZmVycm9mbHVpZC4gZHNscgpjb3ZlcmVkIHdpdGggdGFyLiBkc2xyCmZ1bGwgb2YgZmVycm9mbHVpZAp3YWxraW5nIG91dCBvZiBhIHRoZSBoYXZlbnMgZ2F0ZQpubyB3b3JkcyA0IGsKY3liZXJwdW5rIGJhc2VkCnRoZSBkZXNlcnQgaXMgaW4gY29sb3IgcGVuY2lsCmthbGVpZG9zY29waWMgY29sb3JzCmRhcmsgd2F0ZXJzCndpdGggc3VuZ2xhc3MKbmVhciB0aGUgYmVhY2gKc3RlZWwgcGlwZXMKZGV0YWlsZWQgZmFjZSBiYWNrZ3JvdW5kIGRldGFpbApyZWxheGluZyBhZnRlciBhIGhhcmQgZGF5CmJlYWNoIHN1cnJlYWwgcGhvdG9ncmFwaHkKaG9sZGluZyBhIGJpZyB0d28gLSBoYW5kZWQgc3RhZmYKZmVhciBpbiBlbXB0eSBleWVzCmJvZHkgb2Ygd2F0ZXIKaGlkcm9sb2dpYyBjeWNsZQphcnQgcGhvdG9ncmFwaApzaXR0aW5nIGluIGZyb250IG9mIGNvbXB1dGVyCmNvdy1naXJsCmRpZmZ1c2Ugb3V0bGluZQpudW1lcm91cyBsaW1icwpzdXJyZWFsIGNvbGxhZ2UKb25lIGJsdWUgKSBhbmQgaHVnZSBiYXQgZWFycwpkYXJrIHdhc2hlZCB0aW50CjhrIHZyYXkgcmVuZGVyCmJsdWUgZG9nCm11c2t1bGFyCmJyaWdodCByZW5kZXIKcmVkIGFuZCB5ZWxsb3cgbGlnaHQKaGJvIGFkYXB0YXRpb24KcG9seWdvbiBhcnQKZGV0YWlsZWQgcGxhbnMgYW5kIG5vdGVzCmJsYXN0Cmxvc3R1cyBmbG93ZXJzCmNvdmVyZWQgd2l0aCBmbG93ZXJzCmJlYXV0aWZ1bCBsdXNoIGNvbG9ycwpvcmllbnRhbCBjYXJwZXRzCmdleXNlcnMgb2Ygc3RlYW0KbG9jYXRlZCBpbiBhIHdpemFyZCdzIHNob3AKYnViYmxpbmcgbGlxdWlkcwpzbW9raW5nIHZlc3NlbHMKanBnIGFydGlmYWN0cwpiYWQgY29tcG9zaXRpb24Kc2l0dGluZyBvbiBhIHN0b3JlIHNoZWxmCmphY2sgbmljaG9sc29uIGlzIHRoZSBib3R0bGUKZ29pbmcgc3VwZXIgc2FpeWFuCmhhbG8uIG9jdGFuZSByZW5kZXIKYWZ0ZXJub29uIHN1bmxpZ2h0CjM1bW0gd2lkZSBhbmdsZSBwaG90b2dyYXBoCmpvaG4gb2F0ZXMgZmFjZQoxOTA3CnZlbmVubwpicm9rZW4gYm9uZXMKd2Fsa2luZyBvbiB0aGUgc2FuZApib3kgaGFzIHNob3J0IGJsYWNrIGhhaXIKbGlnaHQgb3ZlciBib3kKZ291Y2hlCnN1bm55IGRheSBpbiB0aGUgZm9ycmVzdApkZXRhaWxlZCBtYW5nYSBzdHlsZQppbmsgYW5kIHdhdGVyY29sb3IgaWxsdXN0cmF0aW9uCmRpbm5lciBpcyBzZXJ2ZWQKZGNpbQpub3JtYW4gcm9ja3dlbGwgCmJveSBzdGFyaW5nIGF0IHRoZSB3aW5kb3cKdmVyeSBzYWQgZW1vdGlvbgpzaWRlIHBvc2UKdmlvbGV0IHNwaWRlcnMKdmlvbGV0IGFudHMKdmlvbGV0IGJlZXRsZXMKdmlvbGV0IGNvY2tyb2FjaApidWlsdCBhbmQgc3Ryb25nCndlYXJpbmcgYSBmYW5jeSBqYWNrZXQKdGhlIGdvbGRlbiBob3VyCmFudGkgbGlmZQpraW5nIG9mIGNhcGl0YWxpc20KdHJlZXMgY2FzdCBzaGFkb3dzIG9uIHRoZSB3YWxsCnZlcnkgaGlnaCBibG9vbSBhbW1vdW50CmJvdW5jZWQgbGlnaHQKMyBkIGxvdyBwb2x5IHJlbmRlcgpjb2xkIHN1bnNoaW5lIHRocm91Z2ggd2luZG93CmxpZ2h0IHdhdGVyY29sb3VyIHBhaW50aW5nCmludmVzdGlnYXRpb24KY3JpbWUgcGhvdG9zCmxvb21pbmcgb3ZlciBhIGhvcmRlIG9mIGdvbGQKbWFyY3VzIHdoaW5uZXkKc3R5bGUgb2YgcHVzaGVlbi4gY29taWMKYmx1cnJlZCBmb3Jlc3QgYmFja2dyb3VuZApyZWFsaXN0aWMhIDhrCmtkYQpoZXMgYWxvbmUKYW1lcmljYW4gcmVhbGlzbSBzdHlsZQpjbG9zZSB1cCBzaG90IGZyb20gdGhlIHNpZGUKY2FyIGFjY2lkZW50CmZhdXZpc20gc3R5bGUKZGFyayBjb25jcmV0ZSByb29tCnJhaWx5IHNlYXNvbgpuZW9uIGxpZ2h0cyBhbmQgYWRkcwp2aWV3IGZyb20gYWNyb3NzIHRoZSBzdHJlZXQKYXJ0aWZhY3QgLSBmcmVlCmNvbXBsZXRlbHkgY29oZXJlbnQKOCAwIG1tIGZvY2FsCmFuY2llbnQgZ3JlZWsgcGFpbnRpbmcKYW5jaWVudCBqYXBhbmVzZSBwYWludGluZwphbmNpZW50IHJvbWFuIHBhaW50aW5nCmpvaGZyYQpkcmFtYXRpYyBzdW5zZXQgbmVidWxhCnphYmEgc3R5bGUKaGFtYnVyZ2VyIG1vbnN0ZXIKYnVyZ2VyIGZhY2UKYnVyZ2VyIHdpdGggaHVtYW4gbW91dGgKZnJlbmNoIGZyaWVzIGFzIGFybXMKbm8gZmFjaWFsCjIgZCAtIGFuaW1hdGlvbgp1bmZvdGFibGUgc3R1ZGlvCmFubmllIGxpZWJvdml0eiBwaG90b2dyYXBoeQpjb2JibGVzdG9uZXMgb24gdGhlIGdyb3VuZApzaW5nbGUgc3RyZWV0CndoaXRld2FzaGVkIGJ1aWxkaW5ncwp0YXZlcm5zIG5pZ2h0dGltZSBsaWZlc3R5bGUKb2xkIHN0b25lIHN0ZXBzCm1hZGUgb2Ygd29vbAppbmZ1c2VkIHdpdGggYSBkcmVhbQphbmNpZW50IHJvbWFuIHN0eWxlCmh1bnRlciBiaWRlbgpwaW5rIGZyb3N0ZWQgZG9udXQKY2l0eSBtaWRuaWdodCBtaXN0CmNpdHkgbWlzdCBzb2Z0bGlnaHQKdG9jaGlnaSBwcmVmZWN0dXJlCndvcmsgd2hlZWxzCmNpdHkgbWlkbmlnaHQgbmVvbiBsaWdodHMKI3NjcmVlbnNob3RzYXR1cmRheQpiZXJsaW4gY2l0eQpjYXIgY29tbWVyY2lhbCBwaG90b2dyYXBoCnN0YW5pc8WCYXcKd2l0aCBhIGJyaWdodCB5ZWxsb3cgYXVyZW9sYQpjYW5keSAtIGNvYXRlZApzdWdhcnkgc3dlZXQKcGxhbnQgcGhvdG9ncmFwaHkKZWRpbiBkdXJtaXNldmljCmFsZXhhbmRlciBtaW56ZSB0aHVtbGVyCnlhbiBtb3JhbGEKaGUgaXMgaG9sZGluZyBhIHNtYXJ0cGhvbmUKc3R5bGUgb2YgY2FydG9vbgphZnJvIGZ1dHVyaXN0aWMKbGlnaHRseSB0ZXh1cmFsCmN1cmxlZCB1cCBvbiBhIGJvb2sKaW4gYSBjb21meSBob3VzZQptaW5pIHBsYW5ldHMKbWl5YXpha2kgZmlsbQpvdmVyZ3Jvd24gd2l0aCB0cmVlcwptaW5lY3JhZnQgYnVpbGQKY2hlcnJ5IGJsb3NzdW1zCmZhbGxvdXQgNSBvZmZpY2lhbCBhcnQKYXJtb3JlZCBmZWxpbmUgY29tcGFuaW9uCmZsdW9yZXNjZW50IGNvbG91cnMKcGhvdG8tcmVhbGlzdGljIGxvdyBsaWdodGluZwpoeXBwZXJyZWFsaXN0aWMgaWxsdXN0cmF0aW9uCmluIHRoZSB0ZWNobmlxdWUgb2Ygb2xkIG1hc3RlcnMKdGhlcmUgaXMgYSBib29rIG5leHQgdG8gdGhlIGNhdApwaXhlbCBhcnQgYW5pbWF0aW9uCmNpbmVtYXRpYyBhY3Rpb24gc2NlbmUKY2xvc2UgdXAgY2F0CjMzbW0gcGhvdG9ncmFwaApkaWUgLSBjdXQgc3RpY2tlcgplbmVyZ3kgZHJpbmsKbCAtIHN5c3RlbQpyZWN1cnNpdmUgZnJhY3RhbAp0aGUgY2F0IGlzIG9yYW5nZQp0aGUgY2F0IGlzIGZsdWZmeQpyZWZpbmVkIGZhY2UgYW5kIG11enpsZQpnaXJhZmZlIGhlYWQgYW5kIGdpcmFmZmUgYm9keQptZXRhbGxpYyB0ZXh0dXJlCjkw4oCZcyBwaG90b2dyYXBoeQphbGVuYSBhbmQgYmx1dGgKbGFyZ2UgeWVsbG93IGV5ZXMKdW5kZXJncm91bmQgYXJ0CmluZnJhIC0gcmVkCnRoZXJtb2dyYXBoeQp0aGUgY2F0IGlzIHdhbGtpbmcKZnVqaWZpbG0geCAtIGggMiBzCmZ1bGx5IGNvdmVyZWQgaW4gZHJhcGVzCnZpc2libGUgdmVpbnMKd2luZHkgZmxvYXRpbmcgaGFpciEhCmF0bW9zcGhlcmljIG1vb2R5CnRoZSBzdGFycwpsYW1wIHBvc3RzCnNvZnQgYmx1ZSBtb29ubGlnaHQKcGhvdG9ncmFwaGljIGNvbG9yIHNjaGVtZSBibHVyCnBvc3RlciBjb2xvdXIgb24gY2FudmFzCi0gaQptdXNpY2FsIG9yZ2FuCnN1cGVyc2hhcnAgcGhvdG8KZ2hvc3RseSBzaWxob3VldHRlcwpzdHJhbmdlIHBvc2VzCjM1bW0gZG91YmxlIGV4cG9zdXJlCmNvbXB1dGVyIGFlc3RoZXRpYwp2YXJndXlhcnQgc3R5bGUKMyBkIHVucmVhbCA1CnRoZW1lZCBvbiB0aGUgc3RhcnMgYW5kIG1vb24KdHJlbmRpbmcgb24gYXJ0c3kKdHJlbmRpbmcgb24ganV4dGFwb3ogbWFnYXppbmUKdGVra29uIGtpbmtyZXQKdmludGFnZSBwb3N0ZXIgc3R5bGUKcG90cyBhbmQgcGFucwpleHBlcmltZW50aW5nCnJhaW5ib3cgY29yYWxzCnRoZSBvdGhlciBpcyB1c2VkIGZvciBmbGlnaHQKc2l0dGluZyBvbiB0aGUgZWRnZSBvZiBhIGJlZApibGFjayBhbmQgd2hpdGUgb2xkIHBob3RvZ3JhcGgKZGV0YWlsZWQgaW5mb3JtYXRpb24KZ29yZ2VvdXMgYmlraW5pIG1vZGVsCm9pbCBvbiBhZ2VkIHRpbgppbmtlZCBsaW5lcwpwbGFzdGljIGFybXkgbWVuCm5vIHRyZWVzIGFyb3VuZAp1bHRyYSByZWFsIDggayBwaG90b2dyYXBoeQpnYW1lIGFuZCB3YXRjaAptYWRlIG91dCBvZiB3b29sCmxpZ2h0bmluZyBlZmZlY3RzCmN1c3RvbWVycwp2aWJyYW50IHN1bnNldApuZXcgY29zdHVtZSBjb25jZXB0IGRlc2lnbgpjaGluZXNlIGNhbGxpZ3JhcGhpYyBwYWludGluZwpub3QgamFwYW5lc2UKZGVlcCBzaGFmdHMKc2xhbnRlZCBsaWdodGluZyBmcm9tIHdpbmRvdwpkdXN0IG1vdGVzIGluIGFpcgpnaWFudCBmZXJyZXQKZ29sZGVuIGZyYW1lCmEgYmxhY2sgdHNoaXJ0LiBoaWdoIGtleQpzcGlrZWQgY29sbGFyIHN1bmdsYXNzZXMKYnVybnQgaHV0cwpib2lsaW5nCmNpbmVtYXRpYyBkZXB0aCBvZiBmaWVsZAptb251bWVudCB2YWxsZXkgbGFuZHNjYXBlCmZhcndlc3QKbmF2YWwgd2FyZmFyZQpvbiB0aGUgdG9wIG9mIGEgbW91bnRhaW4KY3J5aW5nIHRlYXJzIG9mIGJsb29kCmJhcm9xdWUgY29sb3Igc2NoZW1lCmNvbGQgYmx1ZSBsaWdodGluZwpjaHJpcyBub2xhbiBtb3ZpZQpib2tlaCBnbG93CnN0b29kIGluIGEgc3Bvb2t5IGZvcmVzdApncmFzc3kgYXV0dW1uIHBhcmsgb3V0ZG9vcgppbiBhIHZhc3Qgc2VyZW5lIGxhbmRzY2FwZQpwYWRkeSBmaWVsZHMgYW5kIHJpdmVyIGZsb3dpbmcKbmV3IHlvcmsgY2l0eSBhcyBiYWNrZHJvcApsZW1vbmFkZQpyaWRsZXkgc2NvdHQgYW5kIHphY2sgc255ZGVyCmdvZHJheXMgZGlnaXRhbCBwYWludGluZwptYWRlIG9mIGZhYnJpYwpmb2cgc3Rvcm0KZnJpdHogbGFuZyBhbmQgc2hpbnlhIHRzdWthbW90bwpzdG9vZCBvbiB0b3Agb2YgYSBza3kgc2NyYXBlcgpyZWQgY2hlZWtzCnRoZSBhbmdlbHMgYXJlIGNyeWluZwprYW55ZSB3ZXN0IHRvcnNvCnN0eWxlIG9mIGplYW4gZ2lyYXVkIG1vZWJpdXMKY294Y29tYgpyZWQgbWVjaApkYXJrIGdyZXkgZGVjZXB0aWNvbiBtZWNoCmZ1bGwgYm9keSByZWQgbWVjaApnYWxhY3R1cyEhISEKKChtb25zdGVyKSkKb3JhbmdlIGNvbG9yIHRoZW1lCmxlaWNhIGxlbnMgaGlnaCBxdWFsaXR5CnN0b29kIGluIGEgZmFjdG9yeQp3aXRoIHRyZWVzIGFuZCB3YXRlcmZhbGxzCmludGVyIC0gZGltZW5zaW9uYWwKYmFzIHJlbGllZgpnaWFudCBzdW4Kd2l0aCBhIHllbGxvdyBncmVlbiBzbW9nIHNreQpyb21hbnRpYyEhIQpwaW5rIHN1bmxpZ2h0Cmdob3N0bHkgc3Bpcml0cwpibGltcHMKamVsbHlmaXNoIGVsZW1lbnRzCmRldGFpbGVkIHNjZW5lcnkg4oCUd2lkdGggNjcyCmNsYXNzaWNpc20gb2lsIHBhaW50aW5nCmdvb2QgZnJpZW5kcwpjaXJjYSAxIDggNSA0CmdhcyBzdHJlZXQgbGFtcHMuIGNvdW50cnkgcm9hZApmaW5hbCBmYW50YXN5IGNoYXJhY3RlcgptYWRlIG9mIGNhbmR5IGFuZCBsb2xseXBvcHMKbW9vZHkgc2V0dGluZwpsb29rIGF0IHRoZSBkZXRhaWxzCmxpZ2h0IGJsdWUgY29sb3JzCnRyYXNoIHN0eWxlCmZyb20gbWF0cml4ICggMSA5IDkgOSApCmJhY2tncm91bmQgb2YgdGhlIGdhbGF4eQppbmR1c3RyaWFsIHNhbGl2YSBvb3plCjEgOSAzIDAgcyBqYXp6IGNsdWIKZmlyZXBsYWNlIGxpZ2h0aW5nCmtvZGFrIHZpc2lvbiA1IDAgMCB0CmZyaWxsZWQgYmxvb21pbmcgY29sbGFyCnRoZSBtYW4gaXMgc2NyZWFtaW5nIGFuZCBzYWQKaGlnaGx5IGRldGFpbGVkIGZhY2lhbCBkZXRhaWxzCjEwMCBtbSBzaWdtYSBhcnQKaW4gYSBwb25kCmZsb3JhIHdvcmxkCmNvbWljcHVuawptYWQgbW9uc3RlciBwYXJ0eSBmaWxtCm1hdGVybml0eSBmZWVsaW5nCnN0cm9rZSBwYWludGluZwpuYXR1cmFsIG1pbmkgZ2FyZGVucwpqb2FxdWluIHNvcm9sbGEgKSApCndlbGwgLSBkZXRhaWxlZCBvdXRmaXQKc21hbGwgcXVpbGxzIGFsb25nIGl0J3MgYmFjawpsaWdodGluZyBoZXIgd2l0aCBhIHJpbSBsaWdodAphZXN0aGV0aWMgY2xvdWRzIGluIHRoZSBza3kKd2VhcmluZyBhIGRyZXNzIG1hZGUgb2YgYmVhZHMKaW4gYSBzdWJ1cmIKZWd5cHRpYW4gZW52aXJvbm1lbnQKYmlnIG1lY2hhCndpdGggYSBzZWR1Y3RpdmUgc21pbGUKaXJhbGtpIG5hZGFyCmdlb21ldHJpYyBhYnN0cmFjdAptZWRpZXZhbCB0YXBlc3RyeQpuaWtvbiBkIDYKb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbgpzaXR0aW5nIG9uIHRlbXBsZSBzdGFpcnMKYWRvcnlhbnRpCm1hY2hpbmUuZGVsdXNpb25zCjIgMSAwIG1tCmhhZWNrZWwgYW5kIGFsYXNkYWlyIGdyYXkKaGlnaC1rZXkKaGUgaGFzIGhlYWRwaG9uZXMKd2VhcmluZyBhbiBvcmFuZ2UgdCBzaGlydApiZWFyZCBzdHViYmxlCmhlIGlzIGF0IGNvbGxlZ2UKaGUgaXMgYXQgY2FtcApibGVhY2hlZCBibG9uZGUgc2hvcnQgaGFpcgp5ZWxsb3cgZXllCmZyYWN0YWwgYnVybmluZyBoYWxvCm9wZW4gd2lkZSBleWVzCmNhc2NhZGlhCnVuZGVyZ3JvdW5kISEhIQpoaWVyb255bXVzIGJvc2NoIGFuZCBtb2ViaXVzCmphenphCnN0YW5kaW5nIGluIGEgc2hhbGxvdyByaXZlcgpwc3ljaGVkZWxpYyBoYWxsdWNpbmF0aW9ucwppbmRvb3IgZGltIGxpZ2h0CmFic3RyYWN0IGh1bWFuIGZpZ3VyZXMgZGFuY2luZwpwZWx0b24KaHVnZSBzcGluZXMKZmx5aW5nIG1hY2hpbmVzCjhrIHVsdHJhaGQKYW5jaWVudCBydWlucyBpbiB0aGUgYmFja2dyb3VuZAp3aXRoIGVhcnRoCnpvZSBrYXphbgpuYXRhbGlhIGR5ZXIKdGlueSBzdGFycwppbiBzdHlsZSBvZiBtYXJ2ZWwgY29taWNzCnNha2UKMSA5IDcgMCBzIGNvbWljIGJvb2sKc2luZ2xlIGxvZ28KZ2lhbnQgY2xheSBzdGF0dWUKc3RvbmUgcGV3cwptb2Rlcm4gZ2FsbGVyeSBmdXJuaXR1cmUKYnJpZ2h0IGRheWxpZ2h0IGluZG9vciBwaG90bwppbmRvb3IgcGljdHVyZQp3aXphcmQgdGhlbWVkCmJyYXNzIGFuZCB3b29kIG1lY2hhbmlzbXMKZWxhYm9yYXRlIHJ1YmUgZ29sZGJlcmcgc3R5bGUKc21vb3RoIHN0eWxpemVkIHNoYXBlcwpvdmVybGFwcGluZyBsYXllcnMKaHlwZXIgLSByZWFsaXN0aWMgdmZ4IHJlbmRlcgo5IDAgcyBhbmltZQptb25vY2hyb21hdGljIGluawptZXRhbCBzbHVnIGNvbmNlcHQgYXJ0Cm1ldGFsIGdlYXIgc29saWQgY29uY2VwdCBhcnQKY2hhaW4gbWFpbApzdHJvbmcgYW5kIGFnZ3Jlc3NpdmUKZHJlc3NlZCBpbiBhIHBpbmsgZHJlc3MKcG9yc2NoZQpyZW5hdWx0CmZlYXRoZXIgcGVuCnByb2Zlc2lvbmFsIHBob3RvZ3JhcGh5CmdpdXNlcHBlCmNvc21pYyBhdG1vc3BoZXJlIGxpZ2h0IGZsYXJlcwpjb3VydGVzeSBvZiBtb21hCndoaXNwZXJzCm1hZGUgb2YgbW9uZXkKY2FsZW5kYXIgc2F5cyBtb25kYXkKbWFkZSBvZiBpbnRyaWNhdGUgbWV0YWwgYW5kIHdvb2QKbWFueSB3aWxkIGFuaW1hbHMKb2JzZXJ2ZWQgZnJvbSBhZmFyIGluIHRoZSBmb2cKYmlnIHJlZCBkcmFnb24gZmx5aW5nIGFib3ZlIHRoZW0Kc2hvcnQgc2lsdmVyIGdyZXkgaGFpcgpjYWxtIGV5ZXMKaGVpZ2h0IHJlYWxpc3RpYyBkZXRhaWxzCm5vIGN1dG9mZgpoaWdoIHF1YWxpdHkgc3RvY2sgcGljdHVyZQpzaW1vbiBob2xtZWRhbApvY2N1bHQgYWVzdGhldGljcyBhbGNoZW15Cndpc3B5IGRhcmtuZXNzCmVneXB0aWFuIGF0bW9zcGhlcmUKaHlwZXItc2hhcGVzCmNvc21pYyBsYW5kc2NhcGUKZGFyayBvdXRzaWRlCnBlYWNlIGFuZCBxdWlldAplZXJpZSB0aHJpbGxlciBhZXN0aGV0aWMhISEhCndpdGggdGVhbCBjbG90aGVzCnRoZSB3b21hbiBoYXMgbG9uZyBkYXJrIGhhaXIKbGl2aW5nIHJvb20gd2FsbCBiYWNrZ3JvdW5kCmluIGEgZGVzb2xhdGUgYWJhbmRvbmVkIGhvdXNlCmdyb3d0aCBvZiBhIGNvdXBsZQphbmltZSBtb3ZpZSBwb3N0ZXIKbG9va2luZyBhdCB0aGUgY2VpbGluZwpibHVlIHBlcmlvZAphZGQgYSBnbG93IGFyb3VuZCBzdWJqLiBlZGdlCmluIHR3aW4gcGVha3MKd2luZCBibG93biB0cmVlcwpmaXNoLWV5ZQpjaGVlcnMKZ3JlZ29pcmUgYW5kIG1hbm9uCmRhcmsgYW5kIGdydW5neQphbmltZSBjb3ZlcgpkcmliYmxpbmcKZmxhc2hsaWdodCBvbgpibGFjayBvbiB3aGl0ZSBsaW5lIGFydApsaW5lIGFydCAtIG4gOQpjb3cgc2t1bGwKaW4gZ3RhIHZpY2UgY2l0eQppdmFuIHNoaXNoawpyb3NhIGJvbmhldXJuCmhhcHB5IGNvenkgZmVlbGluZ3MKdGhhdGNoZWQgaG91c2VzCnllbGxvdyBhbmQgZ3JlZW5zCnRhdHRlcmVkIGNsb3RoZXMKYnJva2VuIHZhc2UKZmVhdGhlcmVkIGhhaXIKaG9sZGluZyBtYXJhY2FzCmZsb3JhbCBwYWludGVkIGJhY2tkcm9wCndpc3B5IGZvZwp3aXRob3V0IGV5ZXMKYW5zZWwgYWRhbXMgcGhvdG9ncmFwaAp0d28gaG9ybnMKdGFrZW4gb24gYSBuaWtvbgpoeXBlcnJlYWxpc3RpYyBhZXN0aGV0aWMKdmVyeSBkZXRhaWxlZCBiYWNrZ3JvdW5kCmxvdyBmaWVsZCBvZiB2aWV3CnNpZ21hIDMwIG1tIGYvMS40CmFuaW1hbCBoYXQKOCBrIGNhcnRvb24gaWxsdXN0cmF0aW9uCmlsbGVnaWJsZQpncmFwaGl0ZSBkcmF3aW5nCnJpY2ggbGlnaHRpbmcKcG9zdC1udWNsZWFyCmhlYXZ5IGxpbmV3b3JrCmRpc2NvIGxpZ2h0aW5nCmp1eHRhcG9zCmxvb3NlbHkgZHJhd24Kc2hha3kgbGluZXMKMiAtIHBvaW50IHBlcnNwZWN0aXZlCmlzb21ldHJpYyBhbmdsZQpmcmFjdGFsISEhISEhIQpnZXJhbHQKcmVuZGVyIDggawphcyBzZWVuIGZyb20gc3BhY2UKbXV0ZWQgYnJvd24geWVsbG93IGFuZCBibGFja3MKc2F0YW5pYyBjaHVyY2ggaW50ZXJpb3IKc21pbGluZyEhIGZhbnRhc3kKY29wcGVyIGFuZCBlbWVyYWxkIGlubGF5CndpdGggZnJlY2tsZXMKZW5jaGFudGluZyB2aWJlcwpoYW5kIGRyYXcKYW5kcm8KKCAoICggY29wcGVyICkgKSApIHdpcmUgd2hpc2tlcnMKYXQgdGhlIHBhcmsKY2xlYXIgdmVjdG9yCnZlY3RvcmlhbCBjdXJ2ZXMKYXJ0Zm9ydW0gYWVzdGhldGljCmp1eHRhcG96IGFlc3RoZXRpYwpvbGQgcnVzdHkgcGlja3VwIC0gdHJ1Y2sKaW4gcG9zdGFwb2NhbHlwc2UgY2l0eQp3aXRoIGZpbmdlcnMKcmVhbGx5IGdvb2QgbG9va2luZyBmYWNlISEKaHVnZSBqZXQgcm9ja2V0IGVuZ2luZSBiYWNrcGFjawp1cmJhbiBjbG90aGluZwpzaGFycCBmb2N1cyB2ZWN0b3IgY2VudGVyZWQKdGhvbWFzIGtpbmthZGUuIGZvcmVzdCByb29tCmNlbnRlcmVkIGZvY3VzCnJlbmFpc3NhbmNlIGFtYmlhbmNlCmRhcmtwb3dlcmZ1bCBlbGVnYW50CmxheWluZyB1bmRlciBhIHRyZWUgb24gYSBmYXJtCnByb21pc2VkIGxhbmQKc3dpbW1pbmcgaW4gc3BhY2UKYWtpcmEgeW9zaGl6YXdhCm1lY2hhbmljYWwgb3dsCnR3aWxpZ2h0IGNvb2wgbGlnaHQKcmF5cyBvZiBnb2xkZW4gcmVkIHN1bmxpZ2h0CnNpdHRpbmcgb24gYSBsYWIgdGFibGUKZjUwCm9uIGFydHN0YXN0aW9uCmF3YXJkIHdpbm5pbmcgbWFjcm8gcGhvdG9ncmFwaHkKYmVzdCBzZWxsZXIKZGVjb3JhdGl2ZSByb3NlcwpzdGFuZGluZyBvbiBhIGJhdHRsZWZpZWxkCndlbGwgLSBkcmF3bgpnb2xkIGZsYWtlcwpyaWRpbmcgYSBjeWJvcmcgcmFwdG9yCnNjaWZpIHJlbGlnaW91cwpuYXNhIGV2YSBzdWl0CndoaXRlIGZyYWN0YWxzCnNtYWxsIG5peGllIHR1YmVzCm5hc2EgY2FuYWRhcm0KbWF4aWxsaXBlZHMKY2hlbGljZXJhZQpjaGVsYXRlIGFwcGVuZGFnZXMKZ2FzZW91cyBtYXRlcmlhbHMKcm9vZnRvcCByb21hbnRpYwpkYW1hZ2VkIHN0cmVldHMKc2NpIC0gY2kKcGl6emEgc2t5c2NyYXBlcnMKeWVsbG93IGFuZCBncmVlbiBzY2hlbWUKbGlnaHQgY29taW5nIGZyb20gY3J0IG1vbml0b3IKc3R1ZGlvIGdoaWJsaSBjb2xvciBwYWxldHRlCmludHJpY2F0ZSBjb2xvcmZ1bApjeWJlcnB1bmsgYmFzZW1lbnQKc3RvbmUgYnJpY2sgd2FsbHMKYXdhcmQgd2lubmluZy4gNCBrCm1pbmltYWxpc3QgZGVzawptaW5pbWFsaXN0IGhvbWUgb2ZmaWNlCm9yYW5nZSBuZW9uIHN0cmlwZXMKcmVnZ2FlCmNvYmJsZXN0b25lIGZsb29ycwo5IDAgcyB2aHMgYWVzdGhldGhpYwphbmltZSBjaGFyYWN0ZXIgZGVzaWduCmhvbGRpbmcgYSBiYWxsb29uCmJsYWNrIGFuZCB3aGl0ZSBmaWxtIHBob3RvZ3JhcGgKMTJtbSB3aWRlLWFuZ2xlCmxvdyBmb2NhbCBwb2ludApmdXR1cmlzdGljIHRlY2ggd2VhcgpsYWNxdWVyZWQgZ2xhc3MKamFtZXMgZ2xlZXNvbgp3ZWFyaW5nIGEgZmxvd2luZyBzdW5kcmVzcwpoZSBpcyB2ZXJ5IGhhcHB5Cndhcm0gc3VtbWVyIG5pZ2h0cwpjaGFpbnMgZGFuZ2xpbmcgZnJvbSB0aGUgY2VpbGluZwpqZXdlbHJ5IG1hZGUgb2YgYm9uZXMKc2VsZmllIHNob3Qgc3RyYWlnaHQgb24gYW5nbGUKaXNvIDEyNTAKbWFuIHdhbGtpbmcKaGFsZiAtIG9jY3VwaWVkIHdpdGggcGVvcGxlCm1hdHRlIHBhaXRuaW5nCmdyZXkgc2hpZnQKcHVycGxlIGZpcmUgYXJvdW5kIG1hZ2ljIGFyZW5hCmZ1bGwgY29sb3IgbWl4ZWQgbWVkaWEgcGFpbnRpbmcKYmxvb2QgcmVkIGxlYXZlcwpsYXMgdmVnYXMgYXQgbmlnaHQKYnJpZ2h0IGdsb3dpbmcgdHJhbnNsdWNlbnQgYXVyYQpyZXB1Z25hbnQKc2lucyBpbmMgc2t5c2NyYXBlciBmcm9udApwaG90b2dyYXBoeSBwaG90b3JlYWxpc3RpYwphbGllbiBsaWtlCm9ybmF0ZSBtYXNrIGFuZCBmYWJyaWNzCnB1bGxlZAp0aGUgY2FzdGxlCmhlbGxjb3JlCnBhaW50IGlzIGZhbGxpbmcgb2ZmCmFuaW1lIHZhbXBpcmVzCmV2aWwgaG9ycm9yIHZpYmVzCmFydCBkZWNvIHNoYXBlcwpldmlsIGdsb3cKdmlicmFudCBnbG93CmhpZ2ggcmFkaW9zaXR5CmdvYXRlZSBiZWFyZApsaWdodG5pbmcgYW5kIHJhaW4Kd2l0aCBsb25nIHdhdnkgcmVkIGhhaXIKY29tcGxleCBzaGFwZXMKaHlwZXJyZWFsaXN0aWMgaGVsbApoZWxtb25kCmFuaW1lIHNjcmVlbmNhcHMKdXBwZXIgYm9keSBvbmx5CndpdGggYSBjcmVlcHkgc2VjcmV0IHRlbXBsZQpqdW1waW5nIGZseWluZyBhbmQgZWF0aW5nIGZyb2dzCmdsb3dpbmcgY3J5c3RhbCBvbiBhIHJvY2sKcml2ZXIgYW5kIHRyZWVzIGFuZCBoaWxscwphbiBlYWdsZSBmbHlpbmcKcmVkdWNlZCBtaW5pbWFsIGlsbHVzdHJhdGlvbgppbmsgZG90cwpwZXJmZWN0IGhhbmRzb21lIGZhY2UKdmVjdG9yIGxpbmVhbAozZCBhcHBlYXJhbmNlCjNkIHNoYWRvd2luZwpqYXBhbmVzZSBtYWdhemluZSBjb2xsYWdlCmRpc2NvcmQgcGZwCmlzIGxvb2tpbmcgYXQgdGhlIGNhbWVyYQpjb21wbGV4aXR5IG9mIHRoZSBpbWFnZQpyZWFsaXN0aWMgaG9ycm9ycwphbnRhcmN0aWMKZnJvbSB0aGUgdGhpbmcKaW4gYSBzcGFjZXNoaXAKbG9saSBpbiBkcmVzcwphcm1zIGhlbGQgaGlnaCBpbiB0cml1bXBoCm9pbCBzbGljayBpbiB0aGUgd2F0ZXIKaHlwZXIgZXh0cmVtaXNtCmFtYmllbnQga2V5IGFydApraW5kcmVkIHNwaXJpdHMKc3BhcnNlCnN1cGVyIGRldGFpbGVkIGFjcnlsaWMgcGFpbnRpbmcKd2hpdGUgd2hlZWwgcmltcwphZHJpYW4gdG9taW5lCnBobGVnbQpjbG9zZWQgdmlzb3IKZXh0cmVtZSB0aHJlZSBwb2ludCBwZXJzcGVjdGl2ZQphdCBhIHBhcmsKbGFuZHNjYXBlIGNvbXBvc2l0aW9uCnRyZW5kaW5nIG9uIGFydHN0YXRpb24gNGsKY2FtYnJpYW4KZGFyayBwc3ljaGVkZWxpY2EKZm9yZWlnbiBsYW5kc2NhcGUKeW9oYW5uIHNjaGVwYWN6IGFuZCBsYXVyZWwgYnVyY2gKc3R5bGUgb2YgZ3JpbSBkYXJrCmthaSBmaW5lIGFydApjb3BwZXIgcGF0aW5hCmRhbiBtdW1mb3JkLiBtYXlhIHJlbmRlcgpzcHJhd2xlZCBvdXQKcmVhbGlzdGljIHVucmVhbCBlbmdpbmUgNQpob2xkaW5nIGZ1dHVyaXN0aWMgY3Jvc3Nib3cKaG9sZGluZyBhIG1pbGtvciBtZ2wKYWtpcmEgeWFzdWRhCnZpbmNlbnQgZGVzaWRlcmlvCjMgZCByYXl0cmFjZWQgbWFzdGVycGllY2UKc21hbGwgY3Jvd2Qgb2YgcGVvcGxlCnJvdW5kIGRvb3JzCmJsb29kIG9uIHRoZSBmbG9vcgpoaWdoIHJlc29sdXRpb24gdWx0cmFkZXRhaWxlZApnbGFzcyBsYWJ3YXJlCndpdGggYSBzbWFsbCBiZWFyZAohISBoYWxmIGFuZCBoYWxmIGhhaXIgZHllISEKYXJ0aHVyIGhhYXMKZ2lnYXBpeGVsIHBob3RvCmNvbnRyYWNlcHQKYWNyb3NzIHRoZSBmYWNlIHBvcnRyYWl0CmZyb20gc2NlbmUgZnJvbSBpbmNlcHRpb24KY3V0bGVyeQprcnVsbApiYWdzIHVuZGVyIGhpcyBleWVzCmhlIHdlYXJzIGEgYmlnIGNvYXQKNyAwIHMgc2NpZW5jZSBmaWN0aW9uIGFydApzaW1vbiBzdMOlbGVuaGFnLiBkaWdpdGFsIGFydApkaXN0YW50IHJhaW4KYXQgYW4gYXJjaGFlb2xvZ2ljYWwgZGlnIHNpdGUKYXJ0IGluIGFuIGFic3VyZGlzdCBzdHlsZQpzbWlsaW5nIHBsYXlmdWxseQpuaWdodCB0aW1lIHJhaWQKeWVsbG93IHZvbHVtZXRyaWMgZm9nCnNpdHRpbmcgaW4gdGhlIHBvb2wKcHVycGxlIGdsb3dpbmcgZXllcwpkJmQgY2hhcmFjdGVycwpoZSBoYXMgc2hvcnQgY3VybHkgYnJvd24gaGFpcgpicm93biBleWVzIGFuZCB3aGl0ZSBza2luCjEgOCAwIDIKbGlzYSBmcmFuayBhbmQgc3RlcGhlbiBnYW1tZWxsCmN1dGUgcG91dAoyIDAgMiAwIGZhc2hpb24KaG9sZGluZyBhIHNoaWVsZCBhbmQgaGFtbWVyCnNsYXllcgp0ZWNobm9sb2d5IGZsaWdodCBzdWl0Cm1vb2R5IG1pc3R5IGZhbnRhc3kgYXJ0CmRhcmsgc3Vycm91bmRpbmdzCmluIGphcGFuZXNlIGFuaW1lIHN0eWxlCmJsb25kZSBhbmQgYXVidXJuIHR3byB0b25lZCBoYWlyCmNvbnRyYXN0ZWQgbGlnaHRpbmcgYW5kIHNoYWRvd3MKb3Zlcmdyb3duIHdpdGggbHVzaCB2aW5lcwp3aXRoIGEgaHVydCBleHByZXNzaW9uCmhvc3BpdGFsIGxpZ2h0aW5nCnZlcnkgdmVyeSBoYXBweSEKZ3JpbWFjZQpqb2huIHBhd3NvbgpmaWxsZXRpbmcgdGVjaG5pcXVlCmxvdHMgb2YgZGlhbW9uZHMgdW5lYXJ0aGVkCmx1bWlub3VzIGNvbG9y4oCZcwpwZXJzcGVjdGl2ZSBza3kKc2ltb25hIHNiYWZmaSBpcyB0aGUgY2FwdGFpbgpzdGlja2VycyBpbGx1c3RyYXRpb25zCmJlYXV0aWZ1bCBhdmF0YXIgcGljdHVyZXMKdGhlIGJlYWNoCmJsdWUgZmxvd2VycyBhY2NlbnRzCm1lZGl1bXNsYXRlYmx1ZSBmbG93ZXJzCmF0IGFmdGVyIG5vb24KZG5kIGdvbGlhdGggY2hhcmFjdGVyIGNvbmNlcHQKbmlnaHQgbGFuZHNjYXBlIGJhY2tncm91bmQKYmxhY2sgd2l0Y2ggaGF0Cmxvc3Qgd29ybGQgcHlyYW1pZAp0aWthbCB0ZW1wbGUgaXYKbWF5YSB0ZW1wbGVzCnB1cnBsZSBjcnlzdGFsIGlubGF5cwpsYXJnZSBtYWdpY2FsIHRyZWVzCmhhbmdpbmcgbGFudGVybnMKc2hhcnAgYW5kIGNvaGVyZW50CmRyaWVkIGxlYXZlcwpmcm9tIGJhY2sKbGFyZ2UgY29tbWVyY2lhbCBsZWQgc2NyZWVucwptYWRlIG9mIGNhbmR5CndpdGggYSBtaXJyb3IKISEgbG9va2luZyBhdCB0aGUgY2FtZXJhISEKdmFyeWluZyBldGhuaWNpdGllcwppbnN0YWxsYXRpb24Kc3Bpa2UKMyBkaW1lbnNpb25hbAptaW5pIG1vZGVsCmFjdGlvbiBmaWd1cmVzCnBhbmF2aXNpb24gbWlsbGVubml1bSBkeGwgMgp3YWxsIHRvcmNoZXMKZ29kcmF5cyBmcm9tIHRoZSByaWdodAp2YXJpb3VzIGFydHdvcmtzCnRhbGwgbGFyZ2UgdHJlZXMKdGhlIGFydCBvZiBwaXhhcgp0aGFpIGFyY2hpdGVjdHVyZQp0ZWNobm9sb2dpY2FsIGxvbmdjb2F0Cm5laWwgbGVpZmVyCnNpdHRpbmcgaW4gYW4gYXJtY2hhaXIKZmlsbSBzdHJpcCByZWVsIHNob3dpbmcgOSBmcmFtZXMKaGlnaCBkZXRhaWxlZCBjYXJ0b29uCmJsYWNrIGVhcnMKY2hhc2luZyBhIHJvYmJlciBkb3duIGEgc3RyZWV0CmJhbGQgZWFnbGUKdGFrYXNoaSBtdXJha2FtaSBhcnQgc3R5bGUKcGhvdG9tb3JwaCBhcnR3b3JrCmNob2NvbGF0ZSBmcm9zdGluZwpmaW5hbCBmYW50YXN5IDEgMiBzdHlsZQpwb3N0IC0gd2FyIHNjZW5lcnkKcmVkIC0gdG9uZWQgbWlzdApjb21wbGV4IHBhdHRlcm4KbG9va2luZyBkb3dud2FyZHMKZGVhdGh3aW5nCmluIGEgZm9yZXN0IGdsYWRlCmhvbGRpbmcgYSBjYXQKamF6emEgYW5kIHJvc3NkcmF3cwptYWRlIG9mIGJhbWJvbwplZGdhciBtYXhlbmNlIGFuZCByb3NzIHRyYW4Kd2VhcmluZyB2aWtpbmcgY2xvdGhlcwrwn6SsIPCfpK4g8J+SlSDwn46ACvCfmK0g8J+kpyDwn5KUCnJlYWxpc3RpYyB8IGRldGFpbGVkIGZhY2UKZGFyayBmb3JlYm9kaW5nIGF0bW9zcGhlcmUK8J+OgCDwn5ehIPCfjZMg8J+nmgpnb2RsaWtlIGFuZCBzdG9pYwp2b2x1cHR1b3VzIGFuZCBhcm91c2luZwpmZW1hbGUgZnVsbCBib2R5Cmthd2FpaSB2aWJlCmtpbSBqdW5nLWdpCmZldyBmYXJtIGdyZWVuIGhpZ2hsaWdodHMKc3RhbmRpbmcgaW4gYSBsYXJnZSBlbXB0eSBoYWxsCmFubmllIGxlaWJvdml0eiBwaG90b2dyYXBoeQpzaWxob3VldHRlIG9mIGEgbWFuCndpdGggYSBzdGFyIC0gY2hhcnQKdGVlIHNoaXJ0IGdyYXBoaWMKaG9sZGluZyBoaXMgaGFuZHMgdXAgdG8gaGlzIGZhY2UKc3RhbmRpbmcgaW4gYSBkaW1seSBsaXQgcm9vbQpwaW5rIGxpZ2h0bmluZwpuZW9uISEgbGlnaHQKZHJlYW1pbmcgb2YgZWxlY3RyaWMgc2hlZXAKd2l0aCBsb25nIHdoaXRlIGhhaXIKZ2lhbnQgZ3VucwpkcmVhbXkgYXRtb3NwaGVyZSBhbmQgZHJhbWEKcGFyYW5vaWQgY3JpdGljYWwgbWV0aG9kCjhrIGh5cGVyZGV0YWlscwp0aGUgaGFwcGllc3QgbW9tZW50CmRyZWFtIHNlcXVlbmNlLiB0aGUgYXBwcmVudGljZQpzbGlnaHRseSBhYnN0cmFjdApzd2lybHMgb2YgbWFnaWMKZGlnaXJhbCBhcnQKMiBkIHN0eWxlCnN0dWRpbyBnaGlibGkgYW5kIHNoaW5rYWkgbWFrb3RvCmRuZCA1IGUKc2l0dGluZyBvbiBhIHJlZCBidXR0b24KaW4gYSBudWNsZWFyIHN1Ym1hcmluZQpsYWIgaW4gdGhlIGJhY2tncm91bmQKdXBwZXIgYm9keSBjbG9zZSAtIHVwCm1lcmNlZGVzIGFuZCB2b2xrc3dhZ2VuCmRhcmsgdW5pdmVyc2l0eSBhZXN0aGV0aWMKc29tZSBoYXZlIG5lb24gc2lnbnMKY3JlZXB5IHNraWVzCmxlc3MgdGVudGFjbGVzCnN0YW5kcyBhdCB0aGUgdG9wCnNlbnN1YWwgYW5kIGJlYXV0aWZ1bCBpbmN1YnVzCmZ1bGwgc2NlbmUgY2FtZXJhIHNob3QKdW5yZWFsIGVuZ2luZS4gOCBrCndob2xlIGJpbGwgZnJhbWVkCnNjYW5uZWQgMjQwMCBkcGkKaW4gYSByZWQgdmljdG9yaWFuIGVyYSBkcmVzcwphbGNoZW1pY2FsIHN0aWxsIG1hZGUgZnJvbSBjbGF5CmNsb3NlIHRvIHRoZSBjYW1lcmEKdGVzdCBzdWJqZWN0IHN1cGVyc29sZGllcgp0aGUgZXhwbG9zaW9uIGZyb20gYWtpcmEKc3R1ZGlvIGdoaWJsaSBmaWx0ZXIKZW1lcmFsZCBjb2xvdXJlZCBleWVzCnJ5b2ppCnRoZSBkZXNlcnQgaXMgaW4gd2F0ZXJjb2xvcgpza3lyaW0gc2V0dGluZwp3ZWFyaW5nIG1hbnkgbWVkYWxsaW9ucwpmZW1hbGUgZHJvdyBlbGYKd2luZ3MgbWFkZSBvZiBwaXp6YQpmbGF0IGJydXNoCndpdGggYmVhdXRpZnVsIHdpbmdzCmZhbnRhc3kgc3RpY2tlciBpbGx1c3RyYXRpb24KcGFpbnRpbmcgYXJ0IHdvcmsKdmVyeSBmYW50YXN0aWMgYXJ0CmxhenkgZXllCmJlYXRpZnVsIGhvdXNlCnNldCBpbiBhIHN0ZWFtcHVuayB3b3JsZApmYW50YXN5IHNjZW5pYwpmdWxsIGJvZHkgYXJtb3VyCnNob3cgaXQKZ2xvb215IG1vb2QuIGdyZWcgcnV0a293c2tpCmludHJpY2F0ZSBkZXRhaWxzISEhCm1peGVkIC0gbWVkaWEKc29mdCBiZWF1dGlmdWwgbGlnaHQKZnJhbmNvaXMgYm91Y2hlciBvaWwgcGFpbnRpbmcKaHVnZSBncmVlayBjb2x1bW5zCmlzIHRhbGwKY2xvdWR5IHN1bnNldAo4IGsgcmVhbGlzdGljIGhpZ2ggZGVmaW5pdGlvbgp3aXRoIHR3byBjaGFyYWN0ZXJzCmZyb3N0IGdlbQpmcm9tIHRoZSBvdXRzaWRlIGl0IGxvb2tzIGZvbGtzeQpibHVlIGZpcmViYWxsCnN0dW5uaW5nIGFybW9yCnJvdW5kZWQgaG91c2UgYW5kIGN1dGUgY2hhcmFjdGVyCnJldHJvIGFuZCBmYW50YXN5IHN0eWxlCmplYW4gcGF1bCBnYXVsdGllcgphbWFuaXRhIG15c2NhcmlhCm11Y2hhIGJvdWd1ZXJlYXUKbWVhdHMgb24gdGhlIGdyb3VuZApncmF5c2NhbGUgcGFudG9uZQptb2JpZSBzdGlsbAptb2Rlcm4gaWxsdXN0cmF0aW9uCmRldGFpbGVkIHBlbiBzdHJva2VzCnNtYWxsZXN0IHdhaXN0bGluZQptYWRlIG9mIGJvbnNhaQptYWRlIG9mIGxlYWYgc2tlbGV0b25zCjUgMCdzIGRpbmVyCnBvcnRyYWl0IG9mIGEgd29tYW4gc2xlZXBpbmcKZ2VuZXJhbCBmYW50YXN5CmhhbG8gaW5maW5pdGUhIQpyZW5kaW5nIG9uIGNnc29jaWV0eQpiYXNpYyBiYWNrZ3JvdW5kCmxpemFyZGZvbGsKc3RhdGVseSByb2Jlcwpsb29raW5nIGNvbmZpZGVudAptYWNoaW5lIG5vaXIgZGllc2VscHVuayBncmltY29yZQpjb25uZWN0ZWQgdG8gd2lyZXMKYnJvd24gc2NhbGVzCmpldCAtIGJsYWNrIHNraW4KcGluayBhbmQgcmVkIGNvbG9yIHN0eWxlCnJlZCBsYWNlCmRhcmsgZXllIG1ha2UgLSB1cApkYW1hZ2VkIGFybW9yCmNvbXBsZXggbGlnaHRpbmcKMSA5IDUgMCBzIGhvcnJvciBtb3ZpZSBwb3N0ZXIKY29oZXNpdmUhCnJlYWxseSBjbG9zZSAtIHVwIHNob3QKd2VhcmluZyBsZWF0aGVyIGJpa2luaQpqZWFuIGdpcmF1ZCBhbmQgd2F0ZXJob3VzZQpmaXJzdCBhaWQga2l0Cmxlc2JpYW5zCnZlcnkgc3ltbWV0cmljYWwgYm9keQpmZW1pbmluZSBhbmQgbXVzY3VsYXIKZ2FuZGFsZiBhcyBhIHdvbWFuCmx1c2ggbW9zc3kgY2FueW9uCmhlIHdlYXJzIGEgYmx1ZSBzaGlydApjaW5lbWF0aWMgbWlkIHNob3QgZmlnaHQKYXJ0eQpkdW5lcyBpbiB0aGUgYmFja2dyb3VuZApkdXNrIHN1bnNldCBpbiBiYWNrZ3JvdW5kCnNpdHRpbmcgb24gYSB3b29kIGRvY2sKa29kYWsgcG9ydHJhIGZpbG0gODAwCmZhcm9sIGRhIGJhcnJhCjEgMCAwIDEKZGFyayBhbmQgbW9vZHkgYXRtb3NwaGVyaWMKZnJhbmsgZGlja3NlZQptdXRlZCBjb2xvdXIKaHVtYW5vaWQgYm9keQpoaWxscyBhbmQgb2NlYW4KY2luZW1hdGljIG1vb2R5CnNlYXNvbiAzICggMSA5IDkgNyApCnBvc3QgYXBvY2FseXB0aWMgYXR0aXJlCm91dGZpdCA6IGplYW5zIGFuZCB3aGl0ZSB2ZXN0CmhvbGRpbmcgc3dvcmRzCm9yZ2FuaWMgbWF0dGVyCmYgNC4gMAppbiBhbmNpZW50IGNpdHkgcnVpbnMKYXQgYW4gY3liZXJwdW5rIGNpdHkKYXQgYSBjaXR5IHN0cmVldApkYW5jZSBwYXJ0eQptb25zdGVyIGRlc3Ryb3lpbmcgcHlvbmd5YW5nCjEgOSA1IDAgcyB0aHJpbGxlcgpubyBtb3JlIHRoYW4gdGhyZWUgY2hhcmFjdGVycwpwZXJmZWN0IGJyaWdodCBzdHVkaW8gbGlnaHRpbmcKbWFjYXJvbgptYXN0ZXJ3b3JrIHNjdWxwdHVyZQpzaG91bGRlciBtb3VudGVkIGd1bgpmcHMgZ2FtZSBjb25jZXB0IGFydAppbiBhIHNlYQpjYWN0aSBldmVyeXdoZXJlCmdvcHJvIHNob3QKY29sb3JmdWwgc2tldGNoCmRpZ2l0YWwgc3BhY2UKdmludGFnZSBldXJvcGVhbiBmb2xrIGFydAp0aGUgd29tYW4gaG9sZHMgbW9yZSB0b3lzCmFyY2hlZCBkb29yd2F5CmN1cnZlZCBoYWxsd2F5cwpzZWxmIC0gcG9ydHJhaXQhISEhCmJlYXV0aWZ1bCBwaG90b3JlYWxpc3RpYyBpbWFnZXJ5CmxpbGFjcwpwaG90byAxIDUgbW0KaXIgNjYwIG5tCndpbnkKd2l0aCBjb29sIGhlYWRsaWdodHMKc2hvY2tlZCBsb29rCnJlYWxpc3RpYyBob3Jyb3IKY29tYmF0IGdvZ2dsZXMKbGlnaHRuaW5nISEhCmN5YmVycHVuayBmdXR1cmUKNmsgYXdhcmQgd2lubmluZwpoaWdoIHJpc2Ugc2t5c2NyYXBlcnMKYW5pbWUgcm9ib3RpYyBtaXhlZCB3aXRoIG9yZ2FuaWMKZXBpYyBhbmdlbCB3aW5ncwphcnQgbnV2ZWF1CnRoZSBmb3JrIGlzIG9uIGEgcGxhdGUKdGhlIHBsYXRlIGlzIG9uIGEgd29vZGVuIHRhYmxlCm9taW5vdXMgeWV0IG1lbGFuY2hvbGljCmhpcyBhcm1zIHNwcmVhZC4gcmVhZHkgdG8gZmx5CnNhbW1hIHZhbiBrbGFhcmJlcmdlbgpzdHlsZSBvZiBhbmltZQplbGVnYW50IGNvbG9yIHBhbGV0dGUKOCBrIGF3YXJkIC0gd2lubmluZyBwaG90b2dyYXBoeQpjb3ZlciBvZiBhIG1hZ2F6aW5lCmZpZ3VyYXRpdmUgc3R5bGUKdHJlZSBicmFuY2hlcyBpbnRlcnR3aW5lIGxpbWJzCnNwYWNlc2hpcCBpbiBiYWNrZ3JvdW5kCmFsIGphemVlcmEKY2Fub24gZW9zIDcgZApvbiBhIHNvY2NlciBmaWVsZApob2xkaW5nIGEgc25vd2JvYXJkCmJlYXV0aWZ1bCBlbGYgd2l0aCB2aW9sZXQgc2tpbgp0b28gcmVkCmFuYXRvIGZpbm5zdGFyay4gMyA1IG1tCmFuYXRvIGZpbm5zdGFyay4gNSAwIG1tCmZhbmN5IGRyZXNzaW5nCmFsaWVuIGZsb3JhIGFuZCBmYXVuYQpmbGF0IGxheQpmcm9udCBwZXJzcGVjdGl2ZQpkYW4gbXVtZm9yZCBhbmQgcGV0ZXIgbW9ocmJhY2hlcgp3YWxraW5nIGFyb3VuZCBpbiBhIGZvcmVzdApmYW50YXN0aWMgYW50aHJvcG9sb2d5CmRyZWFtIGV0aG5vbG9neQoxIDggMCAwIGRwaQptb2NoYSBzd2lybCBjb2xvciBzY2hlbWUKZWxkZW4gcmluZyBtb25zdGVyCmFuZGVzCmJhdHdvbWFuCmRpc3RvcnRlZCBwb3NlCnN5bW1ldHJpY2FsIGZhY2lhbCBmZWF0dXJlCm1hZGUgZm9yIGFuIGFydCBnYWxsZXJ5CnN0dWRpb24gbGlnaHRpbmcKc2hhZG93IGdyYWRpZW50CnNldmVyZSBleHByZXNzaW9uCmZvY3VzIG9uIGhpcyBmb290CmxvbmcgYmx1ZSBkcmVzcwpiZWdnaW5nCmRyYWdvbiBhZ2UgaW5xdWlzaXRpb24KdmVyeSBsb25nIGZsb3dpbmcgZGFyayBoYWlyCnZlcnkgbG9uZyBmbG93aW5nIHJlZCBoYWlyCmNsYXNzaWMgY2hpbGRyZW4ncyBpbGx1c3RyYXRpb24KdmluY2VudCBkaSBmYXRlIG5hdXNpY2FhCndlYXJpbmcgcHVycGxlIGhlYWRwaG9uZXMKa2luZCEhIGFwcGVhcmVuY2UKa2luZCBhcHBlYXJlbmNlCmluIGEgY3liZXJwdW5rIHRoZW1lZCByb29tCmxvbmcgY3VydnkgYmxhY2sgaGFpcgp3aXRoCndlYXJpbmcgYSBsYXVyZWwgd3JlYXRoCndlYXJpbmcgbWlsaXRhcnkgc2hvZXMKd2hpdGUgc2tlbGV0b24gZmFjZQpmZWV0IHBvc2luZwplbWVyYWxkIHRpYXJhIGFuZCBuZWNrbGFjZQpjZWx0aWMgY3VsdHVyZQpqYWRlIHRpYXJhIGFuZCBuZWNrbGFjZQp0aWNrbGUgZmlnaHQgaW4gdGhlIGRlYXRoIHRlbnQKZHJlc3NlZCBpbiBhIGxhY3kKZG9taW5hbnQgd2lodGUgYW5kIGJsdWUgY29sb3VycwpwcmUtcmFwaGFlbGl0ZSBvaWwgcGFpbnRpbmcKZHJlc3NlZCBpbiBhIG1lZGlldmFsIGxhY3kKcm9ib3RpYyBleWUKY29zbWljIGVuZXJneSB3aXJlcwp2ZXJ5IGRldGFpbGVkIGxhYmVsaW5nCmNvbnRvdXJzCndpdGggcGVvcGxlIGluc2lkZSBwaWxvdGluZyBpdApvYWsgYWNvcm5zCndpbmdlZCBoZWxtZXQKdXJiYW4gbXVzaWMgc3R1ZGlvCm1haW50ZW5hbmNlIGFyZWEKd2VhcmluZyBhIHBsdWcgc3VpdAphc3Ryb25hdXQgaGVsbWV0cwpjaGlsZHJlbidzIGFydHdvcmsKY2FycnlpbmcgdHdvIGJhcmJlbGxzCmluIGEgZGFyayB0ZWFsIHBvbG8gc2hpcnQKYXQgYSBiaXJ0aGRheSBwYXJ0eQpjYW1vdWZsYWdlIHNjaGVtZQpwaG90b2dyYXBoeSBhdCBuaWdodAppbXBlcmlhbCBzeW1ib2wKZmlyaW5nIGxhc2VyCnRoZSB3aXRuZXNzCnBlcnNvbmEgNApldmUgdmVudHVyZQpzcHJvbmcgc2Vhc29uCnNreWxpbmUgaW4gdGhlIGRpc3RhbmNlCm1pbGl0YXJ5IGRlc2lnbgpjcmFzaGVkIGluIHJvc3dlbGwKeWVsbG93ZWQgd2l0aCBhZ2UKZG91YmxlIGJhcnJlbGVkIG1haW4gZ3VuCnllbGxvdyBjYWxpYnJpIGZvbnQKYnJlZWRpbmcKY2VsbHVsYXIgc3RydWN0dXJlcwphbmltZSBjYXJ0b29uCndpZGUgZ3JlZW53YXlzCnN5ZCBtZWFkIGNpbmVtYXRpYyBwYWludGluZwpzaG90IHdpdGggYSBjYW5vbiAyMG1tIGxlbnMKc2lsdmVyIHdoaXRlIGFuZCBnb2xkCnN5bW1tZXRyaWMgZGVzaWduCmhpZ2hseSByZWFsaXN0aWMgY29uY2VwdCBhcnQKbHV4dXJ5IGZ1cm5pdHVyZQpzbGVlayBibGFjayBhbmQgd2hpdGUKZGllc2VscHVuayBsb29rCmFlcm8gZHluYW1pYwpoZWF2aWx5IGFybWVkCm9uIGEgZmxvYXRpbmcgcm9jayBpc2xhbmQKYWxpZW4gcGxhbmV0IGNvdmVyZWQgaW4gd2F0ZXIKbXVsdGlwbGUgd2F0ZXJmYWxscwptdWx0aXBsZSBtb29ucyBnbG93aW5nCmNhdCBkb2cgdGVkZHkgbWl4Cmxvb2tpbmcgZG93biBhdCBhIG1hc3NpdmUgY3JhdGVyCndlYXJpbmcgYSBwaW5rIGhlYWQgYmFuZApuZW8gLSBneXBzeSBjYXJhdmFuCm5ldXRyb24gc3RhcgpjaGluZXNlIGJ1aWxkaW5nCnBpbmsgZ2lybApkcmVhbXkgc29mdApnZXR0ZXIgcm9ibwpndXJlbm4gbGFnYW5uCmFudG9uIHNlbW9ub3YKZGFyayBzY2kgLSBmaSBtb3ZpZSBzY2VuZQpsYXVyZSBsaXB0b24KY3JlZGl0IG5hc2EKcGhvdG9zaG9wZWQKY29udHJhcG9zdG8Kcm91dGUgNiA2CnJvZ2VyIGRlYW4gYW5kIGFsZXhhbmRlciBqYW5zc29uCnJvYnVzdGx5IG9yZGluYXRlZApkYXZpZCBmZWJsYW5kCm15c3RpY2FsIGJsdWUgZm9nCmJhbnByZXN0bwpnYXJ5IGNoYWxrCmRuZCBmYW50YXN5IGFydApiYWNrZ3JvdW5kIGVudmlyb25tZW50LiA4IGsKd2hpdGUgYW5kIHB1cnBsZQppbiBhIGJhbGwgcGl0CmJsYWNrIG1ldGFsIHN0eWxlCmdyaW0gcmVhcGVyIGV4Y2VwdCBhIHJhdAphbiBpbWFnZSBvZiBhIGJlYXV0aWZ1bCBjeWJvcmcKd2luZGluZyBhcm91bmQgdHJlZXMKcGVudGF0b21pZGFlCmhhbHlvbW9ycGhhIGhhbHlzCmNoaW1lcmljCnN0eWxlIG9mIGJvcmRlcmxhbmRzCnNub3cgc25vdwphbGllbiBicmVhdGh0YWtpbmcgbGFuZHNjYXBlCnN0dW5uaW5nIGRlc2lnbgpiaXJkcyAtIGV5ZSB2aWV3CnNwYWNlIGJhdHRsZXMKbWlrZSB0eXNvbiB3aXRoIGEgdG9hZAo0ayBkZXN0cnVjdGlvbgpzcGlkZXIgbGVncwpwZW9wbGUgc3dpbW1pbmcKd3JlY2tlZCBjYXJzCnNpbGVudCBoaWxsIHN0cmVldHMKZGl2aW5lIGJlaW5nCmJpcmRzIGV5ZSBwaG90b2dyYXBoCnRvbnMgb2Ygcm9vbXMKc3RhaXJzIHRvIGFuIHVwcGVyIGZsb29yCnZvbHVtZXRyaWMgbWlzdApzdGVwcGluZyBvbiBhIG1pbmlhdHVyZSBjaXR5CmdpZ2EKcmVkIGFuZCBjaW5lbWF0aWMgbGlnaHRpbmcKYWxwaG9uc2UgZmx5Cmluc2lkZSB0aGUgcm9tYW4gY29sbGlzZXVtCmhkIHZmeApuaWdodCBza3kgcGhvdG9ncmFwaHkKbGF5aW5nIGRvd24gaW4gdGhlIGdyYXNzCmluIHRoZSBtaWRkbGUgb2Ygbm93aGVyZQp0b3AgLSB2aWV3CmNsZWFuIGxpbmVzIGluIGRhcmsgcGVuCm1hZGUgcHVyZWx5IG91dCBvZiB3YXRlcgpwaG90b2dyYXBoIGZyb20gYWJvdmUKdGhpbiBibHVlIGFydGVyaWVzCmZhbnRhc3kgdGVycm9yCmluc2lkZSBvZiBhIGNhdmUKbGFzZXJzIGluIG1pZCBmbGlnaHQKZXhwcmVzc2lvbmlzdGljIGxpZ2h0aW5nCm1vbnN0ZXIgc2xpbXkKa25pZ2h0IGNoZXNzCndvcm0gcm91bmQgbW91dGgKd29ybSBicm93biB0aGVtZQp0ZWxlcGhvdG8gbGVuc2UKc29mdCByZWQgdG9uZSBjb2xvcnMKZnJvemVuIGluIG1vdGlvbgphd2FyZC13aW5uaWcgcGhvdG8KbGlnaHQgY29taW5nIGZyb20gd2luZG93cwpsYXJnZSBwYXRjaGVzIG9mIHBsYWluIGNvbG91cnMKZGlzY3JlZXQgbGVuc2ZsYXJlCnN0dWRpbyBnaGlibGkgc2NoZW1lCm1hc3NpdmUgYXJjaApwZW9wbGUgcGFuaWNraW5nCmZseWluZyBhYm92ZSB0aGUgY2xvdWRzCmFic3VyZGx5IG1hc3NpdmUgcGh5c2lxdWUKd2lzcHkgaW5rIGhvcnJvcnMKYm90aCB3ZWFyaW5nIHZpY3RvcmlhbiBjbG90aGVzCmh5cGVyIHBob3RvcmVhbGlzdGljIHJheXRyYWNpbmcKcGFzdGVsIHRvbmUKaGVpZ2h0IDEgNyA4Cmdvb2QgaGlwcyBhbmQgbG9uZyBsZWdzCmRyZXNzZWQgaW4gYSB0b3AgYW5kIHNob3J0cwpmdWxsLWJvZnkgcGxhbgptZXRhbCBqb2ludHMKYmVhdXRpZnVsIGdpcmwgbW9kZWwKYmFja3dhcmRzCnNtaWxpbmcgbW91dGgKcHVuY2hpbmcgaW4gYSBiYWcKaW4gYSBjYXZlIHdpdGggdGhlIHdhdGVyZmFsbApjb25jZXB0IHN0eWxlCmdyYXkgYmxhY2sgd2hpdGUgYW5kIHJlZCBub2lyCnZlY3RvciBzaGFkZWQgYW5pbWUKZmVlZGluZyBhIGdpcmFmZmUKZG9sbCBpbiBoYW5kCm1hZ2ljcmVhbGlzbQpuaXNoaWhhcmEgaXNhbwpzb2Z0YWlyIGFyZW5hIGxhbmRzY2FwZQphaXJzb2Z0IGhhbmRndW4KeWVsbG93IGF1cmVvbGUKYWlyc29mdCBndW4Kc2Vuc2Ugb2YgbXlzdGVyeQpoYXMgZ29sZApnbGl0eiBwcm8Kc2hvcnQgc2tpcnQgYW5kIGEgbG9uZyBqYWNrZXQKYSBwbGFzdGVyIG9uIGhlciBjaGVlawp0aGUgd2luZCBtb3ZlcyBoZXIgc2hpcnQKcGxheXMgc2thdGVib2FyZHMKYW5pbWUgZ2lybCBuYW1lZCBsdWN5Cmx1Y3kgaGFsZQpsdWN5IGhhbGUgYW5kIG1haXNpZSB3aWxsaWFtcwpjdGFuZSAzIGQgcmVuZGVyZWQKbWFkYXJhIHVjaGloYQp1bmljb3JuIGhvcm4KY29zbWV0aWNzCmF0IHRoZSBzZWFzaWRlCndhdGNoaW5nIHRoZSBzdW4gc2V0LiBhbmltZQpwYWludGJhbGwgd29ybGQgY3VwCnN0eWxlIG9mIG1hZ2ljYWwgZ2lybAp5ZWxsb3cgYnV0dGVyZmxpZXMKdml2aWQgZ3JhZGllbnQgY29sb3JzCnNhdm9yeQptYW55IHJ1c3R5IGpvaW50cwptZWRpZXZhbCBzY2VuZQp3aGlza2V5IGdsYXNzIHdpdGggaWNlIGN1YmVzCmp1bGlhIGdvcm9raG92YQp2YXJhZGVybyBiZWFjaApkaWxhdGVkIHB1cGlsCnN0YW5kaW5nIG9uIGEgbGFkZGVyCnByb3RhbApjb21pYyBzaGFkaW5nCmNhcnJ5aW5nIGEgc2NvcGVkIGh1bnRpbmcgcmlmbGUKaW52ZW50aW5nIGEgdGltZSBtYWNoaW5lCiggKCAoIHZvbHVtZXRyaWMgbGlnaHRpbmcgKSApICkKc2VuaW9yIGNvbmNlcHQgYXJ0aXN0CmNvdmVyZWQgaW4gc3ByaW5rbGVzIGFuZCBjcnVtYnMKMyBkIHJlbmRlciBuIC0gOQpyYWRpYXRpbmcgZ29sZGVuIGxpZ2h0CndlYXJpbmcgcm95YWwga2ltb25vCmRpc3BsYXllZCBpbiBhIG11c2V1bQp1dG9waWEgcHJvZmlsZQp0aGUgdG9pbGV0IGlzIHNoaW55CmxvdyBkZXB0aCBmaWVsZCBlZmZlY3QKd2l0aCBhIGZ1bGwgYmxhY2sgYmVhcmQKcGFsZSBhcyB0aGUgZmlyc3Qgc25vdyBvZiB3aW50ZXIKY2xvc2VkIC0gbW91dGggc21pbGUKbWFjcmFtZQpjaGFpbSBzb3V0aW5lIGFuZCBmcmFuayBhdWVyYmFjaAp3ZWFyaW5nIHNoaW55IGdvbGQgY2F0c3VpdApnbG93aW5nIGFsaWVuIHN5bWJvbHMKdmluZXMuIHRpZmZhbnkgYmx1ZQpjaGVzdCBjb3ZlcmVkIHdpdGggcGFsbSBsZWF2ZXMKYmxvbmRlIGdvZGRlc3MKZW1lcmFsZCB5ZWxsb3cgZXllcwpsc2QgZmFjZQp3YXRlcmZhbGwuIGZvZwpqdXN0IG9uZSByYWluYm93IDggawpjb2xvcmZ1bCBoYWlycwohIGxvdyBjb250cmFzdCEKKCBtb2ViaXVzICkKcmVkdWNlZCBjb2xvcnMKc3BvcnRzIGJyb2FkY2FzdApkcmVzc2VkIGFzIGEganVkZ2UncyByb2JlcwozIGQgY2hhcmFjdGVyIHJlbmRlcgppcmlkZXNjZW50IGJhY2tncm91bmQKYmxhY2sgZXllcyEhIQphbmRpIHJ1c3UKaW4gYSB2aWxsYWdlCndlYXJpbmcgYW4gZWxlZ2FudCB0cmliYWwgb3V0Zml0CmthdGV5IHRydWhuCmhlciBoYWlyIGlzIHRpZWQgYWJvdmUgaGVyIGhlYWQKc3RlYW1wdW5rIGhvcnNlCmNvbnN0cnVjdGlvbiBlcXVpcG1lbnQgMSA5IDkgMApucGMgd2l0aCBhIHNhaW50J3MgaGFsbwphYnN0cmFjdCBwYWludGluZyBvaWwgb24gY2FudmFzCm9sZCB5ZWFyYm9vayBwaG90bwpmdW5ueSBhbmQgc2lsbHkKb3ZlciBhIGNsaWZmCm1hbmhhdHRlbiBvbiB0b3Agb2Ygc2t5c2NyYXBlcnMKYW4gZXZpbCBjYXRob2xpYyBwcmllc3QKeWVsbG93IGNhcnBldGVkCndhcm0gY29sb3JzLS1zZWVkIDEyNDIyNTM5NTEKcmVhbGlzdGljIHdpbmRvd3MKcmVzZW1ibGluZyBhIGNyb3duCm1hZ2ljaWFuIGRvZyBwZXJmb3JtaW5nIG9uIHN0YWdlCmJhc2ljIHNoYXBlcwp3aXRoIGEgc2tlbGV0b24gYXJteQpjZW50ZXIgZm9jdXNlZApsb3cgdG9uZXMKdW1icmVsbGFzCmRldGFpbGVkIDQgayBwYWludGluZwp2aXN1YWwgZmlkZWxpdHkKZG1kCnJhaW5ib3cgc21va2UKZGlmZmVyZW50IGhhaXIgY29sb3VycwpkZW5zZSBsdXNoIGZvcmVzdCBhdCBuaWdodApkbmQgcGFydHkKKCh5ZWxsb3cgbWFnaWMgb3JjaGVzdHJhKSkKbmV0ZmxpeCBuZW9uIGxvZ28gY29uY2VwdCBhcnQKd2VhcmluZyBhbiBvcmFuZ2UgdC1zaGlydAphcyBhY3Rpb24gZmlndXJlcwpwbGF5aW5nIGRuZApiZWF0aWZ1bCBtb3VudGFpbiBiYWNrZ3JvdW5kCmtpZHMgdG95cwpzdHVubmluZyB2aXN0YQptYXR0ZSBsYW5kc2NhcGUKc21hbGwgcmVjdGFuZ3VsYXIgZ2xhc3NlcwpzdGl0Y2hlZCB0b2dldGhlcgpicmEgc3RyYXAKbWlkIHJpZmYKc2hhdmVkIHNpZGVzIHNob3J0IHRvcApyYWluYm93IGNvbG9yZWQgZHVzdCBtYXNrCmJlaGF2aW9yCm1hbnVhbAphZHZlbnR1cmUgaHlwZXIgcmVhbGlzdGljIHJlbmRlcgp0b3kgZ3VpbGxvdGluZQoxIDggdGggY2VudHVyeSBvaWwgcGFpbnRpbmcKMSA5IHRoIGNlbnR1cnkgb2lsIHBhaW50aW5nCjRrIHBob3RvcmVhbGlzbQpyZWFsIGxpZmUgaW1hZ2UKcGxvdHRpbmcKY2FtZXJhIGZyb20gYSBsb3cgYW5nbGUKaGlnaCBkZXRhaWxlZCBvaWxwYWludGluZwp3aXRoIG5lcmR5IGdsYXNzZXMgYW5kIGdvYXRlZQpvbnNjcmVlbiBpbmZvIGFuZCBsYWJlbHMKcmVhbGlzdGljIHByb3BvcnRpb25zISEKc2lsdmVyIGFuZCBnb2xkIGhlYXZ5IGFybW9yCnJ1bmUgbWFnaWMKYmVhdXRpZnVsIGFuZCBzbWlsaW5nCmZsZXNoeSBjcmVhdHVyZSBhYm92ZSBoZXIgbW91dGgKYW5pbWUgc3R5bGVkIGRpZ2l0YWwgYXJ0Cml2b3J5IGFuZCBlYm9ueQpzd2lybGVkIGFyY2hpdGVjdHVyZQp0aGUgdm9pZCBwZW9wbGUKYW1hemluZyBmb29kIHBob3RvZ3JhcGh5CmFyb3VuZCB0aG91c2FuZCBvZiBzdGFycwp3aXRoIGEgY3VwIG9mIGhvdCBjaG9jb2xhdGUKcHJvZHVjdHMgcGhvdG8gZnJvbSBndW4gbWFnYXppbmUKZ3JlZW4gcGxhbnQKYnJpZGdlIHRvIHRlcmFiaXRoaWEKaXQncyB3ZWFyaW5nIGEgY3V0ZSBsaXR0bGUgaGF0CmNhc3RpbmcgYSBzcGVsbCBvbiBhIHBvdGlvbgpzdHVubmluZyBjbG9zZXVwaGVhZHNob3QKaGFwcHkgYW5kIGRpc2FybWVkCnNpdHRpbmcgZG93biBjYXN1YWxseQppbiBnb29kIHBoeXNpY2FsIHNoYXBlCndlYXJpbmcgYSBibGFjayBsZWF0aGVyIHZlc3QKYmxhY2sgbGVhdGhlciB2ZXN0IGlzIG9wZW4Kbm8gc2hpcnQgdW5kZXIgdGhlIHZlc3QKd2VhcmluZyBhbiBhbW1vIGJlbHQKd2VhcmluZyBjYXJnbyBwYW50cwpsb25nIGJyb3duIGJlYXJkCm92ZXJzaXplZCBicm93biBtdXN0YWNoZQpjYXJnbyBzaG9ydHMKbW9vbnJheSByZW5kZXIKYWR2ZW50dXJlIGdlYXIKc29waGlzdGljYXRlZCBkcmVzcwp3ZWFyaW5nIGEgd29uZGVyZnVsIGRyZXNzCmJlYXRpZnVsIHNtaWxpbmcgZmFjZQpob2xkaW5nIGEgYm9iYSBtaWxreSBvb2xvbmcgdGVhCmZhYnJpYyBlbWJyb2lkZXJ5CnBsYXlpbmcgc29jY2VyIG9uIHRoZSBiZWFjaApwaG90byByZWFsaXN0aWMgb2N0YW5lIHJlbmRlcgpkcmVhbXkgc2NlbmUKbGFyZ2Ugc3VuIGluIHNreQpwaW5lIHRyZWVob3VzZQptaXN0IGFuZCByYWluCmNvbnNlcnZhdGl2ZQpmcm9tIGZpbmFsIGZhbnRhc3kgeGlpaQptZWRpdW0gbGVuZ3RoIHNsaWNrIHdoaXRlIGhhaXIKZWVyaWUgc2VsZiAtIHBvcnRyYWl0CmJlYXV0aWZ1bCBjbGVvcGF0cmEKbnViaWFuCnBvc2luZyBvbiBhIGJlYWNoIHdpdGggdGhlIG9jZWFuCnB1cmUgY29sb3IgYmFja2dyb3VuZApnb3JpbGxheiBhcnQKbWVkaXVtIHRvbmVzCm1hbmEgYmxhc3QKYmVhdXRpZnVsbHkgZGVzaWduZWQgY2hhcmFjdGVyCndldCBvbiB3ZXQKbWVkaWV2YWwgY2l0YWRlbAp0YXJvdCBjYXJkIHRoZSBoZXJtaXQKc2NhcmFiIHJlcGxvaWQKYnJpYW4gamFjcXVlcwp3ZWFyaW5nIGhlcm8gY29zdHVtZQpoaWdobHkgcmVhbGlzdGljIHBob3RvZ3JhcGh5CnJlYWxpc3RpYyBkZXBpY3Rpb24KY29sb3JmdWwgYmVuIGRheSBkb3RzCndpdGggYSBmcm9udCBwb3JjaApleHRyZW1lbHkgZGV0YWlsZWQgbWFuCndpbmRvdyBsaWdodHMKZ3JlbWxpbgpzdWJqZWN0PSBkdWNrCnN1YmplY3Q9IGNoaW1wCmhvbHN0ZXJpbmcgc3dvcmQKd2l0aCBhIHNxdWlkIHRhdHRvbyBvbiBoaXMgYXJtcwpoYWlycyBmbHkgaW4gdGhlIHdpbmQKcG9pbnRlZCB0ZWV0aCBhbmQgc2V2ZXJhbCBleWVzCmFuIHVsdHJhZmluZSBkZXRhaWxlZCBwaG90bwpqb2FuIGNvcm5lbGxhCndpdGggdmlicmFudCBza3kKbWF0dGUgcGFpbnRpbmcgZmluaXNoCmZvZ2d5IGZvcnJlc3QgYmFja2Ryb3AKZ2xpZGluZwp0cmlwcGluZyBvbiBsc2QKYnJpZ2h0IHNwb3RsaWdodHMKZGFuY2luZyBwZW9wbGUKYnVybmluZyBidWlsZGluZwo0IGtoZApwaG90byBmcm9tIHZvZ3VlIG1hZ2F6aW5lCmZlYXRoZXJzIGV4b3RpYyBtb3JwaGluZyBob29wb2UKb2N0YW5lIHJlbmRlciBibGVuZGVyIDggawptaWxpdGFyeSBjYXJyaWVyIHJpZwpjb25jZXB0IGFydCBvY3RhbmUgcmVuZGVyCmRlYnJpcyBmbHlpbmcgZXZlcnl3aGVyZQpzaG9ydCB1bmtlbXB0IGdyZWVuIGhhaXIKY2FsZgpzdCA6IHRuZwpjcmltc29uIGFjY2VudHMKc2luZ3VsYXIgbGlnaHRuaW5nCmhlYXJzdCBjYXN0bGUKdGFsbCBhY2lkIGdyZWVuIGdyYXNzIGZpZWxkCm11c2N1bGFyISEKYmFzaWwgbGVhdmVzIGZseWluZyBhbGwgb3ZlcgpwbGF5ZnVsIHZpYmUKZGFyayBvcm5hdGUgcm95YWwgcm9iZXMKb3JuYXRlIHJveWFsIHJvYmVzCm5lb24gY29sb3JlZAptdWx0aXBsZSBzdW5zCmJsdWUgd2hpdGUgY29sb3JzCnRpcmVkIGFuZCBkcnVuawpmb2cuIGJ5IGdyZWcgcnV0a293c2tpCmNyZWF0aW5nIGFuIG9taW5vdXMgcHJlc2VuY2UKd2luZ3MgYXJlIGNsb3VkcyBvZiBkYXJrbmVzcwplbGVnYW50IHNtaWxpbmcgcG9zZQppbmZpbml0ZSBzcGFjZSBjbG9jayBiYWNrZ3JvdW5kCmRyYW1hdGljIG1hZ2ljIGZsb2F0aW5nIHBvc2UKd2F2aW5nIGFybXMKZHJhbWF0aWMgc3RhbmRpbmcKZHJhbWF0aWMgdGhpbmtpbmcgcG9zZQp3ZWFyaW5nIHRyYWNrIGFuZCBmaWVsZCBzdWl0Cmhlcm9pYyBraWNraW5nIHBvc2UKZHJhbWF0aWMgc21va2luZyBwb3NlCmhhbmRzIHNoaWVsZGluZyBmYWNlCmRyYW1hdGljIHNtaWxlIHBvc2UgaW50cmljYXRlCnB1cnBsZSBnbG93aW5nIGNvcmUgaW4gYXJtb3IKZWxlZ2FudCBmbG9hdGluZyBwb3NlCmJlYXV0aWZ1bCBkZXRhaWxlZCBmaWd1cmUKZHJhbWF0aWMgaW1wb3NpbmcgcG9zZQpibGFjayBzY2xlcmEhIGV5ZXMKZ2xvd2luZyBsaW5lIGNyYWNrcyBpbiBhcm1vcgp3aWVsZGluZyBzY3l0aGUKZHJhbWF0aWMgcmVhZGluZyBzcGVsbCBib29rIHBvc2UKZmxhdCBjaGVzdGVkCmVsZWdhbnQgc2VkdWN0aXZlIHBvc2UKYXV0dW0gZ2FyZGVuCm1lbmkgY2hhdHppcGFuYWdpb3RvdQpyZWFsaXN0aWMgc2NhbGUKY3JhdGVyIGxha2UKY3JhY2tsaW5nIGJsYWNrIGxpZ2h0bmluZwpoaWdobHkgYXRtb3NwaGVyaWMgYW5kIGZvZ2d5CndlYXJpbmcgcmVkIHJvYmVzCmRvbmUgaW4gdGhlIHN0eWxlIG9mIG1hdGlzc2UKZmFudGFzeSBmb3ggbG92ZQppbnNpZGUgYSBoYXVudGVkIGhvdXNlCmNhbWVyYSBwb3YKb3V0bGFzdCAyCm91dGxhc3QgZ2FtZQpiZW4gcmlkZ2V3YXkKZGVzY2VudCBpbnRvIGx1bmFjeSBhbmQgbWFkbmVzcwpyZWFsaXN0aWMgOGsgcGhvdG9ncmFwaHkKY2Fub24gMiA0IG1tIGYgLyAxLiA0IGxlbnMKbmVvbiBjb2xvcmVkIGRyZXNzCndpdGggYSB3aGl0ZSBtdXp6bGUKaW4gYSBwdXJwbGUgY2xvYWsKaW50cmljYXRlIGZyYWN0YWxzCnNvdWwgY2FsaWJlcgppbnRyaWNhdGUgd2V0IGxhdGV4IHN1c3BlbmRlcnMKc3BpZGVyIGdhZwphc2lhbiBkZWNlbnQKZmFjaWFsIHRyaWJhbCBtYXJraW5ncwppbnRyaWNhdGUgbGVhdGhlciBzdXNwZW5kZXJzCmNhcmF2YWdnaW8gYW5kIGFydGdlcm0KYmxhY2sgZXllIG1hc2sKbGF2YSBhbmQgc21va2UKYmxhemluZyBmaXJlIGFuZCBnbG93aW5nIGxhdmEKYmlub2N1bGFycwptYWRlIGluIHVucmVhbCBlbmdpbmUgNQpleWVzIG1hZGUgb3V0IG9mIG1hY2Fyb25pCmJsdWUgLSBwcmludApvZiBhIHVmbyBwcm9wdWxzaW9uIHN5c3RlbQphbHBpbmUgbGFuZHNjYXBlIHdpdGggYSBjb3R0YWdlCmFtb25nIHdvbmRlcmZ1bCBnb2xkZW4gZmlyZWZsaWVzCmhpZ2hseSBkZXRhaWxlZCAjIG5vIGZpbHRlcgpnYXJ5IGxhcnNvbgpwaW5rIG1vb24KaW4gYSByaXZlciBpbiB0aGUganVuZ2xlCjE5NTBzIHByZXNzIHBob3RvCnRoZSBwaXp6YSBoYXMgYSBsYXJnZSBjb3JuaWNpb25lCmRhcmsgYWNhZGVtaWEgYWVzdGhldGljcwpiYWNrZ3JvdW5kIGZ1bGwgb2YgbHVja3kgY2xvdmVycwpzaGlubmluZyBzdGFycwpoaWdoZXIgYmVpbmcKYmFuZG9saWVycwpoZSBpcyBhbGwgYWxvbmUKZHJpcHBpbmcgc2tpbgpob3JyaWZpYyBmb3Jlc3QKYW11c2VtZW50IHBhcmsgYnVpbGRpbmdzCmRlZXAgc2VhIHRoZW1lZApmb3Jlc3QgdGhlbWVkCnN0YXJpbmcgc29mw61hIHZlcmdhcmEgc2NyZWFtaW5nCm1pbmltYWxpc3Qgc3RpY2tlcgpsZWdzIHJlcGxhY2VkIHdpdGggaHVtYW4gbGVncwpwcmltYXJ5IGNvbG91cnMKaHVtYW4gYmFjayBsZWdzIGFuZCBzbmVha2VycwpodW1hbiBsZWcgcGhvdG9ncmFwaHkKcGFsZXR0ZSBrbmlmZSB0ZXh0dXJlcwppdCBoYXMgYSByZWQgYW5kIGJsYWNrIHBhaW50CmxpZ2h0cyBpbnNpZGUKYXJjaGl0ZWN0dXJlIHJlbmRlcgptaWNoYWVsIGJheSBzdHlsZQpvbmUgc21hbGwgYm9hdApkYW5nZXJvdXMgY2xpZmZzaWRlCnRyZWVzLiBtYXR0ZSBwYWludGluZwpoYW5uYSBiYXJiZXJhIHN0eWxlCnJldHJvIHNjaSAtIGZpIGFydApmb3Jnb3R0ZW4gYW5kIGxvc3QgaW4gdGhlIGZvcmVzdApmbHlpbmcgb3ZlciB0aGUgaG9yaXpvbgpyaW90aW5nCmluY3JlZGlibGUgZGlnaXRhbCBhcnQKcG9wdWxhY2UKc2VhIG9mIG1pbGsKb25lIHNpbmdsZSBtYW4gaW4gYSBoYXptYXQgc3VpdAp3YWxsIHRvIHdhbGwgYm9va2Nhc2VzCmhhbG9nZW4KMSA5IDggMCBzIHJldHJvIHNjaSAtIGZpIGFydApkZXNhdHVyYXRlZCBjb2xkIGNvbG9yIHBhbGV0dGUKaW4gYSByZXNlYXJjaCBmYWNpbGl0eQp3aXRoIGJsb29kc2hvdCBleWVzCnN1bW1lciBsaWdodGluZwpzaG90IHdpdGggY2Fub24gZW9hIDYgZCBtYXJrIGlpCmdvbGRlbiBlYXJyaW5ncwpkb3ZlcyBmbHlpbmcgaW50byB0aGUgcG9ydGFsCmVwaWMgbWFnaWMgZWZmZWN0cwppbnNpZGUgYSBiZWVyIGdsYXNzCm1lZGljYWwgZGVwaWN0aW9uCnNoYXJwIGZvY3VzIHVoZCA4CmFybWF0dXJlIHdpcmUKbGF5ZWQgb24gYSByZWQgdmVsdmV0IGZhYnJpYwpmYXJpZCBnaGFuYmFyaQpkZXJlYWxpc2F0aW9uCmRpc2Nvbm5lY3RlZAp0aGFpbGFuZCBhcnQKdW5jYW5ueSB2YWxsZXkhISEKcmFkaWF0aW9uIGdsb3cKbGFyZ2UgZXllcyBhbmQgbWVuYWNpbmcgc21pbGUKaG9sZGluZyBhIGJvdHRsZSBvZiBiZWVyCmFlcmlhbCB2aWV3eW9qaSBzaGlua2F3YQpuZW8gdG9reW8gYmFja2dyb3VuZAp3aXRoIGJsdWUgc2tpbgpsaWdodGhlYXJ0ZWQgY2VsZWJyYXRpb24KZWFydGggb3V0c2lkZQpvdXRzaWRlIGluIHNwYWNlCmtlbnQgbW9ua21hbgp0aGUgc2t5IGlzIGJlYXV0aWZ1bCBhbmQgY2xlYXIKZnV0dXJpc3RpYyBjaXR5IHNjYXBlCnBodG9yZWFsaXN0aWMKYWxpZW4tbGlrZQpsZWdzIGFuZCBhcm1zCnNoaW5pbmcgcGxhdGUgYXJtb3IKc2hhcnAgZm9jdXMgcGVyZmVjdCBob3Jpem9udGFsCnN5bW1ldHJ5IGlsbHVzdHJhdGlvbgpicm9uemUgLSBza2lubmVkCndyYXBwZWQgYXJtcwpleHBvbmVudGlhbApiYWNrZ3JvdW5kIGJhdHRsZWZpZWxkCm1vdGhlcmJvYXJkIGNpcmN1aXRyeQppbiBhIGRhcmsgZnV0dXJpc3RpYyByb29tCnNoZSBpcyBmYWNpbmcgdGhlIGNhbWVyYQpwaG90b2dyYXBwaHkKYmxhY2sgYW5kIGdvbGQgY29sb3JzCmJpcnRoIGFuZCBkZWF0aAphd2FyZCB3aW5uaW5nIG1hZ2F6aW5lIHBob3RvCnRyZWUgb2YgbGlmZSBzZWVkIG9mIGRvdWJ0CmNpbmVtYXRpYyBsaWd0aW5nCm1hZ2ljIHJlYWxpc20gcGFpbnRpbmcKY3JhY2tsaW5nIGxpZ2h0aW5nIG1hZ2ljCndlbGwgbGl0IG5pZ2h0IGluIGxhcyB2ZWdhcwpkb3plbnMgb2YgZ2FsYXhpZXMKdHdpc3RlZCBlbmVyZ3kgZmxvdwp0cmFuc2x1Y2VudCBnbG93aW5nIGplbGx5ZmlzaAoxNm1tIGdyYWluCmlsbHVzdHJhdGlvaW4KYXJ0aXN0aWMgaW1wcmVzc2lvbgpib2tlbgpkYXZ5IGpvbmVzIHdpdGggdGVudGFjbGVzCnNub3cgb24gdGhlIGJvZHkKYXJjaGFvbiB0aGUgZXZlcmNob3NlbgpyYW5kb20gY293cwpoZWF2eSBtb29kCmdvdGhpYyBmYWNlCmJlYXV0aWZ1bCBnb3RoaWMgeHJheSBhbmdlbApnYWxheGllcyBzd2lybGluZyBhcm91bmQKc3RyYW5nZSBhbmQgaGF1bnRpbmdseSBiZWF1dGlmdWwKcG9zaW5nIGluIGZyb250IG9mIGJvbWJlZCBjaXR5Cmp1YW4gY2Fsb3RvCnN5bW1ldHJpYyBpbmRpYW4gcGF0dGVybgpibHVlISBhbmQgd2hpdGUgY29sb3JzCmJsYWNrISBhbmQgd2hpdGUgY29sb3JzCnN5bW1ldHJpYyBwYXR0ZXJuCmRpZ2l0YWwgeWVsbG93IHJlZCBzdW4KaW5mb2dyYXBoeQpuYXR1cmFsIHNraW4gdG9uZXMKaGFyc2ggc3VuIGxpZ2h0CnRyYWlsIG9mIGJsb29kIGZvbGxvd3MgYmVoaW5kIGl0CnRveGljIGdsb3dpbmcgc21vZyBpbiB0aGUgc2t5CnN0eWxlIG9mIGplYW4gYmFwdGlzdGUgbW9uZ2UKd29vZGVuIGphZ2FubmF0aCBmYWNlCnBhaW50IG9uIGJsYWNrIHZlbHZldCBjYW52YXMKbW9vZHkgbmV1dHJhbCBoaXBzdGVyIHRvbmVzCmpveSBnYXplCmNsYXNzaWNhbCBhbmltYXRpb24KZ3JlZW4gd2FsbHMKaW4gamFwYW5lc2Ugd29vZGJsb2NrIHByaW50CmdyZXkgY29sb3VycwpncmVlbiBwaWNrdXAgY2FyCnN0YXIgd2FycyByZXZlbmdlIG9mIHRoZSBzaXRoCnN0cm9vcHdhZmZlbApzbW90aGVyZWQgaW4gbWVsdGVkIGNob2NvbGF0ZQpzcGFjZSBqZWxseWZpc2gKaGRyIHBob3RvcmVhbGlzbQpibG9vZCBzZWVwaW5nIGZyb20gZXllcwpkZXRhaWxlZCBmZW5jZXMgYW5kIHN0b25lIHdhbGxzCmZsYXVudGluZyBoaXMgd2VhbHRoCnNjcm9sbGluZyBjb21wdXRlciBtb3VzZQpwYXJ0eSBsaWdodHMKd2VhcmluZyBhIHJlZCBob29kaWUKZmxvd2VyIG1vdGlmCmdlbCBsaWdodGluZyBuZW9uIGdsb3cKYmVrc2lua2kKYmx1ZWpheQo0IGsgcHJvZHVjdCBwaG90bwpvbiBhIHJvb2Z0b3AKc2l0cyBvbiBhIHJvb2Z0b3AKc3R5bGUgb2YgYW5nZWxhIGRlYW5lCmJsb25kZSBzd2VkaXNoIHdvbWFuCmNpcmNhIDIgMCAwIDgKbWlkZGxlIG9mIHRoZSBkYXkKaXRzIGJvd2wgb3ZlcmZsb3dpbmcgd2l0aCBwbGFudHMKd2VhcmluZyBhIHBvbGljZSB1bmlmb3JtCndhbGtpbmcgaW4gYSBmb3Jlc3QKd2l0aCBjYXN0bGUgaW4gZGlzdGFuY2UKbG9uZyB3YXZ5IHJlZCBoYWlyCmVuZ3JhdmluZyBkcmF3aW5nCmN1cHMgYW5kIGJhbGxzCnBpbGxhcnMgb24gY2VpbGluZwpkeXN0b3BpYW4gc2NpZmkgZ2FkZ2V0cwpoYWNraW5nIGludG8gdGhlIG1haW5mcmFtZQpidXNoZXMgaW4gdGhlIGJhY2tncm91bmQKc3RhcnMgcmVmbGVjdGluZyBvbiB0aGUgd2F0ZXIKdG9hc3RlZCBicmVhZCBpbiB0b2FzdGVyIHNsb3RzCmVnZ28gd2FmZmxlIGluc2lkZSB0b2FzdGVyIHNsb3QKZ2xvd2luZyBoZWF0aW5nIGNvaWxzCnNsaWNlZCBicmVhZCBpbiBzbG90cwprb3JlYW4gbW1vCjEgOSA4IDAgcyBwb3N0ZXIgc3R5bGUKNDAwIHN0ZXBzCmZvcmVzdCB3aXRoIHRyZWVzIHdpdGggZmFjZXMKc21hbGwgZGVtb25zCnNoYWRvd3Mgc2NyZWFtaW5nCmJsdWUgZG9vcgpncmVlbiB2ZWdldGF0aW9uCmx1eHVyaW91cyBlbnZpcm9ubWVudApibHVlIGFuZCBjbGVhciBza3kKc3VuIGlzIGluIHRoZSB0b3AKb3JhbmdlIGdyYXNzCnRyZWVzIHdpdGggZmFjZXMKd2l0aCBhIHNxdWFyZQpuaWNlIHN1bnNldAooIGNvbGxhZ2UgKQpzYXR1cm4gaW4gdGhlIHNreQp1bnJlYWxlbmdpbmU1CmNyZWVrcwpsYW5kc2xpZGVzCmZ1bGwgb2YgY29sb3JzIGFuZCByaWNoIGRldGFpbApidW1wZWQgdGhyZWUtZGltZW5zaW9uYWwgZmV0dXJlcwpncmFkaWVudCBjeWFuIHRvIHB1cnBsZQpicmVhdGggLSB0YWtpbmcgYmVhdXRpZnVsIHRyZWVzCmZhbnRhc3kgc3RpbGwgbW92aWUKYXRtb3NwaGVyaWMgY3J5c3RhbCBkdXN0CnBsYWNlZCBpbiBhIGxpdmluZyByb29tCmZsZXNoIQpkcmF3biB3aXRoIGNvbG9yZWQgcGVuY2lscwp3aGl0ZSBhbmQgYmx1ZSBjb2xvciBzY2hlbWUKb3JuYXRlIHdpdGggZmllcnkgZXhwbG9zaW9ucwpjaW5lbWF0aWMgcmVhbGl0eQp0aXRhbmljIHNhaWxzIG5lYXIKb24gYSByb3VnaCB3b29kZW4gZHVuZ2VvbiB0YWJsZQpncmVlbiBza2luIHdpdGggc2NhbGVzCjMgNSBtbSBwb2ludGluZyB1cApuZW9uIGFlc3RoZXRpYwpsb29rcyBhIGJpdCBzaW1pbGFyIHRvIGFteSBhZGFtcwpidW4gKQpyZWFkaW5nIHRoZSBuZXdzcGFwZXIKb296aW5nIGxhdmEKZm91bmQgb24gYSB2b2xjYW5vCnRyYWluIHN0YXRpb24gYmFja2dyb3VuZApoaWRpbmcgaW4gZ3Jhc3MKaGUgYWxzbyB3ZWFycyBhIGdyZXkgYmVhbmllCnNtb290aCBtb2RlbHMKbGVnbyBtb3ZpZSBzdHlsZQpwaXhlbCBkZWdyYWRhdGlvbgpkcmFtYXRpYyBsaWdodG5pbmcgZGlnaXRhbCBhcnQKaW5jcmVkaWJsZSBkZXRhaWxlZAphcyBhIHBhaW50aW5nCmFuZ3N0LWluZHVjaW5nCjEgNiBjZW50dXJ5IHN0eWxlCmRhdGFjZW50cmUKcmFjawplbWJyYWNlZApsYW5kc2NhcGUgb2YgYWZyaWNhCnJhaW5ib3cgY29sb3JlZCBoYWlyCnRveGljIHJheXMgb2YgdGhlIHN1bgpuZXRzIGFuZCBib2F0cwpzZXR0ZWlkcmVhbXMgY29sb3VyIGRlc2lnbgpibHVlIGFuZCBncmVlbiBsaWdodAppbiBoZXIgcm9vbQp2ZXJ5IGJ1c3kgcGxhY2UKd2VhcmluZyBnb2xkIGFybW9yCnJhaW4gbGl0CmFkamFjZW50IGhhbGx3YXlzCmRhcmttb2RlCmRlc2lnbmVkCnZpc3VhbCBpZGVudGl0eQp3aWZpIGljb24Kd2FybSB0aGVtZQp0ZWNoIGZhbnRhc3kKaXNvbWV0cmljIHZpZXcgZnJvbSBiZWhpbmQKdmluY2VudApmaWVyY2UgaHVnZSB3YXZlcwpkYW5nZXJvdXMgZGVwcmVzc2luZyBhdG1vc3BoZXJlCm11bHRpcGxlIHBvaW50IHBlcnNwZWN0aXZlCmNvbG9yZnVsIHBpeGVsIGFydApmYWNlIHNob3cgbm8gZW1vdGlvbgpjaXR5c2NhcGUgcnVpbnMgaW4gdGhlIGRpc3RhbmNlCnRhY28KZmxvd2VycyBpbiBhIGZsb3dlciBiZWQKcGxhbnQgZm9yZXN0IGluIGdsYXNzIHR1YmVzCmVjb25vbWlzdAp0b3JjaGxpZ2h0LiBza2V0Y2gKYW5pbWFsIHN0eWxlIGhlYWQKY2FuZGlkIHN0cmVldCBwaG90b2dyYXBoeQpsb25nLWFybXMKamFjayBhbmQgdGhlIGJlYW4gc3RhbGsKdmFzdCBsdXNoIHZhbGxleSBmbG93ZXJzCm11bHRpIGxheWVyZWQgaHVnZSBhcmNoaXRlY3R1cmVzCnRlbGVwaG90byB2YWNhdGlvbiBwaWN0dXJlCnN1cnJlYWwgYXZhbnQtZ2FyZGUgc3R5bGUKYXF1YSB2b2x1bWV0cmljIGxpZ2h0cwphbGwgd2hpdGUgcmVuZGVyCmFuZ3VsYXIgZHluYW1pYyB3aGl0ZSByb2NrIGZsb29yCmluIHRoZSBjZW50ZXIKYW5hdG8gZmlubnN0YXJrLiBwaXhhcgpncnVuZ2VkIHVwCm5vcnRoZXJuIGZpbmxhbmQKbXV0dApwaXR0Cm9yYW5nZSBwbGFudHMKbW9vbiBzaGluaW5nCm1pbmltYWwgbW9kZXJuIHBpeGVsIHNvcnRpbmcKY2FpIGd1by1xaWFuZwpsb3MgY2FycGludGVyb3MKYW1tbyBidWxsZXRzCjQgayBjb25jZXB0IHBob3RvCnBpbmsgc3R1ZGlvIGxpZ2h0aW5nCmRlZm9jdXNlZCBiYWNrZ3JvdW5kCmFjaWQgcGl4aWUgYWNpZCBwaXhpZQpkb3BwbGVyIGVmZmVjdApkYW1hZ2VkIGNsb3RoZXMKd2Fsa2luZyB0aHJvdWdoIGEgZmllbGQgb2Ygd2hlYXQKc3dpcmxpbmcgbWFnaWNhbCBlbmVyZ3kKZCAmIGQgZmFudGFzeSBkaWdpdGFsIGFydApnYW1lIGljb24gYXNzZXQKZGljaXRhbCBwYWludGluZwplbmNoYW50ZWQgd2l0aCBuYXR1cmUgc3Bpcml0CnJhaW5ib3cgc3BsYXNoIG9mIGluawpmYW5jeSBsaW5lIHdvcmsKY3JhenkgY29sb3JzCmZpbG0gc3RpbGwgZnJvbSBhbiBjYXJ0b29uCmNsZWFuIGNsZWFyIGZhY2UKd2hpdGUgcGxhZ3VlIGRvY3RvciBtYXNrCmxvdyBnYW1tYQpzcGl0dGluZyBjdXNoaW9ucyBmcm9tIGhpcyBtb3V0aAp1bnJlYWwgbWF5YQpoYXJkIGNvdmVyIGJvb2sKaGlnaCBxdWFsaXR5IGxvd3BvbHkgYXJ0CmNoZXJyeSBibG9zb20gdHJlZXMKd2luZ2VkIGh1bWFuCm15c3RlcmlvdXMgcG9ydHJhaXQgb2YgYSB3b21hbgpzZXJwZW50IGJvZHkKd2VhcmluZyBhIHZlbHZldCBjbG9hawpob3RvdmVyc2UKaG9sZGluZyBhIGdsb3dpbmcgb3JiCmphc29uIGNoYW4gYW5kIGdpbGxlcyBiZWxvZWlsCmNvbG9ycyByZWQgd2hpdGUgYmx1ZSBhbmQgYmxhY2sKcnV0a293c2tpIGlseWEga3Jlbnogbml4ZXUgd2xvcApmaWxtIHN0dWRpbwpkZXRhaWxlZCBwaG90byA4IGsKc2NlbmUgZnJvbSBhIDEgOSA3IDMgZmlsbQpjbGFzc2ljIGNpbmVtYQpuaWNrIGRybmFzbwpzdHlsaXNlZCBncmFwaGljIG5vdmVsCnNpdHRpbmcgb24gYSBtb3RvcmN5Y2xlCmNmZyBfIHNjYWxlIDEgNQpwaG90b3JlYWxpc3RpYy1uIDkKcGFuYXZpc2lvbiBwc3ItMjAwIDM1bW0KZmVtYWxlIGVsZmxpbmcKYnVsZ2luZyB2ZWlucwpibGFjayBhbmQgd2hpdGUgdmludGFnZSBwaG90bwpob2xkaW5nIGEgdmVyeSBhZHZhbmNlIHBob25lCm1lZGl1bSBibHVlCnZpbnRhZ2UgZnV0dXJlCmJsdWUgYW5kIGdyZXkgdG9uZXMKcmlnaHQgLSBoYWxmIGEgY2hlZXJmdWwgZmFjZQppbiBhIHN0eWxlIG9mIGh5cGVycmVhbGlzbQphZCBpbWFnZQp3ZWFyaW5nIGEgaG9vZHkKZWxhYm9yYXRlZCBkZXB0aCBvZiBmaWVsZApoZSB3ZWFycyBkYXJrIHZpc29ycwpjeWJlciBzb25nbWFuCnRzdW5hbWkgYmVoaW5kIGhpbQpzYW11cmFpIG1hc2sKc3Rvcm15IGhvcml6b24Kc2t1bGxzIGluIGhhbmRzCnN0eWxpc2ggbGlnaHRpbmcKbm8gb25lIGFyb3VuZAphbGFteSBzdG9jayBwaG90bwpkZXRhaWxlZCByZWFsaXN0aWMgcGhvdG9ncmFwaHkKc21vb3RoLnNoYXJwIGZvY3VzCmZyb3plbiBpbiB0aW1lCmNsYXNzaWNhbCBhcnR3b3JrCjEyMG1tIGJsYWNrIGFuZCB3aGl0ZSBwaG90b2dyYXBoCmR1cmluZyBsdW5hciBlY2xpcHNlCjMgNSBtbSBmIDEuIDQgbGVucwpjYWN0dXMgYWRqYWNlbnQKd3cgMiBhbGxpZWQgcHJvcGFnYW5kYSBwb3N0ZXIKc25vcmluZwpyZXRyb2Z1dHVyCmFic3RyYWN0IGRldGFpbAo0IGsgLSBuIDQKcHJvZmVzc2lvbmFsIGNvbG9yIHBob3RvZ3JhcGgKaW4gYmVhdXRpZnVsIHdvb2RzCnVsdHJhIHJlYWxpc3RpYyBwaWN0dXJlcwp3b3JsZCB3YXIgaWkgbWlsaXRhcnkgc3R5bGUKbWV0YWwgY2hhaW4gYW5kIGJsYWNrIGNhcGUKdW5kZXJleHBvc2VkIGxpZ2h0aW5nCm1vZGVybiB2ZXJ5IHNoYXJwIHBob3RvCmhlYXZpbHkgZXF1aXBwZWQKc2l0dGluZyBpbiBhIHdhaXRpbmcgcm9vbQpsYXJnZSBuaWtlIGxvZ28KY2dzb2NpZXR5IGNvbnRlc3Qgd2lubmVyISEKbWluZCBibG93bgpkZXZhc3RhdGVkCm1hbiBlbmdpbmUKbWFuIGFuZCBtYWNoaW5lCnN0eWxlIG9mIG1hdXJpY2Ugc2VuZGFrCndlYXJpbmcgYSBkYXJrIHNoaXJ0IGFuZCBqZWFucwpjaGlsbGluZyA0IGsKZGFyayBmb2cgc3Vycm91bmRzIGhpbQpoYW5kIGluc3RlYWQgb2YgYSBmYWNlCmxvY2FsIGNsb3NlIHVwCm1hZGUgb2YgZnJ1aXQgYW5kIGZsb3dlcnMKbWFkZSBvZiBtdXNocm9vbXMKbWFkZSBvZiBjYWN0dXMgc3BpbmVzCm1hZGUgb2YgbGF2YQppbiBhIHNub3d5IGZvcmVzdCBzZXR0aW5nCjQgayByZXNvbHV0aW9uLiBoaWdoIGRldGFpbApncmVlayB3aGl0ZSBtYXJibGUKd2VhcmluZyBnb2xkZW4gbGF1cmVsIHdyZWF0aApsdW1pb24gOCBrIHVoZAphZXJvZHluYW1pYyBpbXBvc2luZwoyZCBjaW5lbWF0aWMKZmx5aW5nIHRocm91Z2ggdGhlIGFpcgpiZWVwbGUgYXJ0d29yawprcmVtbGluIHRvd2VycyBhcmUgZGVzdHJveWVkCm92ZXJwb3B1bGF0ZWQKcm9wZSBicmlkZ2UKaGFpciBkaWVkIHRvIGEgaGF6ZWxudXQgYnJvd24KaHlwZXJkZXRhaWxlZCEhCmNyZXB1c2N1bGFyISEKdHJhaWxpbmcgb2ZmIGludG8gdGhlIGhvcml6b24KZmVhdHVyZWQgaW4gYXJ0c2NhcGUKYmVhdXRpZnVsIG5hdHVyYWwgbGlnaHRzCnBhc3RlbCB2aWJlCmljZXkKcGFpbnQgc3dpcmxzIGFuZCBwaHlsbG90YXhpcwpwYWludCBzd2lybCBhZXN0aGV0aWMKYXBleCBsZWdlbmRzIGFybW9yCigoKGtuaWdodCkpKQpzcGVlZGluZyBvbiBtb3RvcmN5Y2xlCnNoYWNrIGNsb3NlIHVwCnJlbW5hbnRzIG9mIG9sZCBzcGFjZXNoaXAKd2l0aCB3YXRlcmZhbGxzCmdyYXZlbHMgYXJvdW5kCm5lb24gZ2VvbWV0cnkKc3Vua2VuCnNwaXJpdCBvZiB0aGUgZm9yZXN0IGR3ZWxscwphY2NpZGVudGFsbHkgcGhvdG9ncmFwaGVkCmdhc3Ryb25vbXkgbWFnYXppbmUKd2lsZGVybmVzcyBncm91bmQgOyBvaWwgcGFpbnRpbmcKb3JuYXRlIHBhdHRlcm5zCnNsaWdodGx5IHN1bm55CmluIGEgd2FyIC0gdG9ybiBkZXNlcnQgdmlsbGFnZQppbnRyaWNhdGUgY3liZXJwdW5rIGFybW9yCm1hZGUgb2YgY29uY3JldGUKY3V0IGludG8gdGhlIHNpZGUgb2YgYSBtb3VudGFpbgpodWdlIHN0YXR1ZXMKY2F0YXB1bHRzCnRhdHRvb3Mgb2YgY3VtdWx1cyBjbG91ZHMKY3VtdWx1cyB0YXR0b29zCmh1Z2UgYW5jaWVudCB0cmVlcwpvcGVuIHdpbmRvdyBhdCBuaWdodApkZXNlcnQgc3VucmlzZSBpbiB0aGUgYmFja2dyb3VuZAptZWRpZXZhbCBpbGx1bWluYXRpb24KbWVkaWV2YWwgYmVzdGlhcnkKd2FybSBmcmllbmRseSBleHByZXNzaW9uCnBpbmUgY29sb3Igc2NoZW1lCnVtYmVyIGNvbG9yIHNjaGVtZQpwcmVjaXNlIGJydXNoIHN0cm9rZXMKcXVpZXQgZGlzZGFpbgpidXJuaW5nIGZpcmVzCmRldGVybWluZWQgZmFjaWFsIGV4cHJlc3Npb24KaG9sZGluZyBncmVlbiBmaXJlCndlYXJpbmcgY2F1c2FsIGJsYWNrIHN1aXRzCmd0YSA0IGxvYWRpbmcgc2NyZWVuCm1hbnkgc3Vja2VyZWQgdGVudGFjbGVzLiBoeWJyaWQKa29kYWNocm9tZSBjYW1lcmEKMSA5IDkgOSBwaG90byBmcm9tIGxpZmUgbWFnYXppbmUKd2llbGRpbmcgYSBrZXJpcyBzd29yZAppbiBhIHNob3J0IHJvdW5kIGdsYXNzIHZhc2UKbXV0YW50cyByb2FtaW5nIGluIHRoZSBldmVuaW5nCmRpZWJlbmtvcm4KYnVua2VycwpzdXJyZWFsaXN0IHBob3RvZ3JhcGh5CmZ1bGwgLSBmcmFtZQpwaG90b3JlYWxpc3RlCnJlZCBnbG93aW5nIHN0cmVhbXMgb2YgbGF2YQpwZXJjaGVkIG9uIGEgcm9jawpiaWcgYmx1ZSBza3kKdGFsbCBmbHVmZnkgY2xvdWRzCnN1YmplY3QgY2VudGVyIGJvdHRvbSBvZiBmcmFtZQp3aXRoIHRoZSBmYWNlIG9mIG5pY2hvbGFzIGNhZ2UKMiA0IHllYXJzIG9sZAoyIDkgeWVhcnMgb2xkCjNkIGdhbWUgb2JqZWN0Cm15c3RpY2FsIGNvc21pYyBtZXNzZW5nZXIKd2l0aCBvbmUgdmludGFnZSBib29rIG9uIGEgdGFibGUKbWlkLWNlbnR1cnkgbW9kZXJuIGZ1cm5pdHVyZQpzdW5zZXQgbWFnYXppbmUKYmxhY2sgc3VpdCBwYW50cwpkZWVwIGRhcmsgcHVycGxlIHdhdGVycwpidWxreSBidWlsZAptaWxrbWFuCmxvbmcgbmlnaHQgY2FwCndlYXJpbmcgYSB3aXphcmQgaGF0CmVsYmFpdGUKd2VhcmluZyBhIGhlYWQgc2NhcmYKZmFpcmdyb3VuZCByaWRlcwpjYWxtIHNlYQpkb2xwaGlucyBqdW1waW5nCnJlbW90ZSBjb250cm9sIGRpc2NvIGJhY2twYWNrCm9wZW4gZXllIGZyZWVkb20KYm90dG9tIG1hZGUgaGFsZiB3b29kCmdyYXNzaG9wcGVyIDNkCmNvcnBvcmF0ZSBwaG9uZSBhcHAgaWNvbgpsaW1lIGFuZCB2aW9sZXQKYmxhY2sgd2F0ZXJjb2xvdXIKYmFja3lhcmQgd3Jlc3RsaW5nCmZ1bGwgb2YgbWlycm9ycwppbiB0aGUgbW9vbmxpZ2h0Cm5pZ2h0IHJlYWxpc20KZGlydCAtIHN0YWluZWQgc2tpbgptb2RlbGxpbmcgY2xheQpmcm9tIGJsYWRlIHJ1bm5lcgp3aXRoIGEgY2lnYXJldHRlIGluIGl0cyBtb3V0aApoYW1zYSBoYW5kCmxlYXRoZXIgc2NpZmkgYXJtb3IKZnJvbSA4IGsgbWF0dGUKc2V0IGF0IG5pZ2h0Cm1hdXJpdHMgY29ybmVsaXMKdm9ndWUgZnVsbCBjb2xvciBlZGl0b3JpYWwgcGhvdG8KZGluZXIgZm9vZAoxIDkgMyA4IHBob3RvCnBvc2gKbW92aWUgcG9zdGVycwpyb3VnaCBjb2xvciBwZW5jaWwgaWxsdXN0cmF0aW9uCmZyb250cGFnZQppbnRlcmlvciBvZiBhIHRlbnQKY2FycmlhZ2UgZnVsbCBvZiBjb21wdXRlcnMKaGFuZ2luZyB1cHNpZGUgZG93biBmcm9tIGEgdHJlZQplbmxpZ2h0ZW5tZW50LiBpbnRyaWNhdGUKcGxheXN0YXRpb24gMiBnYW1lcGxheSBzdGlsbAplYXRpbmcgY2hpcHMgYW5kIHdhdGNoaW5nIHR2CnJ1YmJlcnkgLSBsb29raW5nIGJvZHkKdGVldGggYmV0d2VlbiBicmVhZCBhbmQgcGF0dHkKZG90IGdyYWRpZW50CndpdGggd2lkZSBvcGVuIG1vdXRoCmphc29uCmNlZHJpYyBwYXlyYXZlcm5heQpkYW5pZWwgbGV6YW1hIHBhaW50aW5nIHN0eWxlCmNnaSBzb2NpZXR5CnNpdHRpbmcgb24gdGhlIHRhYmxlCjEgMCAyIDQgZmFyYmVuIGFic3RyYWN0CjEgMCAyIDQgZmFyYmVuCmhpcm95dWtpIGthdG8Ka2Vpc3VrZSBnb3RvCmluIGFuIGFydCBub3V2ZWF1IHN0eWxlCnZlaGljbGUgY29uY2VwdCBwaG90byEhCnZlbnVzIHN1cmZhY2UKY2luZW1hdGljIGhpZ2hseSBkZXRhaWxlZApjaW5lbWF0aWMgdmVyeSBjcmlzcApmZW1hbGUgbGVhZCBjaGFyYWN0ZXIKZGVzcGljYWJsZSBtZQppbnZhc2lvbiBvZiB0aGUgdHJpcG1hY2hpbmVzCmltbW9yYWwgdGFsZXMKaG91c2VmaXJlCmluIGZ1bGwgdGVjaG5pY29sb3IKZmxvd2luZyByaHl0aG1zCm1hbmdyb3ZlIHRyZWVzCmRldGFpbGVkIGNsb3RoZXMgdGV4dHVyZQpzbWFsbCBiZWVzIGZvbGxvd2luZyB0aGUgbGVhZGVyCmFybW9yIG1hZGUgb2YgaWNlCndlYXJpbmcgZGlydHkgdHJhdmVsbGluZyBjbG90aGVzCm1hbnkgYmVsdHMKeWVsbG93LXJvYmVkIGN1bHRpc3QKZWxmIHF1ZWVuIG5pc3NhIGdlbmVzaXMgbWFnZQpsb25nIGZsb3dpbmcgYnJhaWRlZCBoYWlyCjRrIGZoZApjb21peG9sb2d5CnZvdWdlIGl0YWx5CmktZCBtYWdhemluZQpyb2NrcyBmYWxsaW5nCmFseSBmZWxsIGFuZCBhcnRnZXJtCnByZW1pdW0gY3liZXJuZXRpY3MKYXNpbW92CmluIGFuIGFuY2llbnQgdmF1bHQKaGlkZGVuIG1lc3NhZ2UKc3RpbGwgd2F0ZXIgY2FsbSBhcyBhIG1pcnJvcgpmaXJlZmx5IHRyYWlscwpib3JkZXIgcGF0dGVybgpibHVlaXNoIHRvbmVzCmJyb2tlbiBsYW5kc2NhcGUKc2N5bGxhCm5hY2hvc2F1cnVzCmNvZmZlZSBzdGFpbiBvbiBuYXBraW4KYmxhY2sgZW5lcmd5CnNjYXJjZSBzdW4gcmF5cyBwZWFraW5nCmNvbG9yZnVsIGFuaW1lIG1vdmllIGJhY2tncm91bmQKMSA5IDcgNiBjdXQgb3V0IGNvbGxhZ2UKZGlydHkgbGluZW4gcm9iZXMKc3RhZmYgb2YgYm9uZXMKcmlzaW5nIGZyb20gYSBjcnlwdAp0YXVydXMgem9kaWFjIHNpZ24gc3ltYm9sCmdyYWNlZnVsIGZhY2UKZ3JlZW4gc3RhaW5lZCBnbGFzcwoxIDggdGggY2VudHVyeSBzcHJpbmcgb3JuYW1lbnRzCnZlbnVzIHBsYW5ldCBzeW1ib2wKaG9sZGluZyB1cCBhIG5pZ2h0IGxhbXAKNCBrIGh5cGVycmVhbGVuZ2luZQpteWNvbG9neQppbmZsdWVuY2VycwpldGhuaWMgb3JpZ2luCnBlcnNvbmEgNSBhcnQgc3R5bGUgd2xvcApwZXJzb25hIDUgYXJ0IHN0eWxlCjMgZCBvY3RhbmUKYXJtc3Ryb25nIHJvbGYKZ2FtZSBhZXN0aGV0aWMKc3RhcmluZyBodW5ncmlseQplbWVyZ2luZyBmcm9tIHRoZSBkYXJrbmVzcwpob2xkaW5nIGVhc3RlciBlZ2dzCndpdGggYW4gZWFzdGVyIGJhc2tldAppbiBhbiBlbXB0eSBibGFjayByb29tCmJvbmVmYWNlCndvb2RlbiB0cmltCndlYXJpbmcgYSBwdXJwbGUgc21va2luZyBqYWNrZXQKc3RyYW5nZSB0cmVlcyBhbmQgY2xvdWRzCmNoYXJhY3RlciBkZXNpZ24gZnJvbSBkICYgZApiYXJkIGplc3RlciBjaGFyYWN0ZXIgc2hlZXQKc3R5bGlzZWQgc3Rvcm0KbGluZSB3b3JrIGNvbmNlcHQgYXJ0CnN1bW1vbmluZyBhIGRlbW9uCmJsdWUgd2FsbApzaWx2ZXIgbW9ub2NsZQpoaWdoZmxlZXQKamFwYW5lc2UgaG9ycm9yIG1vdmllIGZvb3RhZ2UKYXJjaGl0ZWN0dXJhbCBwbGFuCm9idmVyc2UgYW5kIHJldmVyc2UKaW4gdGhlIG1pZGRsZSBvZiBhIHNtYWxsIGNvbG9ueQphbmVtb25lcyBhbmQgc3RhcmZpc2gKYXVzdHJhbGlhbiB0b25hbGlzbSBlc2NoZXIKc2hhZG93eSBjYXQgdW5kZXIgdGhlIGJlZCcKcm9vbSBzaG90CmphcGFuZXNlIHRleHQga2FuamkKc3Rvcm15IHdlYXRoZXIuIG1ha290byBzaGlua2FpCm52aWRpYSBwcm9tb3Rpb25hbCBpbWFnZQpwYXBlciBhaXJwbGFuZQpjcm93cyBhcyBhIHN5bWJvbCBvZiBkZWF0aAp0cmFuc3BhcmVudCBncmF5IGRyZXNzCmFydGlzdCByZW5kaXRpb24KYnJ1Y2UgdGltbSBhbmQgdmxhZGltaXIga3VzaAp0aGUgYmFja2dyb3VuZCBpcyB3aGl0ZQpyZWQgYXNjb3QgYW5kIGEgZmllbGQgY2FwCmVnb24gc2NoaWVsZSEK8J+MuCDwn4y8IPCfkq4KYmFyZSBmb290CmNpbmVtYXRpYyBhdG1vc3BoZXIKcmVhbGl0eSBpbmZ1c2VkIHdpdGggZHJlYW1zCndpdGggeWVsbG93IGZsb3dlcnMgYXJvdW5kIGl0CjE3ODcKZmx5aW5nIGNhc3RsZQpjcnVtYmxpbmcgcnVpbnMKaW4gdGhlIGljb25pYyBzdHlsZSBvZiBtb2ViaXVzCmluIGEgd2lsZCBtdXNocm9vbSBmb3VudGFpbgpzbW9vdGhlZApnbGl0dGVyIGRyZXNzCmdhcmJlZCBpbiBhIHB1cnBsZSBnb3duCnJ1c3NpYW4gbGFiIGV4cGVyaW1lbnQKY2VsZWJyYXRpbmcgYSBraW5nIGJlaW5nIGNyb3duZWQKdGhlIGhlYWQgb2YgdGhlIG1hbiBpcyBhIHNrdWxsCmhlIGlzIHdlYXJpbmcgYSB0cmVuY2hjb2F0Cnhlbm9iaW9sb2d5CmFyY2FkZSBtYWNoaW5lcwpoYW5kc29tZSBqb2UgYmlkZW4KbWFjYWJyZSBwb3N0ZXIgYXJ0CnRyZW5kaW5nIGluIGphcGFuCmdyZWcgaGlsZGVicmFudApydXN0eSBtZXRhbCBwbGF0aW5nCnJ1bmUgbWFya3MKbG91dnJlIGNvbnRlc3Qgd2lubmVyCmluY29uZ3J1b3VzCndpdGggYnJvY2NvbGkgaGFpcgp1biBtYWRlIGJlZAptYWdhemluZXMKaW50cmljYXRlIGVudmlyb25tZW50IC0gbiA5CnN0eWxlIG9mIGpvaG4gYmxhbmNoZQpzd2lybHkgcmlwcGxlcwphbmltZSBrZXlmcmFtZQpzbWlsaW5nIGluIGhlYXZlbgpsb29raW5nIG91dCBhIHdpbmRvdwpsYXJnZSBtb3VudGFpbgpiaWcgY2hlZWtzIGhvbGRpbmcgaGVyIGNhdApib3NuaWFuCnB1cHBpZXMKdGVsbGluZyBzdG9yaWVzCmVsZGVyIHNpZ24Kd2hpdGUgYW5kIHJlZCBjb2xvciBzY2hlbWUKd2VpcmQgcGxhbmV0Cm9jaGVyIGFuZCB0dXJxdW9pc2UgY29sb3JzCm1hZGUgb2YgbXVsdGljb2xvcmVkIGNyeXN0YWxzCndvbWFuIHdpdGggY2F0IGVhcnMKOGstcmVzb2x1dGlvbgptZW1waGlzCnJlZCByb3NlIGluIGhhaXIKd2l0aCBzb21lIGhhbmQgd3JpdHRlbiBsZXR0ZXJzCmphc21pbmUKZmFudGFzeSAtIG4gOQppbiBsb25nIHJlZCBvciBibHVlIGRyZXNzZXMKc2hpdApoaWdoIGRldGFpbCBtYXRlcmlhbHMKb3B0aWNhbCBsZW5zZXMKcmVkIGJsYWNrIGFuZCBnb2xkIGNvbG9yIHNjaGVtZQptYXJ0aW4gcGFycgptZXNzeSBibGFjayAvIHJlZCBoYWlyCmFnb255IGV4cmVzc2lvbgptYW50aXMgZXllcwptaWQgLSAzIDAgcwpibGFjayB0cmF2ZWxpbmcgY2xvYWsKbWFwbGUgc3lydXAgc2VhCmJlbGx5IGRhbmNpbmcKY2hvcHN0aWNrcwpwZXJmZWN0IGZhY2lhbCBmZWF0dXJlcwoxIDkgOSA4IHJlbmRlcgpzY2VuZXJ5IHdhbGxwYXBlcgpyb21hbnRpYyBsYW5kc2NhcGUKd2Fsa3dheQpleG9kdXMgMSA0IDogMiAxICYgMiAyCmdhbWluZyBwYyBjYXNlCmhpdG9zaGkgYXNoaW5hbm8KY2FsbSBhbmQgc2VyZW5lCmNvbGQgY29sb3Igc2NoZW1lCndpbmdzIHNwcmVhZGluZwpyZXRybyBjb2xvcmluZwpiYWQgYXJ0CnNlbnNlIG9mIHNjYWxlIGFuZCBhd2UKcGFyaXMgZmFzaGlvbiB3ZWVrCjcgMCBzIHN0eWxlCjcgMCBtbSBtYWNybyBsZW5zCmluIHN0eWxlIG9mIG1hcnZlbCBhbmQgZGMKdHdvIGphcGFuZXNlIHNjaG9vbGdpcmxzIHBvc2luZwphdG1vc3BoZXJpYyBzbW9rZSBhbmQgZm9nCmZpcmUgYW5kIGZsYW1lcwprb2RhY2hyb21lIGNvbG9ycwpob3ZlcmJvYXJkcwpjb21wbGV4IGNvbnRyYXB0aW9uCjNkIGJsZW5kZXIgb2N0YW5lIHJlbmRlcgppbiBhbiB1bmRlcmdyb3VuZCBsYWJvcmF0b3J5CnRvbyB0aXJlZCB0byBjYXJlIGFueW1vcmUKaGFuZCBvbiBjaGVlawpkYXJrIG5laWdoYm9yaG9vZApob3Jyb3IgdmliZXMKbGlnaHQgY2FzdGluZyBvbnRvIHRoZSBncm91bmQKcmVkLXB1cnBsZSBncmFkaWVudCBtYXAKc29mdCBsb29rCnNpbXMgNCBzY3JlZW5zaG90CmRvYyBtYXJ0ZW4gYm9vdHMKbG9zdCBpbiB0aG91Z2h0CmxvbmcgZm9jYWwKY3liZXJwdW5rIGhpcm9zaGltYQpyYWluYm93IGNsb3Vkcwo1MG1tIGNsb3NlIHVwIHBob3RvZ3JhcGh5CnRoZSBzZWEgaW4gdGhlIGJhY2tncm91bmQKZm9jYWwgbGVuZ3RoIDogMyA2IG1tCnNjaSBmaSBmb250CmluIHRpbWVzIHNxdWFyZQpsaXZlZCBpbgptaWxsZW5uaWFsIHZpYmVzCmluIHRoZSBzaGFwZSBvZiBhIGNpbm5hbW9uIHJvbGwKdGFua3MgY3Jhc2hlZAppbWFnZSBhcG90aGVjYXJ5CnNvbWUgZGFwcGxlZCBsaWdodApwYXdzIG9uIGhlYWQKYmxhY2tib2FyZCBpbiBiYWNrZ3JvdW5kCmVuam95aW5nIGEgc3Ryb2xsIGluIHRoZSBmb3Jlc3QKNWQgbWsyCnRyaWRlbnQKcmVkIHNwb3RsaWdodApiZWF1dGlmdWwgb3JuYXRlZCBkZXRhaWxzCnNraW4gcGFpbnRlZCB3aXRoIGdyZWVuCnBpbGxoZWFkCnBhbGUgaGVhZApvcmFuZ2Ugc3Vic3VyZmFjZSBzY2F0dGVyaW5nCndyaW5rbGVkIHNraW4KdHdvIGNyYW5lcyBmbHlpbmcgYWNyb3NzIHRoZSBzdW4KZXh0cmVtZSB0ZXJyb3IKZGlzY29udGVudApyZWQgbGlnaHQgZnJvbSBzb21lIHdpbmRvd3MKYm9rZWggcGhvdG8KYWJzb2x1dGVseQpzaHJlZGRlZApteXN0aWMgaHVlIGNsb3VkcwpteXN0aWMgaHVlCnVzIGpvdXJuYWxpc20gbWluaXN0cnkgcGhvdG8KZmltIHN0aWxsCnN0cmF5YQpibG9uZGUgc3RyYWlnaHQgaGFpcgpncmFuZCBjYW55b24gaW4gYmFja2dyb3VuZApoZHIgNCBrCnNwb3QKNiAwIG1tIGxlbnMKc3BvdGxpZ2h0IHNoaW5pbmcgdGhyb3VnaApvbiBhIGJyaWdodCBkYXkKc2t1bGxzIGFyZSBseWluZyB1bmRlcm5lYXRoCmR1cmluZyBzdW5yaXNlCmF0IGEgc2xpZ2h0bHkgZWxldmF0ZWQgbGV2ZWwKcG9pbnQgZmluZ2VyIHdpdGggcmluZyBvbiBpdApsZWdvIG1pbmkgZmlndXJlcwpsZWFrZWQgZnJvbSBuYXNhCmF3YXJkIHdpbm5pbmcgcGhvdG9ncmFwaCA0IGsgaGQKZmxhdCBlYXJ0aCB0aGVvcnkKdGVsZXBob3RvIHBob3RvZ3JhcGh5Cm9wZW4gb2ZmaWNlCmFuaW1hbHMgbWF0aW5nCnBsYXlib3kgY292ZXIKaW4gdGhlIHdoaXRlIGhvdXNlCmNvbG9yZnVsbCBza3kKc21hcnRwaG9uZSBwaG90b2dyYXBoeQpkcmVzc2VkIGFzIGEgcXVlZW4KbG91bmdpbmcgb24gZXhwZW5zaXZlIHNvZmEKc2lnbWEgYXJ0IDg1IG1tCnBlcmZlY3QgZmFjZSB0ZW1wbGF0ZQp0aGVyZSB3ZXJlIHBvc3RlcnMgb24gdGhlIHdhbGwKb2YgYSBtdXNjdWxhcgpjcmFzcyByZWNvcmRzCmR1YWwgdG9uZQpnb2xkIGNvYXN0IGF1c3RyYWxpYQpzdGFyIHNoaW5pbmcgaW4gc3BhY2UKMSA5IHRoIGNlbnR1cnkgcGhvdG9ncmFwaHkKYW5zZWwhISEgYWRhbXMhISEuIGludHJpY2F0ZQp0bgpzbW9rZXkgcm9vbQptaWRkYXkgcGhvdG9ncmFwaApjbG91ZHMgbXlzdGljIGh1ZQpzaG90IHdpdGggcHJlbWl1bSBkc2xyIGNhbWVyYQpzaXR0aW5nIG9uIHRvcCBhIHRhYmxlCmZyYWN0YWwgY3lib3JnIG5pbmphIGJhY2tncm91bmQKbG9va2luZyBhdCBtb25pdG9yCnNhZmFyaQpzY2FyeSBnaG9zdAp2ZXJ5IHN1cnByaXNlZApzdWJhcXVhdGljIHBob3RvZ3JhcGh5CndlYXJpbmcgYSB3aGl0ZSBmb2xrZHJha3QgZHJlc3MKd2VhcmluZyB3aGl0ZSBwYWphbWFzCmNsb3NlZC1leWVzCm9sYW5kCm5vcm1hbCBwbGFjZSB3aXRoIHdlaXJkIGZlZWxpbmcKaHVnZSBwaW5rIGhhaXIKZ2lnYW50aWMgdGlnaHQgcGluayByaW5nbGV0cwpleHRyZW1lbHkgYmVhdXRpZnVsIGFuZCBldGhlcmVhbApzb255IGEgNyBpaWkKZG9uZSBpbiB0aGUgc3R5bGUgb2YgY2FyYXZhZ2dpbwpmbGlydGF0aW91cyBhbmQgaW50cmlndWVkCndhcm1lciBhbmQgc29mdGVyIGNvbG91cnMKbGlnaHRlciBicm93biBoYWlyCndhcm1lciBjb2xvdXJzCmJlYXV0aWZ1bCBuYXR1cmFsIGJhY2tncm91bmQKZnVqaWZpbG0geCAtIHQgMyAwCmNyYXNzCmNvbXBsZXRlIG1vZGVsCmdsb2JhbCBpbGx1bWluYXRpb24gaGRyaQpzZWFtbGVzcyBwYXR0ZXJuIDo6IHN5bW1ldHJ5CmdyYWZmaXRpIG9uIHRoZSBzaWRlCnN0cm9iZSBhbmQgbGFzZXIgbGlnaHRzCnByaXNtYXRpYyBjdW11bHVzIGNsb3Vkcwpob2xvZ3JhcGhpYyBtZW1vcmllcwp2aXRhbHkgYnVsZ2Fyb3YgYW5kIG1pa2UgbmFzaApiZW4gbWF1cm8KYmVhdXRpZnVsIGludHJpY2F0ZSBmYWNlCnN3YXJtaW5nIHdpdGggaW5zZWN0cwpzeWRuZXkgcGFyawptYXJzIGluIGRpc3RhbmNlCmdyZWVuIGFuZCBwdXJwbGUgY29sb3Igc2NoZW1lCnN0eWxlIG9mIHdheW5lIGhhYWcKY2hyb21hbCBhYmVycmF0aW9uCmNsb3RoZXMgdGhlbWVkIG9uIGEgcGVhY29jayBtYWdlCmRlZXAgc3BhY2UgaW4gdGhlIGJhY2tncm91bmQKc3dpcmxpbmcgZmFicmljCmlyb24gdGhyb25lIGZyb20gZ2FtZSBvZiB0aHJvbmVzCmxldmVsIHN0cnVjdHVyZQpmdWxsIG1vb24gaW4gY2xvdWRzCmZvdW5kIG9uIGdvb2dsZSBzdHJlZXQgdmlldwp3aWRlIHNob3QgcGhvdG8KbmV3IHNwZWNpZXMKZGV0YWlsZWQgdW5ibHVycmVkIGZhY2UKY2FtZXJhIHBob3RvCnJlZCBsYXZhIHJpdmVycwpldGhlcmV1bSEhISEgbG9nbwp1bHRyYSBoaWdoIGRlZgpsYXVuY2ggdGVzdApkcmVhbXkgc3R5bGUKZGlnaXRhbCBsYW5kc2NhcGUgYXJ0CnBob3RvIGluIDQgawpmbHlpbmcgYWJvdmUgYSB0cm9waWNhbCBmb3Jlc3QKc3RhbmQgb2ZmCnJlYWxpc20gOiA5IDUgJQptZXRhcGhvcgpsdiBqZXdlbHJ5CnN3aW5nIG9uIGEgdHJlZQpldWNhbHlwdHVzIHRyZWVzCmNsZWFyIHNoYXJwIGZvY3VzCmhpZ2ggZGV0YWlsIGFuZCBoaWdoIGNvbnRyYXN0CnBvcnRyYWl0IG4gLSA5CnNrdWxsIGRlc2lnbiBmb3IgYSByb2NrIGJhbmQKYW1hemluZyBzaGFkZXMKd2F0ZXIgc3Vycm91bmRzIHRoZSBzaGlwCnNhaWxzIGFuZCBtYXN0cyBhbmQgcmlnZ2luZwpyaXZlciBydW5uaW5nIHRocnUgdGhlIG1pZGRsZQplbW90aXZlIGZhY2VzCmlzb21ldHJpYyAyIGQgZ2FtZSBhcnQKaW4gd2hpdGUgZnV0dXJpc3RpYyBhcm1vcgpjYXJyb3RzCmNpbm5hbW9uCmZyZWUgdG8ga2lsbCBhbmQgdG8gZGllCmFtYmllbnQgbGlmdGluZwpibGFjayBmdXIgYXJtb3IKZ3RhIGxvYWRpbmcgc2NyZWVuIGFydApnYW1lIGtleSBhcnQKZGV0YWlsZWQgZHVjawpleHBlbnNpdmUgY2FtZXJhCmFuIGVnZwozODQweDIxNjAKYnV0IGZ1dHVyaXN0aWMgZm9vZApvbiB3b29kZW4gdGFibGUKY29tcGxldGVseSBlbXB0eQpjYXN1YWwgcGxheXJpeCBnYW1lcwpmbGF0IGRyYXdpbmcKbm9zdGFsZ2ljIG1lbGFuY2hvbHkKcGFydCBvZiB0aGUgc2NyZWVuCmluIHBva2Vtb24gY29taWMKd2lsZGxpZmUgcGhvdG9ncmFwaApzdW1tZXIgY29sb3IgcGF0dGVybgp0aGUgZ3JpbSByZWFwcGVyCmRlZGluZWQgZmFjZQp2b2x1bWV0cmljIHNoYXBlcwpoaWdobHkgY29udHJhc3RlZCBjb2xvcnMKY29sb3JmdWwgY29sb3JzCnN0dW5uaW5nIHZpc3VhbApwYXJ0aWFsbHkgc3BhY2V5IGNyeXN0YWxsaXplZApoaWdocmVzb2x1dGlvbgpyZWFsbGlmZQpjdXQtb3V0IHBhcGVyIGNvbGxhZ2UKY2xvdWRzY2FwZQphbmF0b21pY2FsbHkgaW5jb3JyZWN0CnNwaWxsZWQgbWlsawplbW8gZ2lybCBlYXRpbmcgcGFuY2FrZXMKYnJhaW4gc3VyZ2VyeQpleHRyZW1lbHkgZGV0YWlsZWQgYW5kIGNvaGVyZW50CmZ1bGx5IGJvZHkgcG9zaW5nCmhhbmRzb21lIGNoYWQgY2hpbgppbnNhbmUgZXllcwpsb29raW5nIHN0cmFpZ2h0IGludG8gdGhlIGNhbWVyYQpnbGVuCnNlZHVjdGl2ZWx5IGxvb2tpbmcgaW4gZnJvbnQKY29tcHV0ZXIgZ2FtZQpyaWNoIHZpdmlkIHZpYnJhbnQgY29sb3JzCnZlcnkgZGV0YWlsZWQgdW5yZWFsIGVuZ2luZQpnaG9zdCBpbiB0aGUgc2hlbGwgZ2Vpc2hhIHJvYm90CmNhdHMgc2xlZXBpbmcKc2l0dGluZyBpbiBhIGNhZmUgYWxvbmUKYmxhY2sgc3dpbXN1aXQKaW4gc3R5bGUgb2YgY2FyYXZhZ2dpbwpzaXR0aW5nIHJlbGF4IGFuZCBoYXBweQpub3NlIG9mIHJlZCBza3VsbAp0aGVyZSBhcmUgYmlyZHMgb24gaGVyIGhlYWQKcmlkaW5nIG9uIGEgcHJhbmNpbmcgaG9yc2UKd2VhcmluZyBibGFjayBzdWl0Cm1vZGVybiBjbGVhbiB3aGl0ZSBhcm1vcgp0cmVuZGluZyBvbiBwaXh2CnNoZSBoYXMgdGlyZWQgZXllcwpzbWFsbCBhbmQgdGhpY2sgcmVkIGxpcHMKYXJjaGVvbG9naWFsIGRpZyBzZXR0aW5nCnJ1c3RpYyBzZXR0aW5nCnN0YXIgd2FycyBzZXR0aW5nCmN1dGUgZmVhdHVyZXMKcGl4YXIgb2N0YW5lIHJlbmRlcgpyb3NlIGluIGhhaXIKaGFycnkgcG90dGVyIHNlcmllcyBzZXR0aW5nCnZlcnkgZGVmaW5lZApyZWxheGVkIGV5ZWJyb3dzCmRpZ2l0YWxwb3J0cmFpdAphcnQgcHJvamVjdApzdHJlc3NlZCBleHByZXNzaW9uCnJ1c3RpYyBhbmQgd2VhdGhlcmVkCndlYXJpbmcgYSBzcGFjZXN1aXQgYW5kIGhlbG1ldAptYXJ0aW4gZW1vbmQKdGhpbiBsdXN0cm91cyBhdWJ1cm4gaGFpcgpkcmVhbXkgbmlnaHQKcnVzc2lhbiBzb3ZpZXQgbW90aWZzCmZveCBub2J1c2hpIGhvbGRpbmcgYSBuYWdpbmF0YQp1bnJlYWwgcG9zdCBwcm9jZXNzaW5nCmZveCBub2J1c2hpCmluIG1vbnN0ZXIgaHVudGVyIGFybW9yCnNhZmknamlpdmEgYXJtb3IKYmxhY2sgZXllcyBhbmQgc2NsZXJhCndlYXJpbmcgYSBsaWdodCBibHVlIHN1aXQKcGFpbnRlZCBpbiBoaWdoIHJlc29sdXRpb24KdGhpY2sgcmltbWVkIGdsYXNzZXMKYmxhY2sgbmFpbHMKc2ltaW4gc3RhbGVuaGFnCnRvdWxvdXNlIGxhdXRyZWMKYnV6eiBjdXQgaGFpcgptaXhlZCBtZWRpYSBwaG90b2dyYXBoeQooICggY2hhcmFjdGVyIGNvbmNlcHQgYXJ0ICkgKQpjaGlja2VuIHNhbmR3aWNoCnRha2VuIHdpdGggY2Fub24gZW9zIDUgZApuaXhldSBhbmQgc2FraW1pY2hhbgp5b3VuZyBzZW5zdWFsIHdvbWFuCmluIHN1aXQgd2l0aCBibGFjayBnbGFzc2VzCnNoZWVwIHdlYXJpbmcgYSBzdWl0Cm1lZGlldmFsIGdhcmIKYnJ1Y2Ugc3ByaW5nc3RlZW4KOCA1IG1tIGYgMS4gOCBmdWxsIGZyYW1lIGNhbWVyYQpzYWZlaGF2ZW5ocQo4IDUgbW0gZiAxLiAyCmJyYWluIGZyb20gY3J5c3RhbHMKbG9va2luZyBpbiBmcm9udAp2ZXJtZWVyIGFuZCBjYXJhdmFnZ2lvCm5pZ2h0aW1lIHZpbGxhZ2UgYmFja2dyb3VuZApjaGluLWxlbmd0aCBwdXJwbGUgaGFpcgpzaG9ydCBib29rc2hlbGYKbmZ0cwpzaGUgaGFzIGxvbmcgcmVkb3JhbmdlIGhhaXIKcmVmaW5lZCBub3NlCnJlZCBoaWdoIGhlZWwgcHVtcHMKeW9ya3NoaXJlCnNwYXJreSBzd2ltc3VpdApjYWxtIHNlYSBhbmQgYmVhY2ggYmFja2dyb3VuZApjcmVhdGluZyBhIHNvZnQKMzI3ODc1MDcyNwoxODQwNTgwNzM1CnNtaWxlcyBzbGlnaHRseQp0cmF2ZWxpbmcgY2xvdGhlcwphdG1vc3BoZXJpYyBsaWdodGluZyAtIG4gOQpicm93biBiYW5ncwp2aWN0b3JpYW4gZXJhIG1hc3RlcndvcmsKaGlnaCByaXNlIGJ1aWxkaW5ncwpjeWJlcnRlY2gKYWJzdHJhY3QgYWNyeWxpYyBwYWludGluZwpjb21pY2Jvb2sgYXJ0CnRyZW5kaW5nIG9uIGdjIHNvY2lldHkKZGFyd3luIGNvb2tlCmVhcmluZ3MKbm90b3Jpb3VzIGIgaSBnCjggMCBtbSBmIC8gMS4gMgppbiB0aGUgYXJ0IHN0eWxlIG9mIHVraXlvIC0gZQpzZW5nb2t1IC0gZXJhIGFydCBzdHlsZQp0cmliYWwgdGF0dG9vcyByaWdodCBhcm0gc2xlZXZlCmdvc3NhbWVyIHdpbmdzCnN0YXIgd2FycyBhcnQgZGVjbwpsb25nZXIgZXllYnJvd3MKc3Vuc2V0IGluIHRoZSBjbG91ZHMKcGVhciBmb3IgYSBoZWFkCnJvY29jbyBvbnl4IGhlYWRwaWVjZQp1bnJlYWwgZW5naW5lIGFydAprcnlzdGFsCmluIGEgY2xvYWsgd2l0aCBsb25nIGhhaXJzCnZyIGhlbG1ldCBvbiBtYW4KbmhsIGxvZ28Ka2luZyBvZiB0aGUgZmxpZXMKdGhlIGhhcmJyaW5nZXIgb2YgZGVhdGgKaGlzIGhhaXIgaXMgbWVzc3kgYW5kIHdpbGQKYnJlZWQgY29yZ2kgYW5kIGRvb2RsZSBtaXgKdmlicmFudCByZWFsaXN0aWMKZGVhdGggYW5kIGR5aW5nCmluIHRoZSBzdHlsZSBpZiBncmVnIHJ1dGtvd3NraQpncmVnIHJ1dGtvd3NraS4gc2hhcnAgZm9jdXMKdHJlbmRpbmcgb24gY25uCndlbGwgZGVmaW5lZCBqYXdsaW5lCmRpcnR5IGFuZCByYWdnZWQKd2l0aCBhIGNyb3cgb24gaGVyIHNob3VsZGVyCmdyZWVuIGdsb3dpbmcgY3JhY2tzIG9uIGZhY2UKMyA1IHllYXIgYnJhemlsaWFuIG1vdGhlcgo4MCBtbSBzaWdtYSBhcnQKc2NhciBvbiB0aGUgY2hlZWsKZGVwdGggb2YgZmVpbGQKZ2xvd2luZyBmaXJlIGJhY2tncm91bmQKc21hbGwgdmlhbHMgYW5kIHBvdWNoZXMgb24gYmVsdApoZWFkIG9mIGJyb2Njb2xpCnRydWNrIHJhY2luZyBpbnRvIGNhbWVyYQpmYWxsaW5nIGJ1aWxkaW5ncwpmdXR1cmlzdGljIGVzdHJ1Y3R1cmVzIGluIHJ1aW5zCnNwYWNlc2hpcCBpbiBzcGFjZSBpbiBydWlucwpkaWFnb25hbCBsaW5lcwpvZmZpY2lhbCBtYXJ2ZWwgbWVkaWEKZ3JlZyBdCnNvdmlldGljIGVyYQp2aWVubmEgc2VjZXNpb24gc3R5bGUKbm9uIC0gZXVjbGlkaWFuCmJsdWVpc2gKZmFjaW5nIHNpZGV3YXlzCm5hemkgcHJvcGFnYW5kYQpoaWdobHkgYWVzdGhldGljCmNyaXNwIGFuZCBjbGVhcgp5dXRqYQpzdGlsbCBtb3ZpZSBzaG90CmRhZGR5Cm91dGxpbmVkIGhhbmQgZHJhd24Kd2FybSBzaGFkaW5nCnZlcnkgdmVyeSBjdXJseSBibG9uZCBoYWlyCmhlciBmYWNlIGlzIGluIHNoYWRvdwp3aW5kaW5ncwpzbm93eSBmam9yZAphdCBhIHZvbGNhbm8KZmFudGFzeSB3YXRlcmNvbG9yCnNob3QgZm9yIHBvdHRlcnkgbWFnYXppbmUKY2Fub24gYzMwMAp0aGVyZSBpcyBmdWxsIGJlZHBhbiBuZXh0IHRvIGhpbQpuYXR1cmUgcmV0dXJuaW5nIHRvIHRoZSBjaXR5CnNoYXJwIGxpZ2h0bmluZwpwaXJhdGUgc2hpcCBpbiBiYWNrZ3JvdW5kCmNhc3RpbmcgYW4gZXZpbCBzcGVsbAptaWxpdGFyeSBoZWxtZXQKbmljZSBiYWNrZ3JvdW5kIGJva2VoCmNsb3RoZXMgaW4gbWlsaXRhcnkgYXJtb3IKd2VhcmluZyBpbiBzdG9ja2luZwptZXNoIHNoaXJ0CmluIGEgc3RyaXAgY2x1Ygpza3kgLSBoaWdoIHZpZXcKY292ZXJlZCBpbiBsZWF2ZXMKaGFuZCBvbiB0YWJsZQp0YWtlbiBpbiBuaWdodCBjbHViCm51dGUgZ3VucmF5CmZpbmUgcHJvZmVzc2lvbmFsIHBob3RvCmV4cG9zZWQgd2Fpc3QKZmlsbSBidXJuCmRpcnQgb24gZmFjZQptdWQgb24gZmFjZQpiaWcgbW9vbiBpbiBiYWNrZ3JvdW5kCmdyZWVuIHNtb2dneSBza3kKbWV0YWwgdG93ZXJzIGFuZCBzZXdlcnMKZGFyayBnb2xkIGhhaXIKZGVlcCByZWRkaXNoIGdvbGQgaGFpcgppbiBhIG9wZW4gZ3JlZW4gZmllbGQKZnJvbSBrZWhpbmRlIHdpbGV5CnNrZXRjaC1saWtlCnBhc3RlbGNvbG91cnMKY29vbCB0b25lCnppcHBlcmVkIG9wZW5pbmcgaW4gc2t1bGwKcXVhbnR1bSBsZWFwCmRlZXAgc3BhY2UgOQpkZWNvbnN0cnVjdGVkIHdhZmZsZQpjYXJ0b29uIGNhcnRpY2F0dXJlCnNvdmlldCAtIGVyYQpibGFjayBob2xlIHRpbWUgcG9ydGFsCm1vdW50YWlucyBtYWRlIG91dCBvZiBpY2ViZXJncwp0b3Agb2YgYXJ0CmVsZWdhbnQgYW5kIHJlZmluZWQKc2lkZWZ4CmFiaWxpdHkgaW1hZ2UKYWRvcmFibGUgYW5kIGN1dGUKaGUgd2VhcnMgYW4gZXllcGF0Y2gKaGUgaXMgdHJhdmVyc2luZyBhIHNoYWRvd3kgY2l0eQpkcmF3biBpbiBhIG5lbyAtIG5vaXIgc3R5bGUKY3liZXJwdW5rIGRpZ2l0YWwgcGFpbnRpbmcKd2F0ZXJjb2xvdXIgcmVhbGlzdGljCnZldGVyaW5hcnkgbWVkaWNhbCBkaWFncmFtCmV4dHJlbWVseSBoYXBweSByYWNjb29ucwpyYWNvb24KYWJzdHJhY3QgaWxsdXN0cmF0aW9uCmJyaWRnZSBvdmVyIHRoZSB3YXRlcgppbiB0aGUgc2hhcGUgb2YgYSBlbnQKcGl4YXIgYXJ0IHN0eWxlCnBhbnRvbmUgY29sb3IKdW5yZWFsIGVuZ2luZSA5CmJlYXV0aWZ1bCBzY3VscHRlZCBkZXRhaWxzCnByb29mIHBob3RvZ3JhcGgKbWVkaWNhbCBpbWFnZQppbiBhIGxpZ2h0aW5nIHN0b3JtCnRoZSBwaG9lbml4CnBsYXlzdGlvbiA1IHNjcmVlbgp0YWxsIHRlcnJhY2UKYnJpZ2h0IGluIGNvbG91cgpibGFjayBhbmQgYmx1ZSBhbmQgcHVycGxlIHNjaGVtZQpibHVlIGFuZCBwdXJwbGUgc2NoZW1lCm9wYWwgc3RhdHVlcwpmb25kIG1lbW9yaWVzCnNvY2NlciBwbGF5ZXIgbWF0dGhpanMgZGUgbGlndApyZXBhaXJpbmcgdGhlIG90aGVyIG9uZQpjZXJhbWljIHN0YXR1ZQpzb2NjZXIgcGxheWVycyB0aW1vIHdlcm5lcgppIHRoaW5rIHlvdSBzaG91bGQgbGVhdmUKd2VhcmluZyBhIG5pZ2h0Z293bgpzdGFuZGluZyBpbiBmcm9udCBvZiBhIG1vdW50YWluCndpdGggc2hvdWxkZXIgcGFkcwpkYXJrIGluZHVzdHJpYWwgYmFja2dyb3VuZAp3YXRlciBsaW5lIHN1cmZhY2UKZ3JlZW4gcHVwaWxscwp1bHRyYSBiZWF1dGlmdWwKZGVzZXJ0IGNhbW91ZmxhZ2UKY2hhcmxlcyBidXJucwpkYW5pZWwgY2xvd2VzCmNyeXN0YWwgZW5jcnVzdGF0aW9ucwpkcmFwZWQgaW4gY3J5c3RhbHMKYXQgcHVycGxlIHN1bnNldApiYXNlZCBvbiBhIHB1bWEKaW5jYSB0aGVtZWQgc21vb3RoCmZhbmFydCBiZXN0IGFydHN0YXRpb24KdHJlbmRpbmcgb24gZGV2aWFuIGFydAp1cwphdGxhbnRpYyBwdWZmaW4Kb24gYSBzdW5ueSBiZWFjaApjaW5lbWF0aWMgY29sb3JzIGxpZ2h0aW5nCmFuY2llbnQgdGltZXMKbXV0ZWQgZmxhdCBzdXJyZWFsIGRlc2lnbgpwcm9wZ2FuZGEgcG9zdGVyCmhpZ2ggcXVhbGl0dApiZWF1dGlmdWwgZHVzawp2aWV3ZWQgdGhyb3VnaCB0aGUgY2FycyB3aW5kb3cKcm9tYW5jZSBmYW50YXN5IG1vdmllCmp1bmdsZSBhcm91bmQgaGltCmZyb250IGJhY2sgdmlldyBhbmQgc2lkZSB2aWV3Cm9mIGxldHRpbmcgZ28KaG9sZXMgaW4gYSByZWxpZ2lvdXMgbWFuCnRoZSByb2JvdCBoYXMgYSBmaXNoaW5nIHJvZApyZWxpZ2lvdXMgYXdlCnJ1aW5zIGluIHRoZSBiYWNrZ3JvdW5kCmNsYXNzaWNhbCBzdG9uZSBjb2x1bW5zCndpdGhvdXQgZXllYnJvd3MKYmlnIHNtaWxlIHdoaXRlIHRlZXRoCndlYXJpbmcgYSBjcm93biBhbmQgZ3JlZW4gY2FwZQo0ayBoZCB3YWxscGFwZXI6NApkdXJpbmcgYSBoYWlsIHN0b3JtCmJhY2tzdHJlZXQgYm95cwoxIDkgNCA3CnByZSAtIHJhcGhhZWxpdGVzIHN0eWxlCmNnYSBncmFwaGljcyBzY2hlbWUKbWlzdGljCm1vbnNvb24KZnJvbSBlYXN0IHRvIHdlc3QKbWFzc2l2ZSByaXZlcgpkYWlseSBzcGVjaWFscwphIGRvb3IgeW91IG11c3QgbmV2ZXIgb3Blbgpmb2cgYmFja2dyb3VuZApzaGFmdHMgb2YgbGlnaHQgZ29kIHJheXMKaGFsZiBvY3RvcHVzIGhhbGYgbWFjaGluZQpjeWJlcnB1bmsgc3R5bGUg77yMIGh5cGVycmVhbGlzdGljCm1lY2hhbmljYWwgY3V0ZSBiaXJkCnRoZSByb2JvdCBpcyBjYXB0YWluIG9mIGEgc2hpcApvbiB0aGUgYm93CmNhbHVkZSBtb25ldCBzdHlsZQpibGFjayBzd2VhdHBhbnRzCmxhc2VyIHBvaW50IGJldHdlZW4gdGhlIGV5ZXMKZGFyayBsaWdodHMKcm9jayB3YWxsCm1pbmVycwpsYXRlIGJhcm9xdWUgcGFpbnRpbmcKYmlvbG9naWNhbCBmb3JtcwpvbiBhIHN0cmVldCByYWNlIHRyYWNrCmFlcmlhbCBzaG90IGZyb20gdGhlIGRyb25lCmxvbmcgYmxhY2sgaGFpciB3aXRoIGJhbmdzCndlYXJpbmcgc2hvcnRzIGFuZCB0IHNoaXJ0CmdyYWZmaXRpIGFuZCBwb3N0ZXJzIG9uIHRoZSB3YWxsCmJ1enplZCBoYWlyCmdyYWRpZW50IGlyaWRlc2NlbmNlIGNvbG9ycwpjYW5vcHkKY2hhcmFjdGVyIGRlc2lnbnMKdGhleSBhcmUgY2hhc2luZyBhIHdoYWxlCjJkIGRpZ2l0YWwgaWxsdXN0cmF0aW9uCndlYXJpbmcgYSB0dWRvciBzdHlsZSBkcmVzcwpkcmFtYXRpYyBuYXV0aWNhbCBzY2VuZQpkYW5nZXJvdXMgd2F2ZXMKdGVybWluYXRvciB0IDggMCAwCmRldGFpbGVkIGZhY2Ugd2l0aCBtYXNrCmZseWluZyBzY3JldwpodWdlIHJlZCBtb29uCmFuaW1lLiBieSBtYWtvdG8gc2hpbmthaQp0cmFpbiBzdGF0aW9uIGluIHN1bW1lcgpuYXR1cmFsaXN0IGlsbHVzdHJhdGlvbgpjcmFzaGVkIHVmbwp3ZWFyaW5nIGdvbGQgamV3ZWxsZXJ5CnNjZXRjaApncmlldmluZy4gaW50cmljYXRlCm11c2ljYWwga2V5Ym9hcmQKc21va2UgY29taW5nIGZyb20gdGlyZXMKdmVyeSBkZXRhaWxlZCA4IGsKaHlwZXIgcmVhbGlzZQpoeXBlcmxpZ2h0IGRyaWZ0ZXIKYmVlcGxlIGFydAphY3J5bCBwYWludGluZwpldmlsIGx1cmtzCm9ibm94aW91cwp3aXRoIG11bHRpcGxlIHNoYXJwCmxlYWtpbmcgcGlzdG9ucwp0aGUgY2xhbmdlcnMKbW9lYml1cyBhbmQgbWlrZSBtaWdub2xhCnRoZSBhbm51bmFraSBtYWtpbmcgaHVtYW5zCm1hc3RlcnBpZWNlIGNpbmVtYXRpYwpnYXJkZW5zIHdpdGggZmxvd2VyIGJlZHMKcmVmbGVjdGluZyBtb3VudCBmdWppCmZhbW91cyBzY2VuZQp3aGFsZSBmYWxsCnJldHJvIGlsbHVzdHJhdGlvbgphcnRpc3RpYyBhYnN0YXJjdApsb25nIGhhbGwgd2F5CmJlYXV0aWZ1bCBhbmQgc3BlY3RhY3VsYXIgZHVzawpkYXllciBkaWVnbyBhcnR3b3JrCnJlYWxpc3RpYyBtZXRhbCByZWZsZWN0aW9ucwpzdGV2ZSBoZW5kZXJzb24gYW5kIG1hcmsgYnJvb2tzCm11c3BlbGhlaW0KbG9va2luZyBhcm91bmQgYSBjb3JuZXIKcmVhbGlzbSBvbGQgcGFpbnRpbmcKc3Bpcml0cyBmbHlpbmcKYW50aHJvcG9zY2VuCmluIHN0YXIgdHJlayB0aGUgb3JpZ2luYWwgc2VyaWVzCmRhcmsgaW5kdXN0cmlhbCBhdG1vc3BoZXJlCmJsdSAtIHJheQpwcm9mZXNzaW9uYWwgYXdhcmQgd2lubmluZyBwaG90bwpzbmVzIGdyYXBoaWNzCmhpZ2ggZGV0YWlsZWQgdmZ4CnNldCBpbiAxOTkyIGphcGFuCnJlbmRlcmVkIGlsbHVzdHJhdGlvbgpiaWIgYmFuZwpib3R0b20gaGFsZiB3b29kISEhISEgY2FydmVkCm92ZXIgdGhlIGhlYWQgb2YgYSBzZWEgd29sZgp0d2luawpmaW5hbCBqdWRnZW1lbnQKb2xkIHNjcm9sbAp3aGl0ZSBmbGVzaApjZW50ZXJwaWVjZSBzeW1tZXRyeQphbGwgZGlydHkgd2l0aCBzZXZlcmVkIGxpbWJzCmV5ZSAtIGNvbnRhY3QKZW5nIGtpbGlhbgpmdWppdGEgZ29ybyBhbmQgam9uZXMKbWllcyB2YW4gZGVyIHJvaGUKaGQgcmVhbGlzdGljCmdyYXNwaW5nIHBzZXVkb3BvZHMKZ2hpYmxpIHN0dWRpbyBhbmltZSBzdHlsZQp0aGUgbW9vbiBhbmQgc3RhcnMKaW50ZWdyYXRlZCBpbiB0aGUgbW91bnRhaW5zCmh1Z2Ugc3VjY2VzcwpjaGVja2VyZWQgbW90aWZmcwpwbGF5aW5nIHdpdGggYSBmb3gKYmlyZHMgb2YgcGFyYWRpc2UKc3R5bGUgb2YgaWx5YSBrdXNoaW5vdgpiZWF1dGlmdWwgc2V0dGluZwpsb29raW5nIGhvdApmb3JjaW5nIGhpbSB0byBmbGVlCmRhcmsgYmx1ZSBtaXN0CmZhc2hpb24gY2xvdGhlcwpwaW50ZXJlc3QgNCBrCndpdGggYSBjYXN0bGUgaW4gdGhlIGJhY2tncm91bmQKbG9va2luZyBoZWNraW4gY29vbCBhbmQgc3R5bGlzaAplbWFuYXRpbmcgYW5kIGZsb3dpbmcgZW5lcmd5CnNraWxsIGFiaWxpdHkgYXJ0CmZ1amljb2xvciB3aXRoIGZsYXNoCmxhdGV4IHNoaW55CnNjYXJsZXQgYW5kIHllbGxvdyBzY2hlbWUKd2hpc2tleSBib3R0bGUKcGVyc2lhbiBkZXNpZ24KcmlwcGxpbmcgd2l0aCBtYWdpYwplbWVyZ2luZyBmcm9tIGhlciBsYW1wCndpdGggc3Bpa2V5IHNob3J0IGJyb3duIGhhaXIKZmxpY2tyIGV4cGxvcmUgNSAwIG1tCmR5bmFtaWMgbGF5b3V0CnJlZCBjdXJseSBoYWlyCmdyYWRpZW50cyBhbmQgc29mdCBsaWdodApwaG90b3JlYWxpc3RpYyBkYXJrIGNvbmNlcHQgYXJ0CmNpbmVtYXRvZ3JhcGhpYyBsaWdodGluZwpsaW5lcyBvZiBlbmVyZ3kKd2VpcmQgc2ltcGxlIGZ1bmd1cyBhbmQgdGVuZHJpbHMKbW9kZXJuIHNpbXBsaWZpZWQgdmVjdG9yIGFydApjcmVhdGVkIGluIGFkb2JlIGlsbHVzdHJhdG9yCnNtb290aCB2ZWN0b3IgY3VydmVzCnN0YW5kaW5nIGluIGEgYnVkZGhpc3QgdGVtcGxlCmZpdCBwaWMKYmlibGljYWwgYXJ0IGxpZ2h0aW5nCmhvbmV5IC0gY29sb3JlZCBleWVzCndyYXBwZWQgaW4gbGVhdGhlciBzdHJhcHMKb2lsIHBhaW50aW5nIGRuZApzb21lIG1vdW50YWlucyBpbiB0aGUgYmFja2dyb3VuZAp2aWRlbyBjYW1lcmEKc3VtaSBpbmsgc3R5bGUKc3BhcnNlbHkgcG9wdWxhdGVkCmxvdyBhbmdsZSA4ayBoZCBuYXR1cmUgcGhvdG8Kcm9ib3QgY2l0eSBydWlucwphbmNpZW50IGFsaWVuIGhlYWQgc3RvbmUgc3RhdHVlcwoxOTE2CmJhY2tncm91bmQgc2FuZCBkdW5lcwo0IGsgbW92aWUgc3RpbGwKcG9sYXIgYmVhciBpbiB0aGUgZmFyIGJhY2tncm91bmQKZW1pbmVtIGFzIGEgbSAmIG0gY2FuZHkKc3BhY2Ugc2hpcCBpbiB0aGUgYmFja2dyb3VuZApoYXJkIGJydXNoIHBhaW50aW5nCmdsYXJpbmcgYXQgdGhlIGNhbWVyYQp2ZXJ5IGxpdHRsZSBtb3NzCmdvbGRlbiBtYWdpY2FsIHNob3VsZGVyIHBhZHMKaW4gYSBob29kCml0IGlzIHZpc2libHkgYW5ncnkgYXQgdGhlIHR2CmZvZ2d5IHdoZWF0IGZpZWxkCmluc2lkZSBvZiBhIGJlZHJvb20KYmx1ZSB0aW50ZWQKZHVyaW5nIGEgc3Rvcm0KZ2VsIHNwaWtlZCBoYWlyCnNhYmxlcyBjcm9zc2VkIGluIGJhY2tncm91bmQKcGlyYXRlIGxvZ28KZ3JhaW55IGZpbG0gc3RpbGwKZGlnaXRhbCBwb3N0ZXIKZGVmZW5kaW5nIHRoZSB2YXN0IGxvb21pbmcgY2l0eQpyZXN0aW5nIG9uIGEgcGlsbG93CndlYXJpbmcgcGFqYW1hcwphIHRzaGlydC4gYmxlbmRlciBhcnQKY29saW4gY2FtcGJlbGwgY29vcGVyIHNwZWVkYXJ0CnBhcnRseSBzdW5rZW4hIGluIHRoZSBsYWtlIQpjbG9zZSBtYWNybyBwaG90by4gc3R1ZGlvIHBob3RvCmZyb250IGVuZXJneSBnYW1lIGNhcmQKdGlueSBzbW9rZXMgZnJvbSBidWlsZGluZ3MKc29tZSBnbGludHMgYW5kIHNwZWNzCnBldHJvcyBhZnNoYXIgc3BlZWRhcnQKZGlwcGVkIGluIHBvbGlzaGVkIGJsdWUgY2VyYW1pYwptb2xlY3VsYXIKbWFnaWNhbCBwb3Rpb25zCndlYXJpbmcgYSBzdWl0IGFuZCBhIHRpZQpiZWQgb24gdGhlIHJpZ2h0CmhvdGVpIGlzIG9uIHRoZSB0YWJsZQptaXhlZCBtYXRlcmlhbHMKbGlnaHQgYmVpZ2UgcGlsbG93cwp0ZXp1a2Egb3NhbXUKY29udGVtcG9yYXJ5IGhvdXNlCnJlbmRlcmVkIGluIDMgZHNtYXgKcmVhbGlzdGlzdGljCmdyZWcgcnV0a293c2tpIDsgd2hpbXNpY2FsCmZhY2UgbGlrZSBtYXJpbHluIG1vbnJvZQpkaWdpdGFsIHBhaW50aW5nLiBvY3RhbmUgcmVuZGVyCmluIHN3aXJsaW5nIGhhcm1vbnkKamFtZXMgamVhbiBhbmQgdmljdG8gbmdhaQpibGFjayBpbmsgbGluZSBhcnQKc25haWwgc2hlbGwKa2F0c3VzaGlrYQpjYXJyeWluZyBtb3NpbiBvbiBiYWNrCnhjb3B5IHRlZXRoCndlYXJpbmcgYmx1ZQpicmlnaHQgYW5kIHN1bm55IGRheQphcmNoaXRlY3R1cmFsIGNvbmNlcHQgZGlhZ3JhbQpoeXBlcnJlYWxpc20hISEKYW4gb3JhbmdlIGZpcmUgaW4gdGhlIGJhY2tncm91bmQKc3dhcm1zIG9mIHJhdmVucwpzb3JjZXJvdXMgbWFnaWMKY29udGVtcGxhdGluZwp3ZWFyaW5nIGFkaWRhcyBjbG90aGluZwpsb3cgYW5nbGUgY2FtZXJhIHZpZXcKaHlwZXJyZWFsaXN0aWMgZCAmIGQgZmFudGFzeSBhcnQKZ2xvd2luZyB3aXRoIGNvbG9yZWQgbGlnaHQKc3BlY3RyYWwgZXZvbHV0aW9uCmFic3RyYWN0IHN5bnRheApsdXBpdGEgbnlvbmcnbwpldmVyeXRoaW5nIGZpdHMgb24gdGhlIHNjcmVlbgpob2xkaW5nIGEgZmFudGFzeSBzd29yZAp3aGllIHRjb2xvcgpyZWQgd2FybmluZyBsaWdodHMKaG93YXJkIHBhawpwZXRyaSByYWhrb2xhCmdlcmFyZCBrcmF2Y2h1awpyb3VuZGVkIGxvZ28KZ2xvdyBsaWdodGluZwpnbG93aW5nIG1hZ21hIHNwaGVyZQpsZWljYSBzdW1taWx1eCA1IDAgbW0gZiAvIDEuIDQKZXBpYyBmaWdodHMKcmdiIHdhbGwgbGlnaHQKdHJhZGl0aW9uCmNvbmZvcm1pdHkKbW9yYWxpdHkKZXRoaWNzCnJlYWxmbG93CmVneXB0aWFuIG11bW15CnNvbWUgb2YgdGhlIGJsYWNrdG9wIGlzIHNob3dpbmcKaGlnaHJpc2UgYnVpbGRpbmdzCmh1Z2UgaG9sb2dyYW1zCnVuaXR5IGhkcnAKd2l0aCBtb3VudGFpbnMgaW4gdGhlIGJhY2tncm91bmQKcmVhbGlzdGljIGhkIHBob3RvCmpvaG4gY2FycGVudGVyIGJvZHkgaG9ycm9yCnByb3RydWRpbmcgYm9uZXMKc29ueSAyIDQgbW0gZiA0LiAwCmpvaG4gbGVubm9uIGFzIGEgc3RhZyBiZWV0bGUKZGlzY28gZWx5c2l1bSB2aWRlbyBnYW1lCmZsYW1pbmcga2F0YW5hCm1hZGUgb2Ygc3dpc3MgY2hlZXNlIHdoZWVscwpwb3B1bGF0ZWQgd2l0aCBhbGllbnMgYW5kIHBlb3BsZQptYWNybyBjYW1lcmEgc2hvdApmdWppY29sb3Igc3VwZXJpYSBwaG90bwpzdmFyb3Zza3kKY292ZXJlZCBpbiB3YXRlciBkcm9wcwp2aXJ0dWFsIHJlYWxpdHkgaGVhZHNldApyb2RpbiBzdHlsZQphYmFuZG9uZWQgYmFybiBpbiB0aGUgYmFja2dyb3VuZApjb2xsYXBzZWQgd2F0ZXIgdG93ZXIKYmVhdWl0ZnVsCndpbGQgY29sb3JzCm9jY2x1c2lvbiBwYXNzCnN0YW5kb2ZmCm9ubGluZQpjbG9zZSB1cCAxIDkgOSAwCmNyZWF0dXJlIGluIHZpZXcKbWFuIGZyb20gdW5jbGUKMiBkIGdhbWUgZW52aXJvbm1lbnQgZGVzaWduCjIgMSBtbQpidXR0ZXJmbGllcyBhbmQgc3VucmF5cwpmIDIuIDggZGVwdGggb2YgZmllbGQKbWVkaXVtIDUgMCBtbSBsZW5zCm1lZGl1bSA3IDAgbW0gbGVucwphbGllbiBlbnZpcm9ubWVudApzY2VuZSBmcm9tIHRoZSBtb3ZpZSBnb2RmYXRoZXIKb3JhbmdlIGFuZCB0dXJxdW9pc2UgYW5zIHB1cnBsZQpuYXRoYW4gZmlsbGlvbgpmaWxtIGZyYW1lCm9uIGEgdmVsdmV0IHRhYmxlY2xvdGgKaW4gdGhlIG1vdmllIGxpZmVmb3JjZSAoMTk4NSkKbm9ydGgga29yZWFuIHNsYXNoZXIKdGhlcmUgaXMgbGlnaHRuaW5nCm9uIGEgcGxhbmV0IG9mIGx1c2ggZm9saWFnZQptYW5seSBtb25zdGVyIHRvdWdoIGd1eQpyb3VnaGxlZCBmdXIKZ29kIHJheXMgdGhyb3VnaCBmb2cuIGNpbmVtYXRpYwpvZiB2aXJ0dWEgZmlndGhlcgpnb2xkIGNvbGxhcgotIDgKaW4gcmV0dXJuIG9mIHRoZSBqZWRpCnRlbGV2aXNpb24gc2NyZWVuc2hvdApubyBncmVlbmVyeQpmYWNlIGNsdXNlIC0gdXAKbG9uZyB3ZWFzZWwKYmxpenphcmQgc2hhcnAgZHluYW1pYyBsaWdodHMKcmVkIGxhbnRlcm5zCmluIGFuIGljZSBzdG9ybQpjYW5hZGlhbiBtYXBsZSBsZWF2ZXMKd2hpdGUgaGVsbWV0CmRhaXNpZXMgYW5kIHBvcHBpZXMKYWxpZW4gLSBzdHlsZQp0aGUgc2t5IGlzIGEgZmFpbnQgbWlzdHkgcmVkIGh1ZQpkJmQgZmFudGFzeSBzdHlsZQpnaW9yZ2lvIGRlIGNoaXJpY28gYW5kIGtsaW10CmhpZ2ggc2hhZG93cwpkYSB2aW5jaSBhbmQgam13IHR1cm5lcgphcHBhbGxpbmcKYmVhdXRpZnVsIGV5ZXMuIHN5bW1ldHJ5CnNjYXR0ZXJlZCBydWJiaXNoCmZpcmUgbGl0Cmh5YWNpbnRoIGJsb29tcyBzdXJyb3VuZCBoZXIKeWVhc3QKZmVhciBvciBnb2QKcnViYmVyIHdhZmZsZSBvdXRzb2xlCmhhc3NlbGJsYWQgbWVkaXVtIGZvcm1hdAppbiBhbiBhZnJpY2FuIHJpdmVyCnBvc3QgZ3J1bmdlIGNvbmNlcHQgYXJ0CmEgaHVtYW4gaGVhZApldmlsIHZpYmUKYmFyZSBmZWV0IGluIGdyYXNzCnNreSBzY3JhcGVycwptdXNjdWxhciBtYWxlIGhlcm8Kc3R1bm5pbmcgZnJhbWluZwppcnJlc2lzdGFibGUKc3VubGlnaHQgc2hpbmluZyB0aHJvdWdoCnN0YW5kaW5nIG5lYXIgYSB3aW5kb3cKZWFjaCBsYW5kIGlzIGEgZGlmZmVyZW50IGNvbG9yCmNlbHRpYyBuZW9uIHJ1bmVzCm5hdHVyYWwgd2VpZ2h0CmhhaXIgZmx1aWQKd2VhcmluZyBhIHRpZS1keWUgdC1zaGlydApzbW9rZSBvdXQgb2YgZXllcwptYW55IHBlb3BsZSB3b3JzaGlwcGluZwphdGhsZXRpYyBtdXNjbGUgdG9uZQppbnRyaWNhdGVseSBoeXBlcmRldGFpbGVkCmhkIGZ1cgpjdXRlIG1vdXNlIHBva2Vtb24KbWFzdGVyIHN0dWR5CmxlZ3MgdmlzaWJsZQphbiBhaG9nZSBzdGFuZHMgdXAgb24gaGVyIGhlYWQKaGVyIGZvb3R3ZWFyIGlzIHJlZCBoaWdoIGhlZWxzCnB1cnBsZSBhbmQgZ3JlZW4gZmlyZQpmaXJlZmxpZXMhIQptZWNoYW5vaWQKdHJvdXQgaW4gcGFudHMKdHJvdXQgc3RpY2tpbmcgb3V0IG9mIHBhbnRzCm9tYnJlIHB1cnBsZSBhbmQgcGluayBoYWlyc3R5bGUKc3VuIHRocm91Z2ggbWFqZXN0aWMgY2xvdWRzCmhpZ2hseSBkZXRhaWxlZCByb2NrIHN0cnVjdHVyZXMKc2hhcnAgZm9jdXMgb24gaG91c2VzCnJlaW5hc3NhbmNlCmhvIHNjYWxlCndpdGhvdXQgYmFja2dyb3VuZApzbWFsbCBraXRjaGVuCmhvdXNlIHBsYW50cwp3YXRlcmNvbG9yIGlucGFpbnQKd2lsZCBwZW5jaWwgc3R5bGUKZHJ5IGJydXNoIHdhc2gKb3JhbmdlIGFuZCBncmVlbiBwb3dlcgpodWdlISEhCmNhYmJhZ2UgdHJlZXMKbWFudWthCnRhd2EgdHJlZXMKYmx1ZSAtIHllbGxvdyBza3kKdGF0dG9vIHN0eWxlCnd3MiBzcGFjZSB0ZWNoCnNvZnQgYm9keQpjb2xvciBwZW5jaWwgYXJ0CmR1ZWwgYmV0d2VlbiB0d28gY293Ym95cwpzYWxvb24gZXh0ZXJpb3IKdmlydHVhbGx5IG5vIHBlZXIgb3IgcHJlY2VkZW50CndpbGRseSBhdHRyYWN0aXZlCmdhbGF4eSBpbiBiYWNrZ3JvdW5kCmRlbGl2ZXJpbmcgcGFja2FnZXMgZm9yIGFtYXpvbgpmIDIgNApwb3N0K3Byb2Nlc3NpbmcKaW50cmljYXRlIGFuZCBjb21wbGV4CmRyYW1hdGljIGxpZ2h0aW5nIQphbGNoZW1pY2FsCndpdGggdGhlIGZhY2Ugb2YgZW1tYSB3YXRzb24KZGVzdHJveWluZyBob3VzZXMKcHJvZHVjdCBwaG90b2dyYXBoeSA0IGsKc2VlaW5nIGFsbCBzaWRlcyBhIGJpdCBpbnNhbmUKbW9vZyBoZAp2aWJyYW50IGluIGNvbG9yCjQ6MwpkaXNqb2ludGVkIHN0eWxlCmhpZ2hseSByZWFsaXN0aWMgZGlnaXRhbCBhcnQKc2FuZCBzdG9ybSBlbnRlcnMKc3RyZWFrcyBvZiBkdXN0CmxvdmVjcmFmdCBhcnQKY2VsIHNoYWRlZCB2ZWN0b3IgYXJ0Cm5ldXJvbnMgZmlyaW5nCmJ1cnN0aW5nIG5lb24gc3RhcnMKbGVhbiBtYW4gd2l0aCBsaWdodCB0YW4gc2tpbgptZXRhbCBza3VsbCB3aXRoIHJlZCBleWVzCnByaXR0eQpjb2xvcml6ZWQgMSA5IDAgNCBwaG90bwpubyBoZWxtZXRzCjcgMCBtbS4gZGlnaXRhbCBhcnQKdm94ZWwgYmFzZWQgd29ybGQKYmxhY2sgaW5rIG9uIHRleHR1cmVkIHBhcGVyCmluIGEgcGhvdG8gc3R1ZGlvCmxpdmUtYWN0aW9uIGpvaG4gd2F0ZXJzIGZpbG0KZGVuaXMgdmVsbGVuZXV2ZQpvcmFuZ2UgYmFsYWNsYXZhCnBsYXlpbmcgdGVubmlzCnN0YW5nZXIgdGhpbmdzCmFtYXpvbiBqdW5nbGUKc3R5bGUgb2YgdmlyZ2lsIGZpbmxheQpsb29zZSB3YXRlcmNvbG9yIGRyYXdpbmcKbWVjaGEgZm9udApjaGFybGVzIHZlc3MgYW5kIHRob21hcyBraW5rYWRlCmRzbHIgNSAwIG1tCnRoZSBjbG93biBpcyBmYXIgZnJvbSB0aGUgY2FtZXJhCjYgY29sb3JzCnNjaG9vbHMKc29mdCBkaWZmdXNlIGxpZ2h0aW5nCmJhbGxpc3RpYwpkZXZpYW50YXJ6Cm1vbnN0ZXIgaHVudGVyIG1vbnN0ZXIKbG9va2luZyBtZW5hY2luZwpsYXVnaGluZyBtZW5hY2luZ2x5Cm5pa29uIG1hY3JvIDQwbW0KYWxidW0gY292ZXIgY29uY2VwdCBhcnQKc3R1bm5pbmcgZHJhd2luZwppbiB0aGUgbWlkZGxlIG9mIGFuIGVtcHR5IHJvb20Ka2Fuc2FzIHRvd24gYXQgbWlkbmlnaHQKdGhhbGxhc29waG9iaWEKLTQKb24gYW4gaXNsYW5kCmNoaWxkcmVuYm9vayBpbGx1c3RyYXRpb24KcHVkZGxlcyBvZiB3YXRlciBvbiB0aGUgZ3JvdW5kCnN0dWRpb3VzCmFjY3VyYXRlIGJyb3duIGV5ZXMKbWFwbGUgdHJlZQp0b3JyaQpzb2FyaW5nIHdhdmVzCmFtZW4gYmVhdHMganVuZ2xlIHBhcnR5CnRoZSBjaHJvbmljCmluIHRoZSB3YXRlcgpwYXNjYWwgYmxhbmNoZSBhbmQgZWR3YXJkIGhvcHBlcgpnaG9zdHNocmltcAp3b29kZW4gc3RhaXJzCmNsaWZmIGVkZ2UKP2JsYWNrIGFwcGxlcwpwcm9mZXNzaW9uYWwgY29sb3IgcGhvdG9ncmFwaHkKZXBpYyBteXN0ZXJpb3VzIHN1cnJlYWxpc20KdHlwb2dyYXBoaWMgYW5ub3RhdGlvbgpmbGF0IGdyYXBoaWMgZGVzaWduCnNjcmVlbnNob3QgZnJvbSB0aGUgZ2FtZSdjcnlzaXMnCnZpYnJhbnQgb2lsIHBhaW50aW5nCm1pbmltYWxpc3RpYyBkcmF3aW5nCmhvbGRpbmcgYSBmb290YmFsbAp3YWxraW5nIG9uIGljZQppbnRpbWlkYXRpbmcgZmxvYXRpbmcgc2FuZApwYWludGluZyBiaWcgYmVlcyBmbHlpbmcgYXJvdW5kCm9yYiBvZiBhZ2FtZW50bwpuaXZhbmggY2hhbnRoYXJhCm1vb25saWdodCB0aHJvdWdoIHRoZSB0cmVlcwpxdWVlbnMgZ2FtYml0CnJ1bmljIHN5bWJvbHMKaGVyIGhhaXIgaXMgaW4gYSBwb255IHRhaWwKYXJ0Z2VlbQpuZ2FpIHZpY3RvIGFuZCBkb3VnaGVydHkgcGF0cmljawpzaGUgaGFzIGJsYWNrIGhhaXIgd2l0aCBiYW5ncwpnaWFudCBncmVlayBjb2x1bW5zCmNvbnJhZCByb3NldCBhbmQgbWFrb3RvIHNoaW5rYWkKbWFzYXlvc2hpIHN1dG8gYW5kIGFydGdlcm0Kc2hlIGlzIGRpc3RyZXNzZWQKc2hlIGhhcyBtZXNzeSBoYWlyCmFpcmJydXNoaW5nCmV4dHJlbWUgYm9rZWgKYmVhdXRpZnVsIHNub3d5IGxhbmRzY2FwZQp3aXRoIGEgc21hbGwgZm9yZXN0CmxvcyBhbmdlbGVzIGF0IG5pZ2h0CmluayBhbmQgY2hhcmNvYWwgaWxsdXN0cmF0aW9uCnN0ZWFtcHVuayBtYWNoaW5lcnkKd2l0aCBidXJuaW5nIHJlZCBleWVzCmphbWVzIGd1cm5leSBhbmQgYW5kcmVhcyByb2NoYQpkaXN0YW50IGxlbnMKZ29sZGVuIGN1cnZlIHN0cnVjdHVyZQpnb3RoaWMgYmFyb3F1ZSBjaXRhZGVsCnJvY2sgY29sdW1ucwppbiBhIHNwaWt5IHRyaWJhbCBzdHlsZQpibHVlIC0gZ3JleSBnZWFyCnJvYm90IGljb24KKGN5YmVybmV0aWMpCnN0ZWFtcHVuayBiaW9hcm1vcgpleWUgcGF0Y2ggb24gb25lIGV5ZQpjaW5lbWF0aWMgc2hvdCBhciA5OjE2IC1uIDYgLWcKdmVyeSBpbnRyaWNhdGUgYnJhaWRlZCBoYWlyCnJveWFsIGJyb2NhZGUgZHJlc3MKZ2Vtc3RvbmVzIGFuZCBnb2xkCmxvbmcgc2lsdmVyIGhhaXIgd2l0aCBhIGZsb3dlcgpjdXJseSB3aGl0ZSBoYWlyCnNocmVrIGZhY2VkCmNsb2FrIHdpdGggaG9vZApmYW50YXN5IHRvd24gc2V0dGluZwpvdmVyc2l6ZWQgaG9vZGllCmxvbmcgdmlvbGV0IGhhaXIKc2V4eSBnaXJsIHdpdGggZGFyayBjb21wbGV4aW9uCmRyZXNzIG1hZGUgb2YgYm9uZXMKZXJpa2EgaWt1dGEKYXdhcmQgd2lubmluZyBwb3N0ZXIKdGltZSBkaXNwbGFjZW1lbnQgZGV2aWNlCnRyYXZlbCBpbiB0aW1lCndoaXRlIHN0b25lcwp3YWxraW5nIG92ZXIgYSBza2VsZXRvbgp2aXNpYmxlIGFuZCBkZXRhaWxlZCBmYWNlCmJpZyBzaGlueSBleWVzCvCfjoAg8J+nnyDwn42TIPCfp5oKZXh0cmFvcmRpbmFyaWx5IGRldGFpbGVkIHdvbWFuCmJlYXV0aWZ1bCBzdW5zZXQgbGlnaHRpbmcKdmVyeSBmYXNoaW9uYWJsZQpzbW9vdGggcGFpbnQKdXBzaWRlIC0gZG93bgp0d28gZGVlciB3ZWFyaW5nIHN1aXRzCmdhcmJhZ2UgcGxhc3RpYwp1bmRlcnNlYSBlbnZpcm9ubWVudApoZWF0IHdhdmVzCmdyYWlueS4gcG9vcmx5IHJhdGVkCndlYXJpbmcgdGVhbCBiZWFuaWUKd2VhcmluZyBhIG1hcmlqdWFuYSB0IC0gc2hpcnQKMmQgOGJpdHMgZ3JhcGhpYwp3aW5kb3dzIDkgOCBsb2dvCmltbWFjdWxhdGUgc2hhZGluZwp3aWRlIGJydXNoIHN0cm9rZXMKd2VhcnMgYSBlZ3lwdGlhbiBhbmtoIG5lY2tsYWNlCmFua2ggbmVja2xhY2UKZGFyayBicm93biBkdXN0ZXIKYnJpdGFpbgppbmRpZ25hbnQKcGxhbmV0cyBpbiB0aGUgc2tpZXMKYXJiZWl0c3JhdCBmdXIga3Vuc3QKa29kYWsgMiA1IDAKdGFrZW4gaW4gMSA5IDkgNwpwYXR0ZXJuZWQgc2NhcmYKYW5ub3RhdGVkCjcgMCBzIHZpYmUKYXJhYmljIQp0b3VyaXNtCmJlYXV0aWZ1bCByZWZsZXhpb25zCmRldGFpbGVkIHdvb2RlbiB0YWJsZQpzaXplCmdhbGUtZm9yY2Ugd2luZHMKc2hlIGlzIGhvbGRpbmcgYSBzbWFydHBob25lCmFic3RyYWN0IGhvcnJvcgpmYXVucwpjbG91ZCBvbWlub3VzIGRheSBiYWNrZ3JvdW5kCnN0eWxlIG9mIGd0YSB2IGFydHdvcmtzCnBpbGFyCm92ZXJncm93biB0cmVlcwpwaW5lIHRyZWVzIGluIHRoZSBiYWNrZ3JvdW5kCmdyZWVuIGJhY2tsaWdodCBsZWF2ZXMKc2FkIHdpemFyZAptYWdpYyBwb3J0YWwgaW4gdGhlIHNreQpkZXN0cm95ZWQgZm9yZXN0CmxvdyBwb2x5IGNoYXJhY3Rlcgpzb2NpZXR5IDYKbGl2ZSBjb2xvcnMKYnkgamVhbiBnaXJhdWQKd2F0ZXJjb2xvdXIgb24gcGFwZXIKZmluZSBsaW5lIGFydApydXNzIG1pbGwKd3JpdHRlbiBpbiBhIG5lYXQKdGhlIGNyZWF0b3Igb2YgZXZpbApleWVzIHdpZGUKc3Vua2VuIGZhY2UKZGVlcCB3cmlua2xlcyEKZnJvd24hCmRpc3Bvc2FibGUgY29sb3JlZCBmaWxtIGNhbWVyYQpyb29tIHdpdGggZWVyaWUgZmVlbGluZwpmdWxsIG9mIHRoaW5ncwpsYXllcmVkIGRldGFpbGVkCmNpbmVtYXRpYy4gd2hpdGUKaHVtcGJhY2sgd2hhbGUKYXN0cm9waHlzaWNzCmdsb3dpbiBleWUKZ3JlZW4gYW5kIGdvbGQgcGFsZXR0ZQptYXN0ZXIgb2lsIHBhaW50aW5nCndpdGggY29sb3JlZCBmbG93ZXJzCnJvbWFuIHZsYXNvdgpyZWZpbmVkIGVkaXRvcmlhbCBwaG90b2dyYXBoCmRpZmZ1c2Ugc3Vic3VyZmFjZSBzY2F0dGVyaW5nCm1pZC12aWV3CnlvdXRoZnVsIGNvbG91cnMKYXMgaWxsdXN0cmF0ZWQgaW4gdG9wIGNvdyBjb21pY3MKaW4gc3BhaW4KdHJlZSBpbiB0aGUgYmFja2dyb3VuZApjbHV0dGVyZWQgbWVkaXVtIHNob3QKamVlcCBpbiBiYWNrZ3JvdW5kCmRhcmsgcm9vdHMKYXV0dW1uIGZvbGlhZ2UgaW4gdGhlIGZvcmVncm91bmQK8J+OgCDwn6qTIPCfp5oKcGxhc3RpYyBzaGVlbgplcmdvbm9taWMKY29ubmVjdGVkCmpld2VscnkgbGlnaHRpbmcKcnVzaGluZyB3YXRlcgpzb2lsIGxhbmRzY2FwZQpib3RpY2VsbGkKdmlicmFudCBhdG1vc3BoZXJlCmV0aGVybmV0IGNhYmxlCndpdGggaG9vdmVzIGFuZCB3aW5ncwppbiBhIGNhbmR5IGxhbmQgc3R5bGUgaG91c2UKd2l0aCBzZXZlcmFsIGJyb2tlbiBzdGF0dWVzCmNvbG9yIGluawpvbiB0aGUgb2NlYW4KdGFsbCBkb29yCmRhcmsgY3J5c3RhbCBhbmQgYmF6YWFyCnB1cnBsZSBhbmQgZ3JlZW4gY29sb3JzCmR1bmdlb25zIGFuZCBkcmFnb25zIHN0eWxlCm9yYW5nZSByaWJib25zCmJpb2x1bWluZXNjZW50IGF0bW9zcGhlcmUKaW4gYSBnbGFkaWF0b3JzIGFyZW5hIGxhbmRzY2FwZQpjcnlpbmcgYW5kIHJlYWNoaW5nIHdpdGggaGVyIGFybQpwaGFyYWgKaW4gYSBwbGFuZXQgZml0bmVzcwptYWdpY2FsIGNvbmNlcHQgYXJ0CnNoZSBpcyBsb29raW5nIGF0IHVzCnN1cmZhY2Ugc2NhdHRlcmluZwpob3VzZSB3aW5kb3dzCmxlYXRoZXIgY291Y2hlcwpsYXJnZSBnbG9iZQphcyBzaGUgbG9va3MgdXAgYXQgdGhlIGNlaWxpbmcKZHJlYW1pbmcgYWJvdXQgYSBmYXJhd2F5IHBsYWNlCmJsYWNrIGJpa2luaQpkcmVzc2VkIGluIHdoaXRlIHJvYmVzCmxvbmcgZmxvd2luZyBoYWlyIHVuZGVyd2F0ZXIKaW1hZ2luYXRpb24gY29zbWljIGRyZWFtCmZseWluZyBhcm91bmQgdGhlIGJpcmQKaGFsZi13b21hbiBoYWxmLWJ1dHRlcmZseQphcyB0aG91Z2ggc2hlIGlzIGRhbmNpbmcKaGFsZiBjdXQKcGlyYXRlIHdlYXBvbnMKY29sb3JmdWwgYmFuZGFuYQpvd2wgbWFzawpzaGUgd2VhciByZWQgZXllZCBnYXNtYXNrCm1hZGUgb2Ygd2lsZGZsb3dlcnMKdGhlIGhhaXIgcmVhY2hlcyB0aGUgZ3JvdW5kCnBvc2luZyBpbiBhIGJlZHJvb20Kd2VhcmluZyBhbWF6aW5nIGNsb3RoZXMKd2VhcmluZyBhIGN1dGUgd2hpdGUgZHJlc3MKd2VhcmluZyBhIGRyZXNzIG1hZGUgb2Ygc3RhcnMKcHN5dHJhbmNlIGFuZCBnaWdlcgpkZWFkIG5hdHVyZSBzdHVkeQptaWRkbGUgb2YgdGhlIG5pZ2h0CmhpZ2ggZGV0YWlsIG9jdGFuZSByZW5kZXIKZG9jdW1lbnRhdGlvbgpjb2xvcnMgb2YgdHJvbiBsZWdhY3kKbWFkZSBvZiBjb2xvcmZ1bCBkcmllZCBmbG93ZXJzCmRyYW1hdGljIGJsdWUgbGlnaHRpbmcKcmlkZXMgYSBiaWtlCndvb2R5IGFsbGVuCnRvcm4gcGFwZXIgY29sbGFnZQpncmFuZGlvc2UgcG9ydHJhaXQKamVyZW15IG1hbm4gYW5kIGNsYXVkZSBtb25ldApyZW5haXNzYW5jZSBkaWdpdGFsIHBhaW50aW5nCnByaXNvbmVyCmdhcmRlbiBiZWhpbmQgdGhlIGdsYXNzZXMKcmlkaW5nIG9uIHRoZSBtb3BlZCBzY29vdGVyCmNoZXJ1YmljCm91dGRvb3JzIGF0IG5pZ2h0CmJlc3QgYXJ0aXN0CmxhcmdlIHBhdGgKdGhlIHBsYWNlIGlzIGp1c3QgcmVhbGx5IHNtYWxsCmVtZXJnaW5nIGZyb20gYSBsYW1wCmRyZWFtd29ya3MgYW5kIG1hcnZlbApzdGFycyBhbmQgZ2FsYXhpZXMgdmlzaWJsZQpsb25nIHRvcm4gcmVkIGNhcGUKZWdncGxhbnQKZWFycyBzaGluZSB0aHJvdWdoIHRoZSBsaWdodApkcmVzcyBpbiB0aGUgc3R5bGUgb2Ygcm9jb2NvCmRldXMgZXggaHVtYW4gcmV2b2x1dGlvbgpiZWF1dGlmdWwgbGFyZ2UgZmxvd2VycwpkcmFtYXRpYyBzbW9rZSBldmVyeXdoZXJlCmRyYW1hdGljIGJydXNoIHN0cm9rZXMKYW5ncnkgOCBrCnNjcmV3ZHJpdmVyCmNsb3VkLWxpa2Ugd2hpdGUgaGFpcgppbiBwaG9lbml4IHdyaWdodCBhY2UgYXR0b3JuZXkKd2hpdGUgY3VtbWVyYnVuZApjb3p5IGRhcmsgMTkyMHMgc3BlYWtlYXN5IGJhcgpsYWNleQphcnRnZXJtIGFuZCB3aWxsaWFtIGJvdWd1ZXJlYXUKc21pbGluZyBsYXVnaGluZwphbGJlcnQgYmllcnN0YWR0IGFuZCBhcnRnZXJtCmJyb2tlbiBoZWFydGVkCmR1c3R5IHNwYWNlIHN1aXQKdmlld3BvaW50IGlzIHRvIGZyb250IGFuZCBsZWZ0CnN0eWxlIG9mIHN0ZXBoZW4gam9uZXMKbXN4b3R0bwptb3N0bHkgd29vZApidXQgaXMgbW9zdGx5IHdvb2QKYSByb3VuZCBtaW5pbWFsaXN0IGJlaGluZAphYXJkbWFuIGNoYXJhY3RlciBkZXNpZ24Kc3R5bGUgb2YgbWljaGFlbCBzY2h3YW4Kd2F0ZXJjb2xvciBwYWludGluZyB1bmRlcndhdGVyCm1hc3MtaGFsbHVjaW5hdGlvbiBmZXZlci1kcmVhbQpleHRyZW1lIGZpc2hleWUgbGVucwo0IGsgfCA4IGsKYWJhbmRvbmVkIGNhc3RsZQp2aW50YWdlIGluZnJhcmVkIHBob3RvZ3JhcGgKYWJhbmRvbmVkIGNpcmN1cwphbmFsb2dpYyBwaG90b2dyYXBoCmFydCAtIHN0YXRpb24KMiAwIDEgMCBwaG90bwphYmFuZG9uZWQgY290dGFnZQpkZXN0cm95ZWQgbW9kZXJuIGJ1aWxkaW5ncwphYmFuZG9uZWQgZ3JhdmV5YXJkCmFiYW5kb25lZCBob3VzZSBpbnRlcmlvcgpsYW5nb2xpZXJzCmZhZGVkIG91dCBjb2xvcnMKaGlnaGx5IGRldGFpbGVkIG11dGVkIGNvbG9ycwpmaW5lIGFydCBza2V0Y2gKZGVzdHJveWVkIGh1bWFuIHN0cnVjdHVyZXMKZmxvYXRzIHVuZGVyd2F0ZXIgaW4gdGhlIHNlYQp0cmFpbiBpbiBhIHR1bm5lbAptZXRhbCBzaHV0dGVyCm9sZCBkaXN0b3J0ZWQgY2FtY29yZGVyIHZpZGVvCnNub3dzdG9ybSA6OjUKcGxheXN0YXRpb24gMSBnYW1lCjE5MTAgcG9sYXJvaWQgcGhvdG8Kb2xkIGNoYWlycwpjaGVycnkgYmxvc3NvbXMgaW4gdGhlIHdpbmQKYWJhbmRvbmVkIG9uIG1hcnMKYWJhbmRvbmVkIG92ZXJncm93biBncmF2ZXlhcmQKYWJhbmRvbmVkIHBsYWNlcwpicm9rZW4gd2hlZWxjaGFpcgpwaG90byBvZiBhIHBhaW50aW5nCmluc2FuZWx5IG15c3RpY2FsCnllbGxvdyBhbmQgb2xpdmUgY29sb3Igc2NoZW1lCmJsdWUgY29sb3JzIHdpdGggcmVkIGFjY2VudHMKZ2hvc3QgdG93bgpmcHMgdmlldwpkdXN0eSBwbGFjZQphYmR1bG92CmluIGljb24gc3R5bGUKaGVtYW4gc3R5bGUKc3RpbGwgZnJvbSB0aGUgdGhlIHNvcHJhbm9zCmFic2VuY2UgbWFrZXMgaGVhcnQgZ3JvdyBmb25kZXIKc2VhIGxpbmUKcmVkZXJpbmcKcGFyYWRpc2UgaW4gdGhlIGJhY2tncm91bmQKaW4gc3R5bGUgb2YgcGF1bCBnYXVndWluCmluIHN0eWxlIG9mIGFuZHkgd2FyaG9sCmluIHN0eWxlIG9mIGphY2tzb24gcG9sbG9jawppbiBzdHlsZSBvZiBuaWtvIHBpcm9zbWFuaQpvaWwgb24gY2FudmFzIG9uIGdlb21ldHJpYyByb2NrCnRlc3NlbGxhdGluZyBwYXR0ZXJucwphYnN0cmFjdCBibGFjayBob2xlIGluIHNwYWNlCm1vZHVsYXIgb3JpZ2FtaQpoeXBlcnJlYWxpc3RpYyBzcGFycm93cwpjb3VwbGUgb24gYmVkCmdyZWVuIHNoYWRlcwphYnN0cmFjdCBwZW9wbGUgaW4gZnJhbWUKdmludGFnZSB2aWJlCmJpbHF1aXMgZXZlbHkKdmVyeSB0aGljayBhbmQgd2VyIG9pbCBwYWludAp0aGUgdW5pdmVyc2Ugb24gdGhlIGJhY2tncm91bmQKY2FzZXkgYmF1Z2ggYW5kIGphbWVzIGplYW4KYWJzdHJhY3QgZnJhY3RhbCBhdXRvbWF0b24KMyBkIHJlZmxlY3Rpb25zCmFic3RyYWN0IGdlb21ldHJpYyBhcnQKY3J5c3RhbCBmb3JtYXRpb24Kc2lsbwphYnN0cmFjdCBnZW9tZXRyaWMgc2N1bHB0dXJlCnB1bmsgZmFuemluZSBjdXQgb3V0cwpyYW5keSBiaXNob3AKYWJzdHJhY3QgaG9sZXNjYXBlCmhpZ2ggYW5nbGUgY2FtZXJhCnNwcmF5cwpuZWJ1bGFlIGNvbG9ycwpyZWN0YW5ndWxhcgpzbGFtIGRhbmNpbmcgY3JlYXR1cmVzCmNpcmNsZSBwaXQKYWJzdHJhY3QgbmF0dXJlIGxhbmRzY2FwZQpzaW1pbGFyIGFlc3RoZXRpY3MgdG8gcGljYXNzbwpmZWF0dXJlZCBvbiA5IDkgZGVzaWducwptYXN0ZXJmdWwgYXJ0CmFjcnljbGljcwpkeW5hbWljIHNwbGFzaGVzCm1vcmUgdGV4dHVyZXMKbW9yZSByZWxpZWYgZWZmZWN0cwphYnN0cmFjdCBwYWludGluZyBvZiBtYW4gb24gZmlyZQp0aGUgbXVuc3RlciBpbiB0aGUgYmFja2dyb3VuZAppbmZlc3RlZCB3aXRoIHBpdGNoIGdyZWVuCmdyYXNzIC0gbGlrZQpkZWVwIHJlZCByb290cwo2IDAgcyBhbmltZSBhcnQKaW4gc3R5bGUgb2YgaGVucmkgcm91c3NlYXUKaW4gc3R5bGUgb2YgcmVuZSBtYWdyaXR0ZQpib2xkIGxpZ2h0aG91c2UgaW4gaG9yaXpvbgp3ZWF2ZQpnb3VyZApzd2lybGluZyBmbHVpZApmcmFjdGFscyBzd2lybGluZyBvdXR3YXJkCmFnZWQgYW5kIHdlYXRoZXJlZAphYnVuZGFudCBmcnVpdGlvbiBzZWVkcwphY2FkZW1pYQphY2NlcHRhbmNlCnN1cnJlbmRlcgp0aHJvd2luZyBjYXJkcyBpbiB0aGUgYWlyCmFjY3VyYXRlIHBvcnRyYWl0IG9mIGEgYm9iIGR5bGFuCnVucmVhbCBlbmdpbmUgcmVuZGVyIHN0eWxlCmFjZWNvbWJhdApwaG90b3JlYQpzdW5saXQgbGFuZHNjYXBlCnR1cm5lci4gc3ltbWV0cmljYWwKYWNobHVvcGhvYmlhCmFjaWQgZ3JhcGhpY3MKYWNpZCBncmFwaGl4CjNkIGhpZ2ggb2N0YW5lIHJlbmRlcgp3aXRjaCAtIGRvY3RvcgphbmltYWxzIGNyZWVweSBldmVyeXdoZXJlCmFjcm9iYXQKY3Jhc2hjYXJ0CmNsYXNzaWNhbCBtYXJibGUgc2N1bHB0dXJlCmphciBvZiBob25leQpoYXBweSBpdGFsaWFuIGJlYWNoIHNjZW5lCmdpZ2FudGljIGxhbmRzY2FwZSEKYWNyeWxpYyBwYWxldHRlCmh5cGVyIHJlYWxpc20hIQo4IGsgcmVzb2x1dGlvbiEhCm5hdHVyZSB1dG9waWEKYWN0aW9uIGJyb25zb24KYWN0aW9uIGZpZ2h0CmxvdmVjcmFmdGlhbiBob3Jyb3JzCmNvaGVzaXZlIGNvbXBvc2l0aW9uCjIgZCBkaWdpdGFsCnN0YXIgd2FycyBzcGFjZSBiYXR0bGUKZ2xvd2luZyBuZW9uIGJvdwphY3Rpb24gcG9zZSByZWZlcmVuY2UKd2VhcmluZyBzY3VscHRlZCB0ZXh0dXJlZCBhcm1vdXIKZmVtYWxlIGN5YmVycHVuawplbnRvdXJhZ2UKZXF1ZXN0cmlhbiBwaG90b2dyYXBoeQphY3Rpb24gc2hvdHMKaGUgaGFzIGdvYXQgbWFuIGxlZ3MKY2xvdmVuIGZlZXQgYW5kIGhvcm5zCm92ZXJsYXkKYWN1cHVuY3R1cmUgdHJlYXRtZW50CnByb2Zlc3Npb25hbCBhZHZlcnRpc2VtZW50CmRpZ2l0YWwgYmFubmVyCmRuYSBzdHJhbmRzCmZyZXNoIGJhc2lsCmFkanVzdG1lbnQgb2YgdGVtcG9yYWwgbWF0cml4CnNoaW55IGNpdHkgaW4gdGhlIGRpc3RhbmNlCndlYXJpbmcgd2Fpc3Rjb2F0CnRveSBwYWNrYWdlCnBsYXlpbmcgd2l0aCBhIHNtYWxsIGZpcmV0cnVjawpzaXR0aW5nIGluIGhlciByb29tCndpZGUgYW5nbGUgZmFudGFzeSBhcnQKYWRvcm5tZW50CmJlYXV0aWZpZXIKY2FwYXJpc29uCmVtYmVsbGlzaGVyCmVtYmVsbGlzaG1lbnQKZnJpbGwKZ2FybmlzaG1lbnQKZ2Fybml0dXJlCnNldG9mZgp0cmltCmJlbnQgb3ZlciBwb3N0dXJlCnRyYWRpdGlvbmFsIGNoaW5lc2UgY2xvdGhpbmcKb25lIGV5ZSBpcyByZWFkCnRlcm1pbmF0b3IgMiBtb3ZpZQpzY2VuZSB3aXRoIG1hY2hpbmUgZ3VuCnZ1bGNhb24gbWFjaGluZSBndW4KYWRyaWVuIGJyb2R5Cm1lc3N5IG1hbmJ1bgpsb25nIC0gaGFpcmVkIGNoaWh1YWh1YQpwb21lcmFuaWFuIG1peApsYXJnZSBzdGFyIGNyeXN0YWxzCml0ZXJhdGlvbnMgPSA1IDAgMCAwCndoaXRlIHN0b25lIGFyY2hlcwpzdHVkaW8gb2N0YW5lIHJlbmRlcgpsdXNoIGNoaWMgZ2FyZGVuCnZlcnkgbG9uZyB3YXZ5IGZpZXJ5IHJlZCBoYWlyCmZpZXJ5IHJlZCB3YXRlcnkgZXllcwpnbGl0Y2hlZCBiYWNrZ3JvdW5kCmx1Y3kgdGhlIGdvZCBvZiB0aW1lCjU2awpmL3N0b3AKZ3Jhc3MgYW5kIHdhdGVyCm1ha290byBzaGlua2FpLiDigJRoIDIxNjAKYWR2YW5jZWQgZGlnaXRhbCBwaG90b2dyYXBoCnRvcm4hISBjbG90aGluZwppbnNpZGUgdGhlIHdpc2hpbmcgd2VsbCBjYXZlcm4KcGlsZXMgb2YgZ29sZCBjb2lucwpnb2xkIHJlZnJhY3Rpb25zIG9mZiB3YXRlcgpzbGljayB3ZXQgd2FsbHMKc21hbGwgZmxvd2luZyBzdHJlYW0gZnJvbSB3YWxsCm1vdmllIHBvc3RlciBwYWludGluZwphZHZlcnQgbG9nbwpza2F0ZXBhcmsgaW4gZmxhbWVzCmRyb3BsZXRzIGZsb3cgZG93biB0aGUgYm90dGxlCmh5cGVycmVhbGlzdGljIGxpZ2h0aW5nIHN0dWRpbwpyYW5kb20gc2NoZW1lIGNvbG9yCjggayBoaWdoIGRldGFpbHMKYWVyaWFsIHBob3RvZ3JhcGggb2Ygc2t5c2NyYXBlcgp0aGUgYnVpbGRpbmcgaXMgYSBza3lzY3JhcGVyCmNvb2wgZGVzZXJ0CnN0ZWFtIHRyYWlucwphZXJpYWwgdmlldyBvZiBhIGN5YmVycHVuayBjaXR5CnJ1bmljCjMgbWV0ZXJzCnRyb3BpY2FsIHZpYmUKdHgKbWluaSBhbXBoaXRoZWF0cmUKcnVzdHkgY2FycyEhCm9wZW4gcGxhbgp0cmF2ZWxlcnMgd2Fsa2luZyB0aGUgc3RyZWV0cwooKChjb2xvcmZ1bCBjbG91ZHMpKSkKdmVyeSBkZXNpZ24KZ29mbCBjb3Vyc2UgYW5kIHN3aW1taW5nCmx1eHVyeSBlcXVpcG1lbnQKd2l0aCBvbWlub3VzIHNoYWRvd3MKM2QgY2dpIHJlbmRlcgpjaW5lc3RpbGwgNCAwIDAgdCBmaWxtCmFlcm9tb3JwaApsYXJyeSBlbG1vcmUgOiAwLiA1CmFlc3RoZXRpYyBzaWFtZXNlIGNhdApicm9rZW4gdGhyb25lCmNvbGQgbW9vZApnbG9vbXkvd2V0IGF0bW9zcGhlcmUKYmVhdXRpZnVsIGNvbG9yZnVsIGxpZ2h0cwpkZXRhaWxlZCEhISEhISEKdmlvbGV0IHNraW4KZSAtIGdpcmwKZXhwbG9kZWQgdmlldyEhCnJlYXBlciBvZiBuaWdodCEhISEKaGVsaWNvcHRlcnMgZmlyaW5nCmFmcmljYW4gYWFyb24gcGF1bAphY3J5bGljIG1hc3RlcnBpZWNlCnJheSBoYXJyeWhhdXNlbgpvbHltcHVzIHBsYXRmb3JtCndlc3QgYWZyaWNhIG1hc2sgcGF0dGVybnMgc3R5bGUKcHJvcG9ydGlvbmF0ZSBmYWNpYWwgZGV0YWlscwphZnJpY2FuIGZlbWFsZSBhbmRyb2lkCmFmcmljYW4gZnJhY3RhbHMKYWRpbmtyYSBzeW1ib2xzCm1hbmRlbGJ1bGJlcjNkCmFmcmljYW4gamVzc2UgcGlua21hbiBwb3J0cmFpdApldGhlcmVhbCBhbmltZQpyZWQgYWZybyBkcmVhZGxvY2tzIG9uIGZpcmUKcmVkIGRlbW9uIGFybW9yCmJlYXV0aWZ1bCBtaWRyaWZmCmFmcmljYW4gc3RlYW1wdW5rIGFsY2hlbWlzdApjb2xvdXJmdWwganVuZ2xlCmFmb2Z1dHVyaXNtCmZyYWN0YWwhCmNvbXB1dGVycyBhbmQgaG9sb2dyYW1zCndoaXRlIGFuZCBibGFjayBjb2xvciBwYWxldHRlCnBvbGl0aWNhbCBwcm9wYWdhbmRhCmFmcm8gbWFkZSBvZiBmbG93ZXJzCmFmcm9mdXR1cmlzbSBhbmltZQpnbGl0dGVyIGJhY2tncm91bmQKcmV0cm8gY29taWMgYXJ0IHN0eWxlCnJldm9sdXRpb25hcnkgYXJ0IHN0eWxlCmFmdGVyIGEgcmlvdAphZnRlciBhbGwKc2hhbWJhbGEKYWdlIG9mIGVtcGlyZXMgaWkKb24gaXNsYW5kCmFnZWQgc2hhZ2d5IGV4IG1pbGl0YXJ5IHNvbGRpZXIKYWdlZCB0dXJ0bGUKamFtYWwgY2FtcGJlbGwKYW5jaWVudCB5ZXQgZnV0dXJpc3RpYwpuYXRpb24gZ2VvZ3JhcGhpYyBzdHlsZQptdXNjdWxhciEgY3Jvc3NmaXQKdGlnaHQgd3JpbmtsZWQgY2xvYXRoCmluZmluaXRlIHF1YW50dW0gcG9ydGFsCmluIGEgcnVpbmVkIGNpdHlzY2FwZQphaCB5ZXMKcmlvdCBlbnRlcnRhaW5tZW50IHJlYWxpc3RpYwpzdGFyIHdhcnMgY2xvbmUgd2Fycwp0b21hdG8gc2F1Y2UKc2xpZ2h0bHkgdHVybmVkIHRvIHRoZSByaWdodAphcm1zIGFraW1ibyBwb3NlCmFpciBhbmQgdG9ybmFkbyB0aGVtZQpmdXR1cmUgdGVjaHdlYXIKZHJhbWF0aWMgcHJvZHVjdCBzaG90CnBldGVyIGxsb3lkCmFpcmNyYWZ0IGNhcnJpZXIKdXNzIG5pbWl0egpjaXR5IGluIGJhY2tyb3VuZApzdGVhbXB1bmsuIGludHJpY2F0ZQphayAtIDQgNwpob2xkaW5nIGEgc2FtdXJhaSBzd29yZApkYXJrIHVuZGVyZ3JvdW5kCmdob3N0IG5lb24KYWtpcmEgY2dpIG1vdmllIHN0aWxscwpzYW50aWFnbyBjYWxhdHJhdmEKbWljaGVsaW4gbWFuIGZhbWlseSBwb3J0cmFpdAphbGFkZGluCmdpYW50IGJhbmFuYXMgbmF0dXJhbCBkaXNhc3RlcgphYm91dAphbGJlcnQgd2Vza2VyIGFuZCBjaHJpcyByZWRmaWVsZAphbGJpbm8gZHdhcmYKdmFtcGlyZSB3aGl0ZSBmb3gKc3RhbmRpbmcgZ3JhY2VmdWxseSB1cG9uIGEgbG90dXMKYWxidW0gYXJ0IGZvciBhIHRyYW5jZSBkagp1a3VsZWxlCnRleHQgOiByb2Jvcm9jawp0aGUgYmFuZCBuYW1lIGlzIHJvYm9yb2NrCnRlY2hubyBtdXNpYwplZ29yIGxldG92CmdvbmcKcGFpbiBhbmQgdG9ybWVudAphbGJ1bSBjb3ZlciEKbWFzdGVyIG9mIHB1cHBldHMKZmx5aW5nIG92ZXIgZGFyayBnb3RoYW0KcGVuIGFuZCBpbmsgZHJhd2luZ3MKYWxjaGVteSBjb25jZXB0CmhpZ2ggY29udHJhc3QgaWxsdXN0cmF0aW9uCmF0dHJhY3RpdmUgcGhvdG8KYWxlZ3JpYQpyYXRpbwpseWluZyBvbiBsaWx5IHBhZAphbGV4YSBncmFjZQpyZWFsaXN0aWMgcG9ydHJhaXQgcGhvdG9ncmFwaHkKdGh1bmRlcnN0cmlrZQpjaHVyY2ggaW4gdGhlIGJhY2tncm91bmQKZ2hvc3RseSBnaG9zdApyYWRpb2FjdGl2ZSB3YXN0ZWxhbmQKaGVsbWV0IHJlbW92ZWQKYWxpY2UgY29vcGVyIGFzIGEgZ29hdApyZWQgZG9vciBibG9uZGUKYWxpY2UgaW4gd29uZGVybGFuZCAzIGQKam9obiB0ZW5uaWVsCmNhcnJhdmFnZ2lvbgptYXlhbiBnb2QKY29zbWljIGVuZXJneQphbGljZSdzIHNpc3RlcgpkaXNuZXkgaW5zcGlyZWQgbGFuZHNjYXBlCmFuY2llbnQgYWxpZW4gdG9vbHMgYW5kIGhvdXNlcwphbGllbiByZWxpYwpteXN0ZXJpb3VzIGdsb3cKZXZlbmluZyBzdG9ybQpzdG9ybSBpbiB0aGUgZXZlbmluZwpkZWJyaXMgc3ByZWFkCmNsZWFyIHNreSBhYm92ZQpjYWxtIG9jZWFuIGxhbmRzY2FwZQptYXJrIHdhaWQKYWxpZW4gY2l0eQppdCBpcyBhIHBsYWNlIG9mIHdvcnNoaXAKZXllcyBncm93aW5nIG9uIGNyZWF0dXJlCnZlcnkgcmVhbGlzdGljIGxvb2tpbmcKaW5mb3JtYXRpb24KcHJlc2lkZW50IGRvbmFsZCB0cnVtcAppbmZvcm1hdGl2ZSBndWlkZQphbGllbiBmb3Jlc3QKcGF0Y2h3b3JrLXN0cmVhayBzdHlsZQpzdHlsZSBvZiBqaW0gYnVybnMKcGVvcGxlIGRpZG4ndCBub3RpY2UKZGFyayBibHVlIGF0bW9zcGhlcmUKcnBnIGJhY2tncm91bmQKYWxpZW4gZm9saWFnZSBwbGFudHMKcmV0cm8gcHVscCBhcnQKcnVpbmVkIGFsaWVuIHN0cnVjdHVyZXMKYWxpZW4gbWFuIHdpdGggYWxpZW4gd29tYW4KZHJhd24gaW4gbWljcm9zb2Z0IHBhaW50CmVybnN0IGhhZWtlbApwaG90b3JyZWFsaXN0aWMgY29uY2VwdCBhcnQKYWxpZW4gb3dsCmx1c2ggYW5kIGNvbG9yZnVsIGVjbGlwc2UKZXh0cmF0ZXJyZXN0cmlhbCBwbGFudHMgbm92ZWwKYWxpZW4gcGxhbnQKYWxpZW4gcG9ydHJhaXQKd2hpdGUgY3Jvd24Kc3VianVnYXRpb24gb2YgaHVtYW5zCmNvbG9yIGlsbHVzdHJhdGlvbgphbGllbiBxdWVlbgp2ZXJ5IGdsb3dpbmcgZXllcwplcGljIG1vb2QKcGF0Y2hlcyBvZiBncmVlbiBmaWVsZHMKaW4gYSBmcmFtZQpjb2xvcmVkIHBhcGVyIGNvbGxhZ2UKc3R5bGUgb2YgYWxlbmEgYWVuYW1pCnN0eWxlIG9mIGtlbGx5IGZyZWFzCnJlc2VhcmNoIGNlbnRlcgpnbGFzcyBvYmVsaXNrcyEhCmxhcmdlIHNjYWxlIHNjZW5lCmF0IGEgNSAwIHMgZGluZXIKc3B1bmt5CmFsaWVucyBhcnJpdmluZyBkdW5lCmVhdGluZyBhbGllbiBmb29kCmFsaWVucyB2cyBwcmVkYXRvcgrwn46o8J+WjApsb29raW5nIGZ1cmlvdXMKYWxpc29uIGJyaWUgYXMgYmxhY2sgd2lkb3cKZnVubnkgcHJvZmVzc2lvbmFsIHBob3RvCmNvbWljIGJvb2sgYmxhY2sgbGluZXMKYWxsIHJlbGlnaW9ucyBjb21iaW5lZAphbGwgcm9ib3RzIGFyZSBoYWxmIGh1bWFuCmFsbGVnb3JpY2FsIHJlYWxpc20KYWxsZWdvcnkgb2Ygd2ludGVyCmFzIDMgZmlndXJlcwpwZWFjZWZ1bCBldmVuaW5nIGhhcmJvcgp2ZXJ5IGRldGFpbGVkIGZhY2UgYW5kIGVhcnMKdGFuIHNraW4pCmFuYXRvbWljYWxseSBjb3JyZWN0IGFuZHJvaWQKc3VsdHJ5IGRpZ2l0YWwgcGFpbnRpbmcKcG9udGUgMiA1IGRlIGFicmlsCmFscGhhIHdvbGYgaGVhZAphbHBob25zZSBtdWNoYSBtZWV0IGJla3NpbnNraQpwb3J0cmFpdCBvZiBsb2xpdGEKbWlzdHJlc3MKZ2VtbWEgY2hhbiBnaXJsIHBvcnRyYWl0Cm1hZGlzb24gYmVlciBnaXJsIHBvcnRyYWl0CnNvdmlldCBzdHlsZSBjeWJlcnB1bmsKYXJjaGl0ZWN0IGxlYmJldXMgd29vZHMKbWF0ZXJpYWxzIHdoaXRlIHN0b25lCnVsdHJhIGRldGFpbGVkIHN5bWJvbGlzbQphbHRlcm5hdGl2ZSByZWFsaXR5CnBpY2tpbmcgdXAgYSBjYW4gYmVhbnMKYW0gYSBqZWFuIGdpcmF1ZApyYWlueSBzdG9ybQpkbXQgdmlzdWFscwpjb2xvciBidXJuCmFtYXppbmcgYW1ldGh5c3QgZ2VvZGUKdGhlIG1pZGRsZSBvZiBhIHZhbGxleQpyYWRpb2FjdGl2ZSBzd2FtcApodWdlIGRldGFpbHMKbWFnbmlmaWNlbmNlCnJpY2ggZW52aXJvbm1lbnQKc3Bpcml0ZWQgd2F0ZXIgcGxhbnRzCmFtYXppbmcgcG9ydHJhaXQgb2YgdmllZ28KbG93LXBvbHkgZGlnaXRhbCBhcnQKbG9vc2VseSBjcm9zcyBoYXRjaGVkCmFzIGFuIGFudGhyb3BvbW9ycGhpYyB0dXJ0bGUKd2l0aCBtb3JiaWQgdGhvdWdodHMKYW1hemluZ2x5IGRldGFpbGVkIHNlbWlyZWFsaXNtCmFtYXpvbiBmb3Jlc3QgYnVybmluZwphbWF6b24gcXVlZW4KaW4gYSBtZXRhbCBmb3Jlc3QKc2hlIGlzIGEgZ291cmQKZXllIHBpZXJjaW5ncwpydWxlIGJyaXRhbm5pYQphbWVyaWNhbiBhc3Ryb25hdXQgaW4gdGhlIGZvcmVzdAphbWVyaWNhbiBjaXR5CmZvdXIgc3RvcmllcyBoaWdoCmJsdWUgZ2xvdmVzCm1vdmllIGxldmVsIHJlYWxpc20KY2dzb2NpZXR5IGNvbmNlcHQgYXJ0CmhpZ2hsZXkgZGV0YWlsZWQKa29kYWsgZ29sZCA0IDAgMAphbWVyaWNhbiBzdWJ1cmIKc2hvdCBvZiBhIHNwYWNlIHN0YXRpb24gYXQgbmlnaHQKc3RlcHBlIGxhbmRzY2FwZQpwb2xhcm9pZCBwaG90b2dyYXBoIQptcyBkb3MKdGVhcmF3YXkKYW1vZ3VzIHBob3RvIC0gcmVhbGlzdGljCmFuaW1hdGlvbiBzdGlsbCBzY3JlZW5jYXAKZml2ZSBuaWdodHMgYXQgZnJlZGR54oCZcwppbXBvc3RlcgphbW9uZyB1cyB2aWRlbyBnYW1lCmhkIHBob3RvZ3JhcGh5IDRrCnZvbGNhbmljIHNrZWxldG9uCnB1cnBsZS4gYW1iaWVudCBsaWdodG5pbmcKYW11c2VtZW50IHBhcmsgaW50ZXJpb3IgZGVzaWduCmFteSBhZGFtcyBhcyBtb3J0aWNpYSBhZGRhbXMKZmxvYXQKbWlkIC0gYWN0aW9uCnN0eWxlIG9mIGEgY2xpbnQgZWFzdHdvb2QgbW92aWUKcmVzaGlmdCAzIGQKYmxhY2sgc3VsbGVuIGV5ZXMKZ2hvc3RzIHRoZW1lCnNwaWt5IHNob3J0IGhhaXIKb3JuYXRlIGZsb3dlcnMKd2F0ZXJmcm9udCBob3VzZXMKaGVhdnkgcmFpbmluZwphbiBhYmFuZG9uZGVkIGNvdXJ0eWFyZApnaWFudCByb2JvdCBtZWNoCmR1c3R5IGVudmlyb25tZW50CmNyeXN0YWwgcmVmcmFjdGlvbiBvZiBsaWdodAphbiBhYmFuZG9uZWQgZHlzdG9waWFuIGNpdHkKb2xkIHJldHJvIG11c2V1bSBleGhpYml0aW9uCnVuc2V0dGxpbmcgaW1hZ2UKMSA2IG1tIHdpZGVhbmdsZSBsZW5zCmFuIGFiYW5kb25lZCBvbGQKaW4gZnJvbnQgb2YgYSBibGFjayBiYWNrZ3JvdW5kCmJlYWNod29vZCB0cmVlaG91c2UKd2l0aCBjb2xvcmZ1bCBmbG93ZXJzIGFuZCBwbGFudHMKZmV3IG92ZXJncm93biBwbGFudHMKYmxhY2sgYW5kIHdoaXRlIHN0eWxlCmRpc2Nvbm5lY3RlZCBzaGFwZXMKZ3JlZW4gZXllcy4gMiA0IG1tCm1vb2R5IHBhaW50aW5nCnJhaW5ib3cgdHJhaWwKZmVhdHVyaW5nIG1hcmJsZSBmb3VudGFpbnMKaGFuZ2luZyB0aWZmYW55IGNoYW5kZWxpZXJzCmZlYXR1cmluZyBmbG93aW5nIGZvdW50YWlucwpjaGVlc2VzCmRpc2NvcmQgcHJvZmlsZSBwaWN0dXJlCnR3aXRjaCBlbW90ZQpzcGlkZXJ3ZWIgbGFuZHNjYXBlCnNvbWUgcGluawppbiB0aGUgc3R5bGVzIG9mIGpvYW4gbWlybwpha2FuZSBvd2FyaSBkYW5nYW5yb25wYQphdGhsZXRpYyBmYXNoaW9uIHBob3RvZ3JhcGh5CnNwYXJyaW5nCnRob21hcyBkdWJvaXMKZnVubnkgYW5kIHdlaXJkCmtpZCBkcmF3aW5nCm9uIGhpcyBoaW5kIGxlZ3MKZ3JlYXQgbGV2ZWwgb2YgZGV0YWlsCnN5bnRod2F2ZSBjb2xvcnMhIQpkZWF0aCB0YXJvdAp3YXRlciBmb2cKcHlyYW1pZCBwb3J0YWwKaW4gYSBzdGVhbXB1bmsgbGFib3JhdG9yeQphbiBhZnJpY2FuIHdpbGQgZG9nIHNpdHRpbmcgdXAhCmx5aW5nIGEgdGhyb25lIGluIGEgZmFudGFzeSBsYW5kCmFuIGFsY2hlbWlzdCBnbm9tZQptaWNyb24gcGVuCmFuIGFsaWVuIGF1dG9wc3kKbWFza2VkIGRvY3RvcnMKc2hpbnkgYW5kIG1ldGFsbGljCmluIG92YWwgb2ZmaWNlCmFsaWVuIGNvbG9yZnVsIGdyZWVuZXJ5CmFuIGFsaWVuIG11c2hyb29tIHdpdGggdGVudGFjbGVzCmFuIGFsaWVuIG11c2ljaWFuIGxvc3QgaW4gc3BhY2UKYmx1ZSBza3kgYWJvdmUKZmxvYXRpbmcgaW4gYSBjb3NtaWMgbmVidWxhCmFuIGFsaWVuLiBhbmdsZWQgamF3Cm9tbml2ZXJvdXMgbGF5ZXJlZCB0ZWV0aApzbW9vdGggYmlvbHVtaW5lc2NlbnQgc2tpbgptaWQgbGVuZ3RoIHBvcnRyYWl0IHBob3RvZ3JhcGgKOCBrIC0gaCA3IDYgOAphbiBhbGxleSBpbiBwYXJpcyBpbiB3aW50ZXIKY2hyaXN0bWFzIG5pZ2h0CmFuIGFsdGFyIG9mIGEgdGVtcGxlCmFuIGFtYWxnYW1hdGlvbiBvZiBhIHNuYWtlCnN0cm9uZyBhbmQgdmlicmFudCBjb2xvcnMKZmVsbGluaSAxOTc3IHRlY2huaWNvbG9yCmFuIGFtdXNlbWVudCBwYXJrIGluIG9sZCBlZ3lwdApidW1wZXIgY2Fycwpwb3B1bGFyIG9uIGluc3RhZ3JhbQpkcmlua2luZyBhIGJvdHRsZSBvZiBjb2NhLWNvbGEKamF5aXNvbiBkZXZhZGFzIHN0eWxlCmVsZHJpdGNocHVuawpzbW9vdGggc2hhZGluZyB0ZWNobmlxdWVzCmFudGlxdWl0eQp1bmRlcmdyb3VuZCB0ZW1wbGUKc3BsaXQgLSBjb21wbGVtZW50YXJ5IC0gY29sb3JzCmlkZWFsIHBvbHloZWRyb24KY2xhdGhydXMgLSBydWJlcgpmYXZvbGFzY2hpYSAtIGNhbG9jZXJhCm9uIHRoZSBwYXRoIHRvIGVubGlnaHRlbm1lbnQKMSAwIDIgNCB4IDcgNiA4CnRyaWJ1dGUgdG8gbGlmZQp0aGUgYnJpdGlzaCBtdXNldW0KYWNjdXJhdGUgdG8gZWd5cHRpYW4gdHJhZGl0aW9uCmh1bnRpbmcgYmlzb25zCmh1bnRpbmcgYnVmZmFsbwpoYW5kc29tZSBzeW1tZXRyaWNhbCBmYWNlcwphbiBhbmNpZW50CmFtYmlndW91cyBnZW5kZXIKcHJvamVjdGlvbiBkZXNpZ24gaW5zdGFsbGF0aW9uCmRhcmsgYmx1ZXMKZnVzaW5nIGluIHRoZSBtaWRkbGUKcGV0ZXIgbW9ocmJhY2hlciBkaWdpdGFsIGFydApjaHVyY2ggd2luZG93CndhcnJpb3IgcGxhdGludW0gYXJtb3IKZ2lybCB3aXRoIGFuZ2VsIHdpbmdzCmFuIGFuZ3J5IGxlbW9uCmFuIGFuZ3J5IG11c2N1bGFyIGFybXkgZ2VuZXJhbApmb3IgcG9rZW1vbiByZWQgYW5kIGJsdWUKdGhlIGFuaW1lIGdpcmwgaXMgcnVubmluZwphbiBhbmltZSBsYXJnZSBtZWNoYSByb2JvdAp3aXRoIHNsZWVrIGxpbmVzIGFuZCBhIHBvd2VyZnVsCmV4cXVpc2l0ZSBsaW5lIGFydApyb3VnaCB3b29kZW4gZmVuY2UKYmFiYmxpbmcgYnJvb2sKb2xkIHN0b25lIHdhbGwKYW4gYW5pbWUgbmVuZG9yb2lkIG9mIHNvbiBnb2t1CnByb3BlciBwcm9wb3J0aW9ucwp3ZWFyaW5nIGEgYmFja3dhcmRzIGJhc2ViYWxsIGNhcApkYW5ib3J1CnNwYW5pc2ggZ2hpYmxpIGFsbGV5d2F5CmFuIGFudGhybyBmb3gKYW4gYW50aHJvIHdvbGYKYXQgYSBmYXNoaW9uIHNob290CmFudGhyb3BvbW9ycGhpYyBiYWRnZXIKaGFuZCBkcmF3biBjYXJ0b29uCmFuIGFudGhyb3BvbW9ycGhpYyBibHVlIGhlZGdlaG9nCnllbGxvdyByb2JlCnBsYXlpbmcgYSBtYW5kb2xpbgphbiBhbnRocm9wb21vcnBoaWMgZGVlcgpkYW5jaW5nIGluIGZyb250IG9mIGZvZwp2aXZpZCBncmVlbiBsYXNlcnMKZG9uISEhIGJsdXRoISEhCnNoZSBoYXMgdGhlIGhlYWQgb2YgYSBwaG9lbml4CmZsYXQgcGFuY2FrZSBoZWFkCmhvbGRpbmcgYSBiYWdwaXBlCndlYXJpbmcgYSBwYXRjaCBvdmVyIG9uZSBleWUKaG9uZyBrb25nIDEgOSA1IDQKaXJhbgphbiBhcmNhbmUgd2l6YXJkIGNhc3RpbmcgYSBzcGVsbApjaHJpc3RvcGhlciBhbGV4YW5kZXIKd2lkZSB3aW5kb3dzCm1hc3NpdmUgZ2FsYXh5CnNpZGUgcGVyc3BlY3RpdmUKYW4gYXJteSByZWNydWl0bWVudCBwb3N0ZXIKb2tpbmF3YSBqYXBhbgptYXJ2ZWxvdXMgc3R5bGUKam9obiBiZXJrZXkgYW5kIG5vcm1hbiByb2Nrd2VsbApoYWxmdG9uZSBlZmZlY3QKaGlnaGx5IGRldGFpbGVkIGFuZCBjb21wbGV4CnJlbmFpc3NhbmNlIHRoZW1lZAppbiBzdHlsZSBvZiB2YW4gZ29naAp2ZW5pY2UgYmllbm5hbGUKaHVnbyBib3NzIHByaXplCmJsdWUgcGFya2EKc21va2VzdGFja3MgYXQgbmlnaHQgaW4gdGhlIHJhaW4KY291bnRkb3duCnNrdWxscyBtYWRlIG9mIGFsZ2FlCmZ1bGx5IHNwYWNlIHN1aXRlZAphbiBhc3Ryb25hdXQgZ2l2aW5nIGEgcGVhY2Ugc2lnbgp1c2luZyBzeW50aGVzaXplcgpbIHplcm8gLSBncmF2aXR5IF0hIQphbiBhc3Ryb25hdXQgbG9zdCBpbiB0aGUgb2NlYW4KYW4gYXN0cm9uYXV0IHJlbGF4aW5nIGluIHNwYWNlCndpbmR5IG1hbmUKaGFuZCBkcmF3biB0eXBlCnN0b25lcgpwb2ludGluZyBhIHBpc3RvbCBhdCB1cwpsb29raW5nIG91dCBhdCBhIHBpbmsgb2NlYW4KcGFydGlhbGx5IGJpb21lZGljYWwgZGVzaWduCmhpZ2hseSByZWFzbGl0aWMKY29uY2VwdCBhcmQKZXZhbmdlbGluZSBsaWxseQphbiBhdHRyYWN0aXZlCnBlcmZlY3QgbGlnaHRpbmcgaW4gYSBzbm93IHN0b3JtCmNsb3NlLXVwIHByb2Zlc3Npb25hbCBwb3J0cmFpdApibGFjayB0IHNoaXJ0CmRlbW5hIGd2YXNhbGlhCmFic3RyYWN0IGdlb21ldHJpY2FsIHNoYXBlcwpzbm93IGZhbGwKYXdrd2FyZCBzaXR1YXRpb24KYW4gYXp0ZWMgY2l0eSBpbiBhIGlzbGFuZCBsYWtlCmhvdCBhbmQgaHVtaWQKYW4gYXp0ZWMgd2FycmlvcgpzY2FybGV0IGpvaGFuc2VuCnNtYWxsIGJsb25kIGdvYXRlZQpiaWdnaXNoIG5vc2UKamVzc2ljYSByb3NzaWVyIGZhbnRhc3kgYXJ0CmFuIGNvbmNlcHQgYXJ0IG9mIHRoZSB0YXUgcXVlZW4KZWF0aW5nIGljZSAtIGNyZWFtCmZhbnRhc3RpYyBhbmltYWwKd29ya2luZyBoYXJkCmluIGEgb3Blbi1zcGFjZSB3b3JraW5nIHNwYWNlCmNvdW50cnkgcm9hZApzaGVsbCBjcmF0ZXJzCmFuIGVlcmllIGNhdmUKY29udGFpbmluZyBhIGhpZGRlbiBwb3J0YWwKZGFyayB0b25lcyBhbmQgY2FuZGxlbGlnaHQKYW4gZWVyaWUgd2hpcmxwb29sCmZvZ2d5IHN3YW1wCm5lc3QKbWFkZSBvZiBhbGNvaG9sIGluayBvbiBwYXJjaG1lbnQKZGFyayBncmV5IHJhaW5ib3cgY29sb3IgcGFsZXR0ZQpwZW5uZWQgaWxsdXN0cmF0aW9ucwpjb3BwZXIgcGlwZXJzCnJlZCBhbmQgcHVycGxlIGNvbG9yaW5nCmRhbmNpbmcgYSBqaWcKdG91cmlzdAphbiBlbGRlcmx5CmFuIGVsZHJpdGNoIGVudGl0eQpibGFjayBtZXRhbCBhZXN0aGV0aWNzCjcgZmVldCB0YWxsCjggMCBtbSBwaG90bwpzdW1tb25pbmcgY2lyY2xlCnR1YmUtdG9wIGRyZXNzCnN1YmxpbWUgY29tZm9ydGluZyBhbWJpZW5jZQphbiBlbGVnYW50IHdvbWFuIGluIGJsYWNrIGRyZXNzCmxpYnJhcnkgb2YgcnVpbmEgY29uY2VwdCBhcnQKaW5rIGFuZCB3YXNoCmFuIGVsZXBoYW50IGRvaW5nIHlvZ2EgcG9zZXMKaGlzIHRydW5rIGlzIGEgaHVnZSB0ZW50YWNsZQphbiBlbGVwaGFudCBvY3RvcHVzIGNoaW1lcmEKYW4gZWxlcGhhbnQgd2VhcmluZyBhIHR1dHUKcm93cyBvZiBjYW50ZWVuIGluIGJhY2tncm91bmQKcGVyZmVjdCBsaWdodGluZyBoZAphbWF0ZXVyIHBob3RvZ3JhcGgKYW4gZW1vIGdpcmwKbGFyZ2UgZGV0YWlsZWQgbW9vbgp0aGUgYmFja3Jvb20KYW4gZW1wdHkgYmFja3Jvb20gYXQgbmlnaHQKY2luZXN0aWxsIDggMCAwIHQgdGVjaG5pY29sb3IKYW4gZW1wdHkgYnJ1dGFsaXN0IGNoYW1iZXIKYW4gZW1wdHkgaGFsbHdheQpwZW9wbGUgYXQgdGhlIHRhYmxlCmhpZ2hseSBkZXRhaWxlZCBiYXJsb3dlIDggawpsaW1pbmFsIGhpZ2hseSBkZXRhaWxlZApkZXRhaWxlZCBzdW1pIC0gZSBpbGx1c3RyYXRpb24KYmx1ZSBhbmQgcGluayBjb2xvdXIgc3BsYXNoCnBhaW50ZWQgd2l0aCBwYXN0ZWxzCmJsdWUgY29sb3VyIHNwbGFzaApsaWdodCBjb21pbmcgdGhyb3VnaCB3aW5kb3cKdGF0dGVyZGVtYWxpb24Kc2hhbiBzaHVpCnRyZWFzdXJlIGlzbGFuZApoaWxsc2lkZQphbiBlbm9ybW91cyBlbGVwaGFudCBraW5nCmh1Z2UgdGVudGFjbGVzCmFuIGVub3Jtb3VzIHNpbHZlciB0cmVlCnN1cmdpY2FsIGltcGxpbWVudHMKbiA3IGFybW9yCiggYmxhZGVydW5uZXIgMiAwIDQgOQpjaGxvZSBwcmljZQpkYXJrIHN3YW1wCmFuIGVwaWMgYW5pbWUgb2YgdHVmZiBsdWNrCmhpZ2ggLSBkZWZpbml0aW9uIHBpY3R1cmUKY29vbCBzdW5nbGFzc2VzCndpdGggamFwYW5lc2UgdGV4dAo4IGsgY2luZW1hdGljIHBob3RvZ3JhcGh5CnBhcmFjaHV0ZXMKZXRoZXJlYWwgYXVyb3JhIHNwaXJpdHMKc3VidGVycmFuZWFuIHNwcmF3bGluZyBnYWxheHkKc3RhY2tzCmd1bWRyb3AgYnVubmllcwpiaWcgYW5nZWwgd2luZ3Mgb24gYmFjawpwaXhhciBhbmQgZGlzbmV5IDNkIHN0eWxlCmJlZXJzIG9uIHRoZSB0YWJsZQptZW5hY2luZy4gdW5yZWFsIDUKZGVzdHJ1Y3RpdmUKeGlhbmcgZHVhbgp0aG9tYXMgZWFrZXMKd2l0aCBnbG93aW5nIGxpZ2h0cyBhdCBuaWdodAp3aXRoIHNlYXdlZWQKYW4gZXBpYyBsYW5kc2NhcGUKYW4gZXBpYyBsb3ZlIGFmZmFpciB3aXRoIGRvdWJ0Cm1lbHRpbmcgaW50byB2dWxwaXgKc2ljayB3aXRoIGEgY29sZApjb3JhbCByZWQKYW5pbWF0aW9uIGZpbG0KaHVnaW5uIGFuZCBtdW5pbm4gZmx5aW5nIGFib3ZlCmFuIGVwaWMgc2NpZmkgbW92aWUgc3RpbGwKYW4gZXBpYyBzcGFjZSBzaGlwIHNjZW5lCmR1c3QgZGV2aWxzCmFuIGVwaWMgdmlraW5nIGJhdHRsZSBzY2VuZQphbmNpZW50IHN0ZWFtcHVuayBjaXR5CmVudGVyaW5nIGEgcXVhbnR1bSB3b3JtaG9sZQp0cmVuZGluZyBvbiBhcnRmb3J1bQp0cmVuZGluZyBvbiBtYWQgbWFnYXppbmUKYWxlc3NhbmRybyBiYXZhcmkKYmlvIGNoZW1pY2FsIGlsbHVzdHJhdGlvbgptdXNldW0gcGljdHVyZQphbiBldmlsIHN3b3JkCmFuIGV2aWwKZ2lnZXIgdGV4dHVyZXMKYW4gZXhhbXBsZSBvZiBzYXVsIGxlaXRlcidzIHdvcmsKbmVvbiBzdGVhbXB1bmsKcGFydCBwZXRyYSBjb3J0cmlnaHQKYW4gZXhwYW5zaXZlIGdyYXNzeSBwbGFpbgpvcGVuIGZvciBjb21taXNzaW9ucwprby1maQpicmlnaHQgZ29kcmF5cwpkYXJrIG9yYW5nZXMgcmVkcyBhbmQgeWVsbG93cwpub3RlIGRldGFpbGVkCmNyb3duIG9mIHJvc2VzCmJsYWNrIGFuZCB0ZWFsIHBhcGVyCmFuIGV4cXVpc2l0ZSAzIGQgbWFwCmluIHRoZSBlZG8gZXJhCnRoaWNrIHBpZ21lbnRlZCBzbW9rZQptb2Rlcm4gY3J5c3RhbCBtYXJ0aW5pIGdsYXNzCmRpbSBhY2NlbnQgbGlnaHRpbmcKdG9rbyBmdWthd2EKdmVyeSB2ZXJ5IGJlYXV0aWZ1bCEKdHVydGxlcwp0ZW5zaXZlIG1vb2QKY2FzdCBnbGFzcyBleWVzCnJveWdiaXYKdHdpY2UKYWR2YW5jZSBjaXZpbGl6YXRpb24KYW4gZXh0cmVtZWx5IGxhcmdlIGNhdmUKdmVyeSB2YXNjdWxhcgpzYXRhbmljIHdpbmdzCnBsdXJhbGl0eQp2aHMgc3RhdGljCmFuIGZpbG0gc3RpbGwgb2YgbXIgYmVhbgpjaW5lbWF0aWMgc2NyZWVuCnJlYWxpc3RpYyAzIGQgc3R5bGUKZW5vcm1vdXNseSBkZXRhaWxlZApzaW1wbGUgd29vZCBzaGVsdmVzCmxvdHMgb2YgamFycyBhbmQgYm94ZXMgb2YgaGVyYnMKdGFyb3QgY2FyZCB0aGUgZW1wcmVzcwpjb2xvcmZ1bCB3YXRlcmNvbG9yIHBhaW50aW5nCmFkdmVydGlzaW5nIGxpZ2h0aW5nCmNvbmRlbnNhdGlvbiBkcmlwCnNub3cgbGFuZHNjYXBlCmFuIGlkZWFsaXN0aWMgbWFuCndhbHJ1cwpzb2xhcml6ZWQKbGFyZ2UgYmxhY2sgc21pbGUKYW4gaWxsdXN0cmF0aW9uIG9mIGEgYmFyL2xvdW5nZQptaWQgY2VudHVyeSBtb2Rlcm4gY2FydG9vbiBzdHlsZQp3aXRoIGhpcyBoYW5kcyBpbiBoaXMgaGFpcgpwcmVoaXN0b3J5Cndhc3RlIGV2ZXJ5d2hlcmUKYXQgdGhlIHdhdGVyc2lkZQp5dWljaGkga2F0bwp0YWtlCnNoaW5pY2hpIGZ1a3VkYQp0b3VyaXN0IGRlc3RpbmF0aW9uCmluIGFuIGFwcm9uIGNvdmVyZWQgaW4gYmxvb2QKYmx1ZSBhbmQgY3lhbiBjb2xvcnMKYW4gaW1wZXJpYWwgYWdlbnQgZnJvbSBzdGFyIHdhcnMKcm9tYW50aWNpc20gbGFuZHNjYXBlIHBhaW50aW5nCmRhcmsgc291bHMgYXJ0IHN0eWxlCnBlcnNvbmEgYXJ0IHN0eWxlCnZhcG9yd2F2ZSBwYWxsZXR0ZQpjaMOidGVhdSBkZSBjaGV2ZXJueQp3aXRoIGEgZnJlbmNoIGdhcmRlbgp1bmRlcnNlYQppbGx1c3RyYXRlZCBuZXdzIGFnZW5jeQptZWNoYW5pY2FsIGVuZ2luZWVyaW5nCm9uZS1saW5lIGRyYXdpbmcKa29kYWsgZ29sZCBmaWxtCnN0aWxsIGZyb20gYSAyMDE1IHBpeGFyIG1vdmllCnN0aWxsIGZyb20gYSAyMDAxIHBpeGFyIG1vdmllCmFyY2FuZSBwYXR0ZXJucwppbGx1c3RyYXRpb25zIG9mIGFuaW1hbHMKYW4gaW5mb3JtIG9yZ2FuaXNtCmV4dHJhIHJlYWxpc3RpYyBkZXRhaWxzCmFydGlzdCB3ZWFyaW5nIHRvcm4gb3ZlcmFsbHMKcGF0ZW50CmhvbGRpbmcgbmlrb24gY2FtZXJhCmJsYWNrIHNjbGVyYQp3ZWFyaW5nIGJsYWNrIHdpdGNoIGhhdAp3ZWFyaW5nIHJlZCBkcmVzcwpibHVlIGhhaXJzdHlsZQpwaG90byBmcm9tIHRoZSBkaWcgc2l0ZQphbiBpbnN0cnVtZW50CmFuIGludGVyZGltZW5zaW9uYWwgYmVpbmcKc3RpbGwgZnJvbSB0aGUgcGl4YXIgbW92aWUKYXJ0IGZvcm1zIGluIG5hdHVyZQp3b2phawpiaWcgYnJhaW4KdGhlIHNlYSBhbmQgc3Rvcm1zIGJlaGluZCBoaW0Kc2xhdiBlcGljCmFuIGludHJpY2F0ZSBhcnQgbm91dmVhdSBmcmFtZQpjaHJpc3RvcGhlciBub2xhbiBmaWxtIHN0eWxlCnRyaWJlIGh1dHMgaW4gdGhlIGp1bmdsZQpkeXN0b3BpYW4gc2NpIC0gZmkKZGlzdGFudCB0d2lua2xpbmcgc3RhcnMKbmVvbiBjb2xvciBwYWxldHRlCmluIHRoZSBhbmltZSBnaG9zdCBpbiB0aGUgc2hlbGwKcmFkaWFudCBnbG9yeQppY2V5IHR1bmRyYSBiYWNrZ3JvdW5kCm9yYW5nZSBhbmQgY3lhbiBwYWludCBkZWNhbHMKdHJhbnNsdWNlbnQgZ3JlZWJsZXMKZmVycm9mbHVpZHMgaW4gYmFja2dyb3VuZApyZWFsaXN0aWMgbW9vbiBpbiB0aGUgYmFja2dyb3VuZAppbnNjcmliZWQgd2l0aCBvY2N1bHQgc3ltYm9scwpubyBwZW9wbGUgNGsKY3liZXJwdW5rIHNwZWVkYm9hdAphbiBpc2xhbmQgbWFkZSBvZiBjYXZpYXIKd2l0aG91dCBncmVlbiBncmFzcwphbiBpc2xhbmQKbGV0J3MgcGxheQphcnQgbm91dmVhdSBkYXJrIG91dGxpbmVzCmFuIGlzb2xhdGVkIGh5ZHJhbmdlYSBwbGFudAptYWdlbnRhIGNvbG91cnMKdGhlIGhvcnNlIGFib3ZlCmluIGEgZGVzb2xhdGUKYW4gb2NlYW4Kcml0dWFsaXN0aWMKcHN5Y2hkZWxpYyBtdWx0aWNvbG9yZWQKYW4gb2N0b3B1cyBmaWdodGluZyBhbiBhc3Ryb25hdXQKYW4gb2N0b3B1cyBpbiBhIGNhciByZXBhaXIgc2hvcApjaW5lbWF0aWMgc2hvdCEKYW4gb2N0b3B1cydnYXJkZW4Kc29tZW9uZSBsb3N0IGpvYgpjaXR5IGxpZ2h0cyBvbiB0aGUgaG9yaXpvbgpoYWxmIGxlbmd0aApzcGFya2x5IGNhdCBleWVzCmZsaXR0aW5nIGFyb3VuZCBpbiB0aGUgc2t5CmFuIG9pbCBwYWludGluZyBvZiBhIGtpdHRlbgpuaWNob2xhcyByb2VyaWNoISEKbGluZXMgYW5kIG1vdmVtZW50IGFuZCBtb3Rpb24KbGluZXMgYW5kIG1vdmVtZW50CmRvbWVzdGljIGNhcmFjYWwKdmVyeSBzdW5ueSB3ZWF0aGVyCnNhdGFuaWMgc3ltYm9saXNtCm9uZSBoZWFkIG9ubHkKYW4gb2lsIHBhaW50aW5nLiB3YXZlCmJhbGQgb24gdG9wCndpdGggYSBoYWxvIG9mIHVua2VtcHQgaGFpcgphbiBvbGQgYWJhbmRvbmVkIG1hbnNpb24KY3JhY2tlZCBwYWludAphbiBvbGQgY2luZW1hCmhvbGRpbmcgYSByZWNvcmQKdmlicmFudCBvcmFuZ2UgYmFja2dyb3VuZApteXN0ZXJpb3VzIGRlbnNlIGZvcmVzdApsaWdodCBicmVha3MgdGhyb3VnaCB0aGUgcm9vZnMKMyA1IG1tIHNob3QKdGphbGYgc3Bhcm5hYXkgOCBrCmxvbmcgc2hvdCBmcm9tIHRoZSBiYWNrCmFuIG9sZCBtYW4gd2l0aCA3IHllbGxvdyBiaXJkcwoxOTYwcy1lcmEKcmV0cm8gZGV2aWNlCm1hZGUgb2YgYnJ1c2hlZCBzdGVlbApmb3IgZGlzcGxheWluZyByZWNpcGVzCmRpZ2l0YWwgcG9uZyBzY3JlZW4KZ2xvd2luZyB0YXR0b29zCmJsYWNrLXdoaXRlIHJldHJvIHBob3RvIDE5MTAKYW4gb2xpdmUgc2tpbm5lZApyZWFsIGh1bWFuIGV5ZXMKY2FzdGVsdmFuaWEKaW5kaXN0aW5jdApoaWdoIGRldGFpbCEhIQpwaXRjaCBkYXJrIHJvb20KYW4gb3B0aWNhbCBpbGx1c2lvbgphbiBvcHRpY2FsIGlsbHVzaW9uIGRyYXdpbmcKYW4gb3B1bGVudCBmYXZlbGEgZW52aXJvbm1lbnQKbG91bmdlIHJvb20KZ25vbWUgZHJ1aWQKdW5leHBlY3RlZCBnbGl0Y2ggYXJ0CnVucmVhbCBlbmdpbmUgY2luZW1hNGQKbHVtYmVyamFjayBmbGFubmVsCmFuIG9yawpyb3dzIG9mIHJhem9yIHNoYXJwIHRlZXRoCnNpdHRpbmcgb24gYSBkZXNrCnRoZSBzdHlsZXMgb2YgZXNjaGVyIGFuZCBwZW5yb3NlCmZseWluZyB0aHJvdWdoIHRpbWUKcG9ydGFsIGludG8gYW5vdGhlZXIgZGltZW5zaW9uCm5lb24gbGV0dGVycyB0cmlwbWFjaGluZQpjcmF6eSBmaXNoCnpvb2xvZ3khIGZhbnRhc3RpY2FsIGNyZWF0dXJlcwphbiBvdmVycG9wdWxhdGVkCmFuIG93bAp1bHRyYSBoZCBhbmltZSB3YWxscGFwZXIKbGlwIHNjYXIKZXllIHNjYXIKcGFydCByb2JvdCBhbmQgcGFydCBibGFjayBodW1hbgpzeW50aGV0aWMgc2tpbgphbiByZXRybyBhbmltZSBpbWFnZQpmaWdodGluZyBmYW50YXN5CnNxdWludHkgZXllcwpvbWlub3VzIG5pZ2h0IG1pc3QKZGl2ZSBiYXIgd2l0aCBhIGthcmFva2UgbWFjaGluZQpnZXJtYW4gcmVuYWlzc2FuY2UgYXJjaGl0ZWN0dXJlCnN0cnVjdHVyZWQKaW5zdHJ1bWVudHMKc3ltbWV0cmljYWwgbGF5b3V0Cndvb2RlbiBhcnQgdG95cwpzdG9vZCBpbiBhIGZvcmVzdApzdG9vZCBpbnNpZGUgYSBmdXR1cmlzdGljIGxhYgpzdGFuZGluZyBpbiBhIHNwYWNlIHNoaXAgd3JlY2sKbG9va2luZyBpbiBtaXJyb3IgYXQgb2xkZXIgc2VsZgphbmltZSB3YWxscGFwZXIgNCBrCnBhZ29kYXMgb24gaGlsbHMKdGhlIGVsZGVyIHNjcm9sbHMKcmVmbGVjdGl2ZSBtZXRhbApjaGFuZ2VsZXNzCmFuIHVuZGVhZCBkZXNlcnQgbGljaCBwaGFyYW9oCnRyaXB3aXJlCnV0cmFkZXRhaWxlZAphbiB1bmtub3duIGV0aG5vZ3JhcGhpYyBvYmplY3QKYXJ0IHRvbSBiYWdzaGF3CmV1cm9wYQpubyBmb2cKYW4gdXByaWdodCBsaWdodGJ1bGIKYW4geW91bmcgdXJiYW4gZXhwbG9yZXIgd29tYW4KcmVhbGlzdGljIHNraW4gc2hhZGVyCmJsYWNrIHN1biBoYXQKaG9vZGVkIGJsdWUgY2xvYWsKamltbXkgbWNnaWxsIGluIGNvdXJ0CmhpZ2ggLSBrZXkgcGhvdG9ncmFwaHkKcG9ydHJhaXQgZmVhdHVyZWQgb24gdW5zcGxhc2gKcHVycGxlIGFuZCByZWQgY29sb3IgYmxlZWQKcGxhbmV0cyBhbmQgc3RhcnMKbm9zdGFsZ2ljIHBob3RvZ3JhcGh5CmJpcmQgc2lnaHQKc3VuIGFuZCBzaGFkb3cKc3VuIGFuZCBzaGFkb3cgb3ZlciBhIGNpdHkKY29sb3JibGVlZAphenVyZSBibHVlIHdhdGVyCmhlYXZ5IGZpbG1ncmFpbgpoYWppbWUgc29yYXlhbWEgc3R5bGUKZmxhc2ggaW1hZ2UKc2hvdCBvbiB3ZWJjYW0KdGhlIG1hZ2ljaWFuIHRhcm90IGNhcmQKcmVtYnJhbmR0IGxpZ2h0aW5nIDM1bW0KZnJhY3RhbCB3b3JsZApjaXJjYSAxIDkgNyA5Cm1lZGljYWwgZHJhd2luZwphbmF0b21pY2FsIGRyYXdpbmcgb2Ygc2FpdGFtYQpmdXR1cmlzdGljIGVuZ2luZWVyaW5nCndldCBzdXJmYWNlCmx1bWVuIHRlY2hub2xvZ3kKaW5jcmVkaWJsZSBkZXRhbGl6YXRpb24Ka2lubwphbmF0b21pYyEhCnJlYWwgaGVhcnQhCmRpc3NlY3Rpb24gc2tldGNoCmFuYXRvbXkgb2YgYSBiaXJkCnllbHRzaW4KYmx1ZSBwbGFuZXQgc3RpbGwKcnVhbiBqaWEgYW5kIG1pY2hhZWwga29tYXJjawpxdWlya3kga2luZyBvZiBmYWVzICggd2l0aCBsb25nCnJ1YW4gamlhIGFuZCBhcnRodXIgcmFja2hhbQppbiBhIG11c2V1bSByb29tCmFuY2llbnQgcGVyc2lhbiB0ZW1wbGUgZHVuZ2VvbgplbGRlbiByaW5nIG9mZmljaWFsCnBob3RvIG9mIGTFvmVzaWthIGRldmljCmRpc2NhcmRlZCBzY3JvbGxzCmxlb25hcmRvIGRpdmluY2kKZGlnaXRhbCByYWluCmxhcmdlIGNyb3dkIG9mIGFuZHJvaWRzCmFuZHJvaWQgY2xvc2UgdG8gY2FtZXJhCmZvciBob25vciBjaGFyZWN0b3IgY29uY2VwdCBhcnQKOCBrIGJlYXV0aWZ1bAphZnJpY2FuIHN0ZXBwZQptaW5pbWFsIGNhbm9uIDUgMCBtbQo5MHMgcGhvdG8Kdm9sY2FuaWMgd29ya3Nob3AgYmFja2dyb3VuZApncmV5IGZvcmVzdCBpbiB0aGUgYmFja2dyb3VuZAphbmNpZW50IGNhdGFjb21icwp3aXphcmQgZmlnaHRpbmcgYSBnb2xlbQpzYWNyZWQgcGVyZmVjdCBsaWdodGluZwphbmNpZW50IGNoaW5lc2UgYXJjaGl0ZWN0dXJlCmFuY2llbnQgY2hpbmVzZSBiZWF1dGllcwphbmNpZW50IGNpdHkgbGFuZHNjYXBlCmFydCBzdHlsZSBvZiBtYXJjIHNpbW9uZXR0aQp2b2xjYW5vIGZvZwpnbG93aW5nIGdyZWVuIGxpZ2h0cwpjYXJhdmFuCjAgMCAwIGJjCm1vdXRhaW5zCnNoZWV0CmRldGFpbGVkIHJlYWxpc3RpYyBwYWludGluZwozIDUgbW0gZGlnaXRhbCBwaG90bwpsdXNoIHRydW5kYSB2ZWdldGF0aW9uCmFuY2llbnQgZmFudGFzeSByZWdpb25hbCBtYXAKbW91bnRhaW5zIGFuZCBvY2VhbnMKYW5jaWVudCBmaXNoCnNrdWxsIGNhcApmYWlyeSBjaXJjbGVzCm15c3RlcmlvdXMhCmVyb3Npb24gYWxnb3JpdGhtIGxhbmRzY2FwZQphbmNpZW50IGdyZWVrIGFzc2Fzc2luIG1hc2sKcHVycGxlIHJvb2ZzCmJ1aWx0IG9uIGEgc3RlZXAgaGlsbApnb2xkIHRyaW1taW5ncwpibGl6emFyZCBjaW5lbWF0aWMKZ3JhZGllbnQgd2hpdGUgYmx1ZSBncmVlbgpibHVlIGFuZCBncmVlbiB3YXRlcgp2b2x1bWV0cmljIGxpZ2h0aW5nIGZyb20gYWJvdmUKcHJvbWluZW50IGphd2xpbmUKYW5jaWVudCBncmVlayBzdHlsZQpheWFtaSBrb2ogaW1hCmh5cGVyIHJlYWxpIHNtCmFuY2llbnQgaW5kaWEKYW5jaWVudCBpbmRvbmVzaWEKZGlub3NhdXIgd29vZCBjYXJ2aW5nCmJvZyBvYWsKY29wcGVycGxhdGUgcHJpbnQgc3R5bGUKYW5jaWVudCBqYXBhbmVzZQprYW1ha3VyYSBwZXJpb2QKZmVlbGluZyBvZiBteXN0ZXJ5CmRpYWdyYW0gbmF0dXJlIHNrZXRjaGJvb2sKd2VhcmluZyBub3JzZSBhcm1vcgptb2Rlcm4gdGVjaG5vbG9neQpvcm5hdGUgZnJhbWUKYW5jaWVudCBtYXAKY3Jvd2RlZCBhbmQgcG9wdWxhdGVkCmZhbnRhc3RpY2FsIGVwaWMKYW5jaWVudCBtZWRpdGVycmFuZWFuIGNpdHkKY2FsYW5xdWUKYW5jaWVudCBtZWdhc3RydWN0dXJlIHB5cmFtaWQKYW5jaWVudCBtb251bWVudCB3YXRlcmZhbGwKYW5jaWVudCBteXN0aWMgdGltZSBsb3JkCmNyaW1zb24gYW5kIGVjcnUgY29sb3Igc2NoZW1lCnRoZSB0cmVlcyBhcmUgYW5ncnkKYW5jaWVudCBudW1pZGlhbiBjYXZhbHJ5bWFuCmZhaXJ5IGNpcmNsZQpyZXN0b3JlZCBjb2xvcnMKcHlyYW1pZCBzdXJyb3VuZGVkIHdpdGggZ3JlZW5lcnkKYW5jaWVudCBxdWVlbiBlbW1hIHdhdHNvbgptb3NhaWMgc3R5bGUKYW5jaWVudCByb21hbiBtb3NhaWMKYW5jaWVudCByb21lIG1hbgphbmNpZW50IHJ1aW5zIGZhdmVsYQphbmNpZW50IHJ1aW5zIHVuZGVyIHRoZSBkZXNlcnQKZWxhYm9yYXRlIGNhcnZlZCB3b29kIGJhbGNvbmllcwpzbGF2aWMhISEKc2xhdmljIGZvbGtsb3JlIHN5bWJvbHMKdm9sY2FubyB2YWxsZXkKdG9tYiByYWlkYXIKbWF1c29sZXVtIHRhbGwgcnVpbnMKZ29sZGVuIGZlYXRoZXJzCndvb2RwdW5rCmFwcGxlIG9yYW5nZQp0aGFuayB5b3UgdmVyeSBtdWNoCnRoaXMgdGltZQp3aGVuIGtpbmRuZXNzIGZhbGxzIGxpa2UgcmFpbgptYXN0ZXJwaWVjZSBpbnRyaWNhdGUgZWxlZ2FudAppdHMgaG91ciBjb21lIGFyb3VuZCBhdCBsYXN0Cm1pZCA5IDAgcwp3ZWF0aGVyZWQgcG9sYXJvaWQKYW5kcmVpIHRhcmtvdnNreSBzY2VuZQpob3N0aWxlIGF1cmEKYmFzaWMgcGhvdG8KcGV0c3BlY3RpdmUgcm9vbSBsYXlvdXQKcmVmbGVjdGlvbiBvbiB0aGUgb2lsCmZhc2hpb24gbW9kZWwgcGhvdG9ncmFwaHkKYnJhbmRvbiB3b2VsZmVsCmFuZHJvZ3lub3VzIHZhbXBpcmUKcHJpZGUgbW9udGgKbG95YWwKZHJlc3NlZCBpbiB0YWN0aWNhbCBhcm1vcgozZCBsaWdodGluZwpyZW5kZXJlZCBpbiBudmlkaWEncyBvbW5pdmVyc2UKaGlnaGx5IGludHJpY2F0ZSBtaW5kYXIgcHVuawpncmVnIGJlZXBsZQpib3JuZSBzcGFjZSBsaWJyYXJ5IGFydHdvcmsKMCBicmFpbnN1Y2tlciByZW5kZXIKaW50cmljYXRlIHdsb3AKYW5kcm9pZCBwaG9uZXMKbW9kZXJhdGUgY29sb3JzCmZ1bGwgYm9keSAxIC8gNiBuaWhlaSB0c3V0b211CmJsYW1lIQpib3JkZXJsYW5kcyBhcnQgc3R5bGUKYW5keSBzYW1iZXJnCmhlcm5hbiBiYXMKYW5nZWwgaW4gcGxhc3RpYyBhcm1vcgpnb3RoaWMgZ2lybApmaXJlIGluIHRoZSBza3kKYmxhY2sgYW5kIHB1cnBsZSByb3NlIHBldGFscwpoaWdobHkgZGV0YWlsZCA0awpzdHVkaW8gbGlnaHQgc3R5bGUKYW5nZWwgc3Bpcml0IGd1aWRlCmFuZ2VsIHdhdGNoaW5nIGRlbW9uCmFuZ2VsIHdpdGggYmxhY2sgd2luZ3MKbG9uZSBwZXRpdGUgZmVtYWxlIGdvZGRlc3MKd2VhcmluZyEgcm9iZXMhISBvZiBzaWx2ZXIKZGFyayBydWlucwpmdWxsIGFybW9yIGNsb3RoCmRhcmsgcnVpbnMgbGFuZHNjYXBlCmZ1bGwgZHJlc3MKYW5nZWxhIG1lcmtlbCBhcyBhIGJhbmFuYQpvdmVyZ3Jvd24gc3BhbXAKYW5nZWxhd2hpdGUKcHJvdGVjdGl2ZQpjbG90aGVkISEgb2lsIG9uIGNhbnZhcwp6J2dvay4gOCBrIGhkIHJlc29sdXRpb24KaGVhdmVuIGdhdGUKaHlwZXIgZGV0YWlsZWQgb3JuYW1lbnQKbWVybWFpZCB0YWlsCnNpY2tlbmVkIGZsZXNoIGRlY2F5CnN1Y2ggZGlzYXBwb2ludG1lbnQKbGVmdCBwcm9maWxlCmFzdXJhcyBnaWFudCB5YWtzaGEgc3RhdHVlcwpsYXJnZSBibHVlIGxhc2VyIGV5ZXMKd2l0aCBpbmRleCBmaW5nZXIKd2l0aCBwb2ludGluZyBmaW5nZXIKZGVsZXRlIGR1cGxpY2F0ZWQgY29udGVudApibGFjayBleWVzIGFuZCBsYXJnZSBmb3JlaGVhZAplcGljIHNjZW5lIGZ1bGwgb2YgY29tcHV0ZXJzCndpdGggZGFyayBnaG9zdCBzbW9rZXMgYXJvdW5kCmFuZ3J5IGJlYXIKaG9sZGluZyBhIGJyaWVmY2FzZQphbmdyeSBnZWNrbyBlbmdsaXNoIGdlbnRlbG1hbgpvcm5hdGUgYXJ0IG5vdXZlYXUgZGV0YWlsCmNsZW5jaGluZyB0ZWV0aApub290IG5vb3QKZmFjZSBhbmltZSBwb3J0cmFpdApyZWZsZWN0aXZlIHZlc3QKcmVkIHNtb2tlIGNvbWluZyBmcm9tIGxhbXAKZ290aGljIGNhc3RsZSBpbiBiYWNrZ3JvdW5kCvCfppEgZGVzaWduCnNxdWFyZWQgYm9yZGVyCmRldGFpbGVkIHNjZW5pYyB2aWV3CmFuZ3J5IHZpZGVvIGdhbWUgbmVyZApiZXN0IHBob3RvcyBvZiB0aGUgeWVhcgphY25oCmRlZXAgZmFrZQp2aWRlbyBnYW1lIGRpZ2l0YWwgYXJ0CnJpdmVyIHN0cmVhbQphbmltYWwgc2t1bGwgbWFkZSBvZiByaWZsZXMKcG9wdWxhciBvbiBldHN5CmRyYW1hdGljIGxpZ2h0aW5nICFuLTkKY29sb3Ita2V5IHBhaW50aW5nCmJsYW5rIGV4cHJlc3Npb24gb24gaGVyIGZhY2UKYmJsb29tCmFuaW1hdGljCmFuaW1hdHJvbmljIGFuZ2VsaW5hIGpvbGllCmFuaW1hdHJvbmljIGJpbGwgbXVycmF5CmNpbmVtYSA0IGQgb2N0YW5lCnRpbWUgc2hpZnQKamltIGhlbnNvbiBjcmVhdHVyZSB3b3Jrc2hvcApjaHVjayBlIGNoZWVzZQpkaXNzb2x1dGlvbgphbmltZSAvIG1hbmdhCmFuaW1lIGFic3RyYWN0IGFydAplbGRlcnNjcm9sbHMKd2hpdGUgc2hpcnQgYW5kIGdyZWVuIHNraXJ0CmxpZSBvbiB3aGl0ZSBjbG91ZHMgZmFpcnlsYW5kCmRldGFpbGVkIGFuZCBzaGFycAphbmltZSBhcnQgdmVoaWNsZSBjb25jZXB0IGFydApibG9uZGUgaGFpciBhbmQgbGFyZ2UgZXllcwpjbG9zZSB1cCBhdCBmYWNlCmFkdmFuY2VkIGRpZ2l0YWwgZ2FtZSBjb3ZlcmFydAphLTEgcGljdHVyZXMKYm9vayBjYXNlCnJlZCBnbG92ZXMKbGVhdGhlciBidW5ueSBjb3N0dW1lIGJvZHlzdWl0CmxhY2UgdW5kZXJ3ZWFyCm5pZXIKamFwYW5lc2UgY2l0eSBhdCBuaWdodApub25ncmFwaGljCmFuaW1lIGNhdCBnaXJsIGluIGEgbWFpZCBjb3N0dW1lCmNvb2tib29rIHBob3RvIDEgOSA4IDIKd2hpdGUgd2FsbCBjb21wbGV4Cm1pbmluZyBvdXRwb3N0CnN0ZWxsYXIgZXhwbG9yYXRpb24KamFnZ2VkIG1ldGFsIGxhbmRzY2FwZQphbmltZSBjaXR5IGxpbmVhcnQKYW5pbWUgY2xvdWRzCnVuaWNvcm4gZnJvbSB0aGUgdHVzayBtb3ZpZQpkYXJrIHB1cnBsZSBsaWdodGluZwppbnRlbnNlIHdhdGVyeSBnbG93aW5nIHJlZCBleWVzCmdyZWcgcnV0a293c2tpIC0gYyAxIDAKZ3JlZyBydXRrb3dza2kgLSBjIDEgNQpzaG9uZW4KYW5pbWUgZWx2aXMgcHJlc2xleQphbmltZSBmZW5jZXIKc2hpcmFiaWkKbWlrYSBwaWthem8KaW4gYSBzdGVhbXB1bmsgZGlzdG9waWFuIGNpdHkKd2VhcmluZyBhIHRlZSBzaGlydCBhbmQgY29tYmF0cwp3aGl0ZSBoYWlyISEhIQpkYXJrIGJsdWUgdGludApydXNzaWFuIG5hdGlvbmFsIGd1YXJkCmFuaW1lIGdpcmwgY29zcGxheQphbmltZSBnaXJsIGRlc2t0b3AgYmFja2dyb3VuZAphbmltZSBnaXJsIGRyaW5rcyBlbmVyZ3kgZHJpbmsKZGVlcCBibGFjayByb2JlCmRyYXduIGluIGJhbGxwb2ludCBwZW4KbmVvbiB0b2t5bwpjaW5lbWF0aWMgY2dzb2NpZXR5CnNhdG9zaGkga29uIGFydHN0eWxlCmVkZ2UgZGV0ZWN0aW9uCnNtYWxsIG5lY2tsYWNlCmFuaW1lIGdpcmwgd2Fsa2luZyBvbiB3YXRlcgpoYXJkY29yZSB0ZWNobm8KY3Jvc3NicmVlZApoYXMgYmxhY2sgd2luZ3MKYmFja3Nob3QKYW5pbWUgZ2lybCB3aXRoIGNhdCBlYXJzCmJsYWNrIGpld2VsbGVyeQpoYW5kIGhvbGRpbmcgY2lnYXJldHRlCmFuaW1lIGdpcmwgd2l0aCB0ZWFsIGhhaXIKcHVtcGtpbiBmYXJtIGJhY2tncm91bmQKd2VhcmluZyBjYXQgZWFyIGhlYWRwaG9uZXMKc2l0dGluZyBhdCBkZXNrIGF0IGtleWJvYXJkCmluIGJhdGhyb29tCnBldGl0ZSBib2R5CmhvdyB0byBkcmF3IGFuaW1lCnRyaWFuZ2xlIHNoYXJkcwpsaWdodCBwaW5rIGhhaXIgd2l0aCBwaW5rIGZsYW1lcwpzdWdnZXN0aXZlCmFuaW1lIGhhbmRzb21lIG1hbgphbGJpb24KbG9uZG9uIGFyY2hpdGVjdHVyZQpjb29rCmlsbHVzdHJhdGlvCmFuaW1lIGtleSB2aXN1YWwgY29uY2VwdCBhcnQgb2YKYW5pbWUgbWFpZHMgcmlkaW5nIGVhcmx5IHRhbmtzCmJpcGxhbmVzCm1hZ2ljYWwgdmlsbGFnZQpwcmV5IG1vdmllICggMiAwIDIgMiApCmRyZXNzZWQgaW4gcHVycGxlCnRoZSBmb3JjZQpsdWNhcyBmaWxtcwp2c2hvam8KZnV0dXJpc3RpYyBnYXMgbWFzawpqbSBhbmltYXRpb24KY3J1bWJsaW5nIGFuY2llbnQgc2t5c2NyYXBlcnMKc3VucmF5cyBiZXR3ZWVuIGNsb3Vkcwpkb3duIGxlZnQgYXJtIGFuZCBiYWNrCndlYXJpbmcgYSB2ZXN0IHRvcApmYWNlIHVwCmFuaW1lIGtleQpmZXN0aXZlIGF0bW9zcGhlcmUKdGh1bmRlcnN0b3JtIHRoZSBiYWNrZ3JvdW5kCndhbGtpbmcgYXQgdGhlIHBhcmsKam90YXJvCmFuZ2VsIGhhbG8Kcm9hZCB0byBwZXJkaXRpb24KY2hhcmFjdGVycyB3YWxrCmR1c3QgY2xvdWQKdW5kZXIgYnJpZGdlCmNvbG9yZnVsIG11cmFsIG9uIHdhbGxzCndpdGggZGFyayBicm93biBzdW5nbGFzc2VzCmFuaW1lIG5pbmphIHNjcm9sbAptdXR1ZCBjb2xvcnMKd2lkZSBhbmdsZSBsZW5zIGdsb3cgaW4gdGhlIGRhcmsKYmFja2dyb3VuZCA9IGxpYnJhcnkKYW5pbWUgcGFydHkgb2YgZnJpZW5kIG9mIHdpc2RvbQphbmltZSBwaWN0dXJlCmFzdHJhbCBuaWdodCBza3kgYmFja2dyb3VuZAp3ZWFyaW5nIGdvbGQgZ2xhc3NlcwpkZXRhaWxlZCBsYWtlIGluIGJhY2tncm91bmQKbWFzdGVyIHBpZWNlcwpkYXJrIGFzdHJhbCBkcmVzcwphc3RyYWwgZHJlc3MKZ29kZGVzcyBvZiB0aGUgc3VuCmFmcmljYW4gYW1lcmljYW4geW91bmcgd29tYW4KYW5pbWUgcm9zaWUgdGhlIHJpdmV0ZXIgcG9zdGVyCmNvbmZpZGVudCBrbmlnaHQncyBvdXRmaXQKZm9yZXN0IG9uIHRoZSBob3Jpem9udAphbmltZSBza3VsbCBwb3J0cmFpdCB3b21hbgplbW90aW9uYWwgYW5kIGV4cHJlc3NpdmUKc3ByaW5nIHNlYXNvbiBjaXR5CmdsaXR0ZXJpbmcgc3RhcnMgc2NhdHRlcmVkIGFib3V0CmNocmlzdG9waGVyIHdhbGtlbiBzdXBlciBzYWl5YW4KbWF0Y2ggcG9pbnQKaGlkZSBnZW9tZXRyeQpjaGliaSBnaXJsCm1hcnZlbCBqYXBhbiBjb2xvcmluZwp0aWdlciBwYXdzIGFzIGdsb3Zlcwp3aXRoIGJsdWUgZXllcyEhISEKYW5pbWUgdmlzdWFsIG9mIHN1cGVyZ2lybApzdHJlZXRsYW1wCmNsZWFuIGFuaW1lIG91dGxpbmVzCmFuaW1lIGFydGJvb2sKb3V0bGluZWQhISEKc3Ryb25nIGNvbnRyYXN0aW5nIHNoYWRvd3MKYmxvb2QgbW9vbiBiYWNrZ3JvdW5kCnN0b3JtIGluIGRpc3RhbmNlCmJsdWUgdGFuayB0b3AKd2F2aW5nIGFuZCBzbWlsaW5nCjEgMSAxIDEKcG9ydGFsISEgZ2FtZSB2YWx2ZSBzdHlsZQpjaXR5IHJlZmxlY3Rpb24KZHJhZ29uIHJpZGVyCnNob290aW5nIHN0YXIgaW4gYmFja2dyb3VuZApnb3JnZW91cyBiYWNrZ3JvdW5kCmVwaWMgZ3JhcGhpY3MKY2xvc2UgLSBmaXR0aW5nIG51cnNlIGNvc3R1bWUKYm95IHNob3J0cwprYXdhaWkgaHEgcmVuZGVyCmdvcmdlb3VzIGZhY2UgcG9ydHJhaXQKYWVzdGhldGljIC8gYSByaW90IGluIG1hcnMKZmluZSBjb25maWRlbnRseQp3ZWFyaW5nIGEgYmxhY2sgY2F0c3VpdAphbm5hYmV0aCBjaGFzZQpib3VndWVyZWF1IGFuZCBtdWNoYQpqb2huIGJhdWVyIGFuZCBib3VndWVyZWF1CnNvZnQgcGFzdGVsIHBhbGV0dGUKbWV0YWxpYyBncmVlbgp2b2NhbApzaG9ydGluZwo0ayB0cmFpbGNhbQpuZXdzIGFyY2hpdmUKYW5vbnltb3VzIGFzIGEgY2FyCmFub255bW91cyBhcyBhIHNhdXNhZ2UKYW5vbnltb3VzIGxpb24gZmFjZQptaWxreSB3YXkgbmVidWxhCmhlcm8gY2hhcmFjdGVyCmRhcmsgY2luZW1hdGljIGF0bW9zcGhlcmUKYW50IGh1bWFub2lkIG1lY2hhbmljCnRvd2VyaW5nIG92ZXIgdGhlIGNhbWVyYQp3YWxraW5nIG92ZXIgeW91Cm5hZ2FzCmFudGhybyBhZXJvbW9ycGgKYW50aHJvIGNhdAptdXRlZCBjb21wbGVtZW50YXJ5IGNvbG9ycwpkeW5hbWljIGFjdGl2ZSBydW5uaW5nIHBvc2UKMTkyMHMgZmlsbQphbnRocm8gbGl6YXJkCnRoaW4gbGluZSB3b3JrCjEgOSA4IDAgcyBidXNpbmVzcyBmYXNoaW9uCnJ5b2hqaSBoYXNlCmJpZyBiaWNlcHMKaG9seSBjcnVzYWRlcgpob2xkaW5nIGEgZ2lhbnQgZmxhaWwKaG9sZGluZyByZXZvbHZlciBwaXN0b2xzCmJpZyB0dXJ0bGUgc2hlbGwKZW5qb3lpbmcgY29mZmVlIGF0IGEgY29mZmVlIHNob3AKd2l0aCBibGFjayBleWVnbGFzc2VzCmthdHN1aGlrYSBob2t1c2FpCmNhdCBmdXJyeQphbnRocm9wb21vcnBoaWMgY2hlZXNlIHdlZGdlCmRyYW1hdGljIGFjdGlvbiBzY2VuZQpmdWxsIGhlaWdodCBzY3VscHR1cmUKaGlnaGx5IGRldGFpbGVkIGNyZWF0dXJlCmJpenphcmUgYWR2ZW50dXJlcyBvZiBqb2pvCjE5MTBzIGZpbG0gc3RpbGwKZ29vZCBzb3VwCjEgOSAxIDAgcyBmaWxtIHNjZW5lCmFudGhyb3BvbW9ycGhpYyBmdXJyeSBvdHRlcgphbnRocm9wb21vcnBoaWMgaGVkZ2Vob2cKd2VhcmluZyBhIHN1aXQgYW5kIGdsYXNzZXMKaG9sZGluZyBhIHNjZXB0ZXIKZGFya25lc3MgYXVyYSByZWQgbGlnaHQKYW50aHJvcG9tb3JwaGljIG1hcmUKYWlyY3JhZnQgd2luZ3Mgb24gYmFjawpzbmFwIHRyYXBzIG9mIGRpb25hZWEgbXVzY2lwdWxhCmFudGhyb3BvbW9ycGhpYyBvdHRlciBpbiBjb3N0dW1lCmhvbGRpbmcgcG9sYXJvaWQgY2FtZXJhCmFtbW8gYmFuZG9saWVyCnNwaWtlIHNoZWxsCmFkdmFuY2VkIHN0YWdlIGxpZ2h0aW5nCmRhcmsgc2NpIC0gZmkgYmFja2dyb3VuZApkYXJrIGdsb3dpbmcgcmVkIGF1cmEKY2VtZW50YXJ5CnZpc2libGUgaG9seSBhdXJhCndpdGggcmlmbGUgaW4gaGFuZHMKY3JlZXB5IG1hY3JvIHBob3RvCmFudGhyb3BvbW9ycGhpYyB0dXJ0bGUKY2VsdGljIGFydApjYXJuaXZvcm91cyBwbGFudAphbGdhZSBmZWV0CmhhbGYgbWFuIGhhbGYgYW5ndXMgYnVsbApoYWxmIG1hbiBoYWxmIGFzaWFuIGJsYWNrIGJ1bGwKYmFkIGd1eQphbnRocm9wb21vcnBoaXplZCBjaGlja2VuCndhciBhcnQKaGFtYnVyZ2xhcgphbnRpY2hyaXN0IGRhbmNpbmcgYXQgc3R1ZGlvIDU0CmFudGlmYQpmYWRlZCBtZW1vcmllcwpyZWZsZWN0aW5nIGZsb3dlcgptaXN0eSBnYXJkZW4Kc29mdCBtb3JuaW5nIGxpZ2h0LiBoeXBlcnJlYWxpc20KbW9ybmluZy4gaHlwZXJyZWFsaXNtCmFudG9ueSBzdGFycgpmb3Jlc3Qgc3Bpcml0CmFudHJvcHJvbW9ycGhpYyBzdGljayBpbnNlY3QKZGlnaXRhbCBtb2RlbAphbmNpZW50IGtpbmdzIGluIHdoaXRlIHJvYmVzCmhvb2RlZCBjb3dsCmJyaWdodCBzY3JlZW4KYW54aW91cy4gaGlnaGx5IGRldGFpbGVkCmFueWEgdGF5bG9yIC0gam95IHZhbXBpcmUgcXVlZW4Kc2V4eSByZWQgZHJlc3MKYnJpZ2h0IC0gbGlnaHQgcGhvdG9ncmFwaHkKcG9ydHJhaXQgb2YgYSBmZW1hbGUgcGF0aG9sb2dpc3QKY3ViaWNhbCBtZWV0aW5nIHJvb20gb2ZmaWNlCnNreWxpbmUgc2hvd2luZyBmcm9tIHRoZSB3aW5kb3dzCmFwZSB0ZWFjaGluZyBwZXBlCndlYXJpbmcgYSBmbGFubmVsIHNoaXJ0CnBhcmlzIGNpdHkKZGVzZXJ0IGV2ZXJ5d2hlcmUKYnVpbGRpbmdzIGNvdmVyZWQgaW4gYmxhY2sgdGFyCmJyZWF0aHRha2luZyBjb2xvcnMKYXBvY2FseXB0aWMgZnV0dXJlIGNpdHkKYXBvY2FseXB0aWMgdHVtdWx0dW91cyBzZWEKcnVpbmVkIHRvd24KbGl0dGVyZWQKbWFyaWp1YW5hIHBsYW50cwpjYW5uYWJpcyBsZWF2ZXMKYXBvcGhpcwpjZmcgPSAzCm1hdGUgY29sb3JzCmRhdGluZyBhcHAgaWNvbgphcHBsZSBjYXIKY3VwZXJ0aW5vCmRhdGUKYnVpbGRpbmcgYW50aWNpcGF0aW9uCmFxdWFyaXVtIGxpZmUKZGlzc29sZGlzc29sZ2xhemUg44KrcGFpbnQgbWVsdGluZwphcmFiIHByaW5jZXNzCnBvbGlzaGVkIHN0ZWVsIGFybW9yCmFyYWJpYW4gcHJpbmNlc3MKYmx1ZSBlZGdlCm9ic2lkaWFuIG1ldGFsCmFyYWJpYW4gc2FtdXJhaQphcmFiaWFuIHdyZXN0bGluZyB3b21hbgphcmFjaG5lCmFyYWdvcm4gaW4gYW4gYW5pbWUgd29ybGQKcmVkIHllbGxvdyBmbGFnCmFyYm9yCmFyYyBkZSB0cmlvbXBoZSBmdWxsIG9mIGdyYWZmaXRpCjkgMCBzIGNvbG9ycyBhbmQgc2hhcGVzCnNoYXJwIGhpZ2ggcXVhbGl0eSBhcnR3b3JrCnN1cnJlYWwgbGlnaHRpbmcKYXJjYW5lIGxlYWd1ZSBvZiBsZWdlbmRzCmxlYXZlcyB0cmFwCnRyYXAgbWFkZSBvZiBsZWF2ZXMK',
      template: 'varTemplate1',
    },
    mediums:  {
      link: 'data:application/octet-stream;base64,YSAzRCByZW5kZXIKYSBibGFjayBhbmQgd2hpdGUgcGhvdG8KYSBicm9uemUgc2N1bHB0dXJlCmEgY2FydG9vbgphIGNhdmUgcGFpbnRpbmcKYSBjaGFyYWN0ZXIgcG9ydHJhaXQKYSBjaGFyY29hbCBkcmF3aW5nCmEgY2hpbGQncyBkcmF3aW5nCmEgY29sb3IgcGVuY2lsIHNrZXRjaAphIGNvbG9yaXplZCBwaG90bwphIGNvbWljIGJvb2sgcGFuZWwKYSBjb21wdXRlciByZW5kZXJpbmcKYSBjcm9zcyBzdGl0Y2gKYSBjdWJpc3QgcGFpbnRpbmcKYSBkZXRhaWxlZCBkcmF3aW5nCmEgZGV0YWlsZWQgbWF0dGUgcGFpbnRpbmcKYSBkZXRhaWxlZCBwYWludGluZwphIGRpYWdyYW0KYSBkaWdpdGFsIHBhaW50aW5nCmEgZGlnaXRhbCByZW5kZXJpbmcKYSBkcmF3aW5nCmEgZmluZSBhcnQgcGFpbnRpbmcKYSBmbGVtaXNoIEJhcm9xdWUKYSBnb3VhY2hlCmEgaG9sb2dyYW0KYSBoeXBlcnJlYWxpc3RpYyBwYWludGluZwphIGppZ3NhdyBwdXp6bGUKYSBsb3cgcG9seSByZW5kZXIKYSBtYWNybyBwaG90b2dyYXBoCmEgbWFuZ2EgZHJhd2luZwphIG1hcmJsZSBzY3VscHR1cmUKYSBtYXR0ZSBwYWludGluZwphIG1pY3Jvc2NvcGljIHBob3RvCmEgbWlkLW5pbmV0ZWVudGggY2VudHVyeSBlbmdyYXZpbmcKYSBtaW5pbWFsaXN0IHBhaW50aW5nCmEgbW9zYWljCmEgcGFpbnRpbmcKYSBwYXN0ZWwKYSBwZW5jaWwgc2tldGNoCmEgcGhvdG8KYSBwaG90b2NvcHkKYSBwaG90b3JlYWxpc3RpYyBwYWludGluZwphIHBpY3R1cmUKYSBwb2ludGlsbGlzbSBwYWludGluZwphIHBvbGFyb2lkIHBob3RvCmEgcG9wIGFydCBwYWludGluZwphIHBvcnRyYWl0CmEgcG9zdGVyCmEgcmF5dHJhY2VkIGltYWdlCmEgcmVuYWlzc2FuY2UgcGFpbnRpbmcKYSBzY3JlZW5wcmludAphIHNjcmVlbnNob3QKYSBzaWxrIHNjcmVlbgphIHNrZXRjaAphIHN0YXR1ZQphIHN0aWxsIGxpZmUKYSBzdGlwcGxlCmEgc3RvY2sgcGhvdG8KYSBzdG9yeWJvb2sgaWxsdXN0cmF0aW9uCmEgc3VycmVhbGlzdCBwYWludGluZwphIHN1cnJlYWxpc3Qgc2N1bHB0dXJlCmEgdGF0dG9vCmEgdGlsdCBzaGlmdCBwaG90bwphIHdhdGVyY29sb3IgcGFpbnRpbmcKYSB3aXJlZnJhbWUgZGlhZ3JhbQphIHdvb2RjdXQKYW4gYWJzdHJhY3QgZHJhd2luZwphbiBhYnN0cmFjdCBwYWludGluZwphbiBhYnN0cmFjdCBzY3VscHR1cmUKYW4gYWNyeWxpYyBwYWludGluZwphbiBhaXJicnVzaCBwYWludGluZwphbiBhbGJ1bSBjb3ZlcgphbiBhbWJpZW50IG9jY2x1c2lvbiByZW5kZXIKYW4gYW5pbWUgZHJhd2luZwphbiBhcnQgZGVjbyBwYWludGluZwphbiBhcnQgZGVjbyBzY3VscHR1cmUKYW4gZW5ncmF2aW5nCmFuIGV0Y2hpbmcKYW4gaWxsdXN0cmF0aW9uIG9mCmFuIGltcHJlc3Npb25pc3QgcGFpbnRpbmcKYW4gaW5rIGRyYXdpbmcKYW4gb2lsIG9uIGNhbnZhcyBwYWludGluZwphbiBvaWwgcGFpbnRpbmcKYW4gdWx0cmFmaW5lIGRldGFpbGVkIHBhaW50aW5nCmNoYWxrIGFydApjb21wdXRlciBncmFwaGljcwpjb25jZXB0IGFydApjeWJlcnB1bmsgYXJ0CmRpZ2l0YWwgYXJ0CmVneXB0aWFuIGFydApncmFmZml0aSBhcnQKbGluZWFydApwaXhlbCBhcnQKcG9zdGVyIGFydAp2ZWN0b3IgYXJ0Cg==',
      template: 'varTemplate1',
    },
    movements:  {
      link: 'data:application/octet-stream;base64,YWJzdHJhY3QgYXJ0CmFic3RyYWN0IGV4cHJlc3Npb25pc20KYWJzdHJhY3QgaWxsdXNpb25pc20KYWNhZGVtaWMgYXJ0CmFjdGlvbiBwYWludGluZwphZXN0aGV0aWNpc20KYWZyb2Z1dHVyaXNtCmFsdGVybW9kZXJuCmFtZXJpY2FuIGJhcmJpem9uIHNjaG9vbAphbWVyaWNhbiBpbXByZXNzaW9uaXNtCmFtZXJpY2FuIHJlYWxpc20KYW1lcmljYW4gcm9tYW50aWNpc20KYW1lcmljYW4gc2NlbmUgcGFpbnRpbmcKYW5hbHl0aWNhbCBhcnQKYW50aXBvZGVhbnMKYXJhYmVzcXVlCmFyYmVpdHNyYXQgZsO8ciBrdW5zdAphcnQgJiBsYW5ndWFnZQphcnQgYnJ1dAphcnQgZGVjbwphcnQgaW5mb3JtZWwKYXJ0IG5vdXZlYXUKYXJ0IHBob3RvZ3JhcGh5CmFydGUgcG92ZXJhCmFydHMgYW5kIGNyYWZ0cyBtb3ZlbWVudAphc2NpaSBhcnQKYXNoY2FuIHNjaG9vbAphc3NlbWJsYWdlCmF1c3RyYWxpYW4gdG9uYWxpc20KYXV0by1kZXN0cnVjdGl2ZSBhcnQKYmFyYml6b24gc2Nob29sCmJhcm9xdWUKYmF1aGF1cwpiZW5nYWwgc2Nob29sIG9mIGFydApiZXJsaW4gc2VjZXNzaW9uCmJsYWNrIGFydHMgbW92ZW1lbnQKYnJ1dGFsaXNtCmNsYXNzaWNhbCByZWFsaXNtCmNsb2lzb25uaXNtCmNvYnJhCmNvbG9yIGZpZWxkCmNvbXB1dGVyIGFydApjb25jZXB0dWFsIGFydApjb25jcmV0ZSBhcnQKY29uc3RydWN0aXZpc20KY29udGV4dCBhcnQKY3JheW9uIGFydApjcnlzdGFsIGN1YmlzbQpjdWJpc20KY3Viby1mdXR1cmlzbQpjeW5pY2FsIHJlYWxpc20KZGFkYQpkYW51YmUgc2Nob29sCmRhdS1hbC1zZXQKZGUgc3RpamwKZGVjb25zdHJ1Y3RpdmlzbQpkaWdpdGFsIGFydAplY29sb2dpY2FsIGFydAplbnZpcm9ubWVudGFsIGFydApleGNlc3NpdmlzbQpleHByZXNzaW9uaXNtCmZhbnRhc3RpYyByZWFsaXNtCmZhbnRhc3kgYXJ0CmZhdXZpc20KZmVtaW5pc3QgYXJ0CmZpZ3VyYXRpb24gbGlicmUKZmlndXJhdGl2ZSBhcnQKZmlndXJhdGl2aXNtCmZpbmUgYXJ0CmZsdXh1cwpmb2xrIGFydApmdW5rIGFydApmdXJyeSBhcnQKZnV0dXJpc20KZ2VuZXJhdGl2ZSBhcnQKZ2VvbWV0cmljIGFic3RyYWN0IGFydApnZXJtYW4gcm9tYW50aWNpc20KZ290aGljIGFydApncmFmZml0aQpndXRhaSBncm91cApoYXBwZW5pbmcKaGFybGVtIHJlbmFpc3NhbmNlCmhlaWRlbGJlcmcgc2Nob29sCmhvbG9ncmFwaHkKaHVkc29uIHJpdmVyIHNjaG9vbApodXJ1Zml5eWEKaHlwZXJtb2Rlcm5pc20KaHlwZXJyZWFsaXNtCmltcHJlc3Npb25pc20KaW5jb2hlcmVudHMKaW5zdGl0dXRpb25hbCBjcml0aXF1ZQppbnRlcmFjdGl2ZSBhcnQKaW50ZXJuYXRpb25hbCBnb3RoaWMKaW50ZXJuYXRpb25hbCB0eXBvZ3JhcGhpYyBzdHlsZQpraW5ldGljIGFydApraW5ldGljIHBvaW50aWxsaXNtCmtpdHNjaCBtb3ZlbWVudApsYW5kIGFydApsZXMgYXV0b21hdGlzdGVzCmxlcyBuYWJpcwpsZXR0ZXJpc20KbGlnaHQgYW5kIHNwYWNlCmxvd2Jyb3cKbHljbyBhcnQKbHlyaWNhbCBhYnN0cmFjdGlvbgptYWdpYyByZWFsaXNtCm1hZ2ljYWwgcmVhbGlzbQptYWlsIGFydAptYW5uZXJpc20KbWFzc3VycmVhbGlzbQptYXhpbWFsaXNtCm1ldGFwaHlzaWNhbCBwYWludGluZwptaW5nZWkKbWluaW1hbGlzbQptb2Rlcm4gZXVyb3BlYW4gaW5rIHBhaW50aW5nCm1vZGVybmlzbQptb2R1bGFyIGNvbnN0cnVjdGl2aXNtCm5haXZlIGFydApuYXR1cmFsaXNtCm5lby1kYWRhCm5lby1leHByZXNzaW9uaXNtCm5lby1mYXV2aXNtCm5lby1maWd1cmF0aXZlCm5lby1wcmltaXRpdmlzbQpuZW8tcm9tYW50aWNpc20KbmVvY2xhc3NpY2lzbQpuZW9nZW8KbmVvaXNtCm5lb3BsYXN0aWNpc20KbmV0IGFydApuZXcgb2JqZWN0aXZpdHkKbmV3IHNjdWxwdHVyZQpub3J0aHdlc3Qgc2Nob29sCm51Y2xlYXIgYXJ0Cm9iamVjdGl2ZSBhYnN0cmFjdGlvbgpvcCBhcnQKb3B0aWNhbCBpbGx1c2lvbgpvcnBoaXNtCnBhbmZ1dHVyaXNtCnBhcmlzIHNjaG9vbApwaG90b3JlYWxpc20KcGl4ZWwgYXJ0CnBsYXN0aWNpZW4KcGxlaW4gYWlyCnBvaW50aWxsaXNtCnBvcCBhcnQKcG9wIHN1cnJlYWxpc20KcG9zdC1pbXByZXNzaW9uaXNtCnBvc3RtaW5pbWFsaXNtCnByZS1yYXBoYWVsaXRpc20KcHJlY2lzaW9uaXNtCnByaW1pdGl2aXNtCnByaXZhdGUgcHJlc3MKcHJvY2VzcyBhcnQKcHN5Y2hlZGVsaWMgYXJ0CnB1cmlzbQpxYWphciBhcnQKcXVpdG8gc2Nob29sCnJhc3F1YWNoZQpyYXlvbmlzbQpyZWFsaXNtCnJlZ2lvbmFsaXNtCnJlbW9kZXJuaXNtCnJlbmFpc3NhbmNlCnJldHJvZnV0dXJpc20Kcm9jb2NvCnJvbWFuZXNxdWUKcm9tYW50aWNpc20Kc2FtaWtzaGF2YWQKc2VyaWFsIGFydApzaGluIGhhbmdhCnNob2NrIGFydApzb2NpYWxpc3QgcmVhbGlzbQpzb3RzIGFydApzcGFjZSBhcnQKc3RyZWV0IGFydApzdHVja2lzbQpzdW1hdHJhaXNtCnN1cGVyZmxhdApzdXByZW1hdGlzbQpzdXJyZWFsaXNtCnN5bWJvbGlzbQpzeW5jaHJvbWlzbQpzeW50aGV0aXNtCnPFjXNha3UgaGFuZ2EKdGFjaGlzbWUKdGVtcG9yYXJ5IGFydAp0b25hbGlzbQp0b3lpc20KdHJhbnNncmVzc2l2ZSBhcnQKdWtpeW8tZQp1bmRlcmdyb3VuZCBjb21peAp1bmlsYWxpYW5pc20KdmFuY291dmVyIHNjaG9vbAp2YW5pdGFzCnZlcmRhZGlzbQp2aWRlbyBhcnQKdmllbm5lc2UgYWN0aW9uaXNtCnZpc3VhbCBhcnQKdm9ydGljaXNtCg==',
      template: 'varTemplate1',
    },
    male:  {
      link: 'data:application/octet-stream;base64,',
      template: 'varTemplate1',
    },
    female:  {
      link: 'data:application/octet-stream;base64,',
      template: 'varTemplate1',
    },
    item:  {
      link: 'data:application/octet-stream;base64,',
      template: 'varTemplate1',
    },
    atmosphere:  {
      link: 'data:application/octet-stream;base64,',
      template: 'varTemplate1',
    },
    activity:  {
      link: 'data:application/octet-stream;base64,',
      template: 'varTemplate1',
    },
    custom:  {
      template: 'varTemplate2',
    },
    coma:  {
      template: 'varTemplate3',
    },
  };